
CargoSorting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000005e  00800200  00800200  00000f78  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000288  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002229  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000436  00000000  00000000  00003459  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000158e  00000000  00000000  0000388f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000670  00000000  00000000  00004e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000072d  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013a8  00000000  00000000  00005bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002f0  00000000  00000000  00006f65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	c8 c1       	rjmp	.+912    	; 0x396 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	b1 c2       	rjmp	.+1378   	; 0x578 <__vector_5>
  16:	00 00       	nop
  18:	8a c2       	rjmp	.+1300   	; 0x52e <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 35       	cpi	r26, 0x5E	; 94
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	cb d5       	rcall	.+2966   	; 0xcb6 <main>
 120:	ef c6       	rjmp	.+3550   	; 0xf00 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_set_4bit+0x4>
 12c:	00 00       	nop
 12e:	40 98       	cbi	0x08, 0	; 8
 130:	41 98       	cbi	0x08, 1	; 8
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	88 b9       	out	0x08, r24	; 8
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	97 e4       	ldi	r25, 0x47	; 71
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_set_4bit+0x1e>
 142:	00 00       	nop
 144:	42 98       	cbi	0x08, 2	; 8
 146:	86 e6       	ldi	r24, 0x66	; 102
 148:	9e e0       	ldi	r25, 0x0E	; 14
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_set_4bit+0x26>
 14e:	00 00       	nop
 150:	40 98       	cbi	0x08, 0	; 8
 152:	41 98       	cbi	0x08, 1	; 8
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	88 b9       	out	0x08, r24	; 8
 158:	42 9a       	sbi	0x08, 2	; 8
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	97 e4       	ldi	r25, 0x47	; 71
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_set_4bit+0x40>
 164:	00 00       	nop
 166:	42 98       	cbi	0x08, 2	; 8
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	9e e0       	ldi	r25, 0x0E	; 14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x48>
 170:	00 00       	nop
 172:	40 98       	cbi	0x08, 0	; 8
 174:	41 98       	cbi	0x08, 1	; 8
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	88 b9       	out	0x08, r24	; 8
 17a:	42 9a       	sbi	0x08, 2	; 8
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	97 e4       	ldi	r25, 0x47	; 71
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x5c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_set_4bit+0x62>
 186:	00 00       	nop
 188:	42 98       	cbi	0x08, 2	; 8
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x6a>
 192:	00 00       	nop
 194:	40 98       	cbi	0x08, 0	; 8
 196:	41 98       	cbi	0x08, 1	; 8
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	42 9a       	sbi	0x08, 2	; 8
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	97 e4       	ldi	r25, 0x47	; 71
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x7e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x84>
 1a8:	00 00       	nop
 1aa:	42 98       	cbi	0x08, 2	; 8
 1ac:	08 95       	ret

000001ae <lcd_wr_command>:
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	28 2f       	mov	r18, r24
 1b8:	20 7f       	andi	r18, 0xF0	; 240
 1ba:	92 2b       	or	r25, r18
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	41 98       	cbi	0x08, 1	; 8
 1c2:	42 9a       	sbi	0x08, 2	; 8
 1c4:	ef ef       	ldi	r30, 0xFF	; 255
 1c6:	f7 e4       	ldi	r31, 0x47	; 71
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x1a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_wr_command+0x20>
 1ce:	00 00       	nop
 1d0:	42 98       	cbi	0x08, 2	; 8
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	9f 70       	andi	r25, 0x0F	; 15
 1d6:	98 b9       	out	0x08, r25	; 8
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	40 98       	cbi	0x08, 0	; 8
 1e4:	41 98       	cbi	0x08, 1	; 8
 1e6:	42 9a       	sbi	0x08, 2	; 8
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	97 e4       	ldi	r25, 0x47	; 71
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_wr_command+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_wr_command+0x44>
 1f2:	00 00       	nop
 1f4:	42 98       	cbi	0x08, 2	; 8
 1f6:	08 95       	ret

000001f8 <lcd_init>:
 1f8:	95 df       	rcall	.-214    	; 0x124 <lcd_set_4bit>
 1fa:	86 e6       	ldi	r24, 0x66	; 102
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x6>
 202:	00 00       	nop
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	d3 df       	rcall	.-90     	; 0x1ae <lcd_wr_command>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	d1 df       	rcall	.-94     	; 0x1ae <lcd_wr_command>
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	cf df       	rcall	.-98     	; 0x1ae <lcd_wr_command>
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	cd df       	rcall	.-102    	; 0x1ae <lcd_wr_command>
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	cb cf       	rjmp	.-106    	; 0x1ae <lcd_wr_command>
 218:	08 95       	ret

0000021a <timer5_init>:
 21a:	e1 e2       	ldi	r30, 0x21	; 33
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	10 82       	st	Z, r1
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	80 93 25 01 	sts	0x0125, r24
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	90 93 24 01 	sts	0x0124, r25
 22c:	10 92 29 01 	sts	0x0129, r1
 230:	80 93 28 01 	sts	0x0128, r24
 234:	10 92 2b 01 	sts	0x012B, r1
 238:	80 93 2a 01 	sts	0x012A, r24
 23c:	10 92 2d 01 	sts	0x012D, r1
 240:	80 93 2c 01 	sts	0x012C, r24
 244:	89 ea       	ldi	r24, 0xA9	; 169
 246:	80 93 20 01 	sts	0x0120, r24
 24a:	8b e0       	ldi	r24, 0x0B	; 11
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <motion_pin_config>:
 250:	81 b1       	in	r24, 0x01	; 1
 252:	8f 60       	ori	r24, 0x0F	; 15
 254:	81 b9       	out	0x01, r24	; 1
 256:	82 b1       	in	r24, 0x02	; 2
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	82 b9       	out	0x02, r24	; 2
 25c:	ea e0       	ldi	r30, 0x0A	; 10
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	80 81       	ld	r24, Z
 262:	88 61       	ori	r24, 0x18	; 24
 264:	80 83       	st	Z, r24
 266:	eb e0       	ldi	r30, 0x0B	; 11
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	80 81       	ld	r24, Z
 26c:	88 61       	ori	r24, 0x18	; 24
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret

00000272 <motion_set>:
 272:	92 b1       	in	r25, 0x02	; 2
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	98 2b       	or	r25, r24
 27a:	92 b9       	out	0x02, r25	; 2
 27c:	08 95       	ret

0000027e <forward>:
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	f8 cf       	rjmp	.-16     	; 0x272 <motion_set>
 282:	08 95       	ret

00000284 <left>:
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	f5 cf       	rjmp	.-22     	; 0x272 <motion_set>
 288:	08 95       	ret

0000028a <right>:
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	f2 cf       	rjmp	.-28     	; 0x272 <motion_set>
 28e:	08 95       	ret

00000290 <soft_left>:
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	ef cf       	rjmp	.-34     	; 0x272 <motion_set>
 294:	08 95       	ret

00000296 <soft_right>:
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	ec cf       	rjmp	.-40     	; 0x272 <motion_set>
 29a:	08 95       	ret

0000029c <soft_left_2>:
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	e9 cf       	rjmp	.-46     	; 0x272 <motion_set>
 2a0:	08 95       	ret

000002a2 <soft_right_2>:
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	e6 cf       	rjmp	.-52     	; 0x272 <motion_set>
 2a6:	08 95       	ret

000002a8 <stop>:
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	e3 cf       	rjmp	.-58     	; 0x272 <motion_set>
 2ac:	08 95       	ret

000002ae <lcd_port_config>:
 2ae:	87 b1       	in	r24, 0x07	; 7
 2b0:	87 6f       	ori	r24, 0xF7	; 247
 2b2:	87 b9       	out	0x07, r24	; 7
 2b4:	88 b1       	in	r24, 0x08	; 8
 2b6:	80 78       	andi	r24, 0x80	; 128
 2b8:	88 b9       	out	0x08, r24	; 8
 2ba:	08 95       	ret

000002bc <color_sensor_pin_config>:
 2bc:	8a b1       	in	r24, 0x0a	; 10
 2be:	8e 6f       	ori	r24, 0xFE	; 254
 2c0:	8a b9       	out	0x0a, r24	; 10
 2c2:	58 9a       	sbi	0x0b, 0	; 11
 2c4:	08 95       	ret

000002c6 <adc_pin_config>:
 2c6:	10 ba       	out	0x10, r1	; 16
 2c8:	11 ba       	out	0x11, r1	; 17
 2ca:	10 92 07 01 	sts	0x0107, r1
 2ce:	10 92 08 01 	sts	0x0108, r1
 2d2:	08 95       	ret

000002d4 <servo1_pin_config>:
 2d4:	25 9a       	sbi	0x04, 5	; 4
 2d6:	2d 9a       	sbi	0x05, 5	; 5
 2d8:	08 95       	ret

000002da <servo2_pin_config>:
 2da:	26 9a       	sbi	0x04, 6	; 4
 2dc:	2e 9a       	sbi	0x05, 6	; 5
 2de:	08 95       	ret

000002e0 <servo3_pin_config>:
 2e0:	27 9a       	sbi	0x04, 7	; 4
 2e2:	2f 9a       	sbi	0x05, 7	; 5
 2e4:	08 95       	ret

000002e6 <timer1_init>:
 2e6:	e1 e8       	ldi	r30, 0x81	; 129
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	10 82       	st	Z, r1
 2ec:	8c ef       	ldi	r24, 0xFC	; 252
 2ee:	80 93 85 00 	sts	0x0085, r24
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 84 00 	sts	0x0084, r24
 2f8:	93 e0       	ldi	r25, 0x03	; 3
 2fa:	90 93 89 00 	sts	0x0089, r25
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	80 93 88 00 	sts	0x0088, r24
 304:	90 93 8b 00 	sts	0x008B, r25
 308:	80 93 8a 00 	sts	0x008A, r24
 30c:	90 93 8d 00 	sts	0x008D, r25
 310:	80 93 8c 00 	sts	0x008C, r24
 314:	90 93 87 00 	sts	0x0087, r25
 318:	80 93 86 00 	sts	0x0086, r24
 31c:	8b ea       	ldi	r24, 0xAB	; 171
 31e:	80 93 80 00 	sts	0x0080, r24
 322:	10 92 82 00 	sts	0x0082, r1
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	80 83       	st	Z, r24
 32a:	08 95       	ret

0000032c <port_init>:
 32c:	c0 df       	rcall	.-128    	; 0x2ae <lcd_port_config>
 32e:	cb df       	rcall	.-106    	; 0x2c6 <adc_pin_config>
 330:	3b 9a       	sbi	0x07, 3	; 7
 332:	43 98       	cbi	0x08, 3	; 8
 334:	cf df       	rcall	.-98     	; 0x2d4 <servo1_pin_config>
 336:	d1 df       	rcall	.-94     	; 0x2da <servo2_pin_config>
 338:	d3 df       	rcall	.-90     	; 0x2e0 <servo3_pin_config>
 33a:	c0 cf       	rjmp	.-128    	; 0x2bc <color_sensor_pin_config>
 33c:	08 95       	ret

0000033e <buzzer_on>:
 33e:	86 b1       	in	r24, 0x06	; 6
 340:	88 60       	ori	r24, 0x08	; 8
 342:	88 b9       	out	0x08, r24	; 8
 344:	08 95       	ret

00000346 <buzzer_off>:
 346:	86 b1       	in	r24, 0x06	; 6
 348:	87 7f       	andi	r24, 0xF7	; 247
 34a:	88 b9       	out	0x08, r24	; 8
 34c:	08 95       	ret

0000034e <ADC_Conversion>:
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	18 f0       	brcs	.+6      	; 0x358 <ADC_Conversion+0xa>
 352:	98 e0       	ldi	r25, 0x08	; 8
 354:	90 93 7b 00 	sts	0x007B, r25
 358:	87 70       	andi	r24, 0x07	; 7
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	80 93 7c 00 	sts	0x007C, r24
 360:	ea e7       	ldi	r30, 0x7A	; 122
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	80 64       	ori	r24, 0x40	; 64
 368:	80 83       	st	Z, r24
 36a:	80 81       	ld	r24, Z
 36c:	84 ff       	sbrs	r24, 4
 36e:	fd cf       	rjmp	.-6      	; 0x36a <ADC_Conversion+0x1c>
 370:	80 91 79 00 	lds	r24, 0x0079
 374:	ea e7       	ldi	r30, 0x7A	; 122
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	90 81       	ld	r25, Z
 37a:	90 61       	ori	r25, 0x10	; 16
 37c:	90 83       	st	Z, r25
 37e:	10 92 7b 00 	sts	0x007B, r1
 382:	08 95       	ret

00000384 <color_sensor_pin_interrupt_init>:
 384:	f8 94       	cli
 386:	e9 e6       	ldi	r30, 0x69	; 105
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	80 83       	st	Z, r24
 390:	e8 9a       	sbi	0x1d, 0	; 29
 392:	78 94       	sei
 394:	08 95       	ret

00000396 <__vector_1>:
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	80 91 03 02 	lds	r24, 0x0203
 3ac:	90 91 04 02 	lds	r25, 0x0204
 3b0:	a0 91 05 02 	lds	r26, 0x0205
 3b4:	b0 91 06 02 	lds	r27, 0x0206
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	a1 1d       	adc	r26, r1
 3bc:	b1 1d       	adc	r27, r1
 3be:	80 93 03 02 	sts	0x0203, r24
 3c2:	90 93 04 02 	sts	0x0204, r25
 3c6:	a0 93 05 02 	sts	0x0205, r26
 3ca:	b0 93 06 02 	sts	0x0206, r27
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <adc_init>:
 3e0:	ea e7       	ldi	r30, 0x7A	; 122
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	10 82       	st	Z, r1
 3e6:	10 92 7b 00 	sts	0x007B, r1
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	80 93 7c 00 	sts	0x007C, r24
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	80 bf       	out	0x30, r24	; 48
 3f4:	86 e8       	ldi	r24, 0x86	; 134
 3f6:	80 83       	st	Z, r24
 3f8:	08 95       	ret

000003fa <filter_red>:
 3fa:	5e 98       	cbi	0x0b, 6	; 11
 3fc:	5f 98       	cbi	0x0b, 7	; 11
 3fe:	08 95       	ret

00000400 <filter_green>:
 400:	5e 9a       	sbi	0x0b, 6	; 11
 402:	5f 9a       	sbi	0x0b, 7	; 11
 404:	08 95       	ret

00000406 <filter_blue>:
 406:	5e 98       	cbi	0x0b, 6	; 11
 408:	5f 9a       	sbi	0x0b, 7	; 11
 40a:	08 95       	ret

0000040c <color_sensor_scaling>:
 40c:	5c 9a       	sbi	0x0b, 4	; 11
 40e:	5d 9a       	sbi	0x0b, 5	; 11
 410:	08 95       	ret

00000412 <red_read>:
 412:	f3 df       	rcall	.-26     	; 0x3fa <filter_red>
 414:	10 92 03 02 	sts	0x0203, r1
 418:	10 92 04 02 	sts	0x0204, r1
 41c:	10 92 05 02 	sts	0x0205, r1
 420:	10 92 06 02 	sts	0x0206, r1
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	8f e7       	ldi	r24, 0x7F	; 127
 428:	94 e0       	ldi	r25, 0x04	; 4
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <red_read+0x18>
 432:	00 c0       	rjmp	.+0      	; 0x434 <red_read+0x22>
 434:	00 00       	nop
 436:	80 91 03 02 	lds	r24, 0x0203
 43a:	90 91 04 02 	lds	r25, 0x0204
 43e:	a0 91 05 02 	lds	r26, 0x0205
 442:	b0 91 06 02 	lds	r27, 0x0206
 446:	80 93 27 02 	sts	0x0227, r24
 44a:	90 93 28 02 	sts	0x0228, r25
 44e:	a0 93 29 02 	sts	0x0229, r26
 452:	b0 93 2a 02 	sts	0x022A, r27
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	9c e2       	ldi	r25, 0x2C	; 44
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <red_read+0x4a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <red_read+0x54>
 466:	00 00       	nop
 468:	08 95       	ret

0000046a <green_read>:
 46a:	ca df       	rcall	.-108    	; 0x400 <filter_green>
 46c:	10 92 03 02 	sts	0x0203, r1
 470:	10 92 04 02 	sts	0x0204, r1
 474:	10 92 05 02 	sts	0x0205, r1
 478:	10 92 06 02 	sts	0x0206, r1
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	8f e7       	ldi	r24, 0x7F	; 127
 480:	94 e0       	ldi	r25, 0x04	; 4
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <green_read+0x18>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <green_read+0x22>
 48c:	00 00       	nop
 48e:	80 91 03 02 	lds	r24, 0x0203
 492:	90 91 04 02 	lds	r25, 0x0204
 496:	a0 91 05 02 	lds	r26, 0x0205
 49a:	b0 91 06 02 	lds	r27, 0x0206
 49e:	80 93 23 02 	sts	0x0223, r24
 4a2:	90 93 24 02 	sts	0x0224, r25
 4a6:	a0 93 25 02 	sts	0x0225, r26
 4aa:	b0 93 26 02 	sts	0x0226, r27
 4ae:	08 95       	ret

000004b0 <blue_read>:
 4b0:	aa df       	rcall	.-172    	; 0x406 <filter_blue>
 4b2:	10 92 03 02 	sts	0x0203, r1
 4b6:	10 92 04 02 	sts	0x0204, r1
 4ba:	10 92 05 02 	sts	0x0205, r1
 4be:	10 92 06 02 	sts	0x0206, r1
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	8f e7       	ldi	r24, 0x7F	; 127
 4c6:	94 e0       	ldi	r25, 0x04	; 4
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <blue_read+0x18>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <blue_read+0x22>
 4d2:	00 00       	nop
 4d4:	80 91 03 02 	lds	r24, 0x0203
 4d8:	90 91 04 02 	lds	r25, 0x0204
 4dc:	a0 91 05 02 	lds	r26, 0x0205
 4e0:	b0 91 06 02 	lds	r27, 0x0206
 4e4:	80 93 19 02 	sts	0x0219, r24
 4e8:	90 93 1a 02 	sts	0x021A, r25
 4ec:	a0 93 1b 02 	sts	0x021B, r26
 4f0:	b0 93 1c 02 	sts	0x021C, r27
 4f4:	08 95       	ret

000004f6 <left_encoder_pin_config>:
 4f6:	6c 98       	cbi	0x0d, 4	; 13
 4f8:	74 9a       	sbi	0x0e, 4	; 14
 4fa:	08 95       	ret

000004fc <right_encoder_pin_config>:
 4fc:	6d 98       	cbi	0x0d, 5	; 13
 4fe:	75 9a       	sbi	0x0e, 5	; 14
 500:	08 95       	ret

00000502 <port_init_poz>:
 502:	a6 de       	rcall	.-692    	; 0x250 <motion_pin_config>
 504:	f8 df       	rcall	.-16     	; 0x4f6 <left_encoder_pin_config>
 506:	fa cf       	rjmp	.-12     	; 0x4fc <right_encoder_pin_config>
 508:	08 95       	ret

0000050a <left_position_encoder_interrupt_init>:
 50a:	f8 94       	cli
 50c:	ea e6       	ldi	r30, 0x6A	; 106
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	82 60       	ori	r24, 0x02	; 2
 514:	80 83       	st	Z, r24
 516:	ec 9a       	sbi	0x1d, 4	; 29
 518:	78 94       	sei
 51a:	08 95       	ret

0000051c <right_position_encoder_interrupt_init>:
 51c:	f8 94       	cli
 51e:	ea e6       	ldi	r30, 0x6A	; 106
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	88 60       	ori	r24, 0x08	; 8
 526:	80 83       	st	Z, r24
 528:	ed 9a       	sbi	0x1d, 5	; 29
 52a:	78 94       	sei
 52c:	08 95       	ret

0000052e <__vector_6>:
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	80 91 07 02 	lds	r24, 0x0207
 544:	90 91 08 02 	lds	r25, 0x0208
 548:	a0 91 09 02 	lds	r26, 0x0209
 54c:	b0 91 0a 02 	lds	r27, 0x020A
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	a1 1d       	adc	r26, r1
 554:	b1 1d       	adc	r27, r1
 556:	80 93 07 02 	sts	0x0207, r24
 55a:	90 93 08 02 	sts	0x0208, r25
 55e:	a0 93 09 02 	sts	0x0209, r26
 562:	b0 93 0a 02 	sts	0x020A, r27
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <__vector_5>:
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	9f 93       	push	r25
 586:	af 93       	push	r26
 588:	bf 93       	push	r27
 58a:	80 91 0b 02 	lds	r24, 0x020B
 58e:	90 91 0c 02 	lds	r25, 0x020C
 592:	a0 91 0d 02 	lds	r26, 0x020D
 596:	b0 91 0e 02 	lds	r27, 0x020E
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	a1 1d       	adc	r26, r1
 59e:	b1 1d       	adc	r27, r1
 5a0:	80 93 0b 02 	sts	0x020B, r24
 5a4:	90 93 0c 02 	sts	0x020C, r25
 5a8:	a0 93 0d 02 	sts	0x020D, r26
 5ac:	b0 93 0e 02 	sts	0x020E, r27
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <linear_distance_mm>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	bc 01       	movw	r22, r24
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0b d4       	rcall	.+2070   	; 0xde4 <__floatunsisf>
 5ce:	25 ee       	ldi	r18, 0xE5	; 229
 5d0:	30 ed       	ldi	r19, 0xD0	; 208
 5d2:	4a ea       	ldi	r20, 0xAA	; 170
 5d4:	50 e4       	ldi	r21, 0x40	; 64
 5d6:	72 d3       	rcall	.+1764   	; 0xcbc <__divsf3>
 5d8:	d9 d3       	rcall	.+1970   	; 0xd8c <__fixunssfsi>
 5da:	10 92 07 02 	sts	0x0207, r1
 5de:	10 92 08 02 	sts	0x0208, r1
 5e2:	10 92 09 02 	sts	0x0209, r1
 5e6:	10 92 0a 02 	sts	0x020A, r1
 5ea:	00 91 07 02 	lds	r16, 0x0207
 5ee:	10 91 08 02 	lds	r17, 0x0208
 5f2:	20 91 09 02 	lds	r18, 0x0209
 5f6:	30 91 0a 02 	lds	r19, 0x020A
 5fa:	60 17       	cp	r22, r16
 5fc:	71 07       	cpc	r23, r17
 5fe:	82 07       	cpc	r24, r18
 600:	93 07       	cpc	r25, r19
 602:	98 f7       	brcc	.-26     	; 0x5ea <linear_distance_mm+0x28>
 604:	51 de       	rcall	.-862    	; 0x2a8 <stop>
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <forward_mm>:
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ec 01       	movw	r28, r24
 612:	35 de       	rcall	.-918    	; 0x27e <forward>
 614:	ce 01       	movw	r24, r28
 616:	d5 df       	rcall	.-86     	; 0x5c2 <linear_distance_mm>
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <init_devices>:
 61e:	f8 94       	cli
 620:	70 df       	rcall	.-288    	; 0x502 <port_init_poz>
 622:	73 df       	rcall	.-282    	; 0x50a <left_position_encoder_interrupt_init>
 624:	7b df       	rcall	.-266    	; 0x51c <right_position_encoder_interrupt_init>
 626:	82 de       	rcall	.-764    	; 0x32c <port_init>
 628:	ad de       	rcall	.-678    	; 0x384 <color_sensor_pin_interrupt_init>
 62a:	da de       	rcall	.-588    	; 0x3e0 <adc_init>
 62c:	11 de       	rcall	.-990    	; 0x250 <motion_pin_config>
 62e:	f5 dd       	rcall	.-1046   	; 0x21a <timer5_init>
 630:	5a de       	rcall	.-844    	; 0x2e6 <timer1_init>
 632:	78 94       	sei
 634:	08 95       	ret

00000636 <set_color>:
unsigned char adj;


void set_color()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	8a de       	rcall	.-748    	; 0x34e <ADC_Conversion>
 63a:	80 93 02 02 	sts	0x0202, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	86 de       	rcall	.-756    	; 0x34e <ADC_Conversion>
 642:	80 93 01 02 	sts	0x0201, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	82 de       	rcall	.-764    	; 0x34e <ADC_Conversion>
 64a:	80 93 00 02 	sts	0x0200, r24
 64e:	08 95       	ret

00000650 <turnLeft>:


void turnLeft()	//turns the robo left
{
	
	forward_mm(60);
 650:	8c e3       	ldi	r24, 0x3C	; 60
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	db df       	rcall	.-74     	; 0x60c <forward_mm>
	left();
 656:	16 de       	rcall	.-980    	; 0x284 <left>
	while(ADC_Conversion(2)<40);
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	79 de       	rcall	.-782    	; 0x34e <ADC_Conversion>
 65c:	88 32       	cpi	r24, 0x28	; 40
 65e:	e0 f3       	brcs	.-8      	; 0x658 <turnLeft+0x8>
	stop();
 660:	23 ce       	rjmp	.-954    	; 0x2a8 <stop>
 662:	08 95       	ret

00000664 <Delay>:
}

char Delay(int tim)
{
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	8c 01       	movw	r16, r24
	int i;
	for(i=0;i<tim && ADC_Conversion(2)<0x28;i++)
 66e:	18 16       	cp	r1, r24
 670:	19 06       	cpc	r1, r25
 672:	8c f4       	brge	.+34     	; 0x696 <Delay+0x32>
 674:	c0 e0       	ldi	r28, 0x00	; 0
 676:	d0 e0       	ldi	r29, 0x00	; 0
 678:	09 c0       	rjmp	.+18     	; 0x68c <Delay+0x28>
 67a:	86 e6       	ldi	r24, 0x66	; 102
 67c:	9e e0       	ldi	r25, 0x0E	; 14
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <Delay+0x1a>
 682:	00 00       	nop
 684:	21 96       	adiw	r28, 0x01	; 1
 686:	c0 17       	cp	r28, r16
 688:	d1 07       	cpc	r29, r17
 68a:	39 f0       	breq	.+14     	; 0x69a <Delay+0x36>
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	5f de       	rcall	.-834    	; 0x34e <ADC_Conversion>
 690:	88 32       	cpi	r24, 0x28	; 40
 692:	98 f3       	brcs	.-26     	; 0x67a <Delay+0x16>
 694:	02 c0       	rjmp	.+4      	; 0x69a <Delay+0x36>
 696:	c0 e0       	ldi	r28, 0x00	; 0
 698:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		_delay_ms(1);
	}
	stop();
 69a:	06 de       	rcall	.-1012   	; 0x2a8 <stop>
	if(i<tim)
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	c0 17       	cp	r28, r16
 6a0:	d1 07       	cpc	r29, r17
 6a2:	0c f0       	brlt	.+2      	; 0x6a6 <Delay+0x42>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else return 0;
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	08 95       	ret

000006b0 <semiCorrect_Indicator>:

void semiCorrect_Indicator()
{
	
	
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
 6b0:	80 91 01 02 	lds	r24, 0x0201
 6b4:	89 32       	cpi	r24, 0x29	; 41
 6b6:	40 f0       	brcs	.+16     	; 0x6c8 <semiCorrect_Indicator+0x18>
 6b8:	90 91 02 02 	lds	r25, 0x0202
 6bc:	99 32       	cpi	r25, 0x29	; 41
 6be:	08 f5       	brcc	.+66     	; 0x702 <semiCorrect_Indicator+0x52>
 6c0:	90 91 00 02 	lds	r25, 0x0200
 6c4:	99 32       	cpi	r25, 0x29	; 41
 6c6:	e8 f4       	brcc	.+58     	; 0x702 <semiCorrect_Indicator+0x52>
	{
		return;
	}
	if(Center_white_line<40)
 6c8:	88 32       	cpi	r24, 0x28	; 40
 6ca:	d8 f4       	brcc	.+54     	; 0x702 <semiCorrect_Indicator+0x52>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
 6cc:	80 91 02 02 	lds	r24, 0x0202
 6d0:	89 32       	cpi	r24, 0x29	; 41
 6d2:	58 f0       	brcs	.+22     	; 0x6ea <semiCorrect_Indicator+0x3a>
 6d4:	90 91 00 02 	lds	r25, 0x0200
 6d8:	98 32       	cpi	r25, 0x28	; 40
 6da:	38 f4       	brcc	.+14     	; 0x6ea <semiCorrect_Indicator+0x3a>
		{
			while((Center_white_line<0x28))
			{		
				left();
 6dc:	d3 dd       	rcall	.-1114   	; 0x284 <left>
				set_color();
 6de:	ab df       	rcall	.-170    	; 0x636 <set_color>
	}
	if(Center_white_line<40)
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
			while((Center_white_line<0x28))
 6e0:	80 91 01 02 	lds	r24, 0x0201
 6e4:	88 32       	cpi	r24, 0x28	; 40
 6e6:	d0 f3       	brcs	.-12     	; 0x6dc <semiCorrect_Indicator+0x2c>
 6e8:	08 95       	ret
			{		
				left();
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
 6ea:	90 91 00 02 	lds	r25, 0x0200
 6ee:	99 32       	cpi	r25, 0x29	; 41
 6f0:	40 f0       	brcs	.+16     	; 0x702 <semiCorrect_Indicator+0x52>
 6f2:	88 32       	cpi	r24, 0x28	; 40
 6f4:	30 f4       	brcc	.+12     	; 0x702 <semiCorrect_Indicator+0x52>
		{
			while((Center_white_line<0x28))
			{
				right();
 6f6:	c9 dd       	rcall	.-1134   	; 0x28a <right>
				set_color();
 6f8:	9e df       	rcall	.-196    	; 0x636 <set_color>
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			while((Center_white_line<0x28))
 6fa:	80 91 01 02 	lds	r24, 0x0201
 6fe:	88 32       	cpi	r24, 0x28	; 40
 700:	d0 f3       	brcs	.-12     	; 0x6f6 <semiCorrect_Indicator+0x46>
 702:	08 95       	ret

00000704 <correct>:
		}
	}
	
}
void correct()
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
	unsigned int i=50;
	stop();
 708:	cf dd       	rcall	.-1122   	; 0x2a8 <stop>
	}
	
}
void correct()
{
	unsigned int i=50;
 70a:	c2 e3       	ldi	r28, 0x32	; 50
 70c:	d0 e0       	ldi	r29, 0x00	; 0
	stop();
	while(1)
	{
		left();
 70e:	ba dd       	rcall	.-1164   	; 0x284 <left>
		if(Delay(i))
 710:	ce 01       	movw	r24, r28
 712:	a8 df       	rcall	.-176    	; 0x664 <Delay>
 714:	81 11       	cpse	r24, r1
 716:	16 c0       	rjmp	.+44     	; 0x744 <correct+0x40>
			return;
		stop();
 718:	c7 dd       	rcall	.-1138   	; 0x2a8 <stop>
	
		semiCorrect_Indicator();
 71a:	ca df       	rcall	.-108    	; 0x6b0 <semiCorrect_Indicator>
		if(ADC_Conversion(2)>40)
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	17 de       	rcall	.-978    	; 0x34e <ADC_Conversion>
 720:	89 32       	cpi	r24, 0x29	; 41
 722:	78 f4       	brcc	.+30     	; 0x742 <correct+0x3e>
			break;
	
		i+=50;
		right();
 724:	b2 dd       	rcall	.-1180   	; 0x28a <right>
		if(Delay(i))
 726:	ce 01       	movw	r24, r28
 728:	c2 96       	adiw	r24, 0x32	; 50
 72a:	9c df       	rcall	.-200    	; 0x664 <Delay>
 72c:	81 11       	cpse	r24, r1
 72e:	0a c0       	rjmp	.+20     	; 0x744 <correct+0x40>
			return;
		stop();
 730:	bb dd       	rcall	.-1162   	; 0x2a8 <stop>
		
		semiCorrect_Indicator();
 732:	be df       	rcall	.-132    	; 0x6b0 <semiCorrect_Indicator>
		if(ADC_Conversion(2)>40)
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	0b de       	rcall	.-1002   	; 0x34e <ADC_Conversion>
 738:	89 32       	cpi	r24, 0x29	; 41
 73a:	18 f4       	brcc	.+6      	; 0x742 <correct+0x3e>
			break;
		i+=50;
 73c:	cc 59       	subi	r28, 0x9C	; 156
 73e:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
 740:	e6 cf       	rjmp	.-52     	; 0x70e <correct+0xa>
	stop();
 742:	b2 dd       	rcall	.-1180   	; 0x2a8 <stop>
	return;
}
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <initialCorrect_Indicator>:
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 74a:	88 ec       	ldi	r24, 0xC8	; 200
 74c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 750:	80 93 2a 01 	sts	0x012A, r24
void initialCorrect_Indicator()
{
	int flag=0;
	
	velocity(correct_v,correct_v);
	if(Center_white_line<40)
 754:	80 91 01 02 	lds	r24, 0x0201
 758:	88 32       	cpi	r24, 0x28	; 40
 75a:	80 f5       	brcc	.+96     	; 0x7bc <initialCorrect_Indicator+0x72>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
 75c:	80 91 02 02 	lds	r24, 0x0202
 760:	89 32       	cpi	r24, 0x29	; 41
 762:	a0 f0       	brcs	.+40     	; 0x78c <initialCorrect_Indicator+0x42>
 764:	90 91 00 02 	lds	r25, 0x0200
 768:	98 32       	cpi	r25, 0x28	; 40
 76a:	80 f4       	brcc	.+32     	; 0x78c <initialCorrect_Indicator+0x42>
 76c:	02 c0       	rjmp	.+4      	; 0x772 <initialCorrect_Indicator+0x28>
		{
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
 76e:	8a dd       	rcall	.-1260   	; 0x284 <left>
				set_color();
 770:	62 df       	rcall	.-316    	; 0x636 <set_color>
	if(Center_white_line<40)
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
 772:	80 91 01 02 	lds	r24, 0x0201
 776:	89 32       	cpi	r24, 0x29	; 41
 778:	d0 f3       	brcs	.-12     	; 0x76e <initialCorrect_Indicator+0x24>
 77a:	80 91 02 02 	lds	r24, 0x0202
 77e:	88 32       	cpi	r24, 0x28	; 40
 780:	b0 f7       	brcc	.-20     	; 0x76e <initialCorrect_Indicator+0x24>
 782:	80 91 00 02 	lds	r24, 0x0200
 786:	88 32       	cpi	r24, 0x28	; 40
 788:	90 f7       	brcc	.-28     	; 0x76e <initialCorrect_Indicator+0x24>
 78a:	27 c0       	rjmp	.+78     	; 0x7da <initialCorrect_Indicator+0x90>
			{
				left();
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
 78c:	90 91 00 02 	lds	r25, 0x0200
 790:	99 32       	cpi	r25, 0x29	; 41
 792:	90 f0       	brcs	.+36     	; 0x7b8 <initialCorrect_Indicator+0x6e>
 794:	88 32       	cpi	r24, 0x28	; 40
 796:	80 f4       	brcc	.+32     	; 0x7b8 <initialCorrect_Indicator+0x6e>
 798:	02 c0       	rjmp	.+4      	; 0x79e <initialCorrect_Indicator+0x54>
		{
			flag=1;			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
 79a:	77 dd       	rcall	.-1298   	; 0x28a <right>
				set_color();
 79c:	4c df       	rcall	.-360    	; 0x636 <set_color>
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
 79e:	80 91 01 02 	lds	r24, 0x0201
 7a2:	89 32       	cpi	r24, 0x29	; 41
 7a4:	d0 f3       	brcs	.-12     	; 0x79a <initialCorrect_Indicator+0x50>
 7a6:	80 91 02 02 	lds	r24, 0x0202
 7aa:	88 32       	cpi	r24, 0x28	; 40
 7ac:	b0 f7       	brcc	.-20     	; 0x79a <initialCorrect_Indicator+0x50>
 7ae:	80 91 00 02 	lds	r24, 0x0200
 7b2:	88 32       	cpi	r24, 0x28	; 40
 7b4:	90 f7       	brcc	.-28     	; 0x79a <initialCorrect_Indicator+0x50>
 7b6:	11 c0       	rjmp	.+34     	; 0x7da <initialCorrect_Indicator+0x90>
			}			
		}
		else
		{
			flag=1;
			correct();
 7b8:	a5 df       	rcall	.-182    	; 0x704 <correct>
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <initialCorrect_Indicator+0x90>
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
 7bc:	80 91 02 02 	lds	r24, 0x0202
 7c0:	89 32       	cpi	r24, 0x29	; 41
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <initialCorrect_Indicator+0x82>
 7c4:	90 91 00 02 	lds	r25, 0x0200
 7c8:	98 32       	cpi	r25, 0x28	; 40
 7ca:	40 f0       	brcs	.+16     	; 0x7dc <initialCorrect_Indicator+0x92>
		{
			return;
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
 7cc:	88 32       	cpi	r24, 0x28	; 40
 7ce:	20 f4       	brcc	.+8      	; 0x7d8 <initialCorrect_Indicator+0x8e>
 7d0:	80 91 00 02 	lds	r24, 0x0200
 7d4:	89 32       	cpi	r24, 0x29	; 41
 7d6:	10 f4       	brcc	.+4      	; 0x7dc <initialCorrect_Indicator+0x92>
			return;
		}
		else
		{
			flag=1;
			correct();
 7d8:	95 df       	rcall	.-214    	; 0x704 <correct>
		}
	}
	if(flag==0)	
		correct();
	stop();
 7da:	66 cd       	rjmp	.-1332   	; 0x2a8 <stop>
 7dc:	08 95       	ret

000007de <followLine_Indicator>:
	return;
}
void followLine_Indicator()
{
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7e8:	08 e2       	ldi	r16, 0x28	; 40
 7ea:	11 e0       	ldi	r17, 0x01	; 1
 7ec:	0f 2e       	mov	r0, r31
 7ee:	f0 ef       	ldi	r31, 0xF0	; 240
 7f0:	ff 2e       	mov	r15, r31
 7f2:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
 7f4:	ca e2       	ldi	r28, 0x2A	; 42
 7f6:	d1 e0       	ldi	r29, 0x01	; 1
	do
	{
		forward();
 7f8:	42 dd       	rcall	.-1404   	; 0x27e <forward>
		set_color();
 7fa:	1d df       	rcall	.-454    	; 0x636 <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
 7fc:	80 91 01 02 	lds	r24, 0x0201
 800:	89 32       	cpi	r24, 0x29	; 41
 802:	40 f0       	brcs	.+16     	; 0x814 <followLine_Indicator+0x36>
 804:	80 91 02 02 	lds	r24, 0x0202
 808:	89 32       	cpi	r24, 0x29	; 41
 80a:	a8 f4       	brcc	.+42     	; 0x836 <followLine_Indicator+0x58>
 80c:	80 91 00 02 	lds	r24, 0x0200
 810:	89 32       	cpi	r24, 0x29	; 41
 812:	88 f4       	brcc	.+34     	; 0x836 <followLine_Indicator+0x58>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 814:	f8 01       	movw	r30, r16
 816:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 818:	f8 82       	st	Y, r15
			return;
		}
		velocity(240,240);
		
		
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
 81a:	80 91 01 02 	lds	r24, 0x0201
 81e:	89 32       	cpi	r24, 0x29	; 41
 820:	40 f0       	brcs	.+16     	; 0x832 <followLine_Indicator+0x54>
 822:	80 91 02 02 	lds	r24, 0x0202
 826:	88 32       	cpi	r24, 0x28	; 40
 828:	20 f4       	brcc	.+8      	; 0x832 <followLine_Indicator+0x54>
 82a:	80 91 00 02 	lds	r24, 0x0200
 82e:	88 32       	cpi	r24, 0x28	; 40
 830:	18 f3       	brcs	.-58     	; 0x7f8 <followLine_Indicator+0x1a>
	
	initialCorrect_Indicator();
 832:	8b df       	rcall	.-234    	; 0x74a <initialCorrect_Indicator>
	followLine_Indicator();
 834:	d4 df       	rcall	.-88     	; 0x7de <followLine_Indicator>
	return;
}
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	08 95       	ret

00000842 <scan>:
/*************************END GULLA CODE*************/

int scan()//return the color no.
{
 842:	0f 93       	push	r16
 844:	1f 93       	push	r17
	red_read();
 846:	e5 dd       	rcall	.-1078   	; 0x412 <red_read>
	blue_read();
 848:	33 de       	rcall	.-922    	; 0x4b0 <blue_read>
	green_read();
 84a:	0f de       	rcall	.-994    	; 0x46a <green_read>
	
	if(!(ADC_Conversion(11)>55 && ADC_Conversion(11)<100))
 84c:	8b e0       	ldi	r24, 0x0B	; 11
 84e:	7f dd       	rcall	.-1282   	; 0x34e <ADC_Conversion>
 850:	88 33       	cpi	r24, 0x38	; 56
 852:	08 f4       	brcc	.+2      	; 0x856 <scan+0x14>
 854:	7b c0       	rjmp	.+246    	; 0x94c <scan+0x10a>
 856:	8b e0       	ldi	r24, 0x0B	; 11
 858:	7a dd       	rcall	.-1292   	; 0x34e <ADC_Conversion>
 85a:	84 36       	cpi	r24, 0x64	; 100
 85c:	08 f0       	brcs	.+2      	; 0x860 <scan+0x1e>
 85e:	79 c0       	rjmp	.+242    	; 0x952 <scan+0x110>
		return EMPTY;
	
	if (red<threshold && green < threshold && blue < threshold)
 860:	80 91 17 02 	lds	r24, 0x0217
 864:	90 91 18 02 	lds	r25, 0x0218
 868:	aa 27       	eor	r26, r26
 86a:	97 fd       	sbrc	r25, 7
 86c:	a0 95       	com	r26
 86e:	ba 2f       	mov	r27, r26
 870:	40 91 27 02 	lds	r20, 0x0227
 874:	50 91 28 02 	lds	r21, 0x0228
 878:	60 91 29 02 	lds	r22, 0x0229
 87c:	70 91 2a 02 	lds	r23, 0x022A
 880:	48 17       	cp	r20, r24
 882:	59 07       	cpc	r21, r25
 884:	6a 07       	cpc	r22, r26
 886:	7b 07       	cpc	r23, r27
 888:	d8 f4       	brcc	.+54     	; 0x8c0 <scan+0x7e>
 88a:	40 91 23 02 	lds	r20, 0x0223
 88e:	50 91 24 02 	lds	r21, 0x0224
 892:	60 91 25 02 	lds	r22, 0x0225
 896:	70 91 26 02 	lds	r23, 0x0226
 89a:	48 17       	cp	r20, r24
 89c:	59 07       	cpc	r21, r25
 89e:	6a 07       	cpc	r22, r26
 8a0:	7b 07       	cpc	r23, r27
 8a2:	70 f4       	brcc	.+28     	; 0x8c0 <scan+0x7e>
 8a4:	40 91 19 02 	lds	r20, 0x0219
 8a8:	50 91 1a 02 	lds	r21, 0x021A
 8ac:	60 91 1b 02 	lds	r22, 0x021B
 8b0:	70 91 1c 02 	lds	r23, 0x021C
 8b4:	48 17       	cp	r20, r24
 8b6:	59 07       	cpc	r21, r25
 8b8:	6a 07       	cpc	r22, r26
 8ba:	7b 07       	cpc	r23, r27
 8bc:	08 f4       	brcc	.+2      	; 0x8c0 <scan+0x7e>
 8be:	4c c0       	rjmp	.+152    	; 0x958 <scan+0x116>
	{
		return BLACK;
	}
	else
	{
		if (red > blue)
 8c0:	40 91 27 02 	lds	r20, 0x0227
 8c4:	50 91 28 02 	lds	r21, 0x0228
 8c8:	60 91 29 02 	lds	r22, 0x0229
 8cc:	70 91 2a 02 	lds	r23, 0x022A
 8d0:	80 91 19 02 	lds	r24, 0x0219
 8d4:	90 91 1a 02 	lds	r25, 0x021A
 8d8:	a0 91 1b 02 	lds	r26, 0x021B
 8dc:	b0 91 1c 02 	lds	r27, 0x021C
 8e0:	84 17       	cp	r24, r20
 8e2:	95 07       	cpc	r25, r21
 8e4:	a6 07       	cpc	r26, r22
 8e6:	b7 07       	cpc	r27, r23
 8e8:	c8 f4       	brcc	.+50     	; 0x91c <scan+0xda>
		{
			if (red > green)
 8ea:	00 91 27 02 	lds	r16, 0x0227
 8ee:	10 91 28 02 	lds	r17, 0x0228
 8f2:	20 91 29 02 	lds	r18, 0x0229
 8f6:	30 91 2a 02 	lds	r19, 0x022A
 8fa:	40 91 23 02 	lds	r20, 0x0223
 8fe:	50 91 24 02 	lds	r21, 0x0224
 902:	60 91 25 02 	lds	r22, 0x0225
 906:	70 91 26 02 	lds	r23, 0x0226
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	40 17       	cp	r20, r16
 910:	51 07       	cpc	r21, r17
 912:	62 07       	cpc	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	28 f5       	brcc	.+74     	; 0x962 <scan+0x120>
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	23 c0       	rjmp	.+70     	; 0x962 <scan+0x120>
			return RED;
			else
			return GREEN;
		}
		else if (blue > green)
 91c:	40 91 19 02 	lds	r20, 0x0219
 920:	50 91 1a 02 	lds	r21, 0x021A
 924:	60 91 1b 02 	lds	r22, 0x021B
 928:	70 91 1c 02 	lds	r23, 0x021C
 92c:	80 91 23 02 	lds	r24, 0x0223
 930:	90 91 24 02 	lds	r25, 0x0224
 934:	a0 91 25 02 	lds	r26, 0x0225
 938:	b0 91 26 02 	lds	r27, 0x0226
 93c:	84 17       	cp	r24, r20
 93e:	95 07       	cpc	r25, r21
 940:	a6 07       	cpc	r26, r22
 942:	b7 07       	cpc	r27, r23
 944:	60 f4       	brcc	.+24     	; 0x95e <scan+0x11c>
		return BLUE;
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0b c0       	rjmp	.+22     	; 0x962 <scan+0x120>
	red_read();
	blue_read();
	green_read();
	
	if(!(ADC_Conversion(11)>55 && ADC_Conversion(11)<100))
		return EMPTY;
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	08 c0       	rjmp	.+16     	; 0x962 <scan+0x120>
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	05 c0       	rjmp	.+10     	; 0x962 <scan+0x120>
	
	if (red<threshold && green < threshold && blue < threshold)
	{
		return BLACK;
 958:	83 e0       	ldi	r24, 0x03	; 3
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	02 c0       	rjmp	.+4      	; 0x962 <scan+0x120>
			else
			return GREEN;
		}
		else if (blue > green)
		return BLUE;
		else return GREEN;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
	}

}
 962:	1f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	08 95       	ret

00000968 <setIndicator>:

void setIndicator()
{
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
	unsigned char i;
	followLine_Indicator();
 96e:	37 df       	rcall	.-402    	; 0x7de <followLine_Indicator>
	
	//turn efficiency
	forward_mm(160);
 970:	80 ea       	ldi	r24, 0xA0	; 160
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	4b de       	rcall	.-874    	; 0x60c <forward_mm>
	//scan 4
	soft_right_2();
 976:	95 dc       	rcall	.-1750   	; 0x2a2 <soft_right_2>
 978:	2f ef       	ldi	r18, 0xFF	; 255
 97a:	8f e7       	ldi	r24, 0x7F	; 127
 97c:	9f e1       	ldi	r25, 0x1F	; 31
 97e:	21 50       	subi	r18, 0x01	; 1
 980:	80 40       	sbci	r24, 0x00	; 0
 982:	90 40       	sbci	r25, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <setIndicator+0x16>
 986:	00 c0       	rjmp	.+0      	; 0x988 <setIndicator+0x20>
 988:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
 98a:	83 e0       	ldi	r24, 0x03	; 3
 98c:	e0 dc       	rcall	.-1600   	; 0x34e <ADC_Conversion>
 98e:	88 32       	cpi	r24, 0x28	; 40
 990:	e0 f3       	brcs	.-8      	; 0x98a <setIndicator+0x22>
	stop();
 992:	8a dc       	rcall	.-1772   	; 0x2a8 <stop>
	indicator[3]=scan();
 994:	56 df       	rcall	.-340    	; 0x842 <scan>
 996:	90 93 52 02 	sts	0x0252, r25
 99a:	80 93 51 02 	sts	0x0251, r24
	for(i=0;i<indicator[3];i++)
 99e:	18 16       	cp	r1, r24
 9a0:	19 06       	cpc	r1, r25
 9a2:	fc f4       	brge	.+62     	; 0x9e2 <setIndicator+0x7a>
 9a4:	10 e0       	ldi	r17, 0x00	; 0
 9a6:	c1 e5       	ldi	r28, 0x51	; 81
 9a8:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 9aa:	c9 dc       	rcall	.-1646   	; 0x33e <buzzer_on>
 9ac:	2f ef       	ldi	r18, 0xFF	; 255
 9ae:	8f e7       	ldi	r24, 0x7F	; 127
 9b0:	94 e0       	ldi	r25, 0x04	; 4
 9b2:	21 50       	subi	r18, 0x01	; 1
 9b4:	80 40       	sbci	r24, 0x00	; 0
 9b6:	90 40       	sbci	r25, 0x00	; 0
 9b8:	e1 f7       	brne	.-8      	; 0x9b2 <setIndicator+0x4a>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <setIndicator+0x54>
 9bc:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 9be:	c3 dc       	rcall	.-1658   	; 0x346 <buzzer_off>
 9c0:	2f ef       	ldi	r18, 0xFF	; 255
 9c2:	8f e7       	ldi	r24, 0x7F	; 127
 9c4:	96 e1       	ldi	r25, 0x16	; 22
 9c6:	21 50       	subi	r18, 0x01	; 1
 9c8:	80 40       	sbci	r24, 0x00	; 0
 9ca:	90 40       	sbci	r25, 0x00	; 0
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <setIndicator+0x5e>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <setIndicator+0x68>
 9d0:	00 00       	nop
	soft_right_2();
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
	stop();
	indicator[3]=scan();
	for(i=0;i<indicator[3];i++)
 9d2:	1f 5f       	subi	r17, 0xFF	; 255
 9d4:	21 2f       	mov	r18, r17
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	88 81       	ld	r24, Y
 9da:	99 81       	ldd	r25, Y+1	; 0x01
 9dc:	28 17       	cp	r18, r24
 9de:	39 07       	cpc	r19, r25
 9e0:	24 f3       	brlt	.-56     	; 0x9aa <setIndicator+0x42>
		buzzer_off();
		_delay_ms(500);
	}
	
	//back to line
	soft_left();
 9e2:	56 dc       	rcall	.-1876   	; 0x290 <soft_left>
 9e4:	2f ef       	ldi	r18, 0xFF	; 255
 9e6:	8f ef       	ldi	r24, 0xFF	; 255
 9e8:	9c e2       	ldi	r25, 0x2C	; 44
 9ea:	21 50       	subi	r18, 0x01	; 1
 9ec:	80 40       	sbci	r24, 0x00	; 0
 9ee:	90 40       	sbci	r25, 0x00	; 0
 9f0:	e1 f7       	brne	.-8      	; 0x9ea <setIndicator+0x82>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <setIndicator+0x8c>
 9f4:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	aa dc       	rcall	.-1708   	; 0x34e <ADC_Conversion>
 9fa:	88 32       	cpi	r24, 0x28	; 40
 9fc:	e0 f3       	brcs	.-8      	; 0x9f6 <setIndicator+0x8e>
	stop();
 9fe:	54 dc       	rcall	.-1880   	; 0x2a8 <stop>
	
	//scan 3
	soft_left_2();
 a00:	4d dc       	rcall	.-1894   	; 0x29c <soft_left_2>
 a02:	2f ef       	ldi	r18, 0xFF	; 255
 a04:	8f e7       	ldi	r24, 0x7F	; 127
 a06:	96 e1       	ldi	r25, 0x16	; 22
 a08:	21 50       	subi	r18, 0x01	; 1
 a0a:	80 40       	sbci	r24, 0x00	; 0
 a0c:	90 40       	sbci	r25, 0x00	; 0
 a0e:	e1 f7       	brne	.-8      	; 0xa08 <setIndicator+0xa0>
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <setIndicator+0xaa>
 a12:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 a14:	82 e0       	ldi	r24, 0x02	; 2
 a16:	9b dc       	rcall	.-1738   	; 0x34e <ADC_Conversion>
 a18:	88 32       	cpi	r24, 0x28	; 40
 a1a:	e0 f3       	brcs	.-8      	; 0xa14 <setIndicator+0xac>
	stop();
 a1c:	45 dc       	rcall	.-1910   	; 0x2a8 <stop>
	indicator[2]=scan();
 a1e:	11 df       	rcall	.-478    	; 0x842 <scan>
 a20:	90 93 50 02 	sts	0x0250, r25
 a24:	80 93 4f 02 	sts	0x024F, r24
	for(i=0;i<indicator[2];i++)
 a28:	18 16       	cp	r1, r24
 a2a:	19 06       	cpc	r1, r25
 a2c:	fc f4       	brge	.+62     	; 0xa6c <setIndicator+0x104>
 a2e:	10 e0       	ldi	r17, 0x00	; 0
 a30:	cf e4       	ldi	r28, 0x4F	; 79
 a32:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 a34:	84 dc       	rcall	.-1784   	; 0x33e <buzzer_on>
 a36:	2f ef       	ldi	r18, 0xFF	; 255
 a38:	8f e7       	ldi	r24, 0x7F	; 127
 a3a:	94 e0       	ldi	r25, 0x04	; 4
 a3c:	21 50       	subi	r18, 0x01	; 1
 a3e:	80 40       	sbci	r24, 0x00	; 0
 a40:	90 40       	sbci	r25, 0x00	; 0
 a42:	e1 f7       	brne	.-8      	; 0xa3c <setIndicator+0xd4>
 a44:	00 c0       	rjmp	.+0      	; 0xa46 <setIndicator+0xde>
 a46:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 a48:	7e dc       	rcall	.-1796   	; 0x346 <buzzer_off>
 a4a:	2f ef       	ldi	r18, 0xFF	; 255
 a4c:	8f e7       	ldi	r24, 0x7F	; 127
 a4e:	96 e1       	ldi	r25, 0x16	; 22
 a50:	21 50       	subi	r18, 0x01	; 1
 a52:	80 40       	sbci	r24, 0x00	; 0
 a54:	90 40       	sbci	r25, 0x00	; 0
 a56:	e1 f7       	brne	.-8      	; 0xa50 <setIndicator+0xe8>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <setIndicator+0xf2>
 a5a:	00 00       	nop
	soft_left_2();
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
	stop();
	indicator[2]=scan();
	for(i=0;i<indicator[2];i++)
 a5c:	1f 5f       	subi	r17, 0xFF	; 255
 a5e:	21 2f       	mov	r18, r17
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	88 81       	ld	r24, Y
 a64:	99 81       	ldd	r25, Y+1	; 0x01
 a66:	28 17       	cp	r18, r24
 a68:	39 07       	cpc	r19, r25
 a6a:	24 f3       	brlt	.-56     	; 0xa34 <setIndicator+0xcc>
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}
	//back to line
	soft_right();
 a6c:	14 dc       	rcall	.-2008   	; 0x296 <soft_right>
 a6e:	2f ef       	ldi	r18, 0xFF	; 255
 a70:	8f e7       	ldi	r24, 0x7F	; 127
 a72:	96 e1       	ldi	r25, 0x16	; 22
 a74:	21 50       	subi	r18, 0x01	; 1
 a76:	80 40       	sbci	r24, 0x00	; 0
 a78:	90 40       	sbci	r25, 0x00	; 0
 a7a:	e1 f7       	brne	.-8      	; 0xa74 <setIndicator+0x10c>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <setIndicator+0x116>
 a7e:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 a80:	82 e0       	ldi	r24, 0x02	; 2
 a82:	65 dc       	rcall	.-1846   	; 0x34e <ADC_Conversion>
 a84:	88 32       	cpi	r24, 0x28	; 40
 a86:	e0 f3       	brcs	.-8      	; 0xa80 <setIndicator+0x118>
	stop();
 a88:	0f dc       	rcall	.-2018   	; 0x2a8 <stop>
	
	//=====
	
	followLine_Indicator();
 a8a:	a9 de       	rcall	.-686    	; 0x7de <followLine_Indicator>
	
	//turn efficiency
	forward_mm(160);
 a8c:	80 ea       	ldi	r24, 0xA0	; 160
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	bd dd       	rcall	.-1158   	; 0x60c <forward_mm>
	//scan 4
	soft_right_2();
 a92:	07 dc       	rcall	.-2034   	; 0x2a2 <soft_right_2>
 a94:	2f ef       	ldi	r18, 0xFF	; 255
 a96:	8f e7       	ldi	r24, 0x7F	; 127
 a98:	96 e1       	ldi	r25, 0x16	; 22
 a9a:	21 50       	subi	r18, 0x01	; 1
 a9c:	80 40       	sbci	r24, 0x00	; 0
 a9e:	90 40       	sbci	r25, 0x00	; 0
 aa0:	e1 f7       	brne	.-8      	; 0xa9a <setIndicator+0x132>
 aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <setIndicator+0x13c>
 aa4:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(3)<40);
 aa6:	83 e0       	ldi	r24, 0x03	; 3
 aa8:	52 dc       	rcall	.-1884   	; 0x34e <ADC_Conversion>
 aaa:	88 32       	cpi	r24, 0x28	; 40
 aac:	e0 f3       	brcs	.-8      	; 0xaa6 <setIndicator+0x13e>
	stop();
 aae:	fc db       	rcall	.-2056   	; 0x2a8 <stop>
	indicator[1]=scan();
 ab0:	c8 de       	rcall	.-624    	; 0x842 <scan>
 ab2:	90 93 4e 02 	sts	0x024E, r25
 ab6:	80 93 4d 02 	sts	0x024D, r24
	for(i=0;i<indicator[1];i++)
 aba:	18 16       	cp	r1, r24
 abc:	19 06       	cpc	r1, r25
 abe:	fc f4       	brge	.+62     	; 0xafe <setIndicator+0x196>
 ac0:	10 e0       	ldi	r17, 0x00	; 0
 ac2:	cd e4       	ldi	r28, 0x4D	; 77
 ac4:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 ac6:	3b dc       	rcall	.-1930   	; 0x33e <buzzer_on>
 ac8:	2f ef       	ldi	r18, 0xFF	; 255
 aca:	8f e7       	ldi	r24, 0x7F	; 127
 acc:	94 e0       	ldi	r25, 0x04	; 4
 ace:	21 50       	subi	r18, 0x01	; 1
 ad0:	80 40       	sbci	r24, 0x00	; 0
 ad2:	90 40       	sbci	r25, 0x00	; 0
 ad4:	e1 f7       	brne	.-8      	; 0xace <setIndicator+0x166>
 ad6:	00 c0       	rjmp	.+0      	; 0xad8 <setIndicator+0x170>
 ad8:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 ada:	35 dc       	rcall	.-1942   	; 0x346 <buzzer_off>
 adc:	2f ef       	ldi	r18, 0xFF	; 255
 ade:	8f e7       	ldi	r24, 0x7F	; 127
 ae0:	96 e1       	ldi	r25, 0x16	; 22
 ae2:	21 50       	subi	r18, 0x01	; 1
 ae4:	80 40       	sbci	r24, 0x00	; 0
 ae6:	90 40       	sbci	r25, 0x00	; 0
 ae8:	e1 f7       	brne	.-8      	; 0xae2 <setIndicator+0x17a>
 aea:	00 c0       	rjmp	.+0      	; 0xaec <setIndicator+0x184>
 aec:	00 00       	nop
	soft_right_2();
	_delay_ms(500);
	while(ADC_Conversion(3)<40);
	stop();
	indicator[1]=scan();
	for(i=0;i<indicator[1];i++)
 aee:	1f 5f       	subi	r17, 0xFF	; 255
 af0:	21 2f       	mov	r18, r17
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	88 81       	ld	r24, Y
 af6:	99 81       	ldd	r25, Y+1	; 0x01
 af8:	28 17       	cp	r18, r24
 afa:	39 07       	cpc	r19, r25
 afc:	24 f3       	brlt	.-56     	; 0xac6 <setIndicator+0x15e>
		buzzer_off();
		_delay_ms(500);
	}
	
	//back to line
	soft_left();
 afe:	c8 db       	rcall	.-2160   	; 0x290 <soft_left>
 b00:	2f ef       	ldi	r18, 0xFF	; 255
 b02:	8f ef       	ldi	r24, 0xFF	; 255
 b04:	9c e2       	ldi	r25, 0x2C	; 44
 b06:	21 50       	subi	r18, 0x01	; 1
 b08:	80 40       	sbci	r24, 0x00	; 0
 b0a:	90 40       	sbci	r25, 0x00	; 0
 b0c:	e1 f7       	brne	.-8      	; 0xb06 <setIndicator+0x19e>
 b0e:	00 c0       	rjmp	.+0      	; 0xb10 <setIndicator+0x1a8>
 b10:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
 b12:	82 e0       	ldi	r24, 0x02	; 2
 b14:	1c dc       	rcall	.-1992   	; 0x34e <ADC_Conversion>
 b16:	88 32       	cpi	r24, 0x28	; 40
 b18:	e0 f3       	brcs	.-8      	; 0xb12 <setIndicator+0x1aa>
	stop();
 b1a:	c6 db       	rcall	.-2164   	; 0x2a8 <stop>
	
	//scan 3
	soft_left_2();
 b1c:	bf db       	rcall	.-2178   	; 0x29c <soft_left_2>
 b1e:	2f ef       	ldi	r18, 0xFF	; 255
 b20:	8f e7       	ldi	r24, 0x7F	; 127
 b22:	96 e1       	ldi	r25, 0x16	; 22
 b24:	21 50       	subi	r18, 0x01	; 1
 b26:	80 40       	sbci	r24, 0x00	; 0
 b28:	90 40       	sbci	r25, 0x00	; 0
 b2a:	e1 f7       	brne	.-8      	; 0xb24 <setIndicator+0x1bc>
 b2c:	00 c0       	rjmp	.+0      	; 0xb2e <setIndicator+0x1c6>
 b2e:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 b30:	82 e0       	ldi	r24, 0x02	; 2
 b32:	0d dc       	rcall	.-2022   	; 0x34e <ADC_Conversion>
 b34:	88 32       	cpi	r24, 0x28	; 40
 b36:	e0 f3       	brcs	.-8      	; 0xb30 <setIndicator+0x1c8>
	stop();
 b38:	b7 db       	rcall	.-2194   	; 0x2a8 <stop>
	indicator[0]=scan();
 b3a:	83 de       	rcall	.-762    	; 0x842 <scan>
 b3c:	90 93 4c 02 	sts	0x024C, r25
 b40:	80 93 4b 02 	sts	0x024B, r24
	for(i=0;i<indicator[0];i++)
 b44:	18 16       	cp	r1, r24
 b46:	19 06       	cpc	r1, r25
 b48:	fc f4       	brge	.+62     	; 0xb88 <setIndicator+0x220>
 b4a:	10 e0       	ldi	r17, 0x00	; 0
 b4c:	cb e4       	ldi	r28, 0x4B	; 75
 b4e:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 b50:	f6 db       	rcall	.-2068   	; 0x33e <buzzer_on>
 b52:	2f ef       	ldi	r18, 0xFF	; 255
 b54:	8f e7       	ldi	r24, 0x7F	; 127
 b56:	94 e0       	ldi	r25, 0x04	; 4
 b58:	21 50       	subi	r18, 0x01	; 1
 b5a:	80 40       	sbci	r24, 0x00	; 0
 b5c:	90 40       	sbci	r25, 0x00	; 0
 b5e:	e1 f7       	brne	.-8      	; 0xb58 <setIndicator+0x1f0>
 b60:	00 c0       	rjmp	.+0      	; 0xb62 <setIndicator+0x1fa>
 b62:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 b64:	f0 db       	rcall	.-2080   	; 0x346 <buzzer_off>
 b66:	2f ef       	ldi	r18, 0xFF	; 255
 b68:	8f e7       	ldi	r24, 0x7F	; 127
 b6a:	96 e1       	ldi	r25, 0x16	; 22
 b6c:	21 50       	subi	r18, 0x01	; 1
 b6e:	80 40       	sbci	r24, 0x00	; 0
 b70:	90 40       	sbci	r25, 0x00	; 0
 b72:	e1 f7       	brne	.-8      	; 0xb6c <setIndicator+0x204>
 b74:	00 c0       	rjmp	.+0      	; 0xb76 <setIndicator+0x20e>
 b76:	00 00       	nop
	soft_left_2();
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
	stop();
	indicator[0]=scan();
	for(i=0;i<indicator[0];i++)
 b78:	1f 5f       	subi	r17, 0xFF	; 255
 b7a:	21 2f       	mov	r18, r17
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	88 81       	ld	r24, Y
 b80:	99 81       	ldd	r25, Y+1	; 0x01
 b82:	28 17       	cp	r18, r24
 b84:	39 07       	cpc	r19, r25
 b86:	24 f3       	brlt	.-56     	; 0xb50 <setIndicator+0x1e8>
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}
	//back to line
	soft_right();
 b88:	86 db       	rcall	.-2292   	; 0x296 <soft_right>
 b8a:	2f ef       	ldi	r18, 0xFF	; 255
 b8c:	8f e7       	ldi	r24, 0x7F	; 127
 b8e:	96 e1       	ldi	r25, 0x16	; 22
 b90:	21 50       	subi	r18, 0x01	; 1
 b92:	80 40       	sbci	r24, 0x00	; 0
 b94:	90 40       	sbci	r25, 0x00	; 0
 b96:	e1 f7       	brne	.-8      	; 0xb90 <setIndicator+0x228>
 b98:	00 c0       	rjmp	.+0      	; 0xb9a <setIndicator+0x232>
 b9a:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 b9c:	82 e0       	ldi	r24, 0x02	; 2
 b9e:	d7 db       	rcall	.-2130   	; 0x34e <ADC_Conversion>
 ba0:	88 32       	cpi	r24, 0x28	; 40
 ba2:	e0 f3       	brcs	.-8      	; 0xb9c <setIndicator+0x234>
	stop();
 ba4:	81 db       	rcall	.-2302   	; 0x2a8 <stop>
	
	
	followLine_Indicator();
 ba6:	1b de       	rcall	.-970    	; 0x7de <followLine_Indicator>
	turnLeft();
 ba8:	53 dd       	rcall	.-1370   	; 0x650 <turnLeft>
	forward();
 baa:	69 db       	rcall	.-2350   	; 0x27e <forward>
 bac:	2f ef       	ldi	r18, 0xFF	; 255
 bae:	8f e7       	ldi	r24, 0x7F	; 127
 bb0:	96 e1       	ldi	r25, 0x16	; 22
 bb2:	21 50       	subi	r18, 0x01	; 1
 bb4:	80 40       	sbci	r24, 0x00	; 0
 bb6:	90 40       	sbci	r25, 0x00	; 0
 bb8:	e1 f7       	brne	.-8      	; 0xbb2 <setIndicator+0x24a>
 bba:	00 c0       	rjmp	.+0      	; 0xbbc <setIndicator+0x254>
 bbc:	00 00       	nop
	_delay_ms(500);
	followLine_Indicator();
 bbe:	0f de       	rcall	.-994    	; 0x7de <followLine_Indicator>
	turnLeft();
 bc0:	47 dd       	rcall	.-1394   	; 0x650 <turnLeft>
	followLine_Indicator();
 bc2:	0d de       	rcall	.-998    	; 0x7de <followLine_Indicator>
}
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	08 95       	ret

00000bcc <setIndicatorAndColor>:


void setIndicatorAndColor()
{
 bcc:	cf 93       	push	r28
 bce:	df 93       	push	r29
 bd0:	c3 e4       	ldi	r28, 0x43	; 67
 bd2:	d2 e0       	ldi	r29, 0x02	; 2
 bd4:	e3 e3       	ldi	r30, 0x33	; 51
 bd6:	f2 e0       	ldi	r31, 0x02	; 2
 bd8:	af e0       	ldi	r26, 0x0F	; 15
 bda:	b2 e0       	ldi	r27, 0x02	; 2
	int i;
	for (i = 0; i<4; i++)
 bdc:	80 e0       	ldi	r24, 0x00	; 0
 bde:	90 e0       	ldi	r25, 0x00	; 0
	{
		color[i] = i;
		term[i][0] = term[i][1] = -2;
 be0:	2e ef       	ldi	r18, 0xFE	; 254
 be2:	3f ef       	ldi	r19, 0xFF	; 255
void setIndicatorAndColor()
{
	int i;
	for (i = 0; i<4; i++)
	{
		color[i] = i;
 be4:	89 93       	st	Y+, r24
 be6:	99 93       	st	Y+, r25
		term[i][0] = term[i][1] = -2;
 be8:	33 83       	std	Z+3, r19	; 0x03
 bea:	22 83       	std	Z+2, r18	; 0x02
 bec:	31 83       	std	Z+1, r19	; 0x01
 bee:	20 83       	st	Z, r18
		visited[i] = 0;
 bf0:	1d 92       	st	X+, r1
 bf2:	1d 92       	st	X+, r1


void setIndicatorAndColor()
{
	int i;
	for (i = 0; i<4; i++)
 bf4:	01 96       	adiw	r24, 0x01	; 1
 bf6:	34 96       	adiw	r30, 0x04	; 4
 bf8:	84 30       	cpi	r24, 0x04	; 4
 bfa:	91 05       	cpc	r25, r1
 bfc:	99 f7       	brne	.-26     	; 0xbe4 <setIndicatorAndColor+0x18>
		color[i] = i;
		term[i][0] = term[i][1] = -2;
		visited[i] = 0;
	}
	for (i = 0; i<4; i++)
	indicator[color[i]] = i;
 bfe:	e0 91 43 02 	lds	r30, 0x0243
 c02:	f0 91 44 02 	lds	r31, 0x0244
 c06:	ee 0f       	add	r30, r30
 c08:	ff 1f       	adc	r31, r31
 c0a:	e5 5b       	subi	r30, 0xB5	; 181
 c0c:	fd 4f       	sbci	r31, 0xFD	; 253
 c0e:	11 82       	std	Z+1, r1	; 0x01
 c10:	10 82       	st	Z, r1
 c12:	e0 91 45 02 	lds	r30, 0x0245
 c16:	f0 91 46 02 	lds	r31, 0x0246
 c1a:	ee 0f       	add	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	e5 5b       	subi	r30, 0xB5	; 181
 c20:	fd 4f       	sbci	r31, 0xFD	; 253
 c22:	81 e0       	ldi	r24, 0x01	; 1
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	91 83       	std	Z+1, r25	; 0x01
 c28:	80 83       	st	Z, r24
 c2a:	e0 91 47 02 	lds	r30, 0x0247
 c2e:	f0 91 48 02 	lds	r31, 0x0248
 c32:	ee 0f       	add	r30, r30
 c34:	ff 1f       	adc	r31, r31
 c36:	e5 5b       	subi	r30, 0xB5	; 181
 c38:	fd 4f       	sbci	r31, 0xFD	; 253
 c3a:	82 e0       	ldi	r24, 0x02	; 2
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	91 83       	std	Z+1, r25	; 0x01
 c40:	80 83       	st	Z, r24
 c42:	e0 91 49 02 	lds	r30, 0x0249
 c46:	f0 91 4a 02 	lds	r31, 0x024A
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	e5 5b       	subi	r30, 0xB5	; 181
 c50:	fd 4f       	sbci	r31, 0xFD	; 253
 c52:	83 e0       	ldi	r24, 0x03	; 3
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	91 83       	std	Z+1, r25	; 0x01
 c58:	80 83       	st	Z, r24
	sort[0] = sort[1] = -1;
 c5a:	8f ef       	ldi	r24, 0xFF	; 255
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	90 93 2f 02 	sts	0x022F, r25
 c62:	80 93 2e 02 	sts	0x022E, r24
 c66:	90 93 2d 02 	sts	0x022D, r25
 c6a:	80 93 2c 02 	sts	0x022C, r24
	arm[0] = arm[1] = -1;
 c6e:	90 93 59 02 	sts	0x0259, r25
 c72:	80 93 58 02 	sts	0x0258, r24
 c76:	90 93 57 02 	sts	0x0257, r25
 c7a:	80 93 56 02 	sts	0x0256, r24
}
 c7e:	df 91       	pop	r29
 c80:	cf 91       	pop	r28
 c82:	08 95       	ret

00000c84 <__init__>:

void __init__()
{
	ct = 2; adj = 0;
 c84:	82 e0       	ldi	r24, 0x02	; 2
 c86:	80 93 30 02 	sts	0x0230, r24
 c8a:	10 92 53 02 	sts	0x0253, r1
	init_devices();
 c8e:	c7 dc       	rcall	.-1650   	; 0x61e <init_devices>
	lcd_set_4bit();
 c90:	49 da       	rcall	.-2926   	; 0x124 <lcd_set_4bit>
	lcd_init();
 c92:	b2 da       	rcall	.-2716   	; 0x1f8 <lcd_init>
	color_sensor_scaling();
 c94:	bb db       	rcall	.-2186   	; 0x40c <color_sensor_scaling>
	setIndicatorAndColor();
 c96:	9a df       	rcall	.-204    	; 0xbcc <setIndicatorAndColor>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
 c98:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
 c9c:	83 e2       	ldi	r24, 0x23	; 35
 c9e:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
 ca2:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
 ca6:	93 e5       	ldi	r25, 0x53	; 83
 ca8:	90 93 8a 00 	sts	0x008A, r25
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
 cac:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
 cb0:	80 93 8c 00 	sts	0x008C, r24
 cb4:	08 95       	ret

00000cb6 <main>:
	servo_3(0);
	
}
int main(void)
{
	__init__();
 cb6:	e6 df       	rcall	.-52     	; 0xc84 <__init__>
	setIndicator();
 cb8:	57 de       	rcall	.-850    	; 0x968 <setIndicator>
 cba:	ff cf       	rjmp	.-2      	; 0xcba <main+0x4>

00000cbc <__divsf3>:
 cbc:	0c d0       	rcall	.+24     	; 0xcd6 <__divsf3x>
 cbe:	e6 c0       	rjmp	.+460    	; 0xe8c <__fp_round>
 cc0:	de d0       	rcall	.+444    	; 0xe7e <__fp_pscB>
 cc2:	40 f0       	brcs	.+16     	; 0xcd4 <__divsf3+0x18>
 cc4:	d5 d0       	rcall	.+426    	; 0xe70 <__fp_pscA>
 cc6:	30 f0       	brcs	.+12     	; 0xcd4 <__divsf3+0x18>
 cc8:	21 f4       	brne	.+8      	; 0xcd2 <__divsf3+0x16>
 cca:	5f 3f       	cpi	r21, 0xFF	; 255
 ccc:	19 f0       	breq	.+6      	; 0xcd4 <__divsf3+0x18>
 cce:	c7 c0       	rjmp	.+398    	; 0xe5e <__fp_inf>
 cd0:	51 11       	cpse	r21, r1
 cd2:	10 c1       	rjmp	.+544    	; 0xef4 <__fp_szero>
 cd4:	ca c0       	rjmp	.+404    	; 0xe6a <__fp_nan>

00000cd6 <__divsf3x>:
 cd6:	eb d0       	rcall	.+470    	; 0xeae <__fp_split3>
 cd8:	98 f3       	brcs	.-26     	; 0xcc0 <__divsf3+0x4>

00000cda <__divsf3_pse>:
 cda:	99 23       	and	r25, r25
 cdc:	c9 f3       	breq	.-14     	; 0xcd0 <__divsf3+0x14>
 cde:	55 23       	and	r21, r21
 ce0:	b1 f3       	breq	.-20     	; 0xcce <__divsf3+0x12>
 ce2:	95 1b       	sub	r25, r21
 ce4:	55 0b       	sbc	r21, r21
 ce6:	bb 27       	eor	r27, r27
 ce8:	aa 27       	eor	r26, r26
 cea:	62 17       	cp	r22, r18
 cec:	73 07       	cpc	r23, r19
 cee:	84 07       	cpc	r24, r20
 cf0:	38 f0       	brcs	.+14     	; 0xd00 <__divsf3_pse+0x26>
 cf2:	9f 5f       	subi	r25, 0xFF	; 255
 cf4:	5f 4f       	sbci	r21, 0xFF	; 255
 cf6:	22 0f       	add	r18, r18
 cf8:	33 1f       	adc	r19, r19
 cfa:	44 1f       	adc	r20, r20
 cfc:	aa 1f       	adc	r26, r26
 cfe:	a9 f3       	breq	.-22     	; 0xcea <__divsf3_pse+0x10>
 d00:	33 d0       	rcall	.+102    	; 0xd68 <__divsf3_pse+0x8e>
 d02:	0e 2e       	mov	r0, r30
 d04:	3a f0       	brmi	.+14     	; 0xd14 <__divsf3_pse+0x3a>
 d06:	e0 e8       	ldi	r30, 0x80	; 128
 d08:	30 d0       	rcall	.+96     	; 0xd6a <__divsf3_pse+0x90>
 d0a:	91 50       	subi	r25, 0x01	; 1
 d0c:	50 40       	sbci	r21, 0x00	; 0
 d0e:	e6 95       	lsr	r30
 d10:	00 1c       	adc	r0, r0
 d12:	ca f7       	brpl	.-14     	; 0xd06 <__divsf3_pse+0x2c>
 d14:	29 d0       	rcall	.+82     	; 0xd68 <__divsf3_pse+0x8e>
 d16:	fe 2f       	mov	r31, r30
 d18:	27 d0       	rcall	.+78     	; 0xd68 <__divsf3_pse+0x8e>
 d1a:	66 0f       	add	r22, r22
 d1c:	77 1f       	adc	r23, r23
 d1e:	88 1f       	adc	r24, r24
 d20:	bb 1f       	adc	r27, r27
 d22:	26 17       	cp	r18, r22
 d24:	37 07       	cpc	r19, r23
 d26:	48 07       	cpc	r20, r24
 d28:	ab 07       	cpc	r26, r27
 d2a:	b0 e8       	ldi	r27, 0x80	; 128
 d2c:	09 f0       	breq	.+2      	; 0xd30 <__divsf3_pse+0x56>
 d2e:	bb 0b       	sbc	r27, r27
 d30:	80 2d       	mov	r24, r0
 d32:	bf 01       	movw	r22, r30
 d34:	ff 27       	eor	r31, r31
 d36:	93 58       	subi	r25, 0x83	; 131
 d38:	5f 4f       	sbci	r21, 0xFF	; 255
 d3a:	2a f0       	brmi	.+10     	; 0xd46 <__divsf3_pse+0x6c>
 d3c:	9e 3f       	cpi	r25, 0xFE	; 254
 d3e:	51 05       	cpc	r21, r1
 d40:	68 f0       	brcs	.+26     	; 0xd5c <__divsf3_pse+0x82>
 d42:	8d c0       	rjmp	.+282    	; 0xe5e <__fp_inf>
 d44:	d7 c0       	rjmp	.+430    	; 0xef4 <__fp_szero>
 d46:	5f 3f       	cpi	r21, 0xFF	; 255
 d48:	ec f3       	brlt	.-6      	; 0xd44 <__divsf3_pse+0x6a>
 d4a:	98 3e       	cpi	r25, 0xE8	; 232
 d4c:	dc f3       	brlt	.-10     	; 0xd44 <__divsf3_pse+0x6a>
 d4e:	86 95       	lsr	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	b7 95       	ror	r27
 d56:	f7 95       	ror	r31
 d58:	9f 5f       	subi	r25, 0xFF	; 255
 d5a:	c9 f7       	brne	.-14     	; 0xd4e <__divsf3_pse+0x74>
 d5c:	88 0f       	add	r24, r24
 d5e:	91 1d       	adc	r25, r1
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret
 d68:	e1 e0       	ldi	r30, 0x01	; 1
 d6a:	66 0f       	add	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	bb 1f       	adc	r27, r27
 d72:	62 17       	cp	r22, r18
 d74:	73 07       	cpc	r23, r19
 d76:	84 07       	cpc	r24, r20
 d78:	ba 07       	cpc	r27, r26
 d7a:	20 f0       	brcs	.+8      	; 0xd84 <__divsf3_pse+0xaa>
 d7c:	62 1b       	sub	r22, r18
 d7e:	73 0b       	sbc	r23, r19
 d80:	84 0b       	sbc	r24, r20
 d82:	ba 0b       	sbc	r27, r26
 d84:	ee 1f       	adc	r30, r30
 d86:	88 f7       	brcc	.-30     	; 0xd6a <__divsf3_pse+0x90>
 d88:	e0 95       	com	r30
 d8a:	08 95       	ret

00000d8c <__fixunssfsi>:
 d8c:	98 d0       	rcall	.+304    	; 0xebe <__fp_splitA>
 d8e:	88 f0       	brcs	.+34     	; 0xdb2 <__fixunssfsi+0x26>
 d90:	9f 57       	subi	r25, 0x7F	; 127
 d92:	90 f0       	brcs	.+36     	; 0xdb8 <__fixunssfsi+0x2c>
 d94:	b9 2f       	mov	r27, r25
 d96:	99 27       	eor	r25, r25
 d98:	b7 51       	subi	r27, 0x17	; 23
 d9a:	a0 f0       	brcs	.+40     	; 0xdc4 <__fixunssfsi+0x38>
 d9c:	d1 f0       	breq	.+52     	; 0xdd2 <__fixunssfsi+0x46>
 d9e:	66 0f       	add	r22, r22
 da0:	77 1f       	adc	r23, r23
 da2:	88 1f       	adc	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	1a f0       	brmi	.+6      	; 0xdae <__fixunssfsi+0x22>
 da8:	ba 95       	dec	r27
 daa:	c9 f7       	brne	.-14     	; 0xd9e <__fixunssfsi+0x12>
 dac:	12 c0       	rjmp	.+36     	; 0xdd2 <__fixunssfsi+0x46>
 dae:	b1 30       	cpi	r27, 0x01	; 1
 db0:	81 f0       	breq	.+32     	; 0xdd2 <__fixunssfsi+0x46>
 db2:	9f d0       	rcall	.+318    	; 0xef2 <__fp_zero>
 db4:	b1 e0       	ldi	r27, 0x01	; 1
 db6:	08 95       	ret
 db8:	9c c0       	rjmp	.+312    	; 0xef2 <__fp_zero>
 dba:	67 2f       	mov	r22, r23
 dbc:	78 2f       	mov	r23, r24
 dbe:	88 27       	eor	r24, r24
 dc0:	b8 5f       	subi	r27, 0xF8	; 248
 dc2:	39 f0       	breq	.+14     	; 0xdd2 <__fixunssfsi+0x46>
 dc4:	b9 3f       	cpi	r27, 0xF9	; 249
 dc6:	cc f3       	brlt	.-14     	; 0xdba <__fixunssfsi+0x2e>
 dc8:	86 95       	lsr	r24
 dca:	77 95       	ror	r23
 dcc:	67 95       	ror	r22
 dce:	b3 95       	inc	r27
 dd0:	d9 f7       	brne	.-10     	; 0xdc8 <__fixunssfsi+0x3c>
 dd2:	3e f4       	brtc	.+14     	; 0xde2 <__fixunssfsi+0x56>
 dd4:	90 95       	com	r25
 dd6:	80 95       	com	r24
 dd8:	70 95       	com	r23
 dda:	61 95       	neg	r22
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <__floatunsisf>:
 de4:	e8 94       	clt
 de6:	09 c0       	rjmp	.+18     	; 0xdfa <__floatsisf+0x12>

00000de8 <__floatsisf>:
 de8:	97 fb       	bst	r25, 7
 dea:	3e f4       	brtc	.+14     	; 0xdfa <__floatsisf+0x12>
 dec:	90 95       	com	r25
 dee:	80 95       	com	r24
 df0:	70 95       	com	r23
 df2:	61 95       	neg	r22
 df4:	7f 4f       	sbci	r23, 0xFF	; 255
 df6:	8f 4f       	sbci	r24, 0xFF	; 255
 df8:	9f 4f       	sbci	r25, 0xFF	; 255
 dfa:	99 23       	and	r25, r25
 dfc:	a9 f0       	breq	.+42     	; 0xe28 <__floatsisf+0x40>
 dfe:	f9 2f       	mov	r31, r25
 e00:	96 e9       	ldi	r25, 0x96	; 150
 e02:	bb 27       	eor	r27, r27
 e04:	93 95       	inc	r25
 e06:	f6 95       	lsr	r31
 e08:	87 95       	ror	r24
 e0a:	77 95       	ror	r23
 e0c:	67 95       	ror	r22
 e0e:	b7 95       	ror	r27
 e10:	f1 11       	cpse	r31, r1
 e12:	f8 cf       	rjmp	.-16     	; 0xe04 <__floatsisf+0x1c>
 e14:	fa f4       	brpl	.+62     	; 0xe54 <__floatsisf+0x6c>
 e16:	bb 0f       	add	r27, r27
 e18:	11 f4       	brne	.+4      	; 0xe1e <__floatsisf+0x36>
 e1a:	60 ff       	sbrs	r22, 0
 e1c:	1b c0       	rjmp	.+54     	; 0xe54 <__floatsisf+0x6c>
 e1e:	6f 5f       	subi	r22, 0xFF	; 255
 e20:	7f 4f       	sbci	r23, 0xFF	; 255
 e22:	8f 4f       	sbci	r24, 0xFF	; 255
 e24:	9f 4f       	sbci	r25, 0xFF	; 255
 e26:	16 c0       	rjmp	.+44     	; 0xe54 <__floatsisf+0x6c>
 e28:	88 23       	and	r24, r24
 e2a:	11 f0       	breq	.+4      	; 0xe30 <__floatsisf+0x48>
 e2c:	96 e9       	ldi	r25, 0x96	; 150
 e2e:	11 c0       	rjmp	.+34     	; 0xe52 <__floatsisf+0x6a>
 e30:	77 23       	and	r23, r23
 e32:	21 f0       	breq	.+8      	; 0xe3c <__floatsisf+0x54>
 e34:	9e e8       	ldi	r25, 0x8E	; 142
 e36:	87 2f       	mov	r24, r23
 e38:	76 2f       	mov	r23, r22
 e3a:	05 c0       	rjmp	.+10     	; 0xe46 <__floatsisf+0x5e>
 e3c:	66 23       	and	r22, r22
 e3e:	71 f0       	breq	.+28     	; 0xe5c <__floatsisf+0x74>
 e40:	96 e8       	ldi	r25, 0x86	; 134
 e42:	86 2f       	mov	r24, r22
 e44:	70 e0       	ldi	r23, 0x00	; 0
 e46:	60 e0       	ldi	r22, 0x00	; 0
 e48:	2a f0       	brmi	.+10     	; 0xe54 <__floatsisf+0x6c>
 e4a:	9a 95       	dec	r25
 e4c:	66 0f       	add	r22, r22
 e4e:	77 1f       	adc	r23, r23
 e50:	88 1f       	adc	r24, r24
 e52:	da f7       	brpl	.-10     	; 0xe4a <__floatsisf+0x62>
 e54:	88 0f       	add	r24, r24
 e56:	96 95       	lsr	r25
 e58:	87 95       	ror	r24
 e5a:	97 f9       	bld	r25, 7
 e5c:	08 95       	ret

00000e5e <__fp_inf>:
 e5e:	97 f9       	bld	r25, 7
 e60:	9f 67       	ori	r25, 0x7F	; 127
 e62:	80 e8       	ldi	r24, 0x80	; 128
 e64:	70 e0       	ldi	r23, 0x00	; 0
 e66:	60 e0       	ldi	r22, 0x00	; 0
 e68:	08 95       	ret

00000e6a <__fp_nan>:
 e6a:	9f ef       	ldi	r25, 0xFF	; 255
 e6c:	80 ec       	ldi	r24, 0xC0	; 192
 e6e:	08 95       	ret

00000e70 <__fp_pscA>:
 e70:	00 24       	eor	r0, r0
 e72:	0a 94       	dec	r0
 e74:	16 16       	cp	r1, r22
 e76:	17 06       	cpc	r1, r23
 e78:	18 06       	cpc	r1, r24
 e7a:	09 06       	cpc	r0, r25
 e7c:	08 95       	ret

00000e7e <__fp_pscB>:
 e7e:	00 24       	eor	r0, r0
 e80:	0a 94       	dec	r0
 e82:	12 16       	cp	r1, r18
 e84:	13 06       	cpc	r1, r19
 e86:	14 06       	cpc	r1, r20
 e88:	05 06       	cpc	r0, r21
 e8a:	08 95       	ret

00000e8c <__fp_round>:
 e8c:	09 2e       	mov	r0, r25
 e8e:	03 94       	inc	r0
 e90:	00 0c       	add	r0, r0
 e92:	11 f4       	brne	.+4      	; 0xe98 <__fp_round+0xc>
 e94:	88 23       	and	r24, r24
 e96:	52 f0       	brmi	.+20     	; 0xeac <__fp_round+0x20>
 e98:	bb 0f       	add	r27, r27
 e9a:	40 f4       	brcc	.+16     	; 0xeac <__fp_round+0x20>
 e9c:	bf 2b       	or	r27, r31
 e9e:	11 f4       	brne	.+4      	; 0xea4 <__fp_round+0x18>
 ea0:	60 ff       	sbrs	r22, 0
 ea2:	04 c0       	rjmp	.+8      	; 0xeac <__fp_round+0x20>
 ea4:	6f 5f       	subi	r22, 0xFF	; 255
 ea6:	7f 4f       	sbci	r23, 0xFF	; 255
 ea8:	8f 4f       	sbci	r24, 0xFF	; 255
 eaa:	9f 4f       	sbci	r25, 0xFF	; 255
 eac:	08 95       	ret

00000eae <__fp_split3>:
 eae:	57 fd       	sbrc	r21, 7
 eb0:	90 58       	subi	r25, 0x80	; 128
 eb2:	44 0f       	add	r20, r20
 eb4:	55 1f       	adc	r21, r21
 eb6:	59 f0       	breq	.+22     	; 0xece <__fp_splitA+0x10>
 eb8:	5f 3f       	cpi	r21, 0xFF	; 255
 eba:	71 f0       	breq	.+28     	; 0xed8 <__fp_splitA+0x1a>
 ebc:	47 95       	ror	r20

00000ebe <__fp_splitA>:
 ebe:	88 0f       	add	r24, r24
 ec0:	97 fb       	bst	r25, 7
 ec2:	99 1f       	adc	r25, r25
 ec4:	61 f0       	breq	.+24     	; 0xede <__fp_splitA+0x20>
 ec6:	9f 3f       	cpi	r25, 0xFF	; 255
 ec8:	79 f0       	breq	.+30     	; 0xee8 <__fp_splitA+0x2a>
 eca:	87 95       	ror	r24
 ecc:	08 95       	ret
 ece:	12 16       	cp	r1, r18
 ed0:	13 06       	cpc	r1, r19
 ed2:	14 06       	cpc	r1, r20
 ed4:	55 1f       	adc	r21, r21
 ed6:	f2 cf       	rjmp	.-28     	; 0xebc <__fp_split3+0xe>
 ed8:	46 95       	lsr	r20
 eda:	f1 df       	rcall	.-30     	; 0xebe <__fp_splitA>
 edc:	08 c0       	rjmp	.+16     	; 0xeee <__fp_splitA+0x30>
 ede:	16 16       	cp	r1, r22
 ee0:	17 06       	cpc	r1, r23
 ee2:	18 06       	cpc	r1, r24
 ee4:	99 1f       	adc	r25, r25
 ee6:	f1 cf       	rjmp	.-30     	; 0xeca <__fp_splitA+0xc>
 ee8:	86 95       	lsr	r24
 eea:	71 05       	cpc	r23, r1
 eec:	61 05       	cpc	r22, r1
 eee:	08 94       	sec
 ef0:	08 95       	ret

00000ef2 <__fp_zero>:
 ef2:	e8 94       	clt

00000ef4 <__fp_szero>:
 ef4:	bb 27       	eor	r27, r27
 ef6:	66 27       	eor	r22, r22
 ef8:	77 27       	eor	r23, r23
 efa:	cb 01       	movw	r24, r22
 efc:	97 f9       	bld	r25, 7
 efe:	08 95       	ret

00000f00 <_exit>:
 f00:	f8 94       	cli

00000f02 <__stop_program>:
 f02:	ff cf       	rjmp	.-2      	; 0xf02 <__stop_program>
