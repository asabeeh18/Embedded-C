
GrayScaling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000846  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001e  00800200  00800200  000008ba  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001a0  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001464  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000364  00000000  00000000  00001eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c57  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000041c  00000000  00000000  00002eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000501  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000dca  00000000  00000000  000037c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001d8  00000000  00000000  00004593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	e8 c2       	rjmp	.+1488   	; 0x5e6 <__vector_5>
  16:	00 00       	nop
  18:	c1 c2       	rjmp	.+1410   	; 0x59c <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e4       	ldi	r30, 0x46	; 70
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 31       	cpi	r26, 0x1E	; 30
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7c d3       	rcall	.+1784   	; 0x818 <main>
 120:	90 c3       	rjmp	.+1824   	; 0x842 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_set_4bit>:
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
	port_restore = port_restore & 0xF7;
	PORTC = port_restore;
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_set_4bit+0x4>
 12c:	00 00       	nop
 12e:	40 98       	cbi	0x08, 0	; 8
 130:	41 98       	cbi	0x08, 1	; 8
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	88 b9       	out	0x08, r24	; 8
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	97 e4       	ldi	r25, 0x47	; 71
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_set_4bit+0x1e>
 142:	00 00       	nop
 144:	42 98       	cbi	0x08, 2	; 8
 146:	86 e6       	ldi	r24, 0x66	; 102
 148:	9e e0       	ldi	r25, 0x0E	; 14
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_set_4bit+0x26>
 14e:	00 00       	nop
 150:	40 98       	cbi	0x08, 0	; 8
 152:	41 98       	cbi	0x08, 1	; 8
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	88 b9       	out	0x08, r24	; 8
 158:	42 9a       	sbi	0x08, 2	; 8
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	97 e4       	ldi	r25, 0x47	; 71
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_set_4bit+0x40>
 164:	00 00       	nop
 166:	42 98       	cbi	0x08, 2	; 8
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	9e e0       	ldi	r25, 0x0E	; 14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x48>
 170:	00 00       	nop
 172:	40 98       	cbi	0x08, 0	; 8
 174:	41 98       	cbi	0x08, 1	; 8
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	88 b9       	out	0x08, r24	; 8
 17a:	42 9a       	sbi	0x08, 2	; 8
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	97 e4       	ldi	r25, 0x47	; 71
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x5c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_set_4bit+0x62>
 186:	00 00       	nop
 188:	42 98       	cbi	0x08, 2	; 8
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x6a>
 192:	00 00       	nop
 194:	40 98       	cbi	0x08, 0	; 8
 196:	41 98       	cbi	0x08, 1	; 8
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	42 9a       	sbi	0x08, 2	; 8
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	97 e4       	ldi	r25, 0x47	; 71
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x7e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x84>
 1a8:	00 00       	nop
 1aa:	42 98       	cbi	0x08, 2	; 8
 1ac:	08 95       	ret

000001ae <lcd_wr_command>:
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	28 2f       	mov	r18, r24
 1b8:	20 7f       	andi	r18, 0xF0	; 240
 1ba:	92 2b       	or	r25, r18
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	41 98       	cbi	0x08, 1	; 8
 1c2:	42 9a       	sbi	0x08, 2	; 8
 1c4:	ef ef       	ldi	r30, 0xFF	; 255
 1c6:	f7 e4       	ldi	r31, 0x47	; 71
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x1a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_wr_command+0x20>
 1ce:	00 00       	nop
 1d0:	42 98       	cbi	0x08, 2	; 8
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	9f 70       	andi	r25, 0x0F	; 15
 1d6:	98 b9       	out	0x08, r25	; 8
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	40 98       	cbi	0x08, 0	; 8
 1e4:	41 98       	cbi	0x08, 1	; 8
 1e6:	42 9a       	sbi	0x08, 2	; 8
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	97 e4       	ldi	r25, 0x47	; 71
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_wr_command+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_wr_command+0x44>
 1f2:	00 00       	nop
 1f4:	42 98       	cbi	0x08, 2	; 8
 1f6:	08 95       	ret

000001f8 <lcd_init>:
 1f8:	95 df       	rcall	.-214    	; 0x124 <lcd_set_4bit>
 1fa:	86 e6       	ldi	r24, 0x66	; 102
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x6>
 202:	00 00       	nop
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	d3 df       	rcall	.-90     	; 0x1ae <lcd_wr_command>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	d1 df       	rcall	.-94     	; 0x1ae <lcd_wr_command>
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	cf df       	rcall	.-98     	; 0x1ae <lcd_wr_command>
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	cd df       	rcall	.-102    	; 0x1ae <lcd_wr_command>
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	cb cf       	rjmp	.-106    	; 0x1ae <lcd_wr_command>
 218:	08 95       	ret

0000021a <lcd_wr_char>:
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	98 b9       	out	0x08, r25	; 8
 220:	98 b1       	in	r25, 0x08	; 8
 222:	28 2f       	mov	r18, r24
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	92 2b       	or	r25, r18
 228:	98 b9       	out	0x08, r25	; 8
 22a:	40 9a       	sbi	0x08, 0	; 8
 22c:	41 98       	cbi	0x08, 1	; 8
 22e:	42 9a       	sbi	0x08, 2	; 8
 230:	ef ef       	ldi	r30, 0xFF	; 255
 232:	f7 e4       	ldi	r31, 0x47	; 71
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
 23a:	00 00       	nop
 23c:	42 98       	cbi	0x08, 2	; 8
 23e:	98 b1       	in	r25, 0x08	; 8
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	98 b9       	out	0x08, r25	; 8
 244:	98 b1       	in	r25, 0x08	; 8
 246:	82 95       	swap	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	89 2b       	or	r24, r25
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	40 9a       	sbi	0x08, 0	; 8
 250:	41 98       	cbi	0x08, 1	; 8
 252:	42 9a       	sbi	0x08, 2	; 8
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	97 e4       	ldi	r25, 0x47	; 71
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
 25e:	00 00       	nop
 260:	42 98       	cbi	0x08, 2	; 8
 262:	08 95       	ret

00000264 <lcd_home>:
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	a3 cf       	rjmp	.-186    	; 0x1ae <lcd_wr_command>
 268:	08 95       	ret

0000026a <lcd_cursor>:
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	69 f0       	breq	.+26     	; 0x288 <lcd_cursor+0x1e>
 26e:	18 f4       	brcc	.+6      	; 0x276 <lcd_cursor+0xc>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	31 f0       	breq	.+12     	; 0x280 <lcd_cursor+0x16>
 274:	08 95       	ret
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	59 f0       	breq	.+22     	; 0x290 <lcd_cursor+0x26>
 27a:	84 30       	cpi	r24, 0x04	; 4
 27c:	69 f0       	breq	.+26     	; 0x298 <lcd_cursor+0x2e>
 27e:	08 95       	ret
 280:	8f e7       	ldi	r24, 0x7F	; 127
 282:	86 0f       	add	r24, r22
 284:	94 cf       	rjmp	.-216    	; 0x1ae <lcd_wr_command>
 286:	08 95       	ret
 288:	8f eb       	ldi	r24, 0xBF	; 191
 28a:	86 0f       	add	r24, r22
 28c:	90 cf       	rjmp	.-224    	; 0x1ae <lcd_wr_command>
 28e:	08 95       	ret
 290:	83 e9       	ldi	r24, 0x93	; 147
 292:	86 0f       	add	r24, r22
 294:	8c cf       	rjmp	.-232    	; 0x1ae <lcd_wr_command>
 296:	08 95       	ret
 298:	83 ed       	ldi	r24, 0xD3	; 211
 29a:	86 0f       	add	r24, r22
 29c:	88 cf       	rjmp	.-240    	; 0x1ae <lcd_wr_command>
 29e:	08 95       	ret

000002a0 <lcd_print>:
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	8a 01       	movw	r16, r20
 2aa:	e9 01       	movw	r28, r18
 2ac:	88 23       	and	r24, r24
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <lcd_print+0x14>
 2b0:	61 11       	cpse	r22, r1
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <lcd_print+0x18>
 2b4:	d7 df       	rcall	.-82     	; 0x264 <lcd_home>
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <lcd_print+0x1a>
 2b8:	d8 df       	rcall	.-80     	; 0x26a <lcd_cursor>
 2ba:	c5 30       	cpi	r28, 0x05	; 5
 2bc:	d1 05       	cpc	r29, r1
 2be:	09 f0       	breq	.+2      	; 0x2c2 <lcd_print+0x22>
 2c0:	cd c0       	rjmp	.+410    	; 0x45c <lcd_print+0x1bc>
 2c2:	98 01       	movw	r18, r16
 2c4:	32 95       	swap	r19
 2c6:	22 95       	swap	r18
 2c8:	2f 70       	andi	r18, 0x0F	; 15
 2ca:	23 27       	eor	r18, r19
 2cc:	3f 70       	andi	r19, 0x0F	; 15
 2ce:	23 27       	eor	r18, r19
 2d0:	a7 e4       	ldi	r26, 0x47	; 71
 2d2:	b3 e0       	ldi	r27, 0x03	; 3
 2d4:	a7 d2       	rcall	.+1358   	; 0x824 <__umulhisi3>
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	c0 96       	adiw	r24, 0x30	; 48
 2e4:	90 93 0e 02 	sts	0x020E, r25
 2e8:	80 93 0d 02 	sts	0x020D, r24
 2ec:	96 df       	rcall	.-212    	; 0x21a <lcd_wr_char>
 2ee:	98 01       	movw	r18, r16
 2f0:	36 95       	lsr	r19
 2f2:	27 95       	ror	r18
 2f4:	36 95       	lsr	r19
 2f6:	27 95       	ror	r18
 2f8:	36 95       	lsr	r19
 2fa:	27 95       	ror	r18
 2fc:	a5 ec       	ldi	r26, 0xC5	; 197
 2fe:	b0 e2       	ldi	r27, 0x20	; 32
 300:	91 d2       	rcall	.+1314   	; 0x824 <__umulhisi3>
 302:	ac 01       	movw	r20, r24
 304:	52 95       	swap	r21
 306:	42 95       	swap	r20
 308:	4f 70       	andi	r20, 0x0F	; 15
 30a:	45 27       	eor	r20, r21
 30c:	5f 70       	andi	r21, 0x0F	; 15
 30e:	45 27       	eor	r20, r21
 310:	50 93 10 02 	sts	0x0210, r21
 314:	40 93 0f 02 	sts	0x020F, r20
 318:	9a 01       	movw	r18, r20
 31a:	ad ec       	ldi	r26, 0xCD	; 205
 31c:	bc ec       	ldi	r27, 0xCC	; 204
 31e:	82 d2       	rcall	.+1284   	; 0x824 <__umulhisi3>
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	9c 01       	movw	r18, r24
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	48 1b       	sub	r20, r24
 344:	59 0b       	sbc	r21, r25
 346:	ca 01       	movw	r24, r20
 348:	c0 96       	adiw	r24, 0x30	; 48
 34a:	90 93 1b 02 	sts	0x021B, r25
 34e:	80 93 1a 02 	sts	0x021A, r24
 352:	63 df       	rcall	.-314    	; 0x21a <lcd_wr_char>
 354:	04 c0       	rjmp	.+8      	; 0x35e <lcd_print+0xbe>
 356:	c3 30       	cpi	r28, 0x03	; 3
 358:	d1 05       	cpc	r29, r1
 35a:	09 f0       	breq	.+2      	; 0x35e <lcd_print+0xbe>
 35c:	84 c0       	rjmp	.+264    	; 0x466 <lcd_print+0x1c6>
 35e:	98 01       	movw	r18, r16
 360:	36 95       	lsr	r19
 362:	27 95       	ror	r18
 364:	36 95       	lsr	r19
 366:	27 95       	ror	r18
 368:	ab e7       	ldi	r26, 0x7B	; 123
 36a:	b4 e1       	ldi	r27, 0x14	; 20
 36c:	5b d2       	rcall	.+1206   	; 0x824 <__umulhisi3>
 36e:	ac 01       	movw	r20, r24
 370:	56 95       	lsr	r21
 372:	47 95       	ror	r20
 374:	50 93 10 02 	sts	0x0210, r21
 378:	40 93 0f 02 	sts	0x020F, r20
 37c:	9a 01       	movw	r18, r20
 37e:	ad ec       	ldi	r26, 0xCD	; 205
 380:	bc ec       	ldi	r27, 0xCC	; 204
 382:	50 d2       	rcall	.+1184   	; 0x824 <__umulhisi3>
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
 388:	96 95       	lsr	r25
 38a:	87 95       	ror	r24
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	9c 01       	movw	r18, r24
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	48 1b       	sub	r20, r24
 3a8:	59 0b       	sbc	r21, r25
 3aa:	ca 01       	movw	r24, r20
 3ac:	c0 96       	adiw	r24, 0x30	; 48
 3ae:	90 93 17 02 	sts	0x0217, r25
 3b2:	80 93 16 02 	sts	0x0216, r24
 3b6:	31 df       	rcall	.-414    	; 0x21a <lcd_wr_char>
 3b8:	98 01       	movw	r18, r16
 3ba:	ad ec       	ldi	r26, 0xCD	; 205
 3bc:	bc ec       	ldi	r27, 0xCC	; 204
 3be:	32 d2       	rcall	.+1124   	; 0x824 <__umulhisi3>
 3c0:	ac 01       	movw	r20, r24
 3c2:	56 95       	lsr	r21
 3c4:	47 95       	ror	r20
 3c6:	56 95       	lsr	r21
 3c8:	47 95       	ror	r20
 3ca:	56 95       	lsr	r21
 3cc:	47 95       	ror	r20
 3ce:	50 93 10 02 	sts	0x0210, r21
 3d2:	40 93 0f 02 	sts	0x020F, r20
 3d6:	9a 01       	movw	r18, r20
 3d8:	25 d2       	rcall	.+1098   	; 0x824 <__umulhisi3>
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	9c 01       	movw	r18, r24
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	82 0f       	add	r24, r18
 3fa:	93 1f       	adc	r25, r19
 3fc:	48 1b       	sub	r20, r24
 3fe:	59 0b       	sbc	r21, r25
 400:	ca 01       	movw	r24, r20
 402:	c0 96       	adiw	r24, 0x30	; 48
 404:	90 93 15 02 	sts	0x0215, r25
 408:	80 93 14 02 	sts	0x0214, r24
 40c:	06 df       	rcall	.-500    	; 0x21a <lcd_wr_char>
 40e:	03 c0       	rjmp	.+6      	; 0x416 <lcd_print+0x176>
 410:	c1 30       	cpi	r28, 0x01	; 1
 412:	d1 05       	cpc	r29, r1
 414:	f1 f4       	brne	.+60     	; 0x452 <lcd_print+0x1b2>
 416:	98 01       	movw	r18, r16
 418:	ad ec       	ldi	r26, 0xCD	; 205
 41a:	bc ec       	ldi	r27, 0xCC	; 204
 41c:	03 d2       	rcall	.+1030   	; 0x824 <__umulhisi3>
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	9c 01       	movw	r18, r24
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	82 0f       	add	r24, r18
 43e:	93 1f       	adc	r25, r19
 440:	08 1b       	sub	r16, r24
 442:	19 0b       	sbc	r17, r25
 444:	c8 01       	movw	r24, r16
 446:	c0 96       	adiw	r24, 0x30	; 48
 448:	90 93 19 02 	sts	0x0219, r25
 44c:	80 93 18 02 	sts	0x0218, r24
 450:	e4 de       	rcall	.-568    	; 0x21a <lcd_wr_char>
 452:	26 97       	sbiw	r28, 0x06	; 6
 454:	64 f0       	brlt	.+24     	; 0x46e <lcd_print+0x1ce>
 456:	85 e4       	ldi	r24, 0x45	; 69
 458:	e0 de       	rcall	.-576    	; 0x21a <lcd_wr_char>
 45a:	09 c0       	rjmp	.+18     	; 0x46e <lcd_print+0x1ce>
 45c:	c4 30       	cpi	r28, 0x04	; 4
 45e:	d1 05       	cpc	r29, r1
 460:	09 f0       	breq	.+2      	; 0x464 <lcd_print+0x1c4>
 462:	79 cf       	rjmp	.-270    	; 0x356 <lcd_print+0xb6>
 464:	44 cf       	rjmp	.-376    	; 0x2ee <lcd_print+0x4e>
 466:	c2 30       	cpi	r28, 0x02	; 2
 468:	d1 05       	cpc	r29, r1
 46a:	91 f6       	brne	.-92     	; 0x410 <lcd_print+0x170>
 46c:	a5 cf       	rjmp	.-182    	; 0x3b8 <lcd_print+0x118>
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <lcd_port_config>:
 478:	87 b1       	in	r24, 0x07	; 7
 47a:	87 6f       	ori	r24, 0xF7	; 247
 47c:	87 b9       	out	0x07, r24	; 7
 47e:	88 b1       	in	r24, 0x08	; 8
 480:	80 78       	andi	r24, 0x80	; 128
 482:	88 b9       	out	0x08, r24	; 8
 484:	08 95       	ret

00000486 <adc_pin_config>:
 486:	10 ba       	out	0x10, r1	; 16
 488:	11 ba       	out	0x11, r1	; 17
 48a:	10 92 07 01 	sts	0x0107, r1
 48e:	10 92 08 01 	sts	0x0108, r1
 492:	08 95       	ret

00000494 <motion_pin_config>:
 494:	81 b1       	in	r24, 0x01	; 1
 496:	8f 60       	ori	r24, 0x0F	; 15
 498:	81 b9       	out	0x01, r24	; 1
 49a:	82 b1       	in	r24, 0x02	; 2
 49c:	80 7f       	andi	r24, 0xF0	; 240
 49e:	82 b9       	out	0x02, r24	; 2
 4a0:	ea e0       	ldi	r30, 0x0A	; 10
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	80 81       	ld	r24, Z
 4a6:	88 61       	ori	r24, 0x18	; 24
 4a8:	80 83       	st	Z, r24
 4aa:	eb e0       	ldi	r30, 0x0B	; 11
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	80 81       	ld	r24, Z
 4b0:	88 61       	ori	r24, 0x18	; 24
 4b2:	80 83       	st	Z, r24
 4b4:	08 95       	ret

000004b6 <left_encoder_pin_config>:
 4b6:	6c 98       	cbi	0x0d, 4	; 13
 4b8:	74 9a       	sbi	0x0e, 4	; 14
 4ba:	08 95       	ret

000004bc <right_encoder_pin_config>:
 4bc:	6d 98       	cbi	0x0d, 5	; 13
 4be:	75 9a       	sbi	0x0e, 5	; 14
 4c0:	08 95       	ret

000004c2 <port_init>:
 4c2:	da df       	rcall	.-76     	; 0x478 <lcd_port_config>
 4c4:	e0 df       	rcall	.-64     	; 0x486 <adc_pin_config>
 4c6:	e6 df       	rcall	.-52     	; 0x494 <motion_pin_config>
 4c8:	f6 df       	rcall	.-20     	; 0x4b6 <left_encoder_pin_config>
 4ca:	f8 cf       	rjmp	.-16     	; 0x4bc <right_encoder_pin_config>
 4cc:	08 95       	ret

000004ce <timer5_init>:
 4ce:	e1 e2       	ldi	r30, 0x21	; 33
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	10 82       	st	Z, r1
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	80 93 25 01 	sts	0x0125, r24
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	90 93 24 01 	sts	0x0124, r25
 4e0:	10 92 29 01 	sts	0x0129, r1
 4e4:	80 93 28 01 	sts	0x0128, r24
 4e8:	10 92 2b 01 	sts	0x012B, r1
 4ec:	80 93 2a 01 	sts	0x012A, r24
 4f0:	10 92 2d 01 	sts	0x012D, r1
 4f4:	80 93 2c 01 	sts	0x012C, r24
 4f8:	89 ea       	ldi	r24, 0xA9	; 169
 4fa:	80 93 20 01 	sts	0x0120, r24
 4fe:	8b e0       	ldi	r24, 0x0B	; 11
 500:	80 83       	st	Z, r24
 502:	08 95       	ret

00000504 <adc_init>:
 504:	ea e7       	ldi	r30, 0x7A	; 122
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	10 82       	st	Z, r1
 50a:	10 92 7b 00 	sts	0x007B, r1
 50e:	80 e2       	ldi	r24, 0x20	; 32
 510:	80 93 7c 00 	sts	0x007C, r24
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	80 bf       	out	0x30, r24	; 48
 518:	86 e8       	ldi	r24, 0x86	; 134
 51a:	80 83       	st	Z, r24
 51c:	08 95       	ret

0000051e <ADC_Conversion>:
 51e:	88 30       	cpi	r24, 0x08	; 8
 520:	18 f0       	brcs	.+6      	; 0x528 <ADC_Conversion+0xa>
 522:	98 e0       	ldi	r25, 0x08	; 8
 524:	90 93 7b 00 	sts	0x007B, r25
 528:	87 70       	andi	r24, 0x07	; 7
 52a:	80 62       	ori	r24, 0x20	; 32
 52c:	80 93 7c 00 	sts	0x007C, r24
 530:	ea e7       	ldi	r30, 0x7A	; 122
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	80 64       	ori	r24, 0x40	; 64
 538:	80 83       	st	Z, r24
 53a:	80 81       	ld	r24, Z
 53c:	84 ff       	sbrs	r24, 4
 53e:	fd cf       	rjmp	.-6      	; 0x53a <ADC_Conversion+0x1c>
 540:	80 91 79 00 	lds	r24, 0x0079
 544:	ea e7       	ldi	r30, 0x7A	; 122
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	90 81       	ld	r25, Z
 54a:	90 61       	ori	r25, 0x10	; 16
 54c:	90 83       	st	Z, r25
 54e:	10 92 7b 00 	sts	0x007B, r1
 552:	08 95       	ret

00000554 <print_sensor>:
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	c8 2f       	mov	r28, r24
 55a:	d6 2f       	mov	r29, r22
 55c:	84 2f       	mov	r24, r20
 55e:	df df       	rcall	.-66     	; 0x51e <ADC_Conversion>
 560:	80 93 11 02 	sts	0x0211, r24
 564:	48 2f       	mov	r20, r24
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	23 e0       	ldi	r18, 0x03	; 3
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	6d 2f       	mov	r22, r29
 56e:	8c 2f       	mov	r24, r28
 570:	97 de       	rcall	.-722    	; 0x2a0 <lcd_print>
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <left_position_encoder_interrupt_init>:
 578:	f8 94       	cli
 57a:	ea e6       	ldi	r30, 0x6A	; 106
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	82 60       	ori	r24, 0x02	; 2
 582:	80 83       	st	Z, r24
 584:	ec 9a       	sbi	0x1d, 4	; 29
 586:	78 94       	sei
 588:	08 95       	ret

0000058a <right_position_encoder_interrupt_init>:
 58a:	f8 94       	cli
 58c:	ea e6       	ldi	r30, 0x6A	; 106
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	88 60       	ori	r24, 0x08	; 8
 594:	80 83       	st	Z, r24
 596:	ed 9a       	sbi	0x1d, 5	; 29
 598:	78 94       	sei
 59a:	08 95       	ret

0000059c <__vector_6>:
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	80 91 00 02 	lds	r24, 0x0200
 5b2:	90 91 01 02 	lds	r25, 0x0201
 5b6:	a0 91 02 02 	lds	r26, 0x0202
 5ba:	b0 91 03 02 	lds	r27, 0x0203
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	a1 1d       	adc	r26, r1
 5c2:	b1 1d       	adc	r27, r1
 5c4:	80 93 00 02 	sts	0x0200, r24
 5c8:	90 93 01 02 	sts	0x0201, r25
 5cc:	a0 93 02 02 	sts	0x0202, r26
 5d0:	b0 93 03 02 	sts	0x0203, r27
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <__vector_5>:
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	80 91 04 02 	lds	r24, 0x0204
 5fc:	90 91 05 02 	lds	r25, 0x0205
 600:	a0 91 06 02 	lds	r26, 0x0206
 604:	b0 91 07 02 	lds	r27, 0x0207
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	a1 1d       	adc	r26, r1
 60c:	b1 1d       	adc	r27, r1
 60e:	80 93 04 02 	sts	0x0204, r24
 612:	90 93 05 02 	sts	0x0205, r25
 616:	a0 93 06 02 	sts	0x0206, r26
 61a:	b0 93 07 02 	sts	0x0207, r27
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <motion_set>:
 630:	92 b1       	in	r25, 0x02	; 2
 632:	90 7f       	andi	r25, 0xF0	; 240
 634:	8f 70       	andi	r24, 0x0F	; 15
 636:	98 2b       	or	r25, r24
 638:	92 b9       	out	0x02, r25	; 2
 63a:	08 95       	ret

0000063c <forward>:
 63c:	86 e0       	ldi	r24, 0x06	; 6
 63e:	f8 cf       	rjmp	.-16     	; 0x630 <motion_set>
 640:	08 95       	ret

00000642 <stop>:
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	f5 cf       	rjmp	.-22     	; 0x630 <motion_set>
 646:	08 95       	ret

00000648 <init_devices>:
}


void init_devices (void)
{
 	cli(); //Clears the global interrupts
 648:	f8 94       	cli
	port_init();
 64a:	3b df       	rcall	.-394    	; 0x4c2 <port_init>
	adc_init();
 64c:	5b df       	rcall	.-330    	; 0x504 <adc_init>
	left_position_encoder_interrupt_init();
 64e:	94 df       	rcall	.-216    	; 0x578 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
 650:	9c df       	rcall	.-200    	; 0x58a <right_position_encoder_interrupt_init>
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
 652:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;
 654:	43 98       	cbi	0x08, 3	; 8
	timer5_init();
 656:	3b df       	rcall	.-394    	; 0x4ce <timer5_init>
	sei();   //Enables the global interrupts
 658:	78 94       	sei
 65a:	08 95       	ret

0000065c <set_color>:

// forward jaa plz

void set_color()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	5f df       	rcall	.-322    	; 0x51e <ADC_Conversion>
 660:	80 93 0a 02 	sts	0x020A, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	5b df       	rcall	.-330    	; 0x51e <ADC_Conversion>
 668:	80 93 09 02 	sts	0x0209, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	57 df       	rcall	.-338    	; 0x51e <ADC_Conversion>
 670:	80 93 08 02 	sts	0x0208, r24
	
	print_sensor(1,1,3);	//Prints value of White Line Sensor1
 674:	43 e0       	ldi	r20, 0x03	; 3
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	6c df       	rcall	.-296    	; 0x554 <print_sensor>
	print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 67c:	42 e0       	ldi	r20, 0x02	; 2
 67e:	65 e0       	ldi	r22, 0x05	; 5
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	68 df       	rcall	.-304    	; 0x554 <print_sensor>
	print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 684:	41 e0       	ldi	r20, 0x01	; 1
 686:	69 e0       	ldi	r22, 0x09	; 9
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	64 cf       	rjmp	.-312    	; 0x554 <print_sensor>
 68c:	08 95       	ret

0000068e <forwardJaa>:

}
void forwardJaa()
{
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 6a4:	80 93 2a 01 	sts	0x012A, r24

}
void forwardJaa()
{
	velocity(255,255);
	forward();
 6a8:	c9 df       	rcall	.-110    	; 0x63c <forward>
	set_color();
 6aa:	d8 df       	rcall	.-80     	; 0x65c <set_color>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 6ac:	08 e2       	ldi	r16, 0x28	; 40
 6ae:	11 e0       	ldi	r17, 0x01	; 1
 6b0:	ff 24       	eor	r15, r15
 6b2:	fa 94       	dec	r15
	OCR5BL = (unsigned char)right_motor;
 6b4:	ca e2       	ldi	r28, 0x2A	; 42
 6b6:	d1 e0       	ldi	r29, 0x01	; 1
 6b8:	0f 2e       	mov	r0, r31
 6ba:	f7 ed       	ldi	r31, 0xD7	; 215
 6bc:	ef 2e       	mov	r14, r31
 6be:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 6c0:	0f 2e       	mov	r0, r31
 6c2:	f2 e8       	ldi	r31, 0x82	; 130
 6c4:	cf 2e       	mov	r12, r31
 6c6:	f0 2d       	mov	r31, r0
 6c8:	0f 2e       	mov	r0, r31
 6ca:	f6 ee       	ldi	r31, 0xE6	; 230
 6cc:	df 2e       	mov	r13, r31
 6ce:	f0 2d       	mov	r31, r0
	forward();
	set_color();
			
	while(1)
	{
		if(Center_white_line<=50)
 6d0:	80 91 09 02 	lds	r24, 0x0209
 6d4:	83 33       	cpi	r24, 0x33	; 51
 6d6:	08 f0       	brcs	.+2      	; 0x6da <forwardJaa+0x4c>
 6d8:	84 c0       	rjmp	.+264    	; 0x7e2 <forwardJaa+0x154>
		{
			//Alert Bhai Adjust kar
					if(Left_white_line>=40 &&  Right_white_line<=40)
 6da:	80 91 0a 02 	lds	r24, 0x020A
 6de:	88 32       	cpi	r24, 0x28	; 40
 6e0:	38 f1       	brcs	.+78     	; 0x730 <forwardJaa+0xa2>
 6e2:	80 91 08 02 	lds	r24, 0x0208
 6e6:	89 32       	cpi	r24, 0x29	; 41
 6e8:	18 f5       	brcc	.+70     	; 0x730 <forwardJaa+0xa2>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 6ea:	f8 01       	movw	r30, r16
 6ec:	e0 82       	st	Z, r14
	OCR5BL = (unsigned char)right_motor;
 6ee:	f8 82       	st	Y, r15
		{
			//Alert Bhai Adjust kar
					if(Left_white_line>=40 &&  Right_white_line<=40)
					{
						velocity(215,255);
						forward();
 6f0:	a5 df       	rcall	.-182    	; 0x63c <forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f2:	ff ef       	ldi	r31, 0xFF	; 255
 6f4:	2f ef       	ldi	r18, 0xFF	; 255
 6f6:	8c e2       	ldi	r24, 0x2C	; 44
 6f8:	f1 50       	subi	r31, 0x01	; 1
 6fa:	20 40       	sbci	r18, 0x00	; 0
 6fc:	80 40       	sbci	r24, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <forwardJaa+0x6a>
 700:	00 c0       	rjmp	.+0      	; 0x702 <forwardJaa+0x74>
 702:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 704:	f8 01       	movw	r30, r16
 706:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 708:	d8 82       	st	Y, r13
					{
						velocity(215,255);
						forward();
						_delay_ms(1000);
						velocity(255,230);
						forward();
 70a:	98 df       	rcall	.-208    	; 0x63c <forward>
 70c:	ff ef       	ldi	r31, 0xFF	; 255
 70e:	2f e7       	ldi	r18, 0x7F	; 127
 710:	86 e1       	ldi	r24, 0x16	; 22
 712:	f1 50       	subi	r31, 0x01	; 1
 714:	20 40       	sbci	r18, 0x00	; 0
 716:	80 40       	sbci	r24, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <forwardJaa+0x84>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <forwardJaa+0x8e>
 71c:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 71e:	f8 01       	movw	r30, r16
 720:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 722:	f8 82       	st	Y, r15
						_delay_ms(1000);
						velocity(255,230);
						forward();
						_delay_ms(500);
						velocity(255,255);
						set_color();
 724:	9b df       	rcall	.-202    	; 0x65c <set_color>
						if(Center_white_line>40)
 726:	80 91 09 02 	lds	r24, 0x0209
 72a:	89 32       	cpi	r24, 0x29	; 41
 72c:	08 f0       	brcs	.+2      	; 0x730 <forwardJaa+0xa2>
 72e:	69 c0       	rjmp	.+210    	; 0x802 <forwardJaa+0x174>
						break;
					}
					if(Left_white_line<=40 &&  Right_white_line>=40)
 730:	80 91 0a 02 	lds	r24, 0x020A
 734:	89 32       	cpi	r24, 0x29	; 41
 736:	38 f5       	brcc	.+78     	; 0x786 <forwardJaa+0xf8>
 738:	80 91 08 02 	lds	r24, 0x0208
 73c:	88 32       	cpi	r24, 0x28	; 40
 73e:	18 f1       	brcs	.+70     	; 0x786 <forwardJaa+0xf8>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 740:	f8 01       	movw	r30, r16
 742:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 744:	e8 82       	st	Y, r14
						break;
					}
					if(Left_white_line<=40 &&  Right_white_line>=40)
					{
						velocity(255,215);
						forward();
 746:	7a df       	rcall	.-268    	; 0x63c <forward>
 748:	ff ef       	ldi	r31, 0xFF	; 255
 74a:	2f ef       	ldi	r18, 0xFF	; 255
 74c:	8c e2       	ldi	r24, 0x2C	; 44
 74e:	f1 50       	subi	r31, 0x01	; 1
 750:	20 40       	sbci	r18, 0x00	; 0
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <forwardJaa+0xc0>
 756:	00 c0       	rjmp	.+0      	; 0x758 <forwardJaa+0xca>
 758:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 75a:	f8 01       	movw	r30, r16
 75c:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
 75e:	f8 82       	st	Y, r15
					{
						velocity(255,215);
						forward();
						_delay_ms(1000);
						velocity(230,255);
						forward();
 760:	6d df       	rcall	.-294    	; 0x63c <forward>
 762:	ff ef       	ldi	r31, 0xFF	; 255
 764:	2f e7       	ldi	r18, 0x7F	; 127
 766:	86 e1       	ldi	r24, 0x16	; 22
 768:	f1 50       	subi	r31, 0x01	; 1
 76a:	20 40       	sbci	r18, 0x00	; 0
 76c:	80 40       	sbci	r24, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <forwardJaa+0xda>
 770:	00 c0       	rjmp	.+0      	; 0x772 <forwardJaa+0xe4>
 772:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 774:	f8 01       	movw	r30, r16
 776:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 778:	f8 82       	st	Y, r15
						_delay_ms(1000);
						velocity(230,255);
						forward();
						_delay_ms(500);
						velocity(255,255);
						set_color();
 77a:	70 df       	rcall	.-288    	; 0x65c <set_color>
						if(Center_white_line>40)
 77c:	80 91 09 02 	lds	r24, 0x0209
 780:	89 32       	cpi	r24, 0x29	; 41
 782:	78 f1       	brcs	.+94     	; 0x7e2 <forwardJaa+0x154>
 784:	3e c0       	rjmp	.+124    	; 0x802 <forwardJaa+0x174>
						break;
					}
					else
					if(Center_white_line<=50)
 786:	80 91 09 02 	lds	r24, 0x0209
 78a:	83 33       	cpi	r24, 0x33	; 51
 78c:	50 f5       	brcc	.+84     	; 0x7e2 <forwardJaa+0x154>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 78e:	f8 01       	movw	r30, r16
 790:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 792:	e8 82       	st	Y, r14
					}
					else
					if(Center_white_line<=50)
					{
						velocity(255,215);
						forward();
 794:	53 df       	rcall	.-346    	; 0x63c <forward>
 796:	ff ef       	ldi	r31, 0xFF	; 255
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	8a e1       	ldi	r24, 0x1A	; 26
 79c:	f1 50       	subi	r31, 0x01	; 1
 79e:	20 40       	sbci	r18, 0x00	; 0
 7a0:	80 40       	sbci	r24, 0x00	; 0
 7a2:	e1 f7       	brne	.-8      	; 0x79c <forwardJaa+0x10e>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <forwardJaa+0x118>
 7a6:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7a8:	f8 01       	movw	r30, r16
 7aa:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 7ac:	f8 82       	st	Y, r15
					{
						velocity(255,215);
						forward();
						_delay_ms(600);
						velocity(255,255);
						set_color();
 7ae:	56 df       	rcall	.-340    	; 0x65c <set_color>
						if(Center_white_line>40)
 7b0:	80 91 09 02 	lds	r24, 0x0209
 7b4:	89 32       	cpi	r24, 0x29	; 41
 7b6:	28 f5       	brcc	.+74     	; 0x802 <forwardJaa+0x174>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7b8:	f8 01       	movw	r30, r16
 7ba:	c0 82       	st	Z, r12
	OCR5BL = (unsigned char)right_motor;
 7bc:	f8 82       	st	Y, r15
						set_color();
						if(Center_white_line>40)
						break;
						
						velocity(130,255);
						forward();
 7be:	3e df       	rcall	.-388    	; 0x63c <forward>
 7c0:	ff ef       	ldi	r31, 0xFF	; 255
 7c2:	2f ef       	ldi	r18, 0xFF	; 255
 7c4:	8a e1       	ldi	r24, 0x1A	; 26
 7c6:	f1 50       	subi	r31, 0x01	; 1
 7c8:	20 40       	sbci	r18, 0x00	; 0
 7ca:	80 40       	sbci	r24, 0x00	; 0
 7cc:	e1 f7       	brne	.-8      	; 0x7c6 <forwardJaa+0x138>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <forwardJaa+0x142>
 7d0:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7d2:	f8 01       	movw	r30, r16
 7d4:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 7d6:	f8 82       	st	Y, r15
						
						velocity(130,255);
						forward();
						_delay_ms(600);
						velocity(255,255);
						set_color();
 7d8:	41 df       	rcall	.-382    	; 0x65c <set_color>
						if(Center_white_line>40)
 7da:	80 91 09 02 	lds	r24, 0x0209
 7de:	89 32       	cpi	r24, 0x29	; 41
 7e0:	80 f4       	brcc	.+32     	; 0x802 <forwardJaa+0x174>
						break;
					}
		}		
		if(Center_white_line<40 && Left_white_line<40 && Right_white_line<40)
 7e2:	80 91 09 02 	lds	r24, 0x0209
 7e6:	88 32       	cpi	r24, 0x28	; 40
 7e8:	50 f4       	brcc	.+20     	; 0x7fe <forwardJaa+0x170>
 7ea:	80 91 0a 02 	lds	r24, 0x020A
 7ee:	88 32       	cpi	r24, 0x28	; 40
 7f0:	30 f4       	brcc	.+12     	; 0x7fe <forwardJaa+0x170>
 7f2:	80 91 08 02 	lds	r24, 0x0208
 7f6:	88 32       	cpi	r24, 0x28	; 40
 7f8:	10 f4       	brcc	.+4      	; 0x7fe <forwardJaa+0x170>
		{
			stop();
 7fa:	23 df       	rcall	.-442    	; 0x642 <stop>
			break;
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <forwardJaa+0x174>
		}
				set_color();
 7fe:	2e df       	rcall	.-420    	; 0x65c <set_color>
				
	}
 800:	67 cf       	rjmp	.-306    	; 0x6d0 <forwardJaa+0x42>
			set_color();
 802:	2c df       	rcall	.-424    	; 0x65c <set_color>
			
	stop();
 804:	1e df       	rcall	.-452    	; 0x642 <stop>
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	08 95       	ret

00000818 <main>:
//Main Function
int main()
{
	init_devices();
 818:	17 df       	rcall	.-466    	; 0x648 <init_devices>
	lcd_set_4bit();
 81a:	84 dc       	rcall	.-1784   	; 0x124 <lcd_set_4bit>
	lcd_init();
 81c:	ed dc       	rcall	.-1574   	; 0x1f8 <lcd_init>
	set_color();
 81e:	1e df       	rcall	.-452    	; 0x65c <set_color>
	while(1)
	forwardJaa();	
 820:	36 df       	rcall	.-404    	; 0x68e <forwardJaa>
 822:	fe cf       	rjmp	.-4      	; 0x820 <main+0x8>

00000824 <__umulhisi3>:
 824:	a2 9f       	mul	r26, r18
 826:	b0 01       	movw	r22, r0
 828:	b3 9f       	mul	r27, r19
 82a:	c0 01       	movw	r24, r0
 82c:	a3 9f       	mul	r26, r19
 82e:	70 0d       	add	r23, r0
 830:	81 1d       	adc	r24, r1
 832:	11 24       	eor	r1, r1
 834:	91 1d       	adc	r25, r1
 836:	b2 9f       	mul	r27, r18
 838:	70 0d       	add	r23, r0
 83a:	81 1d       	adc	r24, r1
 83c:	11 24       	eor	r1, r1
 83e:	91 1d       	adc	r25, r1
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
