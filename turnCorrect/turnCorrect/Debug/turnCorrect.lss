
turnCorrect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00002e6e  00002f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080024a  0080024a  00002f4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000352f  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004be  00000000  00000000  00006813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026d1  00000000  00000000  00006cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a8  00000000  00000000  000093a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000850  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000231e  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  0000c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	ef c3       	rjmp	.+2014   	; 0x7f4 <__vector_5>
      16:	00 00       	nop
      18:	c8 c3       	rjmp	.+1936   	; 0x7aa <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e6       	ldi	r30, 0x6E	; 110
      fc:	fe e2       	ldi	r31, 0x2E	; 46
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3b       	cpi	r26, 0xBB	; 187
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <main>
     122:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 75 02 	sts	0x0275, r25
     30a:	80 93 74 02 	sts	0x0274, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 79 02 	sts	0x0279, r21
     338:	40 93 78 02 	sts	0x0278, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 ba 02 	sts	0x02BA, r25
     374:	80 93 b9 02 	sts	0x02B9, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 79 02 	sts	0x0279, r21
     3a0:	40 93 78 02 	sts	0x0278, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b0 02 	sts	0x02B0, r25
     3dc:	80 93 af 02 	sts	0x02AF, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 79 02 	sts	0x0279, r21
     3fe:	40 93 78 02 	sts	0x0278, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8a 02 	sts	0x028A, r25
     436:	80 93 89 02 	sts	0x0289, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 b8 02 	sts	0x02B8, r25
     47c:	80 93 b7 02 	sts	0x02B7, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 58 02 	lds	r24, 0x0258
     628:	90 91 59 02 	lds	r25, 0x0259
     62c:	a0 91 5a 02 	lds	r26, 0x025A
     630:	b0 91 5b 02 	lds	r27, 0x025B
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 58 02 	sts	0x0258, r24
     63e:	90 93 59 02 	sts	0x0259, r25
     642:	a0 93 5a 02 	sts	0x025A, r26
     646:	b0 93 5b 02 	sts	0x025B, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <filter_red>:
     676:	5e 98       	cbi	0x0b, 6	; 11
     678:	5f 98       	cbi	0x0b, 7	; 11
     67a:	08 95       	ret

0000067c <filter_green>:
     67c:	5e 9a       	sbi	0x0b, 6	; 11
     67e:	5f 9a       	sbi	0x0b, 7	; 11
     680:	08 95       	ret

00000682 <filter_blue>:
     682:	5e 98       	cbi	0x0b, 6	; 11
     684:	5f 9a       	sbi	0x0b, 7	; 11
     686:	08 95       	ret

00000688 <color_sensor_scaling>:
     688:	5c 9a       	sbi	0x0b, 4	; 11
     68a:	5d 9a       	sbi	0x0b, 5	; 11
     68c:	08 95       	ret

0000068e <red_read>:
     68e:	f3 df       	rcall	.-26     	; 0x676 <filter_red>
     690:	10 92 58 02 	sts	0x0258, r1
     694:	10 92 59 02 	sts	0x0259, r1
     698:	10 92 5a 02 	sts	0x025A, r1
     69c:	10 92 5b 02 	sts	0x025B, r1
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	8f e7       	ldi	r24, 0x7F	; 127
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <red_read+0x18>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <red_read+0x22>
     6b0:	00 00       	nop
     6b2:	80 91 58 02 	lds	r24, 0x0258
     6b6:	90 91 59 02 	lds	r25, 0x0259
     6ba:	a0 91 5a 02 	lds	r26, 0x025A
     6be:	b0 91 5b 02 	lds	r27, 0x025B
     6c2:	80 93 7e 02 	sts	0x027E, r24
     6c6:	90 93 7f 02 	sts	0x027F, r25
     6ca:	a0 93 80 02 	sts	0x0280, r26
     6ce:	b0 93 81 02 	sts	0x0281, r27
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	9c e2       	ldi	r25, 0x2C	; 44
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <red_read+0x4a>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <red_read+0x54>
     6e2:	00 00       	nop
     6e4:	08 95       	ret

000006e6 <green_read>:
     6e6:	ca df       	rcall	.-108    	; 0x67c <filter_green>
     6e8:	10 92 58 02 	sts	0x0258, r1
     6ec:	10 92 59 02 	sts	0x0259, r1
     6f0:	10 92 5a 02 	sts	0x025A, r1
     6f4:	10 92 5b 02 	sts	0x025B, r1
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	8f e7       	ldi	r24, 0x7F	; 127
     6fc:	94 e0       	ldi	r25, 0x04	; 4
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <green_read+0x18>
     706:	00 c0       	rjmp	.+0      	; 0x708 <green_read+0x22>
     708:	00 00       	nop
     70a:	80 91 58 02 	lds	r24, 0x0258
     70e:	90 91 59 02 	lds	r25, 0x0259
     712:	a0 91 5a 02 	lds	r26, 0x025A
     716:	b0 91 5b 02 	lds	r27, 0x025B
     71a:	80 93 7a 02 	sts	0x027A, r24
     71e:	90 93 7b 02 	sts	0x027B, r25
     722:	a0 93 7c 02 	sts	0x027C, r26
     726:	b0 93 7d 02 	sts	0x027D, r27
     72a:	08 95       	ret

0000072c <blue_read>:
     72c:	aa df       	rcall	.-172    	; 0x682 <filter_blue>
     72e:	10 92 58 02 	sts	0x0258, r1
     732:	10 92 59 02 	sts	0x0259, r1
     736:	10 92 5a 02 	sts	0x025A, r1
     73a:	10 92 5b 02 	sts	0x025B, r1
     73e:	2f ef       	ldi	r18, 0xFF	; 255
     740:	8f e7       	ldi	r24, 0x7F	; 127
     742:	94 e0       	ldi	r25, 0x04	; 4
     744:	21 50       	subi	r18, 0x01	; 1
     746:	80 40       	sbci	r24, 0x00	; 0
     748:	90 40       	sbci	r25, 0x00	; 0
     74a:	e1 f7       	brne	.-8      	; 0x744 <blue_read+0x18>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <blue_read+0x22>
     74e:	00 00       	nop
     750:	80 91 58 02 	lds	r24, 0x0258
     754:	90 91 59 02 	lds	r25, 0x0259
     758:	a0 91 5a 02 	lds	r26, 0x025A
     75c:	b0 91 5b 02 	lds	r27, 0x025B
     760:	80 93 6e 02 	sts	0x026E, r24
     764:	90 93 6f 02 	sts	0x026F, r25
     768:	a0 93 70 02 	sts	0x0270, r26
     76c:	b0 93 71 02 	sts	0x0271, r27
     770:	08 95       	ret

00000772 <left_encoder_pin_config>:
     772:	6c 98       	cbi	0x0d, 4	; 13
     774:	74 9a       	sbi	0x0e, 4	; 14
     776:	08 95       	ret

00000778 <right_encoder_pin_config>:
     778:	6d 98       	cbi	0x0d, 5	; 13
     77a:	75 9a       	sbi	0x0e, 5	; 14
     77c:	08 95       	ret

0000077e <port_init_poz>:
     77e:	af de       	rcall	.-674    	; 0x4de <motion_pin_config>
     780:	f8 df       	rcall	.-16     	; 0x772 <left_encoder_pin_config>
     782:	fa cf       	rjmp	.-12     	; 0x778 <right_encoder_pin_config>
     784:	08 95       	ret

00000786 <left_position_encoder_interrupt_init>:
     786:	f8 94       	cli
     788:	ea e6       	ldi	r30, 0x6A	; 106
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	82 60       	ori	r24, 0x02	; 2
     790:	80 83       	st	Z, r24
     792:	ec 9a       	sbi	0x1d, 4	; 29
     794:	78 94       	sei
     796:	08 95       	ret

00000798 <right_position_encoder_interrupt_init>:
     798:	f8 94       	cli
     79a:	ea e6       	ldi	r30, 0x6A	; 106
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 83       	st	Z, r24
     7a4:	ed 9a       	sbi	0x1d, 5	; 29
     7a6:	78 94       	sei
     7a8:	08 95       	ret

000007aa <__vector_6>:
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	8f 93       	push	r24
     7b6:	9f 93       	push	r25
     7b8:	af 93       	push	r26
     7ba:	bf 93       	push	r27
     7bc:	80 91 5c 02 	lds	r24, 0x025C
     7c0:	90 91 5d 02 	lds	r25, 0x025D
     7c4:	a0 91 5e 02 	lds	r26, 0x025E
     7c8:	b0 91 5f 02 	lds	r27, 0x025F
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	a1 1d       	adc	r26, r1
     7d0:	b1 1d       	adc	r27, r1
     7d2:	80 93 5c 02 	sts	0x025C, r24
     7d6:	90 93 5d 02 	sts	0x025D, r25
     7da:	a0 93 5e 02 	sts	0x025E, r26
     7de:	b0 93 5f 02 	sts	0x025F, r27
     7e2:	bf 91       	pop	r27
     7e4:	af 91       	pop	r26
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <__vector_5>:
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	80 91 60 02 	lds	r24, 0x0260
     80a:	90 91 61 02 	lds	r25, 0x0261
     80e:	a0 91 62 02 	lds	r26, 0x0262
     812:	b0 91 63 02 	lds	r27, 0x0263
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	a1 1d       	adc	r26, r1
     81a:	b1 1d       	adc	r27, r1
     81c:	80 93 60 02 	sts	0x0260, r24
     820:	90 93 61 02 	sts	0x0261, r25
     824:	a0 93 62 02 	sts	0x0262, r26
     828:	b0 93 63 02 	sts	0x0263, r27
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	0f 90       	pop	r0
     836:	0f be       	out	0x3f, r0	; 63
     838:	0f 90       	pop	r0
     83a:	1f 90       	pop	r1
     83c:	18 95       	reti

0000083e <angle_rotate>:
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	bc 01       	movw	r22, r24
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__floatunsisf>
     854:	28 e4       	ldi	r18, 0x48	; 72
     856:	31 ee       	ldi	r19, 0xE1	; 225
     858:	42 e8       	ldi	r20, 0x82	; 130
     85a:	50 e4       	ldi	r21, 0x40	; 64
     85c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divsf3>
     860:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__fixunssfsi>
     864:	cb 01       	movw	r24, r22
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	10 92 5c 02 	sts	0x025C, r1
     86e:	10 92 5d 02 	sts	0x025D, r1
     872:	10 92 5e 02 	sts	0x025E, r1
     876:	10 92 5f 02 	sts	0x025F, r1
     87a:	10 92 60 02 	sts	0x0260, r1
     87e:	10 92 61 02 	sts	0x0261, r1
     882:	10 92 62 02 	sts	0x0262, r1
     886:	10 92 63 02 	sts	0x0263, r1
     88a:	51 e0       	ldi	r21, 0x01	; 1
     88c:	e0 e0       	ldi	r30, 0x00	; 0
     88e:	c0 90 5c 02 	lds	r12, 0x025C
     892:	d0 90 5d 02 	lds	r13, 0x025D
     896:	e0 90 5e 02 	lds	r14, 0x025E
     89a:	f0 90 5f 02 	lds	r15, 0x025F
     89e:	00 91 60 02 	lds	r16, 0x0260
     8a2:	10 91 61 02 	lds	r17, 0x0261
     8a6:	20 91 62 02 	lds	r18, 0x0262
     8aa:	30 91 63 02 	lds	r19, 0x0263
     8ae:	45 2f       	mov	r20, r21
     8b0:	08 17       	cp	r16, r24
     8b2:	19 07       	cpc	r17, r25
     8b4:	2a 07       	cpc	r18, r26
     8b6:	3b 07       	cpc	r19, r27
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <angle_rotate+0x7e>
     8ba:	4e 2f       	mov	r20, r30
     8bc:	41 11       	cpse	r20, r1
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <angle_rotate+0x94>
     8c0:	25 2f       	mov	r18, r21
     8c2:	c8 16       	cp	r12, r24
     8c4:	d9 06       	cpc	r13, r25
     8c6:	ea 06       	cpc	r14, r26
     8c8:	fb 06       	cpc	r15, r27
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <angle_rotate+0x90>
     8cc:	2e 2f       	mov	r18, r30
     8ce:	22 23       	and	r18, r18
     8d0:	f1 f2       	breq	.-68     	; 0x88e <angle_rotate+0x50>
     8d2:	28 de       	rcall	.-944    	; 0x524 <stop>
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	08 95       	ret

000008e2 <linear_distance_mm>:
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	bc 01       	movw	r22, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__floatunsisf>
     8f0:	25 ee       	ldi	r18, 0xE5	; 229
     8f2:	30 ed       	ldi	r19, 0xD0	; 208
     8f4:	4a ea       	ldi	r20, 0xAA	; 170
     8f6:	50 e4       	ldi	r21, 0x40	; 64
     8f8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divsf3>
     8fc:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__fixunssfsi>
     900:	10 92 5c 02 	sts	0x025C, r1
     904:	10 92 5d 02 	sts	0x025D, r1
     908:	10 92 5e 02 	sts	0x025E, r1
     90c:	10 92 5f 02 	sts	0x025F, r1
     910:	00 91 5c 02 	lds	r16, 0x025C
     914:	10 91 5d 02 	lds	r17, 0x025D
     918:	20 91 5e 02 	lds	r18, 0x025E
     91c:	30 91 5f 02 	lds	r19, 0x025F
     920:	60 17       	cp	r22, r16
     922:	71 07       	cpc	r23, r17
     924:	82 07       	cpc	r24, r18
     926:	93 07       	cpc	r25, r19
     928:	98 f7       	brcc	.-26     	; 0x910 <linear_distance_mm+0x2e>
     92a:	fc dd       	rcall	.-1032   	; 0x524 <stop>
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <forward_mm>:
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	e9 dd       	rcall	.-1070   	; 0x50c <forward>
     93a:	ce 01       	movw	r24, r28
     93c:	d2 df       	rcall	.-92     	; 0x8e2 <linear_distance_mm>
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <back_mm>:
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	e3 dd       	rcall	.-1082   	; 0x512 <back>
     94c:	ce 01       	movw	r24, r28
     94e:	c9 df       	rcall	.-110    	; 0x8e2 <linear_distance_mm>
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <left_degrees>:
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
     95c:	dd dd       	rcall	.-1094   	; 0x518 <left>
     95e:	ce 01       	movw	r24, r28
     960:	6e df       	rcall	.-292    	; 0x83e <angle_rotate>
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <right_degrees>:
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	ec 01       	movw	r28, r24
     96e:	d7 dd       	rcall	.-1106   	; 0x51e <right>
     970:	ce 01       	movw	r24, r28
     972:	65 df       	rcall	.-310    	; 0x83e <angle_rotate>
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <init_devices>:
     97a:	f8 94       	cli
     97c:	00 df       	rcall	.-512    	; 0x77e <port_init_poz>
     97e:	03 df       	rcall	.-506    	; 0x786 <left_position_encoder_interrupt_init>
     980:	0b df       	rcall	.-490    	; 0x798 <right_position_encoder_interrupt_init>
     982:	12 de       	rcall	.-988    	; 0x5a8 <port_init>
     984:	3d de       	rcall	.-902    	; 0x600 <color_sensor_pin_interrupt_init>
     986:	6a de       	rcall	.-812    	; 0x65c <adc_init>
     988:	aa dd       	rcall	.-1196   	; 0x4de <motion_pin_config>
     98a:	8e dd       	rcall	.-1252   	; 0x4a8 <timer5_init>
     98c:	ea dd       	rcall	.-1068   	; 0x562 <timer1_init>
     98e:	78 94       	sei
     990:	08 95       	ret

00000992 <node>:
     992:	8c e3       	ldi	r24, 0x3C	; 60
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	cd cf       	rjmp	.-102    	; 0x932 <forward_mm>
     998:	08 95       	ret

0000099a <Delay>:
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	8c 01       	movw	r16, r24
     9a4:	18 16       	cp	r1, r24
     9a6:	19 06       	cpc	r1, r25
     9a8:	8c f4       	brge	.+34     	; 0x9cc <Delay+0x32>
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	d0 e0       	ldi	r29, 0x00	; 0
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <Delay+0x28>
     9b0:	86 e6       	ldi	r24, 0x66	; 102
     9b2:	9e e0       	ldi	r25, 0x0E	; 14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <Delay+0x1a>
     9b8:	00 00       	nop
     9ba:	21 96       	adiw	r28, 0x01	; 1
     9bc:	c0 17       	cp	r28, r16
     9be:	d1 07       	cpc	r29, r17
     9c0:	39 f0       	breq	.+14     	; 0x9d0 <Delay+0x36>
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	02 de       	rcall	.-1020   	; 0x5ca <ADC_Conversion>
     9c6:	89 32       	cpi	r24, 0x29	; 41
     9c8:	98 f3       	brcs	.-26     	; 0x9b0 <Delay+0x16>
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <Delay+0x36>
     9cc:	c0 e0       	ldi	r28, 0x00	; 0
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	a9 dd       	rcall	.-1198   	; 0x524 <stop>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	c0 17       	cp	r28, r16
     9d6:	d1 07       	cpc	r29, r17
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <Delay+0x42>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <set_color>:
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	f0 dd       	rcall	.-1056   	; 0x5ca <ADC_Conversion>
     9ea:	80 93 4d 02 	sts	0x024D, r24
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	ec dd       	rcall	.-1064   	; 0x5ca <ADC_Conversion>
     9f2:	80 93 4c 02 	sts	0x024C, r24
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	e8 dd       	rcall	.-1072   	; 0x5ca <ADC_Conversion>
     9fa:	80 93 4b 02 	sts	0x024B, r24
     9fe:	08 95       	ret

00000a00 <semiCorrect>:
     a00:	80 91 4c 02 	lds	r24, 0x024C
     a04:	88 32       	cpi	r24, 0x28	; 40
     a06:	58 f5       	brcc	.+86     	; 0xa5e <semiCorrect+0x5e>
     a08:	80 91 4d 02 	lds	r24, 0x024D
     a0c:	89 32       	cpi	r24, 0x29	; 41
     a0e:	98 f0       	brcs	.+38     	; 0xa36 <semiCorrect+0x36>
     a10:	90 91 4b 02 	lds	r25, 0x024B
     a14:	98 32       	cpi	r25, 0x28	; 40
     a16:	78 f4       	brcc	.+30     	; 0xa36 <semiCorrect+0x36>
     a18:	7f dd       	rcall	.-1282   	; 0x518 <left>
     a1a:	e5 df       	rcall	.-54     	; 0x9e6 <set_color>
     a1c:	80 91 4c 02 	lds	r24, 0x024C
     a20:	88 32       	cpi	r24, 0x28	; 40
     a22:	e8 f4       	brcc	.+58     	; 0xa5e <semiCorrect+0x5e>
     a24:	80 91 4d 02 	lds	r24, 0x024D
     a28:	89 32       	cpi	r24, 0x29	; 41
     a2a:	c8 f0       	brcs	.+50     	; 0xa5e <semiCorrect+0x5e>
     a2c:	80 91 4b 02 	lds	r24, 0x024B
     a30:	88 32       	cpi	r24, 0x28	; 40
     a32:	90 f3       	brcs	.-28     	; 0xa18 <semiCorrect+0x18>
     a34:	08 95       	ret
     a36:	90 91 4b 02 	lds	r25, 0x024B
     a3a:	99 32       	cpi	r25, 0x29	; 41
     a3c:	80 f0       	brcs	.+32     	; 0xa5e <semiCorrect+0x5e>
     a3e:	88 32       	cpi	r24, 0x28	; 40
     a40:	70 f4       	brcc	.+28     	; 0xa5e <semiCorrect+0x5e>
     a42:	6d dd       	rcall	.-1318   	; 0x51e <right>
     a44:	d0 df       	rcall	.-96     	; 0x9e6 <set_color>
     a46:	80 91 4c 02 	lds	r24, 0x024C
     a4a:	88 32       	cpi	r24, 0x28	; 40
     a4c:	40 f4       	brcc	.+16     	; 0xa5e <semiCorrect+0x5e>
     a4e:	80 91 4d 02 	lds	r24, 0x024D
     a52:	88 32       	cpi	r24, 0x28	; 40
     a54:	20 f4       	brcc	.+8      	; 0xa5e <semiCorrect+0x5e>
     a56:	80 91 4b 02 	lds	r24, 0x024B
     a5a:	89 32       	cpi	r24, 0x29	; 41
     a5c:	90 f7       	brcc	.-28     	; 0xa42 <semiCorrect+0x42>
     a5e:	08 95       	ret

00000a60 <correct>:
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 73 02 	sts	0x0273, r25
     a70:	80 93 72 02 	sts	0x0272, r24
     a74:	57 dd       	rcall	.-1362   	; 0x524 <stop>
     a76:	80 91 4a 02 	lds	r24, 0x024A
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	09 f0       	breq	.+2      	; 0xa80 <correct+0x20>
     a7e:	34 c0       	rjmp	.+104    	; 0xae8 <correct+0x88>
     a80:	10 92 4a 02 	sts	0x024A, r1
     a84:	ce e3       	ldi	r28, 0x3E	; 62
     a86:	d0 e0       	ldi	r29, 0x00	; 0
     a88:	02 e0       	ldi	r16, 0x02	; 2
     a8a:	10 e0       	ldi	r17, 0x00	; 0
     a8c:	48 dd       	rcall	.-1392   	; 0x51e <right>
     a8e:	02 30       	cpi	r16, 0x02	; 2
     a90:	11 05       	cpc	r17, r1
     a92:	31 f4       	brne	.+12     	; 0xaa0 <correct+0x40>
     a94:	8e e1       	ldi	r24, 0x1E	; 30
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	80 df       	rcall	.-256    	; 0x99a <Delay>
     a9a:	88 23       	and	r24, r24
     a9c:	29 f0       	breq	.+10     	; 0xaa8 <correct+0x48>
     a9e:	58 c0       	rjmp	.+176    	; 0xb50 <correct+0xf0>
     aa0:	ce 01       	movw	r24, r28
     aa2:	7b df       	rcall	.-266    	; 0x99a <Delay>
     aa4:	81 11       	cpse	r24, r1
     aa6:	54 c0       	rjmp	.+168    	; 0xb50 <correct+0xf0>
     aa8:	3d dd       	rcall	.-1414   	; 0x524 <stop>
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	8e dd       	rcall	.-1252   	; 0x5ca <ADC_Conversion>
     aae:	89 32       	cpi	r24, 0x29	; 41
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <correct+0x54>
     ab2:	4d c0       	rjmp	.+154    	; 0xb4e <correct+0xee>
     ab4:	a5 df       	rcall	.-182    	; 0xa00 <semiCorrect>
     ab6:	30 dd       	rcall	.-1440   	; 0x518 <left>
     ab8:	02 30       	cpi	r16, 0x02	; 2
     aba:	11 05       	cpc	r17, r1
     abc:	31 f4       	brne	.+12     	; 0xaca <correct+0x6a>
     abe:	8c e3       	ldi	r24, 0x3C	; 60
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	6b df       	rcall	.-298    	; 0x99a <Delay>
     ac4:	88 23       	and	r24, r24
     ac6:	29 f0       	breq	.+10     	; 0xad2 <correct+0x72>
     ac8:	43 c0       	rjmp	.+134    	; 0xb50 <correct+0xf0>
     aca:	ce 01       	movw	r24, r28
     acc:	66 df       	rcall	.-308    	; 0x99a <Delay>
     ace:	81 11       	cpse	r24, r1
     ad0:	3f c0       	rjmp	.+126    	; 0xb50 <correct+0xf0>
     ad2:	28 dd       	rcall	.-1456   	; 0x524 <stop>
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	79 dd       	rcall	.-1294   	; 0x5ca <ADC_Conversion>
     ad8:	64 96       	adiw	r28, 0x14	; 20
     ada:	88 32       	cpi	r24, 0x28	; 40
     adc:	08 f4       	brcc	.+2      	; 0xae0 <correct+0x80>
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <correct+0xee>
     ae0:	8f df       	rcall	.-226    	; 0xa00 <semiCorrect>
     ae2:	0c 5e       	subi	r16, 0xEC	; 236
     ae4:	1f 4f       	sbci	r17, 0xFF	; 255
     ae6:	d2 cf       	rjmp	.-92     	; 0xa8c <correct+0x2c>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 4a 02 	sts	0x024A, r24
     aee:	ce e3       	ldi	r28, 0x3E	; 62
     af0:	d0 e0       	ldi	r29, 0x00	; 0
     af2:	02 e0       	ldi	r16, 0x02	; 2
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	10 dd       	rcall	.-1504   	; 0x518 <left>
     af8:	02 30       	cpi	r16, 0x02	; 2
     afa:	11 05       	cpc	r17, r1
     afc:	31 f4       	brne	.+12     	; 0xb0a <correct+0xaa>
     afe:	8e e1       	ldi	r24, 0x1E	; 30
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	4b df       	rcall	.-362    	; 0x99a <Delay>
     b04:	88 23       	and	r24, r24
     b06:	29 f0       	breq	.+10     	; 0xb12 <correct+0xb2>
     b08:	23 c0       	rjmp	.+70     	; 0xb50 <correct+0xf0>
     b0a:	ce 01       	movw	r24, r28
     b0c:	46 df       	rcall	.-372    	; 0x99a <Delay>
     b0e:	81 11       	cpse	r24, r1
     b10:	1f c0       	rjmp	.+62     	; 0xb50 <correct+0xf0>
     b12:	08 dd       	rcall	.-1520   	; 0x524 <stop>
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	59 dd       	rcall	.-1358   	; 0x5ca <ADC_Conversion>
     b18:	89 32       	cpi	r24, 0x29	; 41
     b1a:	c8 f4       	brcc	.+50     	; 0xb4e <correct+0xee>
     b1c:	71 df       	rcall	.-286    	; 0xa00 <semiCorrect>
     b1e:	ff dc       	rcall	.-1538   	; 0x51e <right>
     b20:	02 30       	cpi	r16, 0x02	; 2
     b22:	11 05       	cpc	r17, r1
     b24:	31 f4       	brne	.+12     	; 0xb32 <correct+0xd2>
     b26:	8c e3       	ldi	r24, 0x3C	; 60
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	37 df       	rcall	.-402    	; 0x99a <Delay>
     b2c:	88 23       	and	r24, r24
     b2e:	29 f0       	breq	.+10     	; 0xb3a <correct+0xda>
     b30:	0f c0       	rjmp	.+30     	; 0xb50 <correct+0xf0>
     b32:	ce 01       	movw	r24, r28
     b34:	32 df       	rcall	.-412    	; 0x99a <Delay>
     b36:	81 11       	cpse	r24, r1
     b38:	0b c0       	rjmp	.+22     	; 0xb50 <correct+0xf0>
     b3a:	f4 dc       	rcall	.-1560   	; 0x524 <stop>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	45 dd       	rcall	.-1398   	; 0x5ca <ADC_Conversion>
     b40:	64 96       	adiw	r28, 0x14	; 20
     b42:	88 32       	cpi	r24, 0x28	; 40
     b44:	20 f0       	brcs	.+8      	; 0xb4e <correct+0xee>
     b46:	5c df       	rcall	.-328    	; 0xa00 <semiCorrect>
     b48:	0c 5e       	subi	r16, 0xEC	; 236
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	d4 cf       	rjmp	.-88     	; 0xaf6 <correct+0x96>
     b4e:	ea dc       	rcall	.-1580   	; 0x524 <stop>
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	08 95       	ret

00000b5a <noNatak>:
     b5a:	86 e9       	ldi	r24, 0x96	; 150
     b5c:	80 93 28 01 	sts	0x0128, r24
     b60:	80 93 2a 01 	sts	0x012A, r24
     b64:	80 91 4c 02 	lds	r24, 0x024C
     b68:	88 32       	cpi	r24, 0x28	; 40
     b6a:	70 f5       	brcc	.+92     	; 0xbc8 <noNatak+0x6e>
     b6c:	80 91 4d 02 	lds	r24, 0x024D
     b70:	89 32       	cpi	r24, 0x29	; 41
     b72:	98 f0       	brcs	.+38     	; 0xb9a <noNatak+0x40>
     b74:	90 91 4b 02 	lds	r25, 0x024B
     b78:	98 32       	cpi	r25, 0x28	; 40
     b7a:	78 f4       	brcc	.+30     	; 0xb9a <noNatak+0x40>
     b7c:	cd dc       	rcall	.-1638   	; 0x518 <left>
     b7e:	33 df       	rcall	.-410    	; 0x9e6 <set_color>
     b80:	80 91 4c 02 	lds	r24, 0x024C
     b84:	88 32       	cpi	r24, 0x28	; 40
     b86:	98 f5       	brcc	.+102    	; 0xbee <noNatak+0x94>
     b88:	80 91 4d 02 	lds	r24, 0x024D
     b8c:	89 32       	cpi	r24, 0x29	; 41
     b8e:	78 f1       	brcs	.+94     	; 0xbee <noNatak+0x94>
     b90:	80 91 4b 02 	lds	r24, 0x024B
     b94:	88 32       	cpi	r24, 0x28	; 40
     b96:	90 f3       	brcs	.-28     	; 0xb7c <noNatak+0x22>
     b98:	2a c0       	rjmp	.+84     	; 0xbee <noNatak+0x94>
     b9a:	90 91 4b 02 	lds	r25, 0x024B
     b9e:	99 32       	cpi	r25, 0x29	; 41
     ba0:	88 f0       	brcs	.+34     	; 0xbc4 <noNatak+0x6a>
     ba2:	88 32       	cpi	r24, 0x28	; 40
     ba4:	78 f4       	brcc	.+30     	; 0xbc4 <noNatak+0x6a>
     ba6:	bb dc       	rcall	.-1674   	; 0x51e <right>
     ba8:	1e df       	rcall	.-452    	; 0x9e6 <set_color>
     baa:	80 91 4c 02 	lds	r24, 0x024C
     bae:	88 32       	cpi	r24, 0x28	; 40
     bb0:	f0 f4       	brcc	.+60     	; 0xbee <noNatak+0x94>
     bb2:	80 91 4d 02 	lds	r24, 0x024D
     bb6:	88 32       	cpi	r24, 0x28	; 40
     bb8:	d0 f4       	brcc	.+52     	; 0xbee <noNatak+0x94>
     bba:	80 91 4b 02 	lds	r24, 0x024B
     bbe:	89 32       	cpi	r24, 0x29	; 41
     bc0:	90 f7       	brcc	.-28     	; 0xba6 <noNatak+0x4c>
     bc2:	15 c0       	rjmp	.+42     	; 0xbee <noNatak+0x94>
     bc4:	4d df       	rcall	.-358    	; 0xa60 <correct>
     bc6:	13 c0       	rjmp	.+38     	; 0xbee <noNatak+0x94>
     bc8:	80 91 4d 02 	lds	r24, 0x024D
     bcc:	89 32       	cpi	r24, 0x29	; 41
     bce:	30 f0       	brcs	.+12     	; 0xbdc <noNatak+0x82>
     bd0:	90 91 4b 02 	lds	r25, 0x024B
     bd4:	98 32       	cpi	r25, 0x28	; 40
     bd6:	10 f4       	brcc	.+4      	; 0xbdc <noNatak+0x82>
     bd8:	dc ce       	rjmp	.-584    	; 0x992 <node>
     bda:	08 95       	ret
     bdc:	88 32       	cpi	r24, 0x28	; 40
     bde:	30 f4       	brcc	.+12     	; 0xbec <noNatak+0x92>
     be0:	80 91 4b 02 	lds	r24, 0x024B
     be4:	89 32       	cpi	r24, 0x29	; 41
     be6:	10 f0       	brcs	.+4      	; 0xbec <noNatak+0x92>
     be8:	d4 ce       	rjmp	.-600    	; 0x992 <node>
     bea:	08 95       	ret
     bec:	39 df       	rcall	.-398    	; 0xa60 <correct>
     bee:	9a cc       	rjmp	.-1740   	; 0x524 <stop>
     bf0:	08 95       	ret

00000bf2 <forwardJaa>:
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	08 e2       	ldi	r16, 0x28	; 40
     bfe:	11 e0       	ldi	r17, 0x01	; 1
     c00:	0f 2e       	mov	r0, r31
     c02:	f0 ef       	ldi	r31, 0xF0	; 240
     c04:	ff 2e       	mov	r15, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	ca e2       	ldi	r28, 0x2A	; 42
     c0a:	d1 e0       	ldi	r29, 0x01	; 1
     c0c:	7f dc       	rcall	.-1794   	; 0x50c <forward>
     c0e:	eb de       	rcall	.-554    	; 0x9e6 <set_color>
     c10:	80 91 4c 02 	lds	r24, 0x024C
     c14:	89 32       	cpi	r24, 0x29	; 41
     c16:	50 f0       	brcs	.+20     	; 0xc2c <forwardJaa+0x3a>
     c18:	80 91 4d 02 	lds	r24, 0x024D
     c1c:	89 32       	cpi	r24, 0x29	; 41
     c1e:	20 f4       	brcc	.+8      	; 0xc28 <forwardJaa+0x36>
     c20:	80 91 4b 02 	lds	r24, 0x024B
     c24:	89 32       	cpi	r24, 0x29	; 41
     c26:	10 f0       	brcs	.+4      	; 0xc2c <forwardJaa+0x3a>
     c28:	b4 de       	rcall	.-664    	; 0x992 <node>
     c2a:	11 c0       	rjmp	.+34     	; 0xc4e <forwardJaa+0x5c>
     c2c:	f8 01       	movw	r30, r16
     c2e:	f0 82       	st	Z, r15
     c30:	f8 82       	st	Y, r15
     c32:	80 91 4c 02 	lds	r24, 0x024C
     c36:	89 32       	cpi	r24, 0x29	; 41
     c38:	40 f0       	brcs	.+16     	; 0xc4a <forwardJaa+0x58>
     c3a:	80 91 4d 02 	lds	r24, 0x024D
     c3e:	88 32       	cpi	r24, 0x28	; 40
     c40:	20 f4       	brcc	.+8      	; 0xc4a <forwardJaa+0x58>
     c42:	80 91 4b 02 	lds	r24, 0x024B
     c46:	88 32       	cpi	r24, 0x28	; 40
     c48:	08 f3       	brcs	.-62     	; 0xc0c <forwardJaa+0x1a>
     c4a:	87 df       	rcall	.-242    	; 0xb5a <noNatak>
     c4c:	d2 df       	rcall	.-92     	; 0xbf2 <forwardJaa>
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	08 95       	ret

00000c5a <lower>:
     c5a:	81 11       	cpse	r24, r1
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <lower+0x10>
     c5e:	10 92 8b 00 	sts	0x008B, r1
     c62:	8b e3       	ldi	r24, 0x3B	; 59
     c64:	80 93 8a 00 	sts	0x008A, r24
     c68:	08 95       	ret
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	29 f4       	brne	.+10     	; 0xc78 <lower+0x1e>
     c6e:	10 92 8b 00 	sts	0x008B, r1
     c72:	8b e6       	ldi	r24, 0x6B	; 107
     c74:	80 93 8a 00 	sts	0x008A, r24
     c78:	08 95       	ret

00000c7a <elevate>:
     c7a:	10 92 8b 00 	sts	0x008B, r1
     c7e:	83 e5       	ldi	r24, 0x53	; 83
     c80:	80 93 8a 00 	sts	0x008A, r24
     c84:	08 95       	ret

00000c86 <open>:
     c86:	81 11       	cpse	r24, r1
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <open+0x10>
     c8a:	10 92 8d 00 	sts	0x008D, r1
     c8e:	8b e3       	ldi	r24, 0x3B	; 59
     c90:	80 93 8c 00 	sts	0x008C, r24
     c94:	08 95       	ret
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	29 f4       	brne	.+10     	; 0xca4 <open+0x1e>
     c9a:	10 92 89 00 	sts	0x0089, r1
     c9e:	8b e3       	ldi	r24, 0x3B	; 59
     ca0:	80 93 88 00 	sts	0x0088, r24
     ca4:	08 95       	ret

00000ca6 <close>:
     ca6:	81 11       	cpse	r24, r1
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <close+0x10>
     caa:	10 92 8b 00 	sts	0x008B, r1
     cae:	8b e3       	ldi	r24, 0x3B	; 59
     cb0:	80 93 8a 00 	sts	0x008A, r24
     cb4:	08 95       	ret
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <close+0x1e>
     cba:	10 92 8b 00 	sts	0x008B, r1
     cbe:	8b e6       	ldi	r24, 0x6B	; 107
     cc0:	80 93 8a 00 	sts	0x008A, r24
     cc4:	08 95       	ret

00000cc6 <buzzer>:
     cc6:	79 dc       	rcall	.-1806   	; 0x5ba <buzzer_on>
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	8f e7       	ldi	r24, 0x7F	; 127
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	21 50       	subi	r18, 0x01	; 1
     cd0:	80 40       	sbci	r24, 0x00	; 0
     cd2:	90 40       	sbci	r25, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <buzzer+0x8>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <buzzer+0x12>
     cd8:	00 00       	nop
     cda:	73 cc       	rjmp	.-1818   	; 0x5c2 <buzzer_off>
     cdc:	08 95       	ret

00000cde <lcd>:
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	65 da       	rcall	.-2870   	; 0x1b2 <lcd_wr_command>
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	ce da       	rcall	.-2660   	; 0x28a <lcd_cursor>
     cee:	ce 01       	movw	r24, r28
     cf0:	be da       	rcall	.-2692   	; 0x26e <lcd_string>
     cf2:	e9 df       	rcall	.-46     	; 0xcc6 <buzzer>
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9c e2       	ldi	r25, 0x2C	; 44
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	80 40       	sbci	r24, 0x00	; 0
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	e1 f7       	brne	.-8      	; 0xcfa <lcd+0x1c>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <lcd+0x26>
     d04:	00 00       	nop
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <front>:
     d0c:	72 df       	rcall	.-284    	; 0xbf2 <forwardJaa>
     d0e:	80 91 76 02 	lds	r24, 0x0276
     d12:	90 91 77 02 	lds	r25, 0x0277
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	90 93 77 02 	sts	0x0277, r25
     d1c:	80 93 76 02 	sts	0x0276, r24
     d20:	08 95       	ret

00000d22 <turnRight>:
     d22:	80 91 4e 02 	lds	r24, 0x024E
     d26:	90 91 4f 02 	lds	r25, 0x024F
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	91 05       	cpc	r25, r1
     d2e:	39 f4       	brne	.+14     	; 0xd3e <turnRight+0x1c>
     d30:	80 91 50 02 	lds	r24, 0x0250
     d34:	90 91 51 02 	lds	r25, 0x0251
     d38:	02 97       	sbiw	r24, 0x02	; 2
     d3a:	98 f4       	brcc	.+38     	; 0xd62 <turnRight+0x40>
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <turnRight+0x2e>
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	81 f4       	brne	.+32     	; 0xd62 <turnRight+0x40>
     d42:	80 91 50 02 	lds	r24, 0x0250
     d46:	90 91 51 02 	lds	r25, 0x0251
     d4a:	02 97       	sbiw	r24, 0x02	; 2
     d4c:	02 97       	sbiw	r24, 0x02	; 2
     d4e:	48 f4       	brcc	.+18     	; 0xd62 <turnRight+0x40>
     d50:	86 e9       	ldi	r24, 0x96	; 150
     d52:	80 93 28 01 	sts	0x0128, r24
     d56:	80 93 2a 01 	sts	0x012A, r24
     d5a:	8a e5       	ldi	r24, 0x5A	; 90
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	04 de       	rcall	.-1016   	; 0x968 <right_degrees>
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <turnRight+0x5e>
     d62:	8e e1       	ldi	r24, 0x1E	; 30
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	00 de       	rcall	.-1024   	; 0x968 <right_degrees>
     d68:	86 e9       	ldi	r24, 0x96	; 150
     d6a:	80 93 28 01 	sts	0x0128, r24
     d6e:	80 93 2a 01 	sts	0x012A, r24
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <turnRight+0x54>
     d74:	d4 db       	rcall	.-2136   	; 0x51e <right>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	28 dc       	rcall	.-1968   	; 0x5ca <ADC_Conversion>
     d7a:	86 34       	cpi	r24, 0x46	; 70
     d7c:	d8 f3       	brcs	.-10     	; 0xd74 <turnRight+0x52>
     d7e:	d2 db       	rcall	.-2140   	; 0x524 <stop>
     d80:	8e e0       	ldi	r24, 0x0E	; 14
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	ac df       	rcall	.-168    	; 0xcde <lcd>
     d86:	80 91 4e 02 	lds	r24, 0x024E
     d8a:	90 91 4f 02 	lds	r25, 0x024F
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	83 70       	andi	r24, 0x03	; 3
     d92:	90 78       	andi	r25, 0x80	; 128
     d94:	99 23       	and	r25, r25
     d96:	24 f4       	brge	.+8      	; 0xda0 <turnRight+0x7e>
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	8c 6f       	ori	r24, 0xFC	; 252
     d9c:	9f 6f       	ori	r25, 0xFF	; 255
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	90 93 4f 02 	sts	0x024F, r25
     da4:	80 93 4e 02 	sts	0x024E, r24
     da8:	80 91 9b 02 	lds	r24, 0x029B
     dac:	90 91 9c 02 	lds	r25, 0x029C
     db0:	86 5a       	subi	r24, 0xA6	; 166
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	90 93 9c 02 	sts	0x029C, r25
     db8:	80 93 9b 02 	sts	0x029B, r24
     dbc:	08 95       	ret

00000dbe <turnLeft>:
     dbe:	80 91 4e 02 	lds	r24, 0x024E
     dc2:	90 91 4f 02 	lds	r25, 0x024F
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	91 05       	cpc	r25, r1
     dca:	39 f4       	brne	.+14     	; 0xdda <turnLeft+0x1c>
     dcc:	80 91 50 02 	lds	r24, 0x0250
     dd0:	90 91 51 02 	lds	r25, 0x0251
     dd4:	02 97       	sbiw	r24, 0x02	; 2
     dd6:	98 f4       	brcc	.+38     	; 0xdfe <turnLeft+0x40>
     dd8:	09 c0       	rjmp	.+18     	; 0xdec <turnLeft+0x2e>
     dda:	03 97       	sbiw	r24, 0x03	; 3
     ddc:	81 f4       	brne	.+32     	; 0xdfe <turnLeft+0x40>
     dde:	80 91 50 02 	lds	r24, 0x0250
     de2:	90 91 51 02 	lds	r25, 0x0251
     de6:	02 97       	sbiw	r24, 0x02	; 2
     de8:	02 97       	sbiw	r24, 0x02	; 2
     dea:	48 f4       	brcc	.+18     	; 0xdfe <turnLeft+0x40>
     dec:	86 e9       	ldi	r24, 0x96	; 150
     dee:	80 93 28 01 	sts	0x0128, r24
     df2:	80 93 2a 01 	sts	0x012A, r24
     df6:	8a e5       	ldi	r24, 0x5A	; 90
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	ad dd       	rcall	.-1190   	; 0x956 <left_degrees>
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <turnLeft+0x5e>
     dfe:	8e e1       	ldi	r24, 0x1E	; 30
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	a9 dd       	rcall	.-1198   	; 0x956 <left_degrees>
     e04:	86 e9       	ldi	r24, 0x96	; 150
     e06:	80 93 28 01 	sts	0x0128, r24
     e0a:	80 93 2a 01 	sts	0x012A, r24
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <turnLeft+0x54>
     e10:	83 db       	rcall	.-2298   	; 0x518 <left>
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	da db       	rcall	.-2124   	; 0x5ca <ADC_Conversion>
     e16:	86 34       	cpi	r24, 0x46	; 70
     e18:	d8 f3       	brcs	.-10     	; 0xe10 <turnLeft+0x52>
     e1a:	84 db       	rcall	.-2296   	; 0x524 <stop>
     e1c:	89 e1       	ldi	r24, 0x19	; 25
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	5e df       	rcall	.-324    	; 0xcde <lcd>
     e22:	80 91 4e 02 	lds	r24, 0x024E
     e26:	90 91 4f 02 	lds	r25, 0x024F
     e2a:	03 96       	adiw	r24, 0x03	; 3
     e2c:	83 70       	andi	r24, 0x03	; 3
     e2e:	90 78       	andi	r25, 0x80	; 128
     e30:	99 23       	and	r25, r25
     e32:	24 f4       	brge	.+8      	; 0xe3c <turnLeft+0x7e>
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	8c 6f       	ori	r24, 0xFC	; 252
     e38:	9f 6f       	ori	r25, 0xFF	; 255
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	90 93 4f 02 	sts	0x024F, r25
     e40:	80 93 4e 02 	sts	0x024E, r24
     e44:	80 91 9b 02 	lds	r24, 0x029B
     e48:	90 91 9c 02 	lds	r25, 0x029C
     e4c:	86 5a       	subi	r24, 0xA6	; 166
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	90 93 9c 02 	sts	0x029C, r25
     e54:	80 93 9b 02 	sts	0x029B, r24
     e58:	08 95       	ret

00000e5a <turn>:
     e5a:	80 91 4e 02 	lds	r24, 0x024E
     e5e:	90 91 4f 02 	lds	r25, 0x024F
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	81 f4       	brne	.+32     	; 0xe86 <turn+0x2c>
     e66:	80 91 50 02 	lds	r24, 0x0250
     e6a:	90 91 51 02 	lds	r25, 0x0251
     e6e:	02 97       	sbiw	r24, 0x02	; 2
     e70:	02 97       	sbiw	r24, 0x02	; 2
     e72:	d0 f4       	brcc	.+52     	; 0xea8 <turn+0x4e>
     e74:	86 e9       	ldi	r24, 0x96	; 150
     e76:	80 93 28 01 	sts	0x0128, r24
     e7a:	80 93 2a 01 	sts	0x012A, r24
     e7e:	84 eb       	ldi	r24, 0xB4	; 180
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	69 dd       	rcall	.-1326   	; 0x956 <left_degrees>
     e84:	20 c0       	rjmp	.+64     	; 0xec6 <turn+0x6c>
     e86:	02 97       	sbiw	r24, 0x02	; 2
     e88:	79 f4       	brne	.+30     	; 0xea8 <turn+0x4e>
     e8a:	80 91 50 02 	lds	r24, 0x0250
     e8e:	90 91 51 02 	lds	r25, 0x0251
     e92:	02 97       	sbiw	r24, 0x02	; 2
     e94:	48 f4       	brcc	.+18     	; 0xea8 <turn+0x4e>
     e96:	86 e9       	ldi	r24, 0x96	; 150
     e98:	80 93 28 01 	sts	0x0128, r24
     e9c:	80 93 2a 01 	sts	0x012A, r24
     ea0:	84 eb       	ldi	r24, 0xB4	; 180
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	58 dd       	rcall	.-1360   	; 0x956 <left_degrees>
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <turn+0x6c>
     ea8:	86 e9       	ldi	r24, 0x96	; 150
     eaa:	80 93 28 01 	sts	0x0128, r24
     eae:	80 93 2a 01 	sts	0x012A, r24
     eb2:	86 e9       	ldi	r24, 0x96	; 150
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	4f dd       	rcall	.-1378   	; 0x956 <left_degrees>
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <turn+0x62>
     eba:	2e db       	rcall	.-2468   	; 0x518 <left>
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	85 db       	rcall	.-2294   	; 0x5ca <ADC_Conversion>
     ec0:	86 34       	cpi	r24, 0x46	; 70
     ec2:	d8 f3       	brcs	.-10     	; 0xeba <turn+0x60>
     ec4:	2f db       	rcall	.-2466   	; 0x524 <stop>
     ec6:	8e e1       	ldi	r24, 0x1E	; 30
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	09 df       	rcall	.-494    	; 0xcde <lcd>
     ecc:	80 91 4e 02 	lds	r24, 0x024E
     ed0:	90 91 4f 02 	lds	r25, 0x024F
     ed4:	02 96       	adiw	r24, 0x02	; 2
     ed6:	83 70       	andi	r24, 0x03	; 3
     ed8:	90 78       	andi	r25, 0x80	; 128
     eda:	99 23       	and	r25, r25
     edc:	24 f4       	brge	.+8      	; 0xee6 <turn+0x8c>
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	8c 6f       	ori	r24, 0xFC	; 252
     ee2:	9f 6f       	ori	r25, 0xFF	; 255
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	90 93 4f 02 	sts	0x024F, r25
     eea:	80 93 4e 02 	sts	0x024E, r24
     eee:	80 91 9b 02 	lds	r24, 0x029B
     ef2:	90 91 9c 02 	lds	r25, 0x029C
     ef6:	8c 54       	subi	r24, 0x4C	; 76
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	90 93 9c 02 	sts	0x029C, r25
     efe:	80 93 9b 02 	sts	0x029B, r24
     f02:	08 95       	ret

00000f04 <traverseToSort>:
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	80 91 54 02 	lds	r24, 0x0254
     f0e:	90 91 55 02 	lds	r25, 0x0255
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	21 f4       	brne	.+8      	; 0xf1e <traverseToSort+0x1a>
     f16:	10 92 55 02 	sts	0x0255, r1
     f1a:	10 92 54 02 	sts	0x0254, r1
     f1e:	ce 01       	movw	r24, r28
     f20:	04 97       	sbiw	r24, 0x04	; 4
     f22:	02 97       	sbiw	r24, 0x02	; 2
     f24:	88 f5       	brcc	.+98     	; 0xf88 <traverseToSort+0x84>
     f26:	c4 30       	cpi	r28, 0x04	; 4
     f28:	d1 05       	cpc	r29, r1
     f2a:	39 f4       	brne	.+14     	; 0xf3a <traverseToSort+0x36>
     f2c:	80 91 4e 02 	lds	r24, 0x024E
     f30:	90 91 4f 02 	lds	r25, 0x024F
     f34:	89 2b       	or	r24, r25
     f36:	51 f0       	breq	.+20     	; 0xf4c <traverseToSort+0x48>
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <traverseToSort+0x4c>
     f3a:	c5 30       	cpi	r28, 0x05	; 5
     f3c:	d1 05       	cpc	r29, r1
     f3e:	41 f4       	brne	.+16     	; 0xf50 <traverseToSort+0x4c>
     f40:	80 91 4e 02 	lds	r24, 0x024E
     f44:	90 91 4f 02 	lds	r25, 0x024F
     f48:	02 97       	sbiw	r24, 0x02	; 2
     f4a:	11 f4       	brne	.+4      	; 0xf50 <traverseToSort+0x4c>
     f4c:	ea de       	rcall	.-556    	; 0xd22 <turnRight>
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <traverseToSort+0x4e>
     f50:	36 df       	rcall	.-404    	; 0xdbe <turnLeft>
     f52:	dc de       	rcall	.-584    	; 0xd0c <front>
     f54:	db de       	rcall	.-586    	; 0xd0c <front>
     f56:	24 97       	sbiw	r28, 0x04	; 4
     f58:	39 f4       	brne	.+14     	; 0xf68 <traverseToSort+0x64>
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 51 02 	sts	0x0251, r25
     f62:	80 93 50 02 	sts	0x0250, r24
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <traverseToSort+0x70>
     f68:	84 e0       	ldi	r24, 0x04	; 4
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 51 02 	sts	0x0251, r25
     f70:	80 93 50 02 	sts	0x0250, r24
     f74:	80 91 76 02 	lds	r24, 0x0276
     f78:	90 91 77 02 	lds	r25, 0x0277
     f7c:	02 96       	adiw	r24, 0x02	; 2
     f7e:	90 93 77 02 	sts	0x0277, r25
     f82:	80 93 76 02 	sts	0x0276, r24
     f86:	45 c0       	rjmp	.+138    	; 0x1012 <traverseToSort+0x10e>
     f88:	80 91 4e 02 	lds	r24, 0x024E
     f8c:	90 91 4f 02 	lds	r25, 0x024F
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	39 f4       	brne	.+14     	; 0xfa4 <traverseToSort+0xa0>
     f96:	80 91 50 02 	lds	r24, 0x0250
     f9a:	90 91 51 02 	lds	r25, 0x0251
     f9e:	02 97       	sbiw	r24, 0x02	; 2
     fa0:	78 f4       	brcc	.+30     	; 0xfc0 <traverseToSort+0xbc>
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <traverseToSort+0xb2>
     fa4:	03 97       	sbiw	r24, 0x03	; 3
     fa6:	99 f4       	brne	.+38     	; 0xfce <traverseToSort+0xca>
     fa8:	80 91 50 02 	lds	r24, 0x0250
     fac:	90 91 51 02 	lds	r25, 0x0251
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	91 05       	cpc	r25, r1
     fb4:	11 f4       	brne	.+4      	; 0xfba <traverseToSort+0xb6>
     fb6:	b5 de       	rcall	.-662    	; 0xd22 <turnRight>
     fb8:	0a c0       	rjmp	.+20     	; 0xfce <traverseToSort+0xca>
     fba:	02 97       	sbiw	r24, 0x02	; 2
     fbc:	40 f4       	brcc	.+16     	; 0xfce <traverseToSort+0xca>
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <traverseToSort+0xc8>
     fc0:	80 91 50 02 	lds	r24, 0x0250
     fc4:	90 91 51 02 	lds	r25, 0x0251
     fc8:	02 97       	sbiw	r24, 0x02	; 2
     fca:	09 f4       	brne	.+2      	; 0xfce <traverseToSort+0xca>
     fcc:	f8 de       	rcall	.-528    	; 0xdbe <turnLeft>
     fce:	22 97       	sbiw	r28, 0x02	; 2
     fd0:	3c f4       	brge	.+14     	; 0xfe0 <traverseToSort+0xdc>
     fd2:	80 91 4e 02 	lds	r24, 0x024E
     fd6:	90 91 4f 02 	lds	r25, 0x024F
     fda:	89 2b       	or	r24, r25
     fdc:	39 f0       	breq	.+14     	; 0xfec <traverseToSort+0xe8>
     fde:	07 c0       	rjmp	.+14     	; 0xfee <traverseToSort+0xea>
     fe0:	80 91 4e 02 	lds	r24, 0x024E
     fe4:	90 91 4f 02 	lds	r25, 0x024F
     fe8:	02 97       	sbiw	r24, 0x02	; 2
     fea:	09 f4       	brne	.+2      	; 0xfee <traverseToSort+0xea>
     fec:	36 df       	rcall	.-404    	; 0xe5a <turn>
     fee:	8e de       	rcall	.-740    	; 0xd0c <front>
     ff0:	80 91 87 02 	lds	r24, 0x0287
     ff4:	90 91 88 02 	lds	r25, 0x0288
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	90 78       	andi	r25, 0x80	; 128
     ffc:	99 23       	and	r25, r25
     ffe:	24 f4       	brge	.+8      	; 0x1008 <traverseToSort+0x104>
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	8e 6f       	ori	r24, 0xFE	; 254
    1004:	9f 6f       	ori	r25, 0xFF	; 255
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	04 96       	adiw	r24, 0x04	; 4
    100a:	90 93 51 02 	sts	0x0251, r25
    100e:	80 93 50 02 	sts	0x0250, r24
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <scan>:
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	38 db       	rcall	.-2448   	; 0x68e <red_read>
    101e:	86 db       	rcall	.-2292   	; 0x72c <blue_read>
    1020:	62 db       	rcall	.-2364   	; 0x6e6 <green_read>
    1022:	2f ef       	ldi	r18, 0xFF	; 255
    1024:	8f e7       	ldi	r24, 0x7F	; 127
    1026:	94 e0       	ldi	r25, 0x04	; 4
    1028:	21 50       	subi	r18, 0x01	; 1
    102a:	80 40       	sbci	r24, 0x00	; 0
    102c:	90 40       	sbci	r25, 0x00	; 0
    102e:	e1 f7       	brne	.-8      	; 0x1028 <scan+0x10>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <scan+0x1a>
    1032:	00 00       	nop
    1034:	8b e0       	ldi	r24, 0x0B	; 11
    1036:	c9 da       	rcall	.-2670   	; 0x5ca <ADC_Conversion>
    1038:	88 33       	cpi	r24, 0x38	; 56
    103a:	08 f4       	brcc	.+2      	; 0x103e <scan+0x26>
    103c:	7b c0       	rjmp	.+246    	; 0x1134 <scan+0x11c>
    103e:	8b e0       	ldi	r24, 0x0B	; 11
    1040:	c4 da       	rcall	.-2680   	; 0x5ca <ADC_Conversion>
    1042:	84 36       	cpi	r24, 0x64	; 100
    1044:	08 f0       	brcs	.+2      	; 0x1048 <scan+0x30>
    1046:	79 c0       	rjmp	.+242    	; 0x113a <scan+0x122>
    1048:	80 91 6c 02 	lds	r24, 0x026C
    104c:	90 91 6d 02 	lds	r25, 0x026D
    1050:	aa 27       	eor	r26, r26
    1052:	97 fd       	sbrc	r25, 7
    1054:	a0 95       	com	r26
    1056:	ba 2f       	mov	r27, r26
    1058:	40 91 7e 02 	lds	r20, 0x027E
    105c:	50 91 7f 02 	lds	r21, 0x027F
    1060:	60 91 80 02 	lds	r22, 0x0280
    1064:	70 91 81 02 	lds	r23, 0x0281
    1068:	48 17       	cp	r20, r24
    106a:	59 07       	cpc	r21, r25
    106c:	6a 07       	cpc	r22, r26
    106e:	7b 07       	cpc	r23, r27
    1070:	d8 f4       	brcc	.+54     	; 0x10a8 <scan+0x90>
    1072:	40 91 7a 02 	lds	r20, 0x027A
    1076:	50 91 7b 02 	lds	r21, 0x027B
    107a:	60 91 7c 02 	lds	r22, 0x027C
    107e:	70 91 7d 02 	lds	r23, 0x027D
    1082:	48 17       	cp	r20, r24
    1084:	59 07       	cpc	r21, r25
    1086:	6a 07       	cpc	r22, r26
    1088:	7b 07       	cpc	r23, r27
    108a:	70 f4       	brcc	.+28     	; 0x10a8 <scan+0x90>
    108c:	40 91 6e 02 	lds	r20, 0x026E
    1090:	50 91 6f 02 	lds	r21, 0x026F
    1094:	60 91 70 02 	lds	r22, 0x0270
    1098:	70 91 71 02 	lds	r23, 0x0271
    109c:	48 17       	cp	r20, r24
    109e:	59 07       	cpc	r21, r25
    10a0:	6a 07       	cpc	r22, r26
    10a2:	7b 07       	cpc	r23, r27
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <scan+0x90>
    10a6:	4c c0       	rjmp	.+152    	; 0x1140 <scan+0x128>
    10a8:	40 91 7e 02 	lds	r20, 0x027E
    10ac:	50 91 7f 02 	lds	r21, 0x027F
    10b0:	60 91 80 02 	lds	r22, 0x0280
    10b4:	70 91 81 02 	lds	r23, 0x0281
    10b8:	80 91 6e 02 	lds	r24, 0x026E
    10bc:	90 91 6f 02 	lds	r25, 0x026F
    10c0:	a0 91 70 02 	lds	r26, 0x0270
    10c4:	b0 91 71 02 	lds	r27, 0x0271
    10c8:	84 17       	cp	r24, r20
    10ca:	95 07       	cpc	r25, r21
    10cc:	a6 07       	cpc	r26, r22
    10ce:	b7 07       	cpc	r27, r23
    10d0:	c8 f4       	brcc	.+50     	; 0x1104 <scan+0xec>
    10d2:	00 91 7e 02 	lds	r16, 0x027E
    10d6:	10 91 7f 02 	lds	r17, 0x027F
    10da:	20 91 80 02 	lds	r18, 0x0280
    10de:	30 91 81 02 	lds	r19, 0x0281
    10e2:	40 91 7a 02 	lds	r20, 0x027A
    10e6:	50 91 7b 02 	lds	r21, 0x027B
    10ea:	60 91 7c 02 	lds	r22, 0x027C
    10ee:	70 91 7d 02 	lds	r23, 0x027D
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	40 17       	cp	r20, r16
    10f8:	51 07       	cpc	r21, r17
    10fa:	62 07       	cpc	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	28 f5       	brcc	.+74     	; 0x114a <scan+0x132>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	23 c0       	rjmp	.+70     	; 0x114a <scan+0x132>
    1104:	40 91 6e 02 	lds	r20, 0x026E
    1108:	50 91 6f 02 	lds	r21, 0x026F
    110c:	60 91 70 02 	lds	r22, 0x0270
    1110:	70 91 71 02 	lds	r23, 0x0271
    1114:	80 91 7a 02 	lds	r24, 0x027A
    1118:	90 91 7b 02 	lds	r25, 0x027B
    111c:	a0 91 7c 02 	lds	r26, 0x027C
    1120:	b0 91 7d 02 	lds	r27, 0x027D
    1124:	84 17       	cp	r24, r20
    1126:	95 07       	cpc	r25, r21
    1128:	a6 07       	cpc	r26, r22
    112a:	b7 07       	cpc	r27, r23
    112c:	60 f4       	brcc	.+24     	; 0x1146 <scan+0x12e>
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0b c0       	rjmp	.+22     	; 0x114a <scan+0x132>
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	08 c0       	rjmp	.+16     	; 0x114a <scan+0x132>
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	9f ef       	ldi	r25, 0xFF	; 255
    113e:	05 c0       	rjmp	.+10     	; 0x114a <scan+0x132>
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <scan+0x132>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	08 95       	ret

00001150 <setIndicatorAndColor>:
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd e9       	ldi	r28, 0x9D	; 157
    1156:	d2 e0       	ldi	r29, 0x02	; 2
    1158:	eb e8       	ldi	r30, 0x8B	; 139
    115a:	f2 e0       	ldi	r31, 0x02	; 2
    115c:	a4 e6       	ldi	r26, 0x64	; 100
    115e:	b2 e0       	ldi	r27, 0x02	; 2
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	2e ef       	ldi	r18, 0xFE	; 254
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	89 93       	st	Y+, r24
    116a:	99 93       	st	Y+, r25
    116c:	33 83       	std	Z+3, r19	; 0x03
    116e:	22 83       	std	Z+2, r18	; 0x02
    1170:	31 83       	std	Z+1, r19	; 0x01
    1172:	20 83       	st	Z, r18
    1174:	1d 92       	st	X+, r1
    1176:	1d 92       	st	X+, r1
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	34 96       	adiw	r30, 0x04	; 4
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	91 05       	cpc	r25, r1
    1180:	99 f7       	brne	.-26     	; 0x1168 <setIndicatorAndColor+0x18>
    1182:	e0 91 9d 02 	lds	r30, 0x029D
    1186:	f0 91 9e 02 	lds	r31, 0x029E
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	eb 55       	subi	r30, 0x5B	; 91
    1190:	fd 4f       	sbci	r31, 0xFD	; 253
    1192:	11 82       	std	Z+1, r1	; 0x01
    1194:	10 82       	st	Z, r1
    1196:	e0 91 9f 02 	lds	r30, 0x029F
    119a:	f0 91 a0 02 	lds	r31, 0x02A0
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	eb 55       	subi	r30, 0x5B	; 91
    11a4:	fd 4f       	sbci	r31, 0xFD	; 253
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
    11ae:	e0 91 a1 02 	lds	r30, 0x02A1
    11b2:	f0 91 a2 02 	lds	r31, 0x02A2
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	eb 55       	subi	r30, 0x5B	; 91
    11bc:	fd 4f       	sbci	r31, 0xFD	; 253
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	e0 91 a3 02 	lds	r30, 0x02A3
    11ca:	f0 91 a4 02 	lds	r31, 0x02A4
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	eb 55       	subi	r30, 0x5B	; 91
    11d4:	fd 4f       	sbci	r31, 0xFD	; 253
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	90 93 86 02 	sts	0x0286, r25
    11e6:	80 93 85 02 	sts	0x0285, r24
    11ea:	90 93 84 02 	sts	0x0284, r25
    11ee:	80 93 83 02 	sts	0x0283, r24
    11f2:	90 93 b4 02 	sts	0x02B4, r25
    11f6:	80 93 b3 02 	sts	0x02B3, r24
    11fa:	90 93 b2 02 	sts	0x02B2, r25
    11fe:	80 93 b1 02 	sts	0x02B1, r24
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <terminalCheck1>:
void terminalCheck1()
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
	forward_mm(30);
    120c:	8e e1       	ldi	r24, 0x1E	; 30
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	90 db       	rcall	.-2272   	; 0x932 <forward_mm>
	flag = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	90 93 55 02 	sts	0x0255, r25
    121a:	80 93 54 02 	sts	0x0254, r24
	if (ct != ot)
    121e:	80 91 50 02 	lds	r24, 0x0250
    1222:	90 91 51 02 	lds	r25, 0x0251
    1226:	20 91 87 02 	lds	r18, 0x0287
    122a:	30 91 88 02 	lds	r19, 0x0288
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	89 f1       	breq	.+98     	; 0x1296 <terminalCheck1+0x8e>
	{
		if (dir == 1 || dir == 3)
    1234:	20 91 4e 02 	lds	r18, 0x024E
    1238:	30 91 4f 02 	lds	r19, 0x024F
    123c:	2d 7f       	andi	r18, 0xFD	; 253
    123e:	21 30       	cpi	r18, 0x01	; 1
    1240:	31 05       	cpc	r19, r1
    1242:	41 f4       	brne	.+16     	; 0x1254 <terminalCheck1+0x4c>
		{
			if (ot == 3 || ot == 0)
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	11 f0       	breq	.+4      	; 0x124e <terminalCheck1+0x46>
    124a:	89 2b       	or	r24, r25
    124c:	11 f4       	brne	.+4      	; 0x1252 <terminalCheck1+0x4a>
				turnRight();
    124e:	69 dd       	rcall	.-1326   	; 0xd22 <turnRight>
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <terminalCheck1+0x4c>
			else turnLeft();
    1252:	b5 dd       	rcall	.-1174   	; 0xdbe <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1254:	80 91 87 02 	lds	r24, 0x0287
    1258:	90 91 88 02 	lds	r25, 0x0288
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	91 05       	cpc	r25, r1
    1260:	38 f4       	brcc	.+14     	; 0x1270 <terminalCheck1+0x68>
    1262:	20 91 4e 02 	lds	r18, 0x024E
    1266:	30 91 4f 02 	lds	r19, 0x024F
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	49 f0       	breq	.+18     	; 0x1282 <terminalCheck1+0x7a>
    1270:	02 97       	sbiw	r24, 0x02	; 2
    1272:	02 97       	sbiw	r24, 0x02	; 2
    1274:	38 f4       	brcc	.+14     	; 0x1284 <terminalCheck1+0x7c>
    1276:	80 91 4e 02 	lds	r24, 0x024E
    127a:	90 91 4f 02 	lds	r25, 0x024F
    127e:	89 2b       	or	r24, r25
    1280:	09 f4       	brne	.+2      	; 0x1284 <terminalCheck1+0x7c>
			turn();
    1282:	eb dd       	rcall	.-1066   	; 0xe5a <turn>
		front();
    1284:	43 dd       	rcall	.-1402   	; 0xd0c <front>
		ot = ct;
    1286:	80 91 87 02 	lds	r24, 0x0287
    128a:	90 91 88 02 	lds	r25, 0x0288
    128e:	90 93 51 02 	sts	0x0251, r25
    1292:	80 93 50 02 	sts	0x0250, r24
	}
	right_degrees(50);
    1296:	82 e3       	ldi	r24, 0x32	; 50
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	66 db       	rcall	.-2356   	; 0x968 <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    129c:	86 e9       	ldi	r24, 0x96	; 150
    129e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    12a2:	80 93 2a 01 	sts	0x012A, r24
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <terminalCheck1+0xa2>
	velocity(turn_v, turn_v);
	while (ADC_Conversion(1)<70)
		right();
    12a8:	3a d9       	rcall	.-3468   	; 0x51e <right>
		front();
		ot = ct;
	}
	right_degrees(50);
	velocity(turn_v, turn_v);
	while (ADC_Conversion(1)<70)
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	8e d9       	rcall	.-3300   	; 0x5ca <ADC_Conversion>
    12ae:	86 34       	cpi	r24, 0x46	; 70
    12b0:	d8 f3       	brcs	.-10     	; 0x12a8 <terminalCheck1+0xa0>
		right();
	//	_delay_ms(100);
	stop();
    12b2:	38 d9       	rcall	.-3472   	; 0x524 <stop>
	term[ct][0] = scan();
    12b4:	c0 91 87 02 	lds	r28, 0x0287
    12b8:	d0 91 88 02 	lds	r29, 0x0288
    12bc:	ad de       	rcall	.-678    	; 0x1018 <scan>
    12be:	cc 0f       	add	r28, r28
    12c0:	dd 1f       	adc	r29, r29
    12c2:	cc 0f       	add	r28, r28
    12c4:	dd 1f       	adc	r29, r29
    12c6:	c5 57       	subi	r28, 0x75	; 117
    12c8:	dd 4f       	sbci	r29, 0xFD	; 253
    12ca:	99 83       	std	Y+1, r25	; 0x01
    12cc:	88 83       	st	Y, r24
	if(term[ct][0]==-1)
    12ce:	e0 91 87 02 	lds	r30, 0x0287
    12d2:	f0 91 88 02 	lds	r31, 0x0288
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	e5 57       	subi	r30, 0x75	; 117
    12e0:	fd 4f       	sbci	r31, 0xFD	; 253
    12e2:	40 81       	ld	r20, Z
    12e4:	51 81       	ldd	r21, Z+1	; 0x01
    12e6:	4f 3f       	cpi	r20, 0xFF	; 255
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	52 07       	cpc	r21, r18
    12ec:	49 f4       	brne	.+18     	; 0x1300 <terminalCheck1+0xf8>
		lcd_print(2,11,9, 1);
    12ee:	21 e0       	ldi	r18, 0x01	; 1
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	49 e0       	ldi	r20, 0x09	; 9
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	6b e0       	ldi	r22, 0x0B	; 11
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <terminalCheck1+0x104>
	else
		lcd_print(2,11, term[ct][0], 1);
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	6b e0       	ldi	r22, 0x0B	; 11
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130c:	4f ef       	ldi	r20, 0xFF	; 255
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9c e2       	ldi	r25, 0x2C	; 44
    1312:	41 50       	subi	r20, 0x01	; 1
    1314:	80 40       	sbci	r24, 0x00	; 0
    1316:	90 40       	sbci	r25, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <terminalCheck1+0x10a>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <terminalCheck1+0x114>
    131c:	00 00       	nop
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);



	lcd((char*)term[ct][0]);
    131e:	e0 91 87 02 	lds	r30, 0x0287
    1322:	f0 91 88 02 	lds	r31, 0x0288
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	e5 57       	subi	r30, 0x75	; 117
    1330:	fd 4f       	sbci	r31, 0xFD	; 253
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	d3 dc       	rcall	.-1626   	; 0xcde <lcd>
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1338:	20 91 87 02 	lds	r18, 0x0287
    133c:	30 91 88 02 	lds	r19, 0x0288
    1340:	f9 01       	movw	r30, r18
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	e5 57       	subi	r30, 0x75	; 117
    134c:	fd 4f       	sbci	r31, 0xFD	; 253
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	4f ef       	ldi	r20, 0xFF	; 255
    1356:	94 07       	cpc	r25, r20
    1358:	51 f0       	breq	.+20     	; 0x136e <terminalCheck1+0x166>
    135a:	f9 01       	movw	r30, r18
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	e3 56       	subi	r30, 0x63	; 99
    1362:	fd 4f       	sbci	r31, 0xFD	; 253
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	82 17       	cp	r24, r18
    136a:	93 07       	cpc	r25, r19
    136c:	49 f4       	brne	.+18     	; 0x1380 <terminalCheck1+0x178>
		total--;
    136e:	80 91 00 02 	lds	r24, 0x0200
    1372:	90 91 01 02 	lds	r25, 0x0201
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	90 93 01 02 	sts	0x0201, r25
    137c:	80 93 00 02 	sts	0x0200, r24
}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <terminalCheck2>:
void terminalCheck2()
{
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
	if (flag == 0)
    138a:	80 91 54 02 	lds	r24, 0x0254
    138e:	90 91 55 02 	lds	r25, 0x0255
    1392:	89 2b       	or	r24, r25
    1394:	39 f5       	brne	.+78     	; 0x13e4 <terminalCheck2+0x5e>
	{
		if (dir == 0)
    1396:	80 91 4e 02 	lds	r24, 0x024E
    139a:	90 91 4f 02 	lds	r25, 0x024F
    139e:	89 2b       	or	r24, r25
    13a0:	71 f4       	brne	.+28     	; 0x13be <terminalCheck2+0x38>
			if (ot == 0 || ot == 1)
    13a2:	80 91 50 02 	lds	r24, 0x0250
    13a6:	90 91 51 02 	lds	r25, 0x0251
    13aa:	02 97       	sbiw	r24, 0x02	; 2
    13ac:	20 f4       	brcc	.+8      	; 0x13b6 <terminalCheck2+0x30>
				forward_mm(30);
    13ae:	8e e1       	ldi	r24, 0x1E	; 30
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	bf da       	rcall	.-2690   	; 0x932 <forward_mm>
    13b4:	11 c0       	rjmp	.+34     	; 0x13d8 <terminalCheck2+0x52>
			else back_mm(30);
    13b6:	8e e1       	ldi	r24, 0x1E	; 30
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	c4 da       	rcall	.-2680   	; 0x944 <back_mm>
    13bc:	0d c0       	rjmp	.+26     	; 0x13d8 <terminalCheck2+0x52>
		else if (ot == 0 || ot == 1)
    13be:	80 91 50 02 	lds	r24, 0x0250
    13c2:	90 91 51 02 	lds	r25, 0x0251
    13c6:	02 97       	sbiw	r24, 0x02	; 2
    13c8:	20 f4       	brcc	.+8      	; 0x13d2 <terminalCheck2+0x4c>
			back_mm(30);
    13ca:	8e e1       	ldi	r24, 0x1E	; 30
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	ba da       	rcall	.-2700   	; 0x944 <back_mm>
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <terminalCheck2+0x52>
		else forward_mm(30);
    13d2:	8e e1       	ldi	r24, 0x1E	; 30
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	ad da       	rcall	.-2726   	; 0x932 <forward_mm>
		flag = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	90 93 55 02 	sts	0x0255, r25
    13e0:	80 93 54 02 	sts	0x0254, r24
	}

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    13e4:	80 91 87 02 	lds	r24, 0x0287
    13e8:	90 91 88 02 	lds	r25, 0x0288
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	91 05       	cpc	r25, r1
    13f0:	30 f4       	brcc	.+12     	; 0x13fe <terminalCheck2+0x78>
    13f2:	20 91 4e 02 	lds	r18, 0x024E
    13f6:	30 91 4f 02 	lds	r19, 0x024F
    13fa:	23 2b       	or	r18, r19
    13fc:	69 f0       	breq	.+26     	; 0x1418 <terminalCheck2+0x92>
    13fe:	9c 01       	movw	r18, r24
    1400:	22 50       	subi	r18, 0x02	; 2
    1402:	31 09       	sbc	r19, r1
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	b8 f4       	brcc	.+46     	; 0x1438 <terminalCheck2+0xb2>
    140a:	40 91 4e 02 	lds	r20, 0x024E
    140e:	50 91 4f 02 	lds	r21, 0x024F
    1412:	42 30       	cpi	r20, 0x02	; 2
    1414:	51 05       	cpc	r21, r1
    1416:	81 f4       	brne	.+32     	; 0x1438 <terminalCheck2+0xb2>
	{
		left_degrees(30);
    1418:	8e e1       	ldi	r24, 0x1E	; 30
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c da       	rcall	.-2760   	; 0x956 <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    141e:	86 e9       	ldi	r24, 0x96	; 150
    1420:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1424:	80 93 2a 01 	sts	0x012A, r24
    1428:	01 c0       	rjmp	.+2      	; 0x142c <terminalCheck2+0xa6>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
		left();
    142a:	76 d8       	rcall	.-3860   	; 0x518 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	cd d8       	rcall	.-3686   	; 0x5ca <ADC_Conversion>
    1430:	86 34       	cpi	r24, 0x46	; 70
    1432:	d8 f3       	brcs	.-10     	; 0x142a <terminalCheck2+0xa4>
		left();
		//	_delay_ms(100);
		stop();
    1434:	77 d8       	rcall	.-3858   	; 0x524 <stop>
    1436:	30 c0       	rjmp	.+96     	; 0x1498 <terminalCheck2+0x112>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1438:	02 97       	sbiw	r24, 0x02	; 2
    143a:	30 f4       	brcc	.+12     	; 0x1448 <terminalCheck2+0xc2>
    143c:	80 91 4e 02 	lds	r24, 0x024E
    1440:	90 91 4f 02 	lds	r25, 0x024F
    1444:	02 97       	sbiw	r24, 0x02	; 2
    1446:	49 f0       	breq	.+18     	; 0x145a <terminalCheck2+0xd4>
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	b0 f4       	brcc	.+44     	; 0x147a <terminalCheck2+0xf4>
    144e:	80 91 4e 02 	lds	r24, 0x024E
    1452:	90 91 4f 02 	lds	r25, 0x024F
    1456:	89 2b       	or	r24, r25
    1458:	81 f4       	brne	.+32     	; 0x147a <terminalCheck2+0xf4>
		{
			right_degrees(30);
    145a:	8e e1       	ldi	r24, 0x1E	; 30
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	84 da       	rcall	.-2808   	; 0x968 <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1460:	86 e9       	ldi	r24, 0x96	; 150
    1462:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1466:	80 93 2a 01 	sts	0x012A, r24
    146a:	01 c0       	rjmp	.+2      	; 0x146e <terminalCheck2+0xe8>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<70)
				right();
    146c:	58 d8       	rcall	.-3920   	; 0x51e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<70)
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	ac d8       	rcall	.-3752   	; 0x5ca <ADC_Conversion>
    1472:	86 34       	cpi	r24, 0x46	; 70
    1474:	d8 f3       	brcs	.-10     	; 0x146c <terminalCheck2+0xe6>
				right();
			//	_delay_ms(100);
			stop();	
    1476:	56 d8       	rcall	.-3924   	; 0x524 <stop>
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <terminalCheck2+0x112>
		}
	else {
		left_degrees(150);
    147a:	86 e9       	ldi	r24, 0x96	; 150
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	6b da       	rcall	.-2858   	; 0x956 <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1480:	86 e9       	ldi	r24, 0x96	; 150
    1482:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1486:	80 93 2a 01 	sts	0x012A, r24
    148a:	01 c0       	rjmp	.+2      	; 0x148e <terminalCheck2+0x108>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
		left();
    148c:	45 d8       	rcall	.-3958   	; 0x518 <left>
			stop();	
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	9c d8       	rcall	.-3784   	; 0x5ca <ADC_Conversion>
    1492:	86 34       	cpi	r24, 0x46	; 70
    1494:	d8 f3       	brcs	.-10     	; 0x148c <terminalCheck2+0x106>
		left();
		//	_delay_ms(100);
		stop();
    1496:	46 d8       	rcall	.-3956   	; 0x524 <stop>
		
			}
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
    1498:	c0 91 87 02 	lds	r28, 0x0287
    149c:	d0 91 88 02 	lds	r29, 0x0288
    14a0:	bb dd       	rcall	.-1162   	; 0x1018 <scan>
    14a2:	cc 0f       	add	r28, r28
    14a4:	dd 1f       	adc	r29, r29
    14a6:	cc 0f       	add	r28, r28
    14a8:	dd 1f       	adc	r29, r29
    14aa:	c5 57       	subi	r28, 0x75	; 117
    14ac:	dd 4f       	sbci	r29, 0xFD	; 253
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==-1)
    14b2:	e0 91 87 02 	lds	r30, 0x0287
    14b6:	f0 91 88 02 	lds	r31, 0x0288
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	e5 57       	subi	r30, 0x75	; 117
    14c4:	fd 4f       	sbci	r31, 0xFD	; 253
    14c6:	42 81       	ldd	r20, Z+2	; 0x02
    14c8:	53 81       	ldd	r21, Z+3	; 0x03
    14ca:	4f 3f       	cpi	r20, 0xFF	; 255
    14cc:	2f ef       	ldi	r18, 0xFF	; 255
    14ce:	52 07       	cpc	r21, r18
    14d0:	49 f4       	brne	.+18     	; 0x14e4 <terminalCheck2+0x15e>
		lcd_print(2,11,9, 1);
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	49 e0       	ldi	r20, 0x09	; 9
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	6b e0       	ldi	r22, 0x0B	; 11
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <terminalCheck2+0x16a>
	else
		lcd_print(2,11, term[ct][1], 1);
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	6b e0       	ldi	r22, 0x0B	; 11
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    14f0:	4f ef       	ldi	r20, 0xFF	; 255
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9c e2       	ldi	r25, 0x2C	; 44
    14f6:	41 50       	subi	r20, 0x01	; 1
    14f8:	80 40       	sbci	r24, 0x00	; 0
    14fa:	90 40       	sbci	r25, 0x00	; 0
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <terminalCheck2+0x170>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <terminalCheck2+0x17a>
    1500:	00 00       	nop
	_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1502:	80 91 87 02 	lds	r24, 0x0287
    1506:	90 91 88 02 	lds	r25, 0x0288
    150a:	fc 01       	movw	r30, r24
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	e5 57       	subi	r30, 0x75	; 117
    1516:	fd 4f       	sbci	r31, 0xFD	; 253
    1518:	22 81       	ldd	r18, Z+2	; 0x02
    151a:	33 81       	ldd	r19, Z+3	; 0x03
    151c:	2f 3f       	cpi	r18, 0xFF	; 255
    151e:	4f ef       	ldi	r20, 0xFF	; 255
    1520:	34 07       	cpc	r19, r20
    1522:	51 f0       	breq	.+20     	; 0x1538 <terminalCheck2+0x1b2>
    1524:	fc 01       	movw	r30, r24
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	e3 56       	subi	r30, 0x63	; 99
    152c:	fd 4f       	sbci	r31, 0xFD	; 253
    152e:	40 81       	ld	r20, Z
    1530:	51 81       	ldd	r21, Z+1	; 0x01
    1532:	24 17       	cp	r18, r20
    1534:	35 07       	cpc	r19, r21
    1536:	51 f4       	brne	.+20     	; 0x154c <terminalCheck2+0x1c6>
		total--;
    1538:	20 91 00 02 	lds	r18, 0x0200
    153c:	30 91 01 02 	lds	r19, 0x0201
    1540:	21 50       	subi	r18, 0x01	; 1
    1542:	31 09       	sbc	r19, r1
    1544:	30 93 01 02 	sts	0x0201, r19
    1548:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
    154c:	fc 01       	movw	r30, r24
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ec 59       	subi	r30, 0x9C	; 156
    1554:	fd 4f       	sbci	r31, 0xFD	; 253
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
	visitedCount++;
    155e:	80 91 52 02 	lds	r24, 0x0252
    1562:	90 91 53 02 	lds	r25, 0x0253
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	90 93 53 02 	sts	0x0253, r25
    156c:	80 93 52 02 	sts	0x0252, r24
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <pick>:

void pick(int side)
{
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
	lower(side);//lower
    157c:	6e db       	rcall	.-2340   	; 0xc5a <lower>
	open(side);
    157e:	8c 2f       	mov	r24, r28
    1580:	82 db       	rcall	.-2300   	; 0xc86 <open>
	close(side);
    1582:	8c 2f       	mov	r24, r28
    1584:	90 db       	rcall	.-2272   	; 0xca6 <close>
	elevate();//mid
    1586:	79 db       	rcall	.-2318   	; 0xc7a <elevate>
	armCount--;
    1588:	80 91 02 02 	lds	r24, 0x0202
    158c:	90 91 03 02 	lds	r25, 0x0203
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	90 93 03 02 	sts	0x0203, r25
    1596:	80 93 02 02 	sts	0x0202, r24
	if (side == 0)
    159a:	cd 2b       	or	r28, r29
    159c:	21 f4       	brne	.+8      	; 0x15a6 <pick+0x30>
		lcd("pickRight");
    159e:	83 e2       	ldi	r24, 0x23	; 35
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	9d db       	rcall	.-2246   	; 0xcde <lcd>
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <pick+0x36>
	else
		lcd("pickLeft");
    15a6:	8d e2       	ldi	r24, 0x2D	; 45
    15a8:	92 e0       	ldi	r25, 0x02	; 2
    15aa:	99 db       	rcall	.-2254   	; 0xcde <lcd>
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <position>:

void position(int armNo, int side)
{
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	8c 01       	movw	r16, r24
    15bc:	eb 01       	movw	r28, r22
	if (ct == ot)
    15be:	20 91 87 02 	lds	r18, 0x0287
    15c2:	30 91 88 02 	lds	r19, 0x0288
    15c6:	40 91 50 02 	lds	r20, 0x0250
    15ca:	50 91 51 02 	lds	r21, 0x0251
    15ce:	24 17       	cp	r18, r20
    15d0:	35 07       	cpc	r19, r21
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <position+0x24>
    15d4:	7d c0       	rjmp	.+250    	; 0x16d0 <position+0x11e>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    15d6:	c9 01       	movw	r24, r18
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	30 f4       	brcc	.+12     	; 0x15ea <position+0x38>
    15de:	40 91 4e 02 	lds	r20, 0x024E
    15e2:	50 91 4f 02 	lds	r21, 0x024F
    15e6:	45 2b       	or	r20, r21
    15e8:	61 f0       	breq	.+24     	; 0x1602 <position+0x50>
    15ea:	22 50       	subi	r18, 0x02	; 2
    15ec:	31 09       	sbc	r19, r1
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	68 f4       	brcc	.+26     	; 0x160e <position+0x5c>
    15f4:	40 91 4e 02 	lds	r20, 0x024E
    15f8:	50 91 4f 02 	lds	r21, 0x024F
    15fc:	42 30       	cpi	r20, 0x02	; 2
    15fe:	51 05       	cpc	r21, r1
    1600:	31 f4       	brne	.+12     	; 0x160e <position+0x5c>
		{
			if (armNo != side)
    1602:	0c 17       	cp	r16, r28
    1604:	1d 07       	cpc	r17, r29
    1606:	09 f4       	brne	.+2      	; 0x160a <position+0x58>
    1608:	4c c0       	rjmp	.+152    	; 0x16a2 <position+0xf0>
				turn();
    160a:	27 dc       	rcall	.-1970   	; 0xe5a <turn>
    160c:	4a c0       	rjmp	.+148    	; 0x16a2 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	38 f4       	brcc	.+14     	; 0x1622 <position+0x70>
    1614:	40 91 4e 02 	lds	r20, 0x024E
    1618:	50 91 4f 02 	lds	r21, 0x024F
    161c:	42 30       	cpi	r20, 0x02	; 2
    161e:	51 05       	cpc	r21, r1
    1620:	49 f0       	breq	.+18     	; 0x1634 <position+0x82>
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	58 f4       	brcc	.+22     	; 0x163e <position+0x8c>
    1628:	40 91 4e 02 	lds	r20, 0x024E
    162c:	50 91 4f 02 	lds	r21, 0x024F
    1630:	45 2b       	or	r20, r21
    1632:	29 f4       	brne	.+10     	; 0x163e <position+0x8c>
		{
			if (armNo == side)
    1634:	0c 17       	cp	r16, r28
    1636:	1d 07       	cpc	r17, r29
    1638:	a1 f5       	brne	.+104    	; 0x16a2 <position+0xf0>
				turn();
    163a:	0f dc       	rcall	.-2018   	; 0xe5a <turn>
    163c:	32 c0       	rjmp	.+100    	; 0x16a2 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	91 05       	cpc	r25, r1
    1642:	38 f4       	brcc	.+14     	; 0x1652 <position+0xa0>
    1644:	40 91 4e 02 	lds	r20, 0x024E
    1648:	50 91 4f 02 	lds	r21, 0x024F
    164c:	41 30       	cpi	r20, 0x01	; 1
    164e:	51 05       	cpc	r21, r1
    1650:	51 f0       	breq	.+20     	; 0x1666 <position+0xb4>
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	70 f4       	brcc	.+28     	; 0x1674 <position+0xc2>
    1658:	40 91 4e 02 	lds	r20, 0x024E
    165c:	50 91 4f 02 	lds	r21, 0x024F
    1660:	43 30       	cpi	r20, 0x03	; 3
    1662:	51 05       	cpc	r21, r1
    1664:	39 f4       	brne	.+14     	; 0x1674 <position+0xc2>
		{
			if (armNo != side)
    1666:	0c 17       	cp	r16, r28
    1668:	1d 07       	cpc	r17, r29
    166a:	11 f0       	breq	.+4      	; 0x1670 <position+0xbe>
				turnRight();
    166c:	5a db       	rcall	.-2380   	; 0xd22 <turnRight>
    166e:	19 c0       	rjmp	.+50     	; 0x16a2 <position+0xf0>
			else turnLeft();
    1670:	a6 db       	rcall	.-2228   	; 0xdbe <turnLeft>
    1672:	17 c0       	rjmp	.+46     	; 0x16a2 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1674:	02 97       	sbiw	r24, 0x02	; 2
    1676:	30 f4       	brcc	.+12     	; 0x1684 <position+0xd2>
    1678:	80 91 4e 02 	lds	r24, 0x024E
    167c:	90 91 4f 02 	lds	r25, 0x024F
    1680:	03 97       	sbiw	r24, 0x03	; 3
    1682:	49 f0       	breq	.+18     	; 0x1696 <position+0xe4>
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	60 f4       	brcc	.+24     	; 0x16a2 <position+0xf0>
    168a:	80 91 4e 02 	lds	r24, 0x024E
    168e:	90 91 4f 02 	lds	r25, 0x024F
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	31 f4       	brne	.+12     	; 0x16a2 <position+0xf0>
			if (armNo == side)
    1696:	0c 17       	cp	r16, r28
    1698:	1d 07       	cpc	r17, r29
    169a:	11 f4       	brne	.+4      	; 0x16a0 <position+0xee>
				turnRight();
    169c:	42 db       	rcall	.-2428   	; 0xd22 <turnRight>
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <position+0xf0>
			else turnLeft();
    16a0:	8e db       	rcall	.-2276   	; 0xdbe <turnLeft>
		if (flag == 1 && (dir == 0 || dir == 2))
    16a2:	80 91 54 02 	lds	r24, 0x0254
    16a6:	90 91 55 02 	lds	r25, 0x0255
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <position+0xfe>
    16ae:	64 c0       	rjmp	.+200    	; 0x1778 <position+0x1c6>
    16b0:	80 91 4e 02 	lds	r24, 0x024E
    16b4:	90 91 4f 02 	lds	r25, 0x024F
    16b8:	8d 7f       	andi	r24, 0xFD	; 253
    16ba:	89 2b       	or	r24, r25
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <position+0x10e>
    16be:	5c c0       	rjmp	.+184    	; 0x1778 <position+0x1c6>
		{
			back_mm(30);
    16c0:	8e e1       	ldi	r24, 0x1E	; 30
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	3f d9       	rcall	.-3458   	; 0x944 <back_mm>
			flag = 0;
    16c6:	10 92 55 02 	sts	0x0255, r1
    16ca:	10 92 54 02 	sts	0x0254, r1
    16ce:	54 c0       	rjmp	.+168    	; 0x1778 <position+0x1c6>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    16d0:	80 91 4e 02 	lds	r24, 0x024E
    16d4:	90 91 4f 02 	lds	r25, 0x024F
    16d8:	8d 7f       	andi	r24, 0xFD	; 253
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	49 f4       	brne	.+18     	; 0x16f0 <position+0x13e>
			if (ct == 0 || ct == 3)
    16de:	21 15       	cp	r18, r1
    16e0:	31 05       	cpc	r19, r1
    16e2:	19 f0       	breq	.+6      	; 0x16ea <position+0x138>
    16e4:	23 30       	cpi	r18, 0x03	; 3
    16e6:	31 05       	cpc	r19, r1
    16e8:	11 f4       	brne	.+4      	; 0x16ee <position+0x13c>
				turnRight();
    16ea:	1b db       	rcall	.-2506   	; 0xd22 <turnRight>
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <position+0x13e>
			else turnLeft();
    16ee:	67 db       	rcall	.-2354   	; 0xdbe <turnLeft>
		if (dir == 0 || dir == 2)
    16f0:	20 91 4e 02 	lds	r18, 0x024E
    16f4:	30 91 4f 02 	lds	r19, 0x024F
    16f8:	21 15       	cp	r18, r1
    16fa:	31 05       	cpc	r19, r1
    16fc:	21 f0       	breq	.+8      	; 0x1706 <position+0x154>
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	91 f5       	brne	.+100    	; 0x1768 <position+0x1b6>
    1704:	07 c0       	rjmp	.+14     	; 0x1714 <position+0x162>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1706:	80 91 87 02 	lds	r24, 0x0287
    170a:	90 91 88 02 	lds	r25, 0x0288
    170e:	02 97       	sbiw	r24, 0x02	; 2
    1710:	c8 f4       	brcc	.+50     	; 0x1744 <position+0x192>
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <position+0x170>
    1714:	80 91 87 02 	lds	r24, 0x0287
    1718:	90 91 88 02 	lds	r25, 0x0288
    171c:	02 97       	sbiw	r24, 0x02	; 2
    171e:	02 97       	sbiw	r24, 0x02	; 2
    1720:	88 f4       	brcc	.+34     	; 0x1744 <position+0x192>
			{
				if (ot != 4 && ot != 5)
    1722:	80 91 50 02 	lds	r24, 0x0250
    1726:	90 91 51 02 	lds	r25, 0x0251
    172a:	04 97       	sbiw	r24, 0x04	; 4
    172c:	02 97       	sbiw	r24, 0x02	; 2
    172e:	10 f0       	brcs	.+4      	; 0x1734 <position+0x182>
				{
					turnLeft();
    1730:	46 db       	rcall	.-2420   	; 0xdbe <turnLeft>
					front();
    1732:	ec da       	rcall	.-2600   	; 0xd0c <front>
				}
				if (armNo == side)
    1734:	0c 17       	cp	r16, r28
    1736:	1d 07       	cpc	r17, r29
    1738:	11 f4       	brne	.+4      	; 0x173e <position+0x18c>
				{
					front();
    173a:	e8 da       	rcall	.-2608   	; 0xd0c <front>
    173c:	15 c0       	rjmp	.+42     	; 0x1768 <position+0x1b6>
				}
				else
				{
					front();
    173e:	e6 da       	rcall	.-2612   	; 0xd0c <front>
					turn();
    1740:	8c db       	rcall	.-2280   	; 0xe5a <turn>
    1742:	12 c0       	rjmp	.+36     	; 0x1768 <position+0x1b6>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1744:	80 91 50 02 	lds	r24, 0x0250
    1748:	90 91 51 02 	lds	r25, 0x0251
    174c:	04 97       	sbiw	r24, 0x04	; 4
    174e:	02 97       	sbiw	r24, 0x02	; 2
    1750:	10 f0       	brcs	.+4      	; 0x1756 <position+0x1a4>
				{
					turnLeft();
    1752:	35 db       	rcall	.-2454   	; 0xdbe <turnLeft>
					front();
    1754:	db da       	rcall	.-2634   	; 0xd0c <front>
				}
				if (armNo == side)
    1756:	0c 17       	cp	r16, r28
    1758:	1d 07       	cpc	r17, r29
    175a:	19 f4       	brne	.+6      	; 0x1762 <position+0x1b0>
				{
					turn();
    175c:	7e db       	rcall	.-2308   	; 0xe5a <turn>
					front();
    175e:	d6 da       	rcall	.-2644   	; 0xd0c <front>
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <position+0x1b6>
				}
				else
				{
					turn();
    1762:	7b db       	rcall	.-2314   	; 0xe5a <turn>
					front();
    1764:	d3 da       	rcall	.-2650   	; 0xd0c <front>
					turn();
    1766:	79 db       	rcall	.-2318   	; 0xe5a <turn>
				}
			}
		}
		ot = ct;
    1768:	80 91 87 02 	lds	r24, 0x0287
    176c:	90 91 88 02 	lds	r25, 0x0288
    1770:	90 93 51 02 	sts	0x0251, r25
    1774:	80 93 50 02 	sts	0x0250, r24
	}
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <pickNode>:
void pickNode(int armNo, int side)
{
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	8c 01       	movw	r16, r24
    178c:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    178e:	fc 01       	movw	r30, r24
    1790:	ee 0f       	add	r30, r30
    1792:	ff 1f       	adc	r31, r31
    1794:	ef 54       	subi	r30, 0x4F	; 79
    1796:	fd 4f       	sbci	r31, 0xFD	; 253
    1798:	a0 91 87 02 	lds	r26, 0x0287
    179c:	b0 91 88 02 	lds	r27, 0x0288
    17a0:	aa 0f       	add	r26, r26
    17a2:	bb 1f       	adc	r27, r27
    17a4:	a6 0f       	add	r26, r22
    17a6:	b7 1f       	adc	r27, r23
    17a8:	aa 0f       	add	r26, r26
    17aa:	bb 1f       	adc	r27, r27
    17ac:	a5 57       	subi	r26, 0x75	; 117
    17ae:	bd 4f       	sbci	r27, 0xFD	; 253
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
	position(armNo, side);
    17b8:	c8 01       	movw	r24, r16
    17ba:	fb de       	rcall	.-522    	; 0x15b2 <position>
	pick(armNo);
    17bc:	c8 01       	movw	r24, r16
    17be:	db de       	rcall	.-586    	; 0x1576 <pick>
	term[ct][side] = -1;
    17c0:	80 91 87 02 	lds	r24, 0x0287
    17c4:	90 91 88 02 	lds	r25, 0x0288
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	c8 0f       	add	r28, r24
    17ce:	d9 1f       	adc	r29, r25
    17d0:	cc 0f       	add	r28, r28
    17d2:	dd 1f       	adc	r29, r29
    17d4:	c5 57       	subi	r28, 0x75	; 117
    17d6:	dd 4f       	sbci	r29, 0xFD	; 253
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	99 83       	std	Y+1, r25	; 0x01
    17de:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <pickSort>:

void pickSort(int armNo, int sortNo)
{
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    17f6:	fc 01       	movw	r30, r24
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ef 54       	subi	r30, 0x4F	; 79
    17fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1800:	db 01       	movw	r26, r22
    1802:	aa 0f       	add	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	ad 57       	subi	r26, 0x7D	; 125
    1808:	bd 4f       	sbci	r27, 0xFD	; 253
    180a:	8d 91       	ld	r24, X+
    180c:	9c 91       	ld	r25, X
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1812:	c6 17       	cp	r28, r22
    1814:	d7 07       	cpc	r29, r23
    1816:	39 f4       	brne	.+14     	; 0x1826 <pickSort+0x3c>
    1818:	80 91 4e 02 	lds	r24, 0x024E
    181c:	90 91 4f 02 	lds	r25, 0x024F
    1820:	89 2b       	or	r24, r25
    1822:	49 f4       	brne	.+18     	; 0x1836 <pickSort+0x4c>
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <pickSort+0x48>
    1826:	80 91 4e 02 	lds	r24, 0x024E
    182a:	90 91 4f 02 	lds	r25, 0x024F
    182e:	02 97       	sbiw	r24, 0x02	; 2
    1830:	11 f4       	brne	.+4      	; 0x1836 <pickSort+0x4c>
		turn();
    1832:	13 db       	rcall	.-2522   	; 0xe5a <turn>
    1834:	0c c0       	rjmp	.+24     	; 0x184e <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1836:	80 91 4e 02 	lds	r24, 0x024E
    183a:	90 91 4f 02 	lds	r25, 0x024F
    183e:	8d 7f       	andi	r24, 0xFD	; 253
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	29 f4       	brne	.+10     	; 0x184e <pickSort+0x64>
			if (armNo == 0)
    1844:	20 97       	sbiw	r28, 0x00	; 0
    1846:	11 f4       	brne	.+4      	; 0x184c <pickSort+0x62>
				turnLeft();
    1848:	ba da       	rcall	.-2700   	; 0xdbe <turnLeft>
    184a:	01 c0       	rjmp	.+2      	; 0x184e <pickSort+0x64>
			else turnRight();
    184c:	6a da       	rcall	.-2860   	; 0xd22 <turnRight>
	}
	pick(armNo);
    184e:	ce 01       	movw	r24, r28
    1850:	92 de       	rcall	.-732    	; 0x1576 <pick>
	sort[sortNo] = -1;
    1852:	f8 01       	movw	r30, r16
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ed 57       	subi	r30, 0x7D	; 125
    185a:	fd 4f       	sbci	r31, 0xFD	; 253
    185c:	8f ef       	ldi	r24, 0xFF	; 255
    185e:	9f ef       	ldi	r25, 0xFF	; 255
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <pickup>:
void pickup()
{
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    187a:	20 91 87 02 	lds	r18, 0x0287
    187e:	30 91 88 02 	lds	r19, 0x0288
    1882:	22 30       	cpi	r18, 0x02	; 2
    1884:	31 05       	cpc	r19, r1
    1886:	30 f4       	brcc	.+12     	; 0x1894 <pickup+0x26>
    1888:	80 91 4e 02 	lds	r24, 0x024E
    188c:	90 91 4f 02 	lds	r25, 0x024F
    1890:	02 97       	sbiw	r24, 0x02	; 2
    1892:	79 f0       	breq	.+30     	; 0x18b2 <pickup+0x44>
    1894:	c9 01       	movw	r24, r18
    1896:	02 97       	sbiw	r24, 0x02	; 2
    1898:	02 97       	sbiw	r24, 0x02	; 2
    189a:	80 f4       	brcc	.+32     	; 0x18bc <pickup+0x4e>
    189c:	80 91 4e 02 	lds	r24, 0x024E
    18a0:	90 91 4f 02 	lds	r25, 0x024F
    18a4:	89 2b       	or	r24, r25
    18a6:	79 f0       	breq	.+30     	; 0x18c6 <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    18a8:	c1 e0       	ldi	r28, 0x01	; 1
    18aa:	d0 e0       	ldi	r29, 0x00	; 0
    18ac:	00 e0       	ldi	r16, 0x00	; 0
    18ae:	10 e0       	ldi	r17, 0x00	; 0
    18b0:	0e c0       	rjmp	.+28     	; 0x18ce <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    18b2:	c0 e0       	ldi	r28, 0x00	; 0
    18b4:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    18b6:	01 e0       	ldi	r16, 0x01	; 1
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    18bc:	c1 e0       	ldi	r28, 0x01	; 1
    18be:	d0 e0       	ldi	r29, 0x00	; 0
    18c0:	00 e0       	ldi	r16, 0x00	; 0
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    18c6:	c0 e0       	ldi	r28, 0x00	; 0
    18c8:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    18ca:	01 e0       	ldi	r16, 0x01	; 1
    18cc:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    18ce:	f9 01       	movw	r30, r18
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	ec 59       	subi	r30, 0x9C	; 156
    18d6:	fd 4f       	sbci	r31, 0xFD	; 253
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	89 2b       	or	r24, r25
    18de:	79 f4       	brne	.+30     	; 0x18fe <pickup+0x90>
		if (term[ct][0] == -2)
    18e0:	f9 01       	movw	r30, r18
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	e5 57       	subi	r30, 0x75	; 117
    18ec:	fd 4f       	sbci	r31, 0xFD	; 253
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	19 f4       	brne	.+6      	; 0x18fc <pickup+0x8e>
		{
		terminalCheck1();
    18f6:	88 dc       	rcall	.-1776   	; 0x1208 <terminalCheck1>
		terminalCheck2();
    18f8:	46 dd       	rcall	.-1396   	; 0x1386 <terminalCheck2>
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <pickup+0x90>
		}
		else	terminalCheck2();
    18fc:	44 dd       	rcall	.-1400   	; 0x1386 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    18fe:	20 91 87 02 	lds	r18, 0x0287
    1902:	30 91 88 02 	lds	r19, 0x0288
    1906:	f9 01       	movw	r30, r18
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	e5 57       	subi	r30, 0x75	; 117
    1912:	fd 4f       	sbci	r31, 0xFD	; 253
    1914:	40 81       	ld	r20, Z
    1916:	51 81       	ldd	r21, Z+1	; 0x01
    1918:	f9 01       	movw	r30, r18
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	e3 56       	subi	r30, 0x63	; 99
    1920:	fd 4f       	sbci	r31, 0xFD	; 253
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	48 17       	cp	r20, r24
    1928:	59 07       	cpc	r21, r25
    192a:	21 f0       	breq	.+8      	; 0x1934 <pickup+0xc6>
    192c:	4f 3f       	cpi	r20, 0xFF	; 255
    192e:	6f ef       	ldi	r22, 0xFF	; 255
    1930:	56 07       	cpc	r21, r22
    1932:	89 f4       	brne	.+34     	; 0x1956 <pickup+0xe8>
    1934:	f9 01       	movw	r30, r18
    1936:	ee 0f       	add	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	ee 0f       	add	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	e5 57       	subi	r30, 0x75	; 117
    1940:	fd 4f       	sbci	r31, 0xFD	; 253
    1942:	62 81       	ldd	r22, Z+2	; 0x02
    1944:	73 81       	ldd	r23, Z+3	; 0x03
    1946:	86 17       	cp	r24, r22
    1948:	97 07       	cpc	r25, r23
    194a:	09 f4       	brne	.+2      	; 0x194e <pickup+0xe0>
    194c:	ee c1       	rjmp	.+988    	; 0x1d2a <pickup+0x4bc>
    194e:	6f 3f       	cpi	r22, 0xFF	; 255
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	09 f4       	brne	.+2      	; 0x1956 <pickup+0xe8>
    1954:	ea c1       	rjmp	.+980    	; 0x1d2a <pickup+0x4bc>
		{
			if (armCount == 2)
    1956:	60 91 02 02 	lds	r22, 0x0202
    195a:	70 91 03 02 	lds	r23, 0x0203
    195e:	62 30       	cpi	r22, 0x02	; 2
    1960:	71 05       	cpc	r23, r1
    1962:	09 f0       	breq	.+2      	; 0x1966 <pickup+0xf8>
    1964:	b0 c0       	rjmp	.+352    	; 0x1ac6 <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1966:	e0 91 ad 02 	lds	r30, 0x02AD
    196a:	f0 91 ae 02 	lds	r31, 0x02AE
    196e:	df 01       	movw	r26, r30
    1970:	aa 0f       	add	r26, r26
    1972:	bb 1f       	adc	r27, r27
    1974:	a3 56       	subi	r26, 0x63	; 99
    1976:	bd 4f       	sbci	r27, 0xFD	; 253
    1978:	6d 91       	ld	r22, X+
    197a:	7c 91       	ld	r23, X
    197c:	46 17       	cp	r20, r22
    197e:	57 07       	cpc	r21, r23
    1980:	79 f0       	breq	.+30     	; 0x19a0 <pickup+0x132>
    1982:	d9 01       	movw	r26, r18
    1984:	aa 0f       	add	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	aa 0f       	add	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	a5 57       	subi	r26, 0x75	; 117
    198e:	bd 4f       	sbci	r27, 0xFD	; 253
    1990:	12 96       	adiw	r26, 0x02	; 2
    1992:	ed 90       	ld	r14, X+
    1994:	fc 90       	ld	r15, X
    1996:	13 97       	sbiw	r26, 0x03	; 3
    1998:	6e 15       	cp	r22, r14
    199a:	7f 05       	cpc	r23, r15
    199c:	59 f4       	brne	.+22     	; 0x19b4 <pickup+0x146>
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	c8 01       	movw	r24, r16
    19a6:	ed de       	rcall	.-550    	; 0x1782 <pickNode>
    19a8:	8e c0       	rjmp	.+284    	; 0x1ac6 <pickup+0x258>
					else	pickNode(arm1, 1);
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	ce 01       	movw	r24, r28
    19b0:	e8 de       	rcall	.-560    	; 0x1782 <pickNode>
    19b2:	89 c0       	rjmp	.+274    	; 0x1ac6 <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    19b4:	8e 15       	cp	r24, r14
    19b6:	9f 05       	cpc	r25, r15
    19b8:	09 f4       	brne	.+2      	; 0x19bc <pickup+0x14e>
    19ba:	4e c0       	rjmp	.+156    	; 0x1a58 <pickup+0x1ea>
    19bc:	ef 20       	and	r14, r15
    19be:	e0 94       	com	r14
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <pickup+0x156>
    19c2:	4a c0       	rjmp	.+148    	; 0x1a58 <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    19c4:	48 17       	cp	r20, r24
    19c6:	59 07       	cpc	r21, r25
    19c8:	69 f0       	breq	.+26     	; 0x19e4 <pickup+0x176>
    19ca:	4f 3f       	cpi	r20, 0xFF	; 255
    19cc:	af ef       	ldi	r26, 0xFF	; 255
    19ce:	5a 07       	cpc	r21, r26
    19d0:	49 f0       	breq	.+18     	; 0x19e4 <pickup+0x176>
					{
						pickNode(arm1, 1);
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	ce 01       	movw	r24, r28
    19d8:	d4 de       	rcall	.-600    	; 0x1782 <pickNode>
						pickNode(arm0, 0);
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	c8 01       	movw	r24, r16
    19e0:	d0 de       	rcall	.-608    	; 0x1782 <pickNode>
    19e2:	71 c0       	rjmp	.+226    	; 0x1ac6 <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    19e4:	21 70       	andi	r18, 0x01	; 1
    19e6:	30 78       	andi	r19, 0x80	; 128
    19e8:	33 23       	and	r19, r19
    19ea:	34 f4       	brge	.+12     	; 0x19f8 <pickup+0x18a>
    19ec:	21 50       	subi	r18, 0x01	; 1
    19ee:	31 09       	sbc	r19, r1
    19f0:	2e 6f       	ori	r18, 0xFE	; 254
    19f2:	3f 6f       	ori	r19, 0xFF	; 255
    19f4:	2f 5f       	subi	r18, 0xFF	; 255
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	d9 01       	movw	r26, r18
    19fa:	aa 0f       	add	r26, r26
    19fc:	bb 1f       	adc	r27, r27
    19fe:	ad 57       	subi	r26, 0x7D	; 125
    1a00:	bd 4f       	sbci	r27, 0xFD	; 253
    1a02:	2d 91       	ld	r18, X+
    1a04:	3c 91       	ld	r19, X
    1a06:	2f 3f       	cpi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	09 f1       	breq	.+66     	; 0x1a4e <pickup+0x1e0>
    1a0c:	df 01       	movw	r26, r30
    1a0e:	aa 0f       	add	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	aa 0f       	add	r26, r26
    1a14:	bb 1f       	adc	r27, r27
    1a16:	a5 57       	subi	r26, 0x75	; 117
    1a18:	bd 4f       	sbci	r27, 0xFD	; 253
    1a1a:	2d 91       	ld	r18, X+
    1a1c:	3c 91       	ld	r19, X
    1a1e:	62 17       	cp	r22, r18
    1a20:	73 07       	cpc	r23, r19
    1a22:	a9 f0       	breq	.+42     	; 0x1a4e <pickup+0x1e0>
    1a24:	2f 3f       	cpi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	91 f0       	breq	.+36     	; 0x1a4e <pickup+0x1e0>
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	e5 57       	subi	r30, 0x75	; 117
    1a34:	fd 4f       	sbci	r31, 0xFD	; 253
    1a36:	22 81       	ldd	r18, Z+2	; 0x02
    1a38:	33 81       	ldd	r19, Z+3	; 0x03
    1a3a:	62 17       	cp	r22, r18
    1a3c:	73 07       	cpc	r23, r19
    1a3e:	39 f0       	breq	.+14     	; 0x1a4e <pickup+0x1e0>
    1a40:	2f 3f       	cpi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	21 f0       	breq	.+8      	; 0x1a4e <pickup+0x1e0>
    1a46:	48 17       	cp	r20, r24
    1a48:	59 07       	cpc	r21, r25
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <pickup+0x1e0>
    1a4c:	6e c1       	rjmp	.+732    	; 0x1d2a <pickup+0x4bc>
						pickNode(arm1, 1);
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	ce 01       	movw	r24, r28
    1a54:	96 de       	rcall	.-724    	; 0x1782 <pickNode>
    1a56:	37 c0       	rjmp	.+110    	; 0x1ac6 <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1a58:	48 17       	cp	r20, r24
    1a5a:	59 07       	cpc	r21, r25
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <pickup+0x1f2>
    1a5e:	65 c1       	rjmp	.+714    	; 0x1d2a <pickup+0x4bc>
    1a60:	4f 3f       	cpi	r20, 0xFF	; 255
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <pickup+0x1fa>
    1a66:	61 c1       	rjmp	.+706    	; 0x1d2a <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1a68:	21 70       	andi	r18, 0x01	; 1
    1a6a:	30 78       	andi	r19, 0x80	; 128
    1a6c:	33 23       	and	r19, r19
    1a6e:	34 f4       	brge	.+12     	; 0x1a7c <pickup+0x20e>
    1a70:	21 50       	subi	r18, 0x01	; 1
    1a72:	31 09       	sbc	r19, r1
    1a74:	2e 6f       	ori	r18, 0xFE	; 254
    1a76:	3f 6f       	ori	r19, 0xFF	; 255
    1a78:	2f 5f       	subi	r18, 0xFF	; 255
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	d9 01       	movw	r26, r18
    1a7e:	aa 0f       	add	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	ad 57       	subi	r26, 0x7D	; 125
    1a84:	bd 4f       	sbci	r27, 0xFD	; 253
    1a86:	8d 91       	ld	r24, X+
    1a88:	9c 91       	ld	r25, X
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	c1 f0       	breq	.+48     	; 0x1abe <pickup+0x250>
    1a8e:	df 01       	movw	r26, r30
    1a90:	aa 0f       	add	r26, r26
    1a92:	bb 1f       	adc	r27, r27
    1a94:	aa 0f       	add	r26, r26
    1a96:	bb 1f       	adc	r27, r27
    1a98:	a5 57       	subi	r26, 0x75	; 117
    1a9a:	bd 4f       	sbci	r27, 0xFD	; 253
    1a9c:	8d 91       	ld	r24, X+
    1a9e:	9c 91       	ld	r25, X
    1aa0:	11 97       	sbiw	r26, 0x01	; 1
    1aa2:	68 17       	cp	r22, r24
    1aa4:	79 07       	cpc	r23, r25
    1aa6:	59 f0       	breq	.+22     	; 0x1abe <pickup+0x250>
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	49 f0       	breq	.+18     	; 0x1abe <pickup+0x250>
    1aac:	fd 01       	movw	r30, r26
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	68 17       	cp	r22, r24
    1ab4:	79 07       	cpc	r23, r25
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <pickup+0x250>
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	09 f0       	breq	.+2      	; 0x1abe <pickup+0x250>
    1abc:	36 c1       	rjmp	.+620    	; 0x1d2a <pickup+0x4bc>
						pickNode(arm0, 0);
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	5e de       	rcall	.-836    	; 0x1782 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    1ac6:	80 91 02 02 	lds	r24, 0x0202
    1aca:	90 91 03 02 	lds	r25, 0x0203
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <pickup+0x266>
    1ad2:	2b c1       	rjmp	.+598    	; 0x1d2a <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ef 54       	subi	r30, 0x4F	; 79
    1adc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <pickup+0x27a>
					a1 = arm0;
    1ae6:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1ae8:	be 01       	movw	r22, r28
    1aea:	6f 5f       	subi	r22, 0xFF	; 255
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	61 70       	andi	r22, 0x01	; 1
    1af0:	70 78       	andi	r23, 0x80	; 128
    1af2:	77 23       	and	r23, r23
    1af4:	34 f4       	brge	.+12     	; 0x1b02 <pickup+0x294>
    1af6:	61 50       	subi	r22, 0x01	; 1
    1af8:	71 09       	sbc	r23, r1
    1afa:	6e 6f       	ori	r22, 0xFE	; 254
    1afc:	7f 6f       	ori	r23, 0xFF	; 255
    1afe:	6f 5f       	subi	r22, 0xFF	; 255
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1b02:	80 91 87 02 	lds	r24, 0x0287
    1b06:	90 91 88 02 	lds	r25, 0x0288
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	21 70       	andi	r18, 0x01	; 1
    1b0e:	30 78       	andi	r19, 0x80	; 128
    1b10:	33 23       	and	r19, r19
    1b12:	34 f4       	brge	.+12     	; 0x1b20 <pickup+0x2b2>
    1b14:	21 50       	subi	r18, 0x01	; 1
    1b16:	31 09       	sbc	r19, r1
    1b18:	2e 6f       	ori	r18, 0xFE	; 254
    1b1a:	3f 6f       	ori	r19, 0xFF	; 255
    1b1c:	2f 5f       	subi	r18, 0xFF	; 255
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b20:	f9 01       	movw	r30, r18
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	ed 57       	subi	r30, 0x7D	; 125
    1b28:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2a:	20 81       	ld	r18, Z
    1b2c:	31 81       	ldd	r19, Z+1	; 0x01
    1b2e:	2f 3f       	cpi	r18, 0xFF	; 255
    1b30:	af ef       	ldi	r26, 0xFF	; 255
    1b32:	3a 07       	cpc	r19, r26
    1b34:	d9 f5       	brne	.+118    	; 0x1bac <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1b36:	fc 01       	movw	r30, r24
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	ec 0f       	add	r30, r28
    1b3e:	fd 1f       	adc	r31, r29
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	e5 57       	subi	r30, 0x75	; 117
    1b46:	fd 4f       	sbci	r31, 0xFD	; 253
    1b48:	20 81       	ld	r18, Z
    1b4a:	31 81       	ldd	r19, Z+1	; 0x01
    1b4c:	2f 3f       	cpi	r18, 0xFF	; 255
    1b4e:	ef ef       	ldi	r30, 0xFF	; 255
    1b50:	3e 07       	cpc	r19, r30
    1b52:	71 f0       	breq	.+28     	; 0x1b70 <pickup+0x302>
    1b54:	fc 01       	movw	r30, r24
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	e3 56       	subi	r30, 0x63	; 99
    1b5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5e:	40 81       	ld	r20, Z
    1b60:	51 81       	ldd	r21, Z+1	; 0x01
    1b62:	24 17       	cp	r18, r20
    1b64:	35 07       	cpc	r19, r21
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <pickup+0x302>
						pickNode(a1, a1);
    1b68:	be 01       	movw	r22, r28
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0a de       	rcall	.-1004   	; 0x1782 <pickNode>
    1b6e:	dd c0       	rjmp	.+442    	; 0x1d2a <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1b70:	fc 01       	movw	r30, r24
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	e6 0f       	add	r30, r22
    1b78:	f7 1f       	adc	r31, r23
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	e5 57       	subi	r30, 0x75	; 117
    1b80:	fd 4f       	sbci	r31, 0xFD	; 253
    1b82:	20 81       	ld	r18, Z
    1b84:	31 81       	ldd	r19, Z+1	; 0x01
    1b86:	2f 3f       	cpi	r18, 0xFF	; 255
    1b88:	4f ef       	ldi	r20, 0xFF	; 255
    1b8a:	34 07       	cpc	r19, r20
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <pickup+0x322>
    1b8e:	cd c0       	rjmp	.+410    	; 0x1d2a <pickup+0x4bc>
    1b90:	fc 01       	movw	r30, r24
    1b92:	ee 0f       	add	r30, r30
    1b94:	ff 1f       	adc	r31, r31
    1b96:	e3 56       	subi	r30, 0x63	; 99
    1b98:	fd 4f       	sbci	r31, 0xFD	; 253
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	28 17       	cp	r18, r24
    1ba0:	39 07       	cpc	r19, r25
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <pickup+0x338>
    1ba4:	c2 c0       	rjmp	.+388    	; 0x1d2a <pickup+0x4bc>
						pickNode(a1, a2);
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	ec dd       	rcall	.-1064   	; 0x1782 <pickNode>
    1baa:	bf c0       	rjmp	.+382    	; 0x1d2a <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1bac:	40 91 ad 02 	lds	r20, 0x02AD
    1bb0:	50 91 ae 02 	lds	r21, 0x02AE
    1bb4:	fa 01       	movw	r30, r20
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	e3 56       	subi	r30, 0x63	; 99
    1bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bbe:	01 90       	ld	r0, Z+
    1bc0:	f0 81       	ld	r31, Z
    1bc2:	e0 2d       	mov	r30, r0
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	aa 0f       	add	r26, r26
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	aa 0f       	add	r26, r26
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	a5 57       	subi	r26, 0x75	; 117
    1bd0:	bd 4f       	sbci	r27, 0xFD	; 253
    1bd2:	0d 90       	ld	r0, X+
    1bd4:	bc 91       	ld	r27, X
    1bd6:	a0 2d       	mov	r26, r0
    1bd8:	ae 17       	cp	r26, r30
    1bda:	bf 07       	cpc	r27, r31
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <pickup+0x38c>
    1bde:	dc 01       	movw	r26, r24
    1be0:	aa 0f       	add	r26, r26
    1be2:	bb 1f       	adc	r27, r27
    1be4:	aa 0f       	add	r26, r26
    1be6:	bb 1f       	adc	r27, r27
    1be8:	a5 57       	subi	r26, 0x75	; 117
    1bea:	bd 4f       	sbci	r27, 0xFD	; 253
    1bec:	12 96       	adiw	r26, 0x02	; 2
    1bee:	0d 90       	ld	r0, X+
    1bf0:	bc 91       	ld	r27, X
    1bf2:	a0 2d       	mov	r26, r0
    1bf4:	ea 17       	cp	r30, r26
    1bf6:	fb 07       	cpc	r31, r27
    1bf8:	d9 f5       	brne	.+118    	; 0x1c70 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1bfa:	da 01       	movw	r26, r20
    1bfc:	aa 0f       	add	r26, r26
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	ac 59       	subi	r26, 0x9C	; 156
    1c02:	bd 4f       	sbci	r27, 0xFD	; 253
    1c04:	2d 91       	ld	r18, X+
    1c06:	3c 91       	ld	r19, X
    1c08:	21 30       	cpi	r18, 0x01	; 1
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <pickup+0x3a2>
    1c0e:	8d c0       	rjmp	.+282    	; 0x1d2a <pickup+0x4bc>
    1c10:	da 01       	movw	r26, r20
    1c12:	aa 0f       	add	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	aa 0f       	add	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	a5 57       	subi	r26, 0x75	; 117
    1c1c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c1e:	2d 91       	ld	r18, X+
    1c20:	3c 91       	ld	r19, X
    1c22:	2f 3f       	cpi	r18, 0xFF	; 255
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	79 f0       	breq	.+30     	; 0x1c46 <pickup+0x3d8>
    1c28:	da 01       	movw	r26, r20
    1c2a:	aa 0f       	add	r26, r26
    1c2c:	bb 1f       	adc	r27, r27
    1c2e:	aa 0f       	add	r26, r26
    1c30:	bb 1f       	adc	r27, r27
    1c32:	a5 57       	subi	r26, 0x75	; 117
    1c34:	bd 4f       	sbci	r27, 0xFD	; 253
    1c36:	12 96       	adiw	r26, 0x02	; 2
    1c38:	2d 91       	ld	r18, X+
    1c3a:	3c 91       	ld	r19, X
    1c3c:	13 97       	sbiw	r26, 0x03	; 3
    1c3e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <pickup+0x3d8>
    1c44:	72 c0       	rjmp	.+228    	; 0x1d2a <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	8c 0f       	add	r24, r28
    1c4c:	9d 1f       	adc	r25, r29
    1c4e:	dc 01       	movw	r26, r24
    1c50:	aa 0f       	add	r26, r26
    1c52:	bb 1f       	adc	r27, r27
    1c54:	a5 57       	subi	r26, 0x75	; 117
    1c56:	bd 4f       	sbci	r27, 0xFD	; 253
    1c58:	8d 91       	ld	r24, X+
    1c5a:	9c 91       	ld	r25, X
    1c5c:	e8 17       	cp	r30, r24
    1c5e:	f9 07       	cpc	r31, r25
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <pickup+0x3fc>
								pickNode(a1, a1);
    1c62:	be 01       	movw	r22, r28
    1c64:	ce 01       	movw	r24, r28
    1c66:	8d dd       	rcall	.-1254   	; 0x1782 <pickNode>
    1c68:	60 c0       	rjmp	.+192    	; 0x1d2a <pickup+0x4bc>
							else pickNode(a1, a2);
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	8a dd       	rcall	.-1260   	; 0x1782 <pickNode>
    1c6e:	5d c0       	rjmp	.+186    	; 0x1d2a <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1c70:	dc 01       	movw	r26, r24
    1c72:	aa 0f       	add	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	a3 56       	subi	r26, 0x63	; 99
    1c78:	bd 4f       	sbci	r27, 0xFD	; 253
    1c7a:	0d 90       	ld	r0, X+
    1c7c:	bc 91       	ld	r27, X
    1c7e:	a0 2d       	mov	r26, r0
    1c80:	2a 17       	cp	r18, r26
    1c82:	3b 07       	cpc	r19, r27
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <pickup+0x41a>
    1c86:	51 c0       	rjmp	.+162    	; 0x1d2a <pickup+0x4bc>
    1c88:	2e 17       	cp	r18, r30
    1c8a:	3f 07       	cpc	r19, r31
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <pickup+0x422>
    1c8e:	4d c0       	rjmp	.+154    	; 0x1d2a <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1c90:	fa 01       	movw	r30, r20
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	ec 59       	subi	r30, 0x9C	; 156
    1c98:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9a:	20 81       	ld	r18, Z
    1c9c:	31 81       	ldd	r19, Z+1	; 0x01
    1c9e:	21 30       	cpi	r18, 0x01	; 1
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <pickup+0x438>
    1ca4:	42 c0       	rjmp	.+132    	; 0x1d2a <pickup+0x4bc>
    1ca6:	fa 01       	movw	r30, r20
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	ee 0f       	add	r30, r30
    1cae:	ff 1f       	adc	r31, r31
    1cb0:	e5 57       	subi	r30, 0x75	; 117
    1cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb4:	20 81       	ld	r18, Z
    1cb6:	31 81       	ldd	r19, Z+1	; 0x01
    1cb8:	a2 17       	cp	r26, r18
    1cba:	b3 07       	cpc	r27, r19
    1cbc:	b1 f1       	breq	.+108    	; 0x1d2a <pickup+0x4bc>
    1cbe:	fa 01       	movw	r30, r20
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	e5 57       	subi	r30, 0x75	; 117
    1cca:	fd 4f       	sbci	r31, 0xFD	; 253
    1ccc:	22 81       	ldd	r18, Z+2	; 0x02
    1cce:	33 81       	ldd	r19, Z+3	; 0x03
    1cd0:	a2 17       	cp	r26, r18
    1cd2:	b3 07       	cpc	r27, r19
    1cd4:	51 f1       	breq	.+84     	; 0x1d2a <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	ec 0f       	add	r30, r28
    1cde:	fd 1f       	adc	r31, r29
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	e5 57       	subi	r30, 0x75	; 117
    1ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	2f 3f       	cpi	r18, 0xFF	; 255
    1cee:	ef ef       	ldi	r30, 0xFF	; 255
    1cf0:	3e 07       	cpc	r19, r30
    1cf2:	39 f0       	breq	.+14     	; 0x1d02 <pickup+0x494>
    1cf4:	a2 17       	cp	r26, r18
    1cf6:	b3 07       	cpc	r27, r19
    1cf8:	21 f0       	breq	.+8      	; 0x1d02 <pickup+0x494>
									pickNode(a1, a1);
    1cfa:	be 01       	movw	r22, r28
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	41 dd       	rcall	.-1406   	; 0x1782 <pickNode>
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	86 0f       	add	r24, r22
    1d08:	97 1f       	adc	r25, r23
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	ff 1f       	adc	r31, r31
    1d10:	e5 57       	subi	r30, 0x75	; 117
    1d12:	fd 4f       	sbci	r31, 0xFD	; 253
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	8f 3f       	cpi	r24, 0xFF	; 255
    1d1a:	2f ef       	ldi	r18, 0xFF	; 255
    1d1c:	92 07       	cpc	r25, r18
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <pickup+0x4bc>
    1d20:	a8 17       	cp	r26, r24
    1d22:	b9 07       	cpc	r27, r25
    1d24:	11 f0       	breq	.+4      	; 0x1d2a <pickup+0x4bc>
									pickNode(a1, a2);
    1d26:	ce 01       	movw	r24, r28
    1d28:	2c dd       	rcall	.-1448   	; 0x1782 <pickNode>
					}
				}
			}
		}
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	08 95       	ret

00001d38 <drop>:

void drop(int side)
{
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
	lower(side);//lower
    1d3e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <lower>
	open(side);
    1d42:	8c 2f       	mov	r24, r28
    1d44:	0e 94 43 06 	call	0xc86	; 0xc86 <open>
	elevate();//mid
    1d48:	0e 94 3d 06 	call	0xc7a	; 0xc7a <elevate>
	close(side);
    1d4c:	8c 2f       	mov	r24, r28
    1d4e:	0e 94 53 06 	call	0xca6	; 0xca6 <close>
	armCount++;
    1d52:	80 91 02 02 	lds	r24, 0x0202
    1d56:	90 91 03 02 	lds	r25, 0x0203
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	90 93 03 02 	sts	0x0203, r25
    1d60:	80 93 02 02 	sts	0x0202, r24
	if(side==0)
    1d64:	cd 2b       	or	r28, r29
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <drop+0x3a>
	lcd("dropRight");
    1d68:	86 e3       	ldi	r24, 0x36	; 54
    1d6a:	92 e0       	ldi	r25, 0x02	; 2
    1d6c:	0e 94 6f 06 	call	0xcde	; 0xcde <lcd>
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <drop+0x42>
	else
	lcd("dropLeft");
    1d72:	80 e4       	ldi	r24, 0x40	; 64
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	0e 94 6f 06 	call	0xcde	; 0xcde <lcd>
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1d8a:	e0 91 87 02 	lds	r30, 0x0287
    1d8e:	f0 91 88 02 	lds	r31, 0x0288
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	e6 0f       	add	r30, r22
    1d98:	f7 1f       	adc	r31, r23
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	e5 57       	subi	r30, 0x75	; 117
    1da0:	fd 4f       	sbci	r31, 0xFD	; 253
    1da2:	8c 01       	movw	r16, r24
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	0f 54       	subi	r16, 0x4F	; 79
    1daa:	1d 4f       	sbci	r17, 0xFD	; 253
    1dac:	d8 01       	movw	r26, r16
    1dae:	8d 91       	ld	r24, X+
    1db0:	9c 91       	ld	r25, X
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
	position(armNo, side);
    1db6:	ce 01       	movw	r24, r28
    1db8:	fc db       	rcall	.-2056   	; 0x15b2 <position>
	drop(armNo);
    1dba:	ce 01       	movw	r24, r28
    1dbc:	bd df       	rcall	.-134    	; 0x1d38 <drop>
	arm[armNo] = -1;
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	9f ef       	ldi	r25, 0xFF	; 255
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1dc8:	80 91 56 02 	lds	r24, 0x0256
    1dcc:	90 91 57 02 	lds	r25, 0x0257
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	90 93 57 02 	sts	0x0257, r25
    1dd6:	80 93 56 02 	sts	0x0256, r24
}
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1dea:	fb 01       	movw	r30, r22
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	ed 57       	subi	r30, 0x7D	; 125
    1df2:	fd 4f       	sbci	r31, 0xFD	; 253
    1df4:	dc 01       	movw	r26, r24
    1df6:	aa 0f       	add	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	af 54       	subi	r26, 0x4F	; 79
    1dfc:	bd 4f       	sbci	r27, 0xFD	; 253
    1dfe:	8d 91       	ld	r24, X+
    1e00:	9c 91       	ld	r25, X
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1e06:	c6 17       	cp	r28, r22
    1e08:	d7 07       	cpc	r29, r23
    1e0a:	39 f4       	brne	.+14     	; 0x1e1a <sortDrop+0x36>
    1e0c:	80 91 4e 02 	lds	r24, 0x024E
    1e10:	90 91 4f 02 	lds	r25, 0x024F
    1e14:	89 2b       	or	r24, r25
    1e16:	49 f4       	brne	.+18     	; 0x1e2a <sortDrop+0x46>
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <sortDrop+0x42>
    1e1a:	80 91 4e 02 	lds	r24, 0x024E
    1e1e:	90 91 4f 02 	lds	r25, 0x024F
    1e22:	02 97       	sbiw	r24, 0x02	; 2
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <sortDrop+0x46>
		turn();
    1e26:	19 d8       	rcall	.-4046   	; 0xe5a <turn>
    1e28:	0e c0       	rjmp	.+28     	; 0x1e46 <sortDrop+0x62>
	else
	{
		if (dir == 1 || dir == 3)
    1e2a:	80 91 4e 02 	lds	r24, 0x024E
    1e2e:	90 91 4f 02 	lds	r25, 0x024F
    1e32:	8d 7f       	andi	r24, 0xFD	; 253
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	39 f4       	brne	.+14     	; 0x1e46 <sortDrop+0x62>
			if (armNo == 0)
    1e38:	20 97       	sbiw	r28, 0x00	; 0
    1e3a:	19 f4       	brne	.+6      	; 0x1e42 <sortDrop+0x5e>
				turnLeft();
    1e3c:	0e 94 df 06 	call	0xdbe	; 0xdbe <turnLeft>
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <sortDrop+0x62>
			else turnRight();
    1e42:	0e 94 91 06 	call	0xd22	; 0xd22 <turnRight>
	}
	drop(armNo);
    1e46:	ce 01       	movw	r24, r28
    1e48:	77 df       	rcall	.-274    	; 0x1d38 <drop>
	arm[armNo] = -1;
    1e4a:	cc 0f       	add	r28, r28
    1e4c:	dd 1f       	adc	r29, r29
    1e4e:	cf 54       	subi	r28, 0x4F	; 79
    1e50:	dd 4f       	sbci	r29, 0xFD	; 253
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	99 83       	std	Y+1, r25	; 0x01
    1e58:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <dropPickup>:

void dropPickup(int a1)
{
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1e64:	9c 01       	movw	r18, r24
    1e66:	2f 5f       	subi	r18, 0xFF	; 255
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	21 70       	andi	r18, 0x01	; 1
    1e6c:	30 78       	andi	r19, 0x80	; 128
    1e6e:	33 23       	and	r19, r19
    1e70:	34 f4       	brge	.+12     	; 0x1e7e <dropPickup+0x1e>
    1e72:	21 50       	subi	r18, 0x01	; 1
    1e74:	31 09       	sbc	r19, r1
    1e76:	2e 6f       	ori	r18, 0xFE	; 254
    1e78:	3f 6f       	ori	r19, 0xFF	; 255
    1e7a:	2f 5f       	subi	r18, 0xFF	; 255
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	d2 2f       	mov	r29, r18
    1e80:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1e82:	e0 91 87 02 	lds	r30, 0x0287
    1e86:	f0 91 88 02 	lds	r31, 0x0288
    1e8a:	af 01       	movw	r20, r30
    1e8c:	44 0f       	add	r20, r20
    1e8e:	55 1f       	adc	r21, r21
    1e90:	24 0f       	add	r18, r20
    1e92:	35 1f       	adc	r19, r21
    1e94:	d9 01       	movw	r26, r18
    1e96:	aa 0f       	add	r26, r26
    1e98:	bb 1f       	adc	r27, r27
    1e9a:	a5 57       	subi	r26, 0x75	; 117
    1e9c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e9e:	2d 91       	ld	r18, X+
    1ea0:	3c 91       	ld	r19, X
    1ea2:	da 01       	movw	r26, r20
    1ea4:	a3 56       	subi	r26, 0x63	; 99
    1ea6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ea8:	4d 91       	ld	r20, X+
    1eaa:	5c 91       	ld	r21, X
    1eac:	24 17       	cp	r18, r20
    1eae:	35 07       	cpc	r19, r21
    1eb0:	69 f0       	breq	.+26     	; 0x1ecc <dropPickup+0x6c>
    1eb2:	a0 91 ad 02 	lds	r26, 0x02AD
    1eb6:	b0 91 ae 02 	lds	r27, 0x02AE
    1eba:	aa 0f       	add	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	a3 56       	subi	r26, 0x63	; 99
    1ec0:	bd 4f       	sbci	r27, 0xFD	; 253
    1ec2:	6d 91       	ld	r22, X+
    1ec4:	7c 91       	ld	r23, X
    1ec6:	26 17       	cp	r18, r22
    1ec8:	37 07       	cpc	r19, r23
    1eca:	a9 f0       	breq	.+42     	; 0x1ef6 <dropPickup+0x96>
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	e8 0f       	add	r30, r24
    1ed2:	f9 1f       	adc	r31, r25
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e5 57       	subi	r30, 0x75	; 117
    1eda:	fd 4f       	sbci	r31, 0xFD	; 253
    1edc:	01 90       	ld	r0, Z+
    1ede:	f0 81       	ld	r31, Z
    1ee0:	e0 2d       	mov	r30, r0
    1ee2:	4e 17       	cp	r20, r30
    1ee4:	5f 07       	cpc	r21, r31
    1ee6:	39 f0       	breq	.+14     	; 0x1ef6 <dropPickup+0x96>
    1ee8:	31 96       	adiw	r30, 0x01	; 1
    1eea:	29 f0       	breq	.+10     	; 0x1ef6 <dropPickup+0x96>
		pickNode(a2, a1);
    1eec:	bc 01       	movw	r22, r24
    1eee:	8d 2f       	mov	r24, r29
    1ef0:	9c 2f       	mov	r25, r28
    1ef2:	47 dc       	rcall	.-1906   	; 0x1782 <pickNode>
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1ef6:	24 17       	cp	r18, r20
    1ef8:	35 07       	cpc	r19, r21
    1efa:	41 f0       	breq	.+16     	; 0x1f0c <dropPickup+0xac>
    1efc:	2f 3f       	cpi	r18, 0xFF	; 255
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	29 f0       	breq	.+10     	; 0x1f0c <dropPickup+0xac>
		pickNode(a2, a2);
    1f02:	6d 2f       	mov	r22, r29
    1f04:	7c 2f       	mov	r23, r28
    1f06:	8d 2f       	mov	r24, r29
    1f08:	9c 2f       	mov	r25, r28
    1f0a:	3b dc       	rcall	.-1930   	; 0x1782 <pickNode>
}
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <canDrop>:

void canDrop()
{
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1f1a:	20 91 87 02 	lds	r18, 0x0287
    1f1e:	30 91 88 02 	lds	r19, 0x0288
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	30 f4       	brcc	.+12     	; 0x1f34 <canDrop+0x22>
    1f28:	80 91 4e 02 	lds	r24, 0x024E
    1f2c:	90 91 4f 02 	lds	r25, 0x024F
    1f30:	02 97       	sbiw	r24, 0x02	; 2
    1f32:	79 f0       	breq	.+30     	; 0x1f52 <canDrop+0x40>
    1f34:	c9 01       	movw	r24, r18
    1f36:	02 97       	sbiw	r24, 0x02	; 2
    1f38:	02 97       	sbiw	r24, 0x02	; 2
    1f3a:	80 f4       	brcc	.+32     	; 0x1f5c <canDrop+0x4a>
    1f3c:	80 91 4e 02 	lds	r24, 0x024E
    1f40:	90 91 4f 02 	lds	r25, 0x024F
    1f44:	89 2b       	or	r24, r25
    1f46:	79 f0       	breq	.+30     	; 0x1f66 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1f48:	01 e0       	ldi	r16, 0x01	; 1
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
    1f4c:	c0 e0       	ldi	r28, 0x00	; 0
    1f4e:	d0 e0       	ldi	r29, 0x00	; 0
    1f50:	0e c0       	rjmp	.+28     	; 0x1f6e <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1f52:	00 e0       	ldi	r16, 0x00	; 0
    1f54:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1f56:	c1 e0       	ldi	r28, 0x01	; 1
    1f58:	d0 e0       	ldi	r29, 0x00	; 0
    1f5a:	09 c0       	rjmp	.+18     	; 0x1f6e <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1f5c:	01 e0       	ldi	r16, 0x01	; 1
    1f5e:	10 e0       	ldi	r17, 0x00	; 0
    1f60:	c0 e0       	ldi	r28, 0x00	; 0
    1f62:	d0 e0       	ldi	r29, 0x00	; 0
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1f66:	00 e0       	ldi	r16, 0x00	; 0
    1f68:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1f6a:	c1 e0       	ldi	r28, 0x01	; 1
    1f6c:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    1f6e:	40 91 02 02 	lds	r20, 0x0202
    1f72:	50 91 03 02 	lds	r21, 0x0203
    1f76:	42 30       	cpi	r20, 0x02	; 2
    1f78:	51 05       	cpc	r21, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <canDrop+0x6c>
    1f7c:	3b c1       	rjmp	.+630    	; 0x21f4 <canDrop+0x2e2>
    1f7e:	f9 01       	movw	r30, r18
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	e3 56       	subi	r30, 0x63	; 99
    1f86:	fd 4f       	sbci	r31, 0xFD	; 253
    1f88:	40 81       	ld	r20, Z
    1f8a:	51 81       	ldd	r21, Z+1	; 0x01
    1f8c:	80 91 b1 02 	lds	r24, 0x02B1
    1f90:	90 91 b2 02 	lds	r25, 0x02B2
    1f94:	84 17       	cp	r24, r20
    1f96:	95 07       	cpc	r25, r21
    1f98:	41 f0       	breq	.+16     	; 0x1faa <canDrop+0x98>
    1f9a:	80 91 b3 02 	lds	r24, 0x02B3
    1f9e:	90 91 b4 02 	lds	r25, 0x02B4
    1fa2:	48 17       	cp	r20, r24
    1fa4:	59 07       	cpc	r21, r25
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <canDrop+0x98>
    1fa8:	25 c1       	rjmp	.+586    	; 0x21f4 <canDrop+0x2e2>
		return;
	else
	{
		if (visited[ct] == 0)
    1faa:	f9 01       	movw	r30, r18
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	ec 59       	subi	r30, 0x9C	; 156
    1fb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	89 2b       	or	r24, r25
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <canDrop+0xac>
			terminalCheck1();
    1fbc:	25 d9       	rcall	.-3510   	; 0x1208 <terminalCheck1>
		if (armCount == 0)
    1fbe:	80 91 02 02 	lds	r24, 0x0202
    1fc2:	90 91 03 02 	lds	r25, 0x0203
    1fc6:	89 2b       	or	r24, r25
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <canDrop+0xba>
    1fca:	48 c0       	rjmp	.+144    	; 0x205c <canDrop+0x14a>
		{
			if (arm[arm0] == color[ct])
    1fcc:	20 91 87 02 	lds	r18, 0x0287
    1fd0:	30 91 88 02 	lds	r19, 0x0288
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	e3 56       	subi	r30, 0x63	; 99
    1fdc:	fd 4f       	sbci	r31, 0xFD	; 253
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ef 54       	subi	r30, 0x4F	; 79
    1fea:	fd 4f       	sbci	r31, 0xFD	; 253
    1fec:	40 81       	ld	r20, Z
    1fee:	51 81       	ldd	r21, Z+1	; 0x01
    1ff0:	48 17       	cp	r20, r24
    1ff2:	59 07       	cpc	r21, r25
    1ff4:	a9 f4       	brne	.+42     	; 0x2020 <canDrop+0x10e>
				if (term[ct][0] == -1)
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	ee 0f       	add	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	e5 57       	subi	r30, 0x75	; 117
    2002:	fd 4f       	sbci	r31, 0xFD	; 253
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	29 f4       	brne	.+10     	; 0x2016 <canDrop+0x104>
					nodeDrop(arm0, 0);
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	ce 01       	movw	r24, r28
    2012:	b6 de       	rcall	.-660    	; 0x1d80 <nodeDrop>
    2014:	23 c0       	rjmp	.+70     	; 0x205c <canDrop+0x14a>
				else nodeDrop(arm0, 1);
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	ce 01       	movw	r24, r28
    201c:	b1 de       	rcall	.-670    	; 0x1d80 <nodeDrop>
    201e:	1e c0       	rjmp	.+60     	; 0x205c <canDrop+0x14a>
			else if (arm[arm1] == color[ct])
    2020:	f8 01       	movw	r30, r16
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	ef 54       	subi	r30, 0x4F	; 79
    2028:	fd 4f       	sbci	r31, 0xFD	; 253
    202a:	40 81       	ld	r20, Z
    202c:	51 81       	ldd	r21, Z+1	; 0x01
    202e:	84 17       	cp	r24, r20
    2030:	95 07       	cpc	r25, r21
    2032:	a1 f4       	brne	.+40     	; 0x205c <canDrop+0x14a>
				if (term[ct][0] != -1)
    2034:	f9 01       	movw	r30, r18
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	e5 57       	subi	r30, 0x75	; 117
    2040:	fd 4f       	sbci	r31, 0xFD	; 253
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	29 f0       	breq	.+10     	; 0x2054 <canDrop+0x142>
					nodeDrop(arm1, 1);
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	c8 01       	movw	r24, r16
    2050:	97 de       	rcall	.-722    	; 0x1d80 <nodeDrop>
    2052:	04 c0       	rjmp	.+8      	; 0x205c <canDrop+0x14a>
				else nodeDrop(arm1, 0);
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	c8 01       	movw	r24, r16
    205a:	92 de       	rcall	.-732    	; 0x1d80 <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    205c:	20 91 87 02 	lds	r18, 0x0287
    2060:	30 91 88 02 	lds	r19, 0x0288
    2064:	f9 01       	movw	r30, r18
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	e3 56       	subi	r30, 0x63	; 99
    206c:	fd 4f       	sbci	r31, 0xFD	; 253
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	40 91 b1 02 	lds	r20, 0x02B1
    2076:	50 91 b2 02 	lds	r21, 0x02B2
    207a:	48 17       	cp	r20, r24
    207c:	59 07       	cpc	r21, r25
    207e:	41 f0       	breq	.+16     	; 0x2090 <canDrop+0x17e>
    2080:	40 91 b3 02 	lds	r20, 0x02B3
    2084:	50 91 b4 02 	lds	r21, 0x02B4
    2088:	84 17       	cp	r24, r20
    208a:	95 07       	cpc	r25, r21
    208c:	09 f0       	breq	.+2      	; 0x2090 <canDrop+0x17e>
    208e:	b2 c0       	rjmp	.+356    	; 0x21f4 <canDrop+0x2e2>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2090:	f9 01       	movw	r30, r18
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	e5 57       	subi	r30, 0x75	; 117
    209c:	fd 4f       	sbci	r31, 0xFD	; 253
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <canDrop+0x196>
    20a6:	45 c0       	rjmp	.+138    	; 0x2132 <canDrop+0x220>
    20a8:	f9 01       	movw	r30, r18
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	e5 57       	subi	r30, 0x75	; 117
    20b4:	fd 4f       	sbci	r31, 0xFD	; 253
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	c9 f0       	breq	.+50     	; 0x20f0 <canDrop+0x1de>
				if (visited[ct] == 0)
    20be:	f9 01       	movw	r30, r18
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	ec 59       	subi	r30, 0x9C	; 156
    20c6:	fd 4f       	sbci	r31, 0xFD	; 253
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	89 2b       	or	r24, r25
    20ce:	81 f4       	brne	.+32     	; 0x20f0 <canDrop+0x1de>
					terminalCheck2();
    20d0:	5a d9       	rcall	.-3404   	; 0x1386 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    20d2:	20 91 87 02 	lds	r18, 0x0287
    20d6:	30 91 88 02 	lds	r19, 0x0288
    20da:	f9 01       	movw	r30, r18
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	e5 57       	subi	r30, 0x75	; 117
    20e6:	fd 4f       	sbci	r31, 0xFD	; 253
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	09 f1       	breq	.+66     	; 0x2132 <canDrop+0x220>
    20f0:	f9 01       	movw	r30, r18
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	e5 57       	subi	r30, 0x75	; 117
    20fc:	fd 4f       	sbci	r31, 0xFD	; 253
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	b1 f0       	breq	.+44     	; 0x2132 <canDrop+0x220>
			{
				if (arm[arm0] == color[ct])
    2106:	de 01       	movw	r26, r28
    2108:	aa 0f       	add	r26, r26
    210a:	bb 1f       	adc	r27, r27
    210c:	af 54       	subi	r26, 0x4F	; 79
    210e:	bd 4f       	sbci	r27, 0xFD	; 253
    2110:	f9 01       	movw	r30, r18
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	e3 56       	subi	r30, 0x63	; 99
    2118:	fd 4f       	sbci	r31, 0xFD	; 253
    211a:	4d 91       	ld	r20, X+
    211c:	5c 91       	ld	r21, X
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	48 17       	cp	r20, r24
    2124:	59 07       	cpc	r21, r25
    2126:	19 f4       	brne	.+6      	; 0x212e <canDrop+0x21c>
					dropPickup(arm0);
    2128:	ce 01       	movw	r24, r28
    212a:	9a de       	rcall	.-716    	; 0x1e60 <dropPickup>
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <canDrop+0x220>
				else dropPickup(arm1);
    212e:	c8 01       	movw	r24, r16
    2130:	97 de       	rcall	.-722    	; 0x1e60 <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    2132:	80 91 87 02 	lds	r24, 0x0287
    2136:	90 91 88 02 	lds	r25, 0x0288
    213a:	fc 01       	movw	r30, r24
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	e3 56       	subi	r30, 0x63	; 99
    2142:	fd 4f       	sbci	r31, 0xFD	; 253
    2144:	20 81       	ld	r18, Z
    2146:	31 81       	ldd	r19, Z+1	; 0x01
    2148:	fe 01       	movw	r30, r28
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	ef 54       	subi	r30, 0x4F	; 79
    2150:	fd 4f       	sbci	r31, 0xFD	; 253
    2152:	40 81       	ld	r20, Z
    2154:	51 81       	ldd	r21, Z+1	; 0x01
    2156:	42 17       	cp	r20, r18
    2158:	53 07       	cpc	r21, r19
    215a:	11 f5       	brne	.+68     	; 0x21a0 <canDrop+0x28e>
    215c:	fc 01       	movw	r30, r24
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	e5 57       	subi	r30, 0x75	; 117
    2168:	fd 4f       	sbci	r31, 0xFD	; 253
    216a:	40 81       	ld	r20, Z
    216c:	51 81       	ldd	r21, Z+1	; 0x01
    216e:	4f 3f       	cpi	r20, 0xFF	; 255
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	29 f4       	brne	.+10     	; 0x217e <canDrop+0x26c>
				nodeDrop(arm0, 0);
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	ce 01       	movw	r24, r28
    217a:	02 de       	rcall	.-1020   	; 0x1d80 <nodeDrop>
    217c:	3b c0       	rjmp	.+118    	; 0x21f4 <canDrop+0x2e2>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    217e:	fc 01       	movw	r30, r24
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	e5 57       	subi	r30, 0x75	; 117
    218a:	fd 4f       	sbci	r31, 0xFD	; 253
    218c:	42 81       	ldd	r20, Z+2	; 0x02
    218e:	53 81       	ldd	r21, Z+3	; 0x03
    2190:	4f 3f       	cpi	r20, 0xFF	; 255
    2192:	5f 4f       	sbci	r21, 0xFF	; 255
    2194:	29 f4       	brne	.+10     	; 0x21a0 <canDrop+0x28e>
				nodeDrop(arm0, 1);
    2196:	61 e0       	ldi	r22, 0x01	; 1
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	ce 01       	movw	r24, r28
    219c:	f1 dd       	rcall	.-1054   	; 0x1d80 <nodeDrop>
    219e:	2a c0       	rjmp	.+84     	; 0x21f4 <canDrop+0x2e2>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    21a0:	f8 01       	movw	r30, r16
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	ef 54       	subi	r30, 0x4F	; 79
    21a8:	fd 4f       	sbci	r31, 0xFD	; 253
    21aa:	40 81       	ld	r20, Z
    21ac:	51 81       	ldd	r21, Z+1	; 0x01
    21ae:	24 17       	cp	r18, r20
    21b0:	35 07       	cpc	r19, r21
    21b2:	01 f5       	brne	.+64     	; 0x21f4 <canDrop+0x2e2>
    21b4:	fc 01       	movw	r30, r24
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	e5 57       	subi	r30, 0x75	; 117
    21c0:	fd 4f       	sbci	r31, 0xFD	; 253
    21c2:	20 81       	ld	r18, Z
    21c4:	31 81       	ldd	r19, Z+1	; 0x01
    21c6:	2f 3f       	cpi	r18, 0xFF	; 255
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	29 f4       	brne	.+10     	; 0x21d6 <canDrop+0x2c4>
				nodeDrop(arm1, 0);
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	c8 01       	movw	r24, r16
    21d2:	d6 dd       	rcall	.-1108   	; 0x1d80 <nodeDrop>
    21d4:	0f c0       	rjmp	.+30     	; 0x21f4 <canDrop+0x2e2>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    21d6:	fc 01       	movw	r30, r24
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	e5 57       	subi	r30, 0x75	; 117
    21e2:	fd 4f       	sbci	r31, 0xFD	; 253
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	21 f4       	brne	.+8      	; 0x21f4 <canDrop+0x2e2>
				nodeDrop(arm1, 1);
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	c8 01       	movw	r24, r16
    21f2:	c6 dd       	rcall	.-1140   	; 0x1d80 <nodeDrop>

		}
	}
}
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	08 95       	ret

000021fe <newSort>:

void newSort()
{
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    2206:	20 91 b1 02 	lds	r18, 0x02B1
    220a:	30 91 b2 02 	lds	r19, 0x02B2
    220e:	2f 3f       	cpi	r18, 0xFF	; 255
    2210:	1f ef       	ldi	r17, 0xFF	; 255
    2212:	31 07       	cpc	r19, r17
    2214:	41 f0       	breq	.+16     	; 0x2226 <__stack+0x27>
		a1 = indicator[arm[0]];
    2216:	f9 01       	movw	r30, r18
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	eb 55       	subi	r30, 0x5B	; 91
    221e:	fd 4f       	sbci	r31, 0xFD	; 253
    2220:	c0 81       	ld	r28, Z
    2222:	d1 81       	ldd	r29, Z+1	; 0x01
    2224:	02 c0       	rjmp	.+4      	; 0x222a <__stack+0x2b>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    2226:	ce ef       	ldi	r28, 0xFE	; 254
    2228:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    222a:	e0 91 b3 02 	lds	r30, 0x02B3
    222e:	f0 91 b4 02 	lds	r31, 0x02B4
    2232:	ef 3f       	cpi	r30, 0xFF	; 255
    2234:	4f ef       	ldi	r20, 0xFF	; 255
    2236:	f4 07       	cpc	r31, r20
    2238:	09 f4       	brne	.+2      	; 0x223c <__stack+0x3d>
    223a:	7f c1       	rjmp	.+766    	; 0x253a <__stack+0x33b>
		a2 = indicator[arm[1]];
    223c:	df 01       	movw	r26, r30
    223e:	aa 0f       	add	r26, r26
    2240:	bb 1f       	adc	r27, r27
    2242:	ab 55       	subi	r26, 0x5B	; 91
    2244:	bd 4f       	sbci	r27, 0xFD	; 253
    2246:	4d 91       	ld	r20, X+
    2248:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    224a:	80 91 87 02 	lds	r24, 0x0287
    224e:	90 91 88 02 	lds	r25, 0x0288
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	90 78       	andi	r25, 0x80	; 128
    2258:	99 23       	and	r25, r25
    225a:	24 f4       	brge	.+8      	; 0x2264 <__stack+0x65>
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	8e 6f       	ori	r24, 0xFE	; 254
    2260:	9f 6f       	ori	r25, 0xFF	; 255
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2266:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    2268:	d0 93 88 02 	sts	0x0288, r29
    226c:	c0 93 87 02 	sts	0x0287, r28
		if(arm[0]==arm[1] && (visited[a1]==0 ||(term[a1][0] != -1 && term[a1][1] != -1)))
    2270:	2e 17       	cp	r18, r30
    2272:	3f 07       	cpc	r19, r31
    2274:	61 f5       	brne	.+88     	; 0x22ce <__stack+0xcf>
    2276:	de 01       	movw	r26, r28
    2278:	aa 0f       	add	r26, r26
    227a:	bb 1f       	adc	r27, r27
    227c:	ac 59       	subi	r26, 0x9C	; 156
    227e:	bd 4f       	sbci	r27, 0xFD	; 253
    2280:	0d 90       	ld	r0, X+
    2282:	bc 91       	ld	r27, X
    2284:	a0 2d       	mov	r26, r0
    2286:	ab 2b       	or	r26, r27
    2288:	c9 f0       	breq	.+50     	; 0x22bc <__stack+0xbd>
    228a:	de 01       	movw	r26, r28
    228c:	aa 0f       	add	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	aa 0f       	add	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	a5 57       	subi	r26, 0x75	; 117
    2296:	bd 4f       	sbci	r27, 0xFD	; 253
    2298:	0d 90       	ld	r0, X+
    229a:	bc 91       	ld	r27, X
    229c:	a0 2d       	mov	r26, r0
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	b1 f0       	breq	.+44     	; 0x22ce <__stack+0xcf>
    22a2:	de 01       	movw	r26, r28
    22a4:	aa 0f       	add	r26, r26
    22a6:	bb 1f       	adc	r27, r27
    22a8:	aa 0f       	add	r26, r26
    22aa:	bb 1f       	adc	r27, r27
    22ac:	a5 57       	subi	r26, 0x75	; 117
    22ae:	bd 4f       	sbci	r27, 0xFD	; 253
    22b0:	12 96       	adiw	r26, 0x02	; 2
    22b2:	0d 90       	ld	r0, X+
    22b4:	bc 91       	ld	r27, X
    22b6:	a0 2d       	mov	r26, r0
    22b8:	11 96       	adiw	r26, 0x01	; 1
    22ba:	49 f0       	breq	.+18     	; 0x22ce <__stack+0xcf>
		{
			if(a1== 0 || a1==3)
    22bc:	20 97       	sbiw	r28, 0x00	; 0
    22be:	19 f0       	breq	.+6      	; 0x22c6 <__stack+0xc7>
    22c0:	23 97       	sbiw	r28, 0x03	; 3
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <__stack+0xc7>
    22c4:	28 c1       	rjmp	.+592    	; 0x2516 <__stack+0x317>
				sortDrop(1,t1);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	8c dd       	rcall	.-1256   	; 0x1de4 <sortDrop>
    22cc:	24 c1       	rjmp	.+584    	; 0x2516 <__stack+0x317>
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    22ce:	2f 3f       	cpi	r18, 0xFF	; 255
    22d0:	af ef       	ldi	r26, 0xFF	; 255
    22d2:	3a 07       	cpc	r19, r26
    22d4:	c1 f1       	breq	.+112    	; 0x2346 <__stack+0x147>
    22d6:	de 01       	movw	r26, r28
    22d8:	aa 0f       	add	r26, r26
    22da:	bb 1f       	adc	r27, r27
    22dc:	aa 0f       	add	r26, r26
    22de:	bb 1f       	adc	r27, r27
    22e0:	a5 57       	subi	r26, 0x75	; 117
    22e2:	bd 4f       	sbci	r27, 0xFD	; 253
    22e4:	0d 90       	ld	r0, X+
    22e6:	bc 91       	ld	r27, X
    22e8:	a0 2d       	mov	r26, r0
    22ea:	11 96       	adiw	r26, 0x01	; 1
    22ec:	51 f0       	breq	.+20     	; 0x2302 <__stack+0x103>
    22ee:	cc 0f       	add	r28, r28
    22f0:	dd 1f       	adc	r29, r29
    22f2:	cc 0f       	add	r28, r28
    22f4:	dd 1f       	adc	r29, r29
    22f6:	c5 57       	subi	r28, 0x75	; 117
    22f8:	dd 4f       	sbci	r29, 0xFD	; 253
    22fa:	aa 81       	ldd	r26, Y+2	; 0x02
    22fc:	bb 81       	ldd	r27, Y+3	; 0x03
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	11 f5       	brne	.+68     	; 0x2346 <__stack+0x147>
		{
			if (arm[1] == -1)
    2302:	31 96       	adiw	r30, 0x01	; 1
    2304:	09 f0       	breq	.+2      	; 0x2308 <__stack+0x109>
    2306:	07 c1       	rjmp	.+526    	; 0x2516 <__stack+0x317>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2308:	9b 01       	movw	r18, r22
    230a:	22 0f       	add	r18, r18
    230c:	33 1f       	adc	r19, r19
    230e:	f9 01       	movw	r30, r18
    2310:	ed 57       	subi	r30, 0x7D	; 125
    2312:	fd 4f       	sbci	r31, 0xFD	; 253
    2314:	40 81       	ld	r20, Z
    2316:	51 81       	ldd	r21, Z+1	; 0x01
    2318:	f9 01       	movw	r30, r18
    231a:	e3 56       	subi	r30, 0x63	; 99
    231c:	fd 4f       	sbci	r31, 0xFD	; 253
    231e:	20 81       	ld	r18, Z
    2320:	31 81       	ldd	r19, Z+1	; 0x01
    2322:	42 17       	cp	r20, r18
    2324:	53 07       	cpc	r21, r19
    2326:	59 f0       	breq	.+22     	; 0x233e <__stack+0x13f>
    2328:	fc 01       	movw	r30, r24
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e3 56       	subi	r30, 0x63	; 99
    2330:	fd 4f       	sbci	r31, 0xFD	; 253
    2332:	80 81       	ld	r24, Z
    2334:	91 81       	ldd	r25, Z+1	; 0x01
    2336:	48 17       	cp	r20, r24
    2338:	59 07       	cpc	r21, r25
    233a:	09 f0       	breq	.+2      	; 0x233e <__stack+0x13f>
    233c:	ec c0       	rjmp	.+472    	; 0x2516 <__stack+0x317>
					pickSort(1, t1);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	53 da       	rcall	.-2906   	; 0x17ea <pickSort>
    2344:	e8 c0       	rjmp	.+464    	; 0x2516 <__stack+0x317>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    2346:	ef 3f       	cpi	r30, 0xFF	; 255
    2348:	af ef       	ldi	r26, 0xFF	; 255
    234a:	fa 07       	cpc	r31, r26
    234c:	09 f4       	brne	.+2      	; 0x2350 <__stack+0x151>
    234e:	51 c0       	rjmp	.+162    	; 0x23f2 <__stack+0x1f3>
    2350:	da 01       	movw	r26, r20
    2352:	aa 0f       	add	r26, r26
    2354:	bb 1f       	adc	r27, r27
    2356:	aa 0f       	add	r26, r26
    2358:	bb 1f       	adc	r27, r27
    235a:	a5 57       	subi	r26, 0x75	; 117
    235c:	bd 4f       	sbci	r27, 0xFD	; 253
    235e:	0d 90       	ld	r0, X+
    2360:	bc 91       	ld	r27, X
    2362:	a0 2d       	mov	r26, r0
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	09 f4       	brne	.+2      	; 0x236a <__stack+0x16b>
    2368:	0a c1       	rjmp	.+532    	; 0x257e <__stack+0x37f>
    236a:	da 01       	movw	r26, r20
    236c:	aa 0f       	add	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	aa 0f       	add	r26, r26
    2372:	bb 1f       	adc	r27, r27
    2374:	a5 57       	subi	r26, 0x75	; 117
    2376:	bd 4f       	sbci	r27, 0xFD	; 253
    2378:	12 96       	adiw	r26, 0x02	; 2
    237a:	0d 90       	ld	r0, X+
    237c:	bc 91       	ld	r27, X
    237e:	a0 2d       	mov	r26, r0
    2380:	11 96       	adiw	r26, 0x01	; 1
    2382:	b9 f5       	brne	.+110    	; 0x23f2 <__stack+0x1f3>
    2384:	ea c0       	rjmp	.+468    	; 0x255a <__stack+0x35b>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    2386:	2f 3f       	cpi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	09 f0       	breq	.+2      	; 0x238e <__stack+0x18f>
    238c:	c4 c0       	rjmp	.+392    	; 0x2516 <__stack+0x317>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    238e:	9b 01       	movw	r18, r22
    2390:	22 0f       	add	r18, r18
    2392:	33 1f       	adc	r19, r19
    2394:	f9 01       	movw	r30, r18
    2396:	ed 57       	subi	r30, 0x7D	; 125
    2398:	fd 4f       	sbci	r31, 0xFD	; 253
    239a:	40 81       	ld	r20, Z
    239c:	51 81       	ldd	r21, Z+1	; 0x01
    239e:	f9 01       	movw	r30, r18
    23a0:	e3 56       	subi	r30, 0x63	; 99
    23a2:	fd 4f       	sbci	r31, 0xFD	; 253
    23a4:	20 81       	ld	r18, Z
    23a6:	31 81       	ldd	r19, Z+1	; 0x01
    23a8:	42 17       	cp	r20, r18
    23aa:	53 07       	cpc	r21, r19
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <__stack+0x1b1>
    23ae:	b3 c0       	rjmp	.+358    	; 0x2516 <__stack+0x317>
    23b0:	fc 01       	movw	r30, r24
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	e3 56       	subi	r30, 0x63	; 99
    23b8:	fd 4f       	sbci	r31, 0xFD	; 253
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	48 17       	cp	r20, r24
    23c0:	59 07       	cpc	r21, r25
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__stack+0x1c7>
    23c4:	a8 c0       	rjmp	.+336    	; 0x2516 <__stack+0x317>
						pickSort(1, t1);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0f da       	rcall	.-3042   	; 0x17ea <pickSort>
    23cc:	a4 c0       	rjmp	.+328    	; 0x2516 <__stack+0x317>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    23ce:	fb 01       	movw	r30, r22
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	ed 57       	subi	r30, 0x7D	; 125
    23d6:	fd 4f       	sbci	r31, 0xFD	; 253
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	09 f0       	breq	.+2      	; 0x23e2 <__stack+0x1e3>
    23e0:	9a c0       	rjmp	.+308    	; 0x2516 <__stack+0x317>
    23e2:	2f 3f       	cpi	r18, 0xFF	; 255
    23e4:	3f 4f       	sbci	r19, 0xFF	; 255
    23e6:	09 f4       	brne	.+2      	; 0x23ea <__stack+0x1eb>
    23e8:	96 c0       	rjmp	.+300    	; 0x2516 <__stack+0x317>
				sortDrop(1, t1);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	fa dc       	rcall	.-1548   	; 0x1de4 <sortDrop>
    23f0:	92 c0       	rjmp	.+292    	; 0x2516 <__stack+0x317>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    23f2:	2f 3f       	cpi	r18, 0xFF	; 255
    23f4:	1f ef       	ldi	r17, 0xFF	; 255
    23f6:	31 07       	cpc	r19, r17
    23f8:	a1 f0       	breq	.+40     	; 0x2422 <__stack+0x223>
    23fa:	db 01       	movw	r26, r22
    23fc:	aa 0f       	add	r26, r26
    23fe:	bb 1f       	adc	r27, r27
    2400:	ad 57       	subi	r26, 0x7D	; 125
    2402:	bd 4f       	sbci	r27, 0xFD	; 253
    2404:	8d 91       	ld	r24, X+
    2406:	9c 91       	ld	r25, X
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	31 f4       	brne	.+12     	; 0x2418 <__stack+0x219>
    240c:	31 96       	adiw	r30, 0x01	; 1
    240e:	21 f0       	breq	.+8      	; 0x2418 <__stack+0x219>
			sortDrop(1, t1);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	e7 dc       	rcall	.-1586   	; 0x1de4 <sortDrop>
    2416:	7f c0       	rjmp	.+254    	; 0x2516 <__stack+0x317>
		else if (arm[0] != -1)
			ct = arm[0];
    2418:	30 93 88 02 	sts	0x0288, r19
    241c:	20 93 87 02 	sts	0x0287, r18
    2420:	7a c0       	rjmp	.+244    	; 0x2516 <__stack+0x317>
		else ct = arm[1];
    2422:	f0 93 88 02 	sts	0x0288, r31
    2426:	e0 93 87 02 	sts	0x0287, r30
    242a:	75 c0       	rjmp	.+234    	; 0x2516 <__stack+0x317>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    242c:	a8 01       	movw	r20, r16
    242e:	44 0f       	add	r20, r20
    2430:	55 1f       	adc	r21, r21
    2432:	fa 01       	movw	r30, r20
    2434:	ed 57       	subi	r30, 0x7D	; 125
    2436:	fd 4f       	sbci	r31, 0xFD	; 253
    2438:	20 81       	ld	r18, Z
    243a:	31 81       	ldd	r19, Z+1	; 0x01
    243c:	fa 01       	movw	r30, r20
    243e:	e3 56       	subi	r30, 0x63	; 99
    2440:	fd 4f       	sbci	r31, 0xFD	; 253
    2442:	40 81       	ld	r20, Z
    2444:	51 81       	ldd	r21, Z+1	; 0x01
    2446:	24 17       	cp	r18, r20
    2448:	35 07       	cpc	r19, r21
    244a:	51 f0       	breq	.+20     	; 0x2460 <__stack+0x261>
    244c:	fc 01       	movw	r30, r24
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	e3 56       	subi	r30, 0x63	; 99
    2454:	fd 4f       	sbci	r31, 0xFD	; 253
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	26 17       	cp	r18, r22
    245c:	37 07       	cpc	r19, r23
    245e:	81 f4       	brne	.+32     	; 0x2480 <__stack+0x281>
    2460:	2f 3f       	cpi	r18, 0xFF	; 255
    2462:	af ef       	ldi	r26, 0xFF	; 255
    2464:	3a 07       	cpc	r19, r26
    2466:	31 f1       	breq	.+76     	; 0x24b4 <__stack+0x2b5>
			ct = indicator[sort[t1]];
    2468:	f9 01       	movw	r30, r18
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	eb 55       	subi	r30, 0x5B	; 91
    2470:	fd 4f       	sbci	r31, 0xFD	; 253
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	90 93 88 02 	sts	0x0288, r25
    247a:	80 93 87 02 	sts	0x0287, r24
    247e:	4b c0       	rjmp	.+150    	; 0x2516 <__stack+0x317>
		else if (sort[t1] != -1)
    2480:	2f 3f       	cpi	r18, 0xFF	; 255
    2482:	3f 4f       	sbci	r19, 0xFF	; 255
    2484:	b9 f0       	breq	.+46     	; 0x24b4 <__stack+0x2b5>
		{
			pickSort(0, t1);
    2486:	b8 01       	movw	r22, r16
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	ae d9       	rcall	.-3236   	; 0x17ea <pickSort>
			ct = (t1 + 1) % 2 + 4;
    248e:	0f 5f       	subi	r16, 0xFF	; 255
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	01 70       	andi	r16, 0x01	; 1
    2494:	10 78       	andi	r17, 0x80	; 128
    2496:	11 23       	and	r17, r17
    2498:	34 f4       	brge	.+12     	; 0x24a6 <__stack+0x2a7>
    249a:	01 50       	subi	r16, 0x01	; 1
    249c:	11 09       	sbc	r17, r1
    249e:	0e 6f       	ori	r16, 0xFE	; 254
    24a0:	1f 6f       	ori	r17, 0xFF	; 255
    24a2:	0f 5f       	subi	r16, 0xFF	; 255
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	0c 5f       	subi	r16, 0xFC	; 252
    24a8:	1f 4f       	sbci	r17, 0xFF	; 255
    24aa:	10 93 88 02 	sts	0x0288, r17
    24ae:	00 93 87 02 	sts	0x0287, r16
    24b2:	31 c0       	rjmp	.+98     	; 0x2516 <__stack+0x317>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    24b4:	f8 01       	movw	r30, r16
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	ec 59       	subi	r30, 0x9C	; 156
    24bc:	fd 4f       	sbci	r31, 0xFD	; 253
    24be:	20 81       	ld	r18, Z
    24c0:	31 81       	ldd	r19, Z+1	; 0x01
    24c2:	21 30       	cpi	r18, 0x01	; 1
    24c4:	31 05       	cpc	r19, r1
    24c6:	19 f5       	brne	.+70     	; 0x250e <__stack+0x30f>
    24c8:	f8 01       	movw	r30, r16
    24ca:	ee 0f       	add	r30, r30
    24cc:	ff 1f       	adc	r31, r31
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	e5 57       	subi	r30, 0x75	; 117
    24d4:	fd 4f       	sbci	r31, 0xFD	; 253
    24d6:	20 81       	ld	r18, Z
    24d8:	31 81       	ldd	r19, Z+1	; 0x01
    24da:	42 17       	cp	r20, r18
    24dc:	53 07       	cpc	r21, r19
    24de:	19 f0       	breq	.+6      	; 0x24e6 <__stack+0x2e7>
    24e0:	2f 3f       	cpi	r18, 0xFF	; 255
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	a1 f4       	brne	.+40     	; 0x250e <__stack+0x30f>
    24e6:	f8 01       	movw	r30, r16
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	e5 57       	subi	r30, 0x75	; 117
    24f2:	fd 4f       	sbci	r31, 0xFD	; 253
    24f4:	22 81       	ldd	r18, Z+2	; 0x02
    24f6:	33 81       	ldd	r19, Z+3	; 0x03
    24f8:	42 17       	cp	r20, r18
    24fa:	53 07       	cpc	r21, r19
    24fc:	19 f0       	breq	.+6      	; 0x2504 <__stack+0x305>
    24fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2500:	3f 4f       	sbci	r19, 0xFF	; 255
    2502:	29 f4       	brne	.+10     	; 0x250e <__stack+0x30f>
			ct = t2;
    2504:	90 93 88 02 	sts	0x0288, r25
    2508:	80 93 87 02 	sts	0x0287, r24
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <__stack+0x317>
		else ct = t1;
    250e:	10 93 88 02 	sts	0x0288, r17
    2512:	00 93 87 02 	sts	0x0287, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2516:	80 91 87 02 	lds	r24, 0x0287
    251a:	90 91 88 02 	lds	r25, 0x0288
    251e:	02 96       	adiw	r24, 0x02	; 2
    2520:	83 70       	andi	r24, 0x03	; 3
    2522:	90 78       	andi	r25, 0x80	; 128
    2524:	99 23       	and	r25, r25
    2526:	24 f4       	brge	.+8      	; 0x2530 <__stack+0x331>
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	8c 6f       	ori	r24, 0xFC	; 252
    252c:	9f 6f       	ori	r25, 0xFF	; 255
    252e:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2530:	90 93 ae 02 	sts	0x02AE, r25
    2534:	80 93 ad 02 	sts	0x02AD, r24
    2538:	2e c0       	rjmp	.+92     	; 0x2596 <__stack+0x397>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    253a:	80 91 87 02 	lds	r24, 0x0287
    253e:	90 91 88 02 	lds	r25, 0x0288
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	62 e0       	ldi	r22, 0x02	; 2
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	5a d4       	rcall	.+2228   	; 0x2dfe <__divmodhi4>
    254a:	8c 01       	movw	r16, r24
    254c:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    254e:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    2550:	2f 3f       	cpi	r18, 0xFF	; 255
    2552:	af ef       	ldi	r26, 0xFF	; 255
    2554:	3a 07       	cpc	r19, r26
    2556:	c1 f4       	brne	.+48     	; 0x2588 <__stack+0x389>
    2558:	69 cf       	rjmp	.-302    	; 0x242c <__stack+0x22d>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    255a:	50 93 88 02 	sts	0x0288, r21
    255e:	40 93 87 02 	sts	0x0287, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    2562:	fa 01       	movw	r30, r20
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	e5 57       	subi	r30, 0x75	; 117
    256e:	fd 4f       	sbci	r31, 0xFD	; 253
    2570:	42 81       	ldd	r20, Z+2	; 0x02
    2572:	53 81       	ldd	r21, Z+3	; 0x03
    2574:	4f 3f       	cpi	r20, 0xFF	; 255
    2576:	5f 4f       	sbci	r21, 0xFF	; 255
    2578:	09 f0       	breq	.+2      	; 0x257c <__stack+0x37d>
    257a:	29 cf       	rjmp	.-430    	; 0x23ce <__stack+0x1cf>
    257c:	04 cf       	rjmp	.-504    	; 0x2386 <__stack+0x187>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    257e:	50 93 88 02 	sts	0x0288, r21
    2582:	40 93 87 02 	sts	0x0287, r20
    2586:	ff ce       	rjmp	.-514    	; 0x2386 <__stack+0x187>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    2588:	d0 93 88 02 	sts	0x0288, r29
    258c:	c0 93 87 02 	sts	0x0287, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    2590:	4e ef       	ldi	r20, 0xFE	; 254
    2592:	5f ef       	ldi	r21, 0xFF	; 255
    2594:	9c ce       	rjmp	.-712    	; 0x22ce <__stack+0xcf>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	08 95       	ret

000025a0 <sortCheck>:
void sortCheck()
{
    25a0:	8f 92       	push	r8
    25a2:	9f 92       	push	r9
    25a4:	af 92       	push	r10
    25a6:	bf 92       	push	r11
    25a8:	cf 92       	push	r12
    25aa:	df 92       	push	r13
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    25b8:	40 91 87 02 	lds	r20, 0x0287
    25bc:	50 91 88 02 	lds	r21, 0x0288
    25c0:	42 30       	cpi	r20, 0x02	; 2
    25c2:	51 05       	cpc	r21, r1
    25c4:	30 f4       	brcc	.+12     	; 0x25d2 <sortCheck+0x32>
    25c6:	80 91 4e 02 	lds	r24, 0x024E
    25ca:	90 91 4f 02 	lds	r25, 0x024F
    25ce:	02 97       	sbiw	r24, 0x02	; 2
    25d0:	79 f0       	breq	.+30     	; 0x25f0 <sortCheck+0x50>
    25d2:	ca 01       	movw	r24, r20
    25d4:	02 97       	sbiw	r24, 0x02	; 2
    25d6:	02 97       	sbiw	r24, 0x02	; 2
    25d8:	80 f4       	brcc	.+32     	; 0x25fa <sortCheck+0x5a>
    25da:	80 91 4e 02 	lds	r24, 0x024E
    25de:	90 91 4f 02 	lds	r25, 0x024F
    25e2:	89 2b       	or	r24, r25
    25e4:	79 f0       	breq	.+30     	; 0x2604 <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    25e6:	01 e0       	ldi	r16, 0x01	; 1
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	c0 e0       	ldi	r28, 0x00	; 0
    25ec:	d0 e0       	ldi	r29, 0x00	; 0
    25ee:	0e c0       	rjmp	.+28     	; 0x260c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    25f0:	00 e0       	ldi	r16, 0x00	; 0
    25f2:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    25f4:	c1 e0       	ldi	r28, 0x01	; 1
    25f6:	d0 e0       	ldi	r29, 0x00	; 0
    25f8:	09 c0       	rjmp	.+18     	; 0x260c <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    25fa:	01 e0       	ldi	r16, 0x01	; 1
    25fc:	10 e0       	ldi	r17, 0x00	; 0
    25fe:	c0 e0       	ldi	r28, 0x00	; 0
    2600:	d0 e0       	ldi	r29, 0x00	; 0
    2602:	04 c0       	rjmp	.+8      	; 0x260c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2604:	00 e0       	ldi	r16, 0x00	; 0
    2606:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2608:	c1 e0       	ldi	r28, 0x01	; 1
    260a:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    260c:	9a 01       	movw	r18, r20
    260e:	21 70       	andi	r18, 0x01	; 1
    2610:	30 78       	andi	r19, 0x80	; 128
    2612:	33 23       	and	r19, r19
    2614:	34 f4       	brge	.+12     	; 0x2622 <sortCheck+0x82>
    2616:	21 50       	subi	r18, 0x01	; 1
    2618:	31 09       	sbc	r19, r1
    261a:	2e 6f       	ori	r18, 0xFE	; 254
    261c:	3f 6f       	ori	r19, 0xFF	; 255
    261e:	2f 5f       	subi	r18, 0xFF	; 255
    2620:	3f 4f       	sbci	r19, 0xFF	; 255
    2622:	b2 2e       	mov	r11, r18
    2624:	a3 2e       	mov	r10, r19
    2626:	f9 01       	movw	r30, r18
    2628:	ee 0f       	add	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	ed 57       	subi	r30, 0x7D	; 125
    262e:	fd 4f       	sbci	r31, 0xFD	; 253
    2630:	20 81       	ld	r18, Z
    2632:	31 81       	ldd	r19, Z+1	; 0x01
    2634:	fa 01       	movw	r30, r20
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	e3 56       	subi	r30, 0x63	; 99
    263c:	fd 4f       	sbci	r31, 0xFD	; 253
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	28 17       	cp	r18, r24
    2644:	39 07       	cpc	r19, r25
    2646:	79 f0       	breq	.+30     	; 0x2666 <sortCheck+0xc6>
    2648:	80 91 ad 02 	lds	r24, 0x02AD
    264c:	90 91 ae 02 	lds	r25, 0x02AE
    2650:	fc 01       	movw	r30, r24
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	e3 56       	subi	r30, 0x63	; 99
    2658:	fd 4f       	sbci	r31, 0xFD	; 253
    265a:	40 81       	ld	r20, Z
    265c:	51 81       	ldd	r21, Z+1	; 0x01
    265e:	24 17       	cp	r18, r20
    2660:	35 07       	cpc	r19, r21
    2662:	09 f0       	breq	.+2      	; 0x2666 <sortCheck+0xc6>
    2664:	a6 c0       	rjmp	.+332    	; 0x27b2 <sortCheck+0x212>
	{
		if (armCount>0)
    2666:	80 91 02 02 	lds	r24, 0x0202
    266a:	90 91 03 02 	lds	r25, 0x0203
    266e:	18 16       	cp	r1, r24
    2670:	19 06       	cpc	r1, r25
    2672:	0c f0       	brlt	.+2      	; 0x2676 <sortCheck+0xd6>
    2674:	95 c0       	rjmp	.+298    	; 0x27a0 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    2676:	f9 01       	movw	r30, r18
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	eb 55       	subi	r30, 0x5B	; 91
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	70 93 88 02 	sts	0x0288, r23
    2688:	60 93 87 02 	sts	0x0287, r22
			if (arm[arm0] == -1)
    268c:	fe 01       	movw	r30, r28
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	ef 54       	subi	r30, 0x4F	; 79
    2694:	fd 4f       	sbci	r31, 0xFD	; 253
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	69 f4       	brne	.+26     	; 0x26b8 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    269e:	61 70       	andi	r22, 0x01	; 1
    26a0:	70 78       	andi	r23, 0x80	; 128
    26a2:	77 23       	and	r23, r23
    26a4:	34 f4       	brge	.+12     	; 0x26b2 <sortCheck+0x112>
    26a6:	61 50       	subi	r22, 0x01	; 1
    26a8:	71 09       	sbc	r23, r1
    26aa:	6e 6f       	ori	r22, 0xFE	; 254
    26ac:	7f 6f       	ori	r23, 0xFF	; 255
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	ce 01       	movw	r24, r28
    26b4:	9a d8       	rcall	.-3788   	; 0x17ea <pickSort>
    26b6:	15 c0       	rjmp	.+42     	; 0x26e2 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    26b8:	f8 01       	movw	r30, r16
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ef 54       	subi	r30, 0x4F	; 79
    26c0:	fd 4f       	sbci	r31, 0xFD	; 253
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	61 f4       	brne	.+24     	; 0x26e2 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    26ca:	61 70       	andi	r22, 0x01	; 1
    26cc:	70 78       	andi	r23, 0x80	; 128
    26ce:	77 23       	and	r23, r23
    26d0:	34 f4       	brge	.+12     	; 0x26de <sortCheck+0x13e>
    26d2:	61 50       	subi	r22, 0x01	; 1
    26d4:	71 09       	sbc	r23, r1
    26d6:	6e 6f       	ori	r22, 0xFE	; 254
    26d8:	7f 6f       	ori	r23, 0xFF	; 255
    26da:	6f 5f       	subi	r22, 0xFF	; 255
    26dc:	7f 4f       	sbci	r23, 0xFF	; 255
    26de:	c8 01       	movw	r24, r16
    26e0:	84 d8       	rcall	.-3832   	; 0x17ea <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    26e2:	80 91 02 02 	lds	r24, 0x0202
    26e6:	90 91 03 02 	lds	r25, 0x0203
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <sortCheck+0x150>
    26ee:	6d c1       	rjmp	.+730    	; 0x29ca <sortCheck+0x42a>
    26f0:	80 91 87 02 	lds	r24, 0x0287
    26f4:	90 91 88 02 	lds	r25, 0x0288
    26f8:	fc 01       	movw	r30, r24
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	e5 57       	subi	r30, 0x75	; 117
    2704:	fd 4f       	sbci	r31, 0xFD	; 253
    2706:	20 81       	ld	r18, Z
    2708:	31 81       	ldd	r19, Z+1	; 0x01
    270a:	2f 3f       	cpi	r18, 0xFF	; 255
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	09 f4       	brne	.+2      	; 0x2712 <sortCheck+0x172>
    2710:	5c c1       	rjmp	.+696    	; 0x29ca <sortCheck+0x42a>
    2712:	fc 01       	movw	r30, r24
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	e5 57       	subi	r30, 0x75	; 117
    271e:	fd 4f       	sbci	r31, 0xFD	; 253
    2720:	22 81       	ldd	r18, Z+2	; 0x02
    2722:	33 81       	ldd	r19, Z+3	; 0x03
    2724:	2f 3f       	cpi	r18, 0xFF	; 255
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	09 f4       	brne	.+2      	; 0x272c <sortCheck+0x18c>
    272a:	4f c1       	rjmp	.+670    	; 0x29ca <sortCheck+0x42a>
    272c:	9c 01       	movw	r18, r24
    272e:	21 70       	andi	r18, 0x01	; 1
    2730:	30 78       	andi	r19, 0x80	; 128
    2732:	33 23       	and	r19, r19
    2734:	34 f4       	brge	.+12     	; 0x2742 <sortCheck+0x1a2>
    2736:	21 50       	subi	r18, 0x01	; 1
    2738:	31 09       	sbc	r19, r1
    273a:	2e 6f       	ori	r18, 0xFE	; 254
    273c:	3f 6f       	ori	r19, 0xFF	; 255
    273e:	2f 5f       	subi	r18, 0xFF	; 255
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	62 2f       	mov	r22, r18
    2744:	73 2f       	mov	r23, r19
    2746:	f9 01       	movw	r30, r18
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	ed 57       	subi	r30, 0x7D	; 125
    274e:	fd 4f       	sbci	r31, 0xFD	; 253
    2750:	20 81       	ld	r18, Z
    2752:	31 81       	ldd	r19, Z+1	; 0x01
    2754:	2f 3f       	cpi	r18, 0xFF	; 255
    2756:	3f 4f       	sbci	r19, 0xFF	; 255
    2758:	09 f0       	breq	.+2      	; 0x275c <sortCheck+0x1bc>
    275a:	37 c1       	rjmp	.+622    	; 0x29ca <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    275c:	fc 01       	movw	r30, r24
    275e:	ee 0f       	add	r30, r30
    2760:	ff 1f       	adc	r31, r31
    2762:	e3 56       	subi	r30, 0x63	; 99
    2764:	fd 4f       	sbci	r31, 0xFD	; 253
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	fe 01       	movw	r30, r28
    276c:	ee 0f       	add	r30, r30
    276e:	ff 1f       	adc	r31, r31
    2770:	ef 54       	subi	r30, 0x4F	; 79
    2772:	fd 4f       	sbci	r31, 0xFD	; 253
    2774:	20 81       	ld	r18, Z
    2776:	31 81       	ldd	r19, Z+1	; 0x01
    2778:	28 17       	cp	r18, r24
    277a:	39 07       	cpc	r19, r25
    277c:	19 f4       	brne	.+6      	; 0x2784 <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    277e:	c8 01       	movw	r24, r16
    2780:	31 db       	rcall	.-2462   	; 0x1de4 <sortDrop>
    2782:	23 c1       	rjmp	.+582    	; 0x29ca <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    2784:	f8 01       	movw	r30, r16
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	ef 54       	subi	r30, 0x4F	; 79
    278c:	fd 4f       	sbci	r31, 0xFD	; 253
    278e:	20 81       	ld	r18, Z
    2790:	31 81       	ldd	r19, Z+1	; 0x01
    2792:	82 17       	cp	r24, r18
    2794:	93 07       	cpc	r25, r19
    2796:	09 f0       	breq	.+2      	; 0x279a <sortCheck+0x1fa>
    2798:	18 c1       	rjmp	.+560    	; 0x29ca <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    279a:	ce 01       	movw	r24, r28
    279c:	23 db       	rcall	.-2490   	; 0x1de4 <sortDrop>
    279e:	15 c1       	rjmp	.+554    	; 0x29ca <sortCheck+0x42a>
			}
		}
		else ct = adj;
    27a0:	80 91 ad 02 	lds	r24, 0x02AD
    27a4:	90 91 ae 02 	lds	r25, 0x02AE
    27a8:	90 93 88 02 	sts	0x0288, r25
    27ac:	80 93 87 02 	sts	0x0287, r24
    27b0:	0c c1       	rjmp	.+536    	; 0x29ca <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    27b2:	fe 01       	movw	r30, r28
    27b4:	ee 0f       	add	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	ef 54       	subi	r30, 0x4F	; 79
    27ba:	fd 4f       	sbci	r31, 0xFD	; 253
    27bc:	01 90       	ld	r0, Z+
    27be:	f0 81       	ld	r31, Z
    27c0:	e0 2d       	mov	r30, r0
    27c2:	4e 17       	cp	r20, r30
    27c4:	5f 07       	cpc	r21, r31
    27c6:	09 f4       	brne	.+2      	; 0x27ca <sortCheck+0x22a>
    27c8:	8f c0       	rjmp	.+286    	; 0x28e8 <sortCheck+0x348>
    27ca:	d8 01       	movw	r26, r16
    27cc:	aa 0f       	add	r26, r26
    27ce:	bb 1f       	adc	r27, r27
    27d0:	af 54       	subi	r26, 0x4F	; 79
    27d2:	bd 4f       	sbci	r27, 0xFD	; 253
    27d4:	8d 90       	ld	r8, X+
    27d6:	9c 90       	ld	r9, X
    27d8:	48 15       	cp	r20, r8
    27da:	59 05       	cpc	r21, r9
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <sortCheck+0x240>
    27de:	84 c0       	rjmp	.+264    	; 0x28e8 <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    27e0:	e0 90 02 02 	lds	r14, 0x0202
    27e4:	f0 90 03 02 	lds	r15, 0x0203
    27e8:	e1 14       	cp	r14, r1
    27ea:	f1 04       	cpc	r15, r1
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <sortCheck+0x250>
    27ee:	4e c0       	rjmp	.+156    	; 0x288c <sortCheck+0x2ec>
    27f0:	b1 e0       	ldi	r27, 0x01	; 1
    27f2:	eb 16       	cp	r14, r27
    27f4:	f1 04       	cpc	r15, r1
    27f6:	29 f4       	brne	.+10     	; 0x2802 <sortCheck+0x262>
    27f8:	2f 3f       	cpi	r18, 0xFF	; 255
    27fa:	6f ef       	ldi	r22, 0xFF	; 255
    27fc:	36 07       	cpc	r19, r22
    27fe:	b1 f5       	brne	.+108    	; 0x286c <sortCheck+0x2cc>
    2800:	09 c0       	rjmp	.+18     	; 0x2814 <sortCheck+0x274>
    2802:	67 01       	movw	r12, r14
    2804:	71 e0       	ldi	r23, 0x01	; 1
    2806:	c7 1a       	sub	r12, r23
    2808:	d1 08       	sbc	r13, r1
    280a:	a2 e0       	ldi	r26, 0x02	; 2
    280c:	ca 16       	cp	r12, r26
    280e:	d1 04       	cpc	r13, r1
    2810:	08 f0       	brcs	.+2      	; 0x2814 <sortCheck+0x274>
    2812:	65 c0       	rjmp	.+202    	; 0x28de <sortCheck+0x33e>
    2814:	6c 01       	movw	r12, r24
    2816:	cc 0c       	add	r12, r12
    2818:	dd 1c       	adc	r13, r13
    281a:	cc 0c       	add	r12, r12
    281c:	dd 1c       	adc	r13, r13
    281e:	b6 01       	movw	r22, r12
    2820:	65 57       	subi	r22, 0x75	; 117
    2822:	7d 4f       	sbci	r23, 0xFD	; 253
    2824:	db 01       	movw	r26, r22
    2826:	cd 90       	ld	r12, X+
    2828:	dc 90       	ld	r13, X
    282a:	4c 15       	cp	r20, r12
    282c:	5d 05       	cpc	r21, r13
    282e:	21 f0       	breq	.+8      	; 0x2838 <sortCheck+0x298>
    2830:	cd 20       	and	r12, r13
    2832:	c0 94       	com	r12
    2834:	09 f0       	breq	.+2      	; 0x2838 <sortCheck+0x298>
    2836:	53 c0       	rjmp	.+166    	; 0x28de <sortCheck+0x33e>
    2838:	6c 01       	movw	r12, r24
    283a:	cc 0c       	add	r12, r12
    283c:	dd 1c       	adc	r13, r13
    283e:	cc 0c       	add	r12, r12
    2840:	dd 1c       	adc	r13, r13
    2842:	b6 01       	movw	r22, r12
    2844:	65 57       	subi	r22, 0x75	; 117
    2846:	7d 4f       	sbci	r23, 0xFD	; 253
    2848:	db 01       	movw	r26, r22
    284a:	12 96       	adiw	r26, 0x02	; 2
    284c:	cd 90       	ld	r12, X+
    284e:	dc 90       	ld	r13, X
    2850:	13 97       	sbiw	r26, 0x03	; 3
    2852:	4c 15       	cp	r20, r12
    2854:	5d 05       	cpc	r21, r13
    2856:	21 f0       	breq	.+8      	; 0x2860 <sortCheck+0x2c0>
    2858:	cd 20       	and	r12, r13
    285a:	c0 94       	com	r12
    285c:	09 f0       	breq	.+2      	; 0x2860 <sortCheck+0x2c0>
    285e:	3f c0       	rjmp	.+126    	; 0x28de <sortCheck+0x33e>
		{
			if (armCount>0)
    2860:	1e 14       	cp	r1, r14
    2862:	1f 04       	cpc	r1, r15
    2864:	9c f4       	brge	.+38     	; 0x288c <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    2866:	2f 3f       	cpi	r18, 0xFF	; 255
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	81 f0       	breq	.+32     	; 0x288c <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    286c:	31 96       	adiw	r30, 0x01	; 1
    286e:	31 f4       	brne	.+12     	; 0x287c <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    2870:	6b 2d       	mov	r22, r11
    2872:	7a 2d       	mov	r23, r10
    2874:	ce 01       	movw	r24, r28
    2876:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <pickSort>
    287a:	08 c0       	rjmp	.+16     	; 0x288c <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    287c:	89 20       	and	r8, r9
    287e:	80 94       	com	r8
    2880:	29 f4       	brne	.+10     	; 0x288c <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    2882:	6b 2d       	mov	r22, r11
    2884:	7a 2d       	mov	r23, r10
    2886:	c8 01       	movw	r24, r16
    2888:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    288c:	80 91 87 02 	lds	r24, 0x0287
    2890:	90 91 88 02 	lds	r25, 0x0288
    2894:	bc 01       	movw	r22, r24
    2896:	6f 5f       	subi	r22, 0xFF	; 255
    2898:	7f 4f       	sbci	r23, 0xFF	; 255
    289a:	61 70       	andi	r22, 0x01	; 1
    289c:	70 78       	andi	r23, 0x80	; 128
    289e:	77 23       	and	r23, r23
    28a0:	34 f4       	brge	.+12     	; 0x28ae <sortCheck+0x30e>
    28a2:	61 50       	subi	r22, 0x01	; 1
    28a4:	71 09       	sbc	r23, r1
    28a6:	6e 6f       	ori	r22, 0xFE	; 254
    28a8:	7f 6f       	ori	r23, 0xFF	; 255
    28aa:	6f 5f       	subi	r22, 0xFF	; 255
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	6c 5f       	subi	r22, 0xFC	; 252
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	81 70       	andi	r24, 0x01	; 1
    28b4:	90 78       	andi	r25, 0x80	; 128
    28b6:	99 23       	and	r25, r25
    28b8:	24 f4       	brge	.+8      	; 0x28c2 <sortCheck+0x322>
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	8e 6f       	ori	r24, 0xFE	; 254
    28be:	9f 6f       	ori	r25, 0xFF	; 255
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	04 96       	adiw	r24, 0x04	; 4
    28c4:	0e 94 82 07 	call	0xf04	; 0xf04 <traverseToSort>
			newSort();
    28c8:	9a dc       	rcall	.-1740   	; 0x21fe <newSort>
			if (ct == 4 || ct == 5)
    28ca:	80 91 87 02 	lds	r24, 0x0287
    28ce:	90 91 88 02 	lds	r25, 0x0288
    28d2:	04 97       	sbiw	r24, 0x04	; 4
    28d4:	02 97       	sbiw	r24, 0x02	; 2
    28d6:	08 f0       	brcs	.+2      	; 0x28da <sortCheck+0x33a>
    28d8:	89 c0       	rjmp	.+274    	; 0x29ec <sortCheck+0x44c>
				newSort();
    28da:	91 dc       	rcall	.-1758   	; 0x21fe <newSort>
    28dc:	87 c0       	rjmp	.+270    	; 0x29ec <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    28de:	90 93 88 02 	sts	0x0288, r25
    28e2:	80 93 87 02 	sts	0x0287, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    28e6:	71 c0       	rjmp	.+226    	; 0x29ca <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    28e8:	a0 91 02 02 	lds	r26, 0x0202
    28ec:	b0 91 03 02 	lds	r27, 0x0203
    28f0:	10 97       	sbiw	r26, 0x00	; 0
    28f2:	c1 f5       	brne	.+112    	; 0x2964 <sortCheck+0x3c4>
    28f4:	dc 01       	movw	r26, r24
    28f6:	aa 0f       	add	r26, r26
    28f8:	bb 1f       	adc	r27, r27
    28fa:	ac 59       	subi	r26, 0x9C	; 156
    28fc:	bd 4f       	sbci	r27, 0xFD	; 253
    28fe:	0d 90       	ld	r0, X+
    2900:	bc 91       	ld	r27, X
    2902:	a0 2d       	mov	r26, r0
    2904:	a1 30       	cpi	r26, 0x01	; 1
    2906:	b1 05       	cpc	r27, r1
    2908:	d9 f4       	brne	.+54     	; 0x2940 <sortCheck+0x3a0>
    290a:	dc 01       	movw	r26, r24
    290c:	aa 0f       	add	r26, r26
    290e:	bb 1f       	adc	r27, r27
    2910:	aa 0f       	add	r26, r26
    2912:	bb 1f       	adc	r27, r27
    2914:	a5 57       	subi	r26, 0x75	; 117
    2916:	bd 4f       	sbci	r27, 0xFD	; 253
    2918:	0d 90       	ld	r0, X+
    291a:	bc 91       	ld	r27, X
    291c:	a0 2d       	mov	r26, r0
    291e:	11 96       	adiw	r26, 0x01	; 1
    2920:	09 f4       	brne	.+2      	; 0x2924 <sortCheck+0x384>
    2922:	4b c0       	rjmp	.+150    	; 0x29ba <sortCheck+0x41a>
    2924:	dc 01       	movw	r26, r24
    2926:	aa 0f       	add	r26, r26
    2928:	bb 1f       	adc	r27, r27
    292a:	aa 0f       	add	r26, r26
    292c:	bb 1f       	adc	r27, r27
    292e:	a5 57       	subi	r26, 0x75	; 117
    2930:	bd 4f       	sbci	r27, 0xFD	; 253
    2932:	12 96       	adiw	r26, 0x02	; 2
    2934:	8d 91       	ld	r24, X+
    2936:	9c 91       	ld	r25, X
    2938:	13 97       	sbiw	r26, 0x03	; 3
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	19 f4       	brne	.+6      	; 0x2944 <sortCheck+0x3a4>
    293e:	3d c0       	rjmp	.+122    	; 0x29ba <sortCheck+0x41a>
    2940:	ab 2b       	or	r26, r27
    2942:	d9 f5       	brne	.+118    	; 0x29ba <sortCheck+0x41a>
    2944:	2f 3f       	cpi	r18, 0xFF	; 255
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	c1 f5       	brne	.+112    	; 0x29ba <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    294a:	4e 17       	cp	r20, r30
    294c:	5f 07       	cpc	r21, r31
    294e:	29 f4       	brne	.+10     	; 0x295a <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    2950:	6b 2d       	mov	r22, r11
    2952:	7a 2d       	mov	r23, r10
    2954:	c8 01       	movw	r24, r16
    2956:	46 da       	rcall	.-2932   	; 0x1de4 <sortDrop>
    2958:	30 c0       	rjmp	.+96     	; 0x29ba <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    295a:	6b 2d       	mov	r22, r11
    295c:	7a 2d       	mov	r23, r10
    295e:	ce 01       	movw	r24, r28
    2960:	41 da       	rcall	.-2942   	; 0x1de4 <sortDrop>
    2962:	2b c0       	rjmp	.+86     	; 0x29ba <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2964:	11 97       	sbiw	r26, 0x01	; 1
    2966:	49 f5       	brne	.+82     	; 0x29ba <sortCheck+0x41a>
    2968:	dc 01       	movw	r26, r24
    296a:	aa 0f       	add	r26, r26
    296c:	bb 1f       	adc	r27, r27
    296e:	aa 0f       	add	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	a5 57       	subi	r26, 0x75	; 117
    2974:	bd 4f       	sbci	r27, 0xFD	; 253
    2976:	4d 91       	ld	r20, X+
    2978:	5c 91       	ld	r21, X
    297a:	4f 3f       	cpi	r20, 0xFF	; 255
    297c:	5f 4f       	sbci	r21, 0xFF	; 255
    297e:	69 f0       	breq	.+26     	; 0x299a <sortCheck+0x3fa>
    2980:	dc 01       	movw	r26, r24
    2982:	aa 0f       	add	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	aa 0f       	add	r26, r26
    2988:	bb 1f       	adc	r27, r27
    298a:	a5 57       	subi	r26, 0x75	; 117
    298c:	bd 4f       	sbci	r27, 0xFD	; 253
    298e:	12 96       	adiw	r26, 0x02	; 2
    2990:	8d 91       	ld	r24, X+
    2992:	9c 91       	ld	r25, X
    2994:	13 97       	sbiw	r26, 0x03	; 3
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	81 f4       	brne	.+32     	; 0x29ba <sortCheck+0x41a>
    299a:	2f 3f       	cpi	r18, 0xFF	; 255
    299c:	3f 4f       	sbci	r19, 0xFF	; 255
    299e:	69 f0       	breq	.+26     	; 0x29ba <sortCheck+0x41a>
			if (arm[arm0] == -1)
    29a0:	31 96       	adiw	r30, 0x01	; 1
    29a2:	31 f4       	brne	.+12     	; 0x29b0 <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    29a4:	6b 2d       	mov	r22, r11
    29a6:	7a 2d       	mov	r23, r10
    29a8:	ce 01       	movw	r24, r28
    29aa:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <pickSort>
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    29b0:	6b 2d       	mov	r22, r11
    29b2:	7a 2d       	mov	r23, r10
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <pickSort>
			ct = adj;
    29ba:	80 91 ad 02 	lds	r24, 0x02AD
    29be:	90 91 ae 02 	lds	r25, 0x02AE
    29c2:	90 93 88 02 	sts	0x0288, r25
    29c6:	80 93 87 02 	sts	0x0287, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    29ca:	80 91 87 02 	lds	r24, 0x0287
    29ce:	90 91 88 02 	lds	r25, 0x0288
    29d2:	02 96       	adiw	r24, 0x02	; 2
    29d4:	83 70       	andi	r24, 0x03	; 3
    29d6:	90 78       	andi	r25, 0x80	; 128
    29d8:	99 23       	and	r25, r25
    29da:	24 f4       	brge	.+8      	; 0x29e4 <sortCheck+0x444>
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	8c 6f       	ori	r24, 0xFC	; 252
    29e0:	9f 6f       	ori	r25, 0xFF	; 255
    29e2:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    29e4:	90 93 ae 02 	sts	0x02AE, r25
    29e8:	80 93 ad 02 	sts	0x02AD, r24
}
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	ef 90       	pop	r14
    29f8:	df 90       	pop	r13
    29fa:	cf 90       	pop	r12
    29fc:	bf 90       	pop	r11
    29fe:	af 90       	pop	r10
    2a00:	9f 90       	pop	r9
    2a02:	8f 90       	pop	r8
    2a04:	08 95       	ret

00002a06 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2a06:	80 91 8b 02 	lds	r24, 0x028B
    2a0a:	90 91 8c 02 	lds	r25, 0x028C
    2a0e:	20 91 9d 02 	lds	r18, 0x029D
    2a12:	30 91 9e 02 	lds	r19, 0x029E
    2a16:	82 17       	cp	r24, r18
    2a18:	93 07       	cpc	r25, r19
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <predict+0x18>
    2a1c:	5f c0       	rjmp	.+190    	; 0x2adc <predict+0xd6>
    2a1e:	20 91 8d 02 	lds	r18, 0x028D
    2a22:	30 91 8e 02 	lds	r19, 0x028E
    2a26:	82 17       	cp	r24, r18
    2a28:	93 07       	cpc	r25, r19
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <predict+0x28>
    2a2c:	57 c0       	rjmp	.+174    	; 0x2adc <predict+0xd6>
    2a2e:	80 91 8f 02 	lds	r24, 0x028F
    2a32:	90 91 90 02 	lds	r25, 0x0290
    2a36:	20 91 9f 02 	lds	r18, 0x029F
    2a3a:	30 91 a0 02 	lds	r19, 0x02A0
    2a3e:	82 17       	cp	r24, r18
    2a40:	93 07       	cpc	r25, r19
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <predict+0x40>
    2a44:	4b c0       	rjmp	.+150    	; 0x2adc <predict+0xd6>
    2a46:	20 91 91 02 	lds	r18, 0x0291
    2a4a:	30 91 92 02 	lds	r19, 0x0292
    2a4e:	82 17       	cp	r24, r18
    2a50:	93 07       	cpc	r25, r19
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <predict+0x50>
    2a54:	43 c0       	rjmp	.+134    	; 0x2adc <predict+0xd6>
    2a56:	80 91 87 02 	lds	r24, 0x0287
    2a5a:	90 91 88 02 	lds	r25, 0x0288
    2a5e:	fc 01       	movw	r30, r24
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ee 0f       	add	r30, r30
    2a66:	ff 1f       	adc	r31, r31
    2a68:	e5 57       	subi	r30, 0x75	; 117
    2a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a6c:	20 81       	ld	r18, Z
    2a6e:	31 81       	ldd	r19, Z+1	; 0x01
    2a70:	fc 01       	movw	r30, r24
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	e3 56       	subi	r30, 0x63	; 99
    2a78:	fd 4f       	sbci	r31, 0xFD	; 253
    2a7a:	40 81       	ld	r20, Z
    2a7c:	51 81       	ldd	r21, Z+1	; 0x01
    2a7e:	24 17       	cp	r18, r20
    2a80:	35 07       	cpc	r19, r21
    2a82:	61 f5       	brne	.+88     	; 0x2adc <predict+0xd6>
    2a84:	fc 01       	movw	r30, r24
    2a86:	ee 0f       	add	r30, r30
    2a88:	ff 1f       	adc	r31, r31
    2a8a:	ee 0f       	add	r30, r30
    2a8c:	ff 1f       	adc	r31, r31
    2a8e:	e5 57       	subi	r30, 0x75	; 117
    2a90:	fd 4f       	sbci	r31, 0xFD	; 253
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	28 17       	cp	r18, r24
    2a98:	39 07       	cpc	r19, r25
    2a9a:	01 f5       	brne	.+64     	; 0x2adc <predict+0xd6>
    2a9c:	80 91 83 02 	lds	r24, 0x0283
    2aa0:	90 91 84 02 	lds	r25, 0x0284
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	d1 f4       	brne	.+52     	; 0x2adc <predict+0xd6>
    2aa8:	80 91 85 02 	lds	r24, 0x0285
    2aac:	90 91 86 02 	lds	r25, 0x0286
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	a1 f4       	brne	.+40     	; 0x2adc <predict+0xd6>
    2ab4:	80 91 b1 02 	lds	r24, 0x02B1
    2ab8:	90 91 b2 02 	lds	r25, 0x02B2
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	71 f4       	brne	.+28     	; 0x2adc <predict+0xd6>
    2ac0:	80 91 b3 02 	lds	r24, 0x02B3
    2ac4:	90 91 b4 02 	lds	r25, 0x02B4
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	41 f4       	brne	.+16     	; 0x2adc <predict+0xd6>
		sorted = total;
    2acc:	80 91 00 02 	lds	r24, 0x0200
    2ad0:	90 91 01 02 	lds	r25, 0x0201
    2ad4:	90 93 57 02 	sts	0x0257, r25
    2ad8:	80 93 56 02 	sts	0x0256, r24
    2adc:	08 95       	ret

00002ade <main>:

}
int main()
{
	int i=0;
	init_devices();
    2ade:	0e 94 bd 04 	call	0x97a	; 0x97a <init_devices>
	lcd_set_4bit();
    2ae2:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2ae6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2aea:	0e 94 44 03 	call	0x688	; 0x688 <color_sensor_scaling>
	stop();
	lcd_print(2,11,scan(),1);
	stop();
	while(1);
	*/
	setIndicatorAndColor();
    2aee:	0e 94 a8 08 	call	0x1150	; 0x1150 <setIndicatorAndColor>
	
	threshold=6000;
    2af2:	80 e7       	ldi	r24, 0x70	; 112
    2af4:	97 e1       	ldi	r25, 0x17	; 23
    2af6:	90 93 6d 02 	sts	0x026D, r25
    2afa:	80 93 6c 02 	sts	0x026C, r24
	ct = 0; adj = 2;
    2afe:	10 92 88 02 	sts	0x0288, r1
    2b02:	10 92 87 02 	sts	0x0287, r1
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	90 93 ae 02 	sts	0x02AE, r25
    2b0e:	80 93 ad 02 	sts	0x02AD, r24
	//lcd("Begin");
	forwardJaa();
    2b12:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <forwardJaa>
	stop();
    2b16:	0e 94 92 02 	call	0x524	; 0x524 <stop>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
    2b1a:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
    2b1e:	83 e2       	ldi	r24, 0x23	; 35
    2b20:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    2b24:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    2b28:	93 e5       	ldi	r25, 0x53	; 83
    2b2a:	90 93 8a 00 	sts	0x008A, r25
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    2b2e:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    2b32:	80 93 8c 00 	sts	0x008C, r24
	servo_1(0);
	servo_2(90);
	servo_3(0);
	while (sorted<total)
    2b36:	20 91 56 02 	lds	r18, 0x0256
    2b3a:	30 91 57 02 	lds	r19, 0x0257
    2b3e:	80 91 00 02 	lds	r24, 0x0200
    2b42:	90 91 01 02 	lds	r25, 0x0201
    2b46:	28 17       	cp	r18, r24
    2b48:	39 07       	cpc	r19, r25
    2b4a:	a4 f5       	brge	.+104    	; 0x2bb4 <main+0xd6>
	{
		canDrop();
    2b4c:	e2 d9       	rcall	.-3132   	; 0x1f12 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2b4e:	80 91 52 02 	lds	r24, 0x0252
    2b52:	90 91 53 02 	lds	r25, 0x0253
    2b56:	03 97       	sbiw	r24, 0x03	; 3
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <main+0x7e>
			predict();
    2b5a:	55 df       	rcall	.-342    	; 0x2a06 <predict>
		if (sorted == total)
    2b5c:	20 91 56 02 	lds	r18, 0x0256
    2b60:	30 91 57 02 	lds	r19, 0x0257
    2b64:	80 91 00 02 	lds	r24, 0x0200
    2b68:	90 91 01 02 	lds	r25, 0x0201
    2b6c:	28 17       	cp	r18, r24
    2b6e:	39 07       	cpc	r19, r25
    2b70:	09 f1       	breq	.+66     	; 0x2bb4 <main+0xd6>
			break;
		pickup();
    2b72:	0e 94 37 0c 	call	0x186e	; 0x186e <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2b76:	80 91 87 02 	lds	r24, 0x0287
    2b7a:	90 91 88 02 	lds	r25, 0x0288
    2b7e:	bc 01       	movw	r22, r24
    2b80:	61 70       	andi	r22, 0x01	; 1
    2b82:	70 78       	andi	r23, 0x80	; 128
    2b84:	77 23       	and	r23, r23
    2b86:	34 f4       	brge	.+12     	; 0x2b94 <main+0xb6>
    2b88:	61 50       	subi	r22, 0x01	; 1
    2b8a:	71 09       	sbc	r23, r1
    2b8c:	6e 6f       	ori	r22, 0xFE	; 254
    2b8e:	7f 6f       	ori	r23, 0xFF	; 255
    2b90:	6f 5f       	subi	r22, 0xFF	; 255
    2b92:	7f 4f       	sbci	r23, 0xFF	; 255
    2b94:	6c 5f       	subi	r22, 0xFC	; 252
    2b96:	7f 4f       	sbci	r23, 0xFF	; 255
    2b98:	0e 94 82 07 	call	0xf04	; 0xf04 <traverseToSort>
		sortCheck();
    2b9c:	01 dd       	rcall	.-1534   	; 0x25a0 <sortCheck>
	forwardJaa();
	stop();
	servo_1(0);
	servo_2(90);
	servo_3(0);
	while (sorted<total)
    2b9e:	20 91 56 02 	lds	r18, 0x0256
    2ba2:	30 91 57 02 	lds	r19, 0x0257
    2ba6:	80 91 00 02 	lds	r24, 0x0200
    2baa:	90 91 01 02 	lds	r25, 0x0201
    2bae:	28 17       	cp	r18, r24
    2bb0:	39 07       	cpc	r19, r25
    2bb2:	64 f2       	brlt	.-104    	; 0x2b4c <main+0x6e>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	08 95       	ret

00002bba <__divsf3>:
    2bba:	0c d0       	rcall	.+24     	; 0x2bd4 <__divsf3x>
    2bbc:	e6 c0       	rjmp	.+460    	; 0x2d8a <__fp_round>
    2bbe:	de d0       	rcall	.+444    	; 0x2d7c <__fp_pscB>
    2bc0:	40 f0       	brcs	.+16     	; 0x2bd2 <__divsf3+0x18>
    2bc2:	d5 d0       	rcall	.+426    	; 0x2d6e <__fp_pscA>
    2bc4:	30 f0       	brcs	.+12     	; 0x2bd2 <__divsf3+0x18>
    2bc6:	21 f4       	brne	.+8      	; 0x2bd0 <__divsf3+0x16>
    2bc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bca:	19 f0       	breq	.+6      	; 0x2bd2 <__divsf3+0x18>
    2bcc:	c7 c0       	rjmp	.+398    	; 0x2d5c <__fp_inf>
    2bce:	51 11       	cpse	r21, r1
    2bd0:	10 c1       	rjmp	.+544    	; 0x2df2 <__fp_szero>
    2bd2:	ca c0       	rjmp	.+404    	; 0x2d68 <__fp_nan>

00002bd4 <__divsf3x>:
    2bd4:	eb d0       	rcall	.+470    	; 0x2dac <__fp_split3>
    2bd6:	98 f3       	brcs	.-26     	; 0x2bbe <__divsf3+0x4>

00002bd8 <__divsf3_pse>:
    2bd8:	99 23       	and	r25, r25
    2bda:	c9 f3       	breq	.-14     	; 0x2bce <__divsf3+0x14>
    2bdc:	55 23       	and	r21, r21
    2bde:	b1 f3       	breq	.-20     	; 0x2bcc <__divsf3+0x12>
    2be0:	95 1b       	sub	r25, r21
    2be2:	55 0b       	sbc	r21, r21
    2be4:	bb 27       	eor	r27, r27
    2be6:	aa 27       	eor	r26, r26
    2be8:	62 17       	cp	r22, r18
    2bea:	73 07       	cpc	r23, r19
    2bec:	84 07       	cpc	r24, r20
    2bee:	38 f0       	brcs	.+14     	; 0x2bfe <__divsf3_pse+0x26>
    2bf0:	9f 5f       	subi	r25, 0xFF	; 255
    2bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf4:	22 0f       	add	r18, r18
    2bf6:	33 1f       	adc	r19, r19
    2bf8:	44 1f       	adc	r20, r20
    2bfa:	aa 1f       	adc	r26, r26
    2bfc:	a9 f3       	breq	.-22     	; 0x2be8 <__divsf3_pse+0x10>
    2bfe:	33 d0       	rcall	.+102    	; 0x2c66 <__divsf3_pse+0x8e>
    2c00:	0e 2e       	mov	r0, r30
    2c02:	3a f0       	brmi	.+14     	; 0x2c12 <__divsf3_pse+0x3a>
    2c04:	e0 e8       	ldi	r30, 0x80	; 128
    2c06:	30 d0       	rcall	.+96     	; 0x2c68 <__divsf3_pse+0x90>
    2c08:	91 50       	subi	r25, 0x01	; 1
    2c0a:	50 40       	sbci	r21, 0x00	; 0
    2c0c:	e6 95       	lsr	r30
    2c0e:	00 1c       	adc	r0, r0
    2c10:	ca f7       	brpl	.-14     	; 0x2c04 <__divsf3_pse+0x2c>
    2c12:	29 d0       	rcall	.+82     	; 0x2c66 <__divsf3_pse+0x8e>
    2c14:	fe 2f       	mov	r31, r30
    2c16:	27 d0       	rcall	.+78     	; 0x2c66 <__divsf3_pse+0x8e>
    2c18:	66 0f       	add	r22, r22
    2c1a:	77 1f       	adc	r23, r23
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	bb 1f       	adc	r27, r27
    2c20:	26 17       	cp	r18, r22
    2c22:	37 07       	cpc	r19, r23
    2c24:	48 07       	cpc	r20, r24
    2c26:	ab 07       	cpc	r26, r27
    2c28:	b0 e8       	ldi	r27, 0x80	; 128
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <__divsf3_pse+0x56>
    2c2c:	bb 0b       	sbc	r27, r27
    2c2e:	80 2d       	mov	r24, r0
    2c30:	bf 01       	movw	r22, r30
    2c32:	ff 27       	eor	r31, r31
    2c34:	93 58       	subi	r25, 0x83	; 131
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	2a f0       	brmi	.+10     	; 0x2c44 <__divsf3_pse+0x6c>
    2c3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c3c:	51 05       	cpc	r21, r1
    2c3e:	68 f0       	brcs	.+26     	; 0x2c5a <__divsf3_pse+0x82>
    2c40:	8d c0       	rjmp	.+282    	; 0x2d5c <__fp_inf>
    2c42:	d7 c0       	rjmp	.+430    	; 0x2df2 <__fp_szero>
    2c44:	5f 3f       	cpi	r21, 0xFF	; 255
    2c46:	ec f3       	brlt	.-6      	; 0x2c42 <__divsf3_pse+0x6a>
    2c48:	98 3e       	cpi	r25, 0xE8	; 232
    2c4a:	dc f3       	brlt	.-10     	; 0x2c42 <__divsf3_pse+0x6a>
    2c4c:	86 95       	lsr	r24
    2c4e:	77 95       	ror	r23
    2c50:	67 95       	ror	r22
    2c52:	b7 95       	ror	r27
    2c54:	f7 95       	ror	r31
    2c56:	9f 5f       	subi	r25, 0xFF	; 255
    2c58:	c9 f7       	brne	.-14     	; 0x2c4c <__divsf3_pse+0x74>
    2c5a:	88 0f       	add	r24, r24
    2c5c:	91 1d       	adc	r25, r1
    2c5e:	96 95       	lsr	r25
    2c60:	87 95       	ror	r24
    2c62:	97 f9       	bld	r25, 7
    2c64:	08 95       	ret
    2c66:	e1 e0       	ldi	r30, 0x01	; 1
    2c68:	66 0f       	add	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	62 17       	cp	r22, r18
    2c72:	73 07       	cpc	r23, r19
    2c74:	84 07       	cpc	r24, r20
    2c76:	ba 07       	cpc	r27, r26
    2c78:	20 f0       	brcs	.+8      	; 0x2c82 <__divsf3_pse+0xaa>
    2c7a:	62 1b       	sub	r22, r18
    2c7c:	73 0b       	sbc	r23, r19
    2c7e:	84 0b       	sbc	r24, r20
    2c80:	ba 0b       	sbc	r27, r26
    2c82:	ee 1f       	adc	r30, r30
    2c84:	88 f7       	brcc	.-30     	; 0x2c68 <__divsf3_pse+0x90>
    2c86:	e0 95       	com	r30
    2c88:	08 95       	ret

00002c8a <__fixunssfsi>:
    2c8a:	98 d0       	rcall	.+304    	; 0x2dbc <__fp_splitA>
    2c8c:	88 f0       	brcs	.+34     	; 0x2cb0 <__fixunssfsi+0x26>
    2c8e:	9f 57       	subi	r25, 0x7F	; 127
    2c90:	90 f0       	brcs	.+36     	; 0x2cb6 <__fixunssfsi+0x2c>
    2c92:	b9 2f       	mov	r27, r25
    2c94:	99 27       	eor	r25, r25
    2c96:	b7 51       	subi	r27, 0x17	; 23
    2c98:	a0 f0       	brcs	.+40     	; 0x2cc2 <__fixunssfsi+0x38>
    2c9a:	d1 f0       	breq	.+52     	; 0x2cd0 <__fixunssfsi+0x46>
    2c9c:	66 0f       	add	r22, r22
    2c9e:	77 1f       	adc	r23, r23
    2ca0:	88 1f       	adc	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	1a f0       	brmi	.+6      	; 0x2cac <__fixunssfsi+0x22>
    2ca6:	ba 95       	dec	r27
    2ca8:	c9 f7       	brne	.-14     	; 0x2c9c <__fixunssfsi+0x12>
    2caa:	12 c0       	rjmp	.+36     	; 0x2cd0 <__fixunssfsi+0x46>
    2cac:	b1 30       	cpi	r27, 0x01	; 1
    2cae:	81 f0       	breq	.+32     	; 0x2cd0 <__fixunssfsi+0x46>
    2cb0:	9f d0       	rcall	.+318    	; 0x2df0 <__fp_zero>
    2cb2:	b1 e0       	ldi	r27, 0x01	; 1
    2cb4:	08 95       	ret
    2cb6:	9c c0       	rjmp	.+312    	; 0x2df0 <__fp_zero>
    2cb8:	67 2f       	mov	r22, r23
    2cba:	78 2f       	mov	r23, r24
    2cbc:	88 27       	eor	r24, r24
    2cbe:	b8 5f       	subi	r27, 0xF8	; 248
    2cc0:	39 f0       	breq	.+14     	; 0x2cd0 <__fixunssfsi+0x46>
    2cc2:	b9 3f       	cpi	r27, 0xF9	; 249
    2cc4:	cc f3       	brlt	.-14     	; 0x2cb8 <__fixunssfsi+0x2e>
    2cc6:	86 95       	lsr	r24
    2cc8:	77 95       	ror	r23
    2cca:	67 95       	ror	r22
    2ccc:	b3 95       	inc	r27
    2cce:	d9 f7       	brne	.-10     	; 0x2cc6 <__fixunssfsi+0x3c>
    2cd0:	3e f4       	brtc	.+14     	; 0x2ce0 <__fixunssfsi+0x56>
    2cd2:	90 95       	com	r25
    2cd4:	80 95       	com	r24
    2cd6:	70 95       	com	r23
    2cd8:	61 95       	neg	r22
    2cda:	7f 4f       	sbci	r23, 0xFF	; 255
    2cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cde:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce0:	08 95       	ret

00002ce2 <__floatunsisf>:
    2ce2:	e8 94       	clt
    2ce4:	09 c0       	rjmp	.+18     	; 0x2cf8 <__floatsisf+0x12>

00002ce6 <__floatsisf>:
    2ce6:	97 fb       	bst	r25, 7
    2ce8:	3e f4       	brtc	.+14     	; 0x2cf8 <__floatsisf+0x12>
    2cea:	90 95       	com	r25
    2cec:	80 95       	com	r24
    2cee:	70 95       	com	r23
    2cf0:	61 95       	neg	r22
    2cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf8:	99 23       	and	r25, r25
    2cfa:	a9 f0       	breq	.+42     	; 0x2d26 <__floatsisf+0x40>
    2cfc:	f9 2f       	mov	r31, r25
    2cfe:	96 e9       	ldi	r25, 0x96	; 150
    2d00:	bb 27       	eor	r27, r27
    2d02:	93 95       	inc	r25
    2d04:	f6 95       	lsr	r31
    2d06:	87 95       	ror	r24
    2d08:	77 95       	ror	r23
    2d0a:	67 95       	ror	r22
    2d0c:	b7 95       	ror	r27
    2d0e:	f1 11       	cpse	r31, r1
    2d10:	f8 cf       	rjmp	.-16     	; 0x2d02 <__floatsisf+0x1c>
    2d12:	fa f4       	brpl	.+62     	; 0x2d52 <__floatsisf+0x6c>
    2d14:	bb 0f       	add	r27, r27
    2d16:	11 f4       	brne	.+4      	; 0x2d1c <__floatsisf+0x36>
    2d18:	60 ff       	sbrs	r22, 0
    2d1a:	1b c0       	rjmp	.+54     	; 0x2d52 <__floatsisf+0x6c>
    2d1c:	6f 5f       	subi	r22, 0xFF	; 255
    2d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d20:	8f 4f       	sbci	r24, 0xFF	; 255
    2d22:	9f 4f       	sbci	r25, 0xFF	; 255
    2d24:	16 c0       	rjmp	.+44     	; 0x2d52 <__floatsisf+0x6c>
    2d26:	88 23       	and	r24, r24
    2d28:	11 f0       	breq	.+4      	; 0x2d2e <__floatsisf+0x48>
    2d2a:	96 e9       	ldi	r25, 0x96	; 150
    2d2c:	11 c0       	rjmp	.+34     	; 0x2d50 <__floatsisf+0x6a>
    2d2e:	77 23       	and	r23, r23
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <__floatsisf+0x54>
    2d32:	9e e8       	ldi	r25, 0x8E	; 142
    2d34:	87 2f       	mov	r24, r23
    2d36:	76 2f       	mov	r23, r22
    2d38:	05 c0       	rjmp	.+10     	; 0x2d44 <__floatsisf+0x5e>
    2d3a:	66 23       	and	r22, r22
    2d3c:	71 f0       	breq	.+28     	; 0x2d5a <__floatsisf+0x74>
    2d3e:	96 e8       	ldi	r25, 0x86	; 134
    2d40:	86 2f       	mov	r24, r22
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	2a f0       	brmi	.+10     	; 0x2d52 <__floatsisf+0x6c>
    2d48:	9a 95       	dec	r25
    2d4a:	66 0f       	add	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	88 1f       	adc	r24, r24
    2d50:	da f7       	brpl	.-10     	; 0x2d48 <__floatsisf+0x62>
    2d52:	88 0f       	add	r24, r24
    2d54:	96 95       	lsr	r25
    2d56:	87 95       	ror	r24
    2d58:	97 f9       	bld	r25, 7
    2d5a:	08 95       	ret

00002d5c <__fp_inf>:
    2d5c:	97 f9       	bld	r25, 7
    2d5e:	9f 67       	ori	r25, 0x7F	; 127
    2d60:	80 e8       	ldi	r24, 0x80	; 128
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	08 95       	ret

00002d68 <__fp_nan>:
    2d68:	9f ef       	ldi	r25, 0xFF	; 255
    2d6a:	80 ec       	ldi	r24, 0xC0	; 192
    2d6c:	08 95       	ret

00002d6e <__fp_pscA>:
    2d6e:	00 24       	eor	r0, r0
    2d70:	0a 94       	dec	r0
    2d72:	16 16       	cp	r1, r22
    2d74:	17 06       	cpc	r1, r23
    2d76:	18 06       	cpc	r1, r24
    2d78:	09 06       	cpc	r0, r25
    2d7a:	08 95       	ret

00002d7c <__fp_pscB>:
    2d7c:	00 24       	eor	r0, r0
    2d7e:	0a 94       	dec	r0
    2d80:	12 16       	cp	r1, r18
    2d82:	13 06       	cpc	r1, r19
    2d84:	14 06       	cpc	r1, r20
    2d86:	05 06       	cpc	r0, r21
    2d88:	08 95       	ret

00002d8a <__fp_round>:
    2d8a:	09 2e       	mov	r0, r25
    2d8c:	03 94       	inc	r0
    2d8e:	00 0c       	add	r0, r0
    2d90:	11 f4       	brne	.+4      	; 0x2d96 <__fp_round+0xc>
    2d92:	88 23       	and	r24, r24
    2d94:	52 f0       	brmi	.+20     	; 0x2daa <__fp_round+0x20>
    2d96:	bb 0f       	add	r27, r27
    2d98:	40 f4       	brcc	.+16     	; 0x2daa <__fp_round+0x20>
    2d9a:	bf 2b       	or	r27, r31
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <__fp_round+0x18>
    2d9e:	60 ff       	sbrs	r22, 0
    2da0:	04 c0       	rjmp	.+8      	; 0x2daa <__fp_round+0x20>
    2da2:	6f 5f       	subi	r22, 0xFF	; 255
    2da4:	7f 4f       	sbci	r23, 0xFF	; 255
    2da6:	8f 4f       	sbci	r24, 0xFF	; 255
    2da8:	9f 4f       	sbci	r25, 0xFF	; 255
    2daa:	08 95       	ret

00002dac <__fp_split3>:
    2dac:	57 fd       	sbrc	r21, 7
    2dae:	90 58       	subi	r25, 0x80	; 128
    2db0:	44 0f       	add	r20, r20
    2db2:	55 1f       	adc	r21, r21
    2db4:	59 f0       	breq	.+22     	; 0x2dcc <__fp_splitA+0x10>
    2db6:	5f 3f       	cpi	r21, 0xFF	; 255
    2db8:	71 f0       	breq	.+28     	; 0x2dd6 <__fp_splitA+0x1a>
    2dba:	47 95       	ror	r20

00002dbc <__fp_splitA>:
    2dbc:	88 0f       	add	r24, r24
    2dbe:	97 fb       	bst	r25, 7
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	61 f0       	breq	.+24     	; 0x2ddc <__fp_splitA+0x20>
    2dc4:	9f 3f       	cpi	r25, 0xFF	; 255
    2dc6:	79 f0       	breq	.+30     	; 0x2de6 <__fp_splitA+0x2a>
    2dc8:	87 95       	ror	r24
    2dca:	08 95       	ret
    2dcc:	12 16       	cp	r1, r18
    2dce:	13 06       	cpc	r1, r19
    2dd0:	14 06       	cpc	r1, r20
    2dd2:	55 1f       	adc	r21, r21
    2dd4:	f2 cf       	rjmp	.-28     	; 0x2dba <__fp_split3+0xe>
    2dd6:	46 95       	lsr	r20
    2dd8:	f1 df       	rcall	.-30     	; 0x2dbc <__fp_splitA>
    2dda:	08 c0       	rjmp	.+16     	; 0x2dec <__fp_splitA+0x30>
    2ddc:	16 16       	cp	r1, r22
    2dde:	17 06       	cpc	r1, r23
    2de0:	18 06       	cpc	r1, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	f1 cf       	rjmp	.-30     	; 0x2dc8 <__fp_splitA+0xc>
    2de6:	86 95       	lsr	r24
    2de8:	71 05       	cpc	r23, r1
    2dea:	61 05       	cpc	r22, r1
    2dec:	08 94       	sec
    2dee:	08 95       	ret

00002df0 <__fp_zero>:
    2df0:	e8 94       	clt

00002df2 <__fp_szero>:
    2df2:	bb 27       	eor	r27, r27
    2df4:	66 27       	eor	r22, r22
    2df6:	77 27       	eor	r23, r23
    2df8:	cb 01       	movw	r24, r22
    2dfa:	97 f9       	bld	r25, 7
    2dfc:	08 95       	ret

00002dfe <__divmodhi4>:
    2dfe:	97 fb       	bst	r25, 7
    2e00:	07 2e       	mov	r0, r23
    2e02:	16 f4       	brtc	.+4      	; 0x2e08 <__divmodhi4+0xa>
    2e04:	00 94       	com	r0
    2e06:	06 d0       	rcall	.+12     	; 0x2e14 <__divmodhi4_neg1>
    2e08:	77 fd       	sbrc	r23, 7
    2e0a:	08 d0       	rcall	.+16     	; 0x2e1c <__divmodhi4_neg2>
    2e0c:	1a d0       	rcall	.+52     	; 0x2e42 <__udivmodhi4>
    2e0e:	07 fc       	sbrc	r0, 7
    2e10:	05 d0       	rcall	.+10     	; 0x2e1c <__divmodhi4_neg2>
    2e12:	3e f4       	brtc	.+14     	; 0x2e22 <__divmodhi4_exit>

00002e14 <__divmodhi4_neg1>:
    2e14:	90 95       	com	r25
    2e16:	81 95       	neg	r24
    2e18:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1a:	08 95       	ret

00002e1c <__divmodhi4_neg2>:
    2e1c:	70 95       	com	r23
    2e1e:	61 95       	neg	r22
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255

00002e22 <__divmodhi4_exit>:
    2e22:	08 95       	ret

00002e24 <__umulhisi3>:
    2e24:	a2 9f       	mul	r26, r18
    2e26:	b0 01       	movw	r22, r0
    2e28:	b3 9f       	mul	r27, r19
    2e2a:	c0 01       	movw	r24, r0
    2e2c:	a3 9f       	mul	r26, r19
    2e2e:	70 0d       	add	r23, r0
    2e30:	81 1d       	adc	r24, r1
    2e32:	11 24       	eor	r1, r1
    2e34:	91 1d       	adc	r25, r1
    2e36:	b2 9f       	mul	r27, r18
    2e38:	70 0d       	add	r23, r0
    2e3a:	81 1d       	adc	r24, r1
    2e3c:	11 24       	eor	r1, r1
    2e3e:	91 1d       	adc	r25, r1
    2e40:	08 95       	ret

00002e42 <__udivmodhi4>:
    2e42:	aa 1b       	sub	r26, r26
    2e44:	bb 1b       	sub	r27, r27
    2e46:	51 e1       	ldi	r21, 0x11	; 17
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <__udivmodhi4_ep>

00002e4a <__udivmodhi4_loop>:
    2e4a:	aa 1f       	adc	r26, r26
    2e4c:	bb 1f       	adc	r27, r27
    2e4e:	a6 17       	cp	r26, r22
    2e50:	b7 07       	cpc	r27, r23
    2e52:	10 f0       	brcs	.+4      	; 0x2e58 <__udivmodhi4_ep>
    2e54:	a6 1b       	sub	r26, r22
    2e56:	b7 0b       	sbc	r27, r23

00002e58 <__udivmodhi4_ep>:
    2e58:	88 1f       	adc	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	5a 95       	dec	r21
    2e5e:	a9 f7       	brne	.-22     	; 0x2e4a <__udivmodhi4_loop>
    2e60:	80 95       	com	r24
    2e62:	90 95       	com	r25
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	08 95       	ret

00002e6a <_exit>:
    2e6a:	f8 94       	cli

00002e6c <__stop_program>:
    2e6c:	ff cf       	rjmp	.-2      	; 0x2e6c <__stop_program>
