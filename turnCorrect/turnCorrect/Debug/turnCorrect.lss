
turnCorrect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00002e24  00002eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080024a  0080024a  00002f02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f02  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033bf  00000000  00000000  000032b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d8  00000000  00000000  00006671  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002652  00000000  00000000  00006b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009d8  00000000  00000000  0000919c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000867  00000000  00000000  00009b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022c9  00000000  00000000  0000a3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  0000c6a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	08 c4       	rjmp	.+2064   	; 0x826 <__vector_5>
      16:	00 00       	nop
      18:	e1 c3       	rjmp	.+1986   	; 0x7dc <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e2       	ldi	r30, 0x24	; 36
      fc:	fe e2       	ldi	r31, 0x2E	; 46
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3b       	cpi	r26, 0xBB	; 187
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <main>
     122:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 75 02 	sts	0x0275, r25
     30a:	80 93 74 02 	sts	0x0274, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 79 02 	sts	0x0279, r21
     338:	40 93 78 02 	sts	0x0278, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 ba 02 	sts	0x02BA, r25
     374:	80 93 b9 02 	sts	0x02B9, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 79 02 	sts	0x0279, r21
     3a0:	40 93 78 02 	sts	0x0278, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b0 02 	sts	0x02B0, r25
     3dc:	80 93 af 02 	sts	0x02AF, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 79 02 	sts	0x0279, r21
     3fe:	40 93 78 02 	sts	0x0278, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8a 02 	sts	0x028A, r25
     436:	80 93 89 02 	sts	0x0289, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 b8 02 	sts	0x02B8, r25
     47c:	80 93 b7 02 	sts	0x02B7, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 58 02 	lds	r24, 0x0258
     628:	90 91 59 02 	lds	r25, 0x0259
     62c:	a0 91 5a 02 	lds	r26, 0x025A
     630:	b0 91 5b 02 	lds	r27, 0x025B
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 58 02 	sts	0x0258, r24
     63e:	90 93 59 02 	sts	0x0259, r25
     642:	a0 93 5a 02 	sts	0x025A, r26
     646:	b0 93 5b 02 	sts	0x025B, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <servo_1>:
     676:	10 92 89 00 	sts	0x0089, r1
     67a:	68 2f       	mov	r22, r24
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatunsisf>
     686:	2b e7       	ldi	r18, 0x7B	; 123
     688:	34 e1       	ldi	r19, 0x14	; 20
     68a:	4e ee       	ldi	r20, 0xEE	; 238
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__divsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4c e0       	ldi	r20, 0x0C	; 12
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__addsf3>
     69e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__fixunssfsi>
     6a2:	60 93 88 00 	sts	0x0088, r22
     6a6:	08 95       	ret

000006a8 <filter_red>:
     6a8:	5e 98       	cbi	0x0b, 6	; 11
     6aa:	5f 98       	cbi	0x0b, 7	; 11
     6ac:	08 95       	ret

000006ae <filter_green>:
     6ae:	5e 9a       	sbi	0x0b, 6	; 11
     6b0:	5f 9a       	sbi	0x0b, 7	; 11
     6b2:	08 95       	ret

000006b4 <filter_blue>:
     6b4:	5e 98       	cbi	0x0b, 6	; 11
     6b6:	5f 9a       	sbi	0x0b, 7	; 11
     6b8:	08 95       	ret

000006ba <color_sensor_scaling>:
     6ba:	5c 9a       	sbi	0x0b, 4	; 11
     6bc:	5d 9a       	sbi	0x0b, 5	; 11
     6be:	08 95       	ret

000006c0 <red_read>:
     6c0:	f3 df       	rcall	.-26     	; 0x6a8 <filter_red>
     6c2:	10 92 58 02 	sts	0x0258, r1
     6c6:	10 92 59 02 	sts	0x0259, r1
     6ca:	10 92 5a 02 	sts	0x025A, r1
     6ce:	10 92 5b 02 	sts	0x025B, r1
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	8f e7       	ldi	r24, 0x7F	; 127
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <red_read+0x18>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <red_read+0x22>
     6e2:	00 00       	nop
     6e4:	80 91 58 02 	lds	r24, 0x0258
     6e8:	90 91 59 02 	lds	r25, 0x0259
     6ec:	a0 91 5a 02 	lds	r26, 0x025A
     6f0:	b0 91 5b 02 	lds	r27, 0x025B
     6f4:	80 93 7e 02 	sts	0x027E, r24
     6f8:	90 93 7f 02 	sts	0x027F, r25
     6fc:	a0 93 80 02 	sts	0x0280, r26
     700:	b0 93 81 02 	sts	0x0281, r27
     704:	2f ef       	ldi	r18, 0xFF	; 255
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9c e2       	ldi	r25, 0x2C	; 44
     70a:	21 50       	subi	r18, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <red_read+0x4a>
     712:	00 c0       	rjmp	.+0      	; 0x714 <red_read+0x54>
     714:	00 00       	nop
     716:	08 95       	ret

00000718 <green_read>:
     718:	ca df       	rcall	.-108    	; 0x6ae <filter_green>
     71a:	10 92 58 02 	sts	0x0258, r1
     71e:	10 92 59 02 	sts	0x0259, r1
     722:	10 92 5a 02 	sts	0x025A, r1
     726:	10 92 5b 02 	sts	0x025B, r1
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	8f e7       	ldi	r24, 0x7F	; 127
     72e:	94 e0       	ldi	r25, 0x04	; 4
     730:	21 50       	subi	r18, 0x01	; 1
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <green_read+0x18>
     738:	00 c0       	rjmp	.+0      	; 0x73a <green_read+0x22>
     73a:	00 00       	nop
     73c:	80 91 58 02 	lds	r24, 0x0258
     740:	90 91 59 02 	lds	r25, 0x0259
     744:	a0 91 5a 02 	lds	r26, 0x025A
     748:	b0 91 5b 02 	lds	r27, 0x025B
     74c:	80 93 7a 02 	sts	0x027A, r24
     750:	90 93 7b 02 	sts	0x027B, r25
     754:	a0 93 7c 02 	sts	0x027C, r26
     758:	b0 93 7d 02 	sts	0x027D, r27
     75c:	08 95       	ret

0000075e <blue_read>:
     75e:	aa df       	rcall	.-172    	; 0x6b4 <filter_blue>
     760:	10 92 58 02 	sts	0x0258, r1
     764:	10 92 59 02 	sts	0x0259, r1
     768:	10 92 5a 02 	sts	0x025A, r1
     76c:	10 92 5b 02 	sts	0x025B, r1
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	8f e7       	ldi	r24, 0x7F	; 127
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	21 50       	subi	r18, 0x01	; 1
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	90 40       	sbci	r25, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <blue_read+0x18>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <blue_read+0x22>
     780:	00 00       	nop
     782:	80 91 58 02 	lds	r24, 0x0258
     786:	90 91 59 02 	lds	r25, 0x0259
     78a:	a0 91 5a 02 	lds	r26, 0x025A
     78e:	b0 91 5b 02 	lds	r27, 0x025B
     792:	80 93 6e 02 	sts	0x026E, r24
     796:	90 93 6f 02 	sts	0x026F, r25
     79a:	a0 93 70 02 	sts	0x0270, r26
     79e:	b0 93 71 02 	sts	0x0271, r27
     7a2:	08 95       	ret

000007a4 <left_encoder_pin_config>:
     7a4:	6c 98       	cbi	0x0d, 4	; 13
     7a6:	74 9a       	sbi	0x0e, 4	; 14
     7a8:	08 95       	ret

000007aa <right_encoder_pin_config>:
     7aa:	6d 98       	cbi	0x0d, 5	; 13
     7ac:	75 9a       	sbi	0x0e, 5	; 14
     7ae:	08 95       	ret

000007b0 <port_init_poz>:
     7b0:	96 de       	rcall	.-724    	; 0x4de <motion_pin_config>
     7b2:	f8 df       	rcall	.-16     	; 0x7a4 <left_encoder_pin_config>
     7b4:	fa cf       	rjmp	.-12     	; 0x7aa <right_encoder_pin_config>
     7b6:	08 95       	ret

000007b8 <left_position_encoder_interrupt_init>:
     7b8:	f8 94       	cli
     7ba:	ea e6       	ldi	r30, 0x6A	; 106
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 83       	st	Z, r24
     7c4:	ec 9a       	sbi	0x1d, 4	; 29
     7c6:	78 94       	sei
     7c8:	08 95       	ret

000007ca <right_position_encoder_interrupt_init>:
     7ca:	f8 94       	cli
     7cc:	ea e6       	ldi	r30, 0x6A	; 106
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	88 60       	ori	r24, 0x08	; 8
     7d4:	80 83       	st	Z, r24
     7d6:	ed 9a       	sbi	0x1d, 5	; 29
     7d8:	78 94       	sei
     7da:	08 95       	ret

000007dc <__vector_6>:
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	80 91 5c 02 	lds	r24, 0x025C
     7f2:	90 91 5d 02 	lds	r25, 0x025D
     7f6:	a0 91 5e 02 	lds	r26, 0x025E
     7fa:	b0 91 5f 02 	lds	r27, 0x025F
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	a1 1d       	adc	r26, r1
     802:	b1 1d       	adc	r27, r1
     804:	80 93 5c 02 	sts	0x025C, r24
     808:	90 93 5d 02 	sts	0x025D, r25
     80c:	a0 93 5e 02 	sts	0x025E, r26
     810:	b0 93 5f 02 	sts	0x025F, r27
     814:	bf 91       	pop	r27
     816:	af 91       	pop	r26
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_5>:
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	80 91 60 02 	lds	r24, 0x0260
     83c:	90 91 61 02 	lds	r25, 0x0261
     840:	a0 91 62 02 	lds	r26, 0x0262
     844:	b0 91 63 02 	lds	r27, 0x0263
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	a1 1d       	adc	r26, r1
     84c:	b1 1d       	adc	r27, r1
     84e:	80 93 60 02 	sts	0x0260, r24
     852:	90 93 61 02 	sts	0x0261, r25
     856:	a0 93 62 02 	sts	0x0262, r26
     85a:	b0 93 63 02 	sts	0x0263, r27
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <angle_rotate>:
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	bc 01       	movw	r22, r24
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatunsisf>
     886:	28 e4       	ldi	r18, 0x48	; 72
     888:	31 ee       	ldi	r19, 0xE1	; 225
     88a:	42 e8       	ldi	r20, 0x82	; 130
     88c:	50 e4       	ldi	r21, 0x40	; 64
     88e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__divsf3>
     892:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__fixunssfsi>
     896:	cb 01       	movw	r24, r22
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	10 92 5c 02 	sts	0x025C, r1
     8a0:	10 92 5d 02 	sts	0x025D, r1
     8a4:	10 92 5e 02 	sts	0x025E, r1
     8a8:	10 92 5f 02 	sts	0x025F, r1
     8ac:	10 92 60 02 	sts	0x0260, r1
     8b0:	10 92 61 02 	sts	0x0261, r1
     8b4:	10 92 62 02 	sts	0x0262, r1
     8b8:	10 92 63 02 	sts	0x0263, r1
     8bc:	51 e0       	ldi	r21, 0x01	; 1
     8be:	e0 e0       	ldi	r30, 0x00	; 0
     8c0:	c0 90 5c 02 	lds	r12, 0x025C
     8c4:	d0 90 5d 02 	lds	r13, 0x025D
     8c8:	e0 90 5e 02 	lds	r14, 0x025E
     8cc:	f0 90 5f 02 	lds	r15, 0x025F
     8d0:	00 91 60 02 	lds	r16, 0x0260
     8d4:	10 91 61 02 	lds	r17, 0x0261
     8d8:	20 91 62 02 	lds	r18, 0x0262
     8dc:	30 91 63 02 	lds	r19, 0x0263
     8e0:	45 2f       	mov	r20, r21
     8e2:	08 17       	cp	r16, r24
     8e4:	19 07       	cpc	r17, r25
     8e6:	2a 07       	cpc	r18, r26
     8e8:	3b 07       	cpc	r19, r27
     8ea:	08 f4       	brcc	.+2      	; 0x8ee <angle_rotate+0x7e>
     8ec:	4e 2f       	mov	r20, r30
     8ee:	41 11       	cpse	r20, r1
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <angle_rotate+0x94>
     8f2:	25 2f       	mov	r18, r21
     8f4:	c8 16       	cp	r12, r24
     8f6:	d9 06       	cpc	r13, r25
     8f8:	ea 06       	cpc	r14, r26
     8fa:	fb 06       	cpc	r15, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <angle_rotate+0x90>
     8fe:	2e 2f       	mov	r18, r30
     900:	22 23       	and	r18, r18
     902:	f1 f2       	breq	.-68     	; 0x8c0 <angle_rotate+0x50>
     904:	0f de       	rcall	.-994    	; 0x524 <stop>
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	08 95       	ret

00000914 <linear_distance_mm>:
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	bc 01       	movw	r22, r24
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatunsisf>
     922:	25 ee       	ldi	r18, 0xE5	; 229
     924:	30 ed       	ldi	r19, 0xD0	; 208
     926:	4a ea       	ldi	r20, 0xAA	; 170
     928:	50 e4       	ldi	r21, 0x40	; 64
     92a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__divsf3>
     92e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__fixunssfsi>
     932:	10 92 5c 02 	sts	0x025C, r1
     936:	10 92 5d 02 	sts	0x025D, r1
     93a:	10 92 5e 02 	sts	0x025E, r1
     93e:	10 92 5f 02 	sts	0x025F, r1
     942:	00 91 5c 02 	lds	r16, 0x025C
     946:	10 91 5d 02 	lds	r17, 0x025D
     94a:	20 91 5e 02 	lds	r18, 0x025E
     94e:	30 91 5f 02 	lds	r19, 0x025F
     952:	60 17       	cp	r22, r16
     954:	71 07       	cpc	r23, r17
     956:	82 07       	cpc	r24, r18
     958:	93 07       	cpc	r25, r19
     95a:	98 f7       	brcc	.-26     	; 0x942 <linear_distance_mm+0x2e>
     95c:	e3 dd       	rcall	.-1082   	; 0x524 <stop>
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <forward_mm>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	d0 dd       	rcall	.-1120   	; 0x50c <forward>
     96c:	ce 01       	movw	r24, r28
     96e:	d2 df       	rcall	.-92     	; 0x914 <linear_distance_mm>
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <back_mm>:
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	ca dd       	rcall	.-1132   	; 0x512 <back>
     97e:	ce 01       	movw	r24, r28
     980:	c9 df       	rcall	.-110    	; 0x914 <linear_distance_mm>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <left_degrees>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
     98e:	c4 dd       	rcall	.-1144   	; 0x518 <left>
     990:	ce 01       	movw	r24, r28
     992:	6e df       	rcall	.-292    	; 0x870 <angle_rotate>
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <right_degrees>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	be dd       	rcall	.-1156   	; 0x51e <right>
     9a2:	ce 01       	movw	r24, r28
     9a4:	65 df       	rcall	.-310    	; 0x870 <angle_rotate>
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <init_devices>:
     9ac:	f8 94       	cli
     9ae:	00 df       	rcall	.-512    	; 0x7b0 <port_init_poz>
     9b0:	03 df       	rcall	.-506    	; 0x7b8 <left_position_encoder_interrupt_init>
     9b2:	0b df       	rcall	.-490    	; 0x7ca <right_position_encoder_interrupt_init>
     9b4:	f9 dd       	rcall	.-1038   	; 0x5a8 <port_init>
     9b6:	24 de       	rcall	.-952    	; 0x600 <color_sensor_pin_interrupt_init>
     9b8:	51 de       	rcall	.-862    	; 0x65c <adc_init>
     9ba:	91 dd       	rcall	.-1246   	; 0x4de <motion_pin_config>
     9bc:	75 dd       	rcall	.-1302   	; 0x4a8 <timer5_init>
     9be:	d1 dd       	rcall	.-1118   	; 0x562 <timer1_init>
     9c0:	78 94       	sei
     9c2:	08 95       	ret

000009c4 <Delay>:
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	8c 01       	movw	r16, r24
     9ce:	18 16       	cp	r1, r24
     9d0:	19 06       	cpc	r1, r25
     9d2:	8c f4       	brge	.+34     	; 0x9f6 <Delay+0x32>
     9d4:	c0 e0       	ldi	r28, 0x00	; 0
     9d6:	d0 e0       	ldi	r29, 0x00	; 0
     9d8:	09 c0       	rjmp	.+18     	; 0x9ec <Delay+0x28>
     9da:	86 e6       	ldi	r24, 0x66	; 102
     9dc:	9e e0       	ldi	r25, 0x0E	; 14
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <Delay+0x1a>
     9e2:	00 00       	nop
     9e4:	21 96       	adiw	r28, 0x01	; 1
     9e6:	c0 17       	cp	r28, r16
     9e8:	d1 07       	cpc	r29, r17
     9ea:	39 f0       	breq	.+14     	; 0x9fa <Delay+0x36>
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	ed dd       	rcall	.-1062   	; 0x5ca <ADC_Conversion>
     9f0:	89 32       	cpi	r24, 0x29	; 41
     9f2:	98 f3       	brcs	.-26     	; 0x9da <Delay+0x16>
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <Delay+0x36>
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	94 dd       	rcall	.-1240   	; 0x524 <stop>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	c0 17       	cp	r28, r16
     a00:	d1 07       	cpc	r29, r17
     a02:	0c f0       	brlt	.+2      	; 0xa06 <Delay+0x42>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <set_color>:
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	db dd       	rcall	.-1098   	; 0x5ca <ADC_Conversion>
     a14:	80 93 4d 02 	sts	0x024D, r24
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	d7 dd       	rcall	.-1106   	; 0x5ca <ADC_Conversion>
     a1c:	80 93 4c 02 	sts	0x024C, r24
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	d3 dd       	rcall	.-1114   	; 0x5ca <ADC_Conversion>
     a24:	80 93 4b 02 	sts	0x024B, r24
     a28:	08 95       	ret

00000a2a <node>:
     a2a:	88 ec       	ldi	r24, 0xC8	; 200
     a2c:	80 93 28 01 	sts	0x0128, r24
     a30:	80 93 2a 01 	sts	0x012A, r24
     a34:	80 91 4c 02 	lds	r24, 0x024C
     a38:	89 32       	cpi	r24, 0x29	; 41
     a3a:	38 f4       	brcc	.+14     	; 0xa4a <node+0x20>
     a3c:	0e c0       	rjmp	.+28     	; 0xa5a <node+0x30>
     a3e:	66 dd       	rcall	.-1332   	; 0x50c <forward>
     a40:	e7 df       	rcall	.-50     	; 0xa10 <set_color>
     a42:	80 91 4c 02 	lds	r24, 0x024C
     a46:	89 32       	cpi	r24, 0x29	; 41
     a48:	40 f0       	brcs	.+16     	; 0xa5a <node+0x30>
     a4a:	80 91 4d 02 	lds	r24, 0x024D
     a4e:	89 32       	cpi	r24, 0x29	; 41
     a50:	b0 f7       	brcc	.-20     	; 0xa3e <node+0x14>
     a52:	80 91 4b 02 	lds	r24, 0x024B
     a56:	89 32       	cpi	r24, 0x29	; 41
     a58:	90 f7       	brcc	.-28     	; 0xa3e <node+0x14>
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	9a e1       	ldi	r25, 0x1A	; 26
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <node+0x36>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <node+0x40>
     a6a:	00 00       	nop
     a6c:	5b cd       	rjmp	.-1354   	; 0x524 <stop>
     a6e:	08 95       	ret

00000a70 <semiCorrect>:
     a70:	80 91 4c 02 	lds	r24, 0x024C
     a74:	88 32       	cpi	r24, 0x28	; 40
     a76:	58 f5       	brcc	.+86     	; 0xace <semiCorrect+0x5e>
     a78:	80 91 4d 02 	lds	r24, 0x024D
     a7c:	89 32       	cpi	r24, 0x29	; 41
     a7e:	98 f0       	brcs	.+38     	; 0xaa6 <semiCorrect+0x36>
     a80:	90 91 4b 02 	lds	r25, 0x024B
     a84:	98 32       	cpi	r25, 0x28	; 40
     a86:	78 f4       	brcc	.+30     	; 0xaa6 <semiCorrect+0x36>
     a88:	47 dd       	rcall	.-1394   	; 0x518 <left>
     a8a:	c2 df       	rcall	.-124    	; 0xa10 <set_color>
     a8c:	80 91 4c 02 	lds	r24, 0x024C
     a90:	88 32       	cpi	r24, 0x28	; 40
     a92:	e8 f4       	brcc	.+58     	; 0xace <semiCorrect+0x5e>
     a94:	80 91 4d 02 	lds	r24, 0x024D
     a98:	89 32       	cpi	r24, 0x29	; 41
     a9a:	c8 f0       	brcs	.+50     	; 0xace <semiCorrect+0x5e>
     a9c:	80 91 4b 02 	lds	r24, 0x024B
     aa0:	88 32       	cpi	r24, 0x28	; 40
     aa2:	90 f3       	brcs	.-28     	; 0xa88 <semiCorrect+0x18>
     aa4:	08 95       	ret
     aa6:	90 91 4b 02 	lds	r25, 0x024B
     aaa:	99 32       	cpi	r25, 0x29	; 41
     aac:	80 f0       	brcs	.+32     	; 0xace <semiCorrect+0x5e>
     aae:	88 32       	cpi	r24, 0x28	; 40
     ab0:	70 f4       	brcc	.+28     	; 0xace <semiCorrect+0x5e>
     ab2:	35 dd       	rcall	.-1430   	; 0x51e <right>
     ab4:	ad df       	rcall	.-166    	; 0xa10 <set_color>
     ab6:	80 91 4c 02 	lds	r24, 0x024C
     aba:	88 32       	cpi	r24, 0x28	; 40
     abc:	40 f4       	brcc	.+16     	; 0xace <semiCorrect+0x5e>
     abe:	80 91 4d 02 	lds	r24, 0x024D
     ac2:	88 32       	cpi	r24, 0x28	; 40
     ac4:	20 f4       	brcc	.+8      	; 0xace <semiCorrect+0x5e>
     ac6:	80 91 4b 02 	lds	r24, 0x024B
     aca:	89 32       	cpi	r24, 0x29	; 41
     acc:	90 f7       	brcc	.-28     	; 0xab2 <semiCorrect+0x42>
     ace:	08 95       	ret

00000ad0 <correct>:
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	85 e0       	ldi	r24, 0x05	; 5
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 73 02 	sts	0x0273, r25
     ae0:	80 93 72 02 	sts	0x0272, r24
     ae4:	1f dd       	rcall	.-1474   	; 0x524 <stop>
     ae6:	80 91 4a 02 	lds	r24, 0x024A
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	09 f0       	breq	.+2      	; 0xaf0 <correct+0x20>
     aee:	34 c0       	rjmp	.+104    	; 0xb58 <correct+0x88>
     af0:	10 92 4a 02 	sts	0x024A, r1
     af4:	ce e3       	ldi	r28, 0x3E	; 62
     af6:	d0 e0       	ldi	r29, 0x00	; 0
     af8:	02 e0       	ldi	r16, 0x02	; 2
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	10 dd       	rcall	.-1504   	; 0x51e <right>
     afe:	02 30       	cpi	r16, 0x02	; 2
     b00:	11 05       	cpc	r17, r1
     b02:	31 f4       	brne	.+12     	; 0xb10 <correct+0x40>
     b04:	8e e1       	ldi	r24, 0x1E	; 30
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	5d df       	rcall	.-326    	; 0x9c4 <Delay>
     b0a:	88 23       	and	r24, r24
     b0c:	29 f0       	breq	.+10     	; 0xb18 <correct+0x48>
     b0e:	58 c0       	rjmp	.+176    	; 0xbc0 <correct+0xf0>
     b10:	ce 01       	movw	r24, r28
     b12:	58 df       	rcall	.-336    	; 0x9c4 <Delay>
     b14:	81 11       	cpse	r24, r1
     b16:	54 c0       	rjmp	.+168    	; 0xbc0 <correct+0xf0>
     b18:	05 dd       	rcall	.-1526   	; 0x524 <stop>
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	56 dd       	rcall	.-1364   	; 0x5ca <ADC_Conversion>
     b1e:	89 32       	cpi	r24, 0x29	; 41
     b20:	08 f0       	brcs	.+2      	; 0xb24 <correct+0x54>
     b22:	4d c0       	rjmp	.+154    	; 0xbbe <correct+0xee>
     b24:	a5 df       	rcall	.-182    	; 0xa70 <semiCorrect>
     b26:	f8 dc       	rcall	.-1552   	; 0x518 <left>
     b28:	02 30       	cpi	r16, 0x02	; 2
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f4       	brne	.+12     	; 0xb3a <correct+0x6a>
     b2e:	8c e3       	ldi	r24, 0x3C	; 60
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	48 df       	rcall	.-368    	; 0x9c4 <Delay>
     b34:	88 23       	and	r24, r24
     b36:	29 f0       	breq	.+10     	; 0xb42 <correct+0x72>
     b38:	43 c0       	rjmp	.+134    	; 0xbc0 <correct+0xf0>
     b3a:	ce 01       	movw	r24, r28
     b3c:	43 df       	rcall	.-378    	; 0x9c4 <Delay>
     b3e:	81 11       	cpse	r24, r1
     b40:	3f c0       	rjmp	.+126    	; 0xbc0 <correct+0xf0>
     b42:	f0 dc       	rcall	.-1568   	; 0x524 <stop>
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	41 dd       	rcall	.-1406   	; 0x5ca <ADC_Conversion>
     b48:	64 96       	adiw	r28, 0x14	; 20
     b4a:	88 32       	cpi	r24, 0x28	; 40
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <correct+0x80>
     b4e:	37 c0       	rjmp	.+110    	; 0xbbe <correct+0xee>
     b50:	8f df       	rcall	.-226    	; 0xa70 <semiCorrect>
     b52:	0c 5e       	subi	r16, 0xEC	; 236
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	d2 cf       	rjmp	.-92     	; 0xafc <correct+0x2c>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 4a 02 	sts	0x024A, r24
     b5e:	ce e3       	ldi	r28, 0x3E	; 62
     b60:	d0 e0       	ldi	r29, 0x00	; 0
     b62:	02 e0       	ldi	r16, 0x02	; 2
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	d8 dc       	rcall	.-1616   	; 0x518 <left>
     b68:	02 30       	cpi	r16, 0x02	; 2
     b6a:	11 05       	cpc	r17, r1
     b6c:	31 f4       	brne	.+12     	; 0xb7a <correct+0xaa>
     b6e:	8e e1       	ldi	r24, 0x1E	; 30
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	28 df       	rcall	.-432    	; 0x9c4 <Delay>
     b74:	88 23       	and	r24, r24
     b76:	29 f0       	breq	.+10     	; 0xb82 <correct+0xb2>
     b78:	23 c0       	rjmp	.+70     	; 0xbc0 <correct+0xf0>
     b7a:	ce 01       	movw	r24, r28
     b7c:	23 df       	rcall	.-442    	; 0x9c4 <Delay>
     b7e:	81 11       	cpse	r24, r1
     b80:	1f c0       	rjmp	.+62     	; 0xbc0 <correct+0xf0>
     b82:	d0 dc       	rcall	.-1632   	; 0x524 <stop>
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	21 dd       	rcall	.-1470   	; 0x5ca <ADC_Conversion>
     b88:	89 32       	cpi	r24, 0x29	; 41
     b8a:	c8 f4       	brcc	.+50     	; 0xbbe <correct+0xee>
     b8c:	71 df       	rcall	.-286    	; 0xa70 <semiCorrect>
     b8e:	c7 dc       	rcall	.-1650   	; 0x51e <right>
     b90:	02 30       	cpi	r16, 0x02	; 2
     b92:	11 05       	cpc	r17, r1
     b94:	31 f4       	brne	.+12     	; 0xba2 <correct+0xd2>
     b96:	8c e3       	ldi	r24, 0x3C	; 60
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	14 df       	rcall	.-472    	; 0x9c4 <Delay>
     b9c:	88 23       	and	r24, r24
     b9e:	29 f0       	breq	.+10     	; 0xbaa <correct+0xda>
     ba0:	0f c0       	rjmp	.+30     	; 0xbc0 <correct+0xf0>
     ba2:	ce 01       	movw	r24, r28
     ba4:	0f df       	rcall	.-482    	; 0x9c4 <Delay>
     ba6:	81 11       	cpse	r24, r1
     ba8:	0b c0       	rjmp	.+22     	; 0xbc0 <correct+0xf0>
     baa:	bc dc       	rcall	.-1672   	; 0x524 <stop>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	0d dd       	rcall	.-1510   	; 0x5ca <ADC_Conversion>
     bb0:	64 96       	adiw	r28, 0x14	; 20
     bb2:	88 32       	cpi	r24, 0x28	; 40
     bb4:	20 f0       	brcs	.+8      	; 0xbbe <correct+0xee>
     bb6:	5c df       	rcall	.-328    	; 0xa70 <semiCorrect>
     bb8:	0c 5e       	subi	r16, 0xEC	; 236
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
     bbc:	d4 cf       	rjmp	.-88     	; 0xb66 <correct+0x96>
     bbe:	b2 dc       	rcall	.-1692   	; 0x524 <stop>
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <noNatak>:
     bca:	86 e9       	ldi	r24, 0x96	; 150
     bcc:	80 93 28 01 	sts	0x0128, r24
     bd0:	80 93 2a 01 	sts	0x012A, r24
     bd4:	80 91 4c 02 	lds	r24, 0x024C
     bd8:	88 32       	cpi	r24, 0x28	; 40
     bda:	70 f5       	brcc	.+92     	; 0xc38 <noNatak+0x6e>
     bdc:	80 91 4d 02 	lds	r24, 0x024D
     be0:	89 32       	cpi	r24, 0x29	; 41
     be2:	98 f0       	brcs	.+38     	; 0xc0a <noNatak+0x40>
     be4:	90 91 4b 02 	lds	r25, 0x024B
     be8:	98 32       	cpi	r25, 0x28	; 40
     bea:	78 f4       	brcc	.+30     	; 0xc0a <noNatak+0x40>
     bec:	95 dc       	rcall	.-1750   	; 0x518 <left>
     bee:	10 df       	rcall	.-480    	; 0xa10 <set_color>
     bf0:	80 91 4c 02 	lds	r24, 0x024C
     bf4:	88 32       	cpi	r24, 0x28	; 40
     bf6:	78 f5       	brcc	.+94     	; 0xc56 <noNatak+0x8c>
     bf8:	80 91 4d 02 	lds	r24, 0x024D
     bfc:	89 32       	cpi	r24, 0x29	; 41
     bfe:	58 f1       	brcs	.+86     	; 0xc56 <noNatak+0x8c>
     c00:	80 91 4b 02 	lds	r24, 0x024B
     c04:	88 32       	cpi	r24, 0x28	; 40
     c06:	90 f3       	brcs	.-28     	; 0xbec <noNatak+0x22>
     c08:	26 c0       	rjmp	.+76     	; 0xc56 <noNatak+0x8c>
     c0a:	90 91 4b 02 	lds	r25, 0x024B
     c0e:	99 32       	cpi	r25, 0x29	; 41
     c10:	88 f0       	brcs	.+34     	; 0xc34 <noNatak+0x6a>
     c12:	88 32       	cpi	r24, 0x28	; 40
     c14:	78 f4       	brcc	.+30     	; 0xc34 <noNatak+0x6a>
     c16:	83 dc       	rcall	.-1786   	; 0x51e <right>
     c18:	fb de       	rcall	.-522    	; 0xa10 <set_color>
     c1a:	80 91 4c 02 	lds	r24, 0x024C
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	d0 f4       	brcc	.+52     	; 0xc56 <noNatak+0x8c>
     c22:	80 91 4d 02 	lds	r24, 0x024D
     c26:	88 32       	cpi	r24, 0x28	; 40
     c28:	b0 f4       	brcc	.+44     	; 0xc56 <noNatak+0x8c>
     c2a:	80 91 4b 02 	lds	r24, 0x024B
     c2e:	89 32       	cpi	r24, 0x29	; 41
     c30:	90 f7       	brcc	.-28     	; 0xc16 <noNatak+0x4c>
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <noNatak+0x8c>
     c34:	4d df       	rcall	.-358    	; 0xad0 <correct>
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <noNatak+0x8c>
     c38:	80 91 4d 02 	lds	r24, 0x024D
     c3c:	89 32       	cpi	r24, 0x29	; 41
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <noNatak+0x7e>
     c40:	90 91 4b 02 	lds	r25, 0x024B
     c44:	98 32       	cpi	r25, 0x28	; 40
     c46:	40 f0       	brcs	.+16     	; 0xc58 <noNatak+0x8e>
     c48:	88 32       	cpi	r24, 0x28	; 40
     c4a:	20 f4       	brcc	.+8      	; 0xc54 <noNatak+0x8a>
     c4c:	80 91 4b 02 	lds	r24, 0x024B
     c50:	89 32       	cpi	r24, 0x29	; 41
     c52:	10 f4       	brcc	.+4      	; 0xc58 <noNatak+0x8e>
     c54:	3d df       	rcall	.-390    	; 0xad0 <correct>
     c56:	66 cc       	rjmp	.-1844   	; 0x524 <stop>
     c58:	08 95       	ret

00000c5a <forwardJaa>:
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	08 e2       	ldi	r16, 0x28	; 40
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	0f 2e       	mov	r0, r31
     c6a:	f0 ef       	ldi	r31, 0xF0	; 240
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	ca e2       	ldi	r28, 0x2A	; 42
     c72:	d1 e0       	ldi	r29, 0x01	; 1
     c74:	4b dc       	rcall	.-1898   	; 0x50c <forward>
     c76:	cc de       	rcall	.-616    	; 0xa10 <set_color>
     c78:	80 91 4c 02 	lds	r24, 0x024C
     c7c:	89 32       	cpi	r24, 0x29	; 41
     c7e:	50 f0       	brcs	.+20     	; 0xc94 <forwardJaa+0x3a>
     c80:	80 91 4d 02 	lds	r24, 0x024D
     c84:	89 32       	cpi	r24, 0x29	; 41
     c86:	20 f4       	brcc	.+8      	; 0xc90 <forwardJaa+0x36>
     c88:	80 91 4b 02 	lds	r24, 0x024B
     c8c:	89 32       	cpi	r24, 0x29	; 41
     c8e:	10 f0       	brcs	.+4      	; 0xc94 <forwardJaa+0x3a>
     c90:	cc de       	rcall	.-616    	; 0xa2a <node>
     c92:	11 c0       	rjmp	.+34     	; 0xcb6 <forwardJaa+0x5c>
     c94:	f8 01       	movw	r30, r16
     c96:	f0 82       	st	Z, r15
     c98:	f8 82       	st	Y, r15
     c9a:	80 91 4c 02 	lds	r24, 0x024C
     c9e:	89 32       	cpi	r24, 0x29	; 41
     ca0:	40 f0       	brcs	.+16     	; 0xcb2 <forwardJaa+0x58>
     ca2:	80 91 4d 02 	lds	r24, 0x024D
     ca6:	88 32       	cpi	r24, 0x28	; 40
     ca8:	20 f4       	brcc	.+8      	; 0xcb2 <forwardJaa+0x58>
     caa:	80 91 4b 02 	lds	r24, 0x024B
     cae:	88 32       	cpi	r24, 0x28	; 40
     cb0:	08 f3       	brcs	.-62     	; 0xc74 <forwardJaa+0x1a>
     cb2:	8b df       	rcall	.-234    	; 0xbca <noNatak>
     cb4:	d2 df       	rcall	.-92     	; 0xc5a <forwardJaa>
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	08 95       	ret

00000cc2 <elevate>:
     cc2:	61 11       	cpse	r22, r1
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <elevate+0x8>
     cc6:	d7 cc       	rjmp	.-1618   	; 0x676 <servo_1>
     cc8:	08 95       	ret
     cca:	61 30       	cpi	r22, 0x01	; 1
     ccc:	31 f4       	brne	.+12     	; 0xcda <elevate+0x18>
     cce:	8d 32       	cpi	r24, 0x2D	; 45
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <elevate+0x14>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <elevate+0x16>
     cd6:	8d e2       	ldi	r24, 0x2D	; 45
     cd8:	ce cc       	rjmp	.-1636   	; 0x676 <servo_1>
     cda:	08 95       	ret

00000cdc <open>:
     cdc:	81 11       	cpse	r24, r1
     cde:	06 c0       	rjmp	.+12     	; 0xcec <open+0x10>
     ce0:	10 92 8b 00 	sts	0x008B, r1
     ce4:	83 e8       	ldi	r24, 0x83	; 131
     ce6:	80 93 8a 00 	sts	0x008A, r24
     cea:	08 95       	ret
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	29 f4       	brne	.+10     	; 0xcfa <open+0x1e>
     cf0:	10 92 8d 00 	sts	0x008D, r1
     cf4:	83 e8       	ldi	r24, 0x83	; 131
     cf6:	80 93 8c 00 	sts	0x008C, r24
     cfa:	08 95       	ret

00000cfc <close>:
     cfc:	81 11       	cpse	r24, r1
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <close+0x10>
     d00:	10 92 8b 00 	sts	0x008B, r1
     d04:	83 e2       	ldi	r24, 0x23	; 35
     d06:	80 93 8a 00 	sts	0x008A, r24
     d0a:	08 95       	ret
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	29 f4       	brne	.+10     	; 0xd1a <close+0x1e>
     d10:	10 92 8d 00 	sts	0x008D, r1
     d14:	83 e2       	ldi	r24, 0x23	; 35
     d16:	80 93 8c 00 	sts	0x008C, r24
     d1a:	08 95       	ret

00000d1c <buzzer>:
     d1c:	4e dc       	rcall	.-1892   	; 0x5ba <buzzer_on>
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	8f e7       	ldi	r24, 0x7F	; 127
     d22:	94 e0       	ldi	r25, 0x04	; 4
     d24:	21 50       	subi	r18, 0x01	; 1
     d26:	80 40       	sbci	r24, 0x00	; 0
     d28:	90 40       	sbci	r25, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <buzzer+0x8>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <buzzer+0x12>
     d2e:	00 00       	nop
     d30:	48 cc       	rjmp	.-1904   	; 0x5c2 <buzzer_off>
     d32:	08 95       	ret

00000d34 <lcd>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	3a da       	rcall	.-2956   	; 0x1b2 <lcd_wr_command>
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	a3 da       	rcall	.-2746   	; 0x28a <lcd_cursor>
     d44:	ce 01       	movw	r24, r28
     d46:	93 da       	rcall	.-2778   	; 0x26e <lcd_string>
     d48:	e9 df       	rcall	.-46     	; 0xd1c <buzzer>
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	9c e2       	ldi	r25, 0x2C	; 44
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	80 40       	sbci	r24, 0x00	; 0
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <lcd+0x1c>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <lcd+0x26>
     d5a:	00 00       	nop
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <front>:
     d62:	7b df       	rcall	.-266    	; 0xc5a <forwardJaa>
     d64:	80 91 76 02 	lds	r24, 0x0276
     d68:	90 91 77 02 	lds	r25, 0x0277
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 77 02 	sts	0x0277, r25
     d72:	80 93 76 02 	sts	0x0276, r24
     d76:	08 95       	ret

00000d78 <turnRight>:
     d78:	80 91 4e 02 	lds	r24, 0x024E
     d7c:	90 91 4f 02 	lds	r25, 0x024F
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	39 f4       	brne	.+14     	; 0xd94 <turnRight+0x1c>
     d86:	80 91 50 02 	lds	r24, 0x0250
     d8a:	90 91 51 02 	lds	r25, 0x0251
     d8e:	02 97       	sbiw	r24, 0x02	; 2
     d90:	98 f4       	brcc	.+38     	; 0xdb8 <turnRight+0x40>
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <turnRight+0x2e>
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	81 f4       	brne	.+32     	; 0xdb8 <turnRight+0x40>
     d98:	80 91 50 02 	lds	r24, 0x0250
     d9c:	90 91 51 02 	lds	r25, 0x0251
     da0:	02 97       	sbiw	r24, 0x02	; 2
     da2:	02 97       	sbiw	r24, 0x02	; 2
     da4:	48 f4       	brcc	.+18     	; 0xdb8 <turnRight+0x40>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	80 93 28 01 	sts	0x0128, r24
     dac:	80 93 2a 01 	sts	0x012A, r24
     db0:	8a e5       	ldi	r24, 0x5A	; 90
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	f2 dd       	rcall	.-1052   	; 0x99a <right_degrees>
     db6:	18 c0       	rjmp	.+48     	; 0xde8 <turnRight+0x70>
     db8:	8e e1       	ldi	r24, 0x1E	; 30
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	ee dd       	rcall	.-1060   	; 0x99a <right_degrees>
     dbe:	8a ea       	ldi	r24, 0xAA	; 170
     dc0:	80 93 28 01 	sts	0x0128, r24
     dc4:	80 93 2a 01 	sts	0x012A, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <turnRight+0x54>
     dca:	a9 db       	rcall	.-2222   	; 0x51e <right>
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	fd db       	rcall	.-2054   	; 0x5ca <ADC_Conversion>
     dd0:	86 34       	cpi	r24, 0x46	; 70
     dd2:	d8 f3       	brcs	.-10     	; 0xdca <turnRight+0x52>
     dd4:	a7 db       	rcall	.-2226   	; 0x524 <stop>
     dd6:	2f ef       	ldi	r18, 0xFF	; 255
     dd8:	8f e7       	ldi	r24, 0x7F	; 127
     dda:	94 e0       	ldi	r25, 0x04	; 4
     ddc:	21 50       	subi	r18, 0x01	; 1
     dde:	80 40       	sbci	r24, 0x00	; 0
     de0:	90 40       	sbci	r25, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <turnRight+0x64>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <turnRight+0x6e>
     de6:	00 00       	nop
     de8:	8e e0       	ldi	r24, 0x0E	; 14
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	a3 df       	rcall	.-186    	; 0xd34 <lcd>
     dee:	80 91 4e 02 	lds	r24, 0x024E
     df2:	90 91 4f 02 	lds	r25, 0x024F
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	83 70       	andi	r24, 0x03	; 3
     dfa:	90 78       	andi	r25, 0x80	; 128
     dfc:	99 23       	and	r25, r25
     dfe:	24 f4       	brge	.+8      	; 0xe08 <turnRight+0x90>
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	8c 6f       	ori	r24, 0xFC	; 252
     e04:	9f 6f       	ori	r25, 0xFF	; 255
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	90 93 4f 02 	sts	0x024F, r25
     e0c:	80 93 4e 02 	sts	0x024E, r24
     e10:	80 91 9b 02 	lds	r24, 0x029B
     e14:	90 91 9c 02 	lds	r25, 0x029C
     e18:	86 5a       	subi	r24, 0xA6	; 166
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	90 93 9c 02 	sts	0x029C, r25
     e20:	80 93 9b 02 	sts	0x029B, r24
     e24:	08 95       	ret

00000e26 <turnLeft>:
     e26:	80 91 4e 02 	lds	r24, 0x024E
     e2a:	90 91 4f 02 	lds	r25, 0x024F
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	39 f4       	brne	.+14     	; 0xe42 <turnLeft+0x1c>
     e34:	80 91 50 02 	lds	r24, 0x0250
     e38:	90 91 51 02 	lds	r25, 0x0251
     e3c:	02 97       	sbiw	r24, 0x02	; 2
     e3e:	98 f4       	brcc	.+38     	; 0xe66 <turnLeft+0x40>
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <turnLeft+0x2e>
     e42:	03 97       	sbiw	r24, 0x03	; 3
     e44:	81 f4       	brne	.+32     	; 0xe66 <turnLeft+0x40>
     e46:	80 91 50 02 	lds	r24, 0x0250
     e4a:	90 91 51 02 	lds	r25, 0x0251
     e4e:	02 97       	sbiw	r24, 0x02	; 2
     e50:	02 97       	sbiw	r24, 0x02	; 2
     e52:	48 f4       	brcc	.+18     	; 0xe66 <turnLeft+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 93 28 01 	sts	0x0128, r24
     e5a:	80 93 2a 01 	sts	0x012A, r24
     e5e:	8a e5       	ldi	r24, 0x5A	; 90
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	92 dd       	rcall	.-1244   	; 0x988 <left_degrees>
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <turnLeft+0x5e>
     e66:	8e e1       	ldi	r24, 0x1E	; 30
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	8e dd       	rcall	.-1252   	; 0x988 <left_degrees>
     e6c:	8a ea       	ldi	r24, 0xAA	; 170
     e6e:	80 93 28 01 	sts	0x0128, r24
     e72:	80 93 2a 01 	sts	0x012A, r24
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <turnLeft+0x54>
     e78:	4f db       	rcall	.-2402   	; 0x518 <left>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	a6 db       	rcall	.-2228   	; 0x5ca <ADC_Conversion>
     e7e:	86 34       	cpi	r24, 0x46	; 70
     e80:	d8 f3       	brcs	.-10     	; 0xe78 <turnLeft+0x52>
     e82:	50 db       	rcall	.-2400   	; 0x524 <stop>
     e84:	89 e1       	ldi	r24, 0x19	; 25
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	55 df       	rcall	.-342    	; 0xd34 <lcd>
     e8a:	80 91 4e 02 	lds	r24, 0x024E
     e8e:	90 91 4f 02 	lds	r25, 0x024F
     e92:	03 96       	adiw	r24, 0x03	; 3
     e94:	83 70       	andi	r24, 0x03	; 3
     e96:	90 78       	andi	r25, 0x80	; 128
     e98:	99 23       	and	r25, r25
     e9a:	24 f4       	brge	.+8      	; 0xea4 <turnLeft+0x7e>
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	8c 6f       	ori	r24, 0xFC	; 252
     ea0:	9f 6f       	ori	r25, 0xFF	; 255
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	90 93 4f 02 	sts	0x024F, r25
     ea8:	80 93 4e 02 	sts	0x024E, r24
     eac:	80 91 9b 02 	lds	r24, 0x029B
     eb0:	90 91 9c 02 	lds	r25, 0x029C
     eb4:	86 5a       	subi	r24, 0xA6	; 166
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	90 93 9c 02 	sts	0x029C, r25
     ebc:	80 93 9b 02 	sts	0x029B, r24
     ec0:	08 95       	ret

00000ec2 <turn>:
     ec2:	80 91 4e 02 	lds	r24, 0x024E
     ec6:	90 91 4f 02 	lds	r25, 0x024F
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	81 f4       	brne	.+32     	; 0xeee <turn+0x2c>
     ece:	80 91 50 02 	lds	r24, 0x0250
     ed2:	90 91 51 02 	lds	r25, 0x0251
     ed6:	02 97       	sbiw	r24, 0x02	; 2
     ed8:	02 97       	sbiw	r24, 0x02	; 2
     eda:	d0 f4       	brcc	.+52     	; 0xf10 <turn+0x4e>
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	80 93 28 01 	sts	0x0128, r24
     ee2:	80 93 2a 01 	sts	0x012A, r24
     ee6:	84 eb       	ldi	r24, 0xB4	; 180
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	4e dd       	rcall	.-1380   	; 0x988 <left_degrees>
     eec:	20 c0       	rjmp	.+64     	; 0xf2e <turn+0x6c>
     eee:	02 97       	sbiw	r24, 0x02	; 2
     ef0:	79 f4       	brne	.+30     	; 0xf10 <turn+0x4e>
     ef2:	80 91 50 02 	lds	r24, 0x0250
     ef6:	90 91 51 02 	lds	r25, 0x0251
     efa:	02 97       	sbiw	r24, 0x02	; 2
     efc:	48 f4       	brcc	.+18     	; 0xf10 <turn+0x4e>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	80 93 28 01 	sts	0x0128, r24
     f04:	80 93 2a 01 	sts	0x012A, r24
     f08:	84 eb       	ldi	r24, 0xB4	; 180
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	3d dd       	rcall	.-1414   	; 0x988 <left_degrees>
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <turn+0x6c>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	80 93 28 01 	sts	0x0128, r24
     f16:	80 93 2a 01 	sts	0x012A, r24
     f1a:	86 e9       	ldi	r24, 0x96	; 150
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	34 dd       	rcall	.-1432   	; 0x988 <left_degrees>
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <turn+0x62>
     f22:	fa da       	rcall	.-2572   	; 0x518 <left>
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	51 db       	rcall	.-2398   	; 0x5ca <ADC_Conversion>
     f28:	88 32       	cpi	r24, 0x28	; 40
     f2a:	d8 f3       	brcs	.-10     	; 0xf22 <turn+0x60>
     f2c:	fb da       	rcall	.-2570   	; 0x524 <stop>
     f2e:	8e e1       	ldi	r24, 0x1E	; 30
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	00 df       	rcall	.-512    	; 0xd34 <lcd>
     f34:	80 91 4e 02 	lds	r24, 0x024E
     f38:	90 91 4f 02 	lds	r25, 0x024F
     f3c:	02 96       	adiw	r24, 0x02	; 2
     f3e:	83 70       	andi	r24, 0x03	; 3
     f40:	90 78       	andi	r25, 0x80	; 128
     f42:	99 23       	and	r25, r25
     f44:	24 f4       	brge	.+8      	; 0xf4e <turn+0x8c>
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	8c 6f       	ori	r24, 0xFC	; 252
     f4a:	9f 6f       	ori	r25, 0xFF	; 255
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	90 93 4f 02 	sts	0x024F, r25
     f52:	80 93 4e 02 	sts	0x024E, r24
     f56:	80 91 9b 02 	lds	r24, 0x029B
     f5a:	90 91 9c 02 	lds	r25, 0x029C
     f5e:	8c 54       	subi	r24, 0x4C	; 76
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	90 93 9c 02 	sts	0x029C, r25
     f66:	80 93 9b 02 	sts	0x029B, r24
     f6a:	08 95       	ret

00000f6c <traverseToSort>:
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	80 91 54 02 	lds	r24, 0x0254
     f76:	90 91 55 02 	lds	r25, 0x0255
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	21 f4       	brne	.+8      	; 0xf86 <traverseToSort+0x1a>
     f7e:	10 92 55 02 	sts	0x0255, r1
     f82:	10 92 54 02 	sts	0x0254, r1
     f86:	ce 01       	movw	r24, r28
     f88:	04 97       	sbiw	r24, 0x04	; 4
     f8a:	02 97       	sbiw	r24, 0x02	; 2
     f8c:	88 f5       	brcc	.+98     	; 0xff0 <traverseToSort+0x84>
     f8e:	c4 30       	cpi	r28, 0x04	; 4
     f90:	d1 05       	cpc	r29, r1
     f92:	39 f4       	brne	.+14     	; 0xfa2 <traverseToSort+0x36>
     f94:	80 91 4e 02 	lds	r24, 0x024E
     f98:	90 91 4f 02 	lds	r25, 0x024F
     f9c:	89 2b       	or	r24, r25
     f9e:	51 f0       	breq	.+20     	; 0xfb4 <traverseToSort+0x48>
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <traverseToSort+0x4c>
     fa2:	c5 30       	cpi	r28, 0x05	; 5
     fa4:	d1 05       	cpc	r29, r1
     fa6:	41 f4       	brne	.+16     	; 0xfb8 <traverseToSort+0x4c>
     fa8:	80 91 4e 02 	lds	r24, 0x024E
     fac:	90 91 4f 02 	lds	r25, 0x024F
     fb0:	02 97       	sbiw	r24, 0x02	; 2
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <traverseToSort+0x4c>
     fb4:	e1 de       	rcall	.-574    	; 0xd78 <turnRight>
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <traverseToSort+0x4e>
     fb8:	36 df       	rcall	.-404    	; 0xe26 <turnLeft>
     fba:	d3 de       	rcall	.-602    	; 0xd62 <front>
     fbc:	d2 de       	rcall	.-604    	; 0xd62 <front>
     fbe:	24 97       	sbiw	r28, 0x04	; 4
     fc0:	39 f4       	brne	.+14     	; 0xfd0 <traverseToSort+0x64>
     fc2:	85 e0       	ldi	r24, 0x05	; 5
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 51 02 	sts	0x0251, r25
     fca:	80 93 50 02 	sts	0x0250, r24
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <traverseToSort+0x70>
     fd0:	84 e0       	ldi	r24, 0x04	; 4
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 51 02 	sts	0x0251, r25
     fd8:	80 93 50 02 	sts	0x0250, r24
     fdc:	80 91 76 02 	lds	r24, 0x0276
     fe0:	90 91 77 02 	lds	r25, 0x0277
     fe4:	02 96       	adiw	r24, 0x02	; 2
     fe6:	90 93 77 02 	sts	0x0277, r25
     fea:	80 93 76 02 	sts	0x0276, r24
     fee:	45 c0       	rjmp	.+138    	; 0x107a <traverseToSort+0x10e>
     ff0:	80 91 4e 02 	lds	r24, 0x024E
     ff4:	90 91 4f 02 	lds	r25, 0x024F
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	39 f4       	brne	.+14     	; 0x100c <traverseToSort+0xa0>
     ffe:	80 91 50 02 	lds	r24, 0x0250
    1002:	90 91 51 02 	lds	r25, 0x0251
    1006:	02 97       	sbiw	r24, 0x02	; 2
    1008:	78 f4       	brcc	.+30     	; 0x1028 <traverseToSort+0xbc>
    100a:	09 c0       	rjmp	.+18     	; 0x101e <traverseToSort+0xb2>
    100c:	03 97       	sbiw	r24, 0x03	; 3
    100e:	99 f4       	brne	.+38     	; 0x1036 <traverseToSort+0xca>
    1010:	80 91 50 02 	lds	r24, 0x0250
    1014:	90 91 51 02 	lds	r25, 0x0251
    1018:	82 30       	cpi	r24, 0x02	; 2
    101a:	91 05       	cpc	r25, r1
    101c:	11 f4       	brne	.+4      	; 0x1022 <traverseToSort+0xb6>
    101e:	ac de       	rcall	.-680    	; 0xd78 <turnRight>
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <traverseToSort+0xca>
    1022:	02 97       	sbiw	r24, 0x02	; 2
    1024:	40 f4       	brcc	.+16     	; 0x1036 <traverseToSort+0xca>
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <traverseToSort+0xc8>
    1028:	80 91 50 02 	lds	r24, 0x0250
    102c:	90 91 51 02 	lds	r25, 0x0251
    1030:	02 97       	sbiw	r24, 0x02	; 2
    1032:	09 f4       	brne	.+2      	; 0x1036 <traverseToSort+0xca>
    1034:	f8 de       	rcall	.-528    	; 0xe26 <turnLeft>
    1036:	22 97       	sbiw	r28, 0x02	; 2
    1038:	3c f4       	brge	.+14     	; 0x1048 <traverseToSort+0xdc>
    103a:	80 91 4e 02 	lds	r24, 0x024E
    103e:	90 91 4f 02 	lds	r25, 0x024F
    1042:	89 2b       	or	r24, r25
    1044:	39 f0       	breq	.+14     	; 0x1054 <traverseToSort+0xe8>
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <traverseToSort+0xea>
    1048:	80 91 4e 02 	lds	r24, 0x024E
    104c:	90 91 4f 02 	lds	r25, 0x024F
    1050:	02 97       	sbiw	r24, 0x02	; 2
    1052:	09 f4       	brne	.+2      	; 0x1056 <traverseToSort+0xea>
    1054:	36 df       	rcall	.-404    	; 0xec2 <turn>
    1056:	85 de       	rcall	.-758    	; 0xd62 <front>
    1058:	80 91 87 02 	lds	r24, 0x0287
    105c:	90 91 88 02 	lds	r25, 0x0288
    1060:	81 70       	andi	r24, 0x01	; 1
    1062:	90 78       	andi	r25, 0x80	; 128
    1064:	99 23       	and	r25, r25
    1066:	24 f4       	brge	.+8      	; 0x1070 <traverseToSort+0x104>
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	8e 6f       	ori	r24, 0xFE	; 254
    106c:	9f 6f       	ori	r25, 0xFF	; 255
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	04 96       	adiw	r24, 0x04	; 4
    1072:	90 93 51 02 	sts	0x0251, r25
    1076:	80 93 50 02 	sts	0x0250, r24
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <scan>:
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	1d db       	rcall	.-2502   	; 0x6c0 <red_read>
    1086:	6b db       	rcall	.-2346   	; 0x75e <blue_read>
    1088:	47 db       	rcall	.-2418   	; 0x718 <green_read>
    108a:	80 91 6c 02 	lds	r24, 0x026C
    108e:	90 91 6d 02 	lds	r25, 0x026D
    1092:	aa 27       	eor	r26, r26
    1094:	97 fd       	sbrc	r25, 7
    1096:	a0 95       	com	r26
    1098:	ba 2f       	mov	r27, r26
    109a:	40 91 7e 02 	lds	r20, 0x027E
    109e:	50 91 7f 02 	lds	r21, 0x027F
    10a2:	60 91 80 02 	lds	r22, 0x0280
    10a6:	70 91 81 02 	lds	r23, 0x0281
    10aa:	48 17       	cp	r20, r24
    10ac:	59 07       	cpc	r21, r25
    10ae:	6a 07       	cpc	r22, r26
    10b0:	7b 07       	cpc	r23, r27
    10b2:	d8 f4       	brcc	.+54     	; 0x10ea <scan+0x6a>
    10b4:	40 91 7a 02 	lds	r20, 0x027A
    10b8:	50 91 7b 02 	lds	r21, 0x027B
    10bc:	60 91 7c 02 	lds	r22, 0x027C
    10c0:	70 91 7d 02 	lds	r23, 0x027D
    10c4:	48 17       	cp	r20, r24
    10c6:	59 07       	cpc	r21, r25
    10c8:	6a 07       	cpc	r22, r26
    10ca:	7b 07       	cpc	r23, r27
    10cc:	70 f4       	brcc	.+28     	; 0x10ea <scan+0x6a>
    10ce:	40 91 6e 02 	lds	r20, 0x026E
    10d2:	50 91 6f 02 	lds	r21, 0x026F
    10d6:	60 91 70 02 	lds	r22, 0x0270
    10da:	70 91 71 02 	lds	r23, 0x0271
    10de:	48 17       	cp	r20, r24
    10e0:	59 07       	cpc	r21, r25
    10e2:	6a 07       	cpc	r22, r26
    10e4:	7b 07       	cpc	r23, r27
    10e6:	08 f4       	brcc	.+2      	; 0x10ea <scan+0x6a>
    10e8:	46 c0       	rjmp	.+140    	; 0x1176 <scan+0xf6>
    10ea:	40 91 7e 02 	lds	r20, 0x027E
    10ee:	50 91 7f 02 	lds	r21, 0x027F
    10f2:	60 91 80 02 	lds	r22, 0x0280
    10f6:	70 91 81 02 	lds	r23, 0x0281
    10fa:	80 91 6e 02 	lds	r24, 0x026E
    10fe:	90 91 6f 02 	lds	r25, 0x026F
    1102:	a0 91 70 02 	lds	r26, 0x0270
    1106:	b0 91 71 02 	lds	r27, 0x0271
    110a:	84 17       	cp	r24, r20
    110c:	95 07       	cpc	r25, r21
    110e:	a6 07       	cpc	r26, r22
    1110:	b7 07       	cpc	r27, r23
    1112:	c8 f4       	brcc	.+50     	; 0x1146 <scan+0xc6>
    1114:	00 91 7e 02 	lds	r16, 0x027E
    1118:	10 91 7f 02 	lds	r17, 0x027F
    111c:	20 91 80 02 	lds	r18, 0x0280
    1120:	30 91 81 02 	lds	r19, 0x0281
    1124:	40 91 7a 02 	lds	r20, 0x027A
    1128:	50 91 7b 02 	lds	r21, 0x027B
    112c:	60 91 7c 02 	lds	r22, 0x027C
    1130:	70 91 7d 02 	lds	r23, 0x027D
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	40 17       	cp	r20, r16
    113a:	51 07       	cpc	r21, r17
    113c:	62 07       	cpc	r22, r18
    113e:	73 07       	cpc	r23, r19
    1140:	f8 f4       	brcc	.+62     	; 0x1180 <scan+0x100>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	1d c0       	rjmp	.+58     	; 0x1180 <scan+0x100>
    1146:	40 91 6e 02 	lds	r20, 0x026E
    114a:	50 91 6f 02 	lds	r21, 0x026F
    114e:	60 91 70 02 	lds	r22, 0x0270
    1152:	70 91 71 02 	lds	r23, 0x0271
    1156:	80 91 7a 02 	lds	r24, 0x027A
    115a:	90 91 7b 02 	lds	r25, 0x027B
    115e:	a0 91 7c 02 	lds	r26, 0x027C
    1162:	b0 91 7d 02 	lds	r27, 0x027D
    1166:	84 17       	cp	r24, r20
    1168:	95 07       	cpc	r25, r21
    116a:	a6 07       	cpc	r26, r22
    116c:	b7 07       	cpc	r27, r23
    116e:	30 f4       	brcc	.+12     	; 0x117c <scan+0xfc>
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <scan+0x100>
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <scan+0x100>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <setIndicatorAndColor>:
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd e9       	ldi	r28, 0x9D	; 157
    118c:	d2 e0       	ldi	r29, 0x02	; 2
    118e:	eb e8       	ldi	r30, 0x8B	; 139
    1190:	f2 e0       	ldi	r31, 0x02	; 2
    1192:	a4 e6       	ldi	r26, 0x64	; 100
    1194:	b2 e0       	ldi	r27, 0x02	; 2
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2e ef       	ldi	r18, 0xFE	; 254
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	89 93       	st	Y+, r24
    11a0:	99 93       	st	Y+, r25
    11a2:	33 83       	std	Z+3, r19	; 0x03
    11a4:	22 83       	std	Z+2, r18	; 0x02
    11a6:	31 83       	std	Z+1, r19	; 0x01
    11a8:	20 83       	st	Z, r18
    11aa:	1d 92       	st	X+, r1
    11ac:	1d 92       	st	X+, r1
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	34 96       	adiw	r30, 0x04	; 4
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	91 05       	cpc	r25, r1
    11b6:	99 f7       	brne	.-26     	; 0x119e <setIndicatorAndColor+0x18>
    11b8:	e0 91 9d 02 	lds	r30, 0x029D
    11bc:	f0 91 9e 02 	lds	r31, 0x029E
    11c0:	ee 0f       	add	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	eb 55       	subi	r30, 0x5B	; 91
    11c6:	fd 4f       	sbci	r31, 0xFD	; 253
    11c8:	11 82       	std	Z+1, r1	; 0x01
    11ca:	10 82       	st	Z, r1
    11cc:	e0 91 9f 02 	lds	r30, 0x029F
    11d0:	f0 91 a0 02 	lds	r31, 0x02A0
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	eb 55       	subi	r30, 0x5B	; 91
    11da:	fd 4f       	sbci	r31, 0xFD	; 253
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
    11e4:	e0 91 a1 02 	lds	r30, 0x02A1
    11e8:	f0 91 a2 02 	lds	r31, 0x02A2
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	eb 55       	subi	r30, 0x5B	; 91
    11f2:	fd 4f       	sbci	r31, 0xFD	; 253
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
    11fc:	e0 91 a3 02 	lds	r30, 0x02A3
    1200:	f0 91 a4 02 	lds	r31, 0x02A4
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	eb 55       	subi	r30, 0x5B	; 91
    120a:	fd 4f       	sbci	r31, 0xFD	; 253
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	90 93 86 02 	sts	0x0286, r25
    121c:	80 93 85 02 	sts	0x0285, r24
    1220:	90 93 84 02 	sts	0x0284, r25
    1224:	80 93 83 02 	sts	0x0283, r24
    1228:	90 93 b4 02 	sts	0x02B4, r25
    122c:	80 93 b3 02 	sts	0x02B3, r24
    1230:	90 93 b2 02 	sts	0x02B2, r25
    1234:	80 93 b1 02 	sts	0x02B1, r24
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <terminalCheck1>:
void terminalCheck1()
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
	forward_mm(30);
    1242:	8e e1       	ldi	r24, 0x1E	; 30
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	8e db       	rcall	.-2276   	; 0x964 <forward_mm>
	flag = 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	90 93 55 02 	sts	0x0255, r25
    1250:	80 93 54 02 	sts	0x0254, r24
	if (ct != ot)
    1254:	80 91 50 02 	lds	r24, 0x0250
    1258:	90 91 51 02 	lds	r25, 0x0251
    125c:	20 91 87 02 	lds	r18, 0x0287
    1260:	30 91 88 02 	lds	r19, 0x0288
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	89 f1       	breq	.+98     	; 0x12cc <terminalCheck1+0x8e>
	{
		if (dir == 1 || dir == 3)
    126a:	20 91 4e 02 	lds	r18, 0x024E
    126e:	30 91 4f 02 	lds	r19, 0x024F
    1272:	2d 7f       	andi	r18, 0xFD	; 253
    1274:	21 30       	cpi	r18, 0x01	; 1
    1276:	31 05       	cpc	r19, r1
    1278:	41 f4       	brne	.+16     	; 0x128a <terminalCheck1+0x4c>
		{
			if (ot == 3 || ot == 0)
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	11 f0       	breq	.+4      	; 0x1284 <terminalCheck1+0x46>
    1280:	89 2b       	or	r24, r25
    1282:	11 f4       	brne	.+4      	; 0x1288 <terminalCheck1+0x4a>
				turnRight();
    1284:	79 dd       	rcall	.-1294   	; 0xd78 <turnRight>
    1286:	01 c0       	rjmp	.+2      	; 0x128a <terminalCheck1+0x4c>
			else turnLeft();
    1288:	ce dd       	rcall	.-1124   	; 0xe26 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    128a:	80 91 87 02 	lds	r24, 0x0287
    128e:	90 91 88 02 	lds	r25, 0x0288
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	38 f4       	brcc	.+14     	; 0x12a6 <terminalCheck1+0x68>
    1298:	20 91 4e 02 	lds	r18, 0x024E
    129c:	30 91 4f 02 	lds	r19, 0x024F
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <terminalCheck1+0x7a>
    12a6:	02 97       	sbiw	r24, 0x02	; 2
    12a8:	02 97       	sbiw	r24, 0x02	; 2
    12aa:	38 f4       	brcc	.+14     	; 0x12ba <terminalCheck1+0x7c>
    12ac:	80 91 4e 02 	lds	r24, 0x024E
    12b0:	90 91 4f 02 	lds	r25, 0x024F
    12b4:	89 2b       	or	r24, r25
    12b6:	09 f4       	brne	.+2      	; 0x12ba <terminalCheck1+0x7c>
			turn();
    12b8:	04 de       	rcall	.-1016   	; 0xec2 <turn>
		front();
    12ba:	53 dd       	rcall	.-1370   	; 0xd62 <front>
		ot = ct;
    12bc:	80 91 87 02 	lds	r24, 0x0287
    12c0:	90 91 88 02 	lds	r25, 0x0288
    12c4:	90 93 51 02 	sts	0x0251, r25
    12c8:	80 93 50 02 	sts	0x0250, r24
	}
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    12cc:	80 91 87 02 	lds	r24, 0x0287
    12d0:	90 91 88 02 	lds	r25, 0x0288
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	91 05       	cpc	r25, r1
    12d8:	30 f4       	brcc	.+12     	; 0x12e6 <terminalCheck1+0xa8>
    12da:	20 91 4e 02 	lds	r18, 0x024E
    12de:	30 91 4f 02 	lds	r19, 0x024F
    12e2:	23 2b       	or	r18, r19
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <terminalCheck1+0xba>
    12e6:	02 97       	sbiw	r24, 0x02	; 2
    12e8:	02 97       	sbiw	r24, 0x02	; 2
    12ea:	40 f4       	brcc	.+16     	; 0x12fc <terminalCheck1+0xbe>
    12ec:	80 91 4e 02 	lds	r24, 0x024E
    12f0:	90 91 4f 02 	lds	r25, 0x024F
    12f4:	02 97       	sbiw	r24, 0x02	; 2
    12f6:	11 f4       	brne	.+4      	; 0x12fc <terminalCheck1+0xbe>
		turnRight();
    12f8:	3f dd       	rcall	.-1410   	; 0xd78 <turnRight>
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <terminalCheck1+0xc0>
	else turnLeft();
    12fc:	94 dd       	rcall	.-1240   	; 0xe26 <turnLeft>
	term[ct][0] = scan();
    12fe:	c0 91 87 02 	lds	r28, 0x0287
    1302:	d0 91 88 02 	lds	r29, 0x0288
    1306:	bc de       	rcall	.-648    	; 0x1080 <scan>
    1308:	cc 0f       	add	r28, r28
    130a:	dd 1f       	adc	r29, r29
    130c:	cc 0f       	add	r28, r28
    130e:	dd 1f       	adc	r29, r29
    1310:	c5 57       	subi	r28, 0x75	; 117
    1312:	dd 4f       	sbci	r29, 0xFD	; 253
    1314:	99 83       	std	Y+1, r25	; 0x01
    1316:	88 83       	st	Y, r24
	lcd_print(1, 1, 1111, 4);
    1318:	24 e0       	ldi	r18, 0x04	; 4
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	47 e5       	ldi	r20, 0x57	; 87
    131e:	54 e0       	ldi	r21, 0x04	; 4
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);



	lcd((char*)term[ct][0]);
    1328:	e0 91 87 02 	lds	r30, 0x0287
    132c:	f0 91 88 02 	lds	r31, 0x0288
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	e5 57       	subi	r30, 0x75	; 117
    133a:	fd 4f       	sbci	r31, 0xFD	; 253
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	f9 dc       	rcall	.-1550   	; 0xd34 <lcd>
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1342:	20 91 87 02 	lds	r18, 0x0287
    1346:	30 91 88 02 	lds	r19, 0x0288
    134a:	f9 01       	movw	r30, r18
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	e5 57       	subi	r30, 0x75	; 117
    1356:	fd 4f       	sbci	r31, 0xFD	; 253
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	4f ef       	ldi	r20, 0xFF	; 255
    1360:	94 07       	cpc	r25, r20
    1362:	51 f0       	breq	.+20     	; 0x1378 <terminalCheck1+0x13a>
    1364:	f9 01       	movw	r30, r18
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	e3 56       	subi	r30, 0x63	; 99
    136c:	fd 4f       	sbci	r31, 0xFD	; 253
    136e:	20 81       	ld	r18, Z
    1370:	31 81       	ldd	r19, Z+1	; 0x01
    1372:	82 17       	cp	r24, r18
    1374:	93 07       	cpc	r25, r19
    1376:	49 f4       	brne	.+18     	; 0x138a <terminalCheck1+0x14c>
		total--;
    1378:	80 91 00 02 	lds	r24, 0x0200
    137c:	90 91 01 02 	lds	r25, 0x0201
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	90 93 01 02 	sts	0x0201, r25
    1386:	80 93 00 02 	sts	0x0200, r24
}
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <terminalCheck2>:
void terminalCheck2()
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
	if (flag == 0)
    1394:	80 91 54 02 	lds	r24, 0x0254
    1398:	90 91 55 02 	lds	r25, 0x0255
    139c:	89 2b       	or	r24, r25
    139e:	39 f5       	brne	.+78     	; 0x13ee <terminalCheck2+0x5e>
	{
		if (dir == 0)
    13a0:	80 91 4e 02 	lds	r24, 0x024E
    13a4:	90 91 4f 02 	lds	r25, 0x024F
    13a8:	89 2b       	or	r24, r25
    13aa:	71 f4       	brne	.+28     	; 0x13c8 <terminalCheck2+0x38>
			if (ot == 0 || ot == 1)
    13ac:	80 91 50 02 	lds	r24, 0x0250
    13b0:	90 91 51 02 	lds	r25, 0x0251
    13b4:	02 97       	sbiw	r24, 0x02	; 2
    13b6:	20 f4       	brcc	.+8      	; 0x13c0 <terminalCheck2+0x30>
				forward_mm(30);
    13b8:	8e e1       	ldi	r24, 0x1E	; 30
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	d3 da       	rcall	.-2650   	; 0x964 <forward_mm>
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <terminalCheck2+0x52>
			else back_mm(30);
    13c0:	8e e1       	ldi	r24, 0x1E	; 30
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	d8 da       	rcall	.-2640   	; 0x976 <back_mm>
    13c6:	0d c0       	rjmp	.+26     	; 0x13e2 <terminalCheck2+0x52>
		else if (ot == 0 || ot == 1)
    13c8:	80 91 50 02 	lds	r24, 0x0250
    13cc:	90 91 51 02 	lds	r25, 0x0251
    13d0:	02 97       	sbiw	r24, 0x02	; 2
    13d2:	20 f4       	brcc	.+8      	; 0x13dc <terminalCheck2+0x4c>
			back_mm(30);
    13d4:	8e e1       	ldi	r24, 0x1E	; 30
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	ce da       	rcall	.-2660   	; 0x976 <back_mm>
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <terminalCheck2+0x52>
		else forward_mm(30);
    13dc:	8e e1       	ldi	r24, 0x1E	; 30
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	c1 da       	rcall	.-2686   	; 0x964 <forward_mm>
		flag = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	90 93 55 02 	sts	0x0255, r25
    13ea:	80 93 54 02 	sts	0x0254, r24
	}

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    13ee:	80 91 87 02 	lds	r24, 0x0287
    13f2:	90 91 88 02 	lds	r25, 0x0288
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	91 05       	cpc	r25, r1
    13fa:	30 f4       	brcc	.+12     	; 0x1408 <terminalCheck2+0x78>
    13fc:	20 91 4e 02 	lds	r18, 0x024E
    1400:	30 91 4f 02 	lds	r19, 0x024F
    1404:	23 2b       	or	r18, r19
    1406:	69 f0       	breq	.+26     	; 0x1422 <terminalCheck2+0x92>
    1408:	9c 01       	movw	r18, r24
    140a:	22 50       	subi	r18, 0x02	; 2
    140c:	31 09       	sbc	r19, r1
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	48 f4       	brcc	.+18     	; 0x1426 <terminalCheck2+0x96>
    1414:	40 91 4e 02 	lds	r20, 0x024E
    1418:	50 91 4f 02 	lds	r21, 0x024F
    141c:	42 30       	cpi	r20, 0x02	; 2
    141e:	51 05       	cpc	r21, r1
    1420:	11 f4       	brne	.+4      	; 0x1426 <terminalCheck2+0x96>
		turnLeft();
    1422:	01 dd       	rcall	.-1534   	; 0xe26 <turnLeft>
    1424:	14 c0       	rjmp	.+40     	; 0x144e <terminalCheck2+0xbe>
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1426:	02 97       	sbiw	r24, 0x02	; 2
    1428:	30 f4       	brcc	.+12     	; 0x1436 <terminalCheck2+0xa6>
    142a:	80 91 4e 02 	lds	r24, 0x024E
    142e:	90 91 4f 02 	lds	r25, 0x024F
    1432:	02 97       	sbiw	r24, 0x02	; 2
    1434:	49 f0       	breq	.+18     	; 0x1448 <terminalCheck2+0xb8>
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	40 f4       	brcc	.+16     	; 0x144c <terminalCheck2+0xbc>
    143c:	80 91 4e 02 	lds	r24, 0x024E
    1440:	90 91 4f 02 	lds	r25, 0x024F
    1444:	89 2b       	or	r24, r25
    1446:	11 f4       	brne	.+4      	; 0x144c <terminalCheck2+0xbc>
		turnRight();
    1448:	97 dc       	rcall	.-1746   	; 0xd78 <turnRight>
    144a:	01 c0       	rjmp	.+2      	; 0x144e <terminalCheck2+0xbe>
	else turn();
    144c:	3a dd       	rcall	.-1420   	; 0xec2 <turn>
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
    144e:	c0 91 87 02 	lds	r28, 0x0287
    1452:	d0 91 88 02 	lds	r29, 0x0288
    1456:	14 de       	rcall	.-984    	; 0x1080 <scan>
    1458:	cc 0f       	add	r28, r28
    145a:	dd 1f       	adc	r29, r29
    145c:	cc 0f       	add	r28, r28
    145e:	dd 1f       	adc	r29, r29
    1460:	c5 57       	subi	r28, 0x75	; 117
    1462:	dd 4f       	sbci	r29, 0xFD	; 253
    1464:	9b 83       	std	Y+3, r25	; 0x03
    1466:	8a 83       	std	Y+2, r24	; 0x02


	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1468:	80 91 87 02 	lds	r24, 0x0287
    146c:	90 91 88 02 	lds	r25, 0x0288
    1470:	fc 01       	movw	r30, r24
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	e5 57       	subi	r30, 0x75	; 117
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	22 81       	ldd	r18, Z+2	; 0x02
    1480:	33 81       	ldd	r19, Z+3	; 0x03
    1482:	2f 3f       	cpi	r18, 0xFF	; 255
    1484:	4f ef       	ldi	r20, 0xFF	; 255
    1486:	34 07       	cpc	r19, r20
    1488:	51 f0       	breq	.+20     	; 0x149e <terminalCheck2+0x10e>
    148a:	fc 01       	movw	r30, r24
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	e3 56       	subi	r30, 0x63	; 99
    1492:	fd 4f       	sbci	r31, 0xFD	; 253
    1494:	40 81       	ld	r20, Z
    1496:	51 81       	ldd	r21, Z+1	; 0x01
    1498:	24 17       	cp	r18, r20
    149a:	35 07       	cpc	r19, r21
    149c:	51 f4       	brne	.+20     	; 0x14b2 <terminalCheck2+0x122>
		total--;
    149e:	20 91 00 02 	lds	r18, 0x0200
    14a2:	30 91 01 02 	lds	r19, 0x0201
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	31 09       	sbc	r19, r1
    14aa:	30 93 01 02 	sts	0x0201, r19
    14ae:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
    14b2:	fc 01       	movw	r30, r24
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	ec 59       	subi	r30, 0x9C	; 156
    14ba:	fd 4f       	sbci	r31, 0xFD	; 253
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
	visitedCount++;
    14c4:	80 91 52 02 	lds	r24, 0x0252
    14c8:	90 91 53 02 	lds	r25, 0x0253
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	90 93 53 02 	sts	0x0253, r25
    14d2:	80 93 52 02 	sts	0x0252, r24
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <pick>:

void pick(int side)
{
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ec 01       	movw	r28, r24
	elevate(0, side);//lower
    14e2:	68 2f       	mov	r22, r24
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	ed db       	rcall	.-2086   	; 0xcc2 <elevate>
	open(side);
    14e8:	8c 2f       	mov	r24, r28
    14ea:	f8 db       	rcall	.-2064   	; 0xcdc <open>
	close(side);
    14ec:	8c 2f       	mov	r24, r28
    14ee:	06 dc       	rcall	.-2036   	; 0xcfc <close>
	elevate(45, side);//mid
    14f0:	6c 2f       	mov	r22, r28
    14f2:	8d e2       	ldi	r24, 0x2D	; 45
    14f4:	e6 db       	rcall	.-2100   	; 0xcc2 <elevate>
	armCount--;
    14f6:	80 91 02 02 	lds	r24, 0x0202
    14fa:	90 91 03 02 	lds	r25, 0x0203
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	90 93 03 02 	sts	0x0203, r25
    1504:	80 93 02 02 	sts	0x0202, r24
	if (side == 0)
    1508:	cd 2b       	or	r28, r29
    150a:	21 f4       	brne	.+8      	; 0x1514 <pick+0x38>
		lcd("pickRight");
    150c:	83 e2       	ldi	r24, 0x23	; 35
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	11 dc       	rcall	.-2014   	; 0xd34 <lcd>
    1512:	03 c0       	rjmp	.+6      	; 0x151a <pick+0x3e>
	else
		lcd("pickLeft");
    1514:	8d e2       	ldi	r24, 0x2D	; 45
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	0d dc       	rcall	.-2022   	; 0xd34 <lcd>
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <position>:

void position(int armNo, int side)
{
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	8c 01       	movw	r16, r24
    152a:	eb 01       	movw	r28, r22
	if (ct == ot)
    152c:	20 91 87 02 	lds	r18, 0x0287
    1530:	30 91 88 02 	lds	r19, 0x0288
    1534:	40 91 50 02 	lds	r20, 0x0250
    1538:	50 91 51 02 	lds	r21, 0x0251
    153c:	24 17       	cp	r18, r20
    153e:	35 07       	cpc	r19, r21
    1540:	09 f0       	breq	.+2      	; 0x1544 <position+0x24>
    1542:	7d c0       	rjmp	.+250    	; 0x163e <position+0x11e>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1544:	c9 01       	movw	r24, r18
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	30 f4       	brcc	.+12     	; 0x1558 <position+0x38>
    154c:	40 91 4e 02 	lds	r20, 0x024E
    1550:	50 91 4f 02 	lds	r21, 0x024F
    1554:	45 2b       	or	r20, r21
    1556:	61 f0       	breq	.+24     	; 0x1570 <position+0x50>
    1558:	22 50       	subi	r18, 0x02	; 2
    155a:	31 09       	sbc	r19, r1
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	68 f4       	brcc	.+26     	; 0x157c <position+0x5c>
    1562:	40 91 4e 02 	lds	r20, 0x024E
    1566:	50 91 4f 02 	lds	r21, 0x024F
    156a:	42 30       	cpi	r20, 0x02	; 2
    156c:	51 05       	cpc	r21, r1
    156e:	31 f4       	brne	.+12     	; 0x157c <position+0x5c>
		{
			if (armNo != side)
    1570:	0c 17       	cp	r16, r28
    1572:	1d 07       	cpc	r17, r29
    1574:	09 f4       	brne	.+2      	; 0x1578 <position+0x58>
    1576:	4c c0       	rjmp	.+152    	; 0x1610 <position+0xf0>
				turn();
    1578:	a4 dc       	rcall	.-1720   	; 0xec2 <turn>
    157a:	4a c0       	rjmp	.+148    	; 0x1610 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	91 05       	cpc	r25, r1
    1580:	38 f4       	brcc	.+14     	; 0x1590 <position+0x70>
    1582:	40 91 4e 02 	lds	r20, 0x024E
    1586:	50 91 4f 02 	lds	r21, 0x024F
    158a:	42 30       	cpi	r20, 0x02	; 2
    158c:	51 05       	cpc	r21, r1
    158e:	49 f0       	breq	.+18     	; 0x15a2 <position+0x82>
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	58 f4       	brcc	.+22     	; 0x15ac <position+0x8c>
    1596:	40 91 4e 02 	lds	r20, 0x024E
    159a:	50 91 4f 02 	lds	r21, 0x024F
    159e:	45 2b       	or	r20, r21
    15a0:	29 f4       	brne	.+10     	; 0x15ac <position+0x8c>
		{
			if (armNo == side)
    15a2:	0c 17       	cp	r16, r28
    15a4:	1d 07       	cpc	r17, r29
    15a6:	a1 f5       	brne	.+104    	; 0x1610 <position+0xf0>
				turn();
    15a8:	8c dc       	rcall	.-1768   	; 0xec2 <turn>
    15aa:	32 c0       	rjmp	.+100    	; 0x1610 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	91 05       	cpc	r25, r1
    15b0:	38 f4       	brcc	.+14     	; 0x15c0 <position+0xa0>
    15b2:	40 91 4e 02 	lds	r20, 0x024E
    15b6:	50 91 4f 02 	lds	r21, 0x024F
    15ba:	41 30       	cpi	r20, 0x01	; 1
    15bc:	51 05       	cpc	r21, r1
    15be:	51 f0       	breq	.+20     	; 0x15d4 <position+0xb4>
    15c0:	22 30       	cpi	r18, 0x02	; 2
    15c2:	31 05       	cpc	r19, r1
    15c4:	70 f4       	brcc	.+28     	; 0x15e2 <position+0xc2>
    15c6:	40 91 4e 02 	lds	r20, 0x024E
    15ca:	50 91 4f 02 	lds	r21, 0x024F
    15ce:	43 30       	cpi	r20, 0x03	; 3
    15d0:	51 05       	cpc	r21, r1
    15d2:	39 f4       	brne	.+14     	; 0x15e2 <position+0xc2>
		{
			if (armNo != side)
    15d4:	0c 17       	cp	r16, r28
    15d6:	1d 07       	cpc	r17, r29
    15d8:	11 f0       	breq	.+4      	; 0x15de <position+0xbe>
				turnRight();
    15da:	ce db       	rcall	.-2148   	; 0xd78 <turnRight>
    15dc:	19 c0       	rjmp	.+50     	; 0x1610 <position+0xf0>
			else turnLeft();
    15de:	23 dc       	rcall	.-1978   	; 0xe26 <turnLeft>
    15e0:	17 c0       	rjmp	.+46     	; 0x1610 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    15e2:	02 97       	sbiw	r24, 0x02	; 2
    15e4:	30 f4       	brcc	.+12     	; 0x15f2 <position+0xd2>
    15e6:	80 91 4e 02 	lds	r24, 0x024E
    15ea:	90 91 4f 02 	lds	r25, 0x024F
    15ee:	03 97       	sbiw	r24, 0x03	; 3
    15f0:	49 f0       	breq	.+18     	; 0x1604 <position+0xe4>
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	60 f4       	brcc	.+24     	; 0x1610 <position+0xf0>
    15f8:	80 91 4e 02 	lds	r24, 0x024E
    15fc:	90 91 4f 02 	lds	r25, 0x024F
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	31 f4       	brne	.+12     	; 0x1610 <position+0xf0>
			if (armNo == side)
    1604:	0c 17       	cp	r16, r28
    1606:	1d 07       	cpc	r17, r29
    1608:	11 f4       	brne	.+4      	; 0x160e <position+0xee>
				turnRight();
    160a:	b6 db       	rcall	.-2196   	; 0xd78 <turnRight>
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <position+0xf0>
			else turnLeft();
    160e:	0b dc       	rcall	.-2026   	; 0xe26 <turnLeft>
		if (flag == 1 && (dir == 0 || dir == 2))
    1610:	80 91 54 02 	lds	r24, 0x0254
    1614:	90 91 55 02 	lds	r25, 0x0255
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	09 f0       	breq	.+2      	; 0x161e <position+0xfe>
    161c:	64 c0       	rjmp	.+200    	; 0x16e6 <position+0x1c6>
    161e:	80 91 4e 02 	lds	r24, 0x024E
    1622:	90 91 4f 02 	lds	r25, 0x024F
    1626:	8d 7f       	andi	r24, 0xFD	; 253
    1628:	89 2b       	or	r24, r25
    162a:	09 f0       	breq	.+2      	; 0x162e <position+0x10e>
    162c:	5c c0       	rjmp	.+184    	; 0x16e6 <position+0x1c6>
		{
			back_mm(30);
    162e:	8e e1       	ldi	r24, 0x1E	; 30
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a1 d9       	rcall	.-3262   	; 0x976 <back_mm>
			flag = 0;
    1634:	10 92 55 02 	sts	0x0255, r1
    1638:	10 92 54 02 	sts	0x0254, r1
    163c:	54 c0       	rjmp	.+168    	; 0x16e6 <position+0x1c6>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    163e:	80 91 4e 02 	lds	r24, 0x024E
    1642:	90 91 4f 02 	lds	r25, 0x024F
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	49 f4       	brne	.+18     	; 0x165e <position+0x13e>
			if (ct == 0 || ct == 3)
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	19 f0       	breq	.+6      	; 0x1658 <position+0x138>
    1652:	23 30       	cpi	r18, 0x03	; 3
    1654:	31 05       	cpc	r19, r1
    1656:	11 f4       	brne	.+4      	; 0x165c <position+0x13c>
				turnRight();
    1658:	8f db       	rcall	.-2274   	; 0xd78 <turnRight>
    165a:	01 c0       	rjmp	.+2      	; 0x165e <position+0x13e>
			else turnLeft();
    165c:	e4 db       	rcall	.-2104   	; 0xe26 <turnLeft>
		if (dir == 0 || dir == 2)
    165e:	20 91 4e 02 	lds	r18, 0x024E
    1662:	30 91 4f 02 	lds	r19, 0x024F
    1666:	21 15       	cp	r18, r1
    1668:	31 05       	cpc	r19, r1
    166a:	21 f0       	breq	.+8      	; 0x1674 <position+0x154>
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	91 f5       	brne	.+100    	; 0x16d6 <position+0x1b6>
    1672:	07 c0       	rjmp	.+14     	; 0x1682 <position+0x162>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1674:	80 91 87 02 	lds	r24, 0x0287
    1678:	90 91 88 02 	lds	r25, 0x0288
    167c:	02 97       	sbiw	r24, 0x02	; 2
    167e:	c8 f4       	brcc	.+50     	; 0x16b2 <position+0x192>
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <position+0x170>
    1682:	80 91 87 02 	lds	r24, 0x0287
    1686:	90 91 88 02 	lds	r25, 0x0288
    168a:	02 97       	sbiw	r24, 0x02	; 2
    168c:	02 97       	sbiw	r24, 0x02	; 2
    168e:	88 f4       	brcc	.+34     	; 0x16b2 <position+0x192>
			{
				if (ot != 4 && ot != 5)
    1690:	80 91 50 02 	lds	r24, 0x0250
    1694:	90 91 51 02 	lds	r25, 0x0251
    1698:	04 97       	sbiw	r24, 0x04	; 4
    169a:	02 97       	sbiw	r24, 0x02	; 2
    169c:	10 f0       	brcs	.+4      	; 0x16a2 <position+0x182>
				{
					turnLeft();
    169e:	c3 db       	rcall	.-2170   	; 0xe26 <turnLeft>
					front();
    16a0:	60 db       	rcall	.-2368   	; 0xd62 <front>
				}
				if (armNo == side)
    16a2:	0c 17       	cp	r16, r28
    16a4:	1d 07       	cpc	r17, r29
    16a6:	11 f4       	brne	.+4      	; 0x16ac <position+0x18c>
				{
					front();
    16a8:	5c db       	rcall	.-2376   	; 0xd62 <front>
    16aa:	15 c0       	rjmp	.+42     	; 0x16d6 <position+0x1b6>
				}
				else
				{
					front();
    16ac:	5a db       	rcall	.-2380   	; 0xd62 <front>
					turn();
    16ae:	09 dc       	rcall	.-2030   	; 0xec2 <turn>
    16b0:	12 c0       	rjmp	.+36     	; 0x16d6 <position+0x1b6>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    16b2:	80 91 50 02 	lds	r24, 0x0250
    16b6:	90 91 51 02 	lds	r25, 0x0251
    16ba:	04 97       	sbiw	r24, 0x04	; 4
    16bc:	02 97       	sbiw	r24, 0x02	; 2
    16be:	10 f0       	brcs	.+4      	; 0x16c4 <position+0x1a4>
				{
					turnLeft();
    16c0:	b2 db       	rcall	.-2204   	; 0xe26 <turnLeft>
					front();
    16c2:	4f db       	rcall	.-2402   	; 0xd62 <front>
				}
				if (armNo == side)
    16c4:	0c 17       	cp	r16, r28
    16c6:	1d 07       	cpc	r17, r29
    16c8:	19 f4       	brne	.+6      	; 0x16d0 <position+0x1b0>
				{
					turn();
    16ca:	fb db       	rcall	.-2058   	; 0xec2 <turn>
					front();
    16cc:	4a db       	rcall	.-2412   	; 0xd62 <front>
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <position+0x1b6>
				}
				else
				{
					turn();
    16d0:	f8 db       	rcall	.-2064   	; 0xec2 <turn>
					front();
    16d2:	47 db       	rcall	.-2418   	; 0xd62 <front>
					turn();
    16d4:	f6 db       	rcall	.-2068   	; 0xec2 <turn>
				}
			}
		}
		ot = ct;
    16d6:	80 91 87 02 	lds	r24, 0x0287
    16da:	90 91 88 02 	lds	r25, 0x0288
    16de:	90 93 51 02 	sts	0x0251, r25
    16e2:	80 93 50 02 	sts	0x0250, r24
	}
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <pickNode>:
void pickNode(int armNo, int side)
{
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	8c 01       	movw	r16, r24
    16fa:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    16fc:	fc 01       	movw	r30, r24
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	ef 54       	subi	r30, 0x4F	; 79
    1704:	fd 4f       	sbci	r31, 0xFD	; 253
    1706:	a0 91 87 02 	lds	r26, 0x0287
    170a:	b0 91 88 02 	lds	r27, 0x0288
    170e:	aa 0f       	add	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	a6 0f       	add	r26, r22
    1714:	b7 1f       	adc	r27, r23
    1716:	aa 0f       	add	r26, r26
    1718:	bb 1f       	adc	r27, r27
    171a:	a5 57       	subi	r26, 0x75	; 117
    171c:	bd 4f       	sbci	r27, 0xFD	; 253
    171e:	8d 91       	ld	r24, X+
    1720:	9c 91       	ld	r25, X
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
	position(armNo, side);
    1726:	c8 01       	movw	r24, r16
    1728:	fb de       	rcall	.-522    	; 0x1520 <position>
	pick(armNo);
    172a:	c8 01       	movw	r24, r16
    172c:	d7 de       	rcall	.-594    	; 0x14dc <pick>
	term[ct][side] = -1;
    172e:	80 91 87 02 	lds	r24, 0x0287
    1732:	90 91 88 02 	lds	r25, 0x0288
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	c8 0f       	add	r28, r24
    173c:	d9 1f       	adc	r29, r25
    173e:	cc 0f       	add	r28, r28
    1740:	dd 1f       	adc	r29, r29
    1742:	c5 57       	subi	r28, 0x75	; 117
    1744:	dd 4f       	sbci	r29, 0xFD	; 253
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	9f ef       	ldi	r25, 0xFF	; 255
    174a:	99 83       	std	Y+1, r25	; 0x01
    174c:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	08 95       	ret

00001758 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
    1762:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    1764:	fc 01       	movw	r30, r24
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	ef 54       	subi	r30, 0x4F	; 79
    176c:	fd 4f       	sbci	r31, 0xFD	; 253
    176e:	db 01       	movw	r26, r22
    1770:	aa 0f       	add	r26, r26
    1772:	bb 1f       	adc	r27, r27
    1774:	ad 57       	subi	r26, 0x7D	; 125
    1776:	bd 4f       	sbci	r27, 0xFD	; 253
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1780:	c6 17       	cp	r28, r22
    1782:	d7 07       	cpc	r29, r23
    1784:	39 f4       	brne	.+14     	; 0x1794 <pickSort+0x3c>
    1786:	80 91 4e 02 	lds	r24, 0x024E
    178a:	90 91 4f 02 	lds	r25, 0x024F
    178e:	89 2b       	or	r24, r25
    1790:	49 f4       	brne	.+18     	; 0x17a4 <pickSort+0x4c>
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <pickSort+0x48>
    1794:	80 91 4e 02 	lds	r24, 0x024E
    1798:	90 91 4f 02 	lds	r25, 0x024F
    179c:	02 97       	sbiw	r24, 0x02	; 2
    179e:	11 f4       	brne	.+4      	; 0x17a4 <pickSort+0x4c>
		turn();
    17a0:	90 db       	rcall	.-2272   	; 0xec2 <turn>
    17a2:	0c c0       	rjmp	.+24     	; 0x17bc <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    17a4:	80 91 4e 02 	lds	r24, 0x024E
    17a8:	90 91 4f 02 	lds	r25, 0x024F
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	29 f4       	brne	.+10     	; 0x17bc <pickSort+0x64>
			if (armNo == 0)
    17b2:	20 97       	sbiw	r28, 0x00	; 0
    17b4:	11 f4       	brne	.+4      	; 0x17ba <pickSort+0x62>
				turnLeft();
    17b6:	37 db       	rcall	.-2450   	; 0xe26 <turnLeft>
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <pickSort+0x64>
			else turnRight();
    17ba:	de da       	rcall	.-2628   	; 0xd78 <turnRight>
	}
	pick(armNo);
    17bc:	ce 01       	movw	r24, r28
    17be:	8e de       	rcall	.-740    	; 0x14dc <pick>
	sort[sortNo] = -1;
    17c0:	f8 01       	movw	r30, r16
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ed 57       	subi	r30, 0x7D	; 125
    17c8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <pickup>:
void pickup()
{
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    17e8:	20 91 87 02 	lds	r18, 0x0287
    17ec:	30 91 88 02 	lds	r19, 0x0288
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	30 f4       	brcc	.+12     	; 0x1802 <pickup+0x26>
    17f6:	80 91 4e 02 	lds	r24, 0x024E
    17fa:	90 91 4f 02 	lds	r25, 0x024F
    17fe:	02 97       	sbiw	r24, 0x02	; 2
    1800:	79 f0       	breq	.+30     	; 0x1820 <pickup+0x44>
    1802:	c9 01       	movw	r24, r18
    1804:	02 97       	sbiw	r24, 0x02	; 2
    1806:	02 97       	sbiw	r24, 0x02	; 2
    1808:	80 f4       	brcc	.+32     	; 0x182a <pickup+0x4e>
    180a:	80 91 4e 02 	lds	r24, 0x024E
    180e:	90 91 4f 02 	lds	r25, 0x024F
    1812:	89 2b       	or	r24, r25
    1814:	79 f0       	breq	.+30     	; 0x1834 <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1816:	c1 e0       	ldi	r28, 0x01	; 1
    1818:	d0 e0       	ldi	r29, 0x00	; 0
    181a:	00 e0       	ldi	r16, 0x00	; 0
    181c:	10 e0       	ldi	r17, 0x00	; 0
    181e:	0e c0       	rjmp	.+28     	; 0x183c <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1820:	c0 e0       	ldi	r28, 0x00	; 0
    1822:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1824:	01 e0       	ldi	r16, 0x01	; 1
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	09 c0       	rjmp	.+18     	; 0x183c <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    182a:	c1 e0       	ldi	r28, 0x01	; 1
    182c:	d0 e0       	ldi	r29, 0x00	; 0
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	04 c0       	rjmp	.+8      	; 0x183c <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1834:	c0 e0       	ldi	r28, 0x00	; 0
    1836:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1838:	01 e0       	ldi	r16, 0x01	; 1
    183a:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    183c:	f9 01       	movw	r30, r18
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ec 59       	subi	r30, 0x9C	; 156
    1844:	fd 4f       	sbci	r31, 0xFD	; 253
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	89 2b       	or	r24, r25
    184c:	79 f4       	brne	.+30     	; 0x186c <pickup+0x90>
		if (term[ct][0] == -2)
    184e:	f9 01       	movw	r30, r18
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	e5 57       	subi	r30, 0x75	; 117
    185a:	fd 4f       	sbci	r31, 0xFD	; 253
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	02 96       	adiw	r24, 0x02	; 2
    1862:	19 f4       	brne	.+6      	; 0x186a <pickup+0x8e>
		{
		terminalCheck1();
    1864:	ec dc       	rcall	.-1576   	; 0x123e <terminalCheck1>
		terminalCheck2();
    1866:	94 dd       	rcall	.-1240   	; 0x1390 <terminalCheck2>
    1868:	01 c0       	rjmp	.+2      	; 0x186c <pickup+0x90>
		}
		else	terminalCheck2();
    186a:	92 dd       	rcall	.-1244   	; 0x1390 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    186c:	20 91 87 02 	lds	r18, 0x0287
    1870:	30 91 88 02 	lds	r19, 0x0288
    1874:	f9 01       	movw	r30, r18
    1876:	ee 0f       	add	r30, r30
    1878:	ff 1f       	adc	r31, r31
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	e5 57       	subi	r30, 0x75	; 117
    1880:	fd 4f       	sbci	r31, 0xFD	; 253
    1882:	40 81       	ld	r20, Z
    1884:	51 81       	ldd	r21, Z+1	; 0x01
    1886:	f9 01       	movw	r30, r18
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	e3 56       	subi	r30, 0x63	; 99
    188e:	fd 4f       	sbci	r31, 0xFD	; 253
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	48 17       	cp	r20, r24
    1896:	59 07       	cpc	r21, r25
    1898:	21 f0       	breq	.+8      	; 0x18a2 <pickup+0xc6>
    189a:	4f 3f       	cpi	r20, 0xFF	; 255
    189c:	6f ef       	ldi	r22, 0xFF	; 255
    189e:	56 07       	cpc	r21, r22
    18a0:	89 f4       	brne	.+34     	; 0x18c4 <pickup+0xe8>
    18a2:	f9 01       	movw	r30, r18
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	e5 57       	subi	r30, 0x75	; 117
    18ae:	fd 4f       	sbci	r31, 0xFD	; 253
    18b0:	62 81       	ldd	r22, Z+2	; 0x02
    18b2:	73 81       	ldd	r23, Z+3	; 0x03
    18b4:	86 17       	cp	r24, r22
    18b6:	97 07       	cpc	r25, r23
    18b8:	09 f4       	brne	.+2      	; 0x18bc <pickup+0xe0>
    18ba:	ee c1       	rjmp	.+988    	; 0x1c98 <pickup+0x4bc>
    18bc:	6f 3f       	cpi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <pickup+0xe8>
    18c2:	ea c1       	rjmp	.+980    	; 0x1c98 <pickup+0x4bc>
		{
			if (armCount == 2)
    18c4:	60 91 02 02 	lds	r22, 0x0202
    18c8:	70 91 03 02 	lds	r23, 0x0203
    18cc:	62 30       	cpi	r22, 0x02	; 2
    18ce:	71 05       	cpc	r23, r1
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <pickup+0xf8>
    18d2:	b0 c0       	rjmp	.+352    	; 0x1a34 <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    18d4:	e0 91 ad 02 	lds	r30, 0x02AD
    18d8:	f0 91 ae 02 	lds	r31, 0x02AE
    18dc:	df 01       	movw	r26, r30
    18de:	aa 0f       	add	r26, r26
    18e0:	bb 1f       	adc	r27, r27
    18e2:	a3 56       	subi	r26, 0x63	; 99
    18e4:	bd 4f       	sbci	r27, 0xFD	; 253
    18e6:	6d 91       	ld	r22, X+
    18e8:	7c 91       	ld	r23, X
    18ea:	46 17       	cp	r20, r22
    18ec:	57 07       	cpc	r21, r23
    18ee:	79 f0       	breq	.+30     	; 0x190e <pickup+0x132>
    18f0:	d9 01       	movw	r26, r18
    18f2:	aa 0f       	add	r26, r26
    18f4:	bb 1f       	adc	r27, r27
    18f6:	aa 0f       	add	r26, r26
    18f8:	bb 1f       	adc	r27, r27
    18fa:	a5 57       	subi	r26, 0x75	; 117
    18fc:	bd 4f       	sbci	r27, 0xFD	; 253
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	ed 90       	ld	r14, X+
    1902:	fc 90       	ld	r15, X
    1904:	13 97       	sbiw	r26, 0x03	; 3
    1906:	6e 15       	cp	r22, r14
    1908:	7f 05       	cpc	r23, r15
    190a:	59 f4       	brne	.+22     	; 0x1922 <pickup+0x146>
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	c8 01       	movw	r24, r16
    1914:	ed de       	rcall	.-550    	; 0x16f0 <pickNode>
    1916:	8e c0       	rjmp	.+284    	; 0x1a34 <pickup+0x258>
					else	pickNode(arm1, 1);
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	ce 01       	movw	r24, r28
    191e:	e8 de       	rcall	.-560    	; 0x16f0 <pickNode>
    1920:	89 c0       	rjmp	.+274    	; 0x1a34 <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1922:	8e 15       	cp	r24, r14
    1924:	9f 05       	cpc	r25, r15
    1926:	09 f4       	brne	.+2      	; 0x192a <pickup+0x14e>
    1928:	4e c0       	rjmp	.+156    	; 0x19c6 <pickup+0x1ea>
    192a:	ef 20       	and	r14, r15
    192c:	e0 94       	com	r14
    192e:	09 f4       	brne	.+2      	; 0x1932 <pickup+0x156>
    1930:	4a c0       	rjmp	.+148    	; 0x19c6 <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1932:	48 17       	cp	r20, r24
    1934:	59 07       	cpc	r21, r25
    1936:	69 f0       	breq	.+26     	; 0x1952 <pickup+0x176>
    1938:	4f 3f       	cpi	r20, 0xFF	; 255
    193a:	af ef       	ldi	r26, 0xFF	; 255
    193c:	5a 07       	cpc	r21, r26
    193e:	49 f0       	breq	.+18     	; 0x1952 <pickup+0x176>
					{
						pickNode(arm1, 1);
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	ce 01       	movw	r24, r28
    1946:	d4 de       	rcall	.-600    	; 0x16f0 <pickNode>
						pickNode(arm0, 0);
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	c8 01       	movw	r24, r16
    194e:	d0 de       	rcall	.-608    	; 0x16f0 <pickNode>
    1950:	71 c0       	rjmp	.+226    	; 0x1a34 <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1952:	21 70       	andi	r18, 0x01	; 1
    1954:	30 78       	andi	r19, 0x80	; 128
    1956:	33 23       	and	r19, r19
    1958:	34 f4       	brge	.+12     	; 0x1966 <pickup+0x18a>
    195a:	21 50       	subi	r18, 0x01	; 1
    195c:	31 09       	sbc	r19, r1
    195e:	2e 6f       	ori	r18, 0xFE	; 254
    1960:	3f 6f       	ori	r19, 0xFF	; 255
    1962:	2f 5f       	subi	r18, 0xFF	; 255
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	d9 01       	movw	r26, r18
    1968:	aa 0f       	add	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	ad 57       	subi	r26, 0x7D	; 125
    196e:	bd 4f       	sbci	r27, 0xFD	; 253
    1970:	2d 91       	ld	r18, X+
    1972:	3c 91       	ld	r19, X
    1974:	2f 3f       	cpi	r18, 0xFF	; 255
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	09 f1       	breq	.+66     	; 0x19bc <pickup+0x1e0>
    197a:	df 01       	movw	r26, r30
    197c:	aa 0f       	add	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	aa 0f       	add	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	a5 57       	subi	r26, 0x75	; 117
    1986:	bd 4f       	sbci	r27, 0xFD	; 253
    1988:	2d 91       	ld	r18, X+
    198a:	3c 91       	ld	r19, X
    198c:	62 17       	cp	r22, r18
    198e:	73 07       	cpc	r23, r19
    1990:	a9 f0       	breq	.+42     	; 0x19bc <pickup+0x1e0>
    1992:	2f 3f       	cpi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	91 f0       	breq	.+36     	; 0x19bc <pickup+0x1e0>
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	ee 0f       	add	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	e5 57       	subi	r30, 0x75	; 117
    19a2:	fd 4f       	sbci	r31, 0xFD	; 253
    19a4:	22 81       	ldd	r18, Z+2	; 0x02
    19a6:	33 81       	ldd	r19, Z+3	; 0x03
    19a8:	62 17       	cp	r22, r18
    19aa:	73 07       	cpc	r23, r19
    19ac:	39 f0       	breq	.+14     	; 0x19bc <pickup+0x1e0>
    19ae:	2f 3f       	cpi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	21 f0       	breq	.+8      	; 0x19bc <pickup+0x1e0>
    19b4:	48 17       	cp	r20, r24
    19b6:	59 07       	cpc	r21, r25
    19b8:	09 f0       	breq	.+2      	; 0x19bc <pickup+0x1e0>
    19ba:	6e c1       	rjmp	.+732    	; 0x1c98 <pickup+0x4bc>
						pickNode(arm1, 1);
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	ce 01       	movw	r24, r28
    19c2:	96 de       	rcall	.-724    	; 0x16f0 <pickNode>
    19c4:	37 c0       	rjmp	.+110    	; 0x1a34 <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    19c6:	48 17       	cp	r20, r24
    19c8:	59 07       	cpc	r21, r25
    19ca:	09 f4       	brne	.+2      	; 0x19ce <pickup+0x1f2>
    19cc:	65 c1       	rjmp	.+714    	; 0x1c98 <pickup+0x4bc>
    19ce:	4f 3f       	cpi	r20, 0xFF	; 255
    19d0:	5f 4f       	sbci	r21, 0xFF	; 255
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <pickup+0x1fa>
    19d4:	61 c1       	rjmp	.+706    	; 0x1c98 <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    19d6:	21 70       	andi	r18, 0x01	; 1
    19d8:	30 78       	andi	r19, 0x80	; 128
    19da:	33 23       	and	r19, r19
    19dc:	34 f4       	brge	.+12     	; 0x19ea <pickup+0x20e>
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	31 09       	sbc	r19, r1
    19e2:	2e 6f       	ori	r18, 0xFE	; 254
    19e4:	3f 6f       	ori	r19, 0xFF	; 255
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	d9 01       	movw	r26, r18
    19ec:	aa 0f       	add	r26, r26
    19ee:	bb 1f       	adc	r27, r27
    19f0:	ad 57       	subi	r26, 0x7D	; 125
    19f2:	bd 4f       	sbci	r27, 0xFD	; 253
    19f4:	8d 91       	ld	r24, X+
    19f6:	9c 91       	ld	r25, X
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	c1 f0       	breq	.+48     	; 0x1a2c <pickup+0x250>
    19fc:	df 01       	movw	r26, r30
    19fe:	aa 0f       	add	r26, r26
    1a00:	bb 1f       	adc	r27, r27
    1a02:	aa 0f       	add	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	a5 57       	subi	r26, 0x75	; 117
    1a08:	bd 4f       	sbci	r27, 0xFD	; 253
    1a0a:	8d 91       	ld	r24, X+
    1a0c:	9c 91       	ld	r25, X
    1a0e:	11 97       	sbiw	r26, 0x01	; 1
    1a10:	68 17       	cp	r22, r24
    1a12:	79 07       	cpc	r23, r25
    1a14:	59 f0       	breq	.+22     	; 0x1a2c <pickup+0x250>
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	49 f0       	breq	.+18     	; 0x1a2c <pickup+0x250>
    1a1a:	fd 01       	movw	r30, r26
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	68 17       	cp	r22, r24
    1a22:	79 07       	cpc	r23, r25
    1a24:	19 f0       	breq	.+6      	; 0x1a2c <pickup+0x250>
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <pickup+0x250>
    1a2a:	36 c1       	rjmp	.+620    	; 0x1c98 <pickup+0x4bc>
						pickNode(arm0, 0);
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	c8 01       	movw	r24, r16
    1a32:	5e de       	rcall	.-836    	; 0x16f0 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    1a34:	80 91 02 02 	lds	r24, 0x0202
    1a38:	90 91 03 02 	lds	r25, 0x0203
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <pickup+0x266>
    1a40:	2b c1       	rjmp	.+598    	; 0x1c98 <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1a42:	f8 01       	movw	r30, r16
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	ef 54       	subi	r30, 0x4F	; 79
    1a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <pickup+0x27a>
					a1 = arm0;
    1a54:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1a56:	be 01       	movw	r22, r28
    1a58:	6f 5f       	subi	r22, 0xFF	; 255
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	61 70       	andi	r22, 0x01	; 1
    1a5e:	70 78       	andi	r23, 0x80	; 128
    1a60:	77 23       	and	r23, r23
    1a62:	34 f4       	brge	.+12     	; 0x1a70 <pickup+0x294>
    1a64:	61 50       	subi	r22, 0x01	; 1
    1a66:	71 09       	sbc	r23, r1
    1a68:	6e 6f       	ori	r22, 0xFE	; 254
    1a6a:	7f 6f       	ori	r23, 0xFF	; 255
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1a70:	80 91 87 02 	lds	r24, 0x0287
    1a74:	90 91 88 02 	lds	r25, 0x0288
    1a78:	9c 01       	movw	r18, r24
    1a7a:	21 70       	andi	r18, 0x01	; 1
    1a7c:	30 78       	andi	r19, 0x80	; 128
    1a7e:	33 23       	and	r19, r19
    1a80:	34 f4       	brge	.+12     	; 0x1a8e <pickup+0x2b2>
    1a82:	21 50       	subi	r18, 0x01	; 1
    1a84:	31 09       	sbc	r19, r1
    1a86:	2e 6f       	ori	r18, 0xFE	; 254
    1a88:	3f 6f       	ori	r19, 0xFF	; 255
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	f9 01       	movw	r30, r18
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ed 57       	subi	r30, 0x7D	; 125
    1a96:	fd 4f       	sbci	r31, 0xFD	; 253
    1a98:	20 81       	ld	r18, Z
    1a9a:	31 81       	ldd	r19, Z+1	; 0x01
    1a9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a9e:	af ef       	ldi	r26, 0xFF	; 255
    1aa0:	3a 07       	cpc	r19, r26
    1aa2:	d9 f5       	brne	.+118    	; 0x1b1a <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	ec 0f       	add	r30, r28
    1aac:	fd 1f       	adc	r31, r29
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	e5 57       	subi	r30, 0x75	; 117
    1ab4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab6:	20 81       	ld	r18, Z
    1ab8:	31 81       	ldd	r19, Z+1	; 0x01
    1aba:	2f 3f       	cpi	r18, 0xFF	; 255
    1abc:	ef ef       	ldi	r30, 0xFF	; 255
    1abe:	3e 07       	cpc	r19, r30
    1ac0:	71 f0       	breq	.+28     	; 0x1ade <pickup+0x302>
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e3 56       	subi	r30, 0x63	; 99
    1aca:	fd 4f       	sbci	r31, 0xFD	; 253
    1acc:	40 81       	ld	r20, Z
    1ace:	51 81       	ldd	r21, Z+1	; 0x01
    1ad0:	24 17       	cp	r18, r20
    1ad2:	35 07       	cpc	r19, r21
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <pickup+0x302>
						pickNode(a1, a1);
    1ad6:	be 01       	movw	r22, r28
    1ad8:	ce 01       	movw	r24, r28
    1ada:	0a de       	rcall	.-1004   	; 0x16f0 <pickNode>
    1adc:	dd c0       	rjmp	.+442    	; 0x1c98 <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1ade:	fc 01       	movw	r30, r24
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	e6 0f       	add	r30, r22
    1ae6:	f7 1f       	adc	r31, r23
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	e5 57       	subi	r30, 0x75	; 117
    1aee:	fd 4f       	sbci	r31, 0xFD	; 253
    1af0:	20 81       	ld	r18, Z
    1af2:	31 81       	ldd	r19, Z+1	; 0x01
    1af4:	2f 3f       	cpi	r18, 0xFF	; 255
    1af6:	4f ef       	ldi	r20, 0xFF	; 255
    1af8:	34 07       	cpc	r19, r20
    1afa:	09 f4       	brne	.+2      	; 0x1afe <pickup+0x322>
    1afc:	cd c0       	rjmp	.+410    	; 0x1c98 <pickup+0x4bc>
    1afe:	fc 01       	movw	r30, r24
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	e3 56       	subi	r30, 0x63	; 99
    1b06:	fd 4f       	sbci	r31, 0xFD	; 253
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	28 17       	cp	r18, r24
    1b0e:	39 07       	cpc	r19, r25
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <pickup+0x338>
    1b12:	c2 c0       	rjmp	.+388    	; 0x1c98 <pickup+0x4bc>
						pickNode(a1, a2);
    1b14:	ce 01       	movw	r24, r28
    1b16:	ec dd       	rcall	.-1064   	; 0x16f0 <pickNode>
    1b18:	bf c0       	rjmp	.+382    	; 0x1c98 <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1b1a:	40 91 ad 02 	lds	r20, 0x02AD
    1b1e:	50 91 ae 02 	lds	r21, 0x02AE
    1b22:	fa 01       	movw	r30, r20
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	e3 56       	subi	r30, 0x63	; 99
    1b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2c:	01 90       	ld	r0, Z+
    1b2e:	f0 81       	ld	r31, Z
    1b30:	e0 2d       	mov	r30, r0
    1b32:	dc 01       	movw	r26, r24
    1b34:	aa 0f       	add	r26, r26
    1b36:	bb 1f       	adc	r27, r27
    1b38:	aa 0f       	add	r26, r26
    1b3a:	bb 1f       	adc	r27, r27
    1b3c:	a5 57       	subi	r26, 0x75	; 117
    1b3e:	bd 4f       	sbci	r27, 0xFD	; 253
    1b40:	0d 90       	ld	r0, X+
    1b42:	bc 91       	ld	r27, X
    1b44:	a0 2d       	mov	r26, r0
    1b46:	ae 17       	cp	r26, r30
    1b48:	bf 07       	cpc	r27, r31
    1b4a:	71 f0       	breq	.+28     	; 0x1b68 <pickup+0x38c>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	aa 0f       	add	r26, r26
    1b50:	bb 1f       	adc	r27, r27
    1b52:	aa 0f       	add	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	a5 57       	subi	r26, 0x75	; 117
    1b58:	bd 4f       	sbci	r27, 0xFD	; 253
    1b5a:	12 96       	adiw	r26, 0x02	; 2
    1b5c:	0d 90       	ld	r0, X+
    1b5e:	bc 91       	ld	r27, X
    1b60:	a0 2d       	mov	r26, r0
    1b62:	ea 17       	cp	r30, r26
    1b64:	fb 07       	cpc	r31, r27
    1b66:	d9 f5       	brne	.+118    	; 0x1bde <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1b68:	da 01       	movw	r26, r20
    1b6a:	aa 0f       	add	r26, r26
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	ac 59       	subi	r26, 0x9C	; 156
    1b70:	bd 4f       	sbci	r27, 0xFD	; 253
    1b72:	2d 91       	ld	r18, X+
    1b74:	3c 91       	ld	r19, X
    1b76:	21 30       	cpi	r18, 0x01	; 1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <pickup+0x3a2>
    1b7c:	8d c0       	rjmp	.+282    	; 0x1c98 <pickup+0x4bc>
    1b7e:	da 01       	movw	r26, r20
    1b80:	aa 0f       	add	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	aa 0f       	add	r26, r26
    1b86:	bb 1f       	adc	r27, r27
    1b88:	a5 57       	subi	r26, 0x75	; 117
    1b8a:	bd 4f       	sbci	r27, 0xFD	; 253
    1b8c:	2d 91       	ld	r18, X+
    1b8e:	3c 91       	ld	r19, X
    1b90:	2f 3f       	cpi	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	79 f0       	breq	.+30     	; 0x1bb4 <pickup+0x3d8>
    1b96:	da 01       	movw	r26, r20
    1b98:	aa 0f       	add	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	aa 0f       	add	r26, r26
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	a5 57       	subi	r26, 0x75	; 117
    1ba2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ba4:	12 96       	adiw	r26, 0x02	; 2
    1ba6:	2d 91       	ld	r18, X+
    1ba8:	3c 91       	ld	r19, X
    1baa:	13 97       	sbiw	r26, 0x03	; 3
    1bac:	2f 3f       	cpi	r18, 0xFF	; 255
    1bae:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <pickup+0x3d8>
    1bb2:	72 c0       	rjmp	.+228    	; 0x1c98 <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	8c 0f       	add	r24, r28
    1bba:	9d 1f       	adc	r25, r29
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	aa 0f       	add	r26, r26
    1bc0:	bb 1f       	adc	r27, r27
    1bc2:	a5 57       	subi	r26, 0x75	; 117
    1bc4:	bd 4f       	sbci	r27, 0xFD	; 253
    1bc6:	8d 91       	ld	r24, X+
    1bc8:	9c 91       	ld	r25, X
    1bca:	e8 17       	cp	r30, r24
    1bcc:	f9 07       	cpc	r31, r25
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <pickup+0x3fc>
								pickNode(a1, a1);
    1bd0:	be 01       	movw	r22, r28
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	8d dd       	rcall	.-1254   	; 0x16f0 <pickNode>
    1bd6:	60 c0       	rjmp	.+192    	; 0x1c98 <pickup+0x4bc>
							else pickNode(a1, a2);
    1bd8:	ce 01       	movw	r24, r28
    1bda:	8a dd       	rcall	.-1260   	; 0x16f0 <pickNode>
    1bdc:	5d c0       	rjmp	.+186    	; 0x1c98 <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1bde:	dc 01       	movw	r26, r24
    1be0:	aa 0f       	add	r26, r26
    1be2:	bb 1f       	adc	r27, r27
    1be4:	a3 56       	subi	r26, 0x63	; 99
    1be6:	bd 4f       	sbci	r27, 0xFD	; 253
    1be8:	0d 90       	ld	r0, X+
    1bea:	bc 91       	ld	r27, X
    1bec:	a0 2d       	mov	r26, r0
    1bee:	2a 17       	cp	r18, r26
    1bf0:	3b 07       	cpc	r19, r27
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <pickup+0x41a>
    1bf4:	51 c0       	rjmp	.+162    	; 0x1c98 <pickup+0x4bc>
    1bf6:	2e 17       	cp	r18, r30
    1bf8:	3f 07       	cpc	r19, r31
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <pickup+0x422>
    1bfc:	4d c0       	rjmp	.+154    	; 0x1c98 <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1bfe:	fa 01       	movw	r30, r20
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	ec 59       	subi	r30, 0x9C	; 156
    1c06:	fd 4f       	sbci	r31, 0xFD	; 253
    1c08:	20 81       	ld	r18, Z
    1c0a:	31 81       	ldd	r19, Z+1	; 0x01
    1c0c:	21 30       	cpi	r18, 0x01	; 1
    1c0e:	31 05       	cpc	r19, r1
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <pickup+0x438>
    1c12:	42 c0       	rjmp	.+132    	; 0x1c98 <pickup+0x4bc>
    1c14:	fa 01       	movw	r30, r20
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	e5 57       	subi	r30, 0x75	; 117
    1c20:	fd 4f       	sbci	r31, 0xFD	; 253
    1c22:	20 81       	ld	r18, Z
    1c24:	31 81       	ldd	r19, Z+1	; 0x01
    1c26:	a2 17       	cp	r26, r18
    1c28:	b3 07       	cpc	r27, r19
    1c2a:	b1 f1       	breq	.+108    	; 0x1c98 <pickup+0x4bc>
    1c2c:	fa 01       	movw	r30, r20
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	e5 57       	subi	r30, 0x75	; 117
    1c38:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3a:	22 81       	ldd	r18, Z+2	; 0x02
    1c3c:	33 81       	ldd	r19, Z+3	; 0x03
    1c3e:	a2 17       	cp	r26, r18
    1c40:	b3 07       	cpc	r27, r19
    1c42:	51 f1       	breq	.+84     	; 0x1c98 <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1c44:	fc 01       	movw	r30, r24
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ec 0f       	add	r30, r28
    1c4c:	fd 1f       	adc	r31, r29
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	e5 57       	subi	r30, 0x75	; 117
    1c54:	fd 4f       	sbci	r31, 0xFD	; 253
    1c56:	20 81       	ld	r18, Z
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c5c:	ef ef       	ldi	r30, 0xFF	; 255
    1c5e:	3e 07       	cpc	r19, r30
    1c60:	39 f0       	breq	.+14     	; 0x1c70 <pickup+0x494>
    1c62:	a2 17       	cp	r26, r18
    1c64:	b3 07       	cpc	r27, r19
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <pickup+0x494>
									pickNode(a1, a1);
    1c68:	be 01       	movw	r22, r28
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	41 dd       	rcall	.-1406   	; 0x16f0 <pickNode>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	86 0f       	add	r24, r22
    1c76:	97 1f       	adc	r25, r23
    1c78:	fc 01       	movw	r30, r24
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	e5 57       	subi	r30, 0x75	; 117
    1c80:	fd 4f       	sbci	r31, 0xFD	; 253
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	8f 3f       	cpi	r24, 0xFF	; 255
    1c88:	2f ef       	ldi	r18, 0xFF	; 255
    1c8a:	92 07       	cpc	r25, r18
    1c8c:	29 f0       	breq	.+10     	; 0x1c98 <pickup+0x4bc>
    1c8e:	a8 17       	cp	r26, r24
    1c90:	b9 07       	cpc	r27, r25
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <pickup+0x4bc>
									pickNode(a1, a2);
    1c94:	ce 01       	movw	r24, r28
    1c96:	2c dd       	rcall	.-1448   	; 0x16f0 <pickNode>
					}
				}
			}
		}
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	08 95       	ret

00001ca6 <drop>:

void drop(int side)
{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	ec 01       	movw	r28, r24
	elevate(0, side);//lower
    1cac:	68 2f       	mov	r22, r24
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	08 d8       	rcall	.-4080   	; 0xcc2 <elevate>
	open(side);
    1cb2:	8c 2f       	mov	r24, r28
    1cb4:	13 d8       	rcall	.-4058   	; 0xcdc <open>
	elevate(45, side);//mid
    1cb6:	6c 2f       	mov	r22, r28
    1cb8:	8d e2       	ldi	r24, 0x2D	; 45
    1cba:	03 d8       	rcall	.-4090   	; 0xcc2 <elevate>
	close(side);
    1cbc:	8c 2f       	mov	r24, r28
    1cbe:	1e d8       	rcall	.-4036   	; 0xcfc <close>
	armCount++;
    1cc0:	80 91 02 02 	lds	r24, 0x0202
    1cc4:	90 91 03 02 	lds	r25, 0x0203
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	90 93 03 02 	sts	0x0203, r25
    1cce:	80 93 02 02 	sts	0x0202, r24
	if(side==0)
    1cd2:	cd 2b       	or	r28, r29
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <drop+0x38>
	lcd("dropRight");
    1cd6:	86 e3       	ldi	r24, 0x36	; 54
    1cd8:	92 e0       	ldi	r25, 0x02	; 2
    1cda:	2c d8       	rcall	.-4008   	; 0xd34 <lcd>
    1cdc:	03 c0       	rjmp	.+6      	; 0x1ce4 <drop+0x3e>
	else
	lcd("dropLeft");
    1cde:	80 e4       	ldi	r24, 0x40	; 64
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	28 d8       	rcall	.-4016   	; 0xd34 <lcd>
}
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1cf4:	e0 91 87 02 	lds	r30, 0x0287
    1cf8:	f0 91 88 02 	lds	r31, 0x0288
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	e6 0f       	add	r30, r22
    1d02:	f7 1f       	adc	r31, r23
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	e5 57       	subi	r30, 0x75	; 117
    1d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0c:	8c 01       	movw	r16, r24
    1d0e:	00 0f       	add	r16, r16
    1d10:	11 1f       	adc	r17, r17
    1d12:	0f 54       	subi	r16, 0x4F	; 79
    1d14:	1d 4f       	sbci	r17, 0xFD	; 253
    1d16:	d8 01       	movw	r26, r16
    1d18:	8d 91       	ld	r24, X+
    1d1a:	9c 91       	ld	r25, X
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
	position(armNo, side);
    1d20:	ce 01       	movw	r24, r28
    1d22:	fe db       	rcall	.-2052   	; 0x1520 <position>
	drop(armNo);
    1d24:	ce 01       	movw	r24, r28
    1d26:	bf df       	rcall	.-130    	; 0x1ca6 <drop>
	arm[armNo] = -1;
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	9f ef       	ldi	r25, 0xFF	; 255
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1d32:	80 91 56 02 	lds	r24, 0x0256
    1d36:	90 91 57 02 	lds	r25, 0x0257
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	90 93 57 02 	sts	0x0257, r25
    1d40:	80 93 56 02 	sts	0x0256, r24
}
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	08 95       	ret

00001d4e <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1d54:	fb 01       	movw	r30, r22
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	ed 57       	subi	r30, 0x7D	; 125
    1d5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d5e:	dc 01       	movw	r26, r24
    1d60:	aa 0f       	add	r26, r26
    1d62:	bb 1f       	adc	r27, r27
    1d64:	af 54       	subi	r26, 0x4F	; 79
    1d66:	bd 4f       	sbci	r27, 0xFD	; 253
    1d68:	8d 91       	ld	r24, X+
    1d6a:	9c 91       	ld	r25, X
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1d70:	c6 17       	cp	r28, r22
    1d72:	d7 07       	cpc	r29, r23
    1d74:	39 f4       	brne	.+14     	; 0x1d84 <sortDrop+0x36>
    1d76:	80 91 4e 02 	lds	r24, 0x024E
    1d7a:	90 91 4f 02 	lds	r25, 0x024F
    1d7e:	89 2b       	or	r24, r25
    1d80:	49 f4       	brne	.+18     	; 0x1d94 <sortDrop+0x46>
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <sortDrop+0x42>
    1d84:	80 91 4e 02 	lds	r24, 0x024E
    1d88:	90 91 4f 02 	lds	r25, 0x024F
    1d8c:	02 97       	sbiw	r24, 0x02	; 2
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <sortDrop+0x46>
		turn();
    1d90:	98 d8       	rcall	.-3792   	; 0xec2 <turn>
    1d92:	0d c0       	rjmp	.+26     	; 0x1dae <sortDrop+0x60>
	else
	{
		if (dir == 1 || dir == 3)
    1d94:	80 91 4e 02 	lds	r24, 0x024E
    1d98:	90 91 4f 02 	lds	r25, 0x024F
    1d9c:	8d 7f       	andi	r24, 0xFD	; 253
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	31 f4       	brne	.+12     	; 0x1dae <sortDrop+0x60>
			if (armNo == 0)
    1da2:	20 97       	sbiw	r28, 0x00	; 0
    1da4:	11 f4       	brne	.+4      	; 0x1daa <sortDrop+0x5c>
				turnLeft();
    1da6:	3f d8       	rcall	.-3970   	; 0xe26 <turnLeft>
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <sortDrop+0x60>
			else turnRight();
    1daa:	0e 94 bc 06 	call	0xd78	; 0xd78 <turnRight>
	}
	drop(armNo);
    1dae:	ce 01       	movw	r24, r28
    1db0:	7a df       	rcall	.-268    	; 0x1ca6 <drop>
	arm[armNo] = -1;
    1db2:	cc 0f       	add	r28, r28
    1db4:	dd 1f       	adc	r29, r29
    1db6:	cf 54       	subi	r28, 0x4F	; 79
    1db8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	99 83       	std	Y+1, r25	; 0x01
    1dc0:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	08 95       	ret

00001dc8 <dropPickup>:

void dropPickup(int a1)
{
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1dcc:	9c 01       	movw	r18, r24
    1dce:	2f 5f       	subi	r18, 0xFF	; 255
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	21 70       	andi	r18, 0x01	; 1
    1dd4:	30 78       	andi	r19, 0x80	; 128
    1dd6:	33 23       	and	r19, r19
    1dd8:	34 f4       	brge	.+12     	; 0x1de6 <dropPickup+0x1e>
    1dda:	21 50       	subi	r18, 0x01	; 1
    1ddc:	31 09       	sbc	r19, r1
    1dde:	2e 6f       	ori	r18, 0xFE	; 254
    1de0:	3f 6f       	ori	r19, 0xFF	; 255
    1de2:	2f 5f       	subi	r18, 0xFF	; 255
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	d2 2f       	mov	r29, r18
    1de8:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1dea:	e0 91 87 02 	lds	r30, 0x0287
    1dee:	f0 91 88 02 	lds	r31, 0x0288
    1df2:	af 01       	movw	r20, r30
    1df4:	44 0f       	add	r20, r20
    1df6:	55 1f       	adc	r21, r21
    1df8:	24 0f       	add	r18, r20
    1dfa:	35 1f       	adc	r19, r21
    1dfc:	d9 01       	movw	r26, r18
    1dfe:	aa 0f       	add	r26, r26
    1e00:	bb 1f       	adc	r27, r27
    1e02:	a5 57       	subi	r26, 0x75	; 117
    1e04:	bd 4f       	sbci	r27, 0xFD	; 253
    1e06:	2d 91       	ld	r18, X+
    1e08:	3c 91       	ld	r19, X
    1e0a:	da 01       	movw	r26, r20
    1e0c:	a3 56       	subi	r26, 0x63	; 99
    1e0e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e10:	4d 91       	ld	r20, X+
    1e12:	5c 91       	ld	r21, X
    1e14:	24 17       	cp	r18, r20
    1e16:	35 07       	cpc	r19, r21
    1e18:	69 f0       	breq	.+26     	; 0x1e34 <dropPickup+0x6c>
    1e1a:	a0 91 ad 02 	lds	r26, 0x02AD
    1e1e:	b0 91 ae 02 	lds	r27, 0x02AE
    1e22:	aa 0f       	add	r26, r26
    1e24:	bb 1f       	adc	r27, r27
    1e26:	a3 56       	subi	r26, 0x63	; 99
    1e28:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2a:	6d 91       	ld	r22, X+
    1e2c:	7c 91       	ld	r23, X
    1e2e:	26 17       	cp	r18, r22
    1e30:	37 07       	cpc	r19, r23
    1e32:	a9 f0       	breq	.+42     	; 0x1e5e <dropPickup+0x96>
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	e8 0f       	add	r30, r24
    1e3a:	f9 1f       	adc	r31, r25
    1e3c:	ee 0f       	add	r30, r30
    1e3e:	ff 1f       	adc	r31, r31
    1e40:	e5 57       	subi	r30, 0x75	; 117
    1e42:	fd 4f       	sbci	r31, 0xFD	; 253
    1e44:	01 90       	ld	r0, Z+
    1e46:	f0 81       	ld	r31, Z
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	4e 17       	cp	r20, r30
    1e4c:	5f 07       	cpc	r21, r31
    1e4e:	39 f0       	breq	.+14     	; 0x1e5e <dropPickup+0x96>
    1e50:	31 96       	adiw	r30, 0x01	; 1
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <dropPickup+0x96>
		pickNode(a2, a1);
    1e54:	bc 01       	movw	r22, r24
    1e56:	8d 2f       	mov	r24, r29
    1e58:	9c 2f       	mov	r25, r28
    1e5a:	4a dc       	rcall	.-1900   	; 0x16f0 <pickNode>
    1e5c:	0b c0       	rjmp	.+22     	; 0x1e74 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1e5e:	24 17       	cp	r18, r20
    1e60:	35 07       	cpc	r19, r21
    1e62:	41 f0       	breq	.+16     	; 0x1e74 <dropPickup+0xac>
    1e64:	2f 3f       	cpi	r18, 0xFF	; 255
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <dropPickup+0xac>
		pickNode(a2, a2);
    1e6a:	6d 2f       	mov	r22, r29
    1e6c:	7c 2f       	mov	r23, r28
    1e6e:	8d 2f       	mov	r24, r29
    1e70:	9c 2f       	mov	r25, r28
    1e72:	3e dc       	rcall	.-1924   	; 0x16f0 <pickNode>
}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <canDrop>:

void canDrop()
{
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1e82:	20 91 87 02 	lds	r18, 0x0287
    1e86:	30 91 88 02 	lds	r19, 0x0288
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	30 f4       	brcc	.+12     	; 0x1e9c <canDrop+0x22>
    1e90:	80 91 4e 02 	lds	r24, 0x024E
    1e94:	90 91 4f 02 	lds	r25, 0x024F
    1e98:	02 97       	sbiw	r24, 0x02	; 2
    1e9a:	79 f0       	breq	.+30     	; 0x1eba <canDrop+0x40>
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	02 97       	sbiw	r24, 0x02	; 2
    1ea0:	02 97       	sbiw	r24, 0x02	; 2
    1ea2:	80 f4       	brcc	.+32     	; 0x1ec4 <canDrop+0x4a>
    1ea4:	80 91 4e 02 	lds	r24, 0x024E
    1ea8:	90 91 4f 02 	lds	r25, 0x024F
    1eac:	89 2b       	or	r24, r25
    1eae:	79 f0       	breq	.+30     	; 0x1ece <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1eb0:	01 e0       	ldi	r16, 0x01	; 1
    1eb2:	10 e0       	ldi	r17, 0x00	; 0
    1eb4:	c0 e0       	ldi	r28, 0x00	; 0
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1eba:	00 e0       	ldi	r16, 0x00	; 0
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1ebe:	c1 e0       	ldi	r28, 0x01	; 1
    1ec0:	d0 e0       	ldi	r29, 0x00	; 0
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1ec4:	01 e0       	ldi	r16, 0x01	; 1
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	c0 e0       	ldi	r28, 0x00	; 0
    1eca:	d0 e0       	ldi	r29, 0x00	; 0
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1ece:	00 e0       	ldi	r16, 0x00	; 0
    1ed0:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1ed2:	c1 e0       	ldi	r28, 0x01	; 1
    1ed4:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    1ed6:	40 91 02 02 	lds	r20, 0x0202
    1eda:	50 91 03 02 	lds	r21, 0x0203
    1ede:	42 30       	cpi	r20, 0x02	; 2
    1ee0:	51 05       	cpc	r21, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <canDrop+0x6c>
    1ee4:	3b c1       	rjmp	.+630    	; 0x215c <canDrop+0x2e2>
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	e3 56       	subi	r30, 0x63	; 99
    1eee:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef0:	40 81       	ld	r20, Z
    1ef2:	51 81       	ldd	r21, Z+1	; 0x01
    1ef4:	80 91 b1 02 	lds	r24, 0x02B1
    1ef8:	90 91 b2 02 	lds	r25, 0x02B2
    1efc:	84 17       	cp	r24, r20
    1efe:	95 07       	cpc	r25, r21
    1f00:	41 f0       	breq	.+16     	; 0x1f12 <canDrop+0x98>
    1f02:	80 91 b3 02 	lds	r24, 0x02B3
    1f06:	90 91 b4 02 	lds	r25, 0x02B4
    1f0a:	48 17       	cp	r20, r24
    1f0c:	59 07       	cpc	r21, r25
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <canDrop+0x98>
    1f10:	25 c1       	rjmp	.+586    	; 0x215c <canDrop+0x2e2>
		return;
	else
	{
		if (visited[ct] == 0)
    1f12:	f9 01       	movw	r30, r18
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	ec 59       	subi	r30, 0x9C	; 156
    1f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	89 2b       	or	r24, r25
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <canDrop+0xac>
			terminalCheck1();
    1f24:	8c d9       	rcall	.-3304   	; 0x123e <terminalCheck1>
		if (armCount == 0)
    1f26:	80 91 02 02 	lds	r24, 0x0202
    1f2a:	90 91 03 02 	lds	r25, 0x0203
    1f2e:	89 2b       	or	r24, r25
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <canDrop+0xba>
    1f32:	48 c0       	rjmp	.+144    	; 0x1fc4 <canDrop+0x14a>
		{
			if (arm[arm0] == color[ct])
    1f34:	20 91 87 02 	lds	r18, 0x0287
    1f38:	30 91 88 02 	lds	r19, 0x0288
    1f3c:	f9 01       	movw	r30, r18
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	e3 56       	subi	r30, 0x63	; 99
    1f44:	fd 4f       	sbci	r31, 0xFD	; 253
    1f46:	80 81       	ld	r24, Z
    1f48:	91 81       	ldd	r25, Z+1	; 0x01
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ee 0f       	add	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	ef 54       	subi	r30, 0x4F	; 79
    1f52:	fd 4f       	sbci	r31, 0xFD	; 253
    1f54:	40 81       	ld	r20, Z
    1f56:	51 81       	ldd	r21, Z+1	; 0x01
    1f58:	48 17       	cp	r20, r24
    1f5a:	59 07       	cpc	r21, r25
    1f5c:	a9 f4       	brne	.+42     	; 0x1f88 <canDrop+0x10e>
				if (term[ct][0] == -1)
    1f5e:	f9 01       	movw	r30, r18
    1f60:	ee 0f       	add	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	e5 57       	subi	r30, 0x75	; 117
    1f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	29 f4       	brne	.+10     	; 0x1f7e <canDrop+0x104>
					nodeDrop(arm0, 0);
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	ce 01       	movw	r24, r28
    1f7a:	b7 de       	rcall	.-658    	; 0x1cea <nodeDrop>
    1f7c:	23 c0       	rjmp	.+70     	; 0x1fc4 <canDrop+0x14a>
				else nodeDrop(arm0, 1);
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	ce 01       	movw	r24, r28
    1f84:	b2 de       	rcall	.-668    	; 0x1cea <nodeDrop>
    1f86:	1e c0       	rjmp	.+60     	; 0x1fc4 <canDrop+0x14a>
			else if (arm[arm1] == color[ct])
    1f88:	f8 01       	movw	r30, r16
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ef 54       	subi	r30, 0x4F	; 79
    1f90:	fd 4f       	sbci	r31, 0xFD	; 253
    1f92:	40 81       	ld	r20, Z
    1f94:	51 81       	ldd	r21, Z+1	; 0x01
    1f96:	84 17       	cp	r24, r20
    1f98:	95 07       	cpc	r25, r21
    1f9a:	a1 f4       	brne	.+40     	; 0x1fc4 <canDrop+0x14a>
				if (term[ct][0] != -1)
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	ff 1f       	adc	r31, r31
    1fa6:	e5 57       	subi	r30, 0x75	; 117
    1fa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	29 f0       	breq	.+10     	; 0x1fbc <canDrop+0x142>
					nodeDrop(arm1, 1);
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	98 de       	rcall	.-720    	; 0x1cea <nodeDrop>
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <canDrop+0x14a>
				else nodeDrop(arm1, 0);
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	93 de       	rcall	.-730    	; 0x1cea <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    1fc4:	20 91 87 02 	lds	r18, 0x0287
    1fc8:	30 91 88 02 	lds	r19, 0x0288
    1fcc:	f9 01       	movw	r30, r18
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	e3 56       	subi	r30, 0x63	; 99
    1fd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fd6:	80 81       	ld	r24, Z
    1fd8:	91 81       	ldd	r25, Z+1	; 0x01
    1fda:	40 91 b1 02 	lds	r20, 0x02B1
    1fde:	50 91 b2 02 	lds	r21, 0x02B2
    1fe2:	48 17       	cp	r20, r24
    1fe4:	59 07       	cpc	r21, r25
    1fe6:	41 f0       	breq	.+16     	; 0x1ff8 <canDrop+0x17e>
    1fe8:	40 91 b3 02 	lds	r20, 0x02B3
    1fec:	50 91 b4 02 	lds	r21, 0x02B4
    1ff0:	84 17       	cp	r24, r20
    1ff2:	95 07       	cpc	r25, r21
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <canDrop+0x17e>
    1ff6:	b2 c0       	rjmp	.+356    	; 0x215c <canDrop+0x2e2>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	e5 57       	subi	r30, 0x75	; 117
    2004:	fd 4f       	sbci	r31, 0xFD	; 253
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	09 f4       	brne	.+2      	; 0x2010 <canDrop+0x196>
    200e:	45 c0       	rjmp	.+138    	; 0x209a <canDrop+0x220>
    2010:	f9 01       	movw	r30, r18
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	e5 57       	subi	r30, 0x75	; 117
    201c:	fd 4f       	sbci	r31, 0xFD	; 253
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	c9 f0       	breq	.+50     	; 0x2058 <canDrop+0x1de>
				if (visited[ct] == 0)
    2026:	f9 01       	movw	r30, r18
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	ec 59       	subi	r30, 0x9C	; 156
    202e:	fd 4f       	sbci	r31, 0xFD	; 253
    2030:	80 81       	ld	r24, Z
    2032:	91 81       	ldd	r25, Z+1	; 0x01
    2034:	89 2b       	or	r24, r25
    2036:	81 f4       	brne	.+32     	; 0x2058 <canDrop+0x1de>
					terminalCheck2();
    2038:	ab d9       	rcall	.-3242   	; 0x1390 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    203a:	20 91 87 02 	lds	r18, 0x0287
    203e:	30 91 88 02 	lds	r19, 0x0288
    2042:	f9 01       	movw	r30, r18
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	e5 57       	subi	r30, 0x75	; 117
    204e:	fd 4f       	sbci	r31, 0xFD	; 253
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	09 f1       	breq	.+66     	; 0x209a <canDrop+0x220>
    2058:	f9 01       	movw	r30, r18
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	e5 57       	subi	r30, 0x75	; 117
    2064:	fd 4f       	sbci	r31, 0xFD	; 253
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	b1 f0       	breq	.+44     	; 0x209a <canDrop+0x220>
			{
				if (arm[arm0] == color[ct])
    206e:	de 01       	movw	r26, r28
    2070:	aa 0f       	add	r26, r26
    2072:	bb 1f       	adc	r27, r27
    2074:	af 54       	subi	r26, 0x4F	; 79
    2076:	bd 4f       	sbci	r27, 0xFD	; 253
    2078:	f9 01       	movw	r30, r18
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	e3 56       	subi	r30, 0x63	; 99
    2080:	fd 4f       	sbci	r31, 0xFD	; 253
    2082:	4d 91       	ld	r20, X+
    2084:	5c 91       	ld	r21, X
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	48 17       	cp	r20, r24
    208c:	59 07       	cpc	r21, r25
    208e:	19 f4       	brne	.+6      	; 0x2096 <canDrop+0x21c>
					dropPickup(arm0);
    2090:	ce 01       	movw	r24, r28
    2092:	9a de       	rcall	.-716    	; 0x1dc8 <dropPickup>
    2094:	02 c0       	rjmp	.+4      	; 0x209a <canDrop+0x220>
				else dropPickup(arm1);
    2096:	c8 01       	movw	r24, r16
    2098:	97 de       	rcall	.-722    	; 0x1dc8 <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    209a:	80 91 87 02 	lds	r24, 0x0287
    209e:	90 91 88 02 	lds	r25, 0x0288
    20a2:	fc 01       	movw	r30, r24
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	e3 56       	subi	r30, 0x63	; 99
    20aa:	fd 4f       	sbci	r31, 0xFD	; 253
    20ac:	20 81       	ld	r18, Z
    20ae:	31 81       	ldd	r19, Z+1	; 0x01
    20b0:	fe 01       	movw	r30, r28
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	ef 54       	subi	r30, 0x4F	; 79
    20b8:	fd 4f       	sbci	r31, 0xFD	; 253
    20ba:	40 81       	ld	r20, Z
    20bc:	51 81       	ldd	r21, Z+1	; 0x01
    20be:	42 17       	cp	r20, r18
    20c0:	53 07       	cpc	r21, r19
    20c2:	11 f5       	brne	.+68     	; 0x2108 <canDrop+0x28e>
    20c4:	fc 01       	movw	r30, r24
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	e5 57       	subi	r30, 0x75	; 117
    20d0:	fd 4f       	sbci	r31, 0xFD	; 253
    20d2:	40 81       	ld	r20, Z
    20d4:	51 81       	ldd	r21, Z+1	; 0x01
    20d6:	4f 3f       	cpi	r20, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	29 f4       	brne	.+10     	; 0x20e6 <canDrop+0x26c>
				nodeDrop(arm0, 0);
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	ce 01       	movw	r24, r28
    20e2:	03 de       	rcall	.-1018   	; 0x1cea <nodeDrop>
    20e4:	3b c0       	rjmp	.+118    	; 0x215c <canDrop+0x2e2>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    20e6:	fc 01       	movw	r30, r24
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	e5 57       	subi	r30, 0x75	; 117
    20f2:	fd 4f       	sbci	r31, 0xFD	; 253
    20f4:	42 81       	ldd	r20, Z+2	; 0x02
    20f6:	53 81       	ldd	r21, Z+3	; 0x03
    20f8:	4f 3f       	cpi	r20, 0xFF	; 255
    20fa:	5f 4f       	sbci	r21, 0xFF	; 255
    20fc:	29 f4       	brne	.+10     	; 0x2108 <canDrop+0x28e>
				nodeDrop(arm0, 1);
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	ce 01       	movw	r24, r28
    2104:	f2 dd       	rcall	.-1052   	; 0x1cea <nodeDrop>
    2106:	2a c0       	rjmp	.+84     	; 0x215c <canDrop+0x2e2>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2108:	f8 01       	movw	r30, r16
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	ef 54       	subi	r30, 0x4F	; 79
    2110:	fd 4f       	sbci	r31, 0xFD	; 253
    2112:	40 81       	ld	r20, Z
    2114:	51 81       	ldd	r21, Z+1	; 0x01
    2116:	24 17       	cp	r18, r20
    2118:	35 07       	cpc	r19, r21
    211a:	01 f5       	brne	.+64     	; 0x215c <canDrop+0x2e2>
    211c:	fc 01       	movw	r30, r24
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	e5 57       	subi	r30, 0x75	; 117
    2128:	fd 4f       	sbci	r31, 0xFD	; 253
    212a:	20 81       	ld	r18, Z
    212c:	31 81       	ldd	r19, Z+1	; 0x01
    212e:	2f 3f       	cpi	r18, 0xFF	; 255
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	29 f4       	brne	.+10     	; 0x213e <canDrop+0x2c4>
				nodeDrop(arm1, 0);
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	c8 01       	movw	r24, r16
    213a:	d7 dd       	rcall	.-1106   	; 0x1cea <nodeDrop>
    213c:	0f c0       	rjmp	.+30     	; 0x215c <canDrop+0x2e2>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    213e:	fc 01       	movw	r30, r24
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	e5 57       	subi	r30, 0x75	; 117
    214a:	fd 4f       	sbci	r31, 0xFD	; 253
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	21 f4       	brne	.+8      	; 0x215c <canDrop+0x2e2>
				nodeDrop(arm1, 1);
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	c8 01       	movw	r24, r16
    215a:	c7 dd       	rcall	.-1138   	; 0x1cea <nodeDrop>

		}
	}
}
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	08 95       	ret

00002166 <newSort>:

void newSort()
{
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    216e:	20 91 b1 02 	lds	r18, 0x02B1
    2172:	30 91 b2 02 	lds	r19, 0x02B2
    2176:	2f 3f       	cpi	r18, 0xFF	; 255
    2178:	1f ef       	ldi	r17, 0xFF	; 255
    217a:	31 07       	cpc	r19, r17
    217c:	41 f0       	breq	.+16     	; 0x218e <newSort+0x28>
		a1 = indicator[arm[0]];
    217e:	f9 01       	movw	r30, r18
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	eb 55       	subi	r30, 0x5B	; 91
    2186:	fd 4f       	sbci	r31, 0xFD	; 253
    2188:	c0 81       	ld	r28, Z
    218a:	d1 81       	ldd	r29, Z+1	; 0x01
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    218e:	ce ef       	ldi	r28, 0xFE	; 254
    2190:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    2192:	e0 91 b3 02 	lds	r30, 0x02B3
    2196:	f0 91 b4 02 	lds	r31, 0x02B4
    219a:	ef 3f       	cpi	r30, 0xFF	; 255
    219c:	4f ef       	ldi	r20, 0xFF	; 255
    219e:	f4 07       	cpc	r31, r20
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <newSort+0x3e>
    21a2:	53 c1       	rjmp	.+678    	; 0x244a <__stack+0x24b>
		a2 = indicator[arm[1]];
    21a4:	df 01       	movw	r26, r30
    21a6:	aa 0f       	add	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	ab 55       	subi	r26, 0x5B	; 91
    21ac:	bd 4f       	sbci	r27, 0xFD	; 253
    21ae:	4d 91       	ld	r20, X+
    21b0:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    21b2:	80 91 87 02 	lds	r24, 0x0287
    21b6:	90 91 88 02 	lds	r25, 0x0288
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	81 70       	andi	r24, 0x01	; 1
    21be:	90 78       	andi	r25, 0x80	; 128
    21c0:	99 23       	and	r25, r25
    21c2:	24 f4       	brge	.+8      	; 0x21cc <newSort+0x66>
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	8e 6f       	ori	r24, 0xFE	; 254
    21c8:	9f 6f       	ori	r25, 0xFF	; 255
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    21ce:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    21d0:	d0 93 88 02 	sts	0x0288, r29
    21d4:	c0 93 87 02 	sts	0x0287, r28
		if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    21d8:	2f 3f       	cpi	r18, 0xFF	; 255
    21da:	af ef       	ldi	r26, 0xFF	; 255
    21dc:	3a 07       	cpc	r19, r26
    21de:	d9 f1       	breq	.+118    	; 0x2256 <__stack+0x57>
    21e0:	de 01       	movw	r26, r28
    21e2:	aa 0f       	add	r26, r26
    21e4:	bb 1f       	adc	r27, r27
    21e6:	aa 0f       	add	r26, r26
    21e8:	bb 1f       	adc	r27, r27
    21ea:	a5 57       	subi	r26, 0x75	; 117
    21ec:	bd 4f       	sbci	r27, 0xFD	; 253
    21ee:	0d 90       	ld	r0, X+
    21f0:	bc 91       	ld	r27, X
    21f2:	a0 2d       	mov	r26, r0
    21f4:	11 96       	adiw	r26, 0x01	; 1
    21f6:	69 f0       	breq	.+26     	; 0x2212 <__stack+0x13>
    21f8:	de 01       	movw	r26, r28
    21fa:	aa 0f       	add	r26, r26
    21fc:	bb 1f       	adc	r27, r27
    21fe:	aa 0f       	add	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	a5 57       	subi	r26, 0x75	; 117
    2204:	bd 4f       	sbci	r27, 0xFD	; 253
    2206:	12 96       	adiw	r26, 0x02	; 2
    2208:	0d 90       	ld	r0, X+
    220a:	bc 91       	ld	r27, X
    220c:	a0 2d       	mov	r26, r0
    220e:	11 96       	adiw	r26, 0x01	; 1
    2210:	11 f5       	brne	.+68     	; 0x2256 <__stack+0x57>
		{
			if (arm[1] == -1)
    2212:	31 96       	adiw	r30, 0x01	; 1
    2214:	09 f0       	breq	.+2      	; 0x2218 <__stack+0x19>
    2216:	07 c1       	rjmp	.+526    	; 0x2426 <__stack+0x227>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2218:	66 0f       	add	r22, r22
    221a:	77 1f       	adc	r23, r23
    221c:	fb 01       	movw	r30, r22
    221e:	ed 57       	subi	r30, 0x7D	; 125
    2220:	fd 4f       	sbci	r31, 0xFD	; 253
    2222:	20 81       	ld	r18, Z
    2224:	31 81       	ldd	r19, Z+1	; 0x01
    2226:	fb 01       	movw	r30, r22
    2228:	e3 56       	subi	r30, 0x63	; 99
    222a:	fd 4f       	sbci	r31, 0xFD	; 253
    222c:	40 81       	ld	r20, Z
    222e:	51 81       	ldd	r21, Z+1	; 0x01
    2230:	24 17       	cp	r18, r20
    2232:	35 07       	cpc	r19, r21
    2234:	59 f0       	breq	.+22     	; 0x224c <__stack+0x4d>
    2236:	fc 01       	movw	r30, r24
    2238:	ee 0f       	add	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	e3 56       	subi	r30, 0x63	; 99
    223e:	fd 4f       	sbci	r31, 0xFD	; 253
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	28 17       	cp	r18, r24
    2246:	39 07       	cpc	r19, r25
    2248:	09 f0       	breq	.+2      	; 0x224c <__stack+0x4d>
    224a:	ed c0       	rjmp	.+474    	; 0x2426 <__stack+0x227>
					pickSort(1, a1);
    224c:	be 01       	movw	r22, r28
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	82 da       	rcall	.-2812   	; 0x1758 <pickSort>
    2254:	e8 c0       	rjmp	.+464    	; 0x2426 <__stack+0x227>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    2256:	ef 3f       	cpi	r30, 0xFF	; 255
    2258:	af ef       	ldi	r26, 0xFF	; 255
    225a:	fa 07       	cpc	r31, r26
    225c:	09 f4       	brne	.+2      	; 0x2260 <__stack+0x61>
    225e:	51 c0       	rjmp	.+162    	; 0x2302 <__stack+0x103>
    2260:	da 01       	movw	r26, r20
    2262:	aa 0f       	add	r26, r26
    2264:	bb 1f       	adc	r27, r27
    2266:	aa 0f       	add	r26, r26
    2268:	bb 1f       	adc	r27, r27
    226a:	a5 57       	subi	r26, 0x75	; 117
    226c:	bd 4f       	sbci	r27, 0xFD	; 253
    226e:	0d 90       	ld	r0, X+
    2270:	bc 91       	ld	r27, X
    2272:	a0 2d       	mov	r26, r0
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	09 f4       	brne	.+2      	; 0x227a <__stack+0x7b>
    2278:	0a c1       	rjmp	.+532    	; 0x248e <__stack+0x28f>
    227a:	da 01       	movw	r26, r20
    227c:	aa 0f       	add	r26, r26
    227e:	bb 1f       	adc	r27, r27
    2280:	aa 0f       	add	r26, r26
    2282:	bb 1f       	adc	r27, r27
    2284:	a5 57       	subi	r26, 0x75	; 117
    2286:	bd 4f       	sbci	r27, 0xFD	; 253
    2288:	12 96       	adiw	r26, 0x02	; 2
    228a:	0d 90       	ld	r0, X+
    228c:	bc 91       	ld	r27, X
    228e:	a0 2d       	mov	r26, r0
    2290:	11 96       	adiw	r26, 0x01	; 1
    2292:	b9 f5       	brne	.+110    	; 0x2302 <__stack+0x103>
    2294:	ea c0       	rjmp	.+468    	; 0x246a <__stack+0x26b>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    2296:	2f 3f       	cpi	r18, 0xFF	; 255
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	09 f0       	breq	.+2      	; 0x229e <__stack+0x9f>
    229c:	c4 c0       	rjmp	.+392    	; 0x2426 <__stack+0x227>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    229e:	9b 01       	movw	r18, r22
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	f9 01       	movw	r30, r18
    22a6:	ed 57       	subi	r30, 0x7D	; 125
    22a8:	fd 4f       	sbci	r31, 0xFD	; 253
    22aa:	40 81       	ld	r20, Z
    22ac:	51 81       	ldd	r21, Z+1	; 0x01
    22ae:	f9 01       	movw	r30, r18
    22b0:	e3 56       	subi	r30, 0x63	; 99
    22b2:	fd 4f       	sbci	r31, 0xFD	; 253
    22b4:	20 81       	ld	r18, Z
    22b6:	31 81       	ldd	r19, Z+1	; 0x01
    22b8:	42 17       	cp	r20, r18
    22ba:	53 07       	cpc	r21, r19
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <__stack+0xc1>
    22be:	b3 c0       	rjmp	.+358    	; 0x2426 <__stack+0x227>
    22c0:	fc 01       	movw	r30, r24
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	e3 56       	subi	r30, 0x63	; 99
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	48 17       	cp	r20, r24
    22d0:	59 07       	cpc	r21, r25
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <__stack+0xd7>
    22d4:	a8 c0       	rjmp	.+336    	; 0x2426 <__stack+0x227>
						pickSort(1, t1);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	3e da       	rcall	.-2948   	; 0x1758 <pickSort>
    22dc:	a4 c0       	rjmp	.+328    	; 0x2426 <__stack+0x227>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    22de:	fb 01       	movw	r30, r22
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ed 57       	subi	r30, 0x7D	; 125
    22e6:	fd 4f       	sbci	r31, 0xFD	; 253
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <__stack+0xf3>
    22f0:	9a c0       	rjmp	.+308    	; 0x2426 <__stack+0x227>
    22f2:	2f 3f       	cpi	r18, 0xFF	; 255
    22f4:	3f 4f       	sbci	r19, 0xFF	; 255
    22f6:	09 f4       	brne	.+2      	; 0x22fa <__stack+0xfb>
    22f8:	96 c0       	rjmp	.+300    	; 0x2426 <__stack+0x227>
				sortDrop(1, t1);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	27 dd       	rcall	.-1458   	; 0x1d4e <sortDrop>
    2300:	92 c0       	rjmp	.+292    	; 0x2426 <__stack+0x227>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    2302:	2f 3f       	cpi	r18, 0xFF	; 255
    2304:	1f ef       	ldi	r17, 0xFF	; 255
    2306:	31 07       	cpc	r19, r17
    2308:	a1 f0       	breq	.+40     	; 0x2332 <__stack+0x133>
    230a:	db 01       	movw	r26, r22
    230c:	aa 0f       	add	r26, r26
    230e:	bb 1f       	adc	r27, r27
    2310:	ad 57       	subi	r26, 0x7D	; 125
    2312:	bd 4f       	sbci	r27, 0xFD	; 253
    2314:	8d 91       	ld	r24, X+
    2316:	9c 91       	ld	r25, X
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	31 f4       	brne	.+12     	; 0x2328 <__stack+0x129>
    231c:	31 96       	adiw	r30, 0x01	; 1
    231e:	21 f0       	breq	.+8      	; 0x2328 <__stack+0x129>
			sortDrop(1, t1);
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	14 dd       	rcall	.-1496   	; 0x1d4e <sortDrop>
    2326:	7f c0       	rjmp	.+254    	; 0x2426 <__stack+0x227>
		else if (arm[0] != -1)
			ct = arm[0];
    2328:	30 93 88 02 	sts	0x0288, r19
    232c:	20 93 87 02 	sts	0x0287, r18
    2330:	7a c0       	rjmp	.+244    	; 0x2426 <__stack+0x227>
		else ct = arm[1];
    2332:	f0 93 88 02 	sts	0x0288, r31
    2336:	e0 93 87 02 	sts	0x0287, r30
    233a:	75 c0       	rjmp	.+234    	; 0x2426 <__stack+0x227>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    233c:	a8 01       	movw	r20, r16
    233e:	44 0f       	add	r20, r20
    2340:	55 1f       	adc	r21, r21
    2342:	fa 01       	movw	r30, r20
    2344:	ed 57       	subi	r30, 0x7D	; 125
    2346:	fd 4f       	sbci	r31, 0xFD	; 253
    2348:	20 81       	ld	r18, Z
    234a:	31 81       	ldd	r19, Z+1	; 0x01
    234c:	fa 01       	movw	r30, r20
    234e:	e3 56       	subi	r30, 0x63	; 99
    2350:	fd 4f       	sbci	r31, 0xFD	; 253
    2352:	40 81       	ld	r20, Z
    2354:	51 81       	ldd	r21, Z+1	; 0x01
    2356:	24 17       	cp	r18, r20
    2358:	35 07       	cpc	r19, r21
    235a:	51 f0       	breq	.+20     	; 0x2370 <__stack+0x171>
    235c:	fc 01       	movw	r30, r24
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	e3 56       	subi	r30, 0x63	; 99
    2364:	fd 4f       	sbci	r31, 0xFD	; 253
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	26 17       	cp	r18, r22
    236c:	37 07       	cpc	r19, r23
    236e:	81 f4       	brne	.+32     	; 0x2390 <__stack+0x191>
    2370:	2f 3f       	cpi	r18, 0xFF	; 255
    2372:	af ef       	ldi	r26, 0xFF	; 255
    2374:	3a 07       	cpc	r19, r26
    2376:	31 f1       	breq	.+76     	; 0x23c4 <__stack+0x1c5>
			ct = indicator[sort[t1]];
    2378:	f9 01       	movw	r30, r18
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	eb 55       	subi	r30, 0x5B	; 91
    2380:	fd 4f       	sbci	r31, 0xFD	; 253
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	90 93 88 02 	sts	0x0288, r25
    238a:	80 93 87 02 	sts	0x0287, r24
    238e:	4b c0       	rjmp	.+150    	; 0x2426 <__stack+0x227>
		else if (sort[t1] != -1)
    2390:	2f 3f       	cpi	r18, 0xFF	; 255
    2392:	3f 4f       	sbci	r19, 0xFF	; 255
    2394:	b9 f0       	breq	.+46     	; 0x23c4 <__stack+0x1c5>
		{
			pickSort(0, t1);
    2396:	b8 01       	movw	r22, r16
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	dd d9       	rcall	.-3142   	; 0x1758 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    239e:	0f 5f       	subi	r16, 0xFF	; 255
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	01 70       	andi	r16, 0x01	; 1
    23a4:	10 78       	andi	r17, 0x80	; 128
    23a6:	11 23       	and	r17, r17
    23a8:	34 f4       	brge	.+12     	; 0x23b6 <__stack+0x1b7>
    23aa:	01 50       	subi	r16, 0x01	; 1
    23ac:	11 09       	sbc	r17, r1
    23ae:	0e 6f       	ori	r16, 0xFE	; 254
    23b0:	1f 6f       	ori	r17, 0xFF	; 255
    23b2:	0f 5f       	subi	r16, 0xFF	; 255
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	0c 5f       	subi	r16, 0xFC	; 252
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	10 93 88 02 	sts	0x0288, r17
    23be:	00 93 87 02 	sts	0x0287, r16
    23c2:	31 c0       	rjmp	.+98     	; 0x2426 <__stack+0x227>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    23c4:	f8 01       	movw	r30, r16
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	ec 59       	subi	r30, 0x9C	; 156
    23cc:	fd 4f       	sbci	r31, 0xFD	; 253
    23ce:	20 81       	ld	r18, Z
    23d0:	31 81       	ldd	r19, Z+1	; 0x01
    23d2:	21 30       	cpi	r18, 0x01	; 1
    23d4:	31 05       	cpc	r19, r1
    23d6:	19 f5       	brne	.+70     	; 0x241e <__stack+0x21f>
    23d8:	f8 01       	movw	r30, r16
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e5 57       	subi	r30, 0x75	; 117
    23e4:	fd 4f       	sbci	r31, 0xFD	; 253
    23e6:	20 81       	ld	r18, Z
    23e8:	31 81       	ldd	r19, Z+1	; 0x01
    23ea:	42 17       	cp	r20, r18
    23ec:	53 07       	cpc	r21, r19
    23ee:	19 f0       	breq	.+6      	; 0x23f6 <__stack+0x1f7>
    23f0:	2f 3f       	cpi	r18, 0xFF	; 255
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	a1 f4       	brne	.+40     	; 0x241e <__stack+0x21f>
    23f6:	f8 01       	movw	r30, r16
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	e5 57       	subi	r30, 0x75	; 117
    2402:	fd 4f       	sbci	r31, 0xFD	; 253
    2404:	22 81       	ldd	r18, Z+2	; 0x02
    2406:	33 81       	ldd	r19, Z+3	; 0x03
    2408:	42 17       	cp	r20, r18
    240a:	53 07       	cpc	r21, r19
    240c:	19 f0       	breq	.+6      	; 0x2414 <__stack+0x215>
    240e:	2f 3f       	cpi	r18, 0xFF	; 255
    2410:	3f 4f       	sbci	r19, 0xFF	; 255
    2412:	29 f4       	brne	.+10     	; 0x241e <__stack+0x21f>
			ct = t2;
    2414:	90 93 88 02 	sts	0x0288, r25
    2418:	80 93 87 02 	sts	0x0287, r24
    241c:	04 c0       	rjmp	.+8      	; 0x2426 <__stack+0x227>
		else ct = t1;
    241e:	10 93 88 02 	sts	0x0288, r17
    2422:	00 93 87 02 	sts	0x0287, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2426:	80 91 87 02 	lds	r24, 0x0287
    242a:	90 91 88 02 	lds	r25, 0x0288
    242e:	02 96       	adiw	r24, 0x02	; 2
    2430:	83 70       	andi	r24, 0x03	; 3
    2432:	90 78       	andi	r25, 0x80	; 128
    2434:	99 23       	and	r25, r25
    2436:	24 f4       	brge	.+8      	; 0x2440 <__stack+0x241>
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	8c 6f       	ori	r24, 0xFC	; 252
    243c:	9f 6f       	ori	r25, 0xFF	; 255
    243e:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2440:	90 93 ae 02 	sts	0x02AE, r25
    2444:	80 93 ad 02 	sts	0x02AD, r24
    2448:	2e c0       	rjmp	.+92     	; 0x24a6 <__stack+0x2a7>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    244a:	80 91 87 02 	lds	r24, 0x0287
    244e:	90 91 88 02 	lds	r25, 0x0288
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	ad d4       	rcall	.+2394   	; 0x2db4 <__divmodhi4>
    245a:	8c 01       	movw	r16, r24
    245c:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    245e:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    2460:	2f 3f       	cpi	r18, 0xFF	; 255
    2462:	af ef       	ldi	r26, 0xFF	; 255
    2464:	3a 07       	cpc	r19, r26
    2466:	c1 f4       	brne	.+48     	; 0x2498 <__stack+0x299>
    2468:	69 cf       	rjmp	.-302    	; 0x233c <__stack+0x13d>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    246a:	50 93 88 02 	sts	0x0288, r21
    246e:	40 93 87 02 	sts	0x0287, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    2472:	fa 01       	movw	r30, r20
    2474:	ee 0f       	add	r30, r30
    2476:	ff 1f       	adc	r31, r31
    2478:	ee 0f       	add	r30, r30
    247a:	ff 1f       	adc	r31, r31
    247c:	e5 57       	subi	r30, 0x75	; 117
    247e:	fd 4f       	sbci	r31, 0xFD	; 253
    2480:	42 81       	ldd	r20, Z+2	; 0x02
    2482:	53 81       	ldd	r21, Z+3	; 0x03
    2484:	4f 3f       	cpi	r20, 0xFF	; 255
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
    2488:	09 f0       	breq	.+2      	; 0x248c <__stack+0x28d>
    248a:	29 cf       	rjmp	.-430    	; 0x22de <__stack+0xdf>
    248c:	04 cf       	rjmp	.-504    	; 0x2296 <__stack+0x97>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    248e:	50 93 88 02 	sts	0x0288, r21
    2492:	40 93 87 02 	sts	0x0287, r20
    2496:	ff ce       	rjmp	.-514    	; 0x2296 <__stack+0x97>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    2498:	d0 93 88 02 	sts	0x0288, r29
    249c:	c0 93 87 02 	sts	0x0287, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    24a0:	4e ef       	ldi	r20, 0xFE	; 254
    24a2:	5f ef       	ldi	r21, 0xFF	; 255
    24a4:	9d ce       	rjmp	.-710    	; 0x21e0 <newSort+0x7a>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	08 95       	ret

000024b0 <sortCheck>:
void sortCheck()
{
    24b0:	8f 92       	push	r8
    24b2:	9f 92       	push	r9
    24b4:	af 92       	push	r10
    24b6:	bf 92       	push	r11
    24b8:	cf 92       	push	r12
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    24c8:	40 91 87 02 	lds	r20, 0x0287
    24cc:	50 91 88 02 	lds	r21, 0x0288
    24d0:	42 30       	cpi	r20, 0x02	; 2
    24d2:	51 05       	cpc	r21, r1
    24d4:	30 f4       	brcc	.+12     	; 0x24e2 <sortCheck+0x32>
    24d6:	80 91 4e 02 	lds	r24, 0x024E
    24da:	90 91 4f 02 	lds	r25, 0x024F
    24de:	02 97       	sbiw	r24, 0x02	; 2
    24e0:	79 f0       	breq	.+30     	; 0x2500 <sortCheck+0x50>
    24e2:	ca 01       	movw	r24, r20
    24e4:	02 97       	sbiw	r24, 0x02	; 2
    24e6:	02 97       	sbiw	r24, 0x02	; 2
    24e8:	80 f4       	brcc	.+32     	; 0x250a <sortCheck+0x5a>
    24ea:	80 91 4e 02 	lds	r24, 0x024E
    24ee:	90 91 4f 02 	lds	r25, 0x024F
    24f2:	89 2b       	or	r24, r25
    24f4:	79 f0       	breq	.+30     	; 0x2514 <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    24f6:	01 e0       	ldi	r16, 0x01	; 1
    24f8:	10 e0       	ldi	r17, 0x00	; 0
    24fa:	c0 e0       	ldi	r28, 0x00	; 0
    24fc:	d0 e0       	ldi	r29, 0x00	; 0
    24fe:	0e c0       	rjmp	.+28     	; 0x251c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2500:	00 e0       	ldi	r16, 0x00	; 0
    2502:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2504:	c1 e0       	ldi	r28, 0x01	; 1
    2506:	d0 e0       	ldi	r29, 0x00	; 0
    2508:	09 c0       	rjmp	.+18     	; 0x251c <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    250a:	01 e0       	ldi	r16, 0x01	; 1
    250c:	10 e0       	ldi	r17, 0x00	; 0
    250e:	c0 e0       	ldi	r28, 0x00	; 0
    2510:	d0 e0       	ldi	r29, 0x00	; 0
    2512:	04 c0       	rjmp	.+8      	; 0x251c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2514:	00 e0       	ldi	r16, 0x00	; 0
    2516:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2518:	c1 e0       	ldi	r28, 0x01	; 1
    251a:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    251c:	9a 01       	movw	r18, r20
    251e:	21 70       	andi	r18, 0x01	; 1
    2520:	30 78       	andi	r19, 0x80	; 128
    2522:	33 23       	and	r19, r19
    2524:	34 f4       	brge	.+12     	; 0x2532 <sortCheck+0x82>
    2526:	21 50       	subi	r18, 0x01	; 1
    2528:	31 09       	sbc	r19, r1
    252a:	2e 6f       	ori	r18, 0xFE	; 254
    252c:	3f 6f       	ori	r19, 0xFF	; 255
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	b2 2e       	mov	r11, r18
    2534:	a3 2e       	mov	r10, r19
    2536:	f9 01       	movw	r30, r18
    2538:	ee 0f       	add	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	ed 57       	subi	r30, 0x7D	; 125
    253e:	fd 4f       	sbci	r31, 0xFD	; 253
    2540:	20 81       	ld	r18, Z
    2542:	31 81       	ldd	r19, Z+1	; 0x01
    2544:	fa 01       	movw	r30, r20
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	e3 56       	subi	r30, 0x63	; 99
    254c:	fd 4f       	sbci	r31, 0xFD	; 253
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	79 f0       	breq	.+30     	; 0x2576 <sortCheck+0xc6>
    2558:	80 91 ad 02 	lds	r24, 0x02AD
    255c:	90 91 ae 02 	lds	r25, 0x02AE
    2560:	fc 01       	movw	r30, r24
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	e3 56       	subi	r30, 0x63	; 99
    2568:	fd 4f       	sbci	r31, 0xFD	; 253
    256a:	40 81       	ld	r20, Z
    256c:	51 81       	ldd	r21, Z+1	; 0x01
    256e:	24 17       	cp	r18, r20
    2570:	35 07       	cpc	r19, r21
    2572:	09 f0       	breq	.+2      	; 0x2576 <sortCheck+0xc6>
    2574:	a6 c0       	rjmp	.+332    	; 0x26c2 <sortCheck+0x212>
	{
		if (armCount>0)
    2576:	80 91 02 02 	lds	r24, 0x0202
    257a:	90 91 03 02 	lds	r25, 0x0203
    257e:	18 16       	cp	r1, r24
    2580:	19 06       	cpc	r1, r25
    2582:	0c f0       	brlt	.+2      	; 0x2586 <sortCheck+0xd6>
    2584:	95 c0       	rjmp	.+298    	; 0x26b0 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    2586:	f9 01       	movw	r30, r18
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	eb 55       	subi	r30, 0x5B	; 91
    258e:	fd 4f       	sbci	r31, 0xFD	; 253
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	70 93 88 02 	sts	0x0288, r23
    2598:	60 93 87 02 	sts	0x0287, r22
			if (arm[arm0] == -1)
    259c:	fe 01       	movw	r30, r28
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ef 54       	subi	r30, 0x4F	; 79
    25a4:	fd 4f       	sbci	r31, 0xFD	; 253
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	69 f4       	brne	.+26     	; 0x25c8 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    25ae:	61 70       	andi	r22, 0x01	; 1
    25b0:	70 78       	andi	r23, 0x80	; 128
    25b2:	77 23       	and	r23, r23
    25b4:	34 f4       	brge	.+12     	; 0x25c2 <sortCheck+0x112>
    25b6:	61 50       	subi	r22, 0x01	; 1
    25b8:	71 09       	sbc	r23, r1
    25ba:	6e 6f       	ori	r22, 0xFE	; 254
    25bc:	7f 6f       	ori	r23, 0xFF	; 255
    25be:	6f 5f       	subi	r22, 0xFF	; 255
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	ce 01       	movw	r24, r28
    25c4:	c9 d8       	rcall	.-3694   	; 0x1758 <pickSort>
    25c6:	15 c0       	rjmp	.+42     	; 0x25f2 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    25c8:	f8 01       	movw	r30, r16
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ef 54       	subi	r30, 0x4F	; 79
    25d0:	fd 4f       	sbci	r31, 0xFD	; 253
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	61 f4       	brne	.+24     	; 0x25f2 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    25da:	61 70       	andi	r22, 0x01	; 1
    25dc:	70 78       	andi	r23, 0x80	; 128
    25de:	77 23       	and	r23, r23
    25e0:	34 f4       	brge	.+12     	; 0x25ee <sortCheck+0x13e>
    25e2:	61 50       	subi	r22, 0x01	; 1
    25e4:	71 09       	sbc	r23, r1
    25e6:	6e 6f       	ori	r22, 0xFE	; 254
    25e8:	7f 6f       	ori	r23, 0xFF	; 255
    25ea:	6f 5f       	subi	r22, 0xFF	; 255
    25ec:	7f 4f       	sbci	r23, 0xFF	; 255
    25ee:	c8 01       	movw	r24, r16
    25f0:	b3 d8       	rcall	.-3738   	; 0x1758 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    25f2:	80 91 02 02 	lds	r24, 0x0202
    25f6:	90 91 03 02 	lds	r25, 0x0203
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	09 f4       	brne	.+2      	; 0x2600 <sortCheck+0x150>
    25fe:	6d c1       	rjmp	.+730    	; 0x28da <sortCheck+0x42a>
    2600:	80 91 87 02 	lds	r24, 0x0287
    2604:	90 91 88 02 	lds	r25, 0x0288
    2608:	fc 01       	movw	r30, r24
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	e5 57       	subi	r30, 0x75	; 117
    2614:	fd 4f       	sbci	r31, 0xFD	; 253
    2616:	20 81       	ld	r18, Z
    2618:	31 81       	ldd	r19, Z+1	; 0x01
    261a:	2f 3f       	cpi	r18, 0xFF	; 255
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	09 f4       	brne	.+2      	; 0x2622 <sortCheck+0x172>
    2620:	5c c1       	rjmp	.+696    	; 0x28da <sortCheck+0x42a>
    2622:	fc 01       	movw	r30, r24
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	ee 0f       	add	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	e5 57       	subi	r30, 0x75	; 117
    262e:	fd 4f       	sbci	r31, 0xFD	; 253
    2630:	22 81       	ldd	r18, Z+2	; 0x02
    2632:	33 81       	ldd	r19, Z+3	; 0x03
    2634:	2f 3f       	cpi	r18, 0xFF	; 255
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	09 f4       	brne	.+2      	; 0x263c <sortCheck+0x18c>
    263a:	4f c1       	rjmp	.+670    	; 0x28da <sortCheck+0x42a>
    263c:	9c 01       	movw	r18, r24
    263e:	21 70       	andi	r18, 0x01	; 1
    2640:	30 78       	andi	r19, 0x80	; 128
    2642:	33 23       	and	r19, r19
    2644:	34 f4       	brge	.+12     	; 0x2652 <sortCheck+0x1a2>
    2646:	21 50       	subi	r18, 0x01	; 1
    2648:	31 09       	sbc	r19, r1
    264a:	2e 6f       	ori	r18, 0xFE	; 254
    264c:	3f 6f       	ori	r19, 0xFF	; 255
    264e:	2f 5f       	subi	r18, 0xFF	; 255
    2650:	3f 4f       	sbci	r19, 0xFF	; 255
    2652:	62 2f       	mov	r22, r18
    2654:	73 2f       	mov	r23, r19
    2656:	f9 01       	movw	r30, r18
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ed 57       	subi	r30, 0x7D	; 125
    265e:	fd 4f       	sbci	r31, 0xFD	; 253
    2660:	20 81       	ld	r18, Z
    2662:	31 81       	ldd	r19, Z+1	; 0x01
    2664:	2f 3f       	cpi	r18, 0xFF	; 255
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	09 f0       	breq	.+2      	; 0x266c <sortCheck+0x1bc>
    266a:	37 c1       	rjmp	.+622    	; 0x28da <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    266c:	fc 01       	movw	r30, r24
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	e3 56       	subi	r30, 0x63	; 99
    2674:	fd 4f       	sbci	r31, 0xFD	; 253
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	fe 01       	movw	r30, r28
    267c:	ee 0f       	add	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	ef 54       	subi	r30, 0x4F	; 79
    2682:	fd 4f       	sbci	r31, 0xFD	; 253
    2684:	20 81       	ld	r18, Z
    2686:	31 81       	ldd	r19, Z+1	; 0x01
    2688:	28 17       	cp	r18, r24
    268a:	39 07       	cpc	r19, r25
    268c:	19 f4       	brne	.+6      	; 0x2694 <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    268e:	c8 01       	movw	r24, r16
    2690:	5e db       	rcall	.-2372   	; 0x1d4e <sortDrop>
    2692:	23 c1       	rjmp	.+582    	; 0x28da <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    2694:	f8 01       	movw	r30, r16
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	ef 54       	subi	r30, 0x4F	; 79
    269c:	fd 4f       	sbci	r31, 0xFD	; 253
    269e:	20 81       	ld	r18, Z
    26a0:	31 81       	ldd	r19, Z+1	; 0x01
    26a2:	82 17       	cp	r24, r18
    26a4:	93 07       	cpc	r25, r19
    26a6:	09 f0       	breq	.+2      	; 0x26aa <sortCheck+0x1fa>
    26a8:	18 c1       	rjmp	.+560    	; 0x28da <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    26aa:	ce 01       	movw	r24, r28
    26ac:	50 db       	rcall	.-2400   	; 0x1d4e <sortDrop>
    26ae:	15 c1       	rjmp	.+554    	; 0x28da <sortCheck+0x42a>
			}
		}
		else ct = adj;
    26b0:	80 91 ad 02 	lds	r24, 0x02AD
    26b4:	90 91 ae 02 	lds	r25, 0x02AE
    26b8:	90 93 88 02 	sts	0x0288, r25
    26bc:	80 93 87 02 	sts	0x0287, r24
    26c0:	0c c1       	rjmp	.+536    	; 0x28da <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    26c2:	fe 01       	movw	r30, r28
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ef 54       	subi	r30, 0x4F	; 79
    26ca:	fd 4f       	sbci	r31, 0xFD	; 253
    26cc:	01 90       	ld	r0, Z+
    26ce:	f0 81       	ld	r31, Z
    26d0:	e0 2d       	mov	r30, r0
    26d2:	4e 17       	cp	r20, r30
    26d4:	5f 07       	cpc	r21, r31
    26d6:	09 f4       	brne	.+2      	; 0x26da <sortCheck+0x22a>
    26d8:	8f c0       	rjmp	.+286    	; 0x27f8 <sortCheck+0x348>
    26da:	d8 01       	movw	r26, r16
    26dc:	aa 0f       	add	r26, r26
    26de:	bb 1f       	adc	r27, r27
    26e0:	af 54       	subi	r26, 0x4F	; 79
    26e2:	bd 4f       	sbci	r27, 0xFD	; 253
    26e4:	8d 90       	ld	r8, X+
    26e6:	9c 90       	ld	r9, X
    26e8:	48 15       	cp	r20, r8
    26ea:	59 05       	cpc	r21, r9
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <sortCheck+0x240>
    26ee:	84 c0       	rjmp	.+264    	; 0x27f8 <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    26f0:	e0 90 02 02 	lds	r14, 0x0202
    26f4:	f0 90 03 02 	lds	r15, 0x0203
    26f8:	e1 14       	cp	r14, r1
    26fa:	f1 04       	cpc	r15, r1
    26fc:	09 f4       	brne	.+2      	; 0x2700 <sortCheck+0x250>
    26fe:	4e c0       	rjmp	.+156    	; 0x279c <sortCheck+0x2ec>
    2700:	b1 e0       	ldi	r27, 0x01	; 1
    2702:	eb 16       	cp	r14, r27
    2704:	f1 04       	cpc	r15, r1
    2706:	29 f4       	brne	.+10     	; 0x2712 <sortCheck+0x262>
    2708:	2f 3f       	cpi	r18, 0xFF	; 255
    270a:	6f ef       	ldi	r22, 0xFF	; 255
    270c:	36 07       	cpc	r19, r22
    270e:	b1 f5       	brne	.+108    	; 0x277c <sortCheck+0x2cc>
    2710:	09 c0       	rjmp	.+18     	; 0x2724 <sortCheck+0x274>
    2712:	67 01       	movw	r12, r14
    2714:	71 e0       	ldi	r23, 0x01	; 1
    2716:	c7 1a       	sub	r12, r23
    2718:	d1 08       	sbc	r13, r1
    271a:	a2 e0       	ldi	r26, 0x02	; 2
    271c:	ca 16       	cp	r12, r26
    271e:	d1 04       	cpc	r13, r1
    2720:	08 f0       	brcs	.+2      	; 0x2724 <sortCheck+0x274>
    2722:	65 c0       	rjmp	.+202    	; 0x27ee <sortCheck+0x33e>
    2724:	6c 01       	movw	r12, r24
    2726:	cc 0c       	add	r12, r12
    2728:	dd 1c       	adc	r13, r13
    272a:	cc 0c       	add	r12, r12
    272c:	dd 1c       	adc	r13, r13
    272e:	b6 01       	movw	r22, r12
    2730:	65 57       	subi	r22, 0x75	; 117
    2732:	7d 4f       	sbci	r23, 0xFD	; 253
    2734:	db 01       	movw	r26, r22
    2736:	cd 90       	ld	r12, X+
    2738:	dc 90       	ld	r13, X
    273a:	4c 15       	cp	r20, r12
    273c:	5d 05       	cpc	r21, r13
    273e:	21 f0       	breq	.+8      	; 0x2748 <sortCheck+0x298>
    2740:	cd 20       	and	r12, r13
    2742:	c0 94       	com	r12
    2744:	09 f0       	breq	.+2      	; 0x2748 <sortCheck+0x298>
    2746:	53 c0       	rjmp	.+166    	; 0x27ee <sortCheck+0x33e>
    2748:	6c 01       	movw	r12, r24
    274a:	cc 0c       	add	r12, r12
    274c:	dd 1c       	adc	r13, r13
    274e:	cc 0c       	add	r12, r12
    2750:	dd 1c       	adc	r13, r13
    2752:	b6 01       	movw	r22, r12
    2754:	65 57       	subi	r22, 0x75	; 117
    2756:	7d 4f       	sbci	r23, 0xFD	; 253
    2758:	db 01       	movw	r26, r22
    275a:	12 96       	adiw	r26, 0x02	; 2
    275c:	cd 90       	ld	r12, X+
    275e:	dc 90       	ld	r13, X
    2760:	13 97       	sbiw	r26, 0x03	; 3
    2762:	4c 15       	cp	r20, r12
    2764:	5d 05       	cpc	r21, r13
    2766:	21 f0       	breq	.+8      	; 0x2770 <sortCheck+0x2c0>
    2768:	cd 20       	and	r12, r13
    276a:	c0 94       	com	r12
    276c:	09 f0       	breq	.+2      	; 0x2770 <sortCheck+0x2c0>
    276e:	3f c0       	rjmp	.+126    	; 0x27ee <sortCheck+0x33e>
		{
			if (armCount>0)
    2770:	1e 14       	cp	r1, r14
    2772:	1f 04       	cpc	r1, r15
    2774:	9c f4       	brge	.+38     	; 0x279c <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    2776:	2f 3f       	cpi	r18, 0xFF	; 255
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	81 f0       	breq	.+32     	; 0x279c <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    277c:	31 96       	adiw	r30, 0x01	; 1
    277e:	31 f4       	brne	.+12     	; 0x278c <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    2780:	6b 2d       	mov	r22, r11
    2782:	7a 2d       	mov	r23, r10
    2784:	ce 01       	movw	r24, r28
    2786:	0e 94 ac 0b 	call	0x1758	; 0x1758 <pickSort>
    278a:	08 c0       	rjmp	.+16     	; 0x279c <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    278c:	89 20       	and	r8, r9
    278e:	80 94       	com	r8
    2790:	29 f4       	brne	.+10     	; 0x279c <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    2792:	6b 2d       	mov	r22, r11
    2794:	7a 2d       	mov	r23, r10
    2796:	c8 01       	movw	r24, r16
    2798:	0e 94 ac 0b 	call	0x1758	; 0x1758 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    279c:	80 91 87 02 	lds	r24, 0x0287
    27a0:	90 91 88 02 	lds	r25, 0x0288
    27a4:	bc 01       	movw	r22, r24
    27a6:	6f 5f       	subi	r22, 0xFF	; 255
    27a8:	7f 4f       	sbci	r23, 0xFF	; 255
    27aa:	61 70       	andi	r22, 0x01	; 1
    27ac:	70 78       	andi	r23, 0x80	; 128
    27ae:	77 23       	and	r23, r23
    27b0:	34 f4       	brge	.+12     	; 0x27be <sortCheck+0x30e>
    27b2:	61 50       	subi	r22, 0x01	; 1
    27b4:	71 09       	sbc	r23, r1
    27b6:	6e 6f       	ori	r22, 0xFE	; 254
    27b8:	7f 6f       	ori	r23, 0xFF	; 255
    27ba:	6f 5f       	subi	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	6c 5f       	subi	r22, 0xFC	; 252
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	81 70       	andi	r24, 0x01	; 1
    27c4:	90 78       	andi	r25, 0x80	; 128
    27c6:	99 23       	and	r25, r25
    27c8:	24 f4       	brge	.+8      	; 0x27d2 <sortCheck+0x322>
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	8e 6f       	ori	r24, 0xFE	; 254
    27ce:	9f 6f       	ori	r25, 0xFF	; 255
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	04 96       	adiw	r24, 0x04	; 4
    27d4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <traverseToSort>
			newSort();
    27d8:	c6 dc       	rcall	.-1652   	; 0x2166 <newSort>
			if (ct == 4 || ct == 5)
    27da:	80 91 87 02 	lds	r24, 0x0287
    27de:	90 91 88 02 	lds	r25, 0x0288
    27e2:	04 97       	sbiw	r24, 0x04	; 4
    27e4:	02 97       	sbiw	r24, 0x02	; 2
    27e6:	08 f0       	brcs	.+2      	; 0x27ea <sortCheck+0x33a>
    27e8:	89 c0       	rjmp	.+274    	; 0x28fc <sortCheck+0x44c>
				newSort();
    27ea:	bd dc       	rcall	.-1670   	; 0x2166 <newSort>
    27ec:	87 c0       	rjmp	.+270    	; 0x28fc <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    27ee:	90 93 88 02 	sts	0x0288, r25
    27f2:	80 93 87 02 	sts	0x0287, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    27f6:	71 c0       	rjmp	.+226    	; 0x28da <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    27f8:	a0 91 02 02 	lds	r26, 0x0202
    27fc:	b0 91 03 02 	lds	r27, 0x0203
    2800:	10 97       	sbiw	r26, 0x00	; 0
    2802:	c1 f5       	brne	.+112    	; 0x2874 <sortCheck+0x3c4>
    2804:	dc 01       	movw	r26, r24
    2806:	aa 0f       	add	r26, r26
    2808:	bb 1f       	adc	r27, r27
    280a:	ac 59       	subi	r26, 0x9C	; 156
    280c:	bd 4f       	sbci	r27, 0xFD	; 253
    280e:	0d 90       	ld	r0, X+
    2810:	bc 91       	ld	r27, X
    2812:	a0 2d       	mov	r26, r0
    2814:	a1 30       	cpi	r26, 0x01	; 1
    2816:	b1 05       	cpc	r27, r1
    2818:	d9 f4       	brne	.+54     	; 0x2850 <sortCheck+0x3a0>
    281a:	dc 01       	movw	r26, r24
    281c:	aa 0f       	add	r26, r26
    281e:	bb 1f       	adc	r27, r27
    2820:	aa 0f       	add	r26, r26
    2822:	bb 1f       	adc	r27, r27
    2824:	a5 57       	subi	r26, 0x75	; 117
    2826:	bd 4f       	sbci	r27, 0xFD	; 253
    2828:	0d 90       	ld	r0, X+
    282a:	bc 91       	ld	r27, X
    282c:	a0 2d       	mov	r26, r0
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	09 f4       	brne	.+2      	; 0x2834 <sortCheck+0x384>
    2832:	4b c0       	rjmp	.+150    	; 0x28ca <sortCheck+0x41a>
    2834:	dc 01       	movw	r26, r24
    2836:	aa 0f       	add	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	aa 0f       	add	r26, r26
    283c:	bb 1f       	adc	r27, r27
    283e:	a5 57       	subi	r26, 0x75	; 117
    2840:	bd 4f       	sbci	r27, 0xFD	; 253
    2842:	12 96       	adiw	r26, 0x02	; 2
    2844:	8d 91       	ld	r24, X+
    2846:	9c 91       	ld	r25, X
    2848:	13 97       	sbiw	r26, 0x03	; 3
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	19 f4       	brne	.+6      	; 0x2854 <sortCheck+0x3a4>
    284e:	3d c0       	rjmp	.+122    	; 0x28ca <sortCheck+0x41a>
    2850:	ab 2b       	or	r26, r27
    2852:	d9 f5       	brne	.+118    	; 0x28ca <sortCheck+0x41a>
    2854:	2f 3f       	cpi	r18, 0xFF	; 255
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	c1 f5       	brne	.+112    	; 0x28ca <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    285a:	4e 17       	cp	r20, r30
    285c:	5f 07       	cpc	r21, r31
    285e:	29 f4       	brne	.+10     	; 0x286a <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    2860:	6b 2d       	mov	r22, r11
    2862:	7a 2d       	mov	r23, r10
    2864:	c8 01       	movw	r24, r16
    2866:	73 da       	rcall	.-2842   	; 0x1d4e <sortDrop>
    2868:	30 c0       	rjmp	.+96     	; 0x28ca <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    286a:	6b 2d       	mov	r22, r11
    286c:	7a 2d       	mov	r23, r10
    286e:	ce 01       	movw	r24, r28
    2870:	6e da       	rcall	.-2852   	; 0x1d4e <sortDrop>
    2872:	2b c0       	rjmp	.+86     	; 0x28ca <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2874:	11 97       	sbiw	r26, 0x01	; 1
    2876:	49 f5       	brne	.+82     	; 0x28ca <sortCheck+0x41a>
    2878:	dc 01       	movw	r26, r24
    287a:	aa 0f       	add	r26, r26
    287c:	bb 1f       	adc	r27, r27
    287e:	aa 0f       	add	r26, r26
    2880:	bb 1f       	adc	r27, r27
    2882:	a5 57       	subi	r26, 0x75	; 117
    2884:	bd 4f       	sbci	r27, 0xFD	; 253
    2886:	4d 91       	ld	r20, X+
    2888:	5c 91       	ld	r21, X
    288a:	4f 3f       	cpi	r20, 0xFF	; 255
    288c:	5f 4f       	sbci	r21, 0xFF	; 255
    288e:	69 f0       	breq	.+26     	; 0x28aa <sortCheck+0x3fa>
    2890:	dc 01       	movw	r26, r24
    2892:	aa 0f       	add	r26, r26
    2894:	bb 1f       	adc	r27, r27
    2896:	aa 0f       	add	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	a5 57       	subi	r26, 0x75	; 117
    289c:	bd 4f       	sbci	r27, 0xFD	; 253
    289e:	12 96       	adiw	r26, 0x02	; 2
    28a0:	8d 91       	ld	r24, X+
    28a2:	9c 91       	ld	r25, X
    28a4:	13 97       	sbiw	r26, 0x03	; 3
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	81 f4       	brne	.+32     	; 0x28ca <sortCheck+0x41a>
    28aa:	2f 3f       	cpi	r18, 0xFF	; 255
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    28ae:	69 f0       	breq	.+26     	; 0x28ca <sortCheck+0x41a>
			if (arm[arm0] == -1)
    28b0:	31 96       	adiw	r30, 0x01	; 1
    28b2:	31 f4       	brne	.+12     	; 0x28c0 <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    28b4:	6b 2d       	mov	r22, r11
    28b6:	7a 2d       	mov	r23, r10
    28b8:	ce 01       	movw	r24, r28
    28ba:	0e 94 ac 0b 	call	0x1758	; 0x1758 <pickSort>
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    28c0:	6b 2d       	mov	r22, r11
    28c2:	7a 2d       	mov	r23, r10
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <pickSort>
			ct = adj;
    28ca:	80 91 ad 02 	lds	r24, 0x02AD
    28ce:	90 91 ae 02 	lds	r25, 0x02AE
    28d2:	90 93 88 02 	sts	0x0288, r25
    28d6:	80 93 87 02 	sts	0x0287, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    28da:	80 91 87 02 	lds	r24, 0x0287
    28de:	90 91 88 02 	lds	r25, 0x0288
    28e2:	02 96       	adiw	r24, 0x02	; 2
    28e4:	83 70       	andi	r24, 0x03	; 3
    28e6:	90 78       	andi	r25, 0x80	; 128
    28e8:	99 23       	and	r25, r25
    28ea:	24 f4       	brge	.+8      	; 0x28f4 <sortCheck+0x444>
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	8c 6f       	ori	r24, 0xFC	; 252
    28f0:	9f 6f       	ori	r25, 0xFF	; 255
    28f2:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    28f4:	90 93 ae 02 	sts	0x02AE, r25
    28f8:	80 93 ad 02 	sts	0x02AD, r24
}
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	cf 90       	pop	r12
    290c:	bf 90       	pop	r11
    290e:	af 90       	pop	r10
    2910:	9f 90       	pop	r9
    2912:	8f 90       	pop	r8
    2914:	08 95       	ret

00002916 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2916:	80 91 8b 02 	lds	r24, 0x028B
    291a:	90 91 8c 02 	lds	r25, 0x028C
    291e:	20 91 9d 02 	lds	r18, 0x029D
    2922:	30 91 9e 02 	lds	r19, 0x029E
    2926:	82 17       	cp	r24, r18
    2928:	93 07       	cpc	r25, r19
    292a:	09 f0       	breq	.+2      	; 0x292e <predict+0x18>
    292c:	5f c0       	rjmp	.+190    	; 0x29ec <predict+0xd6>
    292e:	20 91 8d 02 	lds	r18, 0x028D
    2932:	30 91 8e 02 	lds	r19, 0x028E
    2936:	82 17       	cp	r24, r18
    2938:	93 07       	cpc	r25, r19
    293a:	09 f0       	breq	.+2      	; 0x293e <predict+0x28>
    293c:	57 c0       	rjmp	.+174    	; 0x29ec <predict+0xd6>
    293e:	80 91 8f 02 	lds	r24, 0x028F
    2942:	90 91 90 02 	lds	r25, 0x0290
    2946:	20 91 9f 02 	lds	r18, 0x029F
    294a:	30 91 a0 02 	lds	r19, 0x02A0
    294e:	82 17       	cp	r24, r18
    2950:	93 07       	cpc	r25, r19
    2952:	09 f0       	breq	.+2      	; 0x2956 <predict+0x40>
    2954:	4b c0       	rjmp	.+150    	; 0x29ec <predict+0xd6>
    2956:	20 91 91 02 	lds	r18, 0x0291
    295a:	30 91 92 02 	lds	r19, 0x0292
    295e:	82 17       	cp	r24, r18
    2960:	93 07       	cpc	r25, r19
    2962:	09 f0       	breq	.+2      	; 0x2966 <predict+0x50>
    2964:	43 c0       	rjmp	.+134    	; 0x29ec <predict+0xd6>
    2966:	80 91 87 02 	lds	r24, 0x0287
    296a:	90 91 88 02 	lds	r25, 0x0288
    296e:	fc 01       	movw	r30, r24
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	e5 57       	subi	r30, 0x75	; 117
    297a:	fd 4f       	sbci	r31, 0xFD	; 253
    297c:	20 81       	ld	r18, Z
    297e:	31 81       	ldd	r19, Z+1	; 0x01
    2980:	fc 01       	movw	r30, r24
    2982:	ee 0f       	add	r30, r30
    2984:	ff 1f       	adc	r31, r31
    2986:	e3 56       	subi	r30, 0x63	; 99
    2988:	fd 4f       	sbci	r31, 0xFD	; 253
    298a:	40 81       	ld	r20, Z
    298c:	51 81       	ldd	r21, Z+1	; 0x01
    298e:	24 17       	cp	r18, r20
    2990:	35 07       	cpc	r19, r21
    2992:	61 f5       	brne	.+88     	; 0x29ec <predict+0xd6>
    2994:	fc 01       	movw	r30, r24
    2996:	ee 0f       	add	r30, r30
    2998:	ff 1f       	adc	r31, r31
    299a:	ee 0f       	add	r30, r30
    299c:	ff 1f       	adc	r31, r31
    299e:	e5 57       	subi	r30, 0x75	; 117
    29a0:	fd 4f       	sbci	r31, 0xFD	; 253
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	28 17       	cp	r18, r24
    29a8:	39 07       	cpc	r19, r25
    29aa:	01 f5       	brne	.+64     	; 0x29ec <predict+0xd6>
    29ac:	80 91 83 02 	lds	r24, 0x0283
    29b0:	90 91 84 02 	lds	r25, 0x0284
    29b4:	01 96       	adiw	r24, 0x01	; 1
    29b6:	d1 f4       	brne	.+52     	; 0x29ec <predict+0xd6>
    29b8:	80 91 85 02 	lds	r24, 0x0285
    29bc:	90 91 86 02 	lds	r25, 0x0286
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	a1 f4       	brne	.+40     	; 0x29ec <predict+0xd6>
    29c4:	80 91 b1 02 	lds	r24, 0x02B1
    29c8:	90 91 b2 02 	lds	r25, 0x02B2
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	71 f4       	brne	.+28     	; 0x29ec <predict+0xd6>
    29d0:	80 91 b3 02 	lds	r24, 0x02B3
    29d4:	90 91 b4 02 	lds	r25, 0x02B4
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	41 f4       	brne	.+16     	; 0x29ec <predict+0xd6>
		sorted = total;
    29dc:	80 91 00 02 	lds	r24, 0x0200
    29e0:	90 91 01 02 	lds	r25, 0x0201
    29e4:	90 93 57 02 	sts	0x0257, r25
    29e8:	80 93 56 02 	sts	0x0256, r24
    29ec:	08 95       	ret

000029ee <main>:

}
int main()
{
	int i=0;
	init_devices();
    29ee:	0e 94 d6 04 	call	0x9ac	; 0x9ac <init_devices>
	lcd_set_4bit();
    29f2:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    29f6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    29fa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <color_sensor_scaling>
	stop();
	lcd_print(2,11,scan(),1);
	stop();
	while(1);
	*/
	setIndicatorAndColor();
    29fe:	0e 94 c3 08 	call	0x1186	; 0x1186 <setIndicatorAndColor>
	threshold=6000;
    2a02:	80 e7       	ldi	r24, 0x70	; 112
    2a04:	97 e1       	ldi	r25, 0x17	; 23
    2a06:	90 93 6d 02 	sts	0x026D, r25
    2a0a:	80 93 6c 02 	sts	0x026C, r24
	ct = 0; adj = 2;
    2a0e:	10 92 88 02 	sts	0x0288, r1
    2a12:	10 92 87 02 	sts	0x0287, r1
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	90 93 ae 02 	sts	0x02AE, r25
    2a1e:	80 93 ad 02 	sts	0x02AD, r24
	//lcd("Begin");
	while (sorted<total)
    2a22:	20 91 56 02 	lds	r18, 0x0256
    2a26:	30 91 57 02 	lds	r19, 0x0257
    2a2a:	80 91 00 02 	lds	r24, 0x0200
    2a2e:	90 91 01 02 	lds	r25, 0x0201
    2a32:	28 17       	cp	r18, r24
    2a34:	39 07       	cpc	r19, r25
    2a36:	a4 f5       	brge	.+104    	; 0x2aa0 <main+0xb2>
	{
		canDrop();
    2a38:	20 da       	rcall	.-3008   	; 0x1e7a <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2a3a:	80 91 52 02 	lds	r24, 0x0252
    2a3e:	90 91 53 02 	lds	r25, 0x0253
    2a42:	03 97       	sbiw	r24, 0x03	; 3
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <main+0x5a>
			predict();
    2a46:	67 df       	rcall	.-306    	; 0x2916 <predict>
		if (sorted == total)
    2a48:	20 91 56 02 	lds	r18, 0x0256
    2a4c:	30 91 57 02 	lds	r19, 0x0257
    2a50:	80 91 00 02 	lds	r24, 0x0200
    2a54:	90 91 01 02 	lds	r25, 0x0201
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	09 f1       	breq	.+66     	; 0x2aa0 <main+0xb2>
			break;
		pickup();
    2a5e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2a62:	80 91 87 02 	lds	r24, 0x0287
    2a66:	90 91 88 02 	lds	r25, 0x0288
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	61 70       	andi	r22, 0x01	; 1
    2a6e:	70 78       	andi	r23, 0x80	; 128
    2a70:	77 23       	and	r23, r23
    2a72:	34 f4       	brge	.+12     	; 0x2a80 <main+0x92>
    2a74:	61 50       	subi	r22, 0x01	; 1
    2a76:	71 09       	sbc	r23, r1
    2a78:	6e 6f       	ori	r22, 0xFE	; 254
    2a7a:	7f 6f       	ori	r23, 0xFF	; 255
    2a7c:	6f 5f       	subi	r22, 0xFF	; 255
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a80:	6c 5f       	subi	r22, 0xFC	; 252
    2a82:	7f 4f       	sbci	r23, 0xFF	; 255
    2a84:	0e 94 b6 07 	call	0xf6c	; 0xf6c <traverseToSort>
		sortCheck();
    2a88:	13 dd       	rcall	.-1498   	; 0x24b0 <sortCheck>
	*/
	setIndicatorAndColor();
	threshold=6000;
	ct = 0; adj = 2;
	//lcd("Begin");
	while (sorted<total)
    2a8a:	20 91 56 02 	lds	r18, 0x0256
    2a8e:	30 91 57 02 	lds	r19, 0x0257
    2a92:	80 91 00 02 	lds	r24, 0x0200
    2a96:	90 91 01 02 	lds	r25, 0x0201
    2a9a:	28 17       	cp	r18, r24
    2a9c:	39 07       	cpc	r19, r25
    2a9e:	64 f2       	brlt	.-104    	; 0x2a38 <main+0x4a>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	08 95       	ret

00002aa6 <__subsf3>:
    2aa6:	50 58       	subi	r21, 0x80	; 128

00002aa8 <__addsf3>:
    2aa8:	bb 27       	eor	r27, r27
    2aaa:	aa 27       	eor	r26, r26
    2aac:	0e d0       	rcall	.+28     	; 0x2aca <__addsf3x>
    2aae:	48 c1       	rjmp	.+656    	; 0x2d40 <__fp_round>
    2ab0:	39 d1       	rcall	.+626    	; 0x2d24 <__fp_pscA>
    2ab2:	30 f0       	brcs	.+12     	; 0x2ac0 <__addsf3+0x18>
    2ab4:	3e d1       	rcall	.+636    	; 0x2d32 <__fp_pscB>
    2ab6:	20 f0       	brcs	.+8      	; 0x2ac0 <__addsf3+0x18>
    2ab8:	31 f4       	brne	.+12     	; 0x2ac6 <__addsf3+0x1e>
    2aba:	9f 3f       	cpi	r25, 0xFF	; 255
    2abc:	11 f4       	brne	.+4      	; 0x2ac2 <__addsf3+0x1a>
    2abe:	1e f4       	brtc	.+6      	; 0x2ac6 <__addsf3+0x1e>
    2ac0:	2e c1       	rjmp	.+604    	; 0x2d1e <__fp_nan>
    2ac2:	0e f4       	brtc	.+2      	; 0x2ac6 <__addsf3+0x1e>
    2ac4:	e0 95       	com	r30
    2ac6:	e7 fb       	bst	r30, 7
    2ac8:	24 c1       	rjmp	.+584    	; 0x2d12 <__fp_inf>

00002aca <__addsf3x>:
    2aca:	e9 2f       	mov	r30, r25
    2acc:	4a d1       	rcall	.+660    	; 0x2d62 <__fp_split3>
    2ace:	80 f3       	brcs	.-32     	; 0x2ab0 <__addsf3+0x8>
    2ad0:	ba 17       	cp	r27, r26
    2ad2:	62 07       	cpc	r22, r18
    2ad4:	73 07       	cpc	r23, r19
    2ad6:	84 07       	cpc	r24, r20
    2ad8:	95 07       	cpc	r25, r21
    2ada:	18 f0       	brcs	.+6      	; 0x2ae2 <__addsf3x+0x18>
    2adc:	71 f4       	brne	.+28     	; 0x2afa <__addsf3x+0x30>
    2ade:	9e f5       	brtc	.+102    	; 0x2b46 <__addsf3x+0x7c>
    2ae0:	62 c1       	rjmp	.+708    	; 0x2da6 <__fp_zero>
    2ae2:	0e f4       	brtc	.+2      	; 0x2ae6 <__addsf3x+0x1c>
    2ae4:	e0 95       	com	r30
    2ae6:	0b 2e       	mov	r0, r27
    2ae8:	ba 2f       	mov	r27, r26
    2aea:	a0 2d       	mov	r26, r0
    2aec:	0b 01       	movw	r0, r22
    2aee:	b9 01       	movw	r22, r18
    2af0:	90 01       	movw	r18, r0
    2af2:	0c 01       	movw	r0, r24
    2af4:	ca 01       	movw	r24, r20
    2af6:	a0 01       	movw	r20, r0
    2af8:	11 24       	eor	r1, r1
    2afa:	ff 27       	eor	r31, r31
    2afc:	59 1b       	sub	r21, r25
    2afe:	99 f0       	breq	.+38     	; 0x2b26 <__addsf3x+0x5c>
    2b00:	59 3f       	cpi	r21, 0xF9	; 249
    2b02:	50 f4       	brcc	.+20     	; 0x2b18 <__addsf3x+0x4e>
    2b04:	50 3e       	cpi	r21, 0xE0	; 224
    2b06:	68 f1       	brcs	.+90     	; 0x2b62 <__addsf3x+0x98>
    2b08:	1a 16       	cp	r1, r26
    2b0a:	f0 40       	sbci	r31, 0x00	; 0
    2b0c:	a2 2f       	mov	r26, r18
    2b0e:	23 2f       	mov	r18, r19
    2b10:	34 2f       	mov	r19, r20
    2b12:	44 27       	eor	r20, r20
    2b14:	58 5f       	subi	r21, 0xF8	; 248
    2b16:	f3 cf       	rjmp	.-26     	; 0x2afe <__addsf3x+0x34>
    2b18:	46 95       	lsr	r20
    2b1a:	37 95       	ror	r19
    2b1c:	27 95       	ror	r18
    2b1e:	a7 95       	ror	r26
    2b20:	f0 40       	sbci	r31, 0x00	; 0
    2b22:	53 95       	inc	r21
    2b24:	c9 f7       	brne	.-14     	; 0x2b18 <__addsf3x+0x4e>
    2b26:	7e f4       	brtc	.+30     	; 0x2b46 <__addsf3x+0x7c>
    2b28:	1f 16       	cp	r1, r31
    2b2a:	ba 0b       	sbc	r27, r26
    2b2c:	62 0b       	sbc	r22, r18
    2b2e:	73 0b       	sbc	r23, r19
    2b30:	84 0b       	sbc	r24, r20
    2b32:	ba f0       	brmi	.+46     	; 0x2b62 <__addsf3x+0x98>
    2b34:	91 50       	subi	r25, 0x01	; 1
    2b36:	a1 f0       	breq	.+40     	; 0x2b60 <__addsf3x+0x96>
    2b38:	ff 0f       	add	r31, r31
    2b3a:	bb 1f       	adc	r27, r27
    2b3c:	66 1f       	adc	r22, r22
    2b3e:	77 1f       	adc	r23, r23
    2b40:	88 1f       	adc	r24, r24
    2b42:	c2 f7       	brpl	.-16     	; 0x2b34 <__addsf3x+0x6a>
    2b44:	0e c0       	rjmp	.+28     	; 0x2b62 <__addsf3x+0x98>
    2b46:	ba 0f       	add	r27, r26
    2b48:	62 1f       	adc	r22, r18
    2b4a:	73 1f       	adc	r23, r19
    2b4c:	84 1f       	adc	r24, r20
    2b4e:	48 f4       	brcc	.+18     	; 0x2b62 <__addsf3x+0x98>
    2b50:	87 95       	ror	r24
    2b52:	77 95       	ror	r23
    2b54:	67 95       	ror	r22
    2b56:	b7 95       	ror	r27
    2b58:	f7 95       	ror	r31
    2b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <__addsf3x+0x96>
    2b5e:	b3 cf       	rjmp	.-154    	; 0x2ac6 <__addsf3+0x1e>
    2b60:	93 95       	inc	r25
    2b62:	88 0f       	add	r24, r24
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <__addsf3x+0x9e>
    2b66:	99 27       	eor	r25, r25
    2b68:	ee 0f       	add	r30, r30
    2b6a:	97 95       	ror	r25
    2b6c:	87 95       	ror	r24
    2b6e:	08 95       	ret

00002b70 <__divsf3>:
    2b70:	0c d0       	rcall	.+24     	; 0x2b8a <__divsf3x>
    2b72:	e6 c0       	rjmp	.+460    	; 0x2d40 <__fp_round>
    2b74:	de d0       	rcall	.+444    	; 0x2d32 <__fp_pscB>
    2b76:	40 f0       	brcs	.+16     	; 0x2b88 <__divsf3+0x18>
    2b78:	d5 d0       	rcall	.+426    	; 0x2d24 <__fp_pscA>
    2b7a:	30 f0       	brcs	.+12     	; 0x2b88 <__divsf3+0x18>
    2b7c:	21 f4       	brne	.+8      	; 0x2b86 <__divsf3+0x16>
    2b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <__divsf3+0x18>
    2b82:	c7 c0       	rjmp	.+398    	; 0x2d12 <__fp_inf>
    2b84:	51 11       	cpse	r21, r1
    2b86:	10 c1       	rjmp	.+544    	; 0x2da8 <__fp_szero>
    2b88:	ca c0       	rjmp	.+404    	; 0x2d1e <__fp_nan>

00002b8a <__divsf3x>:
    2b8a:	eb d0       	rcall	.+470    	; 0x2d62 <__fp_split3>
    2b8c:	98 f3       	brcs	.-26     	; 0x2b74 <__divsf3+0x4>

00002b8e <__divsf3_pse>:
    2b8e:	99 23       	and	r25, r25
    2b90:	c9 f3       	breq	.-14     	; 0x2b84 <__divsf3+0x14>
    2b92:	55 23       	and	r21, r21
    2b94:	b1 f3       	breq	.-20     	; 0x2b82 <__divsf3+0x12>
    2b96:	95 1b       	sub	r25, r21
    2b98:	55 0b       	sbc	r21, r21
    2b9a:	bb 27       	eor	r27, r27
    2b9c:	aa 27       	eor	r26, r26
    2b9e:	62 17       	cp	r22, r18
    2ba0:	73 07       	cpc	r23, r19
    2ba2:	84 07       	cpc	r24, r20
    2ba4:	38 f0       	brcs	.+14     	; 0x2bb4 <__divsf3_pse+0x26>
    2ba6:	9f 5f       	subi	r25, 0xFF	; 255
    2ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	44 1f       	adc	r20, r20
    2bb0:	aa 1f       	adc	r26, r26
    2bb2:	a9 f3       	breq	.-22     	; 0x2b9e <__divsf3_pse+0x10>
    2bb4:	33 d0       	rcall	.+102    	; 0x2c1c <__divsf3_pse+0x8e>
    2bb6:	0e 2e       	mov	r0, r30
    2bb8:	3a f0       	brmi	.+14     	; 0x2bc8 <__divsf3_pse+0x3a>
    2bba:	e0 e8       	ldi	r30, 0x80	; 128
    2bbc:	30 d0       	rcall	.+96     	; 0x2c1e <__divsf3_pse+0x90>
    2bbe:	91 50       	subi	r25, 0x01	; 1
    2bc0:	50 40       	sbci	r21, 0x00	; 0
    2bc2:	e6 95       	lsr	r30
    2bc4:	00 1c       	adc	r0, r0
    2bc6:	ca f7       	brpl	.-14     	; 0x2bba <__divsf3_pse+0x2c>
    2bc8:	29 d0       	rcall	.+82     	; 0x2c1c <__divsf3_pse+0x8e>
    2bca:	fe 2f       	mov	r31, r30
    2bcc:	27 d0       	rcall	.+78     	; 0x2c1c <__divsf3_pse+0x8e>
    2bce:	66 0f       	add	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	bb 1f       	adc	r27, r27
    2bd6:	26 17       	cp	r18, r22
    2bd8:	37 07       	cpc	r19, r23
    2bda:	48 07       	cpc	r20, r24
    2bdc:	ab 07       	cpc	r26, r27
    2bde:	b0 e8       	ldi	r27, 0x80	; 128
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <__divsf3_pse+0x56>
    2be2:	bb 0b       	sbc	r27, r27
    2be4:	80 2d       	mov	r24, r0
    2be6:	bf 01       	movw	r22, r30
    2be8:	ff 27       	eor	r31, r31
    2bea:	93 58       	subi	r25, 0x83	; 131
    2bec:	5f 4f       	sbci	r21, 0xFF	; 255
    2bee:	2a f0       	brmi	.+10     	; 0x2bfa <__divsf3_pse+0x6c>
    2bf0:	9e 3f       	cpi	r25, 0xFE	; 254
    2bf2:	51 05       	cpc	r21, r1
    2bf4:	68 f0       	brcs	.+26     	; 0x2c10 <__divsf3_pse+0x82>
    2bf6:	8d c0       	rjmp	.+282    	; 0x2d12 <__fp_inf>
    2bf8:	d7 c0       	rjmp	.+430    	; 0x2da8 <__fp_szero>
    2bfa:	5f 3f       	cpi	r21, 0xFF	; 255
    2bfc:	ec f3       	brlt	.-6      	; 0x2bf8 <__divsf3_pse+0x6a>
    2bfe:	98 3e       	cpi	r25, 0xE8	; 232
    2c00:	dc f3       	brlt	.-10     	; 0x2bf8 <__divsf3_pse+0x6a>
    2c02:	86 95       	lsr	r24
    2c04:	77 95       	ror	r23
    2c06:	67 95       	ror	r22
    2c08:	b7 95       	ror	r27
    2c0a:	f7 95       	ror	r31
    2c0c:	9f 5f       	subi	r25, 0xFF	; 255
    2c0e:	c9 f7       	brne	.-14     	; 0x2c02 <__divsf3_pse+0x74>
    2c10:	88 0f       	add	r24, r24
    2c12:	91 1d       	adc	r25, r1
    2c14:	96 95       	lsr	r25
    2c16:	87 95       	ror	r24
    2c18:	97 f9       	bld	r25, 7
    2c1a:	08 95       	ret
    2c1c:	e1 e0       	ldi	r30, 0x01	; 1
    2c1e:	66 0f       	add	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	88 1f       	adc	r24, r24
    2c24:	bb 1f       	adc	r27, r27
    2c26:	62 17       	cp	r22, r18
    2c28:	73 07       	cpc	r23, r19
    2c2a:	84 07       	cpc	r24, r20
    2c2c:	ba 07       	cpc	r27, r26
    2c2e:	20 f0       	brcs	.+8      	; 0x2c38 <__divsf3_pse+0xaa>
    2c30:	62 1b       	sub	r22, r18
    2c32:	73 0b       	sbc	r23, r19
    2c34:	84 0b       	sbc	r24, r20
    2c36:	ba 0b       	sbc	r27, r26
    2c38:	ee 1f       	adc	r30, r30
    2c3a:	88 f7       	brcc	.-30     	; 0x2c1e <__divsf3_pse+0x90>
    2c3c:	e0 95       	com	r30
    2c3e:	08 95       	ret

00002c40 <__fixunssfsi>:
    2c40:	98 d0       	rcall	.+304    	; 0x2d72 <__fp_splitA>
    2c42:	88 f0       	brcs	.+34     	; 0x2c66 <__fixunssfsi+0x26>
    2c44:	9f 57       	subi	r25, 0x7F	; 127
    2c46:	90 f0       	brcs	.+36     	; 0x2c6c <__fixunssfsi+0x2c>
    2c48:	b9 2f       	mov	r27, r25
    2c4a:	99 27       	eor	r25, r25
    2c4c:	b7 51       	subi	r27, 0x17	; 23
    2c4e:	a0 f0       	brcs	.+40     	; 0x2c78 <__fixunssfsi+0x38>
    2c50:	d1 f0       	breq	.+52     	; 0x2c86 <__fixunssfsi+0x46>
    2c52:	66 0f       	add	r22, r22
    2c54:	77 1f       	adc	r23, r23
    2c56:	88 1f       	adc	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	1a f0       	brmi	.+6      	; 0x2c62 <__fixunssfsi+0x22>
    2c5c:	ba 95       	dec	r27
    2c5e:	c9 f7       	brne	.-14     	; 0x2c52 <__fixunssfsi+0x12>
    2c60:	12 c0       	rjmp	.+36     	; 0x2c86 <__fixunssfsi+0x46>
    2c62:	b1 30       	cpi	r27, 0x01	; 1
    2c64:	81 f0       	breq	.+32     	; 0x2c86 <__fixunssfsi+0x46>
    2c66:	9f d0       	rcall	.+318    	; 0x2da6 <__fp_zero>
    2c68:	b1 e0       	ldi	r27, 0x01	; 1
    2c6a:	08 95       	ret
    2c6c:	9c c0       	rjmp	.+312    	; 0x2da6 <__fp_zero>
    2c6e:	67 2f       	mov	r22, r23
    2c70:	78 2f       	mov	r23, r24
    2c72:	88 27       	eor	r24, r24
    2c74:	b8 5f       	subi	r27, 0xF8	; 248
    2c76:	39 f0       	breq	.+14     	; 0x2c86 <__fixunssfsi+0x46>
    2c78:	b9 3f       	cpi	r27, 0xF9	; 249
    2c7a:	cc f3       	brlt	.-14     	; 0x2c6e <__fixunssfsi+0x2e>
    2c7c:	86 95       	lsr	r24
    2c7e:	77 95       	ror	r23
    2c80:	67 95       	ror	r22
    2c82:	b3 95       	inc	r27
    2c84:	d9 f7       	brne	.-10     	; 0x2c7c <__fixunssfsi+0x3c>
    2c86:	3e f4       	brtc	.+14     	; 0x2c96 <__fixunssfsi+0x56>
    2c88:	90 95       	com	r25
    2c8a:	80 95       	com	r24
    2c8c:	70 95       	com	r23
    2c8e:	61 95       	neg	r22
    2c90:	7f 4f       	sbci	r23, 0xFF	; 255
    2c92:	8f 4f       	sbci	r24, 0xFF	; 255
    2c94:	9f 4f       	sbci	r25, 0xFF	; 255
    2c96:	08 95       	ret

00002c98 <__floatunsisf>:
    2c98:	e8 94       	clt
    2c9a:	09 c0       	rjmp	.+18     	; 0x2cae <__floatsisf+0x12>

00002c9c <__floatsisf>:
    2c9c:	97 fb       	bst	r25, 7
    2c9e:	3e f4       	brtc	.+14     	; 0x2cae <__floatsisf+0x12>
    2ca0:	90 95       	com	r25
    2ca2:	80 95       	com	r24
    2ca4:	70 95       	com	r23
    2ca6:	61 95       	neg	r22
    2ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    2caa:	8f 4f       	sbci	r24, 0xFF	; 255
    2cac:	9f 4f       	sbci	r25, 0xFF	; 255
    2cae:	99 23       	and	r25, r25
    2cb0:	a9 f0       	breq	.+42     	; 0x2cdc <__floatsisf+0x40>
    2cb2:	f9 2f       	mov	r31, r25
    2cb4:	96 e9       	ldi	r25, 0x96	; 150
    2cb6:	bb 27       	eor	r27, r27
    2cb8:	93 95       	inc	r25
    2cba:	f6 95       	lsr	r31
    2cbc:	87 95       	ror	r24
    2cbe:	77 95       	ror	r23
    2cc0:	67 95       	ror	r22
    2cc2:	b7 95       	ror	r27
    2cc4:	f1 11       	cpse	r31, r1
    2cc6:	f8 cf       	rjmp	.-16     	; 0x2cb8 <__floatsisf+0x1c>
    2cc8:	fa f4       	brpl	.+62     	; 0x2d08 <__floatsisf+0x6c>
    2cca:	bb 0f       	add	r27, r27
    2ccc:	11 f4       	brne	.+4      	; 0x2cd2 <__floatsisf+0x36>
    2cce:	60 ff       	sbrs	r22, 0
    2cd0:	1b c0       	rjmp	.+54     	; 0x2d08 <__floatsisf+0x6c>
    2cd2:	6f 5f       	subi	r22, 0xFF	; 255
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	16 c0       	rjmp	.+44     	; 0x2d08 <__floatsisf+0x6c>
    2cdc:	88 23       	and	r24, r24
    2cde:	11 f0       	breq	.+4      	; 0x2ce4 <__floatsisf+0x48>
    2ce0:	96 e9       	ldi	r25, 0x96	; 150
    2ce2:	11 c0       	rjmp	.+34     	; 0x2d06 <__floatsisf+0x6a>
    2ce4:	77 23       	and	r23, r23
    2ce6:	21 f0       	breq	.+8      	; 0x2cf0 <__floatsisf+0x54>
    2ce8:	9e e8       	ldi	r25, 0x8E	; 142
    2cea:	87 2f       	mov	r24, r23
    2cec:	76 2f       	mov	r23, r22
    2cee:	05 c0       	rjmp	.+10     	; 0x2cfa <__floatsisf+0x5e>
    2cf0:	66 23       	and	r22, r22
    2cf2:	71 f0       	breq	.+28     	; 0x2d10 <__floatsisf+0x74>
    2cf4:	96 e8       	ldi	r25, 0x86	; 134
    2cf6:	86 2f       	mov	r24, r22
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	2a f0       	brmi	.+10     	; 0x2d08 <__floatsisf+0x6c>
    2cfe:	9a 95       	dec	r25
    2d00:	66 0f       	add	r22, r22
    2d02:	77 1f       	adc	r23, r23
    2d04:	88 1f       	adc	r24, r24
    2d06:	da f7       	brpl	.-10     	; 0x2cfe <__floatsisf+0x62>
    2d08:	88 0f       	add	r24, r24
    2d0a:	96 95       	lsr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	97 f9       	bld	r25, 7
    2d10:	08 95       	ret

00002d12 <__fp_inf>:
    2d12:	97 f9       	bld	r25, 7
    2d14:	9f 67       	ori	r25, 0x7F	; 127
    2d16:	80 e8       	ldi	r24, 0x80	; 128
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	08 95       	ret

00002d1e <__fp_nan>:
    2d1e:	9f ef       	ldi	r25, 0xFF	; 255
    2d20:	80 ec       	ldi	r24, 0xC0	; 192
    2d22:	08 95       	ret

00002d24 <__fp_pscA>:
    2d24:	00 24       	eor	r0, r0
    2d26:	0a 94       	dec	r0
    2d28:	16 16       	cp	r1, r22
    2d2a:	17 06       	cpc	r1, r23
    2d2c:	18 06       	cpc	r1, r24
    2d2e:	09 06       	cpc	r0, r25
    2d30:	08 95       	ret

00002d32 <__fp_pscB>:
    2d32:	00 24       	eor	r0, r0
    2d34:	0a 94       	dec	r0
    2d36:	12 16       	cp	r1, r18
    2d38:	13 06       	cpc	r1, r19
    2d3a:	14 06       	cpc	r1, r20
    2d3c:	05 06       	cpc	r0, r21
    2d3e:	08 95       	ret

00002d40 <__fp_round>:
    2d40:	09 2e       	mov	r0, r25
    2d42:	03 94       	inc	r0
    2d44:	00 0c       	add	r0, r0
    2d46:	11 f4       	brne	.+4      	; 0x2d4c <__fp_round+0xc>
    2d48:	88 23       	and	r24, r24
    2d4a:	52 f0       	brmi	.+20     	; 0x2d60 <__fp_round+0x20>
    2d4c:	bb 0f       	add	r27, r27
    2d4e:	40 f4       	brcc	.+16     	; 0x2d60 <__fp_round+0x20>
    2d50:	bf 2b       	or	r27, r31
    2d52:	11 f4       	brne	.+4      	; 0x2d58 <__fp_round+0x18>
    2d54:	60 ff       	sbrs	r22, 0
    2d56:	04 c0       	rjmp	.+8      	; 0x2d60 <__fp_round+0x20>
    2d58:	6f 5f       	subi	r22, 0xFF	; 255
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	08 95       	ret

00002d62 <__fp_split3>:
    2d62:	57 fd       	sbrc	r21, 7
    2d64:	90 58       	subi	r25, 0x80	; 128
    2d66:	44 0f       	add	r20, r20
    2d68:	55 1f       	adc	r21, r21
    2d6a:	59 f0       	breq	.+22     	; 0x2d82 <__fp_splitA+0x10>
    2d6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d6e:	71 f0       	breq	.+28     	; 0x2d8c <__fp_splitA+0x1a>
    2d70:	47 95       	ror	r20

00002d72 <__fp_splitA>:
    2d72:	88 0f       	add	r24, r24
    2d74:	97 fb       	bst	r25, 7
    2d76:	99 1f       	adc	r25, r25
    2d78:	61 f0       	breq	.+24     	; 0x2d92 <__fp_splitA+0x20>
    2d7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d7c:	79 f0       	breq	.+30     	; 0x2d9c <__fp_splitA+0x2a>
    2d7e:	87 95       	ror	r24
    2d80:	08 95       	ret
    2d82:	12 16       	cp	r1, r18
    2d84:	13 06       	cpc	r1, r19
    2d86:	14 06       	cpc	r1, r20
    2d88:	55 1f       	adc	r21, r21
    2d8a:	f2 cf       	rjmp	.-28     	; 0x2d70 <__fp_split3+0xe>
    2d8c:	46 95       	lsr	r20
    2d8e:	f1 df       	rcall	.-30     	; 0x2d72 <__fp_splitA>
    2d90:	08 c0       	rjmp	.+16     	; 0x2da2 <__fp_splitA+0x30>
    2d92:	16 16       	cp	r1, r22
    2d94:	17 06       	cpc	r1, r23
    2d96:	18 06       	cpc	r1, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	f1 cf       	rjmp	.-30     	; 0x2d7e <__fp_splitA+0xc>
    2d9c:	86 95       	lsr	r24
    2d9e:	71 05       	cpc	r23, r1
    2da0:	61 05       	cpc	r22, r1
    2da2:	08 94       	sec
    2da4:	08 95       	ret

00002da6 <__fp_zero>:
    2da6:	e8 94       	clt

00002da8 <__fp_szero>:
    2da8:	bb 27       	eor	r27, r27
    2daa:	66 27       	eor	r22, r22
    2dac:	77 27       	eor	r23, r23
    2dae:	cb 01       	movw	r24, r22
    2db0:	97 f9       	bld	r25, 7
    2db2:	08 95       	ret

00002db4 <__divmodhi4>:
    2db4:	97 fb       	bst	r25, 7
    2db6:	07 2e       	mov	r0, r23
    2db8:	16 f4       	brtc	.+4      	; 0x2dbe <__divmodhi4+0xa>
    2dba:	00 94       	com	r0
    2dbc:	06 d0       	rcall	.+12     	; 0x2dca <__divmodhi4_neg1>
    2dbe:	77 fd       	sbrc	r23, 7
    2dc0:	08 d0       	rcall	.+16     	; 0x2dd2 <__divmodhi4_neg2>
    2dc2:	1a d0       	rcall	.+52     	; 0x2df8 <__udivmodhi4>
    2dc4:	07 fc       	sbrc	r0, 7
    2dc6:	05 d0       	rcall	.+10     	; 0x2dd2 <__divmodhi4_neg2>
    2dc8:	3e f4       	brtc	.+14     	; 0x2dd8 <__divmodhi4_exit>

00002dca <__divmodhi4_neg1>:
    2dca:	90 95       	com	r25
    2dcc:	81 95       	neg	r24
    2dce:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd0:	08 95       	ret

00002dd2 <__divmodhi4_neg2>:
    2dd2:	70 95       	com	r23
    2dd4:	61 95       	neg	r22
    2dd6:	7f 4f       	sbci	r23, 0xFF	; 255

00002dd8 <__divmodhi4_exit>:
    2dd8:	08 95       	ret

00002dda <__umulhisi3>:
    2dda:	a2 9f       	mul	r26, r18
    2ddc:	b0 01       	movw	r22, r0
    2dde:	b3 9f       	mul	r27, r19
    2de0:	c0 01       	movw	r24, r0
    2de2:	a3 9f       	mul	r26, r19
    2de4:	70 0d       	add	r23, r0
    2de6:	81 1d       	adc	r24, r1
    2de8:	11 24       	eor	r1, r1
    2dea:	91 1d       	adc	r25, r1
    2dec:	b2 9f       	mul	r27, r18
    2dee:	70 0d       	add	r23, r0
    2df0:	81 1d       	adc	r24, r1
    2df2:	11 24       	eor	r1, r1
    2df4:	91 1d       	adc	r25, r1
    2df6:	08 95       	ret

00002df8 <__udivmodhi4>:
    2df8:	aa 1b       	sub	r26, r26
    2dfa:	bb 1b       	sub	r27, r27
    2dfc:	51 e1       	ldi	r21, 0x11	; 17
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <__udivmodhi4_ep>

00002e00 <__udivmodhi4_loop>:
    2e00:	aa 1f       	adc	r26, r26
    2e02:	bb 1f       	adc	r27, r27
    2e04:	a6 17       	cp	r26, r22
    2e06:	b7 07       	cpc	r27, r23
    2e08:	10 f0       	brcs	.+4      	; 0x2e0e <__udivmodhi4_ep>
    2e0a:	a6 1b       	sub	r26, r22
    2e0c:	b7 0b       	sbc	r27, r23

00002e0e <__udivmodhi4_ep>:
    2e0e:	88 1f       	adc	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	5a 95       	dec	r21
    2e14:	a9 f7       	brne	.-22     	; 0x2e00 <__udivmodhi4_loop>
    2e16:	80 95       	com	r24
    2e18:	90 95       	com	r25
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	08 95       	ret

00002e20 <_exit>:
    2e20:	f8 94       	cli

00002e22 <__stop_program>:
    2e22:	ff cf       	rjmp	.-2      	; 0x2e22 <__stop_program>
