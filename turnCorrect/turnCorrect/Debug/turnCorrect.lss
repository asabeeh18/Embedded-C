
turnCorrect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800200  00002e2e  00002ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  0080025e  0080025e  00002f20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034d4  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004da  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025ef  00000000  00000000  00006c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a04  00000000  00000000  00009270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000867  00000000  00000000  00009c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002201  00000000  00000000  0000a4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  0000c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	08 c4       	rjmp	.+2064   	; 0x826 <__vector_5>
      16:	00 00       	nop
      18:	e1 c3       	rjmp	.+1986   	; 0x7dc <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e2       	ldi	r30, 0x2E	; 46
      fc:	fe e2       	ldi	r31, 0x2E	; 46
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 35       	cpi	r26, 0x5E	; 94
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ae e5       	ldi	r26, 0x5E	; 94
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 3c       	cpi	r26, 0xCD	; 205
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <main>
     122:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
	lcd_print(2,1,t,5);
	_delay_ms(10000);
	lcd_wr_command(0x01); //Clear the LCD
	lcd((char*)t);
	return t;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 89 02 	sts	0x0289, r25
     30a:	80 93 88 02 	sts	0x0288, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 8d 02 	sts	0x028D, r21
     338:	40 93 8c 02 	sts	0x028C, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 cc 02 	sts	0x02CC, r25
     374:	80 93 cb 02 	sts	0x02CB, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 8d 02 	sts	0x028D, r21
     3a0:	40 93 8c 02 	sts	0x028C, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 c2 02 	sts	0x02C2, r25
     3dc:	80 93 c1 02 	sts	0x02C1, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 8d 02 	sts	0x028D, r21
     3fe:	40 93 8c 02 	sts	0x028C, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 9e 02 	sts	0x029E, r25
     436:	80 93 9d 02 	sts	0x029D, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 ca 02 	sts	0x02CA, r25
     47c:	80 93 c9 02 	sts	0x02C9, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 6c 02 	lds	r24, 0x026C
     628:	90 91 6d 02 	lds	r25, 0x026D
     62c:	a0 91 6e 02 	lds	r26, 0x026E
     630:	b0 91 6f 02 	lds	r27, 0x026F
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 6c 02 	sts	0x026C, r24
     63e:	90 93 6d 02 	sts	0x026D, r25
     642:	a0 93 6e 02 	sts	0x026E, r26
     646:	b0 93 6f 02 	sts	0x026F, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <servo_1>:
     676:	10 92 89 00 	sts	0x0089, r1
     67a:	68 2f       	mov	r22, r24
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__floatunsisf>
     686:	2b e7       	ldi	r18, 0x7B	; 123
     688:	34 e1       	ldi	r19, 0x14	; 20
     68a:	4e ee       	ldi	r20, 0xEE	; 238
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__divsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4c e0       	ldi	r20, 0x0C	; 12
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__addsf3>
     69e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fixunssfsi>
     6a2:	60 93 88 00 	sts	0x0088, r22
     6a6:	08 95       	ret

000006a8 <filter_red>:
     6a8:	5e 98       	cbi	0x0b, 6	; 11
     6aa:	5f 98       	cbi	0x0b, 7	; 11
     6ac:	08 95       	ret

000006ae <filter_green>:
     6ae:	5e 9a       	sbi	0x0b, 6	; 11
     6b0:	5f 9a       	sbi	0x0b, 7	; 11
     6b2:	08 95       	ret

000006b4 <filter_blue>:
     6b4:	5e 98       	cbi	0x0b, 6	; 11
     6b6:	5f 9a       	sbi	0x0b, 7	; 11
     6b8:	08 95       	ret

000006ba <color_sensor_scaling>:
     6ba:	5c 9a       	sbi	0x0b, 4	; 11
     6bc:	5d 9a       	sbi	0x0b, 5	; 11
     6be:	08 95       	ret

000006c0 <red_read>:
     6c0:	f3 df       	rcall	.-26     	; 0x6a8 <filter_red>
     6c2:	10 92 6c 02 	sts	0x026C, r1
     6c6:	10 92 6d 02 	sts	0x026D, r1
     6ca:	10 92 6e 02 	sts	0x026E, r1
     6ce:	10 92 6f 02 	sts	0x026F, r1
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	8f e7       	ldi	r24, 0x7F	; 127
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <red_read+0x18>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <red_read+0x22>
     6e2:	00 00       	nop
     6e4:	80 91 6c 02 	lds	r24, 0x026C
     6e8:	90 91 6d 02 	lds	r25, 0x026D
     6ec:	a0 91 6e 02 	lds	r26, 0x026E
     6f0:	b0 91 6f 02 	lds	r27, 0x026F
     6f4:	80 93 92 02 	sts	0x0292, r24
     6f8:	90 93 93 02 	sts	0x0293, r25
     6fc:	a0 93 94 02 	sts	0x0294, r26
     700:	b0 93 95 02 	sts	0x0295, r27
     704:	2f ef       	ldi	r18, 0xFF	; 255
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9c e2       	ldi	r25, 0x2C	; 44
     70a:	21 50       	subi	r18, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <red_read+0x4a>
     712:	00 c0       	rjmp	.+0      	; 0x714 <red_read+0x54>
     714:	00 00       	nop
     716:	08 95       	ret

00000718 <green_read>:
     718:	ca df       	rcall	.-108    	; 0x6ae <filter_green>
     71a:	10 92 6c 02 	sts	0x026C, r1
     71e:	10 92 6d 02 	sts	0x026D, r1
     722:	10 92 6e 02 	sts	0x026E, r1
     726:	10 92 6f 02 	sts	0x026F, r1
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	8f e7       	ldi	r24, 0x7F	; 127
     72e:	94 e0       	ldi	r25, 0x04	; 4
     730:	21 50       	subi	r18, 0x01	; 1
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <green_read+0x18>
     738:	00 c0       	rjmp	.+0      	; 0x73a <green_read+0x22>
     73a:	00 00       	nop
     73c:	80 91 6c 02 	lds	r24, 0x026C
     740:	90 91 6d 02 	lds	r25, 0x026D
     744:	a0 91 6e 02 	lds	r26, 0x026E
     748:	b0 91 6f 02 	lds	r27, 0x026F
     74c:	80 93 8e 02 	sts	0x028E, r24
     750:	90 93 8f 02 	sts	0x028F, r25
     754:	a0 93 90 02 	sts	0x0290, r26
     758:	b0 93 91 02 	sts	0x0291, r27
     75c:	08 95       	ret

0000075e <blue_read>:
     75e:	aa df       	rcall	.-172    	; 0x6b4 <filter_blue>
     760:	10 92 6c 02 	sts	0x026C, r1
     764:	10 92 6d 02 	sts	0x026D, r1
     768:	10 92 6e 02 	sts	0x026E, r1
     76c:	10 92 6f 02 	sts	0x026F, r1
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	8f e7       	ldi	r24, 0x7F	; 127
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	21 50       	subi	r18, 0x01	; 1
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	90 40       	sbci	r25, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <blue_read+0x18>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <blue_read+0x22>
     780:	00 00       	nop
     782:	80 91 6c 02 	lds	r24, 0x026C
     786:	90 91 6d 02 	lds	r25, 0x026D
     78a:	a0 91 6e 02 	lds	r26, 0x026E
     78e:	b0 91 6f 02 	lds	r27, 0x026F
     792:	80 93 82 02 	sts	0x0282, r24
     796:	90 93 83 02 	sts	0x0283, r25
     79a:	a0 93 84 02 	sts	0x0284, r26
     79e:	b0 93 85 02 	sts	0x0285, r27
     7a2:	08 95       	ret

000007a4 <left_encoder_pin_config>:
     7a4:	6c 98       	cbi	0x0d, 4	; 13
     7a6:	74 9a       	sbi	0x0e, 4	; 14
     7a8:	08 95       	ret

000007aa <right_encoder_pin_config>:
     7aa:	6d 98       	cbi	0x0d, 5	; 13
     7ac:	75 9a       	sbi	0x0e, 5	; 14
     7ae:	08 95       	ret

000007b0 <port_init_poz>:
     7b0:	96 de       	rcall	.-724    	; 0x4de <motion_pin_config>
     7b2:	f8 df       	rcall	.-16     	; 0x7a4 <left_encoder_pin_config>
     7b4:	fa cf       	rjmp	.-12     	; 0x7aa <right_encoder_pin_config>
     7b6:	08 95       	ret

000007b8 <left_position_encoder_interrupt_init>:
     7b8:	f8 94       	cli
     7ba:	ea e6       	ldi	r30, 0x6A	; 106
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 83       	st	Z, r24
     7c4:	ec 9a       	sbi	0x1d, 4	; 29
     7c6:	78 94       	sei
     7c8:	08 95       	ret

000007ca <right_position_encoder_interrupt_init>:
     7ca:	f8 94       	cli
     7cc:	ea e6       	ldi	r30, 0x6A	; 106
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	88 60       	ori	r24, 0x08	; 8
     7d4:	80 83       	st	Z, r24
     7d6:	ed 9a       	sbi	0x1d, 5	; 29
     7d8:	78 94       	sei
     7da:	08 95       	ret

000007dc <__vector_6>:
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	80 91 70 02 	lds	r24, 0x0270
     7f2:	90 91 71 02 	lds	r25, 0x0271
     7f6:	a0 91 72 02 	lds	r26, 0x0272
     7fa:	b0 91 73 02 	lds	r27, 0x0273
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	a1 1d       	adc	r26, r1
     802:	b1 1d       	adc	r27, r1
     804:	80 93 70 02 	sts	0x0270, r24
     808:	90 93 71 02 	sts	0x0271, r25
     80c:	a0 93 72 02 	sts	0x0272, r26
     810:	b0 93 73 02 	sts	0x0273, r27
     814:	bf 91       	pop	r27
     816:	af 91       	pop	r26
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_5>:
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	80 91 74 02 	lds	r24, 0x0274
     83c:	90 91 75 02 	lds	r25, 0x0275
     840:	a0 91 76 02 	lds	r26, 0x0276
     844:	b0 91 77 02 	lds	r27, 0x0277
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	a1 1d       	adc	r26, r1
     84c:	b1 1d       	adc	r27, r1
     84e:	80 93 74 02 	sts	0x0274, r24
     852:	90 93 75 02 	sts	0x0275, r25
     856:	a0 93 76 02 	sts	0x0276, r26
     85a:	b0 93 77 02 	sts	0x0277, r27
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <angle_rotate>:
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	bc 01       	movw	r22, r24
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__floatunsisf>
     886:	28 e4       	ldi	r18, 0x48	; 72
     888:	31 ee       	ldi	r19, 0xE1	; 225
     88a:	42 e8       	ldi	r20, 0x82	; 130
     88c:	50 e4       	ldi	r21, 0x40	; 64
     88e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__divsf3>
     892:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fixunssfsi>
     896:	cb 01       	movw	r24, r22
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	10 92 70 02 	sts	0x0270, r1
     8a0:	10 92 71 02 	sts	0x0271, r1
     8a4:	10 92 72 02 	sts	0x0272, r1
     8a8:	10 92 73 02 	sts	0x0273, r1
     8ac:	10 92 74 02 	sts	0x0274, r1
     8b0:	10 92 75 02 	sts	0x0275, r1
     8b4:	10 92 76 02 	sts	0x0276, r1
     8b8:	10 92 77 02 	sts	0x0277, r1
     8bc:	51 e0       	ldi	r21, 0x01	; 1
     8be:	e0 e0       	ldi	r30, 0x00	; 0
     8c0:	c0 90 70 02 	lds	r12, 0x0270
     8c4:	d0 90 71 02 	lds	r13, 0x0271
     8c8:	e0 90 72 02 	lds	r14, 0x0272
     8cc:	f0 90 73 02 	lds	r15, 0x0273
     8d0:	00 91 74 02 	lds	r16, 0x0274
     8d4:	10 91 75 02 	lds	r17, 0x0275
     8d8:	20 91 76 02 	lds	r18, 0x0276
     8dc:	30 91 77 02 	lds	r19, 0x0277
     8e0:	45 2f       	mov	r20, r21
     8e2:	08 17       	cp	r16, r24
     8e4:	19 07       	cpc	r17, r25
     8e6:	2a 07       	cpc	r18, r26
     8e8:	3b 07       	cpc	r19, r27
     8ea:	08 f4       	brcc	.+2      	; 0x8ee <angle_rotate+0x7e>
     8ec:	4e 2f       	mov	r20, r30
     8ee:	41 11       	cpse	r20, r1
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <angle_rotate+0x94>
     8f2:	25 2f       	mov	r18, r21
     8f4:	c8 16       	cp	r12, r24
     8f6:	d9 06       	cpc	r13, r25
     8f8:	ea 06       	cpc	r14, r26
     8fa:	fb 06       	cpc	r15, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <angle_rotate+0x90>
     8fe:	2e 2f       	mov	r18, r30
     900:	22 23       	and	r18, r18
     902:	f1 f2       	breq	.-68     	; 0x8c0 <angle_rotate+0x50>
     904:	0f de       	rcall	.-994    	; 0x524 <stop>
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	08 95       	ret

00000914 <linear_distance_mm>:
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	bc 01       	movw	r22, r24
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__floatunsisf>
     922:	25 ee       	ldi	r18, 0xE5	; 229
     924:	30 ed       	ldi	r19, 0xD0	; 208
     926:	4a ea       	ldi	r20, 0xAA	; 170
     928:	50 e4       	ldi	r21, 0x40	; 64
     92a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__divsf3>
     92e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fixunssfsi>
     932:	10 92 70 02 	sts	0x0270, r1
     936:	10 92 71 02 	sts	0x0271, r1
     93a:	10 92 72 02 	sts	0x0272, r1
     93e:	10 92 73 02 	sts	0x0273, r1
     942:	00 91 70 02 	lds	r16, 0x0270
     946:	10 91 71 02 	lds	r17, 0x0271
     94a:	20 91 72 02 	lds	r18, 0x0272
     94e:	30 91 73 02 	lds	r19, 0x0273
     952:	60 17       	cp	r22, r16
     954:	71 07       	cpc	r23, r17
     956:	82 07       	cpc	r24, r18
     958:	93 07       	cpc	r25, r19
     95a:	98 f7       	brcc	.-26     	; 0x942 <linear_distance_mm+0x2e>
     95c:	e3 dd       	rcall	.-1082   	; 0x524 <stop>
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <forward_mm>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	d0 dd       	rcall	.-1120   	; 0x50c <forward>
     96c:	ce 01       	movw	r24, r28
     96e:	d2 df       	rcall	.-92     	; 0x914 <linear_distance_mm>
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <back_mm>:
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	ca dd       	rcall	.-1132   	; 0x512 <back>
     97e:	ce 01       	movw	r24, r28
     980:	c9 df       	rcall	.-110    	; 0x914 <linear_distance_mm>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <left_degrees>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
     98e:	c4 dd       	rcall	.-1144   	; 0x518 <left>
     990:	ce 01       	movw	r24, r28
     992:	6e df       	rcall	.-292    	; 0x870 <angle_rotate>
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <right_degrees>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	be dd       	rcall	.-1156   	; 0x51e <right>
     9a2:	ce 01       	movw	r24, r28
     9a4:	65 df       	rcall	.-310    	; 0x870 <angle_rotate>
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <init_devices>:
     9ac:	f8 94       	cli
     9ae:	00 df       	rcall	.-512    	; 0x7b0 <port_init_poz>
     9b0:	03 df       	rcall	.-506    	; 0x7b8 <left_position_encoder_interrupt_init>
     9b2:	0b df       	rcall	.-490    	; 0x7ca <right_position_encoder_interrupt_init>
     9b4:	f9 dd       	rcall	.-1038   	; 0x5a8 <port_init>
     9b6:	24 de       	rcall	.-952    	; 0x600 <color_sensor_pin_interrupt_init>
     9b8:	51 de       	rcall	.-862    	; 0x65c <adc_init>
     9ba:	91 dd       	rcall	.-1246   	; 0x4de <motion_pin_config>
     9bc:	75 dd       	rcall	.-1302   	; 0x4a8 <timer5_init>
     9be:	d1 dd       	rcall	.-1118   	; 0x562 <timer1_init>
     9c0:	78 94       	sei
     9c2:	08 95       	ret

000009c4 <Delay>:
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	8c 01       	movw	r16, r24
     9ce:	18 16       	cp	r1, r24
     9d0:	19 06       	cpc	r1, r25
     9d2:	8c f4       	brge	.+34     	; 0x9f6 <Delay+0x32>
     9d4:	c0 e0       	ldi	r28, 0x00	; 0
     9d6:	d0 e0       	ldi	r29, 0x00	; 0
     9d8:	09 c0       	rjmp	.+18     	; 0x9ec <Delay+0x28>
     9da:	86 e6       	ldi	r24, 0x66	; 102
     9dc:	9e e0       	ldi	r25, 0x0E	; 14
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <Delay+0x1a>
     9e2:	00 00       	nop
     9e4:	21 96       	adiw	r28, 0x01	; 1
     9e6:	c0 17       	cp	r28, r16
     9e8:	d1 07       	cpc	r29, r17
     9ea:	39 f0       	breq	.+14     	; 0x9fa <Delay+0x36>
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	ed dd       	rcall	.-1062   	; 0x5ca <ADC_Conversion>
     9f0:	89 32       	cpi	r24, 0x29	; 41
     9f2:	98 f3       	brcs	.-26     	; 0x9da <Delay+0x16>
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <Delay+0x36>
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	94 dd       	rcall	.-1240   	; 0x524 <stop>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	c0 17       	cp	r28, r16
     a00:	d1 07       	cpc	r29, r17
     a02:	0c f0       	brlt	.+2      	; 0xa06 <Delay+0x42>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <scan>:
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	55 de       	rcall	.-854    	; 0x6c0 <red_read>
     a16:	a3 de       	rcall	.-698    	; 0x75e <blue_read>
     a18:	7f de       	rcall	.-770    	; 0x718 <green_read>
     a1a:	80 91 80 02 	lds	r24, 0x0280
     a1e:	90 91 81 02 	lds	r25, 0x0281
     a22:	aa 27       	eor	r26, r26
     a24:	97 fd       	sbrc	r25, 7
     a26:	a0 95       	com	r26
     a28:	ba 2f       	mov	r27, r26
     a2a:	40 91 92 02 	lds	r20, 0x0292
     a2e:	50 91 93 02 	lds	r21, 0x0293
     a32:	60 91 94 02 	lds	r22, 0x0294
     a36:	70 91 95 02 	lds	r23, 0x0295
     a3a:	48 17       	cp	r20, r24
     a3c:	59 07       	cpc	r21, r25
     a3e:	6a 07       	cpc	r22, r26
     a40:	7b 07       	cpc	r23, r27
     a42:	d8 f4       	brcc	.+54     	; 0xa7a <scan+0x6a>
     a44:	40 91 8e 02 	lds	r20, 0x028E
     a48:	50 91 8f 02 	lds	r21, 0x028F
     a4c:	60 91 90 02 	lds	r22, 0x0290
     a50:	70 91 91 02 	lds	r23, 0x0291
     a54:	48 17       	cp	r20, r24
     a56:	59 07       	cpc	r21, r25
     a58:	6a 07       	cpc	r22, r26
     a5a:	7b 07       	cpc	r23, r27
     a5c:	70 f4       	brcc	.+28     	; 0xa7a <scan+0x6a>
     a5e:	40 91 82 02 	lds	r20, 0x0282
     a62:	50 91 83 02 	lds	r21, 0x0283
     a66:	60 91 84 02 	lds	r22, 0x0284
     a6a:	70 91 85 02 	lds	r23, 0x0285
     a6e:	48 17       	cp	r20, r24
     a70:	59 07       	cpc	r21, r25
     a72:	6a 07       	cpc	r22, r26
     a74:	7b 07       	cpc	r23, r27
     a76:	08 f4       	brcc	.+2      	; 0xa7a <scan+0x6a>
     a78:	46 c0       	rjmp	.+140    	; 0xb06 <scan+0xf6>
     a7a:	40 91 92 02 	lds	r20, 0x0292
     a7e:	50 91 93 02 	lds	r21, 0x0293
     a82:	60 91 94 02 	lds	r22, 0x0294
     a86:	70 91 95 02 	lds	r23, 0x0295
     a8a:	80 91 82 02 	lds	r24, 0x0282
     a8e:	90 91 83 02 	lds	r25, 0x0283
     a92:	a0 91 84 02 	lds	r26, 0x0284
     a96:	b0 91 85 02 	lds	r27, 0x0285
     a9a:	84 17       	cp	r24, r20
     a9c:	95 07       	cpc	r25, r21
     a9e:	a6 07       	cpc	r26, r22
     aa0:	b7 07       	cpc	r27, r23
     aa2:	c8 f4       	brcc	.+50     	; 0xad6 <scan+0xc6>
     aa4:	00 91 92 02 	lds	r16, 0x0292
     aa8:	10 91 93 02 	lds	r17, 0x0293
     aac:	20 91 94 02 	lds	r18, 0x0294
     ab0:	30 91 95 02 	lds	r19, 0x0295
     ab4:	40 91 8e 02 	lds	r20, 0x028E
     ab8:	50 91 8f 02 	lds	r21, 0x028F
     abc:	60 91 90 02 	lds	r22, 0x0290
     ac0:	70 91 91 02 	lds	r23, 0x0291
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	40 17       	cp	r20, r16
     aca:	51 07       	cpc	r21, r17
     acc:	62 07       	cpc	r22, r18
     ace:	73 07       	cpc	r23, r19
     ad0:	f8 f4       	brcc	.+62     	; 0xb10 <scan+0x100>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	1d c0       	rjmp	.+58     	; 0xb10 <scan+0x100>
     ad6:	40 91 82 02 	lds	r20, 0x0282
     ada:	50 91 83 02 	lds	r21, 0x0283
     ade:	60 91 84 02 	lds	r22, 0x0284
     ae2:	70 91 85 02 	lds	r23, 0x0285
     ae6:	80 91 8e 02 	lds	r24, 0x028E
     aea:	90 91 8f 02 	lds	r25, 0x028F
     aee:	a0 91 90 02 	lds	r26, 0x0290
     af2:	b0 91 91 02 	lds	r27, 0x0291
     af6:	84 17       	cp	r24, r20
     af8:	95 07       	cpc	r25, r21
     afa:	a6 07       	cpc	r26, r22
     afc:	b7 07       	cpc	r27, r23
     afe:	30 f4       	brcc	.+12     	; 0xb0c <scan+0xfc>
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <scan+0x100>
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <scan+0x100>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <setIndicatorAndColor>:
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cf ea       	ldi	r28, 0xAF	; 175
     b1c:	d2 e0       	ldi	r29, 0x02	; 2
     b1e:	ef e9       	ldi	r30, 0x9F	; 159
     b20:	f2 e0       	ldi	r31, 0x02	; 2
     b22:	a8 e7       	ldi	r26, 0x78	; 120
     b24:	b2 e0       	ldi	r27, 0x02	; 2
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	2e ef       	ldi	r18, 0xFE	; 254
     b2c:	3f ef       	ldi	r19, 0xFF	; 255
     b2e:	89 93       	st	Y+, r24
     b30:	99 93       	st	Y+, r25
     b32:	33 83       	std	Z+3, r19	; 0x03
     b34:	22 83       	std	Z+2, r18	; 0x02
     b36:	31 83       	std	Z+1, r19	; 0x01
     b38:	20 83       	st	Z, r18
     b3a:	1d 92       	st	X+, r1
     b3c:	1d 92       	st	X+, r1
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	34 96       	adiw	r30, 0x04	; 4
     b42:	84 30       	cpi	r24, 0x04	; 4
     b44:	91 05       	cpc	r25, r1
     b46:	99 f7       	brne	.-26     	; 0xb2e <setIndicatorAndColor+0x18>
     b48:	e0 91 af 02 	lds	r30, 0x02AF
     b4c:	f0 91 b0 02 	lds	r31, 0x02B0
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	e9 54       	subi	r30, 0x49	; 73
     b56:	fd 4f       	sbci	r31, 0xFD	; 253
     b58:	11 82       	std	Z+1, r1	; 0x01
     b5a:	10 82       	st	Z, r1
     b5c:	e0 91 b1 02 	lds	r30, 0x02B1
     b60:	f0 91 b2 02 	lds	r31, 0x02B2
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e9 54       	subi	r30, 0x49	; 73
     b6a:	fd 4f       	sbci	r31, 0xFD	; 253
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	80 83       	st	Z, r24
     b74:	e0 91 b3 02 	lds	r30, 0x02B3
     b78:	f0 91 b4 02 	lds	r31, 0x02B4
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e9 54       	subi	r30, 0x49	; 73
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
     b8c:	e0 91 b5 02 	lds	r30, 0x02B5
     b90:	f0 91 b6 02 	lds	r31, 0x02B6
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e9 54       	subi	r30, 0x49	; 73
     b9a:	fd 4f       	sbci	r31, 0xFD	; 253
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	90 93 9a 02 	sts	0x029A, r25
     bac:	80 93 99 02 	sts	0x0299, r24
     bb0:	90 93 98 02 	sts	0x0298, r25
     bb4:	80 93 97 02 	sts	0x0297, r24
     bb8:	90 93 c6 02 	sts	0x02C6, r25
     bbc:	80 93 c5 02 	sts	0x02C5, r24
     bc0:	90 93 c4 02 	sts	0x02C4, r25
     bc4:	80 93 c3 02 	sts	0x02C3, r24
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <set_color>:
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	fc dc       	rcall	.-1544   	; 0x5ca <ADC_Conversion>
     bd2:	80 93 61 02 	sts	0x0261, r24
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	f8 dc       	rcall	.-1552   	; 0x5ca <ADC_Conversion>
     bda:	80 93 60 02 	sts	0x0260, r24
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	f4 dc       	rcall	.-1560   	; 0x5ca <ADC_Conversion>
     be2:	80 93 5f 02 	sts	0x025F, r24
     be6:	08 95       	ret

00000be8 <node>:
     be8:	88 ec       	ldi	r24, 0xC8	; 200
     bea:	80 93 28 01 	sts	0x0128, r24
     bee:	80 93 2a 01 	sts	0x012A, r24
     bf2:	80 91 60 02 	lds	r24, 0x0260
     bf6:	89 32       	cpi	r24, 0x29	; 41
     bf8:	38 f4       	brcc	.+14     	; 0xc08 <node+0x20>
     bfa:	0e c0       	rjmp	.+28     	; 0xc18 <node+0x30>
     bfc:	87 dc       	rcall	.-1778   	; 0x50c <forward>
     bfe:	e7 df       	rcall	.-50     	; 0xbce <set_color>
     c00:	80 91 60 02 	lds	r24, 0x0260
     c04:	89 32       	cpi	r24, 0x29	; 41
     c06:	40 f0       	brcs	.+16     	; 0xc18 <node+0x30>
     c08:	80 91 61 02 	lds	r24, 0x0261
     c0c:	89 32       	cpi	r24, 0x29	; 41
     c0e:	b0 f7       	brcc	.-20     	; 0xbfc <node+0x14>
     c10:	80 91 5f 02 	lds	r24, 0x025F
     c14:	89 32       	cpi	r24, 0x29	; 41
     c16:	90 f7       	brcc	.-28     	; 0xbfc <node+0x14>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	9a e1       	ldi	r25, 0x1A	; 26
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	80 40       	sbci	r24, 0x00	; 0
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <node+0x36>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <node+0x40>
     c28:	00 00       	nop
     c2a:	7c cc       	rjmp	.-1800   	; 0x524 <stop>
     c2c:	08 95       	ret

00000c2e <semiCorrect>:
     c2e:	80 91 60 02 	lds	r24, 0x0260
     c32:	88 32       	cpi	r24, 0x28	; 40
     c34:	58 f5       	brcc	.+86     	; 0xc8c <semiCorrect+0x5e>
     c36:	80 91 61 02 	lds	r24, 0x0261
     c3a:	89 32       	cpi	r24, 0x29	; 41
     c3c:	98 f0       	brcs	.+38     	; 0xc64 <semiCorrect+0x36>
     c3e:	90 91 5f 02 	lds	r25, 0x025F
     c42:	98 32       	cpi	r25, 0x28	; 40
     c44:	78 f4       	brcc	.+30     	; 0xc64 <semiCorrect+0x36>
     c46:	68 dc       	rcall	.-1840   	; 0x518 <left>
     c48:	c2 df       	rcall	.-124    	; 0xbce <set_color>
     c4a:	80 91 60 02 	lds	r24, 0x0260
     c4e:	88 32       	cpi	r24, 0x28	; 40
     c50:	e8 f4       	brcc	.+58     	; 0xc8c <semiCorrect+0x5e>
     c52:	80 91 61 02 	lds	r24, 0x0261
     c56:	89 32       	cpi	r24, 0x29	; 41
     c58:	c8 f0       	brcs	.+50     	; 0xc8c <semiCorrect+0x5e>
     c5a:	80 91 5f 02 	lds	r24, 0x025F
     c5e:	88 32       	cpi	r24, 0x28	; 40
     c60:	90 f3       	brcs	.-28     	; 0xc46 <semiCorrect+0x18>
     c62:	08 95       	ret
     c64:	90 91 5f 02 	lds	r25, 0x025F
     c68:	99 32       	cpi	r25, 0x29	; 41
     c6a:	80 f0       	brcs	.+32     	; 0xc8c <semiCorrect+0x5e>
     c6c:	88 32       	cpi	r24, 0x28	; 40
     c6e:	70 f4       	brcc	.+28     	; 0xc8c <semiCorrect+0x5e>
     c70:	56 dc       	rcall	.-1876   	; 0x51e <right>
     c72:	ad df       	rcall	.-166    	; 0xbce <set_color>
     c74:	80 91 60 02 	lds	r24, 0x0260
     c78:	88 32       	cpi	r24, 0x28	; 40
     c7a:	40 f4       	brcc	.+16     	; 0xc8c <semiCorrect+0x5e>
     c7c:	80 91 61 02 	lds	r24, 0x0261
     c80:	88 32       	cpi	r24, 0x28	; 40
     c82:	20 f4       	brcc	.+8      	; 0xc8c <semiCorrect+0x5e>
     c84:	80 91 5f 02 	lds	r24, 0x025F
     c88:	89 32       	cpi	r24, 0x29	; 41
     c8a:	90 f7       	brcc	.-28     	; 0xc70 <semiCorrect+0x42>
     c8c:	08 95       	ret

00000c8e <correct>:
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 87 02 	sts	0x0287, r25
     c9e:	80 93 86 02 	sts	0x0286, r24
     ca2:	40 dc       	rcall	.-1920   	; 0x524 <stop>
     ca4:	80 91 5e 02 	lds	r24, 0x025E
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <correct+0x20>
     cac:	34 c0       	rjmp	.+104    	; 0xd16 <correct+0x88>
     cae:	10 92 5e 02 	sts	0x025E, r1
     cb2:	ce e3       	ldi	r28, 0x3E	; 62
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
     cb6:	02 e0       	ldi	r16, 0x02	; 2
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	31 dc       	rcall	.-1950   	; 0x51e <right>
     cbc:	02 30       	cpi	r16, 0x02	; 2
     cbe:	11 05       	cpc	r17, r1
     cc0:	31 f4       	brne	.+12     	; 0xcce <correct+0x40>
     cc2:	8e e1       	ldi	r24, 0x1E	; 30
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	7e de       	rcall	.-772    	; 0x9c4 <Delay>
     cc8:	88 23       	and	r24, r24
     cca:	29 f0       	breq	.+10     	; 0xcd6 <correct+0x48>
     ccc:	58 c0       	rjmp	.+176    	; 0xd7e <correct+0xf0>
     cce:	ce 01       	movw	r24, r28
     cd0:	79 de       	rcall	.-782    	; 0x9c4 <Delay>
     cd2:	81 11       	cpse	r24, r1
     cd4:	54 c0       	rjmp	.+168    	; 0xd7e <correct+0xf0>
     cd6:	26 dc       	rcall	.-1972   	; 0x524 <stop>
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	77 dc       	rcall	.-1810   	; 0x5ca <ADC_Conversion>
     cdc:	89 32       	cpi	r24, 0x29	; 41
     cde:	08 f0       	brcs	.+2      	; 0xce2 <correct+0x54>
     ce0:	4d c0       	rjmp	.+154    	; 0xd7c <correct+0xee>
     ce2:	a5 df       	rcall	.-182    	; 0xc2e <semiCorrect>
     ce4:	19 dc       	rcall	.-1998   	; 0x518 <left>
     ce6:	02 30       	cpi	r16, 0x02	; 2
     ce8:	11 05       	cpc	r17, r1
     cea:	31 f4       	brne	.+12     	; 0xcf8 <correct+0x6a>
     cec:	8c e3       	ldi	r24, 0x3C	; 60
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	69 de       	rcall	.-814    	; 0x9c4 <Delay>
     cf2:	88 23       	and	r24, r24
     cf4:	29 f0       	breq	.+10     	; 0xd00 <correct+0x72>
     cf6:	43 c0       	rjmp	.+134    	; 0xd7e <correct+0xf0>
     cf8:	ce 01       	movw	r24, r28
     cfa:	64 de       	rcall	.-824    	; 0x9c4 <Delay>
     cfc:	81 11       	cpse	r24, r1
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <correct+0xf0>
     d00:	11 dc       	rcall	.-2014   	; 0x524 <stop>
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	62 dc       	rcall	.-1852   	; 0x5ca <ADC_Conversion>
     d06:	64 96       	adiw	r28, 0x14	; 20
     d08:	88 32       	cpi	r24, 0x28	; 40
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <correct+0x80>
     d0c:	37 c0       	rjmp	.+110    	; 0xd7c <correct+0xee>
     d0e:	8f df       	rcall	.-226    	; 0xc2e <semiCorrect>
     d10:	0c 5e       	subi	r16, 0xEC	; 236
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	d2 cf       	rjmp	.-92     	; 0xcba <correct+0x2c>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 5e 02 	sts	0x025E, r24
     d1c:	ce e3       	ldi	r28, 0x3E	; 62
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
     d20:	02 e0       	ldi	r16, 0x02	; 2
     d22:	10 e0       	ldi	r17, 0x00	; 0
     d24:	f9 db       	rcall	.-2062   	; 0x518 <left>
     d26:	02 30       	cpi	r16, 0x02	; 2
     d28:	11 05       	cpc	r17, r1
     d2a:	31 f4       	brne	.+12     	; 0xd38 <correct+0xaa>
     d2c:	8e e1       	ldi	r24, 0x1E	; 30
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	49 de       	rcall	.-878    	; 0x9c4 <Delay>
     d32:	88 23       	and	r24, r24
     d34:	29 f0       	breq	.+10     	; 0xd40 <correct+0xb2>
     d36:	23 c0       	rjmp	.+70     	; 0xd7e <correct+0xf0>
     d38:	ce 01       	movw	r24, r28
     d3a:	44 de       	rcall	.-888    	; 0x9c4 <Delay>
     d3c:	81 11       	cpse	r24, r1
     d3e:	1f c0       	rjmp	.+62     	; 0xd7e <correct+0xf0>
     d40:	f1 db       	rcall	.-2078   	; 0x524 <stop>
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	42 dc       	rcall	.-1916   	; 0x5ca <ADC_Conversion>
     d46:	89 32       	cpi	r24, 0x29	; 41
     d48:	c8 f4       	brcc	.+50     	; 0xd7c <correct+0xee>
     d4a:	71 df       	rcall	.-286    	; 0xc2e <semiCorrect>
     d4c:	e8 db       	rcall	.-2096   	; 0x51e <right>
     d4e:	02 30       	cpi	r16, 0x02	; 2
     d50:	11 05       	cpc	r17, r1
     d52:	31 f4       	brne	.+12     	; 0xd60 <correct+0xd2>
     d54:	8c e3       	ldi	r24, 0x3C	; 60
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	35 de       	rcall	.-918    	; 0x9c4 <Delay>
     d5a:	88 23       	and	r24, r24
     d5c:	29 f0       	breq	.+10     	; 0xd68 <correct+0xda>
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <correct+0xf0>
     d60:	ce 01       	movw	r24, r28
     d62:	30 de       	rcall	.-928    	; 0x9c4 <Delay>
     d64:	81 11       	cpse	r24, r1
     d66:	0b c0       	rjmp	.+22     	; 0xd7e <correct+0xf0>
     d68:	dd db       	rcall	.-2118   	; 0x524 <stop>
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	2e dc       	rcall	.-1956   	; 0x5ca <ADC_Conversion>
     d6e:	64 96       	adiw	r28, 0x14	; 20
     d70:	88 32       	cpi	r24, 0x28	; 40
     d72:	20 f0       	brcs	.+8      	; 0xd7c <correct+0xee>
     d74:	5c df       	rcall	.-328    	; 0xc2e <semiCorrect>
     d76:	0c 5e       	subi	r16, 0xEC	; 236
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	d4 cf       	rjmp	.-88     	; 0xd24 <correct+0x96>
     d7c:	d3 db       	rcall	.-2138   	; 0x524 <stop>
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <noNatak>:
     d88:	86 e9       	ldi	r24, 0x96	; 150
     d8a:	80 93 28 01 	sts	0x0128, r24
     d8e:	80 93 2a 01 	sts	0x012A, r24
     d92:	80 91 60 02 	lds	r24, 0x0260
     d96:	88 32       	cpi	r24, 0x28	; 40
     d98:	70 f5       	brcc	.+92     	; 0xdf6 <noNatak+0x6e>
     d9a:	80 91 61 02 	lds	r24, 0x0261
     d9e:	89 32       	cpi	r24, 0x29	; 41
     da0:	98 f0       	brcs	.+38     	; 0xdc8 <noNatak+0x40>
     da2:	90 91 5f 02 	lds	r25, 0x025F
     da6:	98 32       	cpi	r25, 0x28	; 40
     da8:	78 f4       	brcc	.+30     	; 0xdc8 <noNatak+0x40>
     daa:	b6 db       	rcall	.-2196   	; 0x518 <left>
     dac:	10 df       	rcall	.-480    	; 0xbce <set_color>
     dae:	80 91 60 02 	lds	r24, 0x0260
     db2:	88 32       	cpi	r24, 0x28	; 40
     db4:	78 f5       	brcc	.+94     	; 0xe14 <noNatak+0x8c>
     db6:	80 91 61 02 	lds	r24, 0x0261
     dba:	89 32       	cpi	r24, 0x29	; 41
     dbc:	58 f1       	brcs	.+86     	; 0xe14 <noNatak+0x8c>
     dbe:	80 91 5f 02 	lds	r24, 0x025F
     dc2:	88 32       	cpi	r24, 0x28	; 40
     dc4:	90 f3       	brcs	.-28     	; 0xdaa <noNatak+0x22>
     dc6:	26 c0       	rjmp	.+76     	; 0xe14 <noNatak+0x8c>
     dc8:	90 91 5f 02 	lds	r25, 0x025F
     dcc:	99 32       	cpi	r25, 0x29	; 41
     dce:	88 f0       	brcs	.+34     	; 0xdf2 <noNatak+0x6a>
     dd0:	88 32       	cpi	r24, 0x28	; 40
     dd2:	78 f4       	brcc	.+30     	; 0xdf2 <noNatak+0x6a>
     dd4:	a4 db       	rcall	.-2232   	; 0x51e <right>
     dd6:	fb de       	rcall	.-522    	; 0xbce <set_color>
     dd8:	80 91 60 02 	lds	r24, 0x0260
     ddc:	88 32       	cpi	r24, 0x28	; 40
     dde:	d0 f4       	brcc	.+52     	; 0xe14 <noNatak+0x8c>
     de0:	80 91 61 02 	lds	r24, 0x0261
     de4:	88 32       	cpi	r24, 0x28	; 40
     de6:	b0 f4       	brcc	.+44     	; 0xe14 <noNatak+0x8c>
     de8:	80 91 5f 02 	lds	r24, 0x025F
     dec:	89 32       	cpi	r24, 0x29	; 41
     dee:	90 f7       	brcc	.-28     	; 0xdd4 <noNatak+0x4c>
     df0:	11 c0       	rjmp	.+34     	; 0xe14 <noNatak+0x8c>
     df2:	4d df       	rcall	.-358    	; 0xc8e <correct>
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <noNatak+0x8c>
     df6:	80 91 61 02 	lds	r24, 0x0261
     dfa:	89 32       	cpi	r24, 0x29	; 41
     dfc:	20 f0       	brcs	.+8      	; 0xe06 <noNatak+0x7e>
     dfe:	90 91 5f 02 	lds	r25, 0x025F
     e02:	98 32       	cpi	r25, 0x28	; 40
     e04:	40 f0       	brcs	.+16     	; 0xe16 <noNatak+0x8e>
     e06:	88 32       	cpi	r24, 0x28	; 40
     e08:	20 f4       	brcc	.+8      	; 0xe12 <noNatak+0x8a>
     e0a:	80 91 5f 02 	lds	r24, 0x025F
     e0e:	89 32       	cpi	r24, 0x29	; 41
     e10:	10 f4       	brcc	.+4      	; 0xe16 <noNatak+0x8e>
     e12:	3d df       	rcall	.-390    	; 0xc8e <correct>
     e14:	87 cb       	rjmp	.-2290   	; 0x524 <stop>
     e16:	08 95       	ret

00000e18 <forwardJaa>:
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	08 e2       	ldi	r16, 0x28	; 40
     e24:	11 e0       	ldi	r17, 0x01	; 1
     e26:	0f 2e       	mov	r0, r31
     e28:	f0 ef       	ldi	r31, 0xF0	; 240
     e2a:	ff 2e       	mov	r15, r31
     e2c:	f0 2d       	mov	r31, r0
     e2e:	ca e2       	ldi	r28, 0x2A	; 42
     e30:	d1 e0       	ldi	r29, 0x01	; 1
     e32:	6c db       	rcall	.-2344   	; 0x50c <forward>
     e34:	cc de       	rcall	.-616    	; 0xbce <set_color>
     e36:	80 91 60 02 	lds	r24, 0x0260
     e3a:	89 32       	cpi	r24, 0x29	; 41
     e3c:	50 f0       	brcs	.+20     	; 0xe52 <forwardJaa+0x3a>
     e3e:	80 91 61 02 	lds	r24, 0x0261
     e42:	89 32       	cpi	r24, 0x29	; 41
     e44:	20 f4       	brcc	.+8      	; 0xe4e <forwardJaa+0x36>
     e46:	80 91 5f 02 	lds	r24, 0x025F
     e4a:	89 32       	cpi	r24, 0x29	; 41
     e4c:	10 f0       	brcs	.+4      	; 0xe52 <forwardJaa+0x3a>
     e4e:	cc de       	rcall	.-616    	; 0xbe8 <node>
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <forwardJaa+0x5c>
     e52:	f8 01       	movw	r30, r16
     e54:	f0 82       	st	Z, r15
     e56:	f8 82       	st	Y, r15
     e58:	80 91 60 02 	lds	r24, 0x0260
     e5c:	89 32       	cpi	r24, 0x29	; 41
     e5e:	40 f0       	brcs	.+16     	; 0xe70 <forwardJaa+0x58>
     e60:	80 91 61 02 	lds	r24, 0x0261
     e64:	88 32       	cpi	r24, 0x28	; 40
     e66:	20 f4       	brcc	.+8      	; 0xe70 <forwardJaa+0x58>
     e68:	80 91 5f 02 	lds	r24, 0x025F
     e6c:	88 32       	cpi	r24, 0x28	; 40
     e6e:	08 f3       	brcs	.-62     	; 0xe32 <forwardJaa+0x1a>
     e70:	8b df       	rcall	.-234    	; 0xd88 <noNatak>
     e72:	d2 df       	rcall	.-92     	; 0xe18 <forwardJaa>
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	08 95       	ret

00000e80 <front>:
     e80:	cb df       	rcall	.-106    	; 0xe18 <forwardJaa>
     e82:	80 91 8a 02 	lds	r24, 0x028A
     e86:	90 91 8b 02 	lds	r25, 0x028B
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 8b 02 	sts	0x028B, r25
     e90:	80 93 8a 02 	sts	0x028A, r24
     e94:	08 95       	ret

00000e96 <elevate>:
     e96:	61 11       	cpse	r22, r1
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <elevate+0x8>
     e9a:	ed cb       	rjmp	.-2086   	; 0x676 <servo_1>
     e9c:	08 95       	ret
     e9e:	61 30       	cpi	r22, 0x01	; 1
     ea0:	31 f4       	brne	.+12     	; 0xeae <elevate+0x18>
     ea2:	8d 32       	cpi	r24, 0x2D	; 45
     ea4:	11 f4       	brne	.+4      	; 0xeaa <elevate+0x14>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <elevate+0x16>
     eaa:	8d e2       	ldi	r24, 0x2D	; 45
     eac:	e4 cb       	rjmp	.-2104   	; 0x676 <servo_1>
     eae:	08 95       	ret

00000eb0 <open>:
     eb0:	81 11       	cpse	r24, r1
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <open+0x10>
     eb4:	10 92 8b 00 	sts	0x008B, r1
     eb8:	83 e8       	ldi	r24, 0x83	; 131
     eba:	80 93 8a 00 	sts	0x008A, r24
     ebe:	08 95       	ret
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	29 f4       	brne	.+10     	; 0xece <open+0x1e>
     ec4:	10 92 8d 00 	sts	0x008D, r1
     ec8:	83 e8       	ldi	r24, 0x83	; 131
     eca:	80 93 8c 00 	sts	0x008C, r24
     ece:	08 95       	ret

00000ed0 <close>:
     ed0:	81 11       	cpse	r24, r1
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <close+0x10>
     ed4:	10 92 8b 00 	sts	0x008B, r1
     ed8:	83 e2       	ldi	r24, 0x23	; 35
     eda:	80 93 8a 00 	sts	0x008A, r24
     ede:	08 95       	ret
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	29 f4       	brne	.+10     	; 0xeee <close+0x1e>
     ee4:	10 92 8d 00 	sts	0x008D, r1
     ee8:	83 e2       	ldi	r24, 0x23	; 35
     eea:	80 93 8c 00 	sts	0x008C, r24
     eee:	08 95       	ret

00000ef0 <buzzer>:
     ef0:	64 db       	rcall	.-2360   	; 0x5ba <buzzer_on>
     ef2:	2f ef       	ldi	r18, 0xFF	; 255
     ef4:	8f e7       	ldi	r24, 0x7F	; 127
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	21 50       	subi	r18, 0x01	; 1
     efa:	80 40       	sbci	r24, 0x00	; 0
     efc:	90 40       	sbci	r25, 0x00	; 0
     efe:	e1 f7       	brne	.-8      	; 0xef8 <buzzer+0x8>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <buzzer+0x12>
     f02:	00 00       	nop
     f04:	5e cb       	rjmp	.-2372   	; 0x5c2 <buzzer_off>
     f06:	08 95       	ret

00000f08 <predict>:
     f08:	80 91 9f 02 	lds	r24, 0x029F
     f0c:	90 91 a0 02 	lds	r25, 0x02A0
     f10:	20 91 af 02 	lds	r18, 0x02AF
     f14:	30 91 b0 02 	lds	r19, 0x02B0
     f18:	82 17       	cp	r24, r18
     f1a:	93 07       	cpc	r25, r19
     f1c:	09 f0       	breq	.+2      	; 0xf20 <predict+0x18>
     f1e:	5f c0       	rjmp	.+190    	; 0xfde <predict+0xd6>
     f20:	20 91 a1 02 	lds	r18, 0x02A1
     f24:	30 91 a2 02 	lds	r19, 0x02A2
     f28:	82 17       	cp	r24, r18
     f2a:	93 07       	cpc	r25, r19
     f2c:	09 f0       	breq	.+2      	; 0xf30 <predict+0x28>
     f2e:	57 c0       	rjmp	.+174    	; 0xfde <predict+0xd6>
     f30:	80 91 a3 02 	lds	r24, 0x02A3
     f34:	90 91 a4 02 	lds	r25, 0x02A4
     f38:	20 91 b1 02 	lds	r18, 0x02B1
     f3c:	30 91 b2 02 	lds	r19, 0x02B2
     f40:	82 17       	cp	r24, r18
     f42:	93 07       	cpc	r25, r19
     f44:	09 f0       	breq	.+2      	; 0xf48 <predict+0x40>
     f46:	4b c0       	rjmp	.+150    	; 0xfde <predict+0xd6>
     f48:	20 91 a5 02 	lds	r18, 0x02A5
     f4c:	30 91 a6 02 	lds	r19, 0x02A6
     f50:	82 17       	cp	r24, r18
     f52:	93 07       	cpc	r25, r19
     f54:	09 f0       	breq	.+2      	; 0xf58 <predict+0x50>
     f56:	43 c0       	rjmp	.+134    	; 0xfde <predict+0xd6>
     f58:	80 91 9b 02 	lds	r24, 0x029B
     f5c:	90 91 9c 02 	lds	r25, 0x029C
     f60:	fc 01       	movw	r30, r24
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	e1 56       	subi	r30, 0x61	; 97
     f6c:	fd 4f       	sbci	r31, 0xFD	; 253
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	fc 01       	movw	r30, r24
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e1 55       	subi	r30, 0x51	; 81
     f7a:	fd 4f       	sbci	r31, 0xFD	; 253
     f7c:	40 81       	ld	r20, Z
     f7e:	51 81       	ldd	r21, Z+1	; 0x01
     f80:	24 17       	cp	r18, r20
     f82:	35 07       	cpc	r19, r21
     f84:	61 f5       	brne	.+88     	; 0xfde <predict+0xd6>
     f86:	fc 01       	movw	r30, r24
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	e1 56       	subi	r30, 0x61	; 97
     f92:	fd 4f       	sbci	r31, 0xFD	; 253
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	01 f5       	brne	.+64     	; 0xfde <predict+0xd6>
     f9e:	80 91 97 02 	lds	r24, 0x0297
     fa2:	90 91 98 02 	lds	r25, 0x0298
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	d1 f4       	brne	.+52     	; 0xfde <predict+0xd6>
     faa:	80 91 99 02 	lds	r24, 0x0299
     fae:	90 91 9a 02 	lds	r25, 0x029A
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	a1 f4       	brne	.+40     	; 0xfde <predict+0xd6>
     fb6:	80 91 c3 02 	lds	r24, 0x02C3
     fba:	90 91 c4 02 	lds	r25, 0x02C4
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	71 f4       	brne	.+28     	; 0xfde <predict+0xd6>
     fc2:	80 91 c5 02 	lds	r24, 0x02C5
     fc6:	90 91 c6 02 	lds	r25, 0x02C6
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	41 f4       	brne	.+16     	; 0xfde <predict+0xd6>
     fce:	80 91 00 02 	lds	r24, 0x0200
     fd2:	90 91 01 02 	lds	r25, 0x0201
     fd6:	90 93 6b 02 	sts	0x026B, r25
     fda:	80 93 6a 02 	sts	0x026A, r24
     fde:	08 95       	ret

00000fe0 <lcd>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	e4 d8       	rcall	.-3640   	; 0x1b2 <lcd_wr_command>
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	4d d9       	rcall	.-3430   	; 0x28a <lcd_cursor>
     ff0:	ce 01       	movw	r24, r28
     ff2:	3d d9       	rcall	.-3462   	; 0x26e <lcd_string>
     ff4:	7d df       	rcall	.-262    	; 0xef0 <buzzer>
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	9c e2       	ldi	r25, 0x2C	; 44
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	80 40       	sbci	r24, 0x00	; 0
    1000:	90 40       	sbci	r25, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <lcd+0x1c>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <lcd+0x26>
    1006:	00 00       	nop
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <turnRight>:
    100e:	80 91 62 02 	lds	r24, 0x0262
    1012:	90 91 63 02 	lds	r25, 0x0263
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	39 f4       	brne	.+14     	; 0x102a <turnRight+0x1c>
    101c:	80 91 64 02 	lds	r24, 0x0264
    1020:	90 91 65 02 	lds	r25, 0x0265
    1024:	02 97       	sbiw	r24, 0x02	; 2
    1026:	98 f4       	brcc	.+38     	; 0x104e <turnRight+0x40>
    1028:	09 c0       	rjmp	.+18     	; 0x103c <turnRight+0x2e>
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	81 f4       	brne	.+32     	; 0x104e <turnRight+0x40>
    102e:	80 91 64 02 	lds	r24, 0x0264
    1032:	90 91 65 02 	lds	r25, 0x0265
    1036:	02 97       	sbiw	r24, 0x02	; 2
    1038:	02 97       	sbiw	r24, 0x02	; 2
    103a:	48 f4       	brcc	.+18     	; 0x104e <turnRight+0x40>
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	80 93 28 01 	sts	0x0128, r24
    1042:	80 93 2a 01 	sts	0x012A, r24
    1046:	8a e5       	ldi	r24, 0x5A	; 90
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a7 dc       	rcall	.-1714   	; 0x99a <right_degrees>
    104c:	0f c0       	rjmp	.+30     	; 0x106c <turnRight+0x5e>
    104e:	8e e1       	ldi	r24, 0x1E	; 30
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a3 dc       	rcall	.-1722   	; 0x99a <right_degrees>
    1054:	8a ea       	ldi	r24, 0xAA	; 170
    1056:	80 93 28 01 	sts	0x0128, r24
    105a:	80 93 2a 01 	sts	0x012A, r24
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <turnRight+0x54>
    1060:	5e da       	rcall	.-2884   	; 0x51e <right>
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	b2 da       	rcall	.-2716   	; 0x5ca <ADC_Conversion>
    1066:	88 32       	cpi	r24, 0x28	; 40
    1068:	d8 f3       	brcs	.-10     	; 0x1060 <turnRight+0x52>
    106a:	5c da       	rcall	.-2888   	; 0x524 <stop>
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	b7 df       	rcall	.-146    	; 0xfe0 <lcd>
    1072:	2f ef       	ldi	r18, 0xFF	; 255
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	99 e5       	ldi	r25, 0x59	; 89
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	80 40       	sbci	r24, 0x00	; 0
    107c:	90 40       	sbci	r25, 0x00	; 0
    107e:	e1 f7       	brne	.-8      	; 0x1078 <turnRight+0x6a>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <turnRight+0x74>
    1082:	00 00       	nop
    1084:	80 91 62 02 	lds	r24, 0x0262
    1088:	90 91 63 02 	lds	r25, 0x0263
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	83 70       	andi	r24, 0x03	; 3
    1090:	90 78       	andi	r25, 0x80	; 128
    1092:	99 23       	and	r25, r25
    1094:	24 f4       	brge	.+8      	; 0x109e <turnRight+0x90>
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	8c 6f       	ori	r24, 0xFC	; 252
    109a:	9f 6f       	ori	r25, 0xFF	; 255
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	90 93 63 02 	sts	0x0263, r25
    10a2:	80 93 62 02 	sts	0x0262, r24
    10a6:	08 95       	ret

000010a8 <turnLeft>:
    10a8:	80 91 62 02 	lds	r24, 0x0262
    10ac:	90 91 63 02 	lds	r25, 0x0263
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <turnLeft+0x1c>
    10b6:	80 91 64 02 	lds	r24, 0x0264
    10ba:	90 91 65 02 	lds	r25, 0x0265
    10be:	02 97       	sbiw	r24, 0x02	; 2
    10c0:	98 f4       	brcc	.+38     	; 0x10e8 <turnLeft+0x40>
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <turnLeft+0x2e>
    10c4:	03 97       	sbiw	r24, 0x03	; 3
    10c6:	81 f4       	brne	.+32     	; 0x10e8 <turnLeft+0x40>
    10c8:	80 91 64 02 	lds	r24, 0x0264
    10cc:	90 91 65 02 	lds	r25, 0x0265
    10d0:	02 97       	sbiw	r24, 0x02	; 2
    10d2:	02 97       	sbiw	r24, 0x02	; 2
    10d4:	48 f4       	brcc	.+18     	; 0x10e8 <turnLeft+0x40>
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	80 93 28 01 	sts	0x0128, r24
    10dc:	80 93 2a 01 	sts	0x012A, r24
    10e0:	8a e5       	ldi	r24, 0x5A	; 90
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	51 dc       	rcall	.-1886   	; 0x988 <left_degrees>
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <turnLeft+0x5e>
    10e8:	8e e1       	ldi	r24, 0x1E	; 30
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	4d dc       	rcall	.-1894   	; 0x988 <left_degrees>
    10ee:	8a ea       	ldi	r24, 0xAA	; 170
    10f0:	80 93 28 01 	sts	0x0128, r24
    10f4:	80 93 2a 01 	sts	0x012A, r24
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <turnLeft+0x54>
    10fa:	0e da       	rcall	.-3044   	; 0x518 <left>
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	65 da       	rcall	.-2870   	; 0x5ca <ADC_Conversion>
    1100:	88 32       	cpi	r24, 0x28	; 40
    1102:	d8 f3       	brcs	.-10     	; 0x10fa <turnLeft+0x52>
    1104:	0f da       	rcall	.-3042   	; 0x524 <stop>
    1106:	8f e0       	ldi	r24, 0x0F	; 15
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	6a df       	rcall	.-300    	; 0xfe0 <lcd>
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	99 e5       	ldi	r25, 0x59	; 89
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	80 40       	sbci	r24, 0x00	; 0
    1116:	90 40       	sbci	r25, 0x00	; 0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <turnLeft+0x6a>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <turnLeft+0x74>
    111c:	00 00       	nop
    111e:	80 91 62 02 	lds	r24, 0x0262
    1122:	90 91 63 02 	lds	r25, 0x0263
    1126:	03 96       	adiw	r24, 0x03	; 3
    1128:	83 70       	andi	r24, 0x03	; 3
    112a:	90 78       	andi	r25, 0x80	; 128
    112c:	99 23       	and	r25, r25
    112e:	24 f4       	brge	.+8      	; 0x1138 <turnLeft+0x90>
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	8c 6f       	ori	r24, 0xFC	; 252
    1134:	9f 6f       	ori	r25, 0xFF	; 255
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	90 93 63 02 	sts	0x0263, r25
    113c:	80 93 62 02 	sts	0x0262, r24
    1140:	08 95       	ret

00001142 <turn>:
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	08 e2       	ldi	r16, 0x28	; 40
    114c:	11 e0       	ldi	r17, 0x01	; 1
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	f8 01       	movw	r30, r16
    1152:	80 83       	st	Z, r24
    1154:	ca e2       	ldi	r28, 0x2A	; 42
    1156:	d1 e0       	ldi	r29, 0x01	; 1
    1158:	88 83       	st	Y, r24
    115a:	86 e9       	ldi	r24, 0x96	; 150
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	14 dc       	rcall	.-2008   	; 0x988 <left_degrees>
    1160:	8a ea       	ldi	r24, 0xAA	; 170
    1162:	f8 01       	movw	r30, r16
    1164:	80 83       	st	Z, r24
    1166:	88 83       	st	Y, r24
    1168:	01 c0       	rjmp	.+2      	; 0x116c <turn+0x2a>
    116a:	d6 d9       	rcall	.-3156   	; 0x518 <left>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	2d da       	rcall	.-2982   	; 0x5ca <ADC_Conversion>
    1170:	88 32       	cpi	r24, 0x28	; 40
    1172:	d8 f3       	brcs	.-10     	; 0x116a <turn+0x28>
    1174:	d7 d9       	rcall	.-3154   	; 0x524 <stop>
    1176:	84 e1       	ldi	r24, 0x14	; 20
    1178:	92 e0       	ldi	r25, 0x02	; 2
    117a:	32 df       	rcall	.-412    	; 0xfe0 <lcd>
    117c:	ff ef       	ldi	r31, 0xFF	; 255
    117e:	2f ef       	ldi	r18, 0xFF	; 255
    1180:	89 e5       	ldi	r24, 0x59	; 89
    1182:	f1 50       	subi	r31, 0x01	; 1
    1184:	20 40       	sbci	r18, 0x00	; 0
    1186:	80 40       	sbci	r24, 0x00	; 0
    1188:	e1 f7       	brne	.-8      	; 0x1182 <turn+0x40>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <turn+0x4a>
    118c:	00 00       	nop
    118e:	80 91 62 02 	lds	r24, 0x0262
    1192:	90 91 63 02 	lds	r25, 0x0263
    1196:	02 96       	adiw	r24, 0x02	; 2
    1198:	83 70       	andi	r24, 0x03	; 3
    119a:	90 78       	andi	r25, 0x80	; 128
    119c:	99 23       	and	r25, r25
    119e:	24 f4       	brge	.+8      	; 0x11a8 <turn+0x66>
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	8c 6f       	ori	r24, 0xFC	; 252
    11a4:	9f 6f       	ori	r25, 0xFF	; 255
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	90 93 63 02 	sts	0x0263, r25
    11ac:	80 93 62 02 	sts	0x0262, r24
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <traverseToSort>:
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	ec 01       	movw	r28, r24
    11c0:	80 91 68 02 	lds	r24, 0x0268
    11c4:	90 91 69 02 	lds	r25, 0x0269
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <traverseToSort+0x1a>
    11cc:	10 92 69 02 	sts	0x0269, r1
    11d0:	10 92 68 02 	sts	0x0268, r1
    11d4:	ce 01       	movw	r24, r28
    11d6:	04 97       	sbiw	r24, 0x04	; 4
    11d8:	02 97       	sbiw	r24, 0x02	; 2
    11da:	88 f5       	brcc	.+98     	; 0x123e <traverseToSort+0x84>
    11dc:	c4 30       	cpi	r28, 0x04	; 4
    11de:	d1 05       	cpc	r29, r1
    11e0:	39 f4       	brne	.+14     	; 0x11f0 <traverseToSort+0x36>
    11e2:	80 91 62 02 	lds	r24, 0x0262
    11e6:	90 91 63 02 	lds	r25, 0x0263
    11ea:	89 2b       	or	r24, r25
    11ec:	51 f0       	breq	.+20     	; 0x1202 <traverseToSort+0x48>
    11ee:	0b c0       	rjmp	.+22     	; 0x1206 <traverseToSort+0x4c>
    11f0:	c5 30       	cpi	r28, 0x05	; 5
    11f2:	d1 05       	cpc	r29, r1
    11f4:	41 f4       	brne	.+16     	; 0x1206 <traverseToSort+0x4c>
    11f6:	80 91 62 02 	lds	r24, 0x0262
    11fa:	90 91 63 02 	lds	r25, 0x0263
    11fe:	02 97       	sbiw	r24, 0x02	; 2
    1200:	11 f4       	brne	.+4      	; 0x1206 <traverseToSort+0x4c>
    1202:	05 df       	rcall	.-502    	; 0x100e <turnRight>
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <traverseToSort+0x4e>
    1206:	50 df       	rcall	.-352    	; 0x10a8 <turnLeft>
    1208:	3b de       	rcall	.-906    	; 0xe80 <front>
    120a:	3a de       	rcall	.-908    	; 0xe80 <front>
    120c:	24 97       	sbiw	r28, 0x04	; 4
    120e:	39 f4       	brne	.+14     	; 0x121e <traverseToSort+0x64>
    1210:	85 e0       	ldi	r24, 0x05	; 5
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	90 93 65 02 	sts	0x0265, r25
    1218:	80 93 64 02 	sts	0x0264, r24
    121c:	06 c0       	rjmp	.+12     	; 0x122a <traverseToSort+0x70>
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	90 93 65 02 	sts	0x0265, r25
    1226:	80 93 64 02 	sts	0x0264, r24
    122a:	80 91 8a 02 	lds	r24, 0x028A
    122e:	90 91 8b 02 	lds	r25, 0x028B
    1232:	02 96       	adiw	r24, 0x02	; 2
    1234:	90 93 8b 02 	sts	0x028B, r25
    1238:	80 93 8a 02 	sts	0x028A, r24
    123c:	2a c0       	rjmp	.+84     	; 0x1292 <traverseToSort+0xd8>
    123e:	80 91 62 02 	lds	r24, 0x0262
    1242:	90 91 63 02 	lds	r25, 0x0263
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	09 f4       	brne	.+2      	; 0x124e <traverseToSort+0x94>
    124c:	2d df       	rcall	.-422    	; 0x10a8 <turnLeft>
    124e:	22 97       	sbiw	r28, 0x02	; 2
    1250:	3c f4       	brge	.+14     	; 0x1260 <traverseToSort+0xa6>
    1252:	80 91 62 02 	lds	r24, 0x0262
    1256:	90 91 63 02 	lds	r25, 0x0263
    125a:	89 2b       	or	r24, r25
    125c:	39 f0       	breq	.+14     	; 0x126c <traverseToSort+0xb2>
    125e:	07 c0       	rjmp	.+14     	; 0x126e <traverseToSort+0xb4>
    1260:	80 91 62 02 	lds	r24, 0x0262
    1264:	90 91 63 02 	lds	r25, 0x0263
    1268:	02 97       	sbiw	r24, 0x02	; 2
    126a:	09 f4       	brne	.+2      	; 0x126e <traverseToSort+0xb4>
    126c:	6a df       	rcall	.-300    	; 0x1142 <turn>
    126e:	08 de       	rcall	.-1008   	; 0xe80 <front>
    1270:	80 91 9b 02 	lds	r24, 0x029B
    1274:	90 91 9c 02 	lds	r25, 0x029C
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	90 78       	andi	r25, 0x80	; 128
    127c:	99 23       	and	r25, r25
    127e:	24 f4       	brge	.+8      	; 0x1288 <traverseToSort+0xce>
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	8e 6f       	ori	r24, 0xFE	; 254
    1284:	9f 6f       	ori	r25, 0xFF	; 255
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	04 96       	adiw	r24, 0x04	; 4
    128a:	90 93 65 02 	sts	0x0265, r25
    128e:	80 93 64 02 	sts	0x0264, r24
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <terminalCheck2>:
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	80 91 68 02 	lds	r24, 0x0268
    12a0:	90 91 69 02 	lds	r25, 0x0269
    12a4:	89 2b       	or	r24, r25
    12a6:	39 f5       	brne	.+78     	; 0x12f6 <terminalCheck2+0x5e>
    12a8:	80 91 62 02 	lds	r24, 0x0262
    12ac:	90 91 63 02 	lds	r25, 0x0263
    12b0:	89 2b       	or	r24, r25
    12b2:	71 f4       	brne	.+28     	; 0x12d0 <terminalCheck2+0x38>
    12b4:	80 91 64 02 	lds	r24, 0x0264
    12b8:	90 91 65 02 	lds	r25, 0x0265
    12bc:	02 97       	sbiw	r24, 0x02	; 2
    12be:	20 f4       	brcc	.+8      	; 0x12c8 <terminalCheck2+0x30>
    12c0:	8e e1       	ldi	r24, 0x1E	; 30
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	4f db       	rcall	.-2402   	; 0x964 <forward_mm>
    12c6:	11 c0       	rjmp	.+34     	; 0x12ea <terminalCheck2+0x52>
    12c8:	8e e1       	ldi	r24, 0x1E	; 30
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	54 db       	rcall	.-2392   	; 0x976 <back_mm>
    12ce:	0d c0       	rjmp	.+26     	; 0x12ea <terminalCheck2+0x52>
    12d0:	80 91 64 02 	lds	r24, 0x0264
    12d4:	90 91 65 02 	lds	r25, 0x0265
    12d8:	02 97       	sbiw	r24, 0x02	; 2
    12da:	20 f4       	brcc	.+8      	; 0x12e4 <terminalCheck2+0x4c>
    12dc:	8e e1       	ldi	r24, 0x1E	; 30
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	4a db       	rcall	.-2412   	; 0x976 <back_mm>
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <terminalCheck2+0x52>
    12e4:	8e e1       	ldi	r24, 0x1E	; 30
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	3d db       	rcall	.-2438   	; 0x964 <forward_mm>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 69 02 	sts	0x0269, r25
    12f2:	80 93 68 02 	sts	0x0268, r24
    12f6:	80 91 9b 02 	lds	r24, 0x029B
    12fa:	90 91 9c 02 	lds	r25, 0x029C
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	30 f4       	brcc	.+12     	; 0x1310 <terminalCheck2+0x78>
    1304:	20 91 62 02 	lds	r18, 0x0262
    1308:	30 91 63 02 	lds	r19, 0x0263
    130c:	23 2b       	or	r18, r19
    130e:	69 f0       	breq	.+26     	; 0x132a <terminalCheck2+0x92>
    1310:	9c 01       	movw	r18, r24
    1312:	22 50       	subi	r18, 0x02	; 2
    1314:	31 09       	sbc	r19, r1
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	48 f4       	brcc	.+18     	; 0x132e <terminalCheck2+0x96>
    131c:	40 91 62 02 	lds	r20, 0x0262
    1320:	50 91 63 02 	lds	r21, 0x0263
    1324:	42 30       	cpi	r20, 0x02	; 2
    1326:	51 05       	cpc	r21, r1
    1328:	11 f4       	brne	.+4      	; 0x132e <terminalCheck2+0x96>
    132a:	be de       	rcall	.-644    	; 0x10a8 <turnLeft>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <terminalCheck2+0xbe>
    132e:	02 97       	sbiw	r24, 0x02	; 2
    1330:	30 f4       	brcc	.+12     	; 0x133e <terminalCheck2+0xa6>
    1332:	80 91 62 02 	lds	r24, 0x0262
    1336:	90 91 63 02 	lds	r25, 0x0263
    133a:	02 97       	sbiw	r24, 0x02	; 2
    133c:	49 f0       	breq	.+18     	; 0x1350 <terminalCheck2+0xb8>
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	40 f4       	brcc	.+16     	; 0x1354 <terminalCheck2+0xbc>
    1344:	80 91 62 02 	lds	r24, 0x0262
    1348:	90 91 63 02 	lds	r25, 0x0263
    134c:	89 2b       	or	r24, r25
    134e:	11 f4       	brne	.+4      	; 0x1354 <terminalCheck2+0xbc>
    1350:	5e de       	rcall	.-836    	; 0x100e <turnRight>
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <terminalCheck2+0xbe>
    1354:	f6 de       	rcall	.-532    	; 0x1142 <turn>
    1356:	c0 91 9b 02 	lds	r28, 0x029B
    135a:	d0 91 9c 02 	lds	r29, 0x029C
    135e:	58 db       	rcall	.-2384   	; 0xa10 <scan>
    1360:	cc 0f       	add	r28, r28
    1362:	dd 1f       	adc	r29, r29
    1364:	cc 0f       	add	r28, r28
    1366:	dd 1f       	adc	r29, r29
    1368:	c1 56       	subi	r28, 0x61	; 97
    136a:	dd 4f       	sbci	r29, 0xFD	; 253
    136c:	9b 83       	std	Y+3, r25	; 0x03
    136e:	8a 83       	std	Y+2, r24	; 0x02
    1370:	80 91 9b 02 	lds	r24, 0x029B
    1374:	90 91 9c 02 	lds	r25, 0x029C
    1378:	fc 01       	movw	r30, r24
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	e1 56       	subi	r30, 0x61	; 97
    1384:	fd 4f       	sbci	r31, 0xFD	; 253
    1386:	22 81       	ldd	r18, Z+2	; 0x02
    1388:	33 81       	ldd	r19, Z+3	; 0x03
    138a:	2f 3f       	cpi	r18, 0xFF	; 255
    138c:	4f ef       	ldi	r20, 0xFF	; 255
    138e:	34 07       	cpc	r19, r20
    1390:	51 f0       	breq	.+20     	; 0x13a6 <terminalCheck2+0x10e>
    1392:	fc 01       	movw	r30, r24
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	e1 55       	subi	r30, 0x51	; 81
    139a:	fd 4f       	sbci	r31, 0xFD	; 253
    139c:	40 81       	ld	r20, Z
    139e:	51 81       	ldd	r21, Z+1	; 0x01
    13a0:	24 17       	cp	r18, r20
    13a2:	35 07       	cpc	r19, r21
    13a4:	51 f4       	brne	.+20     	; 0x13ba <terminalCheck2+0x122>
    13a6:	20 91 00 02 	lds	r18, 0x0200
    13aa:	30 91 01 02 	lds	r19, 0x0201
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	31 09       	sbc	r19, r1
    13b2:	30 93 01 02 	sts	0x0201, r19
    13b6:	20 93 00 02 	sts	0x0200, r18
    13ba:	fc 01       	movw	r30, r24
    13bc:	ee 0f       	add	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	e8 58       	subi	r30, 0x88	; 136
    13c2:	fd 4f       	sbci	r31, 0xFD	; 253
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	80 91 66 02 	lds	r24, 0x0266
    13d0:	90 91 67 02 	lds	r25, 0x0267
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	90 93 67 02 	sts	0x0267, r25
    13da:	80 93 66 02 	sts	0x0266, r24
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <pick>:
	servo_2(0);
	else if (side == 1)
	servo_3(0);
}
void pick(int side)	//TODO delay
{
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
	
	elevate(0, side);//lower
    13ea:	68 2f       	mov	r22, r24
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	53 dd       	rcall	.-1370   	; 0xe96 <elevate>
	open(side);
    13f0:	8c 2f       	mov	r24, r28
    13f2:	5e dd       	rcall	.-1348   	; 0xeb0 <open>
	close(side);
    13f4:	8c 2f       	mov	r24, r28
    13f6:	6c dd       	rcall	.-1320   	; 0xed0 <close>
	elevate(45, side);//mid
    13f8:	6c 2f       	mov	r22, r28
    13fa:	8d e2       	ldi	r24, 0x2D	; 45
    13fc:	4c dd       	rcall	.-1384   	; 0xe96 <elevate>
	armCount--;
    13fe:	80 91 02 02 	lds	r24, 0x0202
    1402:	90 91 03 02 	lds	r25, 0x0203
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	90 93 03 02 	sts	0x0203, r25
    140c:	80 93 02 02 	sts	0x0202, r24
	if(side==0)
    1410:	cd 2b       	or	r28, r29
    1412:	21 f4       	brne	.+8      	; 0x141c <pick+0x38>
	lcd("pickRight");
    1414:	83 e2       	ldi	r24, 0x23	; 35
    1416:	92 e0       	ldi	r25, 0x02	; 2
    1418:	e3 dd       	rcall	.-1082   	; 0xfe0 <lcd>
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <pick+0x3e>
	else
	lcd("pickLeft");
    141c:	8d e2       	ldi	r24, 0x2D	; 45
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	df dd       	rcall	.-1090   	; 0xfe0 <lcd>
}
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <pickSort>:
	buzzer_off();	
}


void pickSort(int armNo, int sortNo)
{
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
    1432:	8b 01       	movw	r16, r22
	lcd_print(2,10,armNo,1);
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	ac 01       	movw	r20, r24
    143a:	6a e0       	ldi	r22, 0x0A	; 10
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	lcd_print(2,12,sortNo,1);
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	a8 01       	movw	r20, r16
    1448:	6c e0       	ldi	r22, 0x0C	; 12
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	buzzer();
    1450:	4f dd       	rcall	.-1378   	; 0xef0 <buzzer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1452:	2f ef       	ldi	r18, 0xFF	; 255
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9c e2       	ldi	r25, 0x2C	; 44
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	80 40       	sbci	r24, 0x00	; 0
    145c:	90 40       	sbci	r25, 0x00	; 0
    145e:	e1 f7       	brne	.-8      	; 0x1458 <pickSort+0x30>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <pickSort+0x3a>
    1462:	00 00       	nop
	_delay_ms(1000);
	arm[armNo] = sort[sortNo];
    1464:	fe 01       	movw	r30, r28
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	ed 53       	subi	r30, 0x3D	; 61
    146c:	fd 4f       	sbci	r31, 0xFD	; 253
    146e:	d8 01       	movw	r26, r16
    1470:	aa 0f       	add	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	a9 56       	subi	r26, 0x69	; 105
    1476:	bd 4f       	sbci	r27, 0xFD	; 253
    1478:	8d 91       	ld	r24, X+
    147a:	9c 91       	ld	r25, X
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1480:	c0 17       	cp	r28, r16
    1482:	d1 07       	cpc	r29, r17
    1484:	39 f4       	brne	.+14     	; 0x1494 <pickSort+0x6c>
    1486:	80 91 62 02 	lds	r24, 0x0262
    148a:	90 91 63 02 	lds	r25, 0x0263
    148e:	89 2b       	or	r24, r25
    1490:	49 f4       	brne	.+18     	; 0x14a4 <pickSort+0x7c>
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <pickSort+0x78>
    1494:	80 91 62 02 	lds	r24, 0x0262
    1498:	90 91 63 02 	lds	r25, 0x0263
    149c:	02 97       	sbiw	r24, 0x02	; 2
    149e:	11 f4       	brne	.+4      	; 0x14a4 <pickSort+0x7c>
	turn();
    14a0:	50 de       	rcall	.-864    	; 0x1142 <turn>
    14a2:	0c c0       	rjmp	.+24     	; 0x14bc <pickSort+0x94>
	else
	{
		if (dir == 1 || dir == 3)
    14a4:	80 91 62 02 	lds	r24, 0x0262
    14a8:	90 91 63 02 	lds	r25, 0x0263
    14ac:	8d 7f       	andi	r24, 0xFD	; 253
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	29 f4       	brne	.+10     	; 0x14bc <pickSort+0x94>
		{
			if (armNo == 0)
    14b2:	20 97       	sbiw	r28, 0x00	; 0
    14b4:	11 f4       	brne	.+4      	; 0x14ba <pickSort+0x92>
			turnLeft();
    14b6:	f8 dd       	rcall	.-1040   	; 0x10a8 <turnLeft>
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <pickSort+0x94>
			else turnRight();
    14ba:	a9 dd       	rcall	.-1198   	; 0x100e <turnRight>
		}
	}
	pick(armNo);
    14bc:	ce 01       	movw	r24, r28
    14be:	92 df       	rcall	.-220    	; 0x13e4 <pick>
	sort[sortNo] = -1;
    14c0:	f8 01       	movw	r30, r16
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	e9 56       	subi	r30, 0x69	; 105
    14c8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
	lcd("exit picksort");
    14d2:	86 e3       	ldi	r24, 0x36	; 54
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	84 dd       	rcall	.-1272   	; 0xfe0 <lcd>
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <drop>:
		}
	}
}

void drop(int side)	//TODO delay
{
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	ec 01       	movw	r28, r24
	
	elevate(0, side);//lower
    14e8:	68 2f       	mov	r22, r24
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	d4 dc       	rcall	.-1624   	; 0xe96 <elevate>
	open(side);
    14ee:	8c 2f       	mov	r24, r28
    14f0:	df dc       	rcall	.-1602   	; 0xeb0 <open>
	elevate(45, side);//mid
    14f2:	6c 2f       	mov	r22, r28
    14f4:	8d e2       	ldi	r24, 0x2D	; 45
    14f6:	cf dc       	rcall	.-1634   	; 0xe96 <elevate>
	close(side);
    14f8:	8c 2f       	mov	r24, r28
    14fa:	ea dc       	rcall	.-1580   	; 0xed0 <close>
	armCount++;
    14fc:	80 91 02 02 	lds	r24, 0x0202
    1500:	90 91 03 02 	lds	r25, 0x0203
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	90 93 03 02 	sts	0x0203, r25
    150a:	80 93 02 02 	sts	0x0202, r24
	if(side==0)
    150e:	cd 2b       	or	r28, r29
    1510:	21 f4       	brne	.+8      	; 0x151a <drop+0x38>
	lcd("dropRight");
    1512:	84 e4       	ldi	r24, 0x44	; 68
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	64 dd       	rcall	.-1336   	; 0xfe0 <lcd>
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <drop+0x3e>
	else
	lcd("dropLeft");
    151a:	8e e4       	ldi	r24, 0x4E	; 78
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	60 dd       	rcall	.-1344   	; 0xfe0 <lcd>
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <sortDrop>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
}
void sortDrop(int armNo, int sortNo)
{
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    152c:	fb 01       	movw	r30, r22
    152e:	ee 0f       	add	r30, r30
    1530:	ff 1f       	adc	r31, r31
    1532:	e9 56       	subi	r30, 0x69	; 105
    1534:	fd 4f       	sbci	r31, 0xFD	; 253
    1536:	dc 01       	movw	r26, r24
    1538:	aa 0f       	add	r26, r26
    153a:	bb 1f       	adc	r27, r27
    153c:	ad 53       	subi	r26, 0x3D	; 61
    153e:	bd 4f       	sbci	r27, 0xFD	; 253
    1540:	8d 91       	ld	r24, X+
    1542:	9c 91       	ld	r25, X
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1548:	c6 17       	cp	r28, r22
    154a:	d7 07       	cpc	r29, r23
    154c:	39 f4       	brne	.+14     	; 0x155c <sortDrop+0x36>
    154e:	80 91 62 02 	lds	r24, 0x0262
    1552:	90 91 63 02 	lds	r25, 0x0263
    1556:	89 2b       	or	r24, r25
    1558:	49 f4       	brne	.+18     	; 0x156c <sortDrop+0x46>
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <sortDrop+0x42>
    155c:	80 91 62 02 	lds	r24, 0x0262
    1560:	90 91 63 02 	lds	r25, 0x0263
    1564:	02 97       	sbiw	r24, 0x02	; 2
    1566:	11 f4       	brne	.+4      	; 0x156c <sortDrop+0x46>
	turn();
    1568:	ec dd       	rcall	.-1064   	; 0x1142 <turn>
    156a:	0c c0       	rjmp	.+24     	; 0x1584 <sortDrop+0x5e>
	else
	{
		if (dir == 1 || dir == 3)
    156c:	80 91 62 02 	lds	r24, 0x0262
    1570:	90 91 63 02 	lds	r25, 0x0263
    1574:	8d 7f       	andi	r24, 0xFD	; 253
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	29 f4       	brne	.+10     	; 0x1584 <sortDrop+0x5e>
		{
			if (armNo == 0)
    157a:	20 97       	sbiw	r28, 0x00	; 0
    157c:	11 f4       	brne	.+4      	; 0x1582 <sortDrop+0x5c>
			turnLeft();
    157e:	94 dd       	rcall	.-1240   	; 0x10a8 <turnLeft>
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <sortDrop+0x5e>
			else turnRight();
    1582:	45 dd       	rcall	.-1398   	; 0x100e <turnRight>
		}
	}
	drop(armNo);
    1584:	ce 01       	movw	r24, r28
    1586:	ad df       	rcall	.-166    	; 0x14e2 <drop>
	arm[armNo] = -1;
    1588:	cc 0f       	add	r28, r28
    158a:	dd 1f       	adc	r29, r29
    158c:	cd 53       	subi	r28, 0x3D	; 61
    158e:	dd 4f       	sbci	r29, 0xFD	; 253
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	9f ef       	ldi	r25, 0xFF	; 255
    1594:	99 83       	std	Y+1, r25	; 0x01
    1596:	88 83       	st	Y, r24
	//..printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <newSort>:
		ot = ct;
	}
}

void newSort()
{
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
	int t1, t2, a1, a2;
	if (arm[0] != -1)
    15aa:	20 91 c3 02 	lds	r18, 0x02C3
    15ae:	30 91 c4 02 	lds	r19, 0x02C4
    15b2:	2f 3f       	cpi	r18, 0xFF	; 255
    15b4:	4f ef       	ldi	r20, 0xFF	; 255
    15b6:	34 07       	cpc	r19, r20
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <newSort+0x2a>
	a1 = indicator[arm[0]];
    15ba:	f9 01       	movw	r30, r18
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	e9 54       	subi	r30, 0x49	; 73
    15c2:	fd 4f       	sbci	r31, 0xFD	; 253
    15c4:	c0 81       	ld	r28, Z
    15c6:	d1 81       	ldd	r29, Z+1	; 0x01
	if (arm[1] != -1)
    15c8:	e0 91 c5 02 	lds	r30, 0x02C5
    15cc:	f0 91 c6 02 	lds	r31, 0x02C6
    15d0:	ef 3f       	cpi	r30, 0xFF	; 255
    15d2:	6f ef       	ldi	r22, 0xFF	; 255
    15d4:	f6 07       	cpc	r31, r22
    15d6:	09 f4       	brne	.+2      	; 0x15da <newSort+0x3c>
    15d8:	5d c1       	rjmp	.+698    	; 0x1894 <newSort+0x2f6>
	a2 = indicator[arm[1]];
    15da:	df 01       	movw	r26, r30
    15dc:	aa 0f       	add	r26, r26
    15de:	bb 1f       	adc	r27, r27
    15e0:	a9 54       	subi	r26, 0x49	; 73
    15e2:	bd 4f       	sbci	r27, 0xFD	; 253
    15e4:	0d 91       	ld	r16, X+
    15e6:	1c 91       	ld	r17, X

	t1 = (ct + 1) % 2;
    15e8:	80 91 9b 02 	lds	r24, 0x029B
    15ec:	90 91 9c 02 	lds	r25, 0x029C
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	90 78       	andi	r25, 0x80	; 128
    15f6:	99 23       	and	r25, r25
    15f8:	24 f4       	brge	.+8      	; 0x1602 <newSort+0x64>
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	8e 6f       	ori	r24, 0xFE	; 254
    15fe:	9f 6f       	ori	r25, 0xFF	; 255
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    1604:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    1606:	d0 93 9c 02 	sts	0x029C, r29
    160a:	c0 93 9b 02 	sts	0x029B, r28
		if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    160e:	2f 3f       	cpi	r18, 0xFF	; 255
    1610:	af ef       	ldi	r26, 0xFF	; 255
    1612:	3a 07       	cpc	r19, r26
    1614:	e1 f1       	breq	.+120    	; 0x168e <newSort+0xf0>
    1616:	de 01       	movw	r26, r28
    1618:	aa 0f       	add	r26, r26
    161a:	bb 1f       	adc	r27, r27
    161c:	aa 0f       	add	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	a1 56       	subi	r26, 0x61	; 97
    1622:	bd 4f       	sbci	r27, 0xFD	; 253
    1624:	4d 91       	ld	r20, X+
    1626:	5c 91       	ld	r21, X
    1628:	4f 3f       	cpi	r20, 0xFF	; 255
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	71 f0       	breq	.+28     	; 0x164a <newSort+0xac>
    162e:	de 01       	movw	r26, r28
    1630:	aa 0f       	add	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	aa 0f       	add	r26, r26
    1636:	bb 1f       	adc	r27, r27
    1638:	a1 56       	subi	r26, 0x61	; 97
    163a:	bd 4f       	sbci	r27, 0xFD	; 253
    163c:	12 96       	adiw	r26, 0x02	; 2
    163e:	4d 91       	ld	r20, X+
    1640:	5c 91       	ld	r21, X
    1642:	13 97       	sbiw	r26, 0x03	; 3
    1644:	4f 3f       	cpi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	11 f5       	brne	.+68     	; 0x168e <newSort+0xf0>
		{
			if (arm[1] == -1)
    164a:	31 96       	adiw	r30, 0x01	; 1
    164c:	09 f0       	breq	.+2      	; 0x1650 <newSort+0xb2>
    164e:	10 c1       	rjmp	.+544    	; 0x1870 <newSort+0x2d2>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    1650:	66 0f       	add	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	fb 01       	movw	r30, r22
    1656:	e9 56       	subi	r30, 0x69	; 105
    1658:	fd 4f       	sbci	r31, 0xFD	; 253
    165a:	20 81       	ld	r18, Z
    165c:	31 81       	ldd	r19, Z+1	; 0x01
    165e:	fb 01       	movw	r30, r22
    1660:	e1 55       	subi	r30, 0x51	; 81
    1662:	fd 4f       	sbci	r31, 0xFD	; 253
    1664:	40 81       	ld	r20, Z
    1666:	51 81       	ldd	r21, Z+1	; 0x01
    1668:	24 17       	cp	r18, r20
    166a:	35 07       	cpc	r19, r21
    166c:	59 f0       	breq	.+22     	; 0x1684 <newSort+0xe6>
    166e:	fc 01       	movw	r30, r24
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	e1 55       	subi	r30, 0x51	; 81
    1676:	fd 4f       	sbci	r31, 0xFD	; 253
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	28 17       	cp	r18, r24
    167e:	39 07       	cpc	r19, r25
    1680:	09 f0       	breq	.+2      	; 0x1684 <newSort+0xe6>
    1682:	f6 c0       	rjmp	.+492    	; 0x1870 <newSort+0x2d2>
				pickSort(1, a1);
    1684:	be 01       	movw	r22, r28
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	ce de       	rcall	.-612    	; 0x1428 <pickSort>
    168c:	f1 c0       	rjmp	.+482    	; 0x1870 <newSort+0x2d2>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    168e:	ef 3f       	cpi	r30, 0xFF	; 255
    1690:	4f ef       	ldi	r20, 0xFF	; 255
    1692:	f4 07       	cpc	r31, r20
    1694:	09 f4       	brne	.+2      	; 0x1698 <newSort+0xfa>
    1696:	52 c0       	rjmp	.+164    	; 0x173c <newSort+0x19e>
    1698:	d8 01       	movw	r26, r16
    169a:	aa 0f       	add	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	aa 0f       	add	r26, r26
    16a0:	bb 1f       	adc	r27, r27
    16a2:	a1 56       	subi	r26, 0x61	; 97
    16a4:	bd 4f       	sbci	r27, 0xFD	; 253
    16a6:	4d 91       	ld	r20, X+
    16a8:	5c 91       	ld	r21, X
    16aa:	4f 3f       	cpi	r20, 0xFF	; 255
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <newSort+0x114>
    16b0:	14 c1       	rjmp	.+552    	; 0x18da <newSort+0x33c>
    16b2:	d8 01       	movw	r26, r16
    16b4:	aa 0f       	add	r26, r26
    16b6:	bb 1f       	adc	r27, r27
    16b8:	aa 0f       	add	r26, r26
    16ba:	bb 1f       	adc	r27, r27
    16bc:	a1 56       	subi	r26, 0x61	; 97
    16be:	bd 4f       	sbci	r27, 0xFD	; 253
    16c0:	12 96       	adiw	r26, 0x02	; 2
    16c2:	4d 91       	ld	r20, X+
    16c4:	5c 91       	ld	r21, X
    16c6:	13 97       	sbiw	r26, 0x03	; 3
    16c8:	4f 3f       	cpi	r20, 0xFF	; 255
    16ca:	5f 4f       	sbci	r21, 0xFF	; 255
    16cc:	b9 f5       	brne	.+110    	; 0x173c <newSort+0x19e>
    16ce:	f3 c0       	rjmp	.+486    	; 0x18b6 <newSort+0x318>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    16d0:	2f 3f       	cpi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <newSort+0x13a>
    16d6:	cc c0       	rjmp	.+408    	; 0x1870 <newSort+0x2d2>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    16d8:	9b 01       	movw	r18, r22
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	f9 01       	movw	r30, r18
    16e0:	e9 56       	subi	r30, 0x69	; 105
    16e2:	fd 4f       	sbci	r31, 0xFD	; 253
    16e4:	40 81       	ld	r20, Z
    16e6:	51 81       	ldd	r21, Z+1	; 0x01
    16e8:	f9 01       	movw	r30, r18
    16ea:	e1 55       	subi	r30, 0x51	; 81
    16ec:	fd 4f       	sbci	r31, 0xFD	; 253
    16ee:	20 81       	ld	r18, Z
    16f0:	31 81       	ldd	r19, Z+1	; 0x01
    16f2:	42 17       	cp	r20, r18
    16f4:	53 07       	cpc	r21, r19
    16f6:	09 f0       	breq	.+2      	; 0x16fa <newSort+0x15c>
    16f8:	bb c0       	rjmp	.+374    	; 0x1870 <newSort+0x2d2>
    16fa:	fc 01       	movw	r30, r24
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	e1 55       	subi	r30, 0x51	; 81
    1702:	fd 4f       	sbci	r31, 0xFD	; 253
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	48 17       	cp	r20, r24
    170a:	59 07       	cpc	r21, r25
    170c:	09 f0       	breq	.+2      	; 0x1710 <newSort+0x172>
    170e:	b0 c0       	rjmp	.+352    	; 0x1870 <newSort+0x2d2>
					pickSort(1, t1);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	89 de       	rcall	.-750    	; 0x1428 <pickSort>
    1716:	ac c0       	rjmp	.+344    	; 0x1870 <newSort+0x2d2>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    1718:	fb 01       	movw	r30, r22
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	e9 56       	subi	r30, 0x69	; 105
    1720:	fd 4f       	sbci	r31, 0xFD	; 253
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	09 f0       	breq	.+2      	; 0x172c <newSort+0x18e>
    172a:	a2 c0       	rjmp	.+324    	; 0x1870 <newSort+0x2d2>
    172c:	2f 3f       	cpi	r18, 0xFF	; 255
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	09 f4       	brne	.+2      	; 0x1734 <newSort+0x196>
    1732:	9e c0       	rjmp	.+316    	; 0x1870 <newSort+0x2d2>
			sortDrop(1, t1);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	f6 de       	rcall	.-532    	; 0x1526 <sortDrop>
    173a:	9a c0       	rjmp	.+308    	; 0x1870 <newSort+0x2d2>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    173c:	2f 3f       	cpi	r18, 0xFF	; 255
    173e:	af ef       	ldi	r26, 0xFF	; 255
    1740:	3a 07       	cpc	r19, r26
    1742:	a1 f0       	breq	.+40     	; 0x176c <newSort+0x1ce>
    1744:	db 01       	movw	r26, r22
    1746:	aa 0f       	add	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	a9 56       	subi	r26, 0x69	; 105
    174c:	bd 4f       	sbci	r27, 0xFD	; 253
    174e:	8d 91       	ld	r24, X+
    1750:	9c 91       	ld	r25, X
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	31 f4       	brne	.+12     	; 0x1762 <newSort+0x1c4>
    1756:	31 96       	adiw	r30, 0x01	; 1
    1758:	21 f0       	breq	.+8      	; 0x1762 <newSort+0x1c4>
		sortDrop(1, t1);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	e3 de       	rcall	.-570    	; 0x1526 <sortDrop>
    1760:	87 c0       	rjmp	.+270    	; 0x1870 <newSort+0x2d2>
		else if (arm[0] != -1)
		ct = arm[0];
    1762:	30 93 9c 02 	sts	0x029C, r19
    1766:	20 93 9b 02 	sts	0x029B, r18
    176a:	82 c0       	rjmp	.+260    	; 0x1870 <newSort+0x2d2>
		else ct = arm[1];
    176c:	f0 93 9c 02 	sts	0x029C, r31
    1770:	e0 93 9b 02 	sts	0x029B, r30
    1774:	7d c0       	rjmp	.+250    	; 0x1870 <newSort+0x2d2>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    1776:	a7 01       	movw	r20, r14
    1778:	44 0f       	add	r20, r20
    177a:	55 1f       	adc	r21, r21
    177c:	fa 01       	movw	r30, r20
    177e:	e9 56       	subi	r30, 0x69	; 105
    1780:	fd 4f       	sbci	r31, 0xFD	; 253
    1782:	20 81       	ld	r18, Z
    1784:	31 81       	ldd	r19, Z+1	; 0x01
    1786:	fa 01       	movw	r30, r20
    1788:	e1 55       	subi	r30, 0x51	; 81
    178a:	fd 4f       	sbci	r31, 0xFD	; 253
    178c:	40 81       	ld	r20, Z
    178e:	51 81       	ldd	r21, Z+1	; 0x01
    1790:	24 17       	cp	r18, r20
    1792:	35 07       	cpc	r19, r21
    1794:	51 f0       	breq	.+20     	; 0x17aa <newSort+0x20c>
    1796:	fc 01       	movw	r30, r24
    1798:	ee 0f       	add	r30, r30
    179a:	ff 1f       	adc	r31, r31
    179c:	e1 55       	subi	r30, 0x51	; 81
    179e:	fd 4f       	sbci	r31, 0xFD	; 253
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	26 17       	cp	r18, r22
    17a6:	37 07       	cpc	r19, r23
    17a8:	81 f4       	brne	.+32     	; 0x17ca <newSort+0x22c>
    17aa:	2f 3f       	cpi	r18, 0xFF	; 255
    17ac:	af ef       	ldi	r26, 0xFF	; 255
    17ae:	3a 07       	cpc	r19, r26
    17b0:	71 f1       	breq	.+92     	; 0x180e <newSort+0x270>
		ct = indicator[sort[t1]];
    17b2:	f9 01       	movw	r30, r18
    17b4:	ee 0f       	add	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	e9 54       	subi	r30, 0x49	; 73
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	90 93 9c 02 	sts	0x029C, r25
    17c4:	80 93 9b 02 	sts	0x029B, r24
    17c8:	53 c0       	rjmp	.+166    	; 0x1870 <newSort+0x2d2>
		else if (sort[t1] != -1)
    17ca:	2f 3f       	cpi	r18, 0xFF	; 255
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	f9 f0       	breq	.+62     	; 0x180e <newSort+0x270>
		{
			pickSort(0, t1);
    17d0:	b7 01       	movw	r22, r14
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	28 de       	rcall	.-944    	; 0x1428 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    17d8:	2f ef       	ldi	r18, 0xFF	; 255
    17da:	e2 1a       	sub	r14, r18
    17dc:	f2 0a       	sbc	r15, r18
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	e4 22       	and	r14, r20
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	f4 22       	and	r15, r20
    17e6:	ff 20       	and	r15, r15
    17e8:	54 f4       	brge	.+20     	; 0x17fe <newSort+0x260>
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	e6 1a       	sub	r14, r22
    17ee:	f1 08       	sbc	r15, r1
    17f0:	8e ef       	ldi	r24, 0xFE	; 254
    17f2:	e8 2a       	or	r14, r24
    17f4:	ff 24       	eor	r15, r15
    17f6:	fa 94       	dec	r15
    17f8:	af ef       	ldi	r26, 0xFF	; 255
    17fa:	ea 1a       	sub	r14, r26
    17fc:	fa 0a       	sbc	r15, r26
    17fe:	e4 e0       	ldi	r30, 0x04	; 4
    1800:	ee 0e       	add	r14, r30
    1802:	f1 1c       	adc	r15, r1
    1804:	f0 92 9c 02 	sts	0x029C, r15
    1808:	e0 92 9b 02 	sts	0x029B, r14
    180c:	31 c0       	rjmp	.+98     	; 0x1870 <newSort+0x2d2>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    180e:	f7 01       	movw	r30, r14
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	e8 58       	subi	r30, 0x88	; 136
    1816:	fd 4f       	sbci	r31, 0xFD	; 253
    1818:	20 81       	ld	r18, Z
    181a:	31 81       	ldd	r19, Z+1	; 0x01
    181c:	21 30       	cpi	r18, 0x01	; 1
    181e:	31 05       	cpc	r19, r1
    1820:	19 f5       	brne	.+70     	; 0x1868 <newSort+0x2ca>
    1822:	f7 01       	movw	r30, r14
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	e1 56       	subi	r30, 0x61	; 97
    182e:	fd 4f       	sbci	r31, 0xFD	; 253
    1830:	20 81       	ld	r18, Z
    1832:	31 81       	ldd	r19, Z+1	; 0x01
    1834:	42 17       	cp	r20, r18
    1836:	53 07       	cpc	r21, r19
    1838:	19 f0       	breq	.+6      	; 0x1840 <newSort+0x2a2>
    183a:	2f 3f       	cpi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	a1 f4       	brne	.+40     	; 0x1868 <newSort+0x2ca>
    1840:	f7 01       	movw	r30, r14
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	e1 56       	subi	r30, 0x61	; 97
    184c:	fd 4f       	sbci	r31, 0xFD	; 253
    184e:	22 81       	ldd	r18, Z+2	; 0x02
    1850:	33 81       	ldd	r19, Z+3	; 0x03
    1852:	42 17       	cp	r20, r18
    1854:	53 07       	cpc	r21, r19
    1856:	19 f0       	breq	.+6      	; 0x185e <newSort+0x2c0>
    1858:	2f 3f       	cpi	r18, 0xFF	; 255
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	29 f4       	brne	.+10     	; 0x1868 <newSort+0x2ca>
		ct = t2;
    185e:	90 93 9c 02 	sts	0x029C, r25
    1862:	80 93 9b 02 	sts	0x029B, r24
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <newSort+0x2d2>
		else ct = t1;
    1868:	f0 92 9c 02 	sts	0x029C, r15
    186c:	e0 92 9b 02 	sts	0x029B, r14
/**************************************************
******************SORT*****************************
**************************************************/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    1870:	80 91 9b 02 	lds	r24, 0x029B
    1874:	90 91 9c 02 	lds	r25, 0x029C
    1878:	02 96       	adiw	r24, 0x02	; 2
    187a:	83 70       	andi	r24, 0x03	; 3
    187c:	90 78       	andi	r25, 0x80	; 128
    187e:	99 23       	and	r25, r25
    1880:	24 f4       	brge	.+8      	; 0x188a <newSort+0x2ec>
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	8c 6f       	ori	r24, 0xFC	; 252
    1886:	9f 6f       	ori	r25, 0xFF	; 255
    1888:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    188a:	90 93 c0 02 	sts	0x02C0, r25
    188e:	80 93 bf 02 	sts	0x02BF, r24
    1892:	2d c0       	rjmp	.+90     	; 0x18ee <newSort+0x350>
	if (arm[0] != -1)
	a1 = indicator[arm[0]];
	if (arm[1] != -1)
	a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    1894:	80 91 9b 02 	lds	r24, 0x029B
    1898:	90 91 9c 02 	lds	r25, 0x029C
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__divmodhi4>
    18a6:	7c 01       	movw	r14, r24
    18a8:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    18aa:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    18ac:	2f 3f       	cpi	r18, 0xFF	; 255
    18ae:	4f ef       	ldi	r20, 0xFF	; 255
    18b0:	34 07       	cpc	r19, r20
    18b2:	c1 f4       	brne	.+48     	; 0x18e4 <newSort+0x346>
    18b4:	60 cf       	rjmp	.-320    	; 0x1776 <newSort+0x1d8>
				pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    18b6:	10 93 9c 02 	sts	0x029C, r17
    18ba:	00 93 9b 02 	sts	0x029B, r16
			if (term[a2][0] == -1 || term[a2][1] == -1)
    18be:	f8 01       	movw	r30, r16
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	e1 56       	subi	r30, 0x61	; 97
    18ca:	fd 4f       	sbci	r31, 0xFD	; 253
    18cc:	42 81       	ldd	r20, Z+2	; 0x02
    18ce:	53 81       	ldd	r21, Z+3	; 0x03
    18d0:	4f 3f       	cpi	r20, 0xFF	; 255
    18d2:	5f 4f       	sbci	r21, 0xFF	; 255
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <newSort+0x33a>
    18d6:	20 cf       	rjmp	.-448    	; 0x1718 <newSort+0x17a>
    18d8:	fb ce       	rjmp	.-522    	; 0x16d0 <newSort+0x132>
				pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    18da:	10 93 9c 02 	sts	0x029C, r17
    18de:	00 93 9b 02 	sts	0x029B, r16
    18e2:	f6 ce       	rjmp	.-532    	; 0x16d0 <newSort+0x132>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    18e4:	d0 93 9c 02 	sts	0x029C, r29
    18e8:	c0 93 9b 02 	sts	0x029B, r28
    18ec:	94 ce       	rjmp	.-728    	; 0x1616 <newSort+0x78>
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	08 95       	ret

000018fc <sortCheck>:

void sortCheck()
{
    18fc:	8f 92       	push	r8
    18fe:	9f 92       	push	r9
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1914:	40 91 9b 02 	lds	r20, 0x029B
    1918:	50 91 9c 02 	lds	r21, 0x029C
    191c:	42 30       	cpi	r20, 0x02	; 2
    191e:	51 05       	cpc	r21, r1
    1920:	30 f4       	brcc	.+12     	; 0x192e <sortCheck+0x32>
    1922:	80 91 62 02 	lds	r24, 0x0262
    1926:	90 91 63 02 	lds	r25, 0x0263
    192a:	02 97       	sbiw	r24, 0x02	; 2
    192c:	79 f0       	breq	.+30     	; 0x194c <sortCheck+0x50>
    192e:	ca 01       	movw	r24, r20
    1930:	02 97       	sbiw	r24, 0x02	; 2
    1932:	02 97       	sbiw	r24, 0x02	; 2
    1934:	80 f4       	brcc	.+32     	; 0x1956 <sortCheck+0x5a>
    1936:	80 91 62 02 	lds	r24, 0x0262
    193a:	90 91 63 02 	lds	r25, 0x0263
    193e:	89 2b       	or	r24, r25
    1940:	79 f0       	breq	.+30     	; 0x1960 <sortCheck+0x64>
}

void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    1942:	01 e0       	ldi	r16, 0x01	; 1
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	c0 e0       	ldi	r28, 0x00	; 0
    1948:	d0 e0       	ldi	r29, 0x00	; 0
    194a:	0e c0       	rjmp	.+28     	; 0x1968 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1950:	c1 e0       	ldi	r28, 0x01	; 1
    1952:	d0 e0       	ldi	r29, 0x00	; 0
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <sortCheck+0x6c>
}

void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    1956:	01 e0       	ldi	r16, 0x01	; 1
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	c0 e0       	ldi	r28, 0x00	; 0
    195c:	d0 e0       	ldi	r29, 0x00	; 0
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1960:	00 e0       	ldi	r16, 0x00	; 0
    1962:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1964:	c1 e0       	ldi	r28, 0x01	; 1
    1966:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    1968:	9a 01       	movw	r18, r20
    196a:	21 70       	andi	r18, 0x01	; 1
    196c:	30 78       	andi	r19, 0x80	; 128
    196e:	33 23       	and	r19, r19
    1970:	34 f4       	brge	.+12     	; 0x197e <sortCheck+0x82>
    1972:	21 50       	subi	r18, 0x01	; 1
    1974:	31 09       	sbc	r19, r1
    1976:	2e 6f       	ori	r18, 0xFE	; 254
    1978:	3f 6f       	ori	r19, 0xFF	; 255
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	b2 2e       	mov	r11, r18
    1980:	a3 2e       	mov	r10, r19
    1982:	f9 01       	movw	r30, r18
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	e9 56       	subi	r30, 0x69	; 105
    198a:	fd 4f       	sbci	r31, 0xFD	; 253
    198c:	20 81       	ld	r18, Z
    198e:	31 81       	ldd	r19, Z+1	; 0x01
    1990:	fa 01       	movw	r30, r20
    1992:	ee 0f       	add	r30, r30
    1994:	ff 1f       	adc	r31, r31
    1996:	e1 55       	subi	r30, 0x51	; 81
    1998:	fd 4f       	sbci	r31, 0xFD	; 253
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	28 17       	cp	r18, r24
    19a0:	39 07       	cpc	r19, r25
    19a2:	79 f0       	breq	.+30     	; 0x19c2 <sortCheck+0xc6>
    19a4:	80 91 bf 02 	lds	r24, 0x02BF
    19a8:	90 91 c0 02 	lds	r25, 0x02C0
    19ac:	fc 01       	movw	r30, r24
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	e1 55       	subi	r30, 0x51	; 81
    19b4:	fd 4f       	sbci	r31, 0xFD	; 253
    19b6:	40 81       	ld	r20, Z
    19b8:	51 81       	ldd	r21, Z+1	; 0x01
    19ba:	24 17       	cp	r18, r20
    19bc:	35 07       	cpc	r19, r21
    19be:	09 f0       	breq	.+2      	; 0x19c2 <sortCheck+0xc6>
    19c0:	a6 c0       	rjmp	.+332    	; 0x1b0e <sortCheck+0x212>
	{
		if (armCount>0)
    19c2:	80 91 02 02 	lds	r24, 0x0202
    19c6:	90 91 03 02 	lds	r25, 0x0203
    19ca:	18 16       	cp	r1, r24
    19cc:	19 06       	cpc	r1, r25
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <sortCheck+0xd6>
    19d0:	95 c0       	rjmp	.+298    	; 0x1afc <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    19d2:	f9 01       	movw	r30, r18
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	e9 54       	subi	r30, 0x49	; 73
    19da:	fd 4f       	sbci	r31, 0xFD	; 253
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	70 93 9c 02 	sts	0x029C, r23
    19e4:	60 93 9b 02 	sts	0x029B, r22
			if (arm[arm0] == -1)
    19e8:	fe 01       	movw	r30, r28
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	ed 53       	subi	r30, 0x3D	; 61
    19f0:	fd 4f       	sbci	r31, 0xFD	; 253
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	69 f4       	brne	.+26     	; 0x1a14 <sortCheck+0x118>
			pickSort(arm0, ct % 2);
    19fa:	61 70       	andi	r22, 0x01	; 1
    19fc:	70 78       	andi	r23, 0x80	; 128
    19fe:	77 23       	and	r23, r23
    1a00:	34 f4       	brge	.+12     	; 0x1a0e <sortCheck+0x112>
    1a02:	61 50       	subi	r22, 0x01	; 1
    1a04:	71 09       	sbc	r23, r1
    1a06:	6e 6f       	ori	r22, 0xFE	; 254
    1a08:	7f 6f       	ori	r23, 0xFF	; 255
    1a0a:	6f 5f       	subi	r22, 0xFF	; 255
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	ce 01       	movw	r24, r28
    1a10:	0b dd       	rcall	.-1514   	; 0x1428 <pickSort>
    1a12:	15 c0       	rjmp	.+42     	; 0x1a3e <sortCheck+0x142>
			else if (arm[arm1] == -1)
    1a14:	f8 01       	movw	r30, r16
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ed 53       	subi	r30, 0x3D	; 61
    1a1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	61 f4       	brne	.+24     	; 0x1a3e <sortCheck+0x142>
			pickSort(arm1, ct % 2);
    1a26:	61 70       	andi	r22, 0x01	; 1
    1a28:	70 78       	andi	r23, 0x80	; 128
    1a2a:	77 23       	and	r23, r23
    1a2c:	34 f4       	brge	.+12     	; 0x1a3a <sortCheck+0x13e>
    1a2e:	61 50       	subi	r22, 0x01	; 1
    1a30:	71 09       	sbc	r23, r1
    1a32:	6e 6f       	ori	r22, 0xFE	; 254
    1a34:	7f 6f       	ori	r23, 0xFF	; 255
    1a36:	6f 5f       	subi	r22, 0xFF	; 255
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	f5 dc       	rcall	.-1558   	; 0x1428 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    1a3e:	80 91 02 02 	lds	r24, 0x0202
    1a42:	90 91 03 02 	lds	r25, 0x0203
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <sortCheck+0x150>
    1a4a:	68 c1       	rjmp	.+720    	; 0x1d1c <sortCheck+0x420>
    1a4c:	80 91 9b 02 	lds	r24, 0x029B
    1a50:	90 91 9c 02 	lds	r25, 0x029C
    1a54:	fc 01       	movw	r30, r24
    1a56:	ee 0f       	add	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	e1 56       	subi	r30, 0x61	; 97
    1a60:	fd 4f       	sbci	r31, 0xFD	; 253
    1a62:	20 81       	ld	r18, Z
    1a64:	31 81       	ldd	r19, Z+1	; 0x01
    1a66:	2f 3f       	cpi	r18, 0xFF	; 255
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <sortCheck+0x172>
    1a6c:	57 c1       	rjmp	.+686    	; 0x1d1c <sortCheck+0x420>
    1a6e:	fc 01       	movw	r30, r24
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	e1 56       	subi	r30, 0x61	; 97
    1a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a7c:	22 81       	ldd	r18, Z+2	; 0x02
    1a7e:	33 81       	ldd	r19, Z+3	; 0x03
    1a80:	2f 3f       	cpi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <sortCheck+0x18c>
    1a86:	4a c1       	rjmp	.+660    	; 0x1d1c <sortCheck+0x420>
    1a88:	9c 01       	movw	r18, r24
    1a8a:	21 70       	andi	r18, 0x01	; 1
    1a8c:	30 78       	andi	r19, 0x80	; 128
    1a8e:	33 23       	and	r19, r19
    1a90:	34 f4       	brge	.+12     	; 0x1a9e <sortCheck+0x1a2>
    1a92:	21 50       	subi	r18, 0x01	; 1
    1a94:	31 09       	sbc	r19, r1
    1a96:	2e 6f       	ori	r18, 0xFE	; 254
    1a98:	3f 6f       	ori	r19, 0xFF	; 255
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	62 2f       	mov	r22, r18
    1aa0:	73 2f       	mov	r23, r19
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	e9 56       	subi	r30, 0x69	; 105
    1aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    1aac:	20 81       	ld	r18, Z
    1aae:	31 81       	ldd	r19, Z+1	; 0x01
    1ab0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <sortCheck+0x1bc>
    1ab6:	32 c1       	rjmp	.+612    	; 0x1d1c <sortCheck+0x420>
			{
				if (arm[arm0] == color[ct])
    1ab8:	fc 01       	movw	r30, r24
    1aba:	ee 0f       	add	r30, r30
    1abc:	ff 1f       	adc	r31, r31
    1abe:	e1 55       	subi	r30, 0x51	; 81
    1ac0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac2:	80 81       	ld	r24, Z
    1ac4:	91 81       	ldd	r25, Z+1	; 0x01
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ee 0f       	add	r30, r30
    1aca:	ff 1f       	adc	r31, r31
    1acc:	ed 53       	subi	r30, 0x3D	; 61
    1ace:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad0:	20 81       	ld	r18, Z
    1ad2:	31 81       	ldd	r19, Z+1	; 0x01
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <sortCheck+0x1e4>
				sortDrop(arm1, ct % 2);
    1ada:	c8 01       	movw	r24, r16
    1adc:	24 dd       	rcall	.-1464   	; 0x1526 <sortDrop>
    1ade:	1e c1       	rjmp	.+572    	; 0x1d1c <sortCheck+0x420>
				else if (arm[arm1] == color[ct])
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	ed 53       	subi	r30, 0x3D	; 61
    1ae8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aea:	20 81       	ld	r18, Z
    1aec:	31 81       	ldd	r19, Z+1	; 0x01
    1aee:	82 17       	cp	r24, r18
    1af0:	93 07       	cpc	r25, r19
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <sortCheck+0x1fa>
    1af4:	13 c1       	rjmp	.+550    	; 0x1d1c <sortCheck+0x420>
				sortDrop(arm0, ct % 2);
    1af6:	ce 01       	movw	r24, r28
    1af8:	16 dd       	rcall	.-1492   	; 0x1526 <sortDrop>
    1afa:	10 c1       	rjmp	.+544    	; 0x1d1c <sortCheck+0x420>
			}
		}
		else ct = adj;
    1afc:	80 91 bf 02 	lds	r24, 0x02BF
    1b00:	90 91 c0 02 	lds	r25, 0x02C0
    1b04:	90 93 9c 02 	sts	0x029C, r25
    1b08:	80 93 9b 02 	sts	0x029B, r24
    1b0c:	07 c1       	rjmp	.+526    	; 0x1d1c <sortCheck+0x420>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ed 53       	subi	r30, 0x3D	; 61
    1b16:	fd 4f       	sbci	r31, 0xFD	; 253
    1b18:	01 90       	ld	r0, Z+
    1b1a:	f0 81       	ld	r31, Z
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	4e 17       	cp	r20, r30
    1b20:	5f 07       	cpc	r21, r31
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <sortCheck+0x22a>
    1b24:	8c c0       	rjmp	.+280    	; 0x1c3e <sortCheck+0x342>
    1b26:	d8 01       	movw	r26, r16
    1b28:	aa 0f       	add	r26, r26
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	ad 53       	subi	r26, 0x3D	; 61
    1b2e:	bd 4f       	sbci	r27, 0xFD	; 253
    1b30:	8d 90       	ld	r8, X+
    1b32:	9c 90       	ld	r9, X
    1b34:	48 15       	cp	r20, r8
    1b36:	59 05       	cpc	r21, r9
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <sortCheck+0x240>
    1b3a:	81 c0       	rjmp	.+258    	; 0x1c3e <sortCheck+0x342>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1b3c:	e0 90 02 02 	lds	r14, 0x0202
    1b40:	f0 90 03 02 	lds	r15, 0x0203
    1b44:	e1 14       	cp	r14, r1
    1b46:	f1 04       	cpc	r15, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <sortCheck+0x250>
    1b4a:	4c c0       	rjmp	.+152    	; 0x1be4 <sortCheck+0x2e8>
    1b4c:	b1 e0       	ldi	r27, 0x01	; 1
    1b4e:	eb 16       	cp	r14, r27
    1b50:	f1 04       	cpc	r15, r1
    1b52:	29 f4       	brne	.+10     	; 0x1b5e <sortCheck+0x262>
    1b54:	2f 3f       	cpi	r18, 0xFF	; 255
    1b56:	6f ef       	ldi	r22, 0xFF	; 255
    1b58:	36 07       	cpc	r19, r22
    1b5a:	b1 f5       	brne	.+108    	; 0x1bc8 <sortCheck+0x2cc>
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <sortCheck+0x274>
    1b5e:	67 01       	movw	r12, r14
    1b60:	71 e0       	ldi	r23, 0x01	; 1
    1b62:	c7 1a       	sub	r12, r23
    1b64:	d1 08       	sbc	r13, r1
    1b66:	a2 e0       	ldi	r26, 0x02	; 2
    1b68:	ca 16       	cp	r12, r26
    1b6a:	d1 04       	cpc	r13, r1
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <sortCheck+0x274>
    1b6e:	62 c0       	rjmp	.+196    	; 0x1c34 <sortCheck+0x338>
    1b70:	6c 01       	movw	r12, r24
    1b72:	cc 0c       	add	r12, r12
    1b74:	dd 1c       	adc	r13, r13
    1b76:	cc 0c       	add	r12, r12
    1b78:	dd 1c       	adc	r13, r13
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	61 56       	subi	r22, 0x61	; 97
    1b7e:	7d 4f       	sbci	r23, 0xFD	; 253
    1b80:	db 01       	movw	r26, r22
    1b82:	cd 90       	ld	r12, X+
    1b84:	dc 90       	ld	r13, X
    1b86:	4c 15       	cp	r20, r12
    1b88:	5d 05       	cpc	r21, r13
    1b8a:	21 f0       	breq	.+8      	; 0x1b94 <sortCheck+0x298>
    1b8c:	cd 20       	and	r12, r13
    1b8e:	c0 94       	com	r12
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <sortCheck+0x298>
    1b92:	50 c0       	rjmp	.+160    	; 0x1c34 <sortCheck+0x338>
    1b94:	6c 01       	movw	r12, r24
    1b96:	cc 0c       	add	r12, r12
    1b98:	dd 1c       	adc	r13, r13
    1b9a:	cc 0c       	add	r12, r12
    1b9c:	dd 1c       	adc	r13, r13
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	61 56       	subi	r22, 0x61	; 97
    1ba2:	7d 4f       	sbci	r23, 0xFD	; 253
    1ba4:	db 01       	movw	r26, r22
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	cd 90       	ld	r12, X+
    1baa:	dc 90       	ld	r13, X
    1bac:	13 97       	sbiw	r26, 0x03	; 3
    1bae:	4c 15       	cp	r20, r12
    1bb0:	5d 05       	cpc	r21, r13
    1bb2:	21 f0       	breq	.+8      	; 0x1bbc <sortCheck+0x2c0>
    1bb4:	cd 20       	and	r12, r13
    1bb6:	c0 94       	com	r12
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <sortCheck+0x2c0>
    1bba:	3c c0       	rjmp	.+120    	; 0x1c34 <sortCheck+0x338>
		{
			if (armCount>0)
    1bbc:	1e 14       	cp	r1, r14
    1bbe:	1f 04       	cpc	r1, r15
    1bc0:	8c f4       	brge	.+34     	; 0x1be4 <sortCheck+0x2e8>
			{
				if (sort[ct % 2] != -1)
    1bc2:	2f 3f       	cpi	r18, 0xFF	; 255
    1bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <sortCheck+0x2e8>
				if (arm[arm0] == -1)
    1bc8:	31 96       	adiw	r30, 0x01	; 1
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <sortCheck+0x2da>
				pickSort(arm0, ct % 2);
    1bcc:	6b 2d       	mov	r22, r11
    1bce:	7a 2d       	mov	r23, r10
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	2a dc       	rcall	.-1964   	; 0x1428 <pickSort>
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <sortCheck+0x2e8>
				else if (arm[arm1] == -1)
    1bd6:	89 20       	and	r8, r9
    1bd8:	80 94       	com	r8
    1bda:	21 f4       	brne	.+8      	; 0x1be4 <sortCheck+0x2e8>
				pickSort(arm1, ct % 2);
    1bdc:	6b 2d       	mov	r22, r11
    1bde:	7a 2d       	mov	r23, r10
    1be0:	c8 01       	movw	r24, r16
    1be2:	22 dc       	rcall	.-1980   	; 0x1428 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    1be4:	80 91 9b 02 	lds	r24, 0x029B
    1be8:	90 91 9c 02 	lds	r25, 0x029C
    1bec:	bc 01       	movw	r22, r24
    1bee:	6f 5f       	subi	r22, 0xFF	; 255
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	61 70       	andi	r22, 0x01	; 1
    1bf4:	70 78       	andi	r23, 0x80	; 128
    1bf6:	77 23       	and	r23, r23
    1bf8:	34 f4       	brge	.+12     	; 0x1c06 <sortCheck+0x30a>
    1bfa:	61 50       	subi	r22, 0x01	; 1
    1bfc:	71 09       	sbc	r23, r1
    1bfe:	6e 6f       	ori	r22, 0xFE	; 254
    1c00:	7f 6f       	ori	r23, 0xFF	; 255
    1c02:	6f 5f       	subi	r22, 0xFF	; 255
    1c04:	7f 4f       	sbci	r23, 0xFF	; 255
    1c06:	6c 5f       	subi	r22, 0xFC	; 252
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	90 78       	andi	r25, 0x80	; 128
    1c0e:	99 23       	and	r25, r25
    1c10:	24 f4       	brge	.+8      	; 0x1c1a <sortCheck+0x31e>
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	8e 6f       	ori	r24, 0xFE	; 254
    1c16:	9f 6f       	ori	r25, 0xFF	; 255
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	04 96       	adiw	r24, 0x04	; 4
    1c1c:	ce da       	rcall	.-2660   	; 0x11ba <traverseToSort>
			newSort();
    1c1e:	bf dc       	rcall	.-1666   	; 0x159e <newSort>
			if (ct == 4 || ct == 5)
    1c20:	80 91 9b 02 	lds	r24, 0x029B
    1c24:	90 91 9c 02 	lds	r25, 0x029C
    1c28:	04 97       	sbiw	r24, 0x04	; 4
    1c2a:	02 97       	sbiw	r24, 0x02	; 2
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <sortCheck+0x334>
    1c2e:	87 c0       	rjmp	.+270    	; 0x1d3e <sortCheck+0x442>
			newSort();
    1c30:	b6 dc       	rcall	.-1684   	; 0x159e <newSort>
    1c32:	85 c0       	rjmp	.+266    	; 0x1d3e <sortCheck+0x442>
			return;
		}
		else ct = adj;
    1c34:	90 93 9c 02 	sts	0x029C, r25
    1c38:	80 93 9b 02 	sts	0x029B, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1c3c:	6f c0       	rjmp	.+222    	; 0x1d1c <sortCheck+0x420>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    1c3e:	a0 91 02 02 	lds	r26, 0x0202
    1c42:	b0 91 03 02 	lds	r27, 0x0203
    1c46:	10 97       	sbiw	r26, 0x00	; 0
    1c48:	c1 f5       	brne	.+112    	; 0x1cba <sortCheck+0x3be>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	aa 0f       	add	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	a8 58       	subi	r26, 0x88	; 136
    1c52:	bd 4f       	sbci	r27, 0xFD	; 253
    1c54:	0d 90       	ld	r0, X+
    1c56:	bc 91       	ld	r27, X
    1c58:	a0 2d       	mov	r26, r0
    1c5a:	a1 30       	cpi	r26, 0x01	; 1
    1c5c:	b1 05       	cpc	r27, r1
    1c5e:	d9 f4       	brne	.+54     	; 0x1c96 <sortCheck+0x39a>
    1c60:	dc 01       	movw	r26, r24
    1c62:	aa 0f       	add	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	aa 0f       	add	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	a1 56       	subi	r26, 0x61	; 97
    1c6c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c6e:	0d 90       	ld	r0, X+
    1c70:	bc 91       	ld	r27, X
    1c72:	a0 2d       	mov	r26, r0
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <sortCheck+0x37e>
    1c78:	49 c0       	rjmp	.+146    	; 0x1d0c <sortCheck+0x410>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	aa 0f       	add	r26, r26
    1c7e:	bb 1f       	adc	r27, r27
    1c80:	aa 0f       	add	r26, r26
    1c82:	bb 1f       	adc	r27, r27
    1c84:	a1 56       	subi	r26, 0x61	; 97
    1c86:	bd 4f       	sbci	r27, 0xFD	; 253
    1c88:	12 96       	adiw	r26, 0x02	; 2
    1c8a:	8d 91       	ld	r24, X+
    1c8c:	9c 91       	ld	r25, X
    1c8e:	13 97       	sbiw	r26, 0x03	; 3
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <sortCheck+0x39e>
    1c94:	3b c0       	rjmp	.+118    	; 0x1d0c <sortCheck+0x410>
    1c96:	ab 2b       	or	r26, r27
    1c98:	c9 f5       	brne	.+114    	; 0x1d0c <sortCheck+0x410>
    1c9a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	b1 f5       	brne	.+108    	; 0x1d0c <sortCheck+0x410>
		if (arm[arm0] == color[adj])
    1ca0:	4e 17       	cp	r20, r30
    1ca2:	5f 07       	cpc	r21, r31
    1ca4:	29 f4       	brne	.+10     	; 0x1cb0 <sortCheck+0x3b4>
		sortDrop(arm1, ct % 2);
    1ca6:	6b 2d       	mov	r22, r11
    1ca8:	7a 2d       	mov	r23, r10
    1caa:	c8 01       	movw	r24, r16
    1cac:	3c dc       	rcall	.-1928   	; 0x1526 <sortDrop>
    1cae:	2e c0       	rjmp	.+92     	; 0x1d0c <sortCheck+0x410>
		else sortDrop(arm0, ct % 2);
    1cb0:	6b 2d       	mov	r22, r11
    1cb2:	7a 2d       	mov	r23, r10
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	37 dc       	rcall	.-1938   	; 0x1526 <sortDrop>
    1cb8:	29 c0       	rjmp	.+82     	; 0x1d0c <sortCheck+0x410>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	39 f5       	brne	.+78     	; 0x1d0c <sortCheck+0x410>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	aa 0f       	add	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	aa 0f       	add	r26, r26
    1cc6:	bb 1f       	adc	r27, r27
    1cc8:	a1 56       	subi	r26, 0x61	; 97
    1cca:	bd 4f       	sbci	r27, 0xFD	; 253
    1ccc:	4d 91       	ld	r20, X+
    1cce:	5c 91       	ld	r21, X
    1cd0:	4f 3f       	cpi	r20, 0xFF	; 255
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	69 f0       	breq	.+26     	; 0x1cf0 <sortCheck+0x3f4>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	aa 0f       	add	r26, r26
    1cda:	bb 1f       	adc	r27, r27
    1cdc:	aa 0f       	add	r26, r26
    1cde:	bb 1f       	adc	r27, r27
    1ce0:	a1 56       	subi	r26, 0x61	; 97
    1ce2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ce4:	12 96       	adiw	r26, 0x02	; 2
    1ce6:	8d 91       	ld	r24, X+
    1ce8:	9c 91       	ld	r25, X
    1cea:	13 97       	sbiw	r26, 0x03	; 3
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	71 f4       	brne	.+28     	; 0x1d0c <sortCheck+0x410>
    1cf0:	2f 3f       	cpi	r18, 0xFF	; 255
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <sortCheck+0x410>
		if (arm[arm0] == -1)
    1cf6:	31 96       	adiw	r30, 0x01	; 1
    1cf8:	29 f4       	brne	.+10     	; 0x1d04 <sortCheck+0x408>
		pickSort(arm0, ct % 2);
    1cfa:	6b 2d       	mov	r22, r11
    1cfc:	7a 2d       	mov	r23, r10
    1cfe:	ce 01       	movw	r24, r28
    1d00:	93 db       	rcall	.-2266   	; 0x1428 <pickSort>
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <sortCheck+0x410>
		else	pickSort(arm1, ct % 2);
    1d04:	6b 2d       	mov	r22, r11
    1d06:	7a 2d       	mov	r23, r10
    1d08:	c8 01       	movw	r24, r16
    1d0a:	8e db       	rcall	.-2276   	; 0x1428 <pickSort>
		ct = adj;
    1d0c:	80 91 bf 02 	lds	r24, 0x02BF
    1d10:	90 91 c0 02 	lds	r25, 0x02C0
    1d14:	90 93 9c 02 	sts	0x029C, r25
    1d18:	80 93 9b 02 	sts	0x029B, r24
/**************************************************
******************SORT*****************************
**************************************************/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    1d1c:	80 91 9b 02 	lds	r24, 0x029B
    1d20:	90 91 9c 02 	lds	r25, 0x029C
    1d24:	02 96       	adiw	r24, 0x02	; 2
    1d26:	83 70       	andi	r24, 0x03	; 3
    1d28:	90 78       	andi	r25, 0x80	; 128
    1d2a:	99 23       	and	r25, r25
    1d2c:	24 f4       	brge	.+8      	; 0x1d36 <sortCheck+0x43a>
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	8c 6f       	ori	r24, 0xFC	; 252
    1d32:	9f 6f       	ori	r25, 0xFF	; 255
    1d34:	01 96       	adiw	r24, 0x01	; 1
		if (arm[arm0] == -1)
		pickSort(arm0, ct % 2);
		else	pickSort(arm1, ct % 2);
		ct = adj;
	}
	adj = adjCount(ct);
    1d36:	90 93 c0 02 	sts	0x02C0, r25
    1d3a:	80 93 bf 02 	sts	0x02BF, r24
}
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	bf 90       	pop	r11
    1d50:	af 90       	pop	r10
    1d52:	9f 90       	pop	r9
    1d54:	8f 90       	pop	r8
    1d56:	08 95       	ret

00001d58 <terminalCheck1>:
		front();
		ot = ct % 2 + 4;
	}
}
void terminalCheck1()
{
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
	forward_mm(30);
    1d5c:	8e e1       	ldi	r24, 0x1E	; 30
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 b2 04 	call	0x964	; 0x964 <forward_mm>
	flag=1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	90 93 69 02 	sts	0x0269, r25
    1d6c:	80 93 68 02 	sts	0x0268, r24
	if (ct != ot)
    1d70:	80 91 64 02 	lds	r24, 0x0264
    1d74:	90 91 65 02 	lds	r25, 0x0265
    1d78:	20 91 9b 02 	lds	r18, 0x029B
    1d7c:	30 91 9c 02 	lds	r19, 0x029C
    1d80:	28 17       	cp	r18, r24
    1d82:	39 07       	cpc	r19, r25
    1d84:	89 f1       	breq	.+98     	; 0x1de8 <terminalCheck1+0x90>
	{
		if (dir == 1 || dir == 3)
    1d86:	20 91 62 02 	lds	r18, 0x0262
    1d8a:	30 91 63 02 	lds	r19, 0x0263
    1d8e:	2d 7f       	andi	r18, 0xFD	; 253
    1d90:	21 30       	cpi	r18, 0x01	; 1
    1d92:	31 05       	cpc	r19, r1
    1d94:	41 f4       	brne	.+16     	; 0x1da6 <terminalCheck1+0x4e>
		{
			if (ot == 3 || ot == 0)
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <terminalCheck1+0x48>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <terminalCheck1+0x4c>
				turnRight();
    1da0:	36 d9       	rcall	.-3476   	; 0x100e <turnRight>
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <terminalCheck1+0x4e>
			else turnLeft();
    1da4:	81 d9       	rcall	.-3326   	; 0x10a8 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1da6:	80 91 9b 02 	lds	r24, 0x029B
    1daa:	90 91 9c 02 	lds	r25, 0x029C
    1dae:	82 30       	cpi	r24, 0x02	; 2
    1db0:	91 05       	cpc	r25, r1
    1db2:	38 f4       	brcc	.+14     	; 0x1dc2 <terminalCheck1+0x6a>
    1db4:	20 91 62 02 	lds	r18, 0x0262
    1db8:	30 91 63 02 	lds	r19, 0x0263
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	49 f0       	breq	.+18     	; 0x1dd4 <terminalCheck1+0x7c>
    1dc2:	02 97       	sbiw	r24, 0x02	; 2
    1dc4:	02 97       	sbiw	r24, 0x02	; 2
    1dc6:	38 f4       	brcc	.+14     	; 0x1dd6 <terminalCheck1+0x7e>
    1dc8:	80 91 62 02 	lds	r24, 0x0262
    1dcc:	90 91 63 02 	lds	r25, 0x0263
    1dd0:	89 2b       	or	r24, r25
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <terminalCheck1+0x7e>
			turn();
    1dd4:	b6 d9       	rcall	.-3220   	; 0x1142 <turn>
		front();
    1dd6:	54 d8       	rcall	.-3928   	; 0xe80 <front>
		ot = ct;
    1dd8:	80 91 9b 02 	lds	r24, 0x029B
    1ddc:	90 91 9c 02 	lds	r25, 0x029C
    1de0:	90 93 65 02 	sts	0x0265, r25
    1de4:	80 93 64 02 	sts	0x0264, r24
	}
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1de8:	80 91 9b 02 	lds	r24, 0x029B
    1dec:	90 91 9c 02 	lds	r25, 0x029C
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	91 05       	cpc	r25, r1
    1df4:	30 f4       	brcc	.+12     	; 0x1e02 <terminalCheck1+0xaa>
    1df6:	20 91 62 02 	lds	r18, 0x0262
    1dfa:	30 91 63 02 	lds	r19, 0x0263
    1dfe:	23 2b       	or	r18, r19
    1e00:	49 f0       	breq	.+18     	; 0x1e14 <terminalCheck1+0xbc>
    1e02:	02 97       	sbiw	r24, 0x02	; 2
    1e04:	02 97       	sbiw	r24, 0x02	; 2
    1e06:	40 f4       	brcc	.+16     	; 0x1e18 <terminalCheck1+0xc0>
    1e08:	80 91 62 02 	lds	r24, 0x0262
    1e0c:	90 91 63 02 	lds	r25, 0x0263
    1e10:	02 97       	sbiw	r24, 0x02	; 2
    1e12:	11 f4       	brne	.+4      	; 0x1e18 <terminalCheck1+0xc0>
	turnRight();
    1e14:	fc d8       	rcall	.-3592   	; 0x100e <turnRight>
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <terminalCheck1+0xc2>
	else turnLeft();
    1e18:	47 d9       	rcall	.-3442   	; 0x10a8 <turnLeft>
	term[ct][0]=scan();
    1e1a:	c0 91 9b 02 	lds	r28, 0x029B
    1e1e:	d0 91 9c 02 	lds	r29, 0x029C
    1e22:	0e 94 08 05 	call	0xa10	; 0xa10 <scan>
    1e26:	cc 0f       	add	r28, r28
    1e28:	dd 1f       	adc	r29, r29
    1e2a:	cc 0f       	add	r28, r28
    1e2c:	dd 1f       	adc	r29, r29
    1e2e:	c1 56       	subi	r28, 0x61	; 97
    1e30:	dd 4f       	sbci	r29, 0xFD	; 253
    1e32:	99 83       	std	Y+1, r25	; 0x01
    1e34:	88 83       	st	Y, r24
	lcd_print(1,1,1111,4);
    1e36:	24 e0       	ldi	r18, 0x04	; 4
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	47 e5       	ldi	r20, 0x57	; 87
    1e3c:	54 e0       	ldi	r21, 0x04	; 4
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);


	
	lcd((char*)term[ct][0]);
    1e46:	e0 91 9b 02 	lds	r30, 0x029B
    1e4a:	f0 91 9c 02 	lds	r31, 0x029C
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	ee 0f       	add	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	e1 56       	subi	r30, 0x61	; 97
    1e58:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	c0 d8       	rcall	.-3712   	; 0xfe0 <lcd>
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1e60:	20 91 9b 02 	lds	r18, 0x029B
    1e64:	30 91 9c 02 	lds	r19, 0x029C
    1e68:	f9 01       	movw	r30, r18
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	ee 0f       	add	r30, r30
    1e70:	ff 1f       	adc	r31, r31
    1e72:	e1 56       	subi	r30, 0x61	; 97
    1e74:	fd 4f       	sbci	r31, 0xFD	; 253
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e7c:	4f ef       	ldi	r20, 0xFF	; 255
    1e7e:	94 07       	cpc	r25, r20
    1e80:	51 f0       	breq	.+20     	; 0x1e96 <terminalCheck1+0x13e>
    1e82:	f9 01       	movw	r30, r18
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	e1 55       	subi	r30, 0x51	; 81
    1e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e8c:	20 81       	ld	r18, Z
    1e8e:	31 81       	ldd	r19, Z+1	; 0x01
    1e90:	82 17       	cp	r24, r18
    1e92:	93 07       	cpc	r25, r19
    1e94:	49 f4       	brne	.+18     	; 0x1ea8 <terminalCheck1+0x150>
	total--;
    1e96:	80 91 00 02 	lds	r24, 0x0200
    1e9a:	90 91 01 02 	lds	r25, 0x0201
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	90 93 01 02 	sts	0x0201, r25
    1ea4:	80 93 00 02 	sts	0x0200, r24
}
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <position>:
int adjCount(int ct)
{
	return (ct + 2) % 4;
}
void position(int armNo,int side)
{
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	8c 01       	movw	r16, r24
    1eb8:	eb 01       	movw	r28, r22
	if (ct == ot)
    1eba:	20 91 9b 02 	lds	r18, 0x029B
    1ebe:	30 91 9c 02 	lds	r19, 0x029C
    1ec2:	40 91 64 02 	lds	r20, 0x0264
    1ec6:	50 91 65 02 	lds	r21, 0x0265
    1eca:	24 17       	cp	r18, r20
    1ecc:	35 07       	cpc	r19, r21
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <position+0x24>
    1ed0:	8a c0       	rjmp	.+276    	; 0x1fe6 <position+0x138>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1ed2:	c9 01       	movw	r24, r18
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	30 f4       	brcc	.+12     	; 0x1ee6 <position+0x38>
    1eda:	40 91 62 02 	lds	r20, 0x0262
    1ede:	50 91 63 02 	lds	r21, 0x0263
    1ee2:	45 2b       	or	r20, r21
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <position+0x50>
    1ee6:	22 50       	subi	r18, 0x02	; 2
    1ee8:	31 09       	sbc	r19, r1
    1eea:	22 30       	cpi	r18, 0x02	; 2
    1eec:	31 05       	cpc	r19, r1
    1eee:	68 f4       	brcc	.+26     	; 0x1f0a <position+0x5c>
    1ef0:	40 91 62 02 	lds	r20, 0x0262
    1ef4:	50 91 63 02 	lds	r21, 0x0263
    1ef8:	42 30       	cpi	r20, 0x02	; 2
    1efa:	51 05       	cpc	r21, r1
    1efc:	31 f4       	brne	.+12     	; 0x1f0a <position+0x5c>
		{
			if (armNo != side)
    1efe:	0c 17       	cp	r16, r28
    1f00:	1d 07       	cpc	r17, r29
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <position+0x58>
    1f04:	ae c0       	rjmp	.+348    	; 0x2062 <position+0x1b4>
			turn();
    1f06:	1d d9       	rcall	.-3526   	; 0x1142 <turn>
    1f08:	ac c0       	rjmp	.+344    	; 0x2062 <position+0x1b4>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	38 f4       	brcc	.+14     	; 0x1f1e <position+0x70>
    1f10:	40 91 62 02 	lds	r20, 0x0262
    1f14:	50 91 63 02 	lds	r21, 0x0263
    1f18:	42 30       	cpi	r20, 0x02	; 2
    1f1a:	51 05       	cpc	r21, r1
    1f1c:	49 f0       	breq	.+18     	; 0x1f30 <position+0x82>
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	60 f4       	brcc	.+24     	; 0x1f3c <position+0x8e>
    1f24:	40 91 62 02 	lds	r20, 0x0262
    1f28:	50 91 63 02 	lds	r21, 0x0263
    1f2c:	45 2b       	or	r20, r21
    1f2e:	31 f4       	brne	.+12     	; 0x1f3c <position+0x8e>
		{
			if (armNo == side)
    1f30:	0c 17       	cp	r16, r28
    1f32:	1d 07       	cpc	r17, r29
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <position+0x8a>
    1f36:	95 c0       	rjmp	.+298    	; 0x2062 <position+0x1b4>
			turn();
    1f38:	04 d9       	rcall	.-3576   	; 0x1142 <turn>
    1f3a:	93 c0       	rjmp	.+294    	; 0x2062 <position+0x1b4>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	91 05       	cpc	r25, r1
    1f40:	38 f4       	brcc	.+14     	; 0x1f50 <position+0xa2>
    1f42:	40 91 62 02 	lds	r20, 0x0262
    1f46:	50 91 63 02 	lds	r21, 0x0263
    1f4a:	41 30       	cpi	r20, 0x01	; 1
    1f4c:	51 05       	cpc	r21, r1
    1f4e:	51 f0       	breq	.+20     	; 0x1f64 <position+0xb6>
    1f50:	22 30       	cpi	r18, 0x02	; 2
    1f52:	31 05       	cpc	r19, r1
    1f54:	f0 f4       	brcc	.+60     	; 0x1f92 <position+0xe4>
    1f56:	40 91 62 02 	lds	r20, 0x0262
    1f5a:	50 91 63 02 	lds	r21, 0x0263
    1f5e:	43 30       	cpi	r20, 0x03	; 3
    1f60:	51 05       	cpc	r21, r1
    1f62:	b9 f4       	brne	.+46     	; 0x1f92 <position+0xe4>
		{
			
			if(flag==1 && (dir==0 || dir==1))
    1f64:	80 91 68 02 	lds	r24, 0x0268
    1f68:	90 91 69 02 	lds	r25, 0x0269
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	51 f4       	brne	.+20     	; 0x1f84 <position+0xd6>
    1f70:	80 91 62 02 	lds	r24, 0x0262
    1f74:	90 91 63 02 	lds	r25, 0x0263
    1f78:	02 97       	sbiw	r24, 0x02	; 2
    1f7a:	20 f4       	brcc	.+8      	; 0x1f84 <position+0xd6>
			{
				back_mm(30);
    1f7c:	8e e1       	ldi	r24, 0x1E	; 30
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 bb 04 	call	0x976	; 0x976 <back_mm>
				flag==0;
			}
			if (armNo != side)
    1f84:	0c 17       	cp	r16, r28
    1f86:	1d 07       	cpc	r17, r29
    1f88:	11 f0       	breq	.+4      	; 0x1f8e <position+0xe0>
			turnRight();
    1f8a:	41 d8       	rcall	.-3966   	; 0x100e <turnRight>
    1f8c:	6a c0       	rjmp	.+212    	; 0x2062 <position+0x1b4>
			else turnLeft();
    1f8e:	8c d8       	rcall	.-3816   	; 0x10a8 <turnLeft>
    1f90:	68 c0       	rjmp	.+208    	; 0x2062 <position+0x1b4>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1f92:	02 97       	sbiw	r24, 0x02	; 2
    1f94:	30 f4       	brcc	.+12     	; 0x1fa2 <position+0xf4>
    1f96:	80 91 62 02 	lds	r24, 0x0262
    1f9a:	90 91 63 02 	lds	r25, 0x0263
    1f9e:	03 97       	sbiw	r24, 0x03	; 3
    1fa0:	59 f0       	breq	.+22     	; 0x1fb8 <position+0x10a>
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	08 f0       	brcs	.+2      	; 0x1faa <position+0xfc>
    1fa8:	5c c0       	rjmp	.+184    	; 0x2062 <position+0x1b4>
    1faa:	80 91 62 02 	lds	r24, 0x0262
    1fae:	90 91 63 02 	lds	r25, 0x0263
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <position+0x10a>
    1fb6:	55 c0       	rjmp	.+170    	; 0x2062 <position+0x1b4>
		{
			
			if(flag==1 && (dir==0 || dir==1))
    1fb8:	80 91 68 02 	lds	r24, 0x0268
    1fbc:	90 91 69 02 	lds	r25, 0x0269
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	51 f4       	brne	.+20     	; 0x1fd8 <position+0x12a>
    1fc4:	80 91 62 02 	lds	r24, 0x0262
    1fc8:	90 91 63 02 	lds	r25, 0x0263
    1fcc:	02 97       	sbiw	r24, 0x02	; 2
    1fce:	20 f4       	brcc	.+8      	; 0x1fd8 <position+0x12a>
			{
				back_mm(30);
    1fd0:	8e e1       	ldi	r24, 0x1E	; 30
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 bb 04 	call	0x976	; 0x976 <back_mm>
				flag==0;
			}
			if (armNo == side)
    1fd8:	0c 17       	cp	r16, r28
    1fda:	1d 07       	cpc	r17, r29
    1fdc:	11 f4       	brne	.+4      	; 0x1fe2 <position+0x134>
			turnRight();
    1fde:	17 d8       	rcall	.-4050   	; 0x100e <turnRight>
    1fe0:	40 c0       	rjmp	.+128    	; 0x2062 <position+0x1b4>
			else turnLeft();
    1fe2:	62 d8       	rcall	.-3900   	; 0x10a8 <turnLeft>
    1fe4:	3e c0       	rjmp	.+124    	; 0x2062 <position+0x1b4>
		}
		
	}
	else
	{
		if (dir == 0 || dir == 2)
    1fe6:	40 91 62 02 	lds	r20, 0x0262
    1fea:	50 91 63 02 	lds	r21, 0x0263
    1fee:	41 15       	cp	r20, r1
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	21 f0       	breq	.+8      	; 0x1ffc <position+0x14e>
    1ff4:	42 30       	cpi	r20, 0x02	; 2
    1ff6:	51 05       	cpc	r21, r1
    1ff8:	61 f5       	brne	.+88     	; 0x2052 <position+0x1a4>
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <position+0x156>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	80 f4       	brcc	.+32     	; 0x2022 <position+0x174>
    2002:	05 c0       	rjmp	.+10     	; 0x200e <position+0x160>
    2004:	22 50       	subi	r18, 0x02	; 2
    2006:	31 09       	sbc	r19, r1
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	50 f4       	brcc	.+20     	; 0x2022 <position+0x174>
			{
				if (armNo == side)
    200e:	0c 17       	cp	r16, r28
    2010:	1d 07       	cpc	r17, r29
    2012:	19 f4       	brne	.+6      	; 0x201a <position+0x16c>
				{
					front();
    2014:	0e 94 40 07 	call	0xe80	; 0xe80 <front>
    2018:	1c c0       	rjmp	.+56     	; 0x2052 <position+0x1a4>
				}
				else
				{
					front();
    201a:	0e 94 40 07 	call	0xe80	; 0xe80 <front>
					turn();
    201e:	91 d8       	rcall	.-3806   	; 0x1142 <turn>
    2020:	18 c0       	rjmp	.+48     	; 0x2052 <position+0x1a4>
				}
			}
			else
			{
				lcd("M here");
    2022:	87 e5       	ldi	r24, 0x57	; 87
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd>
    202a:	2f ef       	ldi	r18, 0xFF	; 255
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	99 e5       	ldi	r25, 0x59	; 89
    2030:	21 50       	subi	r18, 0x01	; 1
    2032:	80 40       	sbci	r24, 0x00	; 0
    2034:	90 40       	sbci	r25, 0x00	; 0
    2036:	e1 f7       	brne	.-8      	; 0x2030 <position+0x182>
    2038:	00 c0       	rjmp	.+0      	; 0x203a <position+0x18c>
    203a:	00 00       	nop
				_delay_ms(2000);

				if (armNo == side)
    203c:	0c 17       	cp	r16, r28
    203e:	1d 07       	cpc	r17, r29
    2040:	21 f4       	brne	.+8      	; 0x204a <position+0x19c>
				{
					turn();
    2042:	7f d8       	rcall	.-3842   	; 0x1142 <turn>
					front();
    2044:	0e 94 40 07 	call	0xe80	; 0xe80 <front>
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <position+0x1a4>
				}
				else
				{
					turn();
    204a:	7b d8       	rcall	.-3850   	; 0x1142 <turn>
					front();
    204c:	0e 94 40 07 	call	0xe80	; 0xe80 <front>
					turn();
    2050:	78 d8       	rcall	.-3856   	; 0x1142 <turn>





		ot = ct;
    2052:	80 91 9b 02 	lds	r24, 0x029B
    2056:	90 91 9c 02 	lds	r25, 0x029C
    205a:	90 93 65 02 	sts	0x0265, r25
    205e:	80 93 64 02 	sts	0x0264, r24
	}
}
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	08 95       	ret

0000206c <pickNode>:
	lcd("pickRight");
	else
	lcd("pickLeft");
}
void pickNode(int armNo, int side)
{
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	8c 01       	movw	r16, r24
    2076:	eb 01       	movw	r28, r22
	if(flag==1)
    2078:	80 91 68 02 	lds	r24, 0x0268
    207c:	90 91 69 02 	lds	r25, 0x0269
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	59 f4       	brne	.+22     	; 0x209a <pickNode+0x2e>
	{
		if(dir==0 || dir==2)
    2084:	80 91 62 02 	lds	r24, 0x0262
    2088:	90 91 63 02 	lds	r25, 0x0263
    208c:	8d 7f       	andi	r24, 0xFD	; 253
    208e:	89 2b       	or	r24, r25
    2090:	21 f4       	brne	.+8      	; 0x209a <pickNode+0x2e>
		{
			back_mm(30);
    2092:	8e e1       	ldi	r24, 0x1E	; 30
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 bb 04 	call	0x976	; 0x976 <back_mm>
			flag==0;	
		}
	}
	
	arm[armNo] = term[ct][side];
    209a:	f8 01       	movw	r30, r16
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ed 53       	subi	r30, 0x3D	; 61
    20a2:	fd 4f       	sbci	r31, 0xFD	; 253
    20a4:	a0 91 9b 02 	lds	r26, 0x029B
    20a8:	b0 91 9c 02 	lds	r27, 0x029C
    20ac:	aa 0f       	add	r26, r26
    20ae:	bb 1f       	adc	r27, r27
    20b0:	ac 0f       	add	r26, r28
    20b2:	bd 1f       	adc	r27, r29
    20b4:	aa 0f       	add	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	a1 56       	subi	r26, 0x61	; 97
    20ba:	bd 4f       	sbci	r27, 0xFD	; 253
    20bc:	8d 91       	ld	r24, X+
    20be:	9c 91       	ld	r25, X
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
	position(armNo,side);
    20c4:	be 01       	movw	r22, r28
    20c6:	c8 01       	movw	r24, r16
    20c8:	f2 de       	rcall	.-540    	; 0x1eae <position>
	pick(armNo);
    20ca:	c8 01       	movw	r24, r16
    20cc:	8b d9       	rcall	.-3306   	; 0x13e4 <pick>
	term[ct][side] = -1;
    20ce:	80 91 9b 02 	lds	r24, 0x029B
    20d2:	90 91 9c 02 	lds	r25, 0x029C
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	c8 0f       	add	r28, r24
    20dc:	d9 1f       	adc	r29, r25
    20de:	cc 0f       	add	r28, r28
    20e0:	dd 1f       	adc	r29, r29
    20e2:	c1 56       	subi	r28, 0x61	; 97
    20e4:	dd 4f       	sbci	r29, 0xFD	; 253
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	9f ef       	ldi	r25, 0xFF	; 255
    20ea:	99 83       	std	Y+1, r25	; 0x01
    20ec:	88 83       	st	Y, r24
	//..printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	08 95       	ret

000020f8 <pickup>:
	sort[sortNo] = -1;
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
	lcd("exit picksort");
}
void pickup()
{
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
	
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2104:	20 91 9b 02 	lds	r18, 0x029B
    2108:	30 91 9c 02 	lds	r19, 0x029C
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	30 f4       	brcc	.+12     	; 0x211e <pickup+0x26>
    2112:	80 91 62 02 	lds	r24, 0x0262
    2116:	90 91 63 02 	lds	r25, 0x0263
    211a:	02 97       	sbiw	r24, 0x02	; 2
    211c:	79 f0       	breq	.+30     	; 0x213c <pickup+0x44>
    211e:	c9 01       	movw	r24, r18
    2120:	02 97       	sbiw	r24, 0x02	; 2
    2122:	02 97       	sbiw	r24, 0x02	; 2
    2124:	80 f4       	brcc	.+32     	; 0x2146 <pickup+0x4e>
    2126:	80 91 62 02 	lds	r24, 0x0262
    212a:	90 91 63 02 	lds	r25, 0x0263
    212e:	89 2b       	or	r24, r25
    2130:	79 f0       	breq	.+30     	; 0x2150 <pickup+0x58>
	lcd("exit picksort");
}
void pickup()
{
	
	int arm0 = 0, arm1 = 1;
    2132:	c1 e0       	ldi	r28, 0x01	; 1
    2134:	d0 e0       	ldi	r29, 0x00	; 0
    2136:	00 e0       	ldi	r16, 0x00	; 0
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	0e c0       	rjmp	.+28     	; 0x2158 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    213c:	c0 e0       	ldi	r28, 0x00	; 0
    213e:	d0 e0       	ldi	r29, 0x00	; 0
{
	
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2140:	01 e0       	ldi	r16, 0x01	; 1
    2142:	10 e0       	ldi	r17, 0x00	; 0
    2144:	09 c0       	rjmp	.+18     	; 0x2158 <pickup+0x60>
	lcd("exit picksort");
}
void pickup()
{
	
	int arm0 = 0, arm1 = 1;
    2146:	c1 e0       	ldi	r28, 0x01	; 1
    2148:	d0 e0       	ldi	r29, 0x00	; 0
    214a:	00 e0       	ldi	r16, 0x00	; 0
    214c:	10 e0       	ldi	r17, 0x00	; 0
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2150:	c0 e0       	ldi	r28, 0x00	; 0
    2152:	d0 e0       	ldi	r29, 0x00	; 0
{
	
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2154:	01 e0       	ldi	r16, 0x01	; 1
    2156:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    2158:	f9 01       	movw	r30, r18
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e8 58       	subi	r30, 0x88	; 136
    2160:	fd 4f       	sbci	r31, 0xFD	; 253
    2162:	40 81       	ld	r20, Z
    2164:	51 81       	ldd	r21, Z+1	; 0x01
    2166:	45 2b       	or	r20, r21
    2168:	09 f0       	breq	.+2      	; 0x216c <pickup+0x74>
    216a:	24 c2       	rjmp	.+1096   	; 0x25b4 <__stack+0x3b5>
	{
		if (term[ct][0] == -2)
    216c:	f9 01       	movw	r30, r18
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e1 56       	subi	r30, 0x61	; 97
    2178:	fd 4f       	sbci	r31, 0xFD	; 253
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	02 96       	adiw	r24, 0x02	; 2
    2180:	19 f4       	brne	.+6      	; 0x2188 <pickup+0x90>
		{
			terminalCheck1();
    2182:	ea dd       	rcall	.-1068   	; 0x1d58 <terminalCheck1>
			terminalCheck2();
    2184:	89 d8       	rcall	.-3822   	; 0x1298 <terminalCheck2>
    2186:	01 c0       	rjmp	.+2      	; 0x218a <pickup+0x92>
		}
		else
		terminalCheck2();
    2188:	87 d8       	rcall	.-3826   	; 0x1298 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    218a:	20 91 9b 02 	lds	r18, 0x029B
    218e:	30 91 9c 02 	lds	r19, 0x029C
    2192:	f9 01       	movw	r30, r18
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	e1 56       	subi	r30, 0x61	; 97
    219e:	fd 4f       	sbci	r31, 0xFD	; 253
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	f9 01       	movw	r30, r18
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	e1 55       	subi	r30, 0x51	; 81
    21ac:	fd 4f       	sbci	r31, 0xFD	; 253
    21ae:	40 81       	ld	r20, Z
    21b0:	51 81       	ldd	r21, Z+1	; 0x01
    21b2:	84 17       	cp	r24, r20
    21b4:	95 07       	cpc	r25, r21
    21b6:	21 f0       	breq	.+8      	; 0x21c0 <pickup+0xc8>
    21b8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ba:	6f ef       	ldi	r22, 0xFF	; 255
    21bc:	96 07       	cpc	r25, r22
    21be:	89 f4       	brne	.+34     	; 0x21e2 <pickup+0xea>
    21c0:	f9 01       	movw	r30, r18
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	e1 56       	subi	r30, 0x61	; 97
    21cc:	fd 4f       	sbci	r31, 0xFD	; 253
    21ce:	62 81       	ldd	r22, Z+2	; 0x02
    21d0:	73 81       	ldd	r23, Z+3	; 0x03
    21d2:	46 17       	cp	r20, r22
    21d4:	57 07       	cpc	r21, r23
    21d6:	09 f4       	brne	.+2      	; 0x21da <pickup+0xe2>
    21d8:	ed c1       	rjmp	.+986    	; 0x25b4 <__stack+0x3b5>
    21da:	6f 3f       	cpi	r22, 0xFF	; 255
    21dc:	7f 4f       	sbci	r23, 0xFF	; 255
    21de:	09 f4       	brne	.+2      	; 0x21e2 <pickup+0xea>
    21e0:	e9 c1       	rjmp	.+978    	; 0x25b4 <__stack+0x3b5>
		{
			if (armCount == 2)
    21e2:	60 91 02 02 	lds	r22, 0x0202
    21e6:	70 91 03 02 	lds	r23, 0x0203
    21ea:	62 30       	cpi	r22, 0x02	; 2
    21ec:	71 05       	cpc	r23, r1
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <pickup+0xfa>
    21f0:	af c0       	rjmp	.+350    	; 0x2350 <__stack+0x151>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    21f2:	e0 91 bf 02 	lds	r30, 0x02BF
    21f6:	f0 91 c0 02 	lds	r31, 0x02C0
    21fa:	df 01       	movw	r26, r30
    21fc:	aa 0f       	add	r26, r26
    21fe:	bb 1f       	adc	r27, r27
    2200:	a1 55       	subi	r26, 0x51	; 81
    2202:	bd 4f       	sbci	r27, 0xFD	; 253
    2204:	6d 91       	ld	r22, X+
    2206:	7c 91       	ld	r23, X
    2208:	86 17       	cp	r24, r22
    220a:	97 07       	cpc	r25, r23
    220c:	79 f0       	breq	.+30     	; 0x222c <__stack+0x2d>
    220e:	d9 01       	movw	r26, r18
    2210:	aa 0f       	add	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	aa 0f       	add	r26, r26
    2216:	bb 1f       	adc	r27, r27
    2218:	a1 56       	subi	r26, 0x61	; 97
    221a:	bd 4f       	sbci	r27, 0xFD	; 253
    221c:	12 96       	adiw	r26, 0x02	; 2
    221e:	ed 90       	ld	r14, X+
    2220:	fc 90       	ld	r15, X
    2222:	13 97       	sbiw	r26, 0x03	; 3
    2224:	6e 15       	cp	r22, r14
    2226:	7f 05       	cpc	r23, r15
    2228:	59 f4       	brne	.+22     	; 0x2240 <__stack+0x41>
    222a:	05 c0       	rjmp	.+10     	; 0x2236 <__stack+0x37>
				{
					if (term[ct][0] == color[adj])
					pickNode(arm0, 0);
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	c8 01       	movw	r24, r16
    2232:	1c df       	rcall	.-456    	; 0x206c <pickNode>
    2234:	8d c0       	rjmp	.+282    	; 0x2350 <__stack+0x151>
					else	pickNode(arm1, 1);
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	ce 01       	movw	r24, r28
    223c:	17 df       	rcall	.-466    	; 0x206c <pickNode>
    223e:	88 c0       	rjmp	.+272    	; 0x2350 <__stack+0x151>
				}
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    2240:	4e 15       	cp	r20, r14
    2242:	5f 05       	cpc	r21, r15
    2244:	09 f4       	brne	.+2      	; 0x2248 <__stack+0x49>
    2246:	4e c0       	rjmp	.+156    	; 0x22e4 <__stack+0xe5>
    2248:	ef 20       	and	r14, r15
    224a:	e0 94       	com	r14
    224c:	09 f4       	brne	.+2      	; 0x2250 <__stack+0x51>
    224e:	4a c0       	rjmp	.+148    	; 0x22e4 <__stack+0xe5>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    2250:	84 17       	cp	r24, r20
    2252:	95 07       	cpc	r25, r21
    2254:	69 f0       	breq	.+26     	; 0x2270 <__stack+0x71>
    2256:	8f 3f       	cpi	r24, 0xFF	; 255
    2258:	af ef       	ldi	r26, 0xFF	; 255
    225a:	9a 07       	cpc	r25, r26
    225c:	49 f0       	breq	.+18     	; 0x2270 <__stack+0x71>
					{
						pickNode(arm1, 1);
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	ce 01       	movw	r24, r28
    2264:	03 df       	rcall	.-506    	; 0x206c <pickNode>
						pickNode(arm0, 0);
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	c8 01       	movw	r24, r16
    226c:	ff de       	rcall	.-514    	; 0x206c <pickNode>
    226e:	70 c0       	rjmp	.+224    	; 0x2350 <__stack+0x151>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    2270:	21 70       	andi	r18, 0x01	; 1
    2272:	30 78       	andi	r19, 0x80	; 128
    2274:	33 23       	and	r19, r19
    2276:	34 f4       	brge	.+12     	; 0x2284 <__stack+0x85>
    2278:	21 50       	subi	r18, 0x01	; 1
    227a:	31 09       	sbc	r19, r1
    227c:	2e 6f       	ori	r18, 0xFE	; 254
    227e:	3f 6f       	ori	r19, 0xFF	; 255
    2280:	2f 5f       	subi	r18, 0xFF	; 255
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	d9 01       	movw	r26, r18
    2286:	aa 0f       	add	r26, r26
    2288:	bb 1f       	adc	r27, r27
    228a:	a9 56       	subi	r26, 0x69	; 105
    228c:	bd 4f       	sbci	r27, 0xFD	; 253
    228e:	2d 91       	ld	r18, X+
    2290:	3c 91       	ld	r19, X
    2292:	2f 3f       	cpi	r18, 0xFF	; 255
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
    2296:	09 f1       	breq	.+66     	; 0x22da <__stack+0xdb>
    2298:	df 01       	movw	r26, r30
    229a:	aa 0f       	add	r26, r26
    229c:	bb 1f       	adc	r27, r27
    229e:	aa 0f       	add	r26, r26
    22a0:	bb 1f       	adc	r27, r27
    22a2:	a1 56       	subi	r26, 0x61	; 97
    22a4:	bd 4f       	sbci	r27, 0xFD	; 253
    22a6:	2d 91       	ld	r18, X+
    22a8:	3c 91       	ld	r19, X
    22aa:	62 17       	cp	r22, r18
    22ac:	73 07       	cpc	r23, r19
    22ae:	a9 f0       	breq	.+42     	; 0x22da <__stack+0xdb>
    22b0:	2f 3f       	cpi	r18, 0xFF	; 255
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	91 f0       	breq	.+36     	; 0x22da <__stack+0xdb>
    22b6:	ee 0f       	add	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	e1 56       	subi	r30, 0x61	; 97
    22c0:	fd 4f       	sbci	r31, 0xFD	; 253
    22c2:	22 81       	ldd	r18, Z+2	; 0x02
    22c4:	33 81       	ldd	r19, Z+3	; 0x03
    22c6:	62 17       	cp	r22, r18
    22c8:	73 07       	cpc	r23, r19
    22ca:	39 f0       	breq	.+14     	; 0x22da <__stack+0xdb>
    22cc:	2f 3f       	cpi	r18, 0xFF	; 255
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	21 f0       	breq	.+8      	; 0x22da <__stack+0xdb>
    22d2:	84 17       	cp	r24, r20
    22d4:	95 07       	cpc	r25, r21
    22d6:	09 f0       	breq	.+2      	; 0x22da <__stack+0xdb>
    22d8:	6d c1       	rjmp	.+730    	; 0x25b4 <__stack+0x3b5>
					pickNode(arm1, 1);
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	ce 01       	movw	r24, r28
    22e0:	c5 de       	rcall	.-630    	; 0x206c <pickNode>
    22e2:	36 c0       	rjmp	.+108    	; 0x2350 <__stack+0x151>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    22e4:	84 17       	cp	r24, r20
    22e6:	95 07       	cpc	r25, r21
    22e8:	09 f4       	brne	.+2      	; 0x22ec <__stack+0xed>
    22ea:	64 c1       	rjmp	.+712    	; 0x25b4 <__stack+0x3b5>
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <__stack+0xf3>
    22f0:	61 c1       	rjmp	.+706    	; 0x25b4 <__stack+0x3b5>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    22f2:	21 70       	andi	r18, 0x01	; 1
    22f4:	30 78       	andi	r19, 0x80	; 128
    22f6:	33 23       	and	r19, r19
    22f8:	34 f4       	brge	.+12     	; 0x2306 <__stack+0x107>
    22fa:	21 50       	subi	r18, 0x01	; 1
    22fc:	31 09       	sbc	r19, r1
    22fe:	2e 6f       	ori	r18, 0xFE	; 254
    2300:	3f 6f       	ori	r19, 0xFF	; 255
    2302:	2f 5f       	subi	r18, 0xFF	; 255
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	d9 01       	movw	r26, r18
    2308:	aa 0f       	add	r26, r26
    230a:	bb 1f       	adc	r27, r27
    230c:	a9 56       	subi	r26, 0x69	; 105
    230e:	bd 4f       	sbci	r27, 0xFD	; 253
    2310:	8d 91       	ld	r24, X+
    2312:	9c 91       	ld	r25, X
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	c1 f0       	breq	.+48     	; 0x2348 <__stack+0x149>
    2318:	df 01       	movw	r26, r30
    231a:	aa 0f       	add	r26, r26
    231c:	bb 1f       	adc	r27, r27
    231e:	aa 0f       	add	r26, r26
    2320:	bb 1f       	adc	r27, r27
    2322:	a1 56       	subi	r26, 0x61	; 97
    2324:	bd 4f       	sbci	r27, 0xFD	; 253
    2326:	8d 91       	ld	r24, X+
    2328:	9c 91       	ld	r25, X
    232a:	11 97       	sbiw	r26, 0x01	; 1
    232c:	68 17       	cp	r22, r24
    232e:	79 07       	cpc	r23, r25
    2330:	59 f0       	breq	.+22     	; 0x2348 <__stack+0x149>
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	49 f0       	breq	.+18     	; 0x2348 <__stack+0x149>
    2336:	fd 01       	movw	r30, r26
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	68 17       	cp	r22, r24
    233e:	79 07       	cpc	r23, r25
    2340:	19 f0       	breq	.+6      	; 0x2348 <__stack+0x149>
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	09 f0       	breq	.+2      	; 0x2348 <__stack+0x149>
    2346:	36 c1       	rjmp	.+620    	; 0x25b4 <__stack+0x3b5>
					pickNode(arm0, 0);
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	c8 01       	movw	r24, r16
    234e:	8e de       	rcall	.-740    	; 0x206c <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
				pickNode(arm0, 0);

			}
			if (armCount == 1)
    2350:	80 91 02 02 	lds	r24, 0x0202
    2354:	90 91 03 02 	lds	r25, 0x0203
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	09 f0       	breq	.+2      	; 0x235e <__stack+0x15f>
    235c:	2b c1       	rjmp	.+598    	; 0x25b4 <__stack+0x3b5>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    235e:	f8 01       	movw	r30, r16
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	ed 53       	subi	r30, 0x3D	; 61
    2366:	fd 4f       	sbci	r31, 0xFD	; 253
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	09 f4       	brne	.+2      	; 0x2372 <__stack+0x173>
				a1 = arm0;
    2370:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    2372:	be 01       	movw	r22, r28
    2374:	6f 5f       	subi	r22, 0xFF	; 255
    2376:	7f 4f       	sbci	r23, 0xFF	; 255
    2378:	61 70       	andi	r22, 0x01	; 1
    237a:	70 78       	andi	r23, 0x80	; 128
    237c:	77 23       	and	r23, r23
    237e:	34 f4       	brge	.+12     	; 0x238c <__stack+0x18d>
    2380:	61 50       	subi	r22, 0x01	; 1
    2382:	71 09       	sbc	r23, r1
    2384:	6e 6f       	ori	r22, 0xFE	; 254
    2386:	7f 6f       	ori	r23, 0xFF	; 255
    2388:	6f 5f       	subi	r22, 0xFF	; 255
    238a:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    238c:	80 91 9b 02 	lds	r24, 0x029B
    2390:	90 91 9c 02 	lds	r25, 0x029C
    2394:	9c 01       	movw	r18, r24
    2396:	21 70       	andi	r18, 0x01	; 1
    2398:	30 78       	andi	r19, 0x80	; 128
    239a:	33 23       	and	r19, r19
    239c:	34 f4       	brge	.+12     	; 0x23aa <__stack+0x1ab>
    239e:	21 50       	subi	r18, 0x01	; 1
    23a0:	31 09       	sbc	r19, r1
    23a2:	2e 6f       	ori	r18, 0xFE	; 254
    23a4:	3f 6f       	ori	r19, 0xFF	; 255
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	f9 01       	movw	r30, r18
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	e9 56       	subi	r30, 0x69	; 105
    23b2:	fd 4f       	sbci	r31, 0xFD	; 253
    23b4:	20 81       	ld	r18, Z
    23b6:	31 81       	ldd	r19, Z+1	; 0x01
    23b8:	2f 3f       	cpi	r18, 0xFF	; 255
    23ba:	af ef       	ldi	r26, 0xFF	; 255
    23bc:	3a 07       	cpc	r19, r26
    23be:	d9 f5       	brne	.+118    	; 0x2436 <__stack+0x237>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    23c0:	fc 01       	movw	r30, r24
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	ec 0f       	add	r30, r28
    23c8:	fd 1f       	adc	r31, r29
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	e1 56       	subi	r30, 0x61	; 97
    23d0:	fd 4f       	sbci	r31, 0xFD	; 253
    23d2:	20 81       	ld	r18, Z
    23d4:	31 81       	ldd	r19, Z+1	; 0x01
    23d6:	2f 3f       	cpi	r18, 0xFF	; 255
    23d8:	ef ef       	ldi	r30, 0xFF	; 255
    23da:	3e 07       	cpc	r19, r30
    23dc:	71 f0       	breq	.+28     	; 0x23fa <__stack+0x1fb>
    23de:	fc 01       	movw	r30, r24
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	e1 55       	subi	r30, 0x51	; 81
    23e6:	fd 4f       	sbci	r31, 0xFD	; 253
    23e8:	40 81       	ld	r20, Z
    23ea:	51 81       	ldd	r21, Z+1	; 0x01
    23ec:	24 17       	cp	r18, r20
    23ee:	35 07       	cpc	r19, r21
    23f0:	21 f0       	breq	.+8      	; 0x23fa <__stack+0x1fb>
					pickNode(a1, a1);
    23f2:	be 01       	movw	r22, r28
    23f4:	ce 01       	movw	r24, r28
    23f6:	3a de       	rcall	.-908    	; 0x206c <pickNode>
    23f8:	dd c0       	rjmp	.+442    	; 0x25b4 <__stack+0x3b5>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    23fa:	fc 01       	movw	r30, r24
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	e6 0f       	add	r30, r22
    2402:	f7 1f       	adc	r31, r23
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	e1 56       	subi	r30, 0x61	; 97
    240a:	fd 4f       	sbci	r31, 0xFD	; 253
    240c:	20 81       	ld	r18, Z
    240e:	31 81       	ldd	r19, Z+1	; 0x01
    2410:	2f 3f       	cpi	r18, 0xFF	; 255
    2412:	4f ef       	ldi	r20, 0xFF	; 255
    2414:	34 07       	cpc	r19, r20
    2416:	09 f4       	brne	.+2      	; 0x241a <__stack+0x21b>
    2418:	cd c0       	rjmp	.+410    	; 0x25b4 <__stack+0x3b5>
    241a:	fc 01       	movw	r30, r24
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	e1 55       	subi	r30, 0x51	; 81
    2422:	fd 4f       	sbci	r31, 0xFD	; 253
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	28 17       	cp	r18, r24
    242a:	39 07       	cpc	r19, r25
    242c:	09 f4       	brne	.+2      	; 0x2430 <__stack+0x231>
    242e:	c2 c0       	rjmp	.+388    	; 0x25b4 <__stack+0x3b5>
					pickNode(a1, a2);
    2430:	ce 01       	movw	r24, r28
    2432:	1c de       	rcall	.-968    	; 0x206c <pickNode>
    2434:	bf c0       	rjmp	.+382    	; 0x25b4 <__stack+0x3b5>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    2436:	40 91 bf 02 	lds	r20, 0x02BF
    243a:	50 91 c0 02 	lds	r21, 0x02C0
    243e:	fa 01       	movw	r30, r20
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	e1 55       	subi	r30, 0x51	; 81
    2446:	fd 4f       	sbci	r31, 0xFD	; 253
    2448:	01 90       	ld	r0, Z+
    244a:	f0 81       	ld	r31, Z
    244c:	e0 2d       	mov	r30, r0
    244e:	dc 01       	movw	r26, r24
    2450:	aa 0f       	add	r26, r26
    2452:	bb 1f       	adc	r27, r27
    2454:	aa 0f       	add	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	a1 56       	subi	r26, 0x61	; 97
    245a:	bd 4f       	sbci	r27, 0xFD	; 253
    245c:	0d 90       	ld	r0, X+
    245e:	bc 91       	ld	r27, X
    2460:	a0 2d       	mov	r26, r0
    2462:	ae 17       	cp	r26, r30
    2464:	bf 07       	cpc	r27, r31
    2466:	71 f0       	breq	.+28     	; 0x2484 <__stack+0x285>
    2468:	dc 01       	movw	r26, r24
    246a:	aa 0f       	add	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	aa 0f       	add	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	a1 56       	subi	r26, 0x61	; 97
    2474:	bd 4f       	sbci	r27, 0xFD	; 253
    2476:	12 96       	adiw	r26, 0x02	; 2
    2478:	0d 90       	ld	r0, X+
    247a:	bc 91       	ld	r27, X
    247c:	a0 2d       	mov	r26, r0
    247e:	ea 17       	cp	r30, r26
    2480:	fb 07       	cpc	r31, r27
    2482:	d9 f5       	brne	.+118    	; 0x24fa <__stack+0x2fb>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    2484:	da 01       	movw	r26, r20
    2486:	aa 0f       	add	r26, r26
    2488:	bb 1f       	adc	r27, r27
    248a:	a8 58       	subi	r26, 0x88	; 136
    248c:	bd 4f       	sbci	r27, 0xFD	; 253
    248e:	2d 91       	ld	r18, X+
    2490:	3c 91       	ld	r19, X
    2492:	21 30       	cpi	r18, 0x01	; 1
    2494:	31 05       	cpc	r19, r1
    2496:	09 f0       	breq	.+2      	; 0x249a <__stack+0x29b>
    2498:	8d c0       	rjmp	.+282    	; 0x25b4 <__stack+0x3b5>
    249a:	da 01       	movw	r26, r20
    249c:	aa 0f       	add	r26, r26
    249e:	bb 1f       	adc	r27, r27
    24a0:	aa 0f       	add	r26, r26
    24a2:	bb 1f       	adc	r27, r27
    24a4:	a1 56       	subi	r26, 0x61	; 97
    24a6:	bd 4f       	sbci	r27, 0xFD	; 253
    24a8:	2d 91       	ld	r18, X+
    24aa:	3c 91       	ld	r19, X
    24ac:	2f 3f       	cpi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	79 f0       	breq	.+30     	; 0x24d0 <__stack+0x2d1>
    24b2:	da 01       	movw	r26, r20
    24b4:	aa 0f       	add	r26, r26
    24b6:	bb 1f       	adc	r27, r27
    24b8:	aa 0f       	add	r26, r26
    24ba:	bb 1f       	adc	r27, r27
    24bc:	a1 56       	subi	r26, 0x61	; 97
    24be:	bd 4f       	sbci	r27, 0xFD	; 253
    24c0:	12 96       	adiw	r26, 0x02	; 2
    24c2:	2d 91       	ld	r18, X+
    24c4:	3c 91       	ld	r19, X
    24c6:	13 97       	sbiw	r26, 0x03	; 3
    24c8:	2f 3f       	cpi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <__stack+0x2d1>
    24ce:	72 c0       	rjmp	.+228    	; 0x25b4 <__stack+0x3b5>
						{
							if (term[ct][a1] == color[adj])
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	8c 0f       	add	r24, r28
    24d6:	9d 1f       	adc	r25, r29
    24d8:	dc 01       	movw	r26, r24
    24da:	aa 0f       	add	r26, r26
    24dc:	bb 1f       	adc	r27, r27
    24de:	a1 56       	subi	r26, 0x61	; 97
    24e0:	bd 4f       	sbci	r27, 0xFD	; 253
    24e2:	8d 91       	ld	r24, X+
    24e4:	9c 91       	ld	r25, X
    24e6:	e8 17       	cp	r30, r24
    24e8:	f9 07       	cpc	r31, r25
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <__stack+0x2f5>
							pickNode(a1, a1);
    24ec:	be 01       	movw	r22, r28
    24ee:	ce 01       	movw	r24, r28
    24f0:	bd dd       	rcall	.-1158   	; 0x206c <pickNode>
    24f2:	60 c0       	rjmp	.+192    	; 0x25b4 <__stack+0x3b5>
							else pickNode(a1, a2);
    24f4:	ce 01       	movw	r24, r28
    24f6:	ba dd       	rcall	.-1164   	; 0x206c <pickNode>
    24f8:	5d c0       	rjmp	.+186    	; 0x25b4 <__stack+0x3b5>
						}
					}
					else
					{
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    24fa:	dc 01       	movw	r26, r24
    24fc:	aa 0f       	add	r26, r26
    24fe:	bb 1f       	adc	r27, r27
    2500:	a1 55       	subi	r26, 0x51	; 81
    2502:	bd 4f       	sbci	r27, 0xFD	; 253
    2504:	0d 90       	ld	r0, X+
    2506:	bc 91       	ld	r27, X
    2508:	a0 2d       	mov	r26, r0
    250a:	2a 17       	cp	r18, r26
    250c:	3b 07       	cpc	r19, r27
    250e:	09 f4       	brne	.+2      	; 0x2512 <__stack+0x313>
    2510:	51 c0       	rjmp	.+162    	; 0x25b4 <__stack+0x3b5>
    2512:	2e 17       	cp	r18, r30
    2514:	3f 07       	cpc	r19, r31
    2516:	09 f4       	brne	.+2      	; 0x251a <__stack+0x31b>
    2518:	4d c0       	rjmp	.+154    	; 0x25b4 <__stack+0x3b5>
						{
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    251a:	fa 01       	movw	r30, r20
    251c:	ee 0f       	add	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	e8 58       	subi	r30, 0x88	; 136
    2522:	fd 4f       	sbci	r31, 0xFD	; 253
    2524:	20 81       	ld	r18, Z
    2526:	31 81       	ldd	r19, Z+1	; 0x01
    2528:	21 30       	cpi	r18, 0x01	; 1
    252a:	31 05       	cpc	r19, r1
    252c:	09 f0       	breq	.+2      	; 0x2530 <__stack+0x331>
    252e:	42 c0       	rjmp	.+132    	; 0x25b4 <__stack+0x3b5>
    2530:	fa 01       	movw	r30, r20
    2532:	ee 0f       	add	r30, r30
    2534:	ff 1f       	adc	r31, r31
    2536:	ee 0f       	add	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	e1 56       	subi	r30, 0x61	; 97
    253c:	fd 4f       	sbci	r31, 0xFD	; 253
    253e:	20 81       	ld	r18, Z
    2540:	31 81       	ldd	r19, Z+1	; 0x01
    2542:	a2 17       	cp	r26, r18
    2544:	b3 07       	cpc	r27, r19
    2546:	b1 f1       	breq	.+108    	; 0x25b4 <__stack+0x3b5>
    2548:	fa 01       	movw	r30, r20
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	e1 56       	subi	r30, 0x61	; 97
    2554:	fd 4f       	sbci	r31, 0xFD	; 253
    2556:	22 81       	ldd	r18, Z+2	; 0x02
    2558:	33 81       	ldd	r19, Z+3	; 0x03
    255a:	a2 17       	cp	r26, r18
    255c:	b3 07       	cpc	r27, r19
    255e:	51 f1       	breq	.+84     	; 0x25b4 <__stack+0x3b5>
							{
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    2560:	fc 01       	movw	r30, r24
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	ec 0f       	add	r30, r28
    2568:	fd 1f       	adc	r31, r29
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	e1 56       	subi	r30, 0x61	; 97
    2570:	fd 4f       	sbci	r31, 0xFD	; 253
    2572:	20 81       	ld	r18, Z
    2574:	31 81       	ldd	r19, Z+1	; 0x01
    2576:	2f 3f       	cpi	r18, 0xFF	; 255
    2578:	ef ef       	ldi	r30, 0xFF	; 255
    257a:	3e 07       	cpc	r19, r30
    257c:	39 f0       	breq	.+14     	; 0x258c <__stack+0x38d>
    257e:	a2 17       	cp	r26, r18
    2580:	b3 07       	cpc	r27, r19
    2582:	21 f0       	breq	.+8      	; 0x258c <__stack+0x38d>
								pickNode(a1, a1);
    2584:	be 01       	movw	r22, r28
    2586:	ce 01       	movw	r24, r28
    2588:	71 dd       	rcall	.-1310   	; 0x206c <pickNode>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <__stack+0x3b5>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	86 0f       	add	r24, r22
    2592:	97 1f       	adc	r25, r23
    2594:	fc 01       	movw	r30, r24
    2596:	ee 0f       	add	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	e1 56       	subi	r30, 0x61	; 97
    259c:	fd 4f       	sbci	r31, 0xFD	; 253
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	8f 3f       	cpi	r24, 0xFF	; 255
    25a4:	2f ef       	ldi	r18, 0xFF	; 255
    25a6:	92 07       	cpc	r25, r18
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <__stack+0x3b5>
    25aa:	a8 17       	cp	r26, r24
    25ac:	b9 07       	cpc	r27, r25
    25ae:	11 f0       	breq	.+4      	; 0x25b4 <__stack+0x3b5>
								pickNode(a1, a2);
    25b0:	ce 01       	movw	r24, r28
    25b2:	5c dd       	rcall	.-1352   	; 0x206c <pickNode>
					}
				}
			}
		}
	}
}
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	ff 90       	pop	r15
    25be:	ef 90       	pop	r14
    25c0:	08 95       	ret

000025c2 <dropPickup>:
	arm[armNo] = -1;
	//..printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}

void dropPickup(int a1)
{
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    25c6:	9c 01       	movw	r18, r24
    25c8:	2f 5f       	subi	r18, 0xFF	; 255
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	21 70       	andi	r18, 0x01	; 1
    25ce:	30 78       	andi	r19, 0x80	; 128
    25d0:	33 23       	and	r19, r19
    25d2:	34 f4       	brge	.+12     	; 0x25e0 <dropPickup+0x1e>
    25d4:	21 50       	subi	r18, 0x01	; 1
    25d6:	31 09       	sbc	r19, r1
    25d8:	2e 6f       	ori	r18, 0xFE	; 254
    25da:	3f 6f       	ori	r19, 0xFF	; 255
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	d2 2f       	mov	r29, r18
    25e2:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    25e4:	e0 91 9b 02 	lds	r30, 0x029B
    25e8:	f0 91 9c 02 	lds	r31, 0x029C
    25ec:	af 01       	movw	r20, r30
    25ee:	44 0f       	add	r20, r20
    25f0:	55 1f       	adc	r21, r21
    25f2:	24 0f       	add	r18, r20
    25f4:	35 1f       	adc	r19, r21
    25f6:	d9 01       	movw	r26, r18
    25f8:	aa 0f       	add	r26, r26
    25fa:	bb 1f       	adc	r27, r27
    25fc:	a1 56       	subi	r26, 0x61	; 97
    25fe:	bd 4f       	sbci	r27, 0xFD	; 253
    2600:	2d 91       	ld	r18, X+
    2602:	3c 91       	ld	r19, X
    2604:	da 01       	movw	r26, r20
    2606:	a1 55       	subi	r26, 0x51	; 81
    2608:	bd 4f       	sbci	r27, 0xFD	; 253
    260a:	4d 91       	ld	r20, X+
    260c:	5c 91       	ld	r21, X
    260e:	24 17       	cp	r18, r20
    2610:	35 07       	cpc	r19, r21
    2612:	69 f0       	breq	.+26     	; 0x262e <dropPickup+0x6c>
    2614:	a0 91 bf 02 	lds	r26, 0x02BF
    2618:	b0 91 c0 02 	lds	r27, 0x02C0
    261c:	aa 0f       	add	r26, r26
    261e:	bb 1f       	adc	r27, r27
    2620:	a1 55       	subi	r26, 0x51	; 81
    2622:	bd 4f       	sbci	r27, 0xFD	; 253
    2624:	6d 91       	ld	r22, X+
    2626:	7c 91       	ld	r23, X
    2628:	26 17       	cp	r18, r22
    262a:	37 07       	cpc	r19, r23
    262c:	a9 f0       	breq	.+42     	; 0x2658 <dropPickup+0x96>
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	e1 56       	subi	r30, 0x61	; 97
    263c:	fd 4f       	sbci	r31, 0xFD	; 253
    263e:	01 90       	ld	r0, Z+
    2640:	f0 81       	ld	r31, Z
    2642:	e0 2d       	mov	r30, r0
    2644:	4e 17       	cp	r20, r30
    2646:	5f 07       	cpc	r21, r31
    2648:	39 f0       	breq	.+14     	; 0x2658 <dropPickup+0x96>
    264a:	31 96       	adiw	r30, 0x01	; 1
    264c:	29 f0       	breq	.+10     	; 0x2658 <dropPickup+0x96>
	pickNode(a2, a1);
    264e:	bc 01       	movw	r22, r24
    2650:	8d 2f       	mov	r24, r29
    2652:	9c 2f       	mov	r25, r28
    2654:	0b dd       	rcall	.-1514   	; 0x206c <pickNode>
    2656:	0b c0       	rjmp	.+22     	; 0x266e <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    2658:	24 17       	cp	r18, r20
    265a:	35 07       	cpc	r19, r21
    265c:	41 f0       	breq	.+16     	; 0x266e <dropPickup+0xac>
    265e:	2f 3f       	cpi	r18, 0xFF	; 255
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	29 f0       	breq	.+10     	; 0x266e <dropPickup+0xac>
	pickNode(a2, a2);
    2664:	6d 2f       	mov	r22, r29
    2666:	7c 2f       	mov	r23, r28
    2668:	8d 2f       	mov	r24, r29
    266a:	9c 2f       	mov	r25, r28
    266c:	ff dc       	rcall	.-1538   	; 0x206c <pickNode>
}
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	08 95       	ret

00002674 <nodeDrop>:
	lcd("dropRight");
	else
	lcd("dropLeft");
}
void nodeDrop(int armNo, int side)
{
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	ec 01       	movw	r28, r24
    2682:	7b 01       	movw	r14, r22
	
	if(flag==1)
    2684:	80 91 68 02 	lds	r24, 0x0268
    2688:	90 91 69 02 	lds	r25, 0x0269
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	59 f4       	brne	.+22     	; 0x26a6 <nodeDrop+0x32>
	{
		if(dir==0 || dir==2)
    2690:	80 91 62 02 	lds	r24, 0x0262
    2694:	90 91 63 02 	lds	r25, 0x0263
    2698:	8d 7f       	andi	r24, 0xFD	; 253
    269a:	89 2b       	or	r24, r25
    269c:	21 f4       	brne	.+8      	; 0x26a6 <nodeDrop+0x32>
		{
			back_mm(30);
    269e:	8e e1       	ldi	r24, 0x1E	; 30
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 bb 04 	call	0x976	; 0x976 <back_mm>
			flag==0;
		}
	}
	term[ct][side] = arm[armNo];
    26a6:	e0 91 9b 02 	lds	r30, 0x029B
    26aa:	f0 91 9c 02 	lds	r31, 0x029C
    26ae:	ee 0f       	add	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	ee 0d       	add	r30, r14
    26b4:	ff 1d       	adc	r31, r15
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	e1 56       	subi	r30, 0x61	; 97
    26bc:	fd 4f       	sbci	r31, 0xFD	; 253
    26be:	8e 01       	movw	r16, r28
    26c0:	00 0f       	add	r16, r16
    26c2:	11 1f       	adc	r17, r17
    26c4:	0d 53       	subi	r16, 0x3D	; 61
    26c6:	1d 4f       	sbci	r17, 0xFD	; 253
    26c8:	d8 01       	movw	r26, r16
    26ca:	8d 91       	ld	r24, X+
    26cc:	9c 91       	ld	r25, X
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
	position(armNo,side);
    26d2:	b7 01       	movw	r22, r14
    26d4:	ce 01       	movw	r24, r28
    26d6:	eb db       	rcall	.-2090   	; 0x1eae <position>
	drop(armNo);
    26d8:	ce 01       	movw	r24, r28
    26da:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <drop>
	arm[armNo] = -1;
    26de:	8f ef       	ldi	r24, 0xFF	; 255
    26e0:	9f ef       	ldi	r25, 0xFF	; 255
    26e2:	f8 01       	movw	r30, r16
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    26e8:	80 91 6a 02 	lds	r24, 0x026A
    26ec:	90 91 6b 02 	lds	r25, 0x026B
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	90 93 6b 02 	sts	0x026B, r25
    26f6:	80 93 6a 02 	sts	0x026A, r24
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	08 95       	ret

00002708 <canDrop>:
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
	pickNode(a2, a2);
}

void canDrop()
{
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;

	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2710:	20 91 9b 02 	lds	r18, 0x029B
    2714:	30 91 9c 02 	lds	r19, 0x029C
    2718:	22 30       	cpi	r18, 0x02	; 2
    271a:	31 05       	cpc	r19, r1
    271c:	30 f4       	brcc	.+12     	; 0x272a <canDrop+0x22>
    271e:	80 91 62 02 	lds	r24, 0x0262
    2722:	90 91 63 02 	lds	r25, 0x0263
    2726:	02 97       	sbiw	r24, 0x02	; 2
    2728:	79 f0       	breq	.+30     	; 0x2748 <canDrop+0x40>
    272a:	c9 01       	movw	r24, r18
    272c:	02 97       	sbiw	r24, 0x02	; 2
    272e:	02 97       	sbiw	r24, 0x02	; 2
    2730:	80 f4       	brcc	.+32     	; 0x2752 <canDrop+0x4a>
    2732:	80 91 62 02 	lds	r24, 0x0262
    2736:	90 91 63 02 	lds	r25, 0x0263
    273a:	89 2b       	or	r24, r25
    273c:	79 f0       	breq	.+30     	; 0x275c <canDrop+0x54>
	pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    273e:	01 e0       	ldi	r16, 0x01	; 1
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	c0 e0       	ldi	r28, 0x00	; 0
    2744:	d0 e0       	ldi	r29, 0x00	; 0
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <canDrop+0x5c>

	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2748:	00 e0       	ldi	r16, 0x00	; 0
    274a:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;

	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    274c:	c1 e0       	ldi	r28, 0x01	; 1
    274e:	d0 e0       	ldi	r29, 0x00	; 0
    2750:	09 c0       	rjmp	.+18     	; 0x2764 <canDrop+0x5c>
	pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    2752:	01 e0       	ldi	r16, 0x01	; 1
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	c0 e0       	ldi	r28, 0x00	; 0
    2758:	d0 e0       	ldi	r29, 0x00	; 0
    275a:	04 c0       	rjmp	.+8      	; 0x2764 <canDrop+0x5c>

	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    275c:	00 e0       	ldi	r16, 0x00	; 0
    275e:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;

	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2760:	c1 e0       	ldi	r28, 0x01	; 1
    2762:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    2764:	40 91 02 02 	lds	r20, 0x0202
    2768:	50 91 03 02 	lds	r21, 0x0203
    276c:	42 30       	cpi	r20, 0x02	; 2
    276e:	51 05       	cpc	r21, r1
    2770:	09 f4       	brne	.+2      	; 0x2774 <canDrop+0x6c>
    2772:	3c c1       	rjmp	.+632    	; 0x29ec <canDrop+0x2e4>
    2774:	f9 01       	movw	r30, r18
    2776:	ee 0f       	add	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	e1 55       	subi	r30, 0x51	; 81
    277c:	fd 4f       	sbci	r31, 0xFD	; 253
    277e:	40 81       	ld	r20, Z
    2780:	51 81       	ldd	r21, Z+1	; 0x01
    2782:	80 91 c3 02 	lds	r24, 0x02C3
    2786:	90 91 c4 02 	lds	r25, 0x02C4
    278a:	84 17       	cp	r24, r20
    278c:	95 07       	cpc	r25, r21
    278e:	41 f0       	breq	.+16     	; 0x27a0 <canDrop+0x98>
    2790:	80 91 c5 02 	lds	r24, 0x02C5
    2794:	90 91 c6 02 	lds	r25, 0x02C6
    2798:	48 17       	cp	r20, r24
    279a:	59 07       	cpc	r21, r25
    279c:	09 f0       	breq	.+2      	; 0x27a0 <canDrop+0x98>
    279e:	26 c1       	rjmp	.+588    	; 0x29ec <canDrop+0x2e4>
		return;
	else
	{
		if (visited[ct] == 0)
    27a0:	f9 01       	movw	r30, r18
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	e8 58       	subi	r30, 0x88	; 136
    27a8:	fd 4f       	sbci	r31, 0xFD	; 253
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
    27ae:	89 2b       	or	r24, r25
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <canDrop+0xac>

			terminalCheck1();
    27b2:	d2 da       	rcall	.-2652   	; 0x1d58 <terminalCheck1>


		if (armCount == 0)
    27b4:	80 91 02 02 	lds	r24, 0x0202
    27b8:	90 91 03 02 	lds	r25, 0x0203
    27bc:	89 2b       	or	r24, r25
    27be:	09 f0       	breq	.+2      	; 0x27c2 <canDrop+0xba>
    27c0:	48 c0       	rjmp	.+144    	; 0x2852 <canDrop+0x14a>
		{
			if (arm[arm0] == color[ct])
    27c2:	20 91 9b 02 	lds	r18, 0x029B
    27c6:	30 91 9c 02 	lds	r19, 0x029C
    27ca:	f9 01       	movw	r30, r18
    27cc:	ee 0f       	add	r30, r30
    27ce:	ff 1f       	adc	r31, r31
    27d0:	e1 55       	subi	r30, 0x51	; 81
    27d2:	fd 4f       	sbci	r31, 0xFD	; 253
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	fe 01       	movw	r30, r28
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ed 53       	subi	r30, 0x3D	; 61
    27e0:	fd 4f       	sbci	r31, 0xFD	; 253
    27e2:	40 81       	ld	r20, Z
    27e4:	51 81       	ldd	r21, Z+1	; 0x01
    27e6:	48 17       	cp	r20, r24
    27e8:	59 07       	cpc	r21, r25
    27ea:	a9 f4       	brne	.+42     	; 0x2816 <canDrop+0x10e>

				if (term[ct][0] == -1)
    27ec:	f9 01       	movw	r30, r18
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	e1 56       	subi	r30, 0x61	; 97
    27f8:	fd 4f       	sbci	r31, 0xFD	; 253
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	29 f4       	brne	.+10     	; 0x280c <canDrop+0x104>

					nodeDrop(arm0, 0);
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	ce 01       	movw	r24, r28
    2808:	35 df       	rcall	.-406    	; 0x2674 <nodeDrop>
    280a:	23 c0       	rjmp	.+70     	; 0x2852 <canDrop+0x14a>
				else nodeDrop(arm0, 1);
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	ce 01       	movw	r24, r28
    2812:	30 df       	rcall	.-416    	; 0x2674 <nodeDrop>
    2814:	1e c0       	rjmp	.+60     	; 0x2852 <canDrop+0x14a>

			else if (arm[arm1] == color[ct])
    2816:	f8 01       	movw	r30, r16
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	ed 53       	subi	r30, 0x3D	; 61
    281e:	fd 4f       	sbci	r31, 0xFD	; 253
    2820:	40 81       	ld	r20, Z
    2822:	51 81       	ldd	r21, Z+1	; 0x01
    2824:	84 17       	cp	r24, r20
    2826:	95 07       	cpc	r25, r21
    2828:	a1 f4       	brne	.+40     	; 0x2852 <canDrop+0x14a>

				if (term[ct][0] != -1)
    282a:	f9 01       	movw	r30, r18
    282c:	ee 0f       	add	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	ee 0f       	add	r30, r30
    2832:	ff 1f       	adc	r31, r31
    2834:	e1 56       	subi	r30, 0x61	; 97
    2836:	fd 4f       	sbci	r31, 0xFD	; 253
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	29 f0       	breq	.+10     	; 0x284a <canDrop+0x142>

					nodeDrop(arm1, 1);
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	70 e0       	ldi	r23, 0x00	; 0
    2844:	c8 01       	movw	r24, r16
    2846:	16 df       	rcall	.-468    	; 0x2674 <nodeDrop>
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <canDrop+0x14a>
				else nodeDrop(arm1, 0);
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	c8 01       	movw	r24, r16
    2850:	11 df       	rcall	.-478    	; 0x2674 <nodeDrop>

		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    2852:	20 91 9b 02 	lds	r18, 0x029B
    2856:	30 91 9c 02 	lds	r19, 0x029C
    285a:	f9 01       	movw	r30, r18
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	e1 55       	subi	r30, 0x51	; 81
    2862:	fd 4f       	sbci	r31, 0xFD	; 253
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	40 91 c3 02 	lds	r20, 0x02C3
    286c:	50 91 c4 02 	lds	r21, 0x02C4
    2870:	48 17       	cp	r20, r24
    2872:	59 07       	cpc	r21, r25
    2874:	41 f0       	breq	.+16     	; 0x2886 <canDrop+0x17e>
    2876:	40 91 c5 02 	lds	r20, 0x02C5
    287a:	50 91 c6 02 	lds	r21, 0x02C6
    287e:	84 17       	cp	r24, r20
    2880:	95 07       	cpc	r25, r21
    2882:	09 f0       	breq	.+2      	; 0x2886 <canDrop+0x17e>
    2884:	b3 c0       	rjmp	.+358    	; 0x29ec <canDrop+0x2e4>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2886:	f9 01       	movw	r30, r18
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	e1 56       	subi	r30, 0x61	; 97
    2892:	fd 4f       	sbci	r31, 0xFD	; 253
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	09 f4       	brne	.+2      	; 0x289e <canDrop+0x196>
    289c:	46 c0       	rjmp	.+140    	; 0x292a <canDrop+0x222>
    289e:	f9 01       	movw	r30, r18
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	e1 56       	subi	r30, 0x61	; 97
    28aa:	fd 4f       	sbci	r31, 0xFD	; 253
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	d1 f0       	breq	.+52     	; 0x28e8 <canDrop+0x1e0>
				if (visited[ct] == 0)
    28b4:	f9 01       	movw	r30, r18
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	e8 58       	subi	r30, 0x88	; 136
    28bc:	fd 4f       	sbci	r31, 0xFD	; 253
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	89 2b       	or	r24, r25
    28c4:	89 f4       	brne	.+34     	; 0x28e8 <canDrop+0x1e0>
					terminalCheck2();
    28c6:	0e 94 4c 09 	call	0x1298	; 0x1298 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    28ca:	20 91 9b 02 	lds	r18, 0x029B
    28ce:	30 91 9c 02 	lds	r19, 0x029C
    28d2:	f9 01       	movw	r30, r18
    28d4:	ee 0f       	add	r30, r30
    28d6:	ff 1f       	adc	r31, r31
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	e1 56       	subi	r30, 0x61	; 97
    28de:	fd 4f       	sbci	r31, 0xFD	; 253
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	01 96       	adiw	r24, 0x01	; 1
    28e6:	09 f1       	breq	.+66     	; 0x292a <canDrop+0x222>
    28e8:	f9 01       	movw	r30, r18
    28ea:	ee 0f       	add	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	ee 0f       	add	r30, r30
    28f0:	ff 1f       	adc	r31, r31
    28f2:	e1 56       	subi	r30, 0x61	; 97
    28f4:	fd 4f       	sbci	r31, 0xFD	; 253
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	b1 f0       	breq	.+44     	; 0x292a <canDrop+0x222>
			{
				if (arm[arm0] == color[ct])
    28fe:	de 01       	movw	r26, r28
    2900:	aa 0f       	add	r26, r26
    2902:	bb 1f       	adc	r27, r27
    2904:	ad 53       	subi	r26, 0x3D	; 61
    2906:	bd 4f       	sbci	r27, 0xFD	; 253
    2908:	f9 01       	movw	r30, r18
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	e1 55       	subi	r30, 0x51	; 81
    2910:	fd 4f       	sbci	r31, 0xFD	; 253
    2912:	4d 91       	ld	r20, X+
    2914:	5c 91       	ld	r21, X
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	48 17       	cp	r20, r24
    291c:	59 07       	cpc	r21, r25
    291e:	19 f4       	brne	.+6      	; 0x2926 <canDrop+0x21e>
					dropPickup(arm0);
    2920:	ce 01       	movw	r24, r28
    2922:	4f de       	rcall	.-866    	; 0x25c2 <dropPickup>
    2924:	02 c0       	rjmp	.+4      	; 0x292a <canDrop+0x222>
				else dropPickup(arm1);
    2926:	c8 01       	movw	r24, r16
    2928:	4c de       	rcall	.-872    	; 0x25c2 <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    292a:	80 91 9b 02 	lds	r24, 0x029B
    292e:	90 91 9c 02 	lds	r25, 0x029C
    2932:	fc 01       	movw	r30, r24
    2934:	ee 0f       	add	r30, r30
    2936:	ff 1f       	adc	r31, r31
    2938:	e1 55       	subi	r30, 0x51	; 81
    293a:	fd 4f       	sbci	r31, 0xFD	; 253
    293c:	20 81       	ld	r18, Z
    293e:	31 81       	ldd	r19, Z+1	; 0x01
    2940:	fe 01       	movw	r30, r28
    2942:	ee 0f       	add	r30, r30
    2944:	ff 1f       	adc	r31, r31
    2946:	ed 53       	subi	r30, 0x3D	; 61
    2948:	fd 4f       	sbci	r31, 0xFD	; 253
    294a:	40 81       	ld	r20, Z
    294c:	51 81       	ldd	r21, Z+1	; 0x01
    294e:	42 17       	cp	r20, r18
    2950:	53 07       	cpc	r21, r19
    2952:	11 f5       	brne	.+68     	; 0x2998 <canDrop+0x290>
    2954:	fc 01       	movw	r30, r24
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	e1 56       	subi	r30, 0x61	; 97
    2960:	fd 4f       	sbci	r31, 0xFD	; 253
    2962:	40 81       	ld	r20, Z
    2964:	51 81       	ldd	r21, Z+1	; 0x01
    2966:	4f 3f       	cpi	r20, 0xFF	; 255
    2968:	5f 4f       	sbci	r21, 0xFF	; 255
    296a:	29 f4       	brne	.+10     	; 0x2976 <canDrop+0x26e>

				nodeDrop(arm0, 0);
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	ce 01       	movw	r24, r28
    2972:	80 de       	rcall	.-768    	; 0x2674 <nodeDrop>
    2974:	3b c0       	rjmp	.+118    	; 0x29ec <canDrop+0x2e4>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    2976:	fc 01       	movw	r30, r24
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	e1 56       	subi	r30, 0x61	; 97
    2982:	fd 4f       	sbci	r31, 0xFD	; 253
    2984:	42 81       	ldd	r20, Z+2	; 0x02
    2986:	53 81       	ldd	r21, Z+3	; 0x03
    2988:	4f 3f       	cpi	r20, 0xFF	; 255
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	29 f4       	brne	.+10     	; 0x2998 <canDrop+0x290>
				nodeDrop(arm0, 1);
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	ce 01       	movw	r24, r28
    2994:	6f de       	rcall	.-802    	; 0x2674 <nodeDrop>
    2996:	2a c0       	rjmp	.+84     	; 0x29ec <canDrop+0x2e4>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2998:	f8 01       	movw	r30, r16
    299a:	ee 0f       	add	r30, r30
    299c:	ff 1f       	adc	r31, r31
    299e:	ed 53       	subi	r30, 0x3D	; 61
    29a0:	fd 4f       	sbci	r31, 0xFD	; 253
    29a2:	40 81       	ld	r20, Z
    29a4:	51 81       	ldd	r21, Z+1	; 0x01
    29a6:	24 17       	cp	r18, r20
    29a8:	35 07       	cpc	r19, r21
    29aa:	01 f5       	brne	.+64     	; 0x29ec <canDrop+0x2e4>
    29ac:	fc 01       	movw	r30, r24
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	e1 56       	subi	r30, 0x61	; 97
    29b8:	fd 4f       	sbci	r31, 0xFD	; 253
    29ba:	20 81       	ld	r18, Z
    29bc:	31 81       	ldd	r19, Z+1	; 0x01
    29be:	2f 3f       	cpi	r18, 0xFF	; 255
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	29 f4       	brne	.+10     	; 0x29ce <canDrop+0x2c6>
				nodeDrop(arm1, 0);
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	c8 01       	movw	r24, r16
    29ca:	54 de       	rcall	.-856    	; 0x2674 <nodeDrop>
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <canDrop+0x2e4>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    29ce:	fc 01       	movw	r30, r24
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	e1 56       	subi	r30, 0x61	; 97
    29da:	fd 4f       	sbci	r31, 0xFD	; 253
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	21 f4       	brne	.+8      	; 0x29ec <canDrop+0x2e4>

				nodeDrop(arm1, 1);
    29e4:	61 e0       	ldi	r22, 0x01	; 1
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	c8 01       	movw	r24, r16
    29ea:	44 de       	rcall	.-888    	; 0x2674 <nodeDrop>

		}
	}
}
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <main>:
	_delay_ms(1000);
}
int main()
{
	int i=0;
	init_devices();
    29f6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <init_devices>
	lcd_set_4bit();
    29fa:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    29fe:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2a02:	0e 94 5d 03 	call	0x6ba	; 0x6ba <color_sensor_scaling>
	stop();
	lcd_print(2,11,scan(),1);
	stop();
	while(1);
	*/
	setIndicatorAndColor();
    2a06:	0e 94 8b 05 	call	0xb16	; 0xb16 <setIndicatorAndColor>
	threshold=6000;
    2a0a:	80 e7       	ldi	r24, 0x70	; 112
    2a0c:	97 e1       	ldi	r25, 0x17	; 23
    2a0e:	90 93 81 02 	sts	0x0281, r25
    2a12:	80 93 80 02 	sts	0x0280, r24
	ct = 0; adj = 2;
    2a16:	10 92 9c 02 	sts	0x029C, r1
    2a1a:	10 92 9b 02 	sts	0x029B, r1
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	90 93 c0 02 	sts	0x02C0, r25
    2a26:	80 93 bf 02 	sts	0x02BF, r24
	//lcd("Begin");
	while (sorted<total)
    2a2a:	20 91 6a 02 	lds	r18, 0x026A
    2a2e:	30 91 6b 02 	lds	r19, 0x026B
    2a32:	80 91 00 02 	lds	r24, 0x0200
    2a36:	90 91 01 02 	lds	r25, 0x0201
    2a3a:	28 17       	cp	r18, r24
    2a3c:	39 07       	cpc	r19, r25
    2a3e:	ac f5       	brge	.+106    	; 0x2aaa <main+0xb4>
	{
		canDrop();
    2a40:	63 de       	rcall	.-826    	; 0x2708 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2a42:	80 91 66 02 	lds	r24, 0x0266
    2a46:	90 91 67 02 	lds	r25, 0x0267
    2a4a:	03 97       	sbiw	r24, 0x03	; 3
    2a4c:	11 f4       	brne	.+4      	; 0x2a52 <main+0x5c>
			predict();
    2a4e:	0e 94 84 07 	call	0xf08	; 0xf08 <predict>
		if (sorted == total)
    2a52:	20 91 6a 02 	lds	r18, 0x026A
    2a56:	30 91 6b 02 	lds	r19, 0x026B
    2a5a:	80 91 00 02 	lds	r24, 0x0200
    2a5e:	90 91 01 02 	lds	r25, 0x0201
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	09 f1       	breq	.+66     	; 0x2aaa <main+0xb4>
			break;
		pickup();
    2a68:	47 db       	rcall	.-2418   	; 0x20f8 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2a6a:	80 91 9b 02 	lds	r24, 0x029B
    2a6e:	90 91 9c 02 	lds	r25, 0x029C
    2a72:	bc 01       	movw	r22, r24
    2a74:	61 70       	andi	r22, 0x01	; 1
    2a76:	70 78       	andi	r23, 0x80	; 128
    2a78:	77 23       	and	r23, r23
    2a7a:	34 f4       	brge	.+12     	; 0x2a88 <main+0x92>
    2a7c:	61 50       	subi	r22, 0x01	; 1
    2a7e:	71 09       	sbc	r23, r1
    2a80:	6e 6f       	ori	r22, 0xFE	; 254
    2a82:	7f 6f       	ori	r23, 0xFF	; 255
    2a84:	6f 5f       	subi	r22, 0xFF	; 255
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	6c 5f       	subi	r22, 0xFC	; 252
    2a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <traverseToSort>
		sortCheck();
    2a90:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <sortCheck>
	*/
	setIndicatorAndColor();
	threshold=6000;
	ct = 0; adj = 2;
	//lcd("Begin");
	while (sorted<total)
    2a94:	20 91 6a 02 	lds	r18, 0x026A
    2a98:	30 91 6b 02 	lds	r19, 0x026B
    2a9c:	80 91 00 02 	lds	r24, 0x0200
    2aa0:	90 91 01 02 	lds	r25, 0x0201
    2aa4:	28 17       	cp	r18, r24
    2aa6:	39 07       	cpc	r19, r25
    2aa8:	5c f2       	brlt	.-106    	; 0x2a40 <main+0x4a>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	08 95       	ret

00002ab0 <__subsf3>:
    2ab0:	50 58       	subi	r21, 0x80	; 128

00002ab2 <__addsf3>:
    2ab2:	bb 27       	eor	r27, r27
    2ab4:	aa 27       	eor	r26, r26
    2ab6:	0e d0       	rcall	.+28     	; 0x2ad4 <__addsf3x>
    2ab8:	48 c1       	rjmp	.+656    	; 0x2d4a <__fp_round>
    2aba:	39 d1       	rcall	.+626    	; 0x2d2e <__fp_pscA>
    2abc:	30 f0       	brcs	.+12     	; 0x2aca <__addsf3+0x18>
    2abe:	3e d1       	rcall	.+636    	; 0x2d3c <__fp_pscB>
    2ac0:	20 f0       	brcs	.+8      	; 0x2aca <__addsf3+0x18>
    2ac2:	31 f4       	brne	.+12     	; 0x2ad0 <__addsf3+0x1e>
    2ac4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac6:	11 f4       	brne	.+4      	; 0x2acc <__addsf3+0x1a>
    2ac8:	1e f4       	brtc	.+6      	; 0x2ad0 <__addsf3+0x1e>
    2aca:	2e c1       	rjmp	.+604    	; 0x2d28 <__fp_nan>
    2acc:	0e f4       	brtc	.+2      	; 0x2ad0 <__addsf3+0x1e>
    2ace:	e0 95       	com	r30
    2ad0:	e7 fb       	bst	r30, 7
    2ad2:	24 c1       	rjmp	.+584    	; 0x2d1c <__fp_inf>

00002ad4 <__addsf3x>:
    2ad4:	e9 2f       	mov	r30, r25
    2ad6:	4a d1       	rcall	.+660    	; 0x2d6c <__fp_split3>
    2ad8:	80 f3       	brcs	.-32     	; 0x2aba <__addsf3+0x8>
    2ada:	ba 17       	cp	r27, r26
    2adc:	62 07       	cpc	r22, r18
    2ade:	73 07       	cpc	r23, r19
    2ae0:	84 07       	cpc	r24, r20
    2ae2:	95 07       	cpc	r25, r21
    2ae4:	18 f0       	brcs	.+6      	; 0x2aec <__addsf3x+0x18>
    2ae6:	71 f4       	brne	.+28     	; 0x2b04 <__addsf3x+0x30>
    2ae8:	9e f5       	brtc	.+102    	; 0x2b50 <__addsf3x+0x7c>
    2aea:	62 c1       	rjmp	.+708    	; 0x2db0 <__fp_zero>
    2aec:	0e f4       	brtc	.+2      	; 0x2af0 <__addsf3x+0x1c>
    2aee:	e0 95       	com	r30
    2af0:	0b 2e       	mov	r0, r27
    2af2:	ba 2f       	mov	r27, r26
    2af4:	a0 2d       	mov	r26, r0
    2af6:	0b 01       	movw	r0, r22
    2af8:	b9 01       	movw	r22, r18
    2afa:	90 01       	movw	r18, r0
    2afc:	0c 01       	movw	r0, r24
    2afe:	ca 01       	movw	r24, r20
    2b00:	a0 01       	movw	r20, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	ff 27       	eor	r31, r31
    2b06:	59 1b       	sub	r21, r25
    2b08:	99 f0       	breq	.+38     	; 0x2b30 <__addsf3x+0x5c>
    2b0a:	59 3f       	cpi	r21, 0xF9	; 249
    2b0c:	50 f4       	brcc	.+20     	; 0x2b22 <__addsf3x+0x4e>
    2b0e:	50 3e       	cpi	r21, 0xE0	; 224
    2b10:	68 f1       	brcs	.+90     	; 0x2b6c <__addsf3x+0x98>
    2b12:	1a 16       	cp	r1, r26
    2b14:	f0 40       	sbci	r31, 0x00	; 0
    2b16:	a2 2f       	mov	r26, r18
    2b18:	23 2f       	mov	r18, r19
    2b1a:	34 2f       	mov	r19, r20
    2b1c:	44 27       	eor	r20, r20
    2b1e:	58 5f       	subi	r21, 0xF8	; 248
    2b20:	f3 cf       	rjmp	.-26     	; 0x2b08 <__addsf3x+0x34>
    2b22:	46 95       	lsr	r20
    2b24:	37 95       	ror	r19
    2b26:	27 95       	ror	r18
    2b28:	a7 95       	ror	r26
    2b2a:	f0 40       	sbci	r31, 0x00	; 0
    2b2c:	53 95       	inc	r21
    2b2e:	c9 f7       	brne	.-14     	; 0x2b22 <__addsf3x+0x4e>
    2b30:	7e f4       	brtc	.+30     	; 0x2b50 <__addsf3x+0x7c>
    2b32:	1f 16       	cp	r1, r31
    2b34:	ba 0b       	sbc	r27, r26
    2b36:	62 0b       	sbc	r22, r18
    2b38:	73 0b       	sbc	r23, r19
    2b3a:	84 0b       	sbc	r24, r20
    2b3c:	ba f0       	brmi	.+46     	; 0x2b6c <__addsf3x+0x98>
    2b3e:	91 50       	subi	r25, 0x01	; 1
    2b40:	a1 f0       	breq	.+40     	; 0x2b6a <__addsf3x+0x96>
    2b42:	ff 0f       	add	r31, r31
    2b44:	bb 1f       	adc	r27, r27
    2b46:	66 1f       	adc	r22, r22
    2b48:	77 1f       	adc	r23, r23
    2b4a:	88 1f       	adc	r24, r24
    2b4c:	c2 f7       	brpl	.-16     	; 0x2b3e <__addsf3x+0x6a>
    2b4e:	0e c0       	rjmp	.+28     	; 0x2b6c <__addsf3x+0x98>
    2b50:	ba 0f       	add	r27, r26
    2b52:	62 1f       	adc	r22, r18
    2b54:	73 1f       	adc	r23, r19
    2b56:	84 1f       	adc	r24, r20
    2b58:	48 f4       	brcc	.+18     	; 0x2b6c <__addsf3x+0x98>
    2b5a:	87 95       	ror	r24
    2b5c:	77 95       	ror	r23
    2b5e:	67 95       	ror	r22
    2b60:	b7 95       	ror	r27
    2b62:	f7 95       	ror	r31
    2b64:	9e 3f       	cpi	r25, 0xFE	; 254
    2b66:	08 f0       	brcs	.+2      	; 0x2b6a <__addsf3x+0x96>
    2b68:	b3 cf       	rjmp	.-154    	; 0x2ad0 <__addsf3+0x1e>
    2b6a:	93 95       	inc	r25
    2b6c:	88 0f       	add	r24, r24
    2b6e:	08 f0       	brcs	.+2      	; 0x2b72 <__addsf3x+0x9e>
    2b70:	99 27       	eor	r25, r25
    2b72:	ee 0f       	add	r30, r30
    2b74:	97 95       	ror	r25
    2b76:	87 95       	ror	r24
    2b78:	08 95       	ret

00002b7a <__divsf3>:
    2b7a:	0c d0       	rcall	.+24     	; 0x2b94 <__divsf3x>
    2b7c:	e6 c0       	rjmp	.+460    	; 0x2d4a <__fp_round>
    2b7e:	de d0       	rcall	.+444    	; 0x2d3c <__fp_pscB>
    2b80:	40 f0       	brcs	.+16     	; 0x2b92 <__divsf3+0x18>
    2b82:	d5 d0       	rcall	.+426    	; 0x2d2e <__fp_pscA>
    2b84:	30 f0       	brcs	.+12     	; 0x2b92 <__divsf3+0x18>
    2b86:	21 f4       	brne	.+8      	; 0x2b90 <__divsf3+0x16>
    2b88:	5f 3f       	cpi	r21, 0xFF	; 255
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <__divsf3+0x18>
    2b8c:	c7 c0       	rjmp	.+398    	; 0x2d1c <__fp_inf>
    2b8e:	51 11       	cpse	r21, r1
    2b90:	10 c1       	rjmp	.+544    	; 0x2db2 <__fp_szero>
    2b92:	ca c0       	rjmp	.+404    	; 0x2d28 <__fp_nan>

00002b94 <__divsf3x>:
    2b94:	eb d0       	rcall	.+470    	; 0x2d6c <__fp_split3>
    2b96:	98 f3       	brcs	.-26     	; 0x2b7e <__divsf3+0x4>

00002b98 <__divsf3_pse>:
    2b98:	99 23       	and	r25, r25
    2b9a:	c9 f3       	breq	.-14     	; 0x2b8e <__divsf3+0x14>
    2b9c:	55 23       	and	r21, r21
    2b9e:	b1 f3       	breq	.-20     	; 0x2b8c <__divsf3+0x12>
    2ba0:	95 1b       	sub	r25, r21
    2ba2:	55 0b       	sbc	r21, r21
    2ba4:	bb 27       	eor	r27, r27
    2ba6:	aa 27       	eor	r26, r26
    2ba8:	62 17       	cp	r22, r18
    2baa:	73 07       	cpc	r23, r19
    2bac:	84 07       	cpc	r24, r20
    2bae:	38 f0       	brcs	.+14     	; 0x2bbe <__divsf3_pse+0x26>
    2bb0:	9f 5f       	subi	r25, 0xFF	; 255
    2bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb4:	22 0f       	add	r18, r18
    2bb6:	33 1f       	adc	r19, r19
    2bb8:	44 1f       	adc	r20, r20
    2bba:	aa 1f       	adc	r26, r26
    2bbc:	a9 f3       	breq	.-22     	; 0x2ba8 <__divsf3_pse+0x10>
    2bbe:	33 d0       	rcall	.+102    	; 0x2c26 <__divsf3_pse+0x8e>
    2bc0:	0e 2e       	mov	r0, r30
    2bc2:	3a f0       	brmi	.+14     	; 0x2bd2 <__divsf3_pse+0x3a>
    2bc4:	e0 e8       	ldi	r30, 0x80	; 128
    2bc6:	30 d0       	rcall	.+96     	; 0x2c28 <__divsf3_pse+0x90>
    2bc8:	91 50       	subi	r25, 0x01	; 1
    2bca:	50 40       	sbci	r21, 0x00	; 0
    2bcc:	e6 95       	lsr	r30
    2bce:	00 1c       	adc	r0, r0
    2bd0:	ca f7       	brpl	.-14     	; 0x2bc4 <__divsf3_pse+0x2c>
    2bd2:	29 d0       	rcall	.+82     	; 0x2c26 <__divsf3_pse+0x8e>
    2bd4:	fe 2f       	mov	r31, r30
    2bd6:	27 d0       	rcall	.+78     	; 0x2c26 <__divsf3_pse+0x8e>
    2bd8:	66 0f       	add	r22, r22
    2bda:	77 1f       	adc	r23, r23
    2bdc:	88 1f       	adc	r24, r24
    2bde:	bb 1f       	adc	r27, r27
    2be0:	26 17       	cp	r18, r22
    2be2:	37 07       	cpc	r19, r23
    2be4:	48 07       	cpc	r20, r24
    2be6:	ab 07       	cpc	r26, r27
    2be8:	b0 e8       	ldi	r27, 0x80	; 128
    2bea:	09 f0       	breq	.+2      	; 0x2bee <__divsf3_pse+0x56>
    2bec:	bb 0b       	sbc	r27, r27
    2bee:	80 2d       	mov	r24, r0
    2bf0:	bf 01       	movw	r22, r30
    2bf2:	ff 27       	eor	r31, r31
    2bf4:	93 58       	subi	r25, 0x83	; 131
    2bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf8:	2a f0       	brmi	.+10     	; 0x2c04 <__divsf3_pse+0x6c>
    2bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    2bfc:	51 05       	cpc	r21, r1
    2bfe:	68 f0       	brcs	.+26     	; 0x2c1a <__divsf3_pse+0x82>
    2c00:	8d c0       	rjmp	.+282    	; 0x2d1c <__fp_inf>
    2c02:	d7 c0       	rjmp	.+430    	; 0x2db2 <__fp_szero>
    2c04:	5f 3f       	cpi	r21, 0xFF	; 255
    2c06:	ec f3       	brlt	.-6      	; 0x2c02 <__divsf3_pse+0x6a>
    2c08:	98 3e       	cpi	r25, 0xE8	; 232
    2c0a:	dc f3       	brlt	.-10     	; 0x2c02 <__divsf3_pse+0x6a>
    2c0c:	86 95       	lsr	r24
    2c0e:	77 95       	ror	r23
    2c10:	67 95       	ror	r22
    2c12:	b7 95       	ror	r27
    2c14:	f7 95       	ror	r31
    2c16:	9f 5f       	subi	r25, 0xFF	; 255
    2c18:	c9 f7       	brne	.-14     	; 0x2c0c <__divsf3_pse+0x74>
    2c1a:	88 0f       	add	r24, r24
    2c1c:	91 1d       	adc	r25, r1
    2c1e:	96 95       	lsr	r25
    2c20:	87 95       	ror	r24
    2c22:	97 f9       	bld	r25, 7
    2c24:	08 95       	ret
    2c26:	e1 e0       	ldi	r30, 0x01	; 1
    2c28:	66 0f       	add	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	bb 1f       	adc	r27, r27
    2c30:	62 17       	cp	r22, r18
    2c32:	73 07       	cpc	r23, r19
    2c34:	84 07       	cpc	r24, r20
    2c36:	ba 07       	cpc	r27, r26
    2c38:	20 f0       	brcs	.+8      	; 0x2c42 <__divsf3_pse+0xaa>
    2c3a:	62 1b       	sub	r22, r18
    2c3c:	73 0b       	sbc	r23, r19
    2c3e:	84 0b       	sbc	r24, r20
    2c40:	ba 0b       	sbc	r27, r26
    2c42:	ee 1f       	adc	r30, r30
    2c44:	88 f7       	brcc	.-30     	; 0x2c28 <__divsf3_pse+0x90>
    2c46:	e0 95       	com	r30
    2c48:	08 95       	ret

00002c4a <__fixunssfsi>:
    2c4a:	98 d0       	rcall	.+304    	; 0x2d7c <__fp_splitA>
    2c4c:	88 f0       	brcs	.+34     	; 0x2c70 <__fixunssfsi+0x26>
    2c4e:	9f 57       	subi	r25, 0x7F	; 127
    2c50:	90 f0       	brcs	.+36     	; 0x2c76 <__fixunssfsi+0x2c>
    2c52:	b9 2f       	mov	r27, r25
    2c54:	99 27       	eor	r25, r25
    2c56:	b7 51       	subi	r27, 0x17	; 23
    2c58:	a0 f0       	brcs	.+40     	; 0x2c82 <__fixunssfsi+0x38>
    2c5a:	d1 f0       	breq	.+52     	; 0x2c90 <__fixunssfsi+0x46>
    2c5c:	66 0f       	add	r22, r22
    2c5e:	77 1f       	adc	r23, r23
    2c60:	88 1f       	adc	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	1a f0       	brmi	.+6      	; 0x2c6c <__fixunssfsi+0x22>
    2c66:	ba 95       	dec	r27
    2c68:	c9 f7       	brne	.-14     	; 0x2c5c <__fixunssfsi+0x12>
    2c6a:	12 c0       	rjmp	.+36     	; 0x2c90 <__fixunssfsi+0x46>
    2c6c:	b1 30       	cpi	r27, 0x01	; 1
    2c6e:	81 f0       	breq	.+32     	; 0x2c90 <__fixunssfsi+0x46>
    2c70:	9f d0       	rcall	.+318    	; 0x2db0 <__fp_zero>
    2c72:	b1 e0       	ldi	r27, 0x01	; 1
    2c74:	08 95       	ret
    2c76:	9c c0       	rjmp	.+312    	; 0x2db0 <__fp_zero>
    2c78:	67 2f       	mov	r22, r23
    2c7a:	78 2f       	mov	r23, r24
    2c7c:	88 27       	eor	r24, r24
    2c7e:	b8 5f       	subi	r27, 0xF8	; 248
    2c80:	39 f0       	breq	.+14     	; 0x2c90 <__fixunssfsi+0x46>
    2c82:	b9 3f       	cpi	r27, 0xF9	; 249
    2c84:	cc f3       	brlt	.-14     	; 0x2c78 <__fixunssfsi+0x2e>
    2c86:	86 95       	lsr	r24
    2c88:	77 95       	ror	r23
    2c8a:	67 95       	ror	r22
    2c8c:	b3 95       	inc	r27
    2c8e:	d9 f7       	brne	.-10     	; 0x2c86 <__fixunssfsi+0x3c>
    2c90:	3e f4       	brtc	.+14     	; 0x2ca0 <__fixunssfsi+0x56>
    2c92:	90 95       	com	r25
    2c94:	80 95       	com	r24
    2c96:	70 95       	com	r23
    2c98:	61 95       	neg	r22
    2c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca0:	08 95       	ret

00002ca2 <__floatunsisf>:
    2ca2:	e8 94       	clt
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <__floatsisf+0x12>

00002ca6 <__floatsisf>:
    2ca6:	97 fb       	bst	r25, 7
    2ca8:	3e f4       	brtc	.+14     	; 0x2cb8 <__floatsisf+0x12>
    2caa:	90 95       	com	r25
    2cac:	80 95       	com	r24
    2cae:	70 95       	com	r23
    2cb0:	61 95       	neg	r22
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb8:	99 23       	and	r25, r25
    2cba:	a9 f0       	breq	.+42     	; 0x2ce6 <__floatsisf+0x40>
    2cbc:	f9 2f       	mov	r31, r25
    2cbe:	96 e9       	ldi	r25, 0x96	; 150
    2cc0:	bb 27       	eor	r27, r27
    2cc2:	93 95       	inc	r25
    2cc4:	f6 95       	lsr	r31
    2cc6:	87 95       	ror	r24
    2cc8:	77 95       	ror	r23
    2cca:	67 95       	ror	r22
    2ccc:	b7 95       	ror	r27
    2cce:	f1 11       	cpse	r31, r1
    2cd0:	f8 cf       	rjmp	.-16     	; 0x2cc2 <__floatsisf+0x1c>
    2cd2:	fa f4       	brpl	.+62     	; 0x2d12 <__floatsisf+0x6c>
    2cd4:	bb 0f       	add	r27, r27
    2cd6:	11 f4       	brne	.+4      	; 0x2cdc <__floatsisf+0x36>
    2cd8:	60 ff       	sbrs	r22, 0
    2cda:	1b c0       	rjmp	.+54     	; 0x2d12 <__floatsisf+0x6c>
    2cdc:	6f 5f       	subi	r22, 0xFF	; 255
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce4:	16 c0       	rjmp	.+44     	; 0x2d12 <__floatsisf+0x6c>
    2ce6:	88 23       	and	r24, r24
    2ce8:	11 f0       	breq	.+4      	; 0x2cee <__floatsisf+0x48>
    2cea:	96 e9       	ldi	r25, 0x96	; 150
    2cec:	11 c0       	rjmp	.+34     	; 0x2d10 <__floatsisf+0x6a>
    2cee:	77 23       	and	r23, r23
    2cf0:	21 f0       	breq	.+8      	; 0x2cfa <__floatsisf+0x54>
    2cf2:	9e e8       	ldi	r25, 0x8E	; 142
    2cf4:	87 2f       	mov	r24, r23
    2cf6:	76 2f       	mov	r23, r22
    2cf8:	05 c0       	rjmp	.+10     	; 0x2d04 <__floatsisf+0x5e>
    2cfa:	66 23       	and	r22, r22
    2cfc:	71 f0       	breq	.+28     	; 0x2d1a <__floatsisf+0x74>
    2cfe:	96 e8       	ldi	r25, 0x86	; 134
    2d00:	86 2f       	mov	r24, r22
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	2a f0       	brmi	.+10     	; 0x2d12 <__floatsisf+0x6c>
    2d08:	9a 95       	dec	r25
    2d0a:	66 0f       	add	r22, r22
    2d0c:	77 1f       	adc	r23, r23
    2d0e:	88 1f       	adc	r24, r24
    2d10:	da f7       	brpl	.-10     	; 0x2d08 <__floatsisf+0x62>
    2d12:	88 0f       	add	r24, r24
    2d14:	96 95       	lsr	r25
    2d16:	87 95       	ror	r24
    2d18:	97 f9       	bld	r25, 7
    2d1a:	08 95       	ret

00002d1c <__fp_inf>:
    2d1c:	97 f9       	bld	r25, 7
    2d1e:	9f 67       	ori	r25, 0x7F	; 127
    2d20:	80 e8       	ldi	r24, 0x80	; 128
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	08 95       	ret

00002d28 <__fp_nan>:
    2d28:	9f ef       	ldi	r25, 0xFF	; 255
    2d2a:	80 ec       	ldi	r24, 0xC0	; 192
    2d2c:	08 95       	ret

00002d2e <__fp_pscA>:
    2d2e:	00 24       	eor	r0, r0
    2d30:	0a 94       	dec	r0
    2d32:	16 16       	cp	r1, r22
    2d34:	17 06       	cpc	r1, r23
    2d36:	18 06       	cpc	r1, r24
    2d38:	09 06       	cpc	r0, r25
    2d3a:	08 95       	ret

00002d3c <__fp_pscB>:
    2d3c:	00 24       	eor	r0, r0
    2d3e:	0a 94       	dec	r0
    2d40:	12 16       	cp	r1, r18
    2d42:	13 06       	cpc	r1, r19
    2d44:	14 06       	cpc	r1, r20
    2d46:	05 06       	cpc	r0, r21
    2d48:	08 95       	ret

00002d4a <__fp_round>:
    2d4a:	09 2e       	mov	r0, r25
    2d4c:	03 94       	inc	r0
    2d4e:	00 0c       	add	r0, r0
    2d50:	11 f4       	brne	.+4      	; 0x2d56 <__fp_round+0xc>
    2d52:	88 23       	and	r24, r24
    2d54:	52 f0       	brmi	.+20     	; 0x2d6a <__fp_round+0x20>
    2d56:	bb 0f       	add	r27, r27
    2d58:	40 f4       	brcc	.+16     	; 0x2d6a <__fp_round+0x20>
    2d5a:	bf 2b       	or	r27, r31
    2d5c:	11 f4       	brne	.+4      	; 0x2d62 <__fp_round+0x18>
    2d5e:	60 ff       	sbrs	r22, 0
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <__fp_round+0x20>
    2d62:	6f 5f       	subi	r22, 0xFF	; 255
    2d64:	7f 4f       	sbci	r23, 0xFF	; 255
    2d66:	8f 4f       	sbci	r24, 0xFF	; 255
    2d68:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6a:	08 95       	ret

00002d6c <__fp_split3>:
    2d6c:	57 fd       	sbrc	r21, 7
    2d6e:	90 58       	subi	r25, 0x80	; 128
    2d70:	44 0f       	add	r20, r20
    2d72:	55 1f       	adc	r21, r21
    2d74:	59 f0       	breq	.+22     	; 0x2d8c <__fp_splitA+0x10>
    2d76:	5f 3f       	cpi	r21, 0xFF	; 255
    2d78:	71 f0       	breq	.+28     	; 0x2d96 <__fp_splitA+0x1a>
    2d7a:	47 95       	ror	r20

00002d7c <__fp_splitA>:
    2d7c:	88 0f       	add	r24, r24
    2d7e:	97 fb       	bst	r25, 7
    2d80:	99 1f       	adc	r25, r25
    2d82:	61 f0       	breq	.+24     	; 0x2d9c <__fp_splitA+0x20>
    2d84:	9f 3f       	cpi	r25, 0xFF	; 255
    2d86:	79 f0       	breq	.+30     	; 0x2da6 <__fp_splitA+0x2a>
    2d88:	87 95       	ror	r24
    2d8a:	08 95       	ret
    2d8c:	12 16       	cp	r1, r18
    2d8e:	13 06       	cpc	r1, r19
    2d90:	14 06       	cpc	r1, r20
    2d92:	55 1f       	adc	r21, r21
    2d94:	f2 cf       	rjmp	.-28     	; 0x2d7a <__fp_split3+0xe>
    2d96:	46 95       	lsr	r20
    2d98:	f1 df       	rcall	.-30     	; 0x2d7c <__fp_splitA>
    2d9a:	08 c0       	rjmp	.+16     	; 0x2dac <__fp_splitA+0x30>
    2d9c:	16 16       	cp	r1, r22
    2d9e:	17 06       	cpc	r1, r23
    2da0:	18 06       	cpc	r1, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	f1 cf       	rjmp	.-30     	; 0x2d88 <__fp_splitA+0xc>
    2da6:	86 95       	lsr	r24
    2da8:	71 05       	cpc	r23, r1
    2daa:	61 05       	cpc	r22, r1
    2dac:	08 94       	sec
    2dae:	08 95       	ret

00002db0 <__fp_zero>:
    2db0:	e8 94       	clt

00002db2 <__fp_szero>:
    2db2:	bb 27       	eor	r27, r27
    2db4:	66 27       	eor	r22, r22
    2db6:	77 27       	eor	r23, r23
    2db8:	cb 01       	movw	r24, r22
    2dba:	97 f9       	bld	r25, 7
    2dbc:	08 95       	ret

00002dbe <__divmodhi4>:
    2dbe:	97 fb       	bst	r25, 7
    2dc0:	07 2e       	mov	r0, r23
    2dc2:	16 f4       	brtc	.+4      	; 0x2dc8 <__divmodhi4+0xa>
    2dc4:	00 94       	com	r0
    2dc6:	06 d0       	rcall	.+12     	; 0x2dd4 <__divmodhi4_neg1>
    2dc8:	77 fd       	sbrc	r23, 7
    2dca:	08 d0       	rcall	.+16     	; 0x2ddc <__divmodhi4_neg2>
    2dcc:	1a d0       	rcall	.+52     	; 0x2e02 <__udivmodhi4>
    2dce:	07 fc       	sbrc	r0, 7
    2dd0:	05 d0       	rcall	.+10     	; 0x2ddc <__divmodhi4_neg2>
    2dd2:	3e f4       	brtc	.+14     	; 0x2de2 <__divmodhi4_exit>

00002dd4 <__divmodhi4_neg1>:
    2dd4:	90 95       	com	r25
    2dd6:	81 95       	neg	r24
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	08 95       	ret

00002ddc <__divmodhi4_neg2>:
    2ddc:	70 95       	com	r23
    2dde:	61 95       	neg	r22
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255

00002de2 <__divmodhi4_exit>:
    2de2:	08 95       	ret

00002de4 <__umulhisi3>:
    2de4:	a2 9f       	mul	r26, r18
    2de6:	b0 01       	movw	r22, r0
    2de8:	b3 9f       	mul	r27, r19
    2dea:	c0 01       	movw	r24, r0
    2dec:	a3 9f       	mul	r26, r19
    2dee:	70 0d       	add	r23, r0
    2df0:	81 1d       	adc	r24, r1
    2df2:	11 24       	eor	r1, r1
    2df4:	91 1d       	adc	r25, r1
    2df6:	b2 9f       	mul	r27, r18
    2df8:	70 0d       	add	r23, r0
    2dfa:	81 1d       	adc	r24, r1
    2dfc:	11 24       	eor	r1, r1
    2dfe:	91 1d       	adc	r25, r1
    2e00:	08 95       	ret

00002e02 <__udivmodhi4>:
    2e02:	aa 1b       	sub	r26, r26
    2e04:	bb 1b       	sub	r27, r27
    2e06:	51 e1       	ldi	r21, 0x11	; 17
    2e08:	07 c0       	rjmp	.+14     	; 0x2e18 <__udivmodhi4_ep>

00002e0a <__udivmodhi4_loop>:
    2e0a:	aa 1f       	adc	r26, r26
    2e0c:	bb 1f       	adc	r27, r27
    2e0e:	a6 17       	cp	r26, r22
    2e10:	b7 07       	cpc	r27, r23
    2e12:	10 f0       	brcs	.+4      	; 0x2e18 <__udivmodhi4_ep>
    2e14:	a6 1b       	sub	r26, r22
    2e16:	b7 0b       	sbc	r27, r23

00002e18 <__udivmodhi4_ep>:
    2e18:	88 1f       	adc	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	5a 95       	dec	r21
    2e1e:	a9 f7       	brne	.-22     	; 0x2e0a <__udivmodhi4_loop>
    2e20:	80 95       	com	r24
    2e22:	90 95       	com	r25
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	08 95       	ret

00002e2a <_exit>:
    2e2a:	f8 94       	cli

00002e2c <__stop_program>:
    2e2c:	ff cf       	rjmp	.-2      	; 0x2e2c <__stop_program>
