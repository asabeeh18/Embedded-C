
turnCorrect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00003158  000031ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  0080024a  0080024a  00003236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003236  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  00003266  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034de  00000000  00000000  000035ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000047a  00000000  00000000  00006aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002740  00000000  00000000  00006f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a8  00000000  00000000  00009668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000854  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023fa  00000000  00000000  0000a864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  0000cc5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c4       	rjmp	.+2164   	; 0x88a <__vector_5>
      16:	00 00       	nop
      18:	13 c4       	rjmp	.+2086   	; 0x840 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e5       	ldi	r30, 0x58	; 88
      fc:	f1 e3       	ldi	r31, 0x31	; 49
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 3b       	cpi	r26, 0xBD	; 189
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <main>
     122:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 77 02 	sts	0x0277, r25
     30a:	80 93 76 02 	sts	0x0276, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 7b 02 	sts	0x027B, r21
     338:	40 93 7a 02 	sts	0x027A, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 bc 02 	sts	0x02BC, r25
     374:	80 93 bb 02 	sts	0x02BB, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 7b 02 	sts	0x027B, r21
     3a0:	40 93 7a 02 	sts	0x027A, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b2 02 	sts	0x02B2, r25
     3dc:	80 93 b1 02 	sts	0x02B1, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 7b 02 	sts	0x027B, r21
     3fe:	40 93 7a 02 	sts	0x027A, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8c 02 	sts	0x028C, r25
     436:	80 93 8b 02 	sts	0x028B, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 87 18 	call	0x310e	; 0x310e <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 ba 02 	sts	0x02BA, r25
     47c:	80 93 b9 02 	sts	0x02B9, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 5a 02 	lds	r24, 0x025A
     628:	90 91 5b 02 	lds	r25, 0x025B
     62c:	a0 91 5c 02 	lds	r26, 0x025C
     630:	b0 91 5d 02 	lds	r27, 0x025D
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 5a 02 	sts	0x025A, r24
     63e:	90 93 5b 02 	sts	0x025B, r25
     642:	a0 93 5c 02 	sts	0x025C, r26
     646:	b0 93 5d 02 	sts	0x025D, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <servo_1>:
     676:	10 92 89 00 	sts	0x0089, r1
     67a:	68 2f       	mov	r22, r24
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__floatunsisf>
     686:	2b e7       	ldi	r18, 0x7B	; 123
     688:	34 e1       	ldi	r19, 0x14	; 20
     68a:	4e ee       	ldi	r20, 0xEE	; 238
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__divsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4c e0       	ldi	r20, 0x0C	; 12
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__addsf3>
     69e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__fixunssfsi>
     6a2:	60 93 88 00 	sts	0x0088, r22
     6a6:	08 95       	ret

000006a8 <servo_2>:
     6a8:	10 92 8b 00 	sts	0x008B, r1
     6ac:	68 2f       	mov	r22, r24
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__floatunsisf>
     6b8:	2b e7       	ldi	r18, 0x7B	; 123
     6ba:	34 e1       	ldi	r19, 0x14	; 20
     6bc:	4e ee       	ldi	r20, 0xEE	; 238
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__divsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4c e0       	ldi	r20, 0x0C	; 12
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__addsf3>
     6d0:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__fixunssfsi>
     6d4:	60 93 8a 00 	sts	0x008A, r22
     6d8:	08 95       	ret

000006da <servo_3>:
     6da:	10 92 8d 00 	sts	0x008D, r1
     6de:	68 2f       	mov	r22, r24
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__floatunsisf>
     6ea:	2b e7       	ldi	r18, 0x7B	; 123
     6ec:	34 e1       	ldi	r19, 0x14	; 20
     6ee:	4e ee       	ldi	r20, 0xEE	; 238
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__divsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4c e0       	ldi	r20, 0x0C	; 12
     6fc:	52 e4       	ldi	r21, 0x42	; 66
     6fe:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__addsf3>
     702:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__fixunssfsi>
     706:	60 93 8c 00 	sts	0x008C, r22
     70a:	08 95       	ret

0000070c <filter_red>:
     70c:	5e 98       	cbi	0x0b, 6	; 11
     70e:	5f 98       	cbi	0x0b, 7	; 11
     710:	08 95       	ret

00000712 <filter_green>:
     712:	5e 9a       	sbi	0x0b, 6	; 11
     714:	5f 9a       	sbi	0x0b, 7	; 11
     716:	08 95       	ret

00000718 <filter_blue>:
     718:	5e 98       	cbi	0x0b, 6	; 11
     71a:	5f 9a       	sbi	0x0b, 7	; 11
     71c:	08 95       	ret

0000071e <color_sensor_scaling>:
     71e:	5c 9a       	sbi	0x0b, 4	; 11
     720:	5d 9a       	sbi	0x0b, 5	; 11
     722:	08 95       	ret

00000724 <red_read>:
     724:	f3 df       	rcall	.-26     	; 0x70c <filter_red>
     726:	10 92 5a 02 	sts	0x025A, r1
     72a:	10 92 5b 02 	sts	0x025B, r1
     72e:	10 92 5c 02 	sts	0x025C, r1
     732:	10 92 5d 02 	sts	0x025D, r1
     736:	2f ef       	ldi	r18, 0xFF	; 255
     738:	8f e7       	ldi	r24, 0x7F	; 127
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	80 40       	sbci	r24, 0x00	; 0
     740:	90 40       	sbci	r25, 0x00	; 0
     742:	e1 f7       	brne	.-8      	; 0x73c <red_read+0x18>
     744:	00 c0       	rjmp	.+0      	; 0x746 <red_read+0x22>
     746:	00 00       	nop
     748:	80 91 5a 02 	lds	r24, 0x025A
     74c:	90 91 5b 02 	lds	r25, 0x025B
     750:	a0 91 5c 02 	lds	r26, 0x025C
     754:	b0 91 5d 02 	lds	r27, 0x025D
     758:	80 93 80 02 	sts	0x0280, r24
     75c:	90 93 81 02 	sts	0x0281, r25
     760:	a0 93 82 02 	sts	0x0282, r26
     764:	b0 93 83 02 	sts	0x0283, r27
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	9c e2       	ldi	r25, 0x2C	; 44
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <red_read+0x4a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <red_read+0x54>
     778:	00 00       	nop
     77a:	08 95       	ret

0000077c <green_read>:
     77c:	ca df       	rcall	.-108    	; 0x712 <filter_green>
     77e:	10 92 5a 02 	sts	0x025A, r1
     782:	10 92 5b 02 	sts	0x025B, r1
     786:	10 92 5c 02 	sts	0x025C, r1
     78a:	10 92 5d 02 	sts	0x025D, r1
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	8f e7       	ldi	r24, 0x7F	; 127
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	21 50       	subi	r18, 0x01	; 1
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <green_read+0x18>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <green_read+0x22>
     79e:	00 00       	nop
     7a0:	80 91 5a 02 	lds	r24, 0x025A
     7a4:	90 91 5b 02 	lds	r25, 0x025B
     7a8:	a0 91 5c 02 	lds	r26, 0x025C
     7ac:	b0 91 5d 02 	lds	r27, 0x025D
     7b0:	80 93 7c 02 	sts	0x027C, r24
     7b4:	90 93 7d 02 	sts	0x027D, r25
     7b8:	a0 93 7e 02 	sts	0x027E, r26
     7bc:	b0 93 7f 02 	sts	0x027F, r27
     7c0:	08 95       	ret

000007c2 <blue_read>:
     7c2:	aa df       	rcall	.-172    	; 0x718 <filter_blue>
     7c4:	10 92 5a 02 	sts	0x025A, r1
     7c8:	10 92 5b 02 	sts	0x025B, r1
     7cc:	10 92 5c 02 	sts	0x025C, r1
     7d0:	10 92 5d 02 	sts	0x025D, r1
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	8f e7       	ldi	r24, 0x7F	; 127
     7d8:	94 e0       	ldi	r25, 0x04	; 4
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <blue_read+0x18>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <blue_read+0x22>
     7e4:	00 00       	nop
     7e6:	80 91 5a 02 	lds	r24, 0x025A
     7ea:	90 91 5b 02 	lds	r25, 0x025B
     7ee:	a0 91 5c 02 	lds	r26, 0x025C
     7f2:	b0 91 5d 02 	lds	r27, 0x025D
     7f6:	80 93 70 02 	sts	0x0270, r24
     7fa:	90 93 71 02 	sts	0x0271, r25
     7fe:	a0 93 72 02 	sts	0x0272, r26
     802:	b0 93 73 02 	sts	0x0273, r27
     806:	08 95       	ret

00000808 <left_encoder_pin_config>:
     808:	6c 98       	cbi	0x0d, 4	; 13
     80a:	74 9a       	sbi	0x0e, 4	; 14
     80c:	08 95       	ret

0000080e <right_encoder_pin_config>:
     80e:	6d 98       	cbi	0x0d, 5	; 13
     810:	75 9a       	sbi	0x0e, 5	; 14
     812:	08 95       	ret

00000814 <port_init_poz>:
     814:	64 de       	rcall	.-824    	; 0x4de <motion_pin_config>
     816:	f8 df       	rcall	.-16     	; 0x808 <left_encoder_pin_config>
     818:	fa cf       	rjmp	.-12     	; 0x80e <right_encoder_pin_config>
     81a:	08 95       	ret

0000081c <left_position_encoder_interrupt_init>:
     81c:	f8 94       	cli
     81e:	ea e6       	ldi	r30, 0x6A	; 106
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	82 60       	ori	r24, 0x02	; 2
     826:	80 83       	st	Z, r24
     828:	ec 9a       	sbi	0x1d, 4	; 29
     82a:	78 94       	sei
     82c:	08 95       	ret

0000082e <right_position_encoder_interrupt_init>:
     82e:	f8 94       	cli
     830:	ea e6       	ldi	r30, 0x6A	; 106
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	88 60       	ori	r24, 0x08	; 8
     838:	80 83       	st	Z, r24
     83a:	ed 9a       	sbi	0x1d, 5	; 29
     83c:	78 94       	sei
     83e:	08 95       	ret

00000840 <__vector_6>:
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	80 91 5e 02 	lds	r24, 0x025E
     856:	90 91 5f 02 	lds	r25, 0x025F
     85a:	a0 91 60 02 	lds	r26, 0x0260
     85e:	b0 91 61 02 	lds	r27, 0x0261
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	a1 1d       	adc	r26, r1
     866:	b1 1d       	adc	r27, r1
     868:	80 93 5e 02 	sts	0x025E, r24
     86c:	90 93 5f 02 	sts	0x025F, r25
     870:	a0 93 60 02 	sts	0x0260, r26
     874:	b0 93 61 02 	sts	0x0261, r27
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <__vector_5>:
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	80 91 62 02 	lds	r24, 0x0262
     8a0:	90 91 63 02 	lds	r25, 0x0263
     8a4:	a0 91 64 02 	lds	r26, 0x0264
     8a8:	b0 91 65 02 	lds	r27, 0x0265
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	b1 1d       	adc	r27, r1
     8b2:	80 93 62 02 	sts	0x0262, r24
     8b6:	90 93 63 02 	sts	0x0263, r25
     8ba:	a0 93 64 02 	sts	0x0264, r26
     8be:	b0 93 65 02 	sts	0x0265, r27
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <angle_rotate>:
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	bc 01       	movw	r22, r24
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__floatunsisf>
     8ea:	28 e4       	ldi	r18, 0x48	; 72
     8ec:	31 ee       	ldi	r19, 0xE1	; 225
     8ee:	42 e8       	ldi	r20, 0x82	; 130
     8f0:	50 e4       	ldi	r21, 0x40	; 64
     8f2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__divsf3>
     8f6:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__fixunssfsi>
     8fa:	cb 01       	movw	r24, r22
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	10 92 5e 02 	sts	0x025E, r1
     904:	10 92 5f 02 	sts	0x025F, r1
     908:	10 92 60 02 	sts	0x0260, r1
     90c:	10 92 61 02 	sts	0x0261, r1
     910:	10 92 62 02 	sts	0x0262, r1
     914:	10 92 63 02 	sts	0x0263, r1
     918:	10 92 64 02 	sts	0x0264, r1
     91c:	10 92 65 02 	sts	0x0265, r1
     920:	51 e0       	ldi	r21, 0x01	; 1
     922:	e0 e0       	ldi	r30, 0x00	; 0
     924:	c0 90 5e 02 	lds	r12, 0x025E
     928:	d0 90 5f 02 	lds	r13, 0x025F
     92c:	e0 90 60 02 	lds	r14, 0x0260
     930:	f0 90 61 02 	lds	r15, 0x0261
     934:	00 91 62 02 	lds	r16, 0x0262
     938:	10 91 63 02 	lds	r17, 0x0263
     93c:	20 91 64 02 	lds	r18, 0x0264
     940:	30 91 65 02 	lds	r19, 0x0265
     944:	45 2f       	mov	r20, r21
     946:	08 17       	cp	r16, r24
     948:	19 07       	cpc	r17, r25
     94a:	2a 07       	cpc	r18, r26
     94c:	3b 07       	cpc	r19, r27
     94e:	08 f4       	brcc	.+2      	; 0x952 <angle_rotate+0x7e>
     950:	4e 2f       	mov	r20, r30
     952:	41 11       	cpse	r20, r1
     954:	09 c0       	rjmp	.+18     	; 0x968 <angle_rotate+0x94>
     956:	25 2f       	mov	r18, r21
     958:	c8 16       	cp	r12, r24
     95a:	d9 06       	cpc	r13, r25
     95c:	ea 06       	cpc	r14, r26
     95e:	fb 06       	cpc	r15, r27
     960:	08 f4       	brcc	.+2      	; 0x964 <angle_rotate+0x90>
     962:	2e 2f       	mov	r18, r30
     964:	22 23       	and	r18, r18
     966:	f1 f2       	breq	.-68     	; 0x924 <angle_rotate+0x50>
     968:	dd dd       	rcall	.-1094   	; 0x524 <stop>
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <linear_distance_mm>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	bc 01       	movw	r22, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__floatunsisf>
     986:	25 ee       	ldi	r18, 0xE5	; 229
     988:	30 ed       	ldi	r19, 0xD0	; 208
     98a:	4a ea       	ldi	r20, 0xAA	; 170
     98c:	50 e4       	ldi	r21, 0x40	; 64
     98e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__divsf3>
     992:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__fixunssfsi>
     996:	10 92 5e 02 	sts	0x025E, r1
     99a:	10 92 5f 02 	sts	0x025F, r1
     99e:	10 92 60 02 	sts	0x0260, r1
     9a2:	10 92 61 02 	sts	0x0261, r1
     9a6:	00 91 5e 02 	lds	r16, 0x025E
     9aa:	10 91 5f 02 	lds	r17, 0x025F
     9ae:	20 91 60 02 	lds	r18, 0x0260
     9b2:	30 91 61 02 	lds	r19, 0x0261
     9b6:	60 17       	cp	r22, r16
     9b8:	71 07       	cpc	r23, r17
     9ba:	82 07       	cpc	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	98 f7       	brcc	.-26     	; 0x9a6 <linear_distance_mm+0x2e>
     9c0:	b1 dd       	rcall	.-1182   	; 0x524 <stop>
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <forward_mm>:
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
     9ce:	9e dd       	rcall	.-1220   	; 0x50c <forward>
     9d0:	ce 01       	movw	r24, r28
     9d2:	d2 df       	rcall	.-92     	; 0x978 <linear_distance_mm>
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <back_mm>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	98 dd       	rcall	.-1232   	; 0x512 <back>
     9e2:	ce 01       	movw	r24, r28
     9e4:	c9 df       	rcall	.-110    	; 0x978 <linear_distance_mm>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <left_degrees>:
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	92 dd       	rcall	.-1244   	; 0x518 <left>
     9f4:	ce 01       	movw	r24, r28
     9f6:	6e df       	rcall	.-292    	; 0x8d4 <angle_rotate>
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <right_degrees>:
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
     a04:	8c dd       	rcall	.-1256   	; 0x51e <right>
     a06:	ce 01       	movw	r24, r28
     a08:	65 df       	rcall	.-310    	; 0x8d4 <angle_rotate>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <init_devices>:
     a10:	f8 94       	cli
     a12:	00 df       	rcall	.-512    	; 0x814 <port_init_poz>
     a14:	03 df       	rcall	.-506    	; 0x81c <left_position_encoder_interrupt_init>
     a16:	0b df       	rcall	.-490    	; 0x82e <right_position_encoder_interrupt_init>
     a18:	c7 dd       	rcall	.-1138   	; 0x5a8 <port_init>
     a1a:	f2 dd       	rcall	.-1052   	; 0x600 <color_sensor_pin_interrupt_init>
     a1c:	1f de       	rcall	.-962    	; 0x65c <adc_init>
     a1e:	5f dd       	rcall	.-1346   	; 0x4de <motion_pin_config>
     a20:	43 dd       	rcall	.-1402   	; 0x4a8 <timer5_init>
     a22:	9f dd       	rcall	.-1218   	; 0x562 <timer1_init>
     a24:	78 94       	sei
     a26:	08 95       	ret

00000a28 <node>:
     a28:	8c e3       	ldi	r24, 0x3C	; 60
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	cd cf       	rjmp	.-102    	; 0x9c8 <forward_mm>
     a2e:	08 95       	ret

00000a30 <Delay>:
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	8c 01       	movw	r16, r24
     a3a:	18 16       	cp	r1, r24
     a3c:	19 06       	cpc	r1, r25
     a3e:	8c f4       	brge	.+34     	; 0xa62 <Delay+0x32>
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	d0 e0       	ldi	r29, 0x00	; 0
     a44:	09 c0       	rjmp	.+18     	; 0xa58 <Delay+0x28>
     a46:	86 e6       	ldi	r24, 0x66	; 102
     a48:	9e e0       	ldi	r25, 0x0E	; 14
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <Delay+0x1a>
     a4e:	00 00       	nop
     a50:	21 96       	adiw	r28, 0x01	; 1
     a52:	c0 17       	cp	r28, r16
     a54:	d1 07       	cpc	r29, r17
     a56:	39 f0       	breq	.+14     	; 0xa66 <Delay+0x36>
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	b7 dd       	rcall	.-1170   	; 0x5ca <ADC_Conversion>
     a5c:	89 32       	cpi	r24, 0x29	; 41
     a5e:	98 f3       	brcs	.-26     	; 0xa46 <Delay+0x16>
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <Delay+0x36>
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	d0 e0       	ldi	r29, 0x00	; 0
     a66:	5e dd       	rcall	.-1348   	; 0x524 <stop>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	c0 17       	cp	r28, r16
     a6c:	d1 07       	cpc	r29, r17
     a6e:	0c f0       	brlt	.+2      	; 0xa72 <Delay+0x42>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <set_color>:
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	a5 dd       	rcall	.-1206   	; 0x5ca <ADC_Conversion>
     a80:	80 93 4d 02 	sts	0x024D, r24
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	a1 dd       	rcall	.-1214   	; 0x5ca <ADC_Conversion>
     a88:	80 93 4c 02 	sts	0x024C, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	9d dd       	rcall	.-1222   	; 0x5ca <ADC_Conversion>
     a90:	80 93 4b 02 	sts	0x024B, r24
     a94:	08 95       	ret

00000a96 <semiCorrect>:
     a96:	80 91 4c 02 	lds	r24, 0x024C
     a9a:	88 32       	cpi	r24, 0x28	; 40
     a9c:	58 f5       	brcc	.+86     	; 0xaf4 <semiCorrect+0x5e>
     a9e:	80 91 4d 02 	lds	r24, 0x024D
     aa2:	89 32       	cpi	r24, 0x29	; 41
     aa4:	98 f0       	brcs	.+38     	; 0xacc <semiCorrect+0x36>
     aa6:	90 91 4b 02 	lds	r25, 0x024B
     aaa:	98 32       	cpi	r25, 0x28	; 40
     aac:	78 f4       	brcc	.+30     	; 0xacc <semiCorrect+0x36>
     aae:	34 dd       	rcall	.-1432   	; 0x518 <left>
     ab0:	e5 df       	rcall	.-54     	; 0xa7c <set_color>
     ab2:	80 91 4c 02 	lds	r24, 0x024C
     ab6:	88 32       	cpi	r24, 0x28	; 40
     ab8:	e8 f4       	brcc	.+58     	; 0xaf4 <semiCorrect+0x5e>
     aba:	80 91 4d 02 	lds	r24, 0x024D
     abe:	89 32       	cpi	r24, 0x29	; 41
     ac0:	c8 f0       	brcs	.+50     	; 0xaf4 <semiCorrect+0x5e>
     ac2:	80 91 4b 02 	lds	r24, 0x024B
     ac6:	88 32       	cpi	r24, 0x28	; 40
     ac8:	90 f3       	brcs	.-28     	; 0xaae <semiCorrect+0x18>
     aca:	08 95       	ret
     acc:	90 91 4b 02 	lds	r25, 0x024B
     ad0:	99 32       	cpi	r25, 0x29	; 41
     ad2:	80 f0       	brcs	.+32     	; 0xaf4 <semiCorrect+0x5e>
     ad4:	88 32       	cpi	r24, 0x28	; 40
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <semiCorrect+0x5e>
     ad8:	22 dd       	rcall	.-1468   	; 0x51e <right>
     ada:	d0 df       	rcall	.-96     	; 0xa7c <set_color>
     adc:	80 91 4c 02 	lds	r24, 0x024C
     ae0:	88 32       	cpi	r24, 0x28	; 40
     ae2:	40 f4       	brcc	.+16     	; 0xaf4 <semiCorrect+0x5e>
     ae4:	80 91 4d 02 	lds	r24, 0x024D
     ae8:	88 32       	cpi	r24, 0x28	; 40
     aea:	20 f4       	brcc	.+8      	; 0xaf4 <semiCorrect+0x5e>
     aec:	80 91 4b 02 	lds	r24, 0x024B
     af0:	89 32       	cpi	r24, 0x29	; 41
     af2:	90 f7       	brcc	.-28     	; 0xad8 <semiCorrect+0x42>
     af4:	08 95       	ret

00000af6 <correct>:
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	90 93 75 02 	sts	0x0275, r25
     b06:	80 93 74 02 	sts	0x0274, r24
     b0a:	0c dd       	rcall	.-1512   	; 0x524 <stop>
     b0c:	80 91 4a 02 	lds	r24, 0x024A
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	09 f0       	breq	.+2      	; 0xb16 <correct+0x20>
     b14:	34 c0       	rjmp	.+104    	; 0xb7e <correct+0x88>
     b16:	10 92 4a 02 	sts	0x024A, r1
     b1a:	ce e3       	ldi	r28, 0x3E	; 62
     b1c:	d0 e0       	ldi	r29, 0x00	; 0
     b1e:	02 e0       	ldi	r16, 0x02	; 2
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	fd dc       	rcall	.-1542   	; 0x51e <right>
     b24:	02 30       	cpi	r16, 0x02	; 2
     b26:	11 05       	cpc	r17, r1
     b28:	31 f4       	brne	.+12     	; 0xb36 <correct+0x40>
     b2a:	8e e1       	ldi	r24, 0x1E	; 30
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	80 df       	rcall	.-256    	; 0xa30 <Delay>
     b30:	88 23       	and	r24, r24
     b32:	29 f0       	breq	.+10     	; 0xb3e <correct+0x48>
     b34:	58 c0       	rjmp	.+176    	; 0xbe6 <correct+0xf0>
     b36:	ce 01       	movw	r24, r28
     b38:	7b df       	rcall	.-266    	; 0xa30 <Delay>
     b3a:	81 11       	cpse	r24, r1
     b3c:	54 c0       	rjmp	.+168    	; 0xbe6 <correct+0xf0>
     b3e:	f2 dc       	rcall	.-1564   	; 0x524 <stop>
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	43 dd       	rcall	.-1402   	; 0x5ca <ADC_Conversion>
     b44:	89 32       	cpi	r24, 0x29	; 41
     b46:	08 f0       	brcs	.+2      	; 0xb4a <correct+0x54>
     b48:	4d c0       	rjmp	.+154    	; 0xbe4 <correct+0xee>
     b4a:	a5 df       	rcall	.-182    	; 0xa96 <semiCorrect>
     b4c:	e5 dc       	rcall	.-1590   	; 0x518 <left>
     b4e:	02 30       	cpi	r16, 0x02	; 2
     b50:	11 05       	cpc	r17, r1
     b52:	31 f4       	brne	.+12     	; 0xb60 <correct+0x6a>
     b54:	8c e3       	ldi	r24, 0x3C	; 60
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	6b df       	rcall	.-298    	; 0xa30 <Delay>
     b5a:	88 23       	and	r24, r24
     b5c:	29 f0       	breq	.+10     	; 0xb68 <correct+0x72>
     b5e:	43 c0       	rjmp	.+134    	; 0xbe6 <correct+0xf0>
     b60:	ce 01       	movw	r24, r28
     b62:	66 df       	rcall	.-308    	; 0xa30 <Delay>
     b64:	81 11       	cpse	r24, r1
     b66:	3f c0       	rjmp	.+126    	; 0xbe6 <correct+0xf0>
     b68:	dd dc       	rcall	.-1606   	; 0x524 <stop>
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	2e dd       	rcall	.-1444   	; 0x5ca <ADC_Conversion>
     b6e:	64 96       	adiw	r28, 0x14	; 20
     b70:	88 32       	cpi	r24, 0x28	; 40
     b72:	08 f4       	brcc	.+2      	; 0xb76 <correct+0x80>
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <correct+0xee>
     b76:	8f df       	rcall	.-226    	; 0xa96 <semiCorrect>
     b78:	0c 5e       	subi	r16, 0xEC	; 236
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	d2 cf       	rjmp	.-92     	; 0xb22 <correct+0x2c>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 4a 02 	sts	0x024A, r24
     b84:	ce e3       	ldi	r28, 0x3E	; 62
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	02 e0       	ldi	r16, 0x02	; 2
     b8a:	10 e0       	ldi	r17, 0x00	; 0
     b8c:	c5 dc       	rcall	.-1654   	; 0x518 <left>
     b8e:	02 30       	cpi	r16, 0x02	; 2
     b90:	11 05       	cpc	r17, r1
     b92:	31 f4       	brne	.+12     	; 0xba0 <correct+0xaa>
     b94:	8e e1       	ldi	r24, 0x1E	; 30
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	4b df       	rcall	.-362    	; 0xa30 <Delay>
     b9a:	88 23       	and	r24, r24
     b9c:	29 f0       	breq	.+10     	; 0xba8 <correct+0xb2>
     b9e:	23 c0       	rjmp	.+70     	; 0xbe6 <correct+0xf0>
     ba0:	ce 01       	movw	r24, r28
     ba2:	46 df       	rcall	.-372    	; 0xa30 <Delay>
     ba4:	81 11       	cpse	r24, r1
     ba6:	1f c0       	rjmp	.+62     	; 0xbe6 <correct+0xf0>
     ba8:	bd dc       	rcall	.-1670   	; 0x524 <stop>
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e dd       	rcall	.-1508   	; 0x5ca <ADC_Conversion>
     bae:	89 32       	cpi	r24, 0x29	; 41
     bb0:	c8 f4       	brcc	.+50     	; 0xbe4 <correct+0xee>
     bb2:	71 df       	rcall	.-286    	; 0xa96 <semiCorrect>
     bb4:	b4 dc       	rcall	.-1688   	; 0x51e <right>
     bb6:	02 30       	cpi	r16, 0x02	; 2
     bb8:	11 05       	cpc	r17, r1
     bba:	31 f4       	brne	.+12     	; 0xbc8 <correct+0xd2>
     bbc:	8c e3       	ldi	r24, 0x3C	; 60
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	37 df       	rcall	.-402    	; 0xa30 <Delay>
     bc2:	88 23       	and	r24, r24
     bc4:	29 f0       	breq	.+10     	; 0xbd0 <correct+0xda>
     bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <correct+0xf0>
     bc8:	ce 01       	movw	r24, r28
     bca:	32 df       	rcall	.-412    	; 0xa30 <Delay>
     bcc:	81 11       	cpse	r24, r1
     bce:	0b c0       	rjmp	.+22     	; 0xbe6 <correct+0xf0>
     bd0:	a9 dc       	rcall	.-1710   	; 0x524 <stop>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	fa dc       	rcall	.-1548   	; 0x5ca <ADC_Conversion>
     bd6:	64 96       	adiw	r28, 0x14	; 20
     bd8:	88 32       	cpi	r24, 0x28	; 40
     bda:	20 f0       	brcs	.+8      	; 0xbe4 <correct+0xee>
     bdc:	5c df       	rcall	.-328    	; 0xa96 <semiCorrect>
     bde:	0c 5e       	subi	r16, 0xEC	; 236
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	d4 cf       	rjmp	.-88     	; 0xb8c <correct+0x96>
     be4:	9f dc       	rcall	.-1730   	; 0x524 <stop>
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <noNatak>:
     bf0:	86 e9       	ldi	r24, 0x96	; 150
     bf2:	80 93 28 01 	sts	0x0128, r24
     bf6:	80 93 2a 01 	sts	0x012A, r24
     bfa:	80 91 4c 02 	lds	r24, 0x024C
     bfe:	88 32       	cpi	r24, 0x28	; 40
     c00:	70 f5       	brcc	.+92     	; 0xc5e <noNatak+0x6e>
     c02:	80 91 4d 02 	lds	r24, 0x024D
     c06:	89 32       	cpi	r24, 0x29	; 41
     c08:	98 f0       	brcs	.+38     	; 0xc30 <noNatak+0x40>
     c0a:	90 91 4b 02 	lds	r25, 0x024B
     c0e:	98 32       	cpi	r25, 0x28	; 40
     c10:	78 f4       	brcc	.+30     	; 0xc30 <noNatak+0x40>
     c12:	82 dc       	rcall	.-1788   	; 0x518 <left>
     c14:	33 df       	rcall	.-410    	; 0xa7c <set_color>
     c16:	80 91 4c 02 	lds	r24, 0x024C
     c1a:	88 32       	cpi	r24, 0x28	; 40
     c1c:	98 f5       	brcc	.+102    	; 0xc84 <noNatak+0x94>
     c1e:	80 91 4d 02 	lds	r24, 0x024D
     c22:	89 32       	cpi	r24, 0x29	; 41
     c24:	78 f1       	brcs	.+94     	; 0xc84 <noNatak+0x94>
     c26:	80 91 4b 02 	lds	r24, 0x024B
     c2a:	88 32       	cpi	r24, 0x28	; 40
     c2c:	90 f3       	brcs	.-28     	; 0xc12 <noNatak+0x22>
     c2e:	2a c0       	rjmp	.+84     	; 0xc84 <noNatak+0x94>
     c30:	90 91 4b 02 	lds	r25, 0x024B
     c34:	99 32       	cpi	r25, 0x29	; 41
     c36:	88 f0       	brcs	.+34     	; 0xc5a <noNatak+0x6a>
     c38:	88 32       	cpi	r24, 0x28	; 40
     c3a:	78 f4       	brcc	.+30     	; 0xc5a <noNatak+0x6a>
     c3c:	70 dc       	rcall	.-1824   	; 0x51e <right>
     c3e:	1e df       	rcall	.-452    	; 0xa7c <set_color>
     c40:	80 91 4c 02 	lds	r24, 0x024C
     c44:	88 32       	cpi	r24, 0x28	; 40
     c46:	f0 f4       	brcc	.+60     	; 0xc84 <noNatak+0x94>
     c48:	80 91 4d 02 	lds	r24, 0x024D
     c4c:	88 32       	cpi	r24, 0x28	; 40
     c4e:	d0 f4       	brcc	.+52     	; 0xc84 <noNatak+0x94>
     c50:	80 91 4b 02 	lds	r24, 0x024B
     c54:	89 32       	cpi	r24, 0x29	; 41
     c56:	90 f7       	brcc	.-28     	; 0xc3c <noNatak+0x4c>
     c58:	15 c0       	rjmp	.+42     	; 0xc84 <noNatak+0x94>
     c5a:	4d df       	rcall	.-358    	; 0xaf6 <correct>
     c5c:	13 c0       	rjmp	.+38     	; 0xc84 <noNatak+0x94>
     c5e:	80 91 4d 02 	lds	r24, 0x024D
     c62:	89 32       	cpi	r24, 0x29	; 41
     c64:	30 f0       	brcs	.+12     	; 0xc72 <noNatak+0x82>
     c66:	90 91 4b 02 	lds	r25, 0x024B
     c6a:	98 32       	cpi	r25, 0x28	; 40
     c6c:	10 f4       	brcc	.+4      	; 0xc72 <noNatak+0x82>
     c6e:	dc ce       	rjmp	.-584    	; 0xa28 <node>
     c70:	08 95       	ret
     c72:	88 32       	cpi	r24, 0x28	; 40
     c74:	30 f4       	brcc	.+12     	; 0xc82 <noNatak+0x92>
     c76:	80 91 4b 02 	lds	r24, 0x024B
     c7a:	89 32       	cpi	r24, 0x29	; 41
     c7c:	10 f0       	brcs	.+4      	; 0xc82 <noNatak+0x92>
     c7e:	d4 ce       	rjmp	.-600    	; 0xa28 <node>
     c80:	08 95       	ret
     c82:	39 df       	rcall	.-398    	; 0xaf6 <correct>
     c84:	4f cc       	rjmp	.-1890   	; 0x524 <stop>
     c86:	08 95       	ret

00000c88 <forwardJaa>:
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	08 e2       	ldi	r16, 0x28	; 40
     c94:	11 e0       	ldi	r17, 0x01	; 1
     c96:	0f 2e       	mov	r0, r31
     c98:	f0 ef       	ldi	r31, 0xF0	; 240
     c9a:	ff 2e       	mov	r15, r31
     c9c:	f0 2d       	mov	r31, r0
     c9e:	ca e2       	ldi	r28, 0x2A	; 42
     ca0:	d1 e0       	ldi	r29, 0x01	; 1
     ca2:	34 dc       	rcall	.-1944   	; 0x50c <forward>
     ca4:	eb de       	rcall	.-554    	; 0xa7c <set_color>
     ca6:	80 91 4c 02 	lds	r24, 0x024C
     caa:	89 32       	cpi	r24, 0x29	; 41
     cac:	50 f0       	brcs	.+20     	; 0xcc2 <forwardJaa+0x3a>
     cae:	80 91 4d 02 	lds	r24, 0x024D
     cb2:	89 32       	cpi	r24, 0x29	; 41
     cb4:	20 f4       	brcc	.+8      	; 0xcbe <forwardJaa+0x36>
     cb6:	80 91 4b 02 	lds	r24, 0x024B
     cba:	89 32       	cpi	r24, 0x29	; 41
     cbc:	10 f0       	brcs	.+4      	; 0xcc2 <forwardJaa+0x3a>
     cbe:	b4 de       	rcall	.-664    	; 0xa28 <node>
     cc0:	11 c0       	rjmp	.+34     	; 0xce4 <forwardJaa+0x5c>
     cc2:	f8 01       	movw	r30, r16
     cc4:	f0 82       	st	Z, r15
     cc6:	f8 82       	st	Y, r15
     cc8:	80 91 4c 02 	lds	r24, 0x024C
     ccc:	89 32       	cpi	r24, 0x29	; 41
     cce:	40 f0       	brcs	.+16     	; 0xce0 <forwardJaa+0x58>
     cd0:	80 91 4d 02 	lds	r24, 0x024D
     cd4:	88 32       	cpi	r24, 0x28	; 40
     cd6:	20 f4       	brcc	.+8      	; 0xce0 <forwardJaa+0x58>
     cd8:	80 91 4b 02 	lds	r24, 0x024B
     cdc:	88 32       	cpi	r24, 0x28	; 40
     cde:	08 f3       	brcs	.-62     	; 0xca2 <forwardJaa+0x1a>
     ce0:	87 df       	rcall	.-242    	; 0xbf0 <noNatak>
     ce2:	d2 df       	rcall	.-92     	; 0xc88 <forwardJaa>
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	08 95       	ret

00000cf0 <lower>:
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	e9 f4       	brne	.+58     	; 0xd2e <lower+0x3e>
     cf4:	8a e5       	ldi	r24, 0x5A	; 90
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 4f 02 	sts	0x024F, r25
     cfc:	80 93 4e 02 	sts	0x024E, r24
     d00:	d3 dc       	rcall	.-1626   	; 0x6a8 <servo_2>
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	9f e8       	ldi	r25, 0x8F	; 143
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <lower+0x16>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <lower+0x1c>
     d0c:	00 00       	nop
     d0e:	80 91 4e 02 	lds	r24, 0x024E
     d12:	90 91 4f 02 	lds	r25, 0x024F
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	90 93 4f 02 	sts	0x024F, r25
     d1c:	80 93 4e 02 	sts	0x024E, r24
     d20:	8c 33       	cpi	r24, 0x3C	; 60
     d22:	91 05       	cpc	r25, r1
     d24:	6c f7       	brge	.-38     	; 0xd00 <lower+0x10>
     d26:	8c e3       	ldi	r24, 0x3C	; 60
     d28:	80 93 00 02 	sts	0x0200, r24
     d2c:	08 95       	ret
     d2e:	8a e5       	ldi	r24, 0x5A	; 90
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 4f 02 	sts	0x024F, r25
     d36:	80 93 4e 02 	sts	0x024E, r24
     d3a:	b6 dc       	rcall	.-1684   	; 0x6a8 <servo_2>
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	9f e8       	ldi	r25, 0x8F	; 143
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <lower+0x50>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <lower+0x56>
     d46:	00 00       	nop
     d48:	80 91 4e 02 	lds	r24, 0x024E
     d4c:	90 91 4f 02 	lds	r25, 0x024F
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	90 93 4f 02 	sts	0x024F, r25
     d56:	80 93 4e 02 	sts	0x024E, r24
     d5a:	89 37       	cpi	r24, 0x79	; 121
     d5c:	91 05       	cpc	r25, r1
     d5e:	6c f3       	brlt	.-38     	; 0xd3a <lower+0x4a>
     d60:	88 e7       	ldi	r24, 0x78	; 120
     d62:	80 93 00 02 	sts	0x0200, r24
     d66:	08 95       	ret

00000d68 <elevate>:
     d68:	80 91 00 02 	lds	r24, 0x0200
     d6c:	8c 33       	cpi	r24, 0x3C	; 60
     d6e:	d1 f4       	brne	.+52     	; 0xda4 <elevate+0x3c>
     d70:	8c e3       	ldi	r24, 0x3C	; 60
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	90 93 4f 02 	sts	0x024F, r25
     d78:	80 93 4e 02 	sts	0x024E, r24
     d7c:	95 dc       	rcall	.-1750   	; 0x6a8 <servo_2>
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	9f e8       	ldi	r25, 0x8F	; 143
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <elevate+0x1a>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <elevate+0x20>
     d88:	00 00       	nop
     d8a:	80 91 4e 02 	lds	r24, 0x024E
     d8e:	90 91 4f 02 	lds	r25, 0x024F
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	90 93 4f 02 	sts	0x024F, r25
     d98:	80 93 4e 02 	sts	0x024E, r24
     d9c:	8b 35       	cpi	r24, 0x5B	; 91
     d9e:	91 05       	cpc	r25, r1
     da0:	d4 f4       	brge	.+52     	; 0xdd6 <elevate+0x6e>
     da2:	ec cf       	rjmp	.-40     	; 0xd7c <elevate+0x14>
     da4:	88 e7       	ldi	r24, 0x78	; 120
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	90 93 4f 02 	sts	0x024F, r25
     dac:	80 93 4e 02 	sts	0x024E, r24
     db0:	7b dc       	rcall	.-1802   	; 0x6a8 <servo_2>
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	9f e8       	ldi	r25, 0x8F	; 143
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <elevate+0x4e>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <elevate+0x54>
     dbc:	00 00       	nop
     dbe:	80 91 4e 02 	lds	r24, 0x024E
     dc2:	90 91 4f 02 	lds	r25, 0x024F
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	90 93 4f 02 	sts	0x024F, r25
     dcc:	80 93 4e 02 	sts	0x024E, r24
     dd0:	8a 35       	cpi	r24, 0x5A	; 90
     dd2:	91 05       	cpc	r25, r1
     dd4:	6c f7       	brge	.-38     	; 0xdb0 <elevate+0x48>
     dd6:	8a e5       	ldi	r24, 0x5A	; 90
     dd8:	80 93 00 02 	sts	0x0200, r24
     ddc:	08 95       	ret

00000dde <open>:
     dde:	81 11       	cpse	r24, r1
     de0:	1a c0       	rjmp	.+52     	; 0xe16 <open+0x38>
     de2:	87 e3       	ldi	r24, 0x37	; 55
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	90 93 4f 02 	sts	0x024F, r25
     dea:	80 93 4e 02 	sts	0x024E, r24
     dee:	75 dc       	rcall	.-1814   	; 0x6da <servo_3>
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	9f e8       	ldi	r25, 0x8F	; 143
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <open+0x16>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <open+0x1c>
     dfa:	00 00       	nop
     dfc:	80 91 4e 02 	lds	r24, 0x024E
     e00:	90 91 4f 02 	lds	r25, 0x024F
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	90 93 4f 02 	sts	0x024F, r25
     e0a:	80 93 4e 02 	sts	0x024E, r24
     e0e:	18 16       	cp	r1, r24
     e10:	19 06       	cpc	r1, r25
     e12:	e4 f4       	brge	.+56     	; 0xe4c <open+0x6e>
     e14:	ec cf       	rjmp	.-40     	; 0xdee <open+0x10>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	c9 f4       	brne	.+50     	; 0xe4c <open+0x6e>
     e1a:	87 e3       	ldi	r24, 0x37	; 55
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 4f 02 	sts	0x024F, r25
     e22:	80 93 4e 02 	sts	0x024E, r24
     e26:	27 dc       	rcall	.-1970   	; 0x676 <servo_1>
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	9f e8       	ldi	r25, 0x8F	; 143
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <open+0x4e>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <open+0x54>
     e32:	00 00       	nop
     e34:	80 91 4e 02 	lds	r24, 0x024E
     e38:	90 91 4f 02 	lds	r25, 0x024F
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	90 93 4f 02 	sts	0x024F, r25
     e42:	80 93 4e 02 	sts	0x024E, r24
     e46:	18 16       	cp	r1, r24
     e48:	19 06       	cpc	r1, r25
     e4a:	6c f3       	brlt	.-38     	; 0xe26 <open+0x48>
     e4c:	08 95       	ret

00000e4e <close>:
     e4e:	81 11       	cpse	r24, r1
     e50:	18 c0       	rjmp	.+48     	; 0xe82 <close+0x34>
     e52:	10 92 4f 02 	sts	0x024F, r1
     e56:	10 92 4e 02 	sts	0x024E, r1
     e5a:	3f dc       	rcall	.-1922   	; 0x6da <servo_3>
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	9f e8       	ldi	r25, 0x8F	; 143
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <close+0x12>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <close+0x18>
     e66:	00 00       	nop
     e68:	80 91 4e 02 	lds	r24, 0x024E
     e6c:	90 91 4f 02 	lds	r25, 0x024F
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	90 93 4f 02 	sts	0x024F, r25
     e76:	80 93 4e 02 	sts	0x024E, r24
     e7a:	87 33       	cpi	r24, 0x37	; 55
     e7c:	91 05       	cpc	r25, r1
     e7e:	dc f4       	brge	.+54     	; 0xeb6 <close+0x68>
     e80:	ec cf       	rjmp	.-40     	; 0xe5a <close+0xc>
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	c1 f4       	brne	.+48     	; 0xeb6 <close+0x68>
     e86:	10 92 4f 02 	sts	0x024F, r1
     e8a:	10 92 4e 02 	sts	0x024E, r1
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	f2 db       	rcall	.-2076   	; 0x676 <servo_1>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f e8       	ldi	r25, 0x8F	; 143
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <close+0x48>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <close+0x4e>
     e9c:	00 00       	nop
     e9e:	80 91 4e 02 	lds	r24, 0x024E
     ea2:	90 91 4f 02 	lds	r25, 0x024F
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	90 93 4f 02 	sts	0x024F, r25
     eac:	80 93 4e 02 	sts	0x024E, r24
     eb0:	87 33       	cpi	r24, 0x37	; 55
     eb2:	91 05       	cpc	r25, r1
     eb4:	6c f3       	brlt	.-38     	; 0xe90 <close+0x42>
     eb6:	08 95       	ret

00000eb8 <buzzer>:
     eb8:	80 db       	rcall	.-2304   	; 0x5ba <buzzer_on>
     eba:	2f ef       	ldi	r18, 0xFF	; 255
     ebc:	8f e7       	ldi	r24, 0x7F	; 127
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	21 50       	subi	r18, 0x01	; 1
     ec2:	80 40       	sbci	r24, 0x00	; 0
     ec4:	90 40       	sbci	r25, 0x00	; 0
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <buzzer+0x8>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <buzzer+0x12>
     eca:	00 00       	nop
     ecc:	7a cb       	rjmp	.-2316   	; 0x5c2 <buzzer_off>
     ece:	08 95       	ret

00000ed0 <lcd>:
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	6c d9       	rcall	.-3368   	; 0x1b2 <lcd_wr_command>
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	d5 d9       	rcall	.-3158   	; 0x28a <lcd_cursor>
     ee0:	ce 01       	movw	r24, r28
     ee2:	c5 d9       	rcall	.-3190   	; 0x26e <lcd_string>
     ee4:	e9 df       	rcall	.-46     	; 0xeb8 <buzzer>
     ee6:	2f ef       	ldi	r18, 0xFF	; 255
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	9c e2       	ldi	r25, 0x2C	; 44
     eec:	21 50       	subi	r18, 0x01	; 1
     eee:	80 40       	sbci	r24, 0x00	; 0
     ef0:	90 40       	sbci	r25, 0x00	; 0
     ef2:	e1 f7       	brne	.-8      	; 0xeec <lcd+0x1c>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <lcd+0x26>
     ef6:	00 00       	nop
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <front>:
     efe:	c4 de       	rcall	.-632    	; 0xc88 <forwardJaa>
     f00:	80 91 78 02 	lds	r24, 0x0278
     f04:	90 91 79 02 	lds	r25, 0x0279
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	90 93 79 02 	sts	0x0279, r25
     f0e:	80 93 78 02 	sts	0x0278, r24
     f12:	08 95       	ret

00000f14 <turnRight>:
     f14:	80 91 50 02 	lds	r24, 0x0250
     f18:	90 91 51 02 	lds	r25, 0x0251
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 05       	cpc	r25, r1
     f20:	39 f4       	brne	.+14     	; 0xf30 <turnRight+0x1c>
     f22:	80 91 52 02 	lds	r24, 0x0252
     f26:	90 91 53 02 	lds	r25, 0x0253
     f2a:	02 97       	sbiw	r24, 0x02	; 2
     f2c:	98 f4       	brcc	.+38     	; 0xf54 <turnRight+0x40>
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <turnRight+0x2e>
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	81 f4       	brne	.+32     	; 0xf54 <turnRight+0x40>
     f34:	80 91 52 02 	lds	r24, 0x0252
     f38:	90 91 53 02 	lds	r25, 0x0253
     f3c:	02 97       	sbiw	r24, 0x02	; 2
     f3e:	02 97       	sbiw	r24, 0x02	; 2
     f40:	48 f4       	brcc	.+18     	; 0xf54 <turnRight+0x40>
     f42:	86 e9       	ldi	r24, 0x96	; 150
     f44:	80 93 28 01 	sts	0x0128, r24
     f48:	80 93 2a 01 	sts	0x012A, r24
     f4c:	8a e5       	ldi	r24, 0x5A	; 90
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	56 dd       	rcall	.-1364   	; 0x9fe <right_degrees>
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <turnRight+0x5e>
     f54:	8e e1       	ldi	r24, 0x1E	; 30
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	52 dd       	rcall	.-1372   	; 0x9fe <right_degrees>
     f5a:	86 e9       	ldi	r24, 0x96	; 150
     f5c:	80 93 28 01 	sts	0x0128, r24
     f60:	80 93 2a 01 	sts	0x012A, r24
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <turnRight+0x54>
     f66:	db da       	rcall	.-2634   	; 0x51e <right>
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	2f db       	rcall	.-2466   	; 0x5ca <ADC_Conversion>
     f6c:	86 34       	cpi	r24, 0x46	; 70
     f6e:	d8 f3       	brcs	.-10     	; 0xf66 <turnRight+0x52>
     f70:	d9 da       	rcall	.-2638   	; 0x524 <stop>
     f72:	8f e0       	ldi	r24, 0x0F	; 15
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	ac df       	rcall	.-168    	; 0xed0 <lcd>
     f78:	80 91 50 02 	lds	r24, 0x0250
     f7c:	90 91 51 02 	lds	r25, 0x0251
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	83 70       	andi	r24, 0x03	; 3
     f84:	90 78       	andi	r25, 0x80	; 128
     f86:	99 23       	and	r25, r25
     f88:	24 f4       	brge	.+8      	; 0xf92 <turnRight+0x7e>
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	8c 6f       	ori	r24, 0xFC	; 252
     f8e:	9f 6f       	ori	r25, 0xFF	; 255
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	90 93 51 02 	sts	0x0251, r25
     f96:	80 93 50 02 	sts	0x0250, r24
     f9a:	80 91 9d 02 	lds	r24, 0x029D
     f9e:	90 91 9e 02 	lds	r25, 0x029E
     fa2:	86 5a       	subi	r24, 0xA6	; 166
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	90 93 9e 02 	sts	0x029E, r25
     faa:	80 93 9d 02 	sts	0x029D, r24
     fae:	08 95       	ret

00000fb0 <turnLeft>:
     fb0:	80 91 50 02 	lds	r24, 0x0250
     fb4:	90 91 51 02 	lds	r25, 0x0251
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	39 f4       	brne	.+14     	; 0xfcc <turnLeft+0x1c>
     fbe:	80 91 52 02 	lds	r24, 0x0252
     fc2:	90 91 53 02 	lds	r25, 0x0253
     fc6:	02 97       	sbiw	r24, 0x02	; 2
     fc8:	98 f4       	brcc	.+38     	; 0xff0 <turnLeft+0x40>
     fca:	09 c0       	rjmp	.+18     	; 0xfde <turnLeft+0x2e>
     fcc:	03 97       	sbiw	r24, 0x03	; 3
     fce:	81 f4       	brne	.+32     	; 0xff0 <turnLeft+0x40>
     fd0:	80 91 52 02 	lds	r24, 0x0252
     fd4:	90 91 53 02 	lds	r25, 0x0253
     fd8:	02 97       	sbiw	r24, 0x02	; 2
     fda:	02 97       	sbiw	r24, 0x02	; 2
     fdc:	48 f4       	brcc	.+18     	; 0xff0 <turnLeft+0x40>
     fde:	86 e9       	ldi	r24, 0x96	; 150
     fe0:	80 93 28 01 	sts	0x0128, r24
     fe4:	80 93 2a 01 	sts	0x012A, r24
     fe8:	8a e5       	ldi	r24, 0x5A	; 90
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	ff dc       	rcall	.-1538   	; 0x9ec <left_degrees>
     fee:	0f c0       	rjmp	.+30     	; 0x100e <turnLeft+0x5e>
     ff0:	8e e1       	ldi	r24, 0x1E	; 30
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	fb dc       	rcall	.-1546   	; 0x9ec <left_degrees>
     ff6:	86 e9       	ldi	r24, 0x96	; 150
     ff8:	80 93 28 01 	sts	0x0128, r24
     ffc:	80 93 2a 01 	sts	0x012A, r24
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <turnLeft+0x54>
    1002:	8a da       	rcall	.-2796   	; 0x518 <left>
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	e1 da       	rcall	.-2622   	; 0x5ca <ADC_Conversion>
    1008:	86 34       	cpi	r24, 0x46	; 70
    100a:	d8 f3       	brcs	.-10     	; 0x1002 <turnLeft+0x52>
    100c:	8b da       	rcall	.-2794   	; 0x524 <stop>
    100e:	8a e1       	ldi	r24, 0x1A	; 26
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	5e df       	rcall	.-324    	; 0xed0 <lcd>
    1014:	80 91 50 02 	lds	r24, 0x0250
    1018:	90 91 51 02 	lds	r25, 0x0251
    101c:	03 96       	adiw	r24, 0x03	; 3
    101e:	83 70       	andi	r24, 0x03	; 3
    1020:	90 78       	andi	r25, 0x80	; 128
    1022:	99 23       	and	r25, r25
    1024:	24 f4       	brge	.+8      	; 0x102e <turnLeft+0x7e>
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	8c 6f       	ori	r24, 0xFC	; 252
    102a:	9f 6f       	ori	r25, 0xFF	; 255
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	90 93 51 02 	sts	0x0251, r25
    1032:	80 93 50 02 	sts	0x0250, r24
    1036:	80 91 9d 02 	lds	r24, 0x029D
    103a:	90 91 9e 02 	lds	r25, 0x029E
    103e:	86 5a       	subi	r24, 0xA6	; 166
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	90 93 9e 02 	sts	0x029E, r25
    1046:	80 93 9d 02 	sts	0x029D, r24
    104a:	08 95       	ret

0000104c <turn>:
    104c:	80 91 50 02 	lds	r24, 0x0250
    1050:	90 91 51 02 	lds	r25, 0x0251
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	81 f4       	brne	.+32     	; 0x1078 <turn+0x2c>
    1058:	80 91 52 02 	lds	r24, 0x0252
    105c:	90 91 53 02 	lds	r25, 0x0253
    1060:	02 97       	sbiw	r24, 0x02	; 2
    1062:	02 97       	sbiw	r24, 0x02	; 2
    1064:	d0 f4       	brcc	.+52     	; 0x109a <turn+0x4e>
    1066:	86 e9       	ldi	r24, 0x96	; 150
    1068:	80 93 28 01 	sts	0x0128, r24
    106c:	80 93 2a 01 	sts	0x012A, r24
    1070:	84 eb       	ldi	r24, 0xB4	; 180
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	bb dc       	rcall	.-1674   	; 0x9ec <left_degrees>
    1076:	20 c0       	rjmp	.+64     	; 0x10b8 <turn+0x6c>
    1078:	02 97       	sbiw	r24, 0x02	; 2
    107a:	79 f4       	brne	.+30     	; 0x109a <turn+0x4e>
    107c:	80 91 52 02 	lds	r24, 0x0252
    1080:	90 91 53 02 	lds	r25, 0x0253
    1084:	02 97       	sbiw	r24, 0x02	; 2
    1086:	48 f4       	brcc	.+18     	; 0x109a <turn+0x4e>
    1088:	86 e9       	ldi	r24, 0x96	; 150
    108a:	80 93 28 01 	sts	0x0128, r24
    108e:	80 93 2a 01 	sts	0x012A, r24
    1092:	84 eb       	ldi	r24, 0xB4	; 180
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	aa dc       	rcall	.-1708   	; 0x9ec <left_degrees>
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <turn+0x6c>
    109a:	86 e9       	ldi	r24, 0x96	; 150
    109c:	80 93 28 01 	sts	0x0128, r24
    10a0:	80 93 2a 01 	sts	0x012A, r24
    10a4:	86 e9       	ldi	r24, 0x96	; 150
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a1 dc       	rcall	.-1726   	; 0x9ec <left_degrees>
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <turn+0x62>
    10ac:	35 da       	rcall	.-2966   	; 0x518 <left>
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	8c da       	rcall	.-2792   	; 0x5ca <ADC_Conversion>
    10b2:	86 34       	cpi	r24, 0x46	; 70
    10b4:	d8 f3       	brcs	.-10     	; 0x10ac <turn+0x60>
    10b6:	36 da       	rcall	.-2964   	; 0x524 <stop>
    10b8:	8f e1       	ldi	r24, 0x1F	; 31
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	09 df       	rcall	.-494    	; 0xed0 <lcd>
    10be:	80 91 50 02 	lds	r24, 0x0250
    10c2:	90 91 51 02 	lds	r25, 0x0251
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	83 70       	andi	r24, 0x03	; 3
    10ca:	90 78       	andi	r25, 0x80	; 128
    10cc:	99 23       	and	r25, r25
    10ce:	24 f4       	brge	.+8      	; 0x10d8 <turn+0x8c>
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	8c 6f       	ori	r24, 0xFC	; 252
    10d4:	9f 6f       	ori	r25, 0xFF	; 255
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	90 93 51 02 	sts	0x0251, r25
    10dc:	80 93 50 02 	sts	0x0250, r24
    10e0:	80 91 9d 02 	lds	r24, 0x029D
    10e4:	90 91 9e 02 	lds	r25, 0x029E
    10e8:	8c 54       	subi	r24, 0x4C	; 76
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	90 93 9e 02 	sts	0x029E, r25
    10f0:	80 93 9d 02 	sts	0x029D, r24
    10f4:	08 95       	ret

000010f6 <traverseToSort>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	80 91 56 02 	lds	r24, 0x0256
    1100:	90 91 57 02 	lds	r25, 0x0257
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	21 f4       	brne	.+8      	; 0x1110 <traverseToSort+0x1a>
    1108:	10 92 57 02 	sts	0x0257, r1
    110c:	10 92 56 02 	sts	0x0256, r1
    1110:	ce 01       	movw	r24, r28
    1112:	04 97       	sbiw	r24, 0x04	; 4
    1114:	02 97       	sbiw	r24, 0x02	; 2
    1116:	88 f5       	brcc	.+98     	; 0x117a <traverseToSort+0x84>
    1118:	c4 30       	cpi	r28, 0x04	; 4
    111a:	d1 05       	cpc	r29, r1
    111c:	39 f4       	brne	.+14     	; 0x112c <traverseToSort+0x36>
    111e:	80 91 50 02 	lds	r24, 0x0250
    1122:	90 91 51 02 	lds	r25, 0x0251
    1126:	89 2b       	or	r24, r25
    1128:	51 f0       	breq	.+20     	; 0x113e <traverseToSort+0x48>
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <traverseToSort+0x4c>
    112c:	c5 30       	cpi	r28, 0x05	; 5
    112e:	d1 05       	cpc	r29, r1
    1130:	41 f4       	brne	.+16     	; 0x1142 <traverseToSort+0x4c>
    1132:	80 91 50 02 	lds	r24, 0x0250
    1136:	90 91 51 02 	lds	r25, 0x0251
    113a:	02 97       	sbiw	r24, 0x02	; 2
    113c:	11 f4       	brne	.+4      	; 0x1142 <traverseToSort+0x4c>
    113e:	ea de       	rcall	.-556    	; 0xf14 <turnRight>
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <traverseToSort+0x4e>
    1142:	36 df       	rcall	.-404    	; 0xfb0 <turnLeft>
    1144:	dc de       	rcall	.-584    	; 0xefe <front>
    1146:	db de       	rcall	.-586    	; 0xefe <front>
    1148:	24 97       	sbiw	r28, 0x04	; 4
    114a:	39 f4       	brne	.+14     	; 0x115a <traverseToSort+0x64>
    114c:	85 e0       	ldi	r24, 0x05	; 5
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	90 93 53 02 	sts	0x0253, r25
    1154:	80 93 52 02 	sts	0x0252, r24
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <traverseToSort+0x70>
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	90 93 53 02 	sts	0x0253, r25
    1162:	80 93 52 02 	sts	0x0252, r24
    1166:	80 91 78 02 	lds	r24, 0x0278
    116a:	90 91 79 02 	lds	r25, 0x0279
    116e:	02 96       	adiw	r24, 0x02	; 2
    1170:	90 93 79 02 	sts	0x0279, r25
    1174:	80 93 78 02 	sts	0x0278, r24
    1178:	45 c0       	rjmp	.+138    	; 0x1204 <traverseToSort+0x10e>
    117a:	80 91 50 02 	lds	r24, 0x0250
    117e:	90 91 51 02 	lds	r25, 0x0251
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	39 f4       	brne	.+14     	; 0x1196 <traverseToSort+0xa0>
    1188:	80 91 52 02 	lds	r24, 0x0252
    118c:	90 91 53 02 	lds	r25, 0x0253
    1190:	02 97       	sbiw	r24, 0x02	; 2
    1192:	78 f4       	brcc	.+30     	; 0x11b2 <traverseToSort+0xbc>
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <traverseToSort+0xb2>
    1196:	03 97       	sbiw	r24, 0x03	; 3
    1198:	99 f4       	brne	.+38     	; 0x11c0 <traverseToSort+0xca>
    119a:	80 91 52 02 	lds	r24, 0x0252
    119e:	90 91 53 02 	lds	r25, 0x0253
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	91 05       	cpc	r25, r1
    11a6:	11 f4       	brne	.+4      	; 0x11ac <traverseToSort+0xb6>
    11a8:	b5 de       	rcall	.-662    	; 0xf14 <turnRight>
    11aa:	0a c0       	rjmp	.+20     	; 0x11c0 <traverseToSort+0xca>
    11ac:	02 97       	sbiw	r24, 0x02	; 2
    11ae:	40 f4       	brcc	.+16     	; 0x11c0 <traverseToSort+0xca>
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <traverseToSort+0xc8>
    11b2:	80 91 52 02 	lds	r24, 0x0252
    11b6:	90 91 53 02 	lds	r25, 0x0253
    11ba:	02 97       	sbiw	r24, 0x02	; 2
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <traverseToSort+0xca>
    11be:	f8 de       	rcall	.-528    	; 0xfb0 <turnLeft>
    11c0:	22 97       	sbiw	r28, 0x02	; 2
    11c2:	3c f4       	brge	.+14     	; 0x11d2 <traverseToSort+0xdc>
    11c4:	80 91 50 02 	lds	r24, 0x0250
    11c8:	90 91 51 02 	lds	r25, 0x0251
    11cc:	89 2b       	or	r24, r25
    11ce:	39 f0       	breq	.+14     	; 0x11de <traverseToSort+0xe8>
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <traverseToSort+0xea>
    11d2:	80 91 50 02 	lds	r24, 0x0250
    11d6:	90 91 51 02 	lds	r25, 0x0251
    11da:	02 97       	sbiw	r24, 0x02	; 2
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <traverseToSort+0xea>
    11de:	36 df       	rcall	.-404    	; 0x104c <turn>
    11e0:	8e de       	rcall	.-740    	; 0xefe <front>
    11e2:	80 91 89 02 	lds	r24, 0x0289
    11e6:	90 91 8a 02 	lds	r25, 0x028A
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 78       	andi	r25, 0x80	; 128
    11ee:	99 23       	and	r25, r25
    11f0:	24 f4       	brge	.+8      	; 0x11fa <traverseToSort+0x104>
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	8e 6f       	ori	r24, 0xFE	; 254
    11f6:	9f 6f       	ori	r25, 0xFF	; 255
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	04 96       	adiw	r24, 0x04	; 4
    11fc:	90 93 53 02 	sts	0x0253, r25
    1200:	80 93 52 02 	sts	0x0252, r24
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <scan>:
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	8a da       	rcall	.-2796   	; 0x724 <red_read>
    1210:	d8 da       	rcall	.-2640   	; 0x7c2 <blue_read>
    1212:	b4 da       	rcall	.-2712   	; 0x77c <green_read>
    1214:	2f ef       	ldi	r18, 0xFF	; 255
    1216:	8f e7       	ldi	r24, 0x7F	; 127
    1218:	94 e0       	ldi	r25, 0x04	; 4
    121a:	21 50       	subi	r18, 0x01	; 1
    121c:	80 40       	sbci	r24, 0x00	; 0
    121e:	90 40       	sbci	r25, 0x00	; 0
    1220:	e1 f7       	brne	.-8      	; 0x121a <scan+0x10>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <scan+0x1a>
    1224:	00 00       	nop
    1226:	8b e0       	ldi	r24, 0x0B	; 11
    1228:	d0 d9       	rcall	.-3168   	; 0x5ca <ADC_Conversion>
    122a:	88 33       	cpi	r24, 0x38	; 56
    122c:	08 f4       	brcc	.+2      	; 0x1230 <scan+0x26>
    122e:	7b c0       	rjmp	.+246    	; 0x1326 <scan+0x11c>
    1230:	8b e0       	ldi	r24, 0x0B	; 11
    1232:	cb d9       	rcall	.-3178   	; 0x5ca <ADC_Conversion>
    1234:	84 36       	cpi	r24, 0x64	; 100
    1236:	08 f0       	brcs	.+2      	; 0x123a <scan+0x30>
    1238:	79 c0       	rjmp	.+242    	; 0x132c <scan+0x122>
    123a:	80 91 6e 02 	lds	r24, 0x026E
    123e:	90 91 6f 02 	lds	r25, 0x026F
    1242:	aa 27       	eor	r26, r26
    1244:	97 fd       	sbrc	r25, 7
    1246:	a0 95       	com	r26
    1248:	ba 2f       	mov	r27, r26
    124a:	40 91 80 02 	lds	r20, 0x0280
    124e:	50 91 81 02 	lds	r21, 0x0281
    1252:	60 91 82 02 	lds	r22, 0x0282
    1256:	70 91 83 02 	lds	r23, 0x0283
    125a:	48 17       	cp	r20, r24
    125c:	59 07       	cpc	r21, r25
    125e:	6a 07       	cpc	r22, r26
    1260:	7b 07       	cpc	r23, r27
    1262:	d8 f4       	brcc	.+54     	; 0x129a <scan+0x90>
    1264:	40 91 7c 02 	lds	r20, 0x027C
    1268:	50 91 7d 02 	lds	r21, 0x027D
    126c:	60 91 7e 02 	lds	r22, 0x027E
    1270:	70 91 7f 02 	lds	r23, 0x027F
    1274:	48 17       	cp	r20, r24
    1276:	59 07       	cpc	r21, r25
    1278:	6a 07       	cpc	r22, r26
    127a:	7b 07       	cpc	r23, r27
    127c:	70 f4       	brcc	.+28     	; 0x129a <scan+0x90>
    127e:	40 91 70 02 	lds	r20, 0x0270
    1282:	50 91 71 02 	lds	r21, 0x0271
    1286:	60 91 72 02 	lds	r22, 0x0272
    128a:	70 91 73 02 	lds	r23, 0x0273
    128e:	48 17       	cp	r20, r24
    1290:	59 07       	cpc	r21, r25
    1292:	6a 07       	cpc	r22, r26
    1294:	7b 07       	cpc	r23, r27
    1296:	08 f4       	brcc	.+2      	; 0x129a <scan+0x90>
    1298:	4c c0       	rjmp	.+152    	; 0x1332 <scan+0x128>
    129a:	40 91 80 02 	lds	r20, 0x0280
    129e:	50 91 81 02 	lds	r21, 0x0281
    12a2:	60 91 82 02 	lds	r22, 0x0282
    12a6:	70 91 83 02 	lds	r23, 0x0283
    12aa:	80 91 70 02 	lds	r24, 0x0270
    12ae:	90 91 71 02 	lds	r25, 0x0271
    12b2:	a0 91 72 02 	lds	r26, 0x0272
    12b6:	b0 91 73 02 	lds	r27, 0x0273
    12ba:	84 17       	cp	r24, r20
    12bc:	95 07       	cpc	r25, r21
    12be:	a6 07       	cpc	r26, r22
    12c0:	b7 07       	cpc	r27, r23
    12c2:	c8 f4       	brcc	.+50     	; 0x12f6 <scan+0xec>
    12c4:	00 91 80 02 	lds	r16, 0x0280
    12c8:	10 91 81 02 	lds	r17, 0x0281
    12cc:	20 91 82 02 	lds	r18, 0x0282
    12d0:	30 91 83 02 	lds	r19, 0x0283
    12d4:	40 91 7c 02 	lds	r20, 0x027C
    12d8:	50 91 7d 02 	lds	r21, 0x027D
    12dc:	60 91 7e 02 	lds	r22, 0x027E
    12e0:	70 91 7f 02 	lds	r23, 0x027F
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	40 17       	cp	r20, r16
    12ea:	51 07       	cpc	r21, r17
    12ec:	62 07       	cpc	r22, r18
    12ee:	73 07       	cpc	r23, r19
    12f0:	28 f5       	brcc	.+74     	; 0x133c <scan+0x132>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	23 c0       	rjmp	.+70     	; 0x133c <scan+0x132>
    12f6:	40 91 70 02 	lds	r20, 0x0270
    12fa:	50 91 71 02 	lds	r21, 0x0271
    12fe:	60 91 72 02 	lds	r22, 0x0272
    1302:	70 91 73 02 	lds	r23, 0x0273
    1306:	80 91 7c 02 	lds	r24, 0x027C
    130a:	90 91 7d 02 	lds	r25, 0x027D
    130e:	a0 91 7e 02 	lds	r26, 0x027E
    1312:	b0 91 7f 02 	lds	r27, 0x027F
    1316:	84 17       	cp	r24, r20
    1318:	95 07       	cpc	r25, r21
    131a:	a6 07       	cpc	r26, r22
    131c:	b7 07       	cpc	r27, r23
    131e:	60 f4       	brcc	.+24     	; 0x1338 <scan+0x12e>
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0b c0       	rjmp	.+22     	; 0x133c <scan+0x132>
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	08 c0       	rjmp	.+16     	; 0x133c <scan+0x132>
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	9f ef       	ldi	r25, 0xFF	; 255
    1330:	05 c0       	rjmp	.+10     	; 0x133c <scan+0x132>
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <scan+0x132>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <setIndicatorAndColor>:
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cf e9       	ldi	r28, 0x9F	; 159
    1348:	d2 e0       	ldi	r29, 0x02	; 2
    134a:	ed e8       	ldi	r30, 0x8D	; 141
    134c:	f2 e0       	ldi	r31, 0x02	; 2
    134e:	a6 e6       	ldi	r26, 0x66	; 102
    1350:	b2 e0       	ldi	r27, 0x02	; 2
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	2e ef       	ldi	r18, 0xFE	; 254
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	89 93       	st	Y+, r24
    135c:	99 93       	st	Y+, r25
    135e:	33 83       	std	Z+3, r19	; 0x03
    1360:	22 83       	std	Z+2, r18	; 0x02
    1362:	31 83       	std	Z+1, r19	; 0x01
    1364:	20 83       	st	Z, r18
    1366:	1d 92       	st	X+, r1
    1368:	1d 92       	st	X+, r1
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	34 96       	adiw	r30, 0x04	; 4
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	91 05       	cpc	r25, r1
    1372:	99 f7       	brne	.-26     	; 0x135a <setIndicatorAndColor+0x18>
    1374:	e0 91 9f 02 	lds	r30, 0x029F
    1378:	f0 91 a0 02 	lds	r31, 0x02A0
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	e9 55       	subi	r30, 0x59	; 89
    1382:	fd 4f       	sbci	r31, 0xFD	; 253
    1384:	11 82       	std	Z+1, r1	; 0x01
    1386:	10 82       	st	Z, r1
    1388:	e0 91 a1 02 	lds	r30, 0x02A1
    138c:	f0 91 a2 02 	lds	r31, 0x02A2
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	e9 55       	subi	r30, 0x59	; 89
    1396:	fd 4f       	sbci	r31, 0xFD	; 253
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
    13a0:	e0 91 a3 02 	lds	r30, 0x02A3
    13a4:	f0 91 a4 02 	lds	r31, 0x02A4
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	e9 55       	subi	r30, 0x59	; 89
    13ae:	fd 4f       	sbci	r31, 0xFD	; 253
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	80 83       	st	Z, r24
    13b8:	e0 91 a5 02 	lds	r30, 0x02A5
    13bc:	f0 91 a6 02 	lds	r31, 0x02A6
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	e9 55       	subi	r30, 0x59	; 89
    13c6:	fd 4f       	sbci	r31, 0xFD	; 253
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	80 83       	st	Z, r24
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	90 93 88 02 	sts	0x0288, r25
    13d8:	80 93 87 02 	sts	0x0287, r24
    13dc:	90 93 86 02 	sts	0x0286, r25
    13e0:	80 93 85 02 	sts	0x0285, r24
    13e4:	90 93 b6 02 	sts	0x02B6, r25
    13e8:	80 93 b5 02 	sts	0x02B5, r24
    13ec:	90 93 b4 02 	sts	0x02B4, r25
    13f0:	80 93 b3 02 	sts	0x02B3, r24
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <terminalCheck1>:
void terminalCheck1()
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
	//????
	forward_mm(30);
    13fe:	8e e1       	ldi	r24, 0x1E	; 30
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	e2 da       	rcall	.-2620   	; 0x9c8 <forward_mm>
	flag = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	90 93 57 02 	sts	0x0257, r25
    140c:	80 93 56 02 	sts	0x0256, r24
	if (ct != ot)
    1410:	80 91 52 02 	lds	r24, 0x0252
    1414:	90 91 53 02 	lds	r25, 0x0253
    1418:	20 91 89 02 	lds	r18, 0x0289
    141c:	30 91 8a 02 	lds	r19, 0x028A
    1420:	28 17       	cp	r18, r24
    1422:	39 07       	cpc	r19, r25
    1424:	89 f1       	breq	.+98     	; 0x1488 <terminalCheck1+0x8e>
	{
		if (dir == 1 || dir == 3)
    1426:	20 91 50 02 	lds	r18, 0x0250
    142a:	30 91 51 02 	lds	r19, 0x0251
    142e:	2d 7f       	andi	r18, 0xFD	; 253
    1430:	21 30       	cpi	r18, 0x01	; 1
    1432:	31 05       	cpc	r19, r1
    1434:	41 f4       	brne	.+16     	; 0x1446 <terminalCheck1+0x4c>
		{
			if (ot == 3 || ot == 0)
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	11 f0       	breq	.+4      	; 0x1440 <terminalCheck1+0x46>
    143c:	89 2b       	or	r24, r25
    143e:	11 f4       	brne	.+4      	; 0x1444 <terminalCheck1+0x4a>
				turnRight();
    1440:	69 dd       	rcall	.-1326   	; 0xf14 <turnRight>
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <terminalCheck1+0x4c>
			else turnLeft();
    1444:	b5 dd       	rcall	.-1174   	; 0xfb0 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1446:	80 91 89 02 	lds	r24, 0x0289
    144a:	90 91 8a 02 	lds	r25, 0x028A
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	91 05       	cpc	r25, r1
    1452:	38 f4       	brcc	.+14     	; 0x1462 <terminalCheck1+0x68>
    1454:	20 91 50 02 	lds	r18, 0x0250
    1458:	30 91 51 02 	lds	r19, 0x0251
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	49 f0       	breq	.+18     	; 0x1474 <terminalCheck1+0x7a>
    1462:	02 97       	sbiw	r24, 0x02	; 2
    1464:	02 97       	sbiw	r24, 0x02	; 2
    1466:	38 f4       	brcc	.+14     	; 0x1476 <terminalCheck1+0x7c>
    1468:	80 91 50 02 	lds	r24, 0x0250
    146c:	90 91 51 02 	lds	r25, 0x0251
    1470:	89 2b       	or	r24, r25
    1472:	09 f4       	brne	.+2      	; 0x1476 <terminalCheck1+0x7c>
			turn();
    1474:	eb dd       	rcall	.-1066   	; 0x104c <turn>
		front();
    1476:	43 dd       	rcall	.-1402   	; 0xefe <front>
		ot = ct;
    1478:	80 91 89 02 	lds	r24, 0x0289
    147c:	90 91 8a 02 	lds	r25, 0x028A
    1480:	90 93 53 02 	sts	0x0253, r25
    1484:	80 93 52 02 	sts	0x0252, r24
	}
	//????
	right_degrees(50);
    1488:	82 e3       	ldi	r24, 0x32	; 50
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	b8 da       	rcall	.-2704   	; 0x9fe <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    148e:	86 e9       	ldi	r24, 0x96	; 150
    1490:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1494:	80 93 2a 01 	sts	0x012A, r24
    1498:	01 c0       	rjmp	.+2      	; 0x149c <terminalCheck1+0xa2>
	velocity(turn_v, turn_v);
	while (ADC_Conversion(1)<70)
		right();
    149a:	41 d8       	rcall	.-3966   	; 0x51e <right>
		ot = ct;
	}
	//????
	right_degrees(50);
	velocity(turn_v, turn_v);
	while (ADC_Conversion(1)<70)
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	95 d8       	rcall	.-3798   	; 0x5ca <ADC_Conversion>
    14a0:	86 34       	cpi	r24, 0x46	; 70
    14a2:	d8 f3       	brcs	.-10     	; 0x149a <terminalCheck1+0xa0>
		right();
	//	_delay_ms(100);
	stop();
    14a4:	3f d8       	rcall	.-3970   	; 0x524 <stop>
	dir = (dir + 1) % 4;
    14a6:	80 91 50 02 	lds	r24, 0x0250
    14aa:	90 91 51 02 	lds	r25, 0x0251
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	83 70       	andi	r24, 0x03	; 3
    14b2:	90 78       	andi	r25, 0x80	; 128
    14b4:	99 23       	and	r25, r25
    14b6:	24 f4       	brge	.+8      	; 0x14c0 <terminalCheck1+0xc6>
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	8c 6f       	ori	r24, 0xFC	; 252
    14bc:	9f 6f       	ori	r25, 0xFF	; 255
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	90 93 51 02 	sts	0x0251, r25
    14c4:	80 93 50 02 	sts	0x0250, r24
	term[ct][0] = scan();
    14c8:	c0 91 89 02 	lds	r28, 0x0289
    14cc:	d0 91 8a 02 	lds	r29, 0x028A
    14d0:	9c de       	rcall	.-712    	; 0x120a <scan>
    14d2:	cc 0f       	add	r28, r28
    14d4:	dd 1f       	adc	r29, r29
    14d6:	cc 0f       	add	r28, r28
    14d8:	dd 1f       	adc	r29, r29
    14da:	c3 57       	subi	r28, 0x73	; 115
    14dc:	dd 4f       	sbci	r29, 0xFD	; 253
    14de:	99 83       	std	Y+1, r25	; 0x01
    14e0:	88 83       	st	Y, r24
	if(term[ct][0]==-1)
    14e2:	e0 91 89 02 	lds	r30, 0x0289
    14e6:	f0 91 8a 02 	lds	r31, 0x028A
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	e3 57       	subi	r30, 0x73	; 115
    14f4:	fd 4f       	sbci	r31, 0xFD	; 253
    14f6:	40 81       	ld	r20, Z
    14f8:	51 81       	ldd	r21, Z+1	; 0x01
    14fa:	4f 3f       	cpi	r20, 0xFF	; 255
    14fc:	2f ef       	ldi	r18, 0xFF	; 255
    14fe:	52 07       	cpc	r21, r18
    1500:	49 f4       	brne	.+18     	; 0x1514 <terminalCheck1+0x11a>
		lcd_print(2,11,9, 1);
    1502:	21 e0       	ldi	r18, 0x01	; 1
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	49 e0       	ldi	r20, 0x09	; 9
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	6b e0       	ldi	r22, 0x0B	; 11
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <terminalCheck1+0x126>
	else
		lcd_print(2,11, term[ct][0], 1);
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	6b e0       	ldi	r22, 0x0B	; 11
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1520:	4f ef       	ldi	r20, 0xFF	; 255
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	9c e2       	ldi	r25, 0x2C	; 44
    1526:	41 50       	subi	r20, 0x01	; 1
    1528:	80 40       	sbci	r24, 0x00	; 0
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	e1 f7       	brne	.-8      	; 0x1526 <terminalCheck1+0x12c>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <terminalCheck1+0x136>
    1530:	00 00       	nop
	_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1532:	20 91 89 02 	lds	r18, 0x0289
    1536:	30 91 8a 02 	lds	r19, 0x028A
    153a:	f9 01       	movw	r30, r18
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	e3 57       	subi	r30, 0x73	; 115
    1546:	fd 4f       	sbci	r31, 0xFD	; 253
    1548:	80 81       	ld	r24, Z
    154a:	91 81       	ldd	r25, Z+1	; 0x01
    154c:	8f 3f       	cpi	r24, 0xFF	; 255
    154e:	4f ef       	ldi	r20, 0xFF	; 255
    1550:	94 07       	cpc	r25, r20
    1552:	51 f0       	breq	.+20     	; 0x1568 <terminalCheck1+0x16e>
    1554:	f9 01       	movw	r30, r18
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	e1 56       	subi	r30, 0x61	; 97
    155c:	fd 4f       	sbci	r31, 0xFD	; 253
    155e:	20 81       	ld	r18, Z
    1560:	31 81       	ldd	r19, Z+1	; 0x01
    1562:	82 17       	cp	r24, r18
    1564:	93 07       	cpc	r25, r19
    1566:	49 f4       	brne	.+18     	; 0x157a <terminalCheck1+0x180>
		total--;
    1568:	80 91 01 02 	lds	r24, 0x0201
    156c:	90 91 02 02 	lds	r25, 0x0202
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	90 93 02 02 	sts	0x0202, r25
    1576:	80 93 01 02 	sts	0x0201, r24
}
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <terminalCheck2>:
void terminalCheck2()
{
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
	if (flag == 0)
    1584:	80 91 56 02 	lds	r24, 0x0256
    1588:	90 91 57 02 	lds	r25, 0x0257
    158c:	89 2b       	or	r24, r25
    158e:	39 f5       	brne	.+78     	; 0x15de <terminalCheck2+0x5e>
	{
		if (dir == 0)
    1590:	80 91 50 02 	lds	r24, 0x0250
    1594:	90 91 51 02 	lds	r25, 0x0251
    1598:	89 2b       	or	r24, r25
    159a:	71 f4       	brne	.+28     	; 0x15b8 <terminalCheck2+0x38>
			if (ot == 0 || ot == 1)
    159c:	80 91 52 02 	lds	r24, 0x0252
    15a0:	90 91 53 02 	lds	r25, 0x0253
    15a4:	02 97       	sbiw	r24, 0x02	; 2
    15a6:	20 f4       	brcc	.+8      	; 0x15b0 <terminalCheck2+0x30>
				forward_mm(30);
    15a8:	8e e1       	ldi	r24, 0x1E	; 30
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0d da       	rcall	.-3046   	; 0x9c8 <forward_mm>
    15ae:	11 c0       	rjmp	.+34     	; 0x15d2 <terminalCheck2+0x52>
			else back_mm(30);
    15b0:	8e e1       	ldi	r24, 0x1E	; 30
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	12 da       	rcall	.-3036   	; 0x9da <back_mm>
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <terminalCheck2+0x52>
		else if (ot == 0 || ot == 1)
    15b8:	80 91 52 02 	lds	r24, 0x0252
    15bc:	90 91 53 02 	lds	r25, 0x0253
    15c0:	02 97       	sbiw	r24, 0x02	; 2
    15c2:	20 f4       	brcc	.+8      	; 0x15cc <terminalCheck2+0x4c>
			back_mm(30);
    15c4:	8e e1       	ldi	r24, 0x1E	; 30
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	08 da       	rcall	.-3056   	; 0x9da <back_mm>
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <terminalCheck2+0x52>
		else forward_mm(30);
    15cc:	8e e1       	ldi	r24, 0x1E	; 30
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	fb d9       	rcall	.-3082   	; 0x9c8 <forward_mm>
		flag = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	90 93 57 02 	sts	0x0257, r25
    15da:	80 93 56 02 	sts	0x0256, r24
	}

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    15de:	80 91 89 02 	lds	r24, 0x0289
    15e2:	90 91 8a 02 	lds	r25, 0x028A
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	91 05       	cpc	r25, r1
    15ea:	30 f4       	brcc	.+12     	; 0x15f8 <terminalCheck2+0x78>
    15ec:	20 91 50 02 	lds	r18, 0x0250
    15f0:	30 91 51 02 	lds	r19, 0x0251
    15f4:	23 2b       	or	r18, r19
    15f6:	69 f0       	breq	.+26     	; 0x1612 <terminalCheck2+0x92>
    15f8:	9c 01       	movw	r18, r24
    15fa:	22 50       	subi	r18, 0x02	; 2
    15fc:	31 09       	sbc	r19, r1
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	d0 f4       	brcc	.+52     	; 0x1638 <terminalCheck2+0xb8>
    1604:	40 91 50 02 	lds	r20, 0x0250
    1608:	50 91 51 02 	lds	r21, 0x0251
    160c:	42 30       	cpi	r20, 0x02	; 2
    160e:	51 05       	cpc	r21, r1
    1610:	99 f4       	brne	.+38     	; 0x1638 <terminalCheck2+0xb8>
	{
		left_degrees(30);
    1612:	8e e1       	ldi	r24, 0x1E	; 30
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	ea d9       	rcall	.-3116   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1618:	86 e9       	ldi	r24, 0x96	; 150
    161a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    161e:	80 93 2a 01 	sts	0x012A, r24
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <terminalCheck2+0xa8>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
		left();
    1624:	0e 94 8c 02 	call	0x518	; 0x518 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    162e:	86 34       	cpi	r24, 0x46	; 70
    1630:	c8 f3       	brcs	.-14     	; 0x1624 <terminalCheck2+0xa4>
		left();
		//	_delay_ms(100);
		stop();
    1632:	0e 94 92 02 	call	0x524	; 0x524 <stop>
    1636:	47 c0       	rjmp	.+142    	; 0x16c6 <terminalCheck2+0x146>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1638:	02 97       	sbiw	r24, 0x02	; 2
    163a:	30 f4       	brcc	.+12     	; 0x1648 <terminalCheck2+0xc8>
    163c:	80 91 50 02 	lds	r24, 0x0250
    1640:	90 91 51 02 	lds	r25, 0x0251
    1644:	02 97       	sbiw	r24, 0x02	; 2
    1646:	49 f0       	breq	.+18     	; 0x165a <terminalCheck2+0xda>
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	c8 f4       	brcc	.+50     	; 0x1680 <terminalCheck2+0x100>
    164e:	80 91 50 02 	lds	r24, 0x0250
    1652:	90 91 51 02 	lds	r25, 0x0251
    1656:	89 2b       	or	r24, r25
    1658:	99 f4       	brne	.+38     	; 0x1680 <terminalCheck2+0x100>
		{
			right_degrees(30);
    165a:	8e e1       	ldi	r24, 0x1E	; 30
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	cf d9       	rcall	.-3170   	; 0x9fe <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1660:	86 e9       	ldi	r24, 0x96	; 150
    1662:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1666:	80 93 2a 01 	sts	0x012A, r24
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <terminalCheck2+0xf0>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<70)
				right();
    166c:	0e 94 8f 02 	call	0x51e	; 0x51e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<70)
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    1676:	86 34       	cpi	r24, 0x46	; 70
    1678:	c8 f3       	brcs	.-14     	; 0x166c <terminalCheck2+0xec>
				right();
			//	_delay_ms(100);
			stop();	
    167a:	0e 94 92 02 	call	0x524	; 0x524 <stop>
    167e:	23 c0       	rjmp	.+70     	; 0x16c6 <terminalCheck2+0x146>
		}
	else {
		left_degrees(150);
    1680:	86 e9       	ldi	r24, 0x96	; 150
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b3 d9       	rcall	.-3226   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1686:	86 e9       	ldi	r24, 0x96	; 150
    1688:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    168c:	80 93 2a 01 	sts	0x012A, r24
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <terminalCheck2+0x116>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
		left();
    1692:	0e 94 8c 02 	call	0x518	; 0x518 <left>
			stop();	
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<70)
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    169c:	86 34       	cpi	r24, 0x46	; 70
    169e:	c8 f3       	brcs	.-14     	; 0x1692 <terminalCheck2+0x112>
		left();
		//	_delay_ms(100);
		stop();
    16a0:	0e 94 92 02 	call	0x524	; 0x524 <stop>
		dir = (dir + 3) % 4;
    16a4:	80 91 50 02 	lds	r24, 0x0250
    16a8:	90 91 51 02 	lds	r25, 0x0251
    16ac:	03 96       	adiw	r24, 0x03	; 3
    16ae:	83 70       	andi	r24, 0x03	; 3
    16b0:	90 78       	andi	r25, 0x80	; 128
    16b2:	99 23       	and	r25, r25
    16b4:	24 f4       	brge	.+8      	; 0x16be <terminalCheck2+0x13e>
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	8c 6f       	ori	r24, 0xFC	; 252
    16ba:	9f 6f       	ori	r25, 0xFF	; 255
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	90 93 51 02 	sts	0x0251, r25
    16c2:	80 93 50 02 	sts	0x0250, r24
			}
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
    16c6:	c0 91 89 02 	lds	r28, 0x0289
    16ca:	d0 91 8a 02 	lds	r29, 0x028A
    16ce:	9d dd       	rcall	.-1222   	; 0x120a <scan>
    16d0:	cc 0f       	add	r28, r28
    16d2:	dd 1f       	adc	r29, r29
    16d4:	cc 0f       	add	r28, r28
    16d6:	dd 1f       	adc	r29, r29
    16d8:	c3 57       	subi	r28, 0x73	; 115
    16da:	dd 4f       	sbci	r29, 0xFD	; 253
    16dc:	9b 83       	std	Y+3, r25	; 0x03
    16de:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==-1)
    16e0:	e0 91 89 02 	lds	r30, 0x0289
    16e4:	f0 91 8a 02 	lds	r31, 0x028A
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	e3 57       	subi	r30, 0x73	; 115
    16f2:	fd 4f       	sbci	r31, 0xFD	; 253
    16f4:	42 81       	ldd	r20, Z+2	; 0x02
    16f6:	53 81       	ldd	r21, Z+3	; 0x03
    16f8:	4f 3f       	cpi	r20, 0xFF	; 255
    16fa:	2f ef       	ldi	r18, 0xFF	; 255
    16fc:	52 07       	cpc	r21, r18
    16fe:	49 f4       	brne	.+18     	; 0x1712 <terminalCheck2+0x192>
		lcd_print(2,11,9, 1);
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	49 e0       	ldi	r20, 0x09	; 9
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	6b e0       	ldi	r22, 0x0B	; 11
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    1710:	06 c0       	rjmp	.+12     	; 0x171e <terminalCheck2+0x19e>
	else
		lcd_print(2,11, term[ct][1], 1);
    1712:	21 e0       	ldi	r18, 0x01	; 1
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	6b e0       	ldi	r22, 0x0B	; 11
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    171e:	4f ef       	ldi	r20, 0xFF	; 255
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	9c e2       	ldi	r25, 0x2C	; 44
    1724:	41 50       	subi	r20, 0x01	; 1
    1726:	80 40       	sbci	r24, 0x00	; 0
    1728:	90 40       	sbci	r25, 0x00	; 0
    172a:	e1 f7       	brne	.-8      	; 0x1724 <terminalCheck2+0x1a4>
    172c:	00 c0       	rjmp	.+0      	; 0x172e <terminalCheck2+0x1ae>
    172e:	00 00       	nop
	_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1730:	80 91 89 02 	lds	r24, 0x0289
    1734:	90 91 8a 02 	lds	r25, 0x028A
    1738:	fc 01       	movw	r30, r24
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	e3 57       	subi	r30, 0x73	; 115
    1744:	fd 4f       	sbci	r31, 0xFD	; 253
    1746:	22 81       	ldd	r18, Z+2	; 0x02
    1748:	33 81       	ldd	r19, Z+3	; 0x03
    174a:	2f 3f       	cpi	r18, 0xFF	; 255
    174c:	4f ef       	ldi	r20, 0xFF	; 255
    174e:	34 07       	cpc	r19, r20
    1750:	51 f0       	breq	.+20     	; 0x1766 <terminalCheck2+0x1e6>
    1752:	fc 01       	movw	r30, r24
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	e1 56       	subi	r30, 0x61	; 97
    175a:	fd 4f       	sbci	r31, 0xFD	; 253
    175c:	40 81       	ld	r20, Z
    175e:	51 81       	ldd	r21, Z+1	; 0x01
    1760:	24 17       	cp	r18, r20
    1762:	35 07       	cpc	r19, r21
    1764:	51 f4       	brne	.+20     	; 0x177a <terminalCheck2+0x1fa>
		total--;
    1766:	20 91 01 02 	lds	r18, 0x0201
    176a:	30 91 02 02 	lds	r19, 0x0202
    176e:	21 50       	subi	r18, 0x01	; 1
    1770:	31 09       	sbc	r19, r1
    1772:	30 93 02 02 	sts	0x0202, r19
    1776:	20 93 01 02 	sts	0x0201, r18
	visited[ct] = 1;
    177a:	fc 01       	movw	r30, r24
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ea 59       	subi	r30, 0x9A	; 154
    1782:	fd 4f       	sbci	r31, 0xFD	; 253
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
	visitedCount++;
    178c:	80 91 54 02 	lds	r24, 0x0254
    1790:	90 91 55 02 	lds	r25, 0x0255
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	90 93 55 02 	sts	0x0255, r25
    179a:	80 93 54 02 	sts	0x0254, r24
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <pick>:

void pick(int side)
{	
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	ec 01       	movw	r28, r24
	lower(side);//lower
    17aa:	a2 da       	rcall	.-2748   	; 0xcf0 <lower>
	open(side);
    17ac:	8c 2f       	mov	r24, r28
    17ae:	17 db       	rcall	.-2514   	; 0xdde <open>
	close(side);
    17b0:	8c 2f       	mov	r24, r28
    17b2:	4d db       	rcall	.-2406   	; 0xe4e <close>
	elevate();//mid
    17b4:	d9 da       	rcall	.-2638   	; 0xd68 <elevate>
	armCount--;
    17b6:	80 91 03 02 	lds	r24, 0x0203
    17ba:	90 91 04 02 	lds	r25, 0x0204
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	90 93 04 02 	sts	0x0204, r25
    17c4:	80 93 03 02 	sts	0x0203, r24
	if (side == 0)
    17c8:	cd 2b       	or	r28, r29
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <pick+0x30>
		lcd("pickRight");
    17cc:	84 e2       	ldi	r24, 0x24	; 36
    17ce:	92 e0       	ldi	r25, 0x02	; 2
    17d0:	7f db       	rcall	.-2306   	; 0xed0 <lcd>
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <pick+0x36>
	else
		lcd("pickLeft");
    17d4:	8e e2       	ldi	r24, 0x2E	; 46
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	7b db       	rcall	.-2314   	; 0xed0 <lcd>
}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <position>:

void position(int armNo, int side)
{
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	8c 01       	movw	r16, r24
    17ea:	eb 01       	movw	r28, r22
	if (ct == ot)
    17ec:	20 91 89 02 	lds	r18, 0x0289
    17f0:	30 91 8a 02 	lds	r19, 0x028A
    17f4:	40 91 52 02 	lds	r20, 0x0252
    17f8:	50 91 53 02 	lds	r21, 0x0253
    17fc:	24 17       	cp	r18, r20
    17fe:	35 07       	cpc	r19, r21
    1800:	09 f0       	breq	.+2      	; 0x1804 <position+0x24>
    1802:	7d c0       	rjmp	.+250    	; 0x18fe <position+0x11e>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1804:	c9 01       	movw	r24, r18
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	30 f4       	brcc	.+12     	; 0x1818 <position+0x38>
    180c:	40 91 50 02 	lds	r20, 0x0250
    1810:	50 91 51 02 	lds	r21, 0x0251
    1814:	45 2b       	or	r20, r21
    1816:	61 f0       	breq	.+24     	; 0x1830 <position+0x50>
    1818:	22 50       	subi	r18, 0x02	; 2
    181a:	31 09       	sbc	r19, r1
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	68 f4       	brcc	.+26     	; 0x183c <position+0x5c>
    1822:	40 91 50 02 	lds	r20, 0x0250
    1826:	50 91 51 02 	lds	r21, 0x0251
    182a:	42 30       	cpi	r20, 0x02	; 2
    182c:	51 05       	cpc	r21, r1
    182e:	31 f4       	brne	.+12     	; 0x183c <position+0x5c>
		{
			if (armNo != side)
    1830:	0c 17       	cp	r16, r28
    1832:	1d 07       	cpc	r17, r29
    1834:	09 f4       	brne	.+2      	; 0x1838 <position+0x58>
    1836:	4c c0       	rjmp	.+152    	; 0x18d0 <position+0xf0>
				turn();
    1838:	09 dc       	rcall	.-2030   	; 0x104c <turn>
    183a:	4a c0       	rjmp	.+148    	; 0x18d0 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	91 05       	cpc	r25, r1
    1840:	38 f4       	brcc	.+14     	; 0x1850 <position+0x70>
    1842:	40 91 50 02 	lds	r20, 0x0250
    1846:	50 91 51 02 	lds	r21, 0x0251
    184a:	42 30       	cpi	r20, 0x02	; 2
    184c:	51 05       	cpc	r21, r1
    184e:	49 f0       	breq	.+18     	; 0x1862 <position+0x82>
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	58 f4       	brcc	.+22     	; 0x186c <position+0x8c>
    1856:	40 91 50 02 	lds	r20, 0x0250
    185a:	50 91 51 02 	lds	r21, 0x0251
    185e:	45 2b       	or	r20, r21
    1860:	29 f4       	brne	.+10     	; 0x186c <position+0x8c>
		{
			if (armNo == side)
    1862:	0c 17       	cp	r16, r28
    1864:	1d 07       	cpc	r17, r29
    1866:	a1 f5       	brne	.+104    	; 0x18d0 <position+0xf0>
				turn();
    1868:	f1 db       	rcall	.-2078   	; 0x104c <turn>
    186a:	32 c0       	rjmp	.+100    	; 0x18d0 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	91 05       	cpc	r25, r1
    1870:	38 f4       	brcc	.+14     	; 0x1880 <position+0xa0>
    1872:	40 91 50 02 	lds	r20, 0x0250
    1876:	50 91 51 02 	lds	r21, 0x0251
    187a:	41 30       	cpi	r20, 0x01	; 1
    187c:	51 05       	cpc	r21, r1
    187e:	51 f0       	breq	.+20     	; 0x1894 <position+0xb4>
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	70 f4       	brcc	.+28     	; 0x18a2 <position+0xc2>
    1886:	40 91 50 02 	lds	r20, 0x0250
    188a:	50 91 51 02 	lds	r21, 0x0251
    188e:	43 30       	cpi	r20, 0x03	; 3
    1890:	51 05       	cpc	r21, r1
    1892:	39 f4       	brne	.+14     	; 0x18a2 <position+0xc2>
		{
			if (armNo != side)
    1894:	0c 17       	cp	r16, r28
    1896:	1d 07       	cpc	r17, r29
    1898:	11 f0       	breq	.+4      	; 0x189e <position+0xbe>
				turnRight();
    189a:	3c db       	rcall	.-2440   	; 0xf14 <turnRight>
    189c:	19 c0       	rjmp	.+50     	; 0x18d0 <position+0xf0>
			else turnLeft();
    189e:	88 db       	rcall	.-2288   	; 0xfb0 <turnLeft>
    18a0:	17 c0       	rjmp	.+46     	; 0x18d0 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    18a2:	02 97       	sbiw	r24, 0x02	; 2
    18a4:	30 f4       	brcc	.+12     	; 0x18b2 <position+0xd2>
    18a6:	80 91 50 02 	lds	r24, 0x0250
    18aa:	90 91 51 02 	lds	r25, 0x0251
    18ae:	03 97       	sbiw	r24, 0x03	; 3
    18b0:	49 f0       	breq	.+18     	; 0x18c4 <position+0xe4>
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	60 f4       	brcc	.+24     	; 0x18d0 <position+0xf0>
    18b8:	80 91 50 02 	lds	r24, 0x0250
    18bc:	90 91 51 02 	lds	r25, 0x0251
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	31 f4       	brne	.+12     	; 0x18d0 <position+0xf0>
			if (armNo == side)
    18c4:	0c 17       	cp	r16, r28
    18c6:	1d 07       	cpc	r17, r29
    18c8:	11 f4       	brne	.+4      	; 0x18ce <position+0xee>
				turnRight();
    18ca:	24 db       	rcall	.-2488   	; 0xf14 <turnRight>
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <position+0xf0>
			else turnLeft();
    18ce:	70 db       	rcall	.-2336   	; 0xfb0 <turnLeft>
		if (flag == 1 && (dir == 0 || dir == 2))
    18d0:	80 91 56 02 	lds	r24, 0x0256
    18d4:	90 91 57 02 	lds	r25, 0x0257
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	09 f0       	breq	.+2      	; 0x18de <position+0xfe>
    18dc:	64 c0       	rjmp	.+200    	; 0x19a6 <position+0x1c6>
    18de:	80 91 50 02 	lds	r24, 0x0250
    18e2:	90 91 51 02 	lds	r25, 0x0251
    18e6:	8d 7f       	andi	r24, 0xFD	; 253
    18e8:	89 2b       	or	r24, r25
    18ea:	09 f0       	breq	.+2      	; 0x18ee <position+0x10e>
    18ec:	5c c0       	rjmp	.+184    	; 0x19a6 <position+0x1c6>
		{
			back_mm(30);
    18ee:	8e e1       	ldi	r24, 0x1E	; 30
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	73 d8       	rcall	.-3866   	; 0x9da <back_mm>
			flag = 0;
    18f4:	10 92 57 02 	sts	0x0257, r1
    18f8:	10 92 56 02 	sts	0x0256, r1
    18fc:	54 c0       	rjmp	.+168    	; 0x19a6 <position+0x1c6>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    18fe:	80 91 50 02 	lds	r24, 0x0250
    1902:	90 91 51 02 	lds	r25, 0x0251
    1906:	8d 7f       	andi	r24, 0xFD	; 253
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	49 f4       	brne	.+18     	; 0x191e <position+0x13e>
			if (ct == 0 || ct == 3)
    190c:	21 15       	cp	r18, r1
    190e:	31 05       	cpc	r19, r1
    1910:	19 f0       	breq	.+6      	; 0x1918 <position+0x138>
    1912:	23 30       	cpi	r18, 0x03	; 3
    1914:	31 05       	cpc	r19, r1
    1916:	11 f4       	brne	.+4      	; 0x191c <position+0x13c>
				turnRight();
    1918:	fd da       	rcall	.-2566   	; 0xf14 <turnRight>
    191a:	01 c0       	rjmp	.+2      	; 0x191e <position+0x13e>
			else turnLeft();
    191c:	49 db       	rcall	.-2414   	; 0xfb0 <turnLeft>
		if (dir == 0 || dir == 2)
    191e:	20 91 50 02 	lds	r18, 0x0250
    1922:	30 91 51 02 	lds	r19, 0x0251
    1926:	21 15       	cp	r18, r1
    1928:	31 05       	cpc	r19, r1
    192a:	21 f0       	breq	.+8      	; 0x1934 <position+0x154>
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	91 f5       	brne	.+100    	; 0x1996 <position+0x1b6>
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <position+0x162>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1934:	80 91 89 02 	lds	r24, 0x0289
    1938:	90 91 8a 02 	lds	r25, 0x028A
    193c:	02 97       	sbiw	r24, 0x02	; 2
    193e:	c8 f4       	brcc	.+50     	; 0x1972 <position+0x192>
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <position+0x170>
    1942:	80 91 89 02 	lds	r24, 0x0289
    1946:	90 91 8a 02 	lds	r25, 0x028A
    194a:	02 97       	sbiw	r24, 0x02	; 2
    194c:	02 97       	sbiw	r24, 0x02	; 2
    194e:	88 f4       	brcc	.+34     	; 0x1972 <position+0x192>
			{
				if (ot != 4 && ot != 5)
    1950:	80 91 52 02 	lds	r24, 0x0252
    1954:	90 91 53 02 	lds	r25, 0x0253
    1958:	04 97       	sbiw	r24, 0x04	; 4
    195a:	02 97       	sbiw	r24, 0x02	; 2
    195c:	10 f0       	brcs	.+4      	; 0x1962 <position+0x182>
				{
					turnLeft();
    195e:	28 db       	rcall	.-2480   	; 0xfb0 <turnLeft>
					front();
    1960:	ce da       	rcall	.-2660   	; 0xefe <front>
				}
				if (armNo == side)
    1962:	0c 17       	cp	r16, r28
    1964:	1d 07       	cpc	r17, r29
    1966:	11 f4       	brne	.+4      	; 0x196c <position+0x18c>
				{
					front();
    1968:	ca da       	rcall	.-2668   	; 0xefe <front>
    196a:	15 c0       	rjmp	.+42     	; 0x1996 <position+0x1b6>
				}
				else
				{
					front();
    196c:	c8 da       	rcall	.-2672   	; 0xefe <front>
					turn();
    196e:	6e db       	rcall	.-2340   	; 0x104c <turn>
    1970:	12 c0       	rjmp	.+36     	; 0x1996 <position+0x1b6>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1972:	80 91 52 02 	lds	r24, 0x0252
    1976:	90 91 53 02 	lds	r25, 0x0253
    197a:	04 97       	sbiw	r24, 0x04	; 4
    197c:	02 97       	sbiw	r24, 0x02	; 2
    197e:	10 f0       	brcs	.+4      	; 0x1984 <position+0x1a4>
				{
					turnLeft();
    1980:	17 db       	rcall	.-2514   	; 0xfb0 <turnLeft>
					front();
    1982:	bd da       	rcall	.-2694   	; 0xefe <front>
				}
				if (armNo == side)
    1984:	0c 17       	cp	r16, r28
    1986:	1d 07       	cpc	r17, r29
    1988:	19 f4       	brne	.+6      	; 0x1990 <position+0x1b0>
				{
					turn();
    198a:	60 db       	rcall	.-2368   	; 0x104c <turn>
					front();
    198c:	b8 da       	rcall	.-2704   	; 0xefe <front>
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <position+0x1b6>
				}
				else
				{
					turn();
    1990:	5d db       	rcall	.-2374   	; 0x104c <turn>
					front();
    1992:	b5 da       	rcall	.-2710   	; 0xefe <front>
					turn();
    1994:	5b db       	rcall	.-2378   	; 0x104c <turn>
				}
			}
		}
		ot = ct;
    1996:	80 91 89 02 	lds	r24, 0x0289
    199a:	90 91 8a 02 	lds	r25, 0x028A
    199e:	90 93 53 02 	sts	0x0253, r25
    19a2:	80 93 52 02 	sts	0x0252, r24
	}
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <pickNode>:
void pickNode(int armNo, int side)
{
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	8c 01       	movw	r16, r24
    19ba:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    19bc:	fc 01       	movw	r30, r24
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	ed 54       	subi	r30, 0x4D	; 77
    19c4:	fd 4f       	sbci	r31, 0xFD	; 253
    19c6:	a0 91 89 02 	lds	r26, 0x0289
    19ca:	b0 91 8a 02 	lds	r27, 0x028A
    19ce:	aa 0f       	add	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	a6 0f       	add	r26, r22
    19d4:	b7 1f       	adc	r27, r23
    19d6:	aa 0f       	add	r26, r26
    19d8:	bb 1f       	adc	r27, r27
    19da:	a3 57       	subi	r26, 0x73	; 115
    19dc:	bd 4f       	sbci	r27, 0xFD	; 253
    19de:	8d 91       	ld	r24, X+
    19e0:	9c 91       	ld	r25, X
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
	position(armNo, side);
    19e6:	c8 01       	movw	r24, r16
    19e8:	fb de       	rcall	.-522    	; 0x17e0 <position>
	pick(armNo);
    19ea:	c8 01       	movw	r24, r16
    19ec:	db de       	rcall	.-586    	; 0x17a4 <pick>
	term[ct][side] = -1;
    19ee:	80 91 89 02 	lds	r24, 0x0289
    19f2:	90 91 8a 02 	lds	r25, 0x028A
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	c8 0f       	add	r28, r24
    19fc:	d9 1f       	adc	r29, r25
    19fe:	cc 0f       	add	r28, r28
    1a00:	dd 1f       	adc	r29, r29
    1a02:	c3 57       	subi	r28, 0x73	; 115
    1a04:	dd 4f       	sbci	r29, 0xFD	; 253
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	9f ef       	ldi	r25, 0xFF	; 255
    1a0a:	99 83       	std	Y+1, r25	; 0x01
    1a0c:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	ec 01       	movw	r28, r24
    1a22:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    1a24:	fc 01       	movw	r30, r24
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	ed 54       	subi	r30, 0x4D	; 77
    1a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2e:	db 01       	movw	r26, r22
    1a30:	aa 0f       	add	r26, r26
    1a32:	bb 1f       	adc	r27, r27
    1a34:	ab 57       	subi	r26, 0x7B	; 123
    1a36:	bd 4f       	sbci	r27, 0xFD	; 253
    1a38:	8d 91       	ld	r24, X+
    1a3a:	9c 91       	ld	r25, X
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1a40:	c6 17       	cp	r28, r22
    1a42:	d7 07       	cpc	r29, r23
    1a44:	39 f4       	brne	.+14     	; 0x1a54 <pickSort+0x3c>
    1a46:	80 91 50 02 	lds	r24, 0x0250
    1a4a:	90 91 51 02 	lds	r25, 0x0251
    1a4e:	89 2b       	or	r24, r25
    1a50:	49 f4       	brne	.+18     	; 0x1a64 <pickSort+0x4c>
    1a52:	06 c0       	rjmp	.+12     	; 0x1a60 <pickSort+0x48>
    1a54:	80 91 50 02 	lds	r24, 0x0250
    1a58:	90 91 51 02 	lds	r25, 0x0251
    1a5c:	02 97       	sbiw	r24, 0x02	; 2
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <pickSort+0x4c>
		turn();
    1a60:	f5 da       	rcall	.-2582   	; 0x104c <turn>
    1a62:	0c c0       	rjmp	.+24     	; 0x1a7c <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1a64:	80 91 50 02 	lds	r24, 0x0250
    1a68:	90 91 51 02 	lds	r25, 0x0251
    1a6c:	8d 7f       	andi	r24, 0xFD	; 253
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	29 f4       	brne	.+10     	; 0x1a7c <pickSort+0x64>
			if (armNo == 0)
    1a72:	20 97       	sbiw	r28, 0x00	; 0
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <pickSort+0x62>
				turnLeft();
    1a76:	9c da       	rcall	.-2760   	; 0xfb0 <turnLeft>
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <pickSort+0x64>
			else turnRight();
    1a7a:	4c da       	rcall	.-2920   	; 0xf14 <turnRight>
	}
	pick(armNo);
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	92 de       	rcall	.-732    	; 0x17a4 <pick>
	sort[sortNo] = -1;
    1a80:	f8 01       	movw	r30, r16
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	eb 57       	subi	r30, 0x7B	; 123
    1a88:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <pickup>:
void pickup()
{
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1aa8:	20 91 89 02 	lds	r18, 0x0289
    1aac:	30 91 8a 02 	lds	r19, 0x028A
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	30 f4       	brcc	.+12     	; 0x1ac2 <pickup+0x26>
    1ab6:	80 91 50 02 	lds	r24, 0x0250
    1aba:	90 91 51 02 	lds	r25, 0x0251
    1abe:	02 97       	sbiw	r24, 0x02	; 2
    1ac0:	79 f0       	breq	.+30     	; 0x1ae0 <pickup+0x44>
    1ac2:	c9 01       	movw	r24, r18
    1ac4:	02 97       	sbiw	r24, 0x02	; 2
    1ac6:	02 97       	sbiw	r24, 0x02	; 2
    1ac8:	80 f4       	brcc	.+32     	; 0x1aea <pickup+0x4e>
    1aca:	80 91 50 02 	lds	r24, 0x0250
    1ace:	90 91 51 02 	lds	r25, 0x0251
    1ad2:	89 2b       	or	r24, r25
    1ad4:	79 f0       	breq	.+30     	; 0x1af4 <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1ad6:	c1 e0       	ldi	r28, 0x01	; 1
    1ad8:	d0 e0       	ldi	r29, 0x00	; 0
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	0e c0       	rjmp	.+28     	; 0x1afc <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1ae0:	c0 e0       	ldi	r28, 0x00	; 0
    1ae2:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1ae4:	01 e0       	ldi	r16, 0x01	; 1
    1ae6:	10 e0       	ldi	r17, 0x00	; 0
    1ae8:	09 c0       	rjmp	.+18     	; 0x1afc <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1aea:	c1 e0       	ldi	r28, 0x01	; 1
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	10 e0       	ldi	r17, 0x00	; 0
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1af4:	c0 e0       	ldi	r28, 0x00	; 0
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1af8:	01 e0       	ldi	r16, 0x01	; 1
    1afa:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1afc:	f9 01       	movw	r30, r18
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	ea 59       	subi	r30, 0x9A	; 154
    1b04:	fd 4f       	sbci	r31, 0xFD	; 253
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	89 2b       	or	r24, r25
    1b0c:	79 f4       	brne	.+30     	; 0x1b2c <pickup+0x90>
		if (term[ct][0] == -2)
    1b0e:	f9 01       	movw	r30, r18
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	e3 57       	subi	r30, 0x73	; 115
    1b1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	02 96       	adiw	r24, 0x02	; 2
    1b22:	19 f4       	brne	.+6      	; 0x1b2a <pickup+0x8e>
		{
		terminalCheck1();
    1b24:	6a dc       	rcall	.-1836   	; 0x13fa <terminalCheck1>
		terminalCheck2();
    1b26:	2c dd       	rcall	.-1448   	; 0x1580 <terminalCheck2>
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <pickup+0x90>
		}
		else	terminalCheck2();
    1b2a:	2a dd       	rcall	.-1452   	; 0x1580 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1b2c:	20 91 89 02 	lds	r18, 0x0289
    1b30:	30 91 8a 02 	lds	r19, 0x028A
    1b34:	f9 01       	movw	r30, r18
    1b36:	ee 0f       	add	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	e3 57       	subi	r30, 0x73	; 115
    1b40:	fd 4f       	sbci	r31, 0xFD	; 253
    1b42:	40 81       	ld	r20, Z
    1b44:	51 81       	ldd	r21, Z+1	; 0x01
    1b46:	f9 01       	movw	r30, r18
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	e1 56       	subi	r30, 0x61	; 97
    1b4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	48 17       	cp	r20, r24
    1b56:	59 07       	cpc	r21, r25
    1b58:	21 f0       	breq	.+8      	; 0x1b62 <pickup+0xc6>
    1b5a:	4f 3f       	cpi	r20, 0xFF	; 255
    1b5c:	6f ef       	ldi	r22, 0xFF	; 255
    1b5e:	56 07       	cpc	r21, r22
    1b60:	89 f4       	brne	.+34     	; 0x1b84 <pickup+0xe8>
    1b62:	f9 01       	movw	r30, r18
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	e3 57       	subi	r30, 0x73	; 115
    1b6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b70:	62 81       	ldd	r22, Z+2	; 0x02
    1b72:	73 81       	ldd	r23, Z+3	; 0x03
    1b74:	86 17       	cp	r24, r22
    1b76:	97 07       	cpc	r25, r23
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <pickup+0xe0>
    1b7a:	ee c1       	rjmp	.+988    	; 0x1f58 <pickup+0x4bc>
    1b7c:	6f 3f       	cpi	r22, 0xFF	; 255
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <pickup+0xe8>
    1b82:	ea c1       	rjmp	.+980    	; 0x1f58 <pickup+0x4bc>
		{
			if (armCount == 2)
    1b84:	60 91 03 02 	lds	r22, 0x0203
    1b88:	70 91 04 02 	lds	r23, 0x0204
    1b8c:	62 30       	cpi	r22, 0x02	; 2
    1b8e:	71 05       	cpc	r23, r1
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <pickup+0xf8>
    1b92:	b0 c0       	rjmp	.+352    	; 0x1cf4 <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1b94:	e0 91 af 02 	lds	r30, 0x02AF
    1b98:	f0 91 b0 02 	lds	r31, 0x02B0
    1b9c:	df 01       	movw	r26, r30
    1b9e:	aa 0f       	add	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	a1 56       	subi	r26, 0x61	; 97
    1ba4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ba6:	6d 91       	ld	r22, X+
    1ba8:	7c 91       	ld	r23, X
    1baa:	46 17       	cp	r20, r22
    1bac:	57 07       	cpc	r21, r23
    1bae:	79 f0       	breq	.+30     	; 0x1bce <pickup+0x132>
    1bb0:	d9 01       	movw	r26, r18
    1bb2:	aa 0f       	add	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	aa 0f       	add	r26, r26
    1bb8:	bb 1f       	adc	r27, r27
    1bba:	a3 57       	subi	r26, 0x73	; 115
    1bbc:	bd 4f       	sbci	r27, 0xFD	; 253
    1bbe:	12 96       	adiw	r26, 0x02	; 2
    1bc0:	ed 90       	ld	r14, X+
    1bc2:	fc 90       	ld	r15, X
    1bc4:	13 97       	sbiw	r26, 0x03	; 3
    1bc6:	6e 15       	cp	r22, r14
    1bc8:	7f 05       	cpc	r23, r15
    1bca:	59 f4       	brne	.+22     	; 0x1be2 <pickup+0x146>
    1bcc:	05 c0       	rjmp	.+10     	; 0x1bd8 <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	ed de       	rcall	.-550    	; 0x19b0 <pickNode>
    1bd6:	8e c0       	rjmp	.+284    	; 0x1cf4 <pickup+0x258>
					else	pickNode(arm1, 1);
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	ce 01       	movw	r24, r28
    1bde:	e8 de       	rcall	.-560    	; 0x19b0 <pickNode>
    1be0:	89 c0       	rjmp	.+274    	; 0x1cf4 <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1be2:	8e 15       	cp	r24, r14
    1be4:	9f 05       	cpc	r25, r15
    1be6:	09 f4       	brne	.+2      	; 0x1bea <pickup+0x14e>
    1be8:	4e c0       	rjmp	.+156    	; 0x1c86 <pickup+0x1ea>
    1bea:	ef 20       	and	r14, r15
    1bec:	e0 94       	com	r14
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <pickup+0x156>
    1bf0:	4a c0       	rjmp	.+148    	; 0x1c86 <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1bf2:	48 17       	cp	r20, r24
    1bf4:	59 07       	cpc	r21, r25
    1bf6:	69 f0       	breq	.+26     	; 0x1c12 <pickup+0x176>
    1bf8:	4f 3f       	cpi	r20, 0xFF	; 255
    1bfa:	af ef       	ldi	r26, 0xFF	; 255
    1bfc:	5a 07       	cpc	r21, r26
    1bfe:	49 f0       	breq	.+18     	; 0x1c12 <pickup+0x176>
					{
						pickNode(arm1, 1);
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	ce 01       	movw	r24, r28
    1c06:	d4 de       	rcall	.-600    	; 0x19b0 <pickNode>
						pickNode(arm0, 0);
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	d0 de       	rcall	.-608    	; 0x19b0 <pickNode>
    1c10:	71 c0       	rjmp	.+226    	; 0x1cf4 <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1c12:	21 70       	andi	r18, 0x01	; 1
    1c14:	30 78       	andi	r19, 0x80	; 128
    1c16:	33 23       	and	r19, r19
    1c18:	34 f4       	brge	.+12     	; 0x1c26 <pickup+0x18a>
    1c1a:	21 50       	subi	r18, 0x01	; 1
    1c1c:	31 09       	sbc	r19, r1
    1c1e:	2e 6f       	ori	r18, 0xFE	; 254
    1c20:	3f 6f       	ori	r19, 0xFF	; 255
    1c22:	2f 5f       	subi	r18, 0xFF	; 255
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	d9 01       	movw	r26, r18
    1c28:	aa 0f       	add	r26, r26
    1c2a:	bb 1f       	adc	r27, r27
    1c2c:	ab 57       	subi	r26, 0x7B	; 123
    1c2e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c30:	2d 91       	ld	r18, X+
    1c32:	3c 91       	ld	r19, X
    1c34:	2f 3f       	cpi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	09 f1       	breq	.+66     	; 0x1c7c <pickup+0x1e0>
    1c3a:	df 01       	movw	r26, r30
    1c3c:	aa 0f       	add	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	aa 0f       	add	r26, r26
    1c42:	bb 1f       	adc	r27, r27
    1c44:	a3 57       	subi	r26, 0x73	; 115
    1c46:	bd 4f       	sbci	r27, 0xFD	; 253
    1c48:	2d 91       	ld	r18, X+
    1c4a:	3c 91       	ld	r19, X
    1c4c:	62 17       	cp	r22, r18
    1c4e:	73 07       	cpc	r23, r19
    1c50:	a9 f0       	breq	.+42     	; 0x1c7c <pickup+0x1e0>
    1c52:	2f 3f       	cpi	r18, 0xFF	; 255
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	91 f0       	breq	.+36     	; 0x1c7c <pickup+0x1e0>
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	e3 57       	subi	r30, 0x73	; 115
    1c62:	fd 4f       	sbci	r31, 0xFD	; 253
    1c64:	22 81       	ldd	r18, Z+2	; 0x02
    1c66:	33 81       	ldd	r19, Z+3	; 0x03
    1c68:	62 17       	cp	r22, r18
    1c6a:	73 07       	cpc	r23, r19
    1c6c:	39 f0       	breq	.+14     	; 0x1c7c <pickup+0x1e0>
    1c6e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <pickup+0x1e0>
    1c74:	48 17       	cp	r20, r24
    1c76:	59 07       	cpc	r21, r25
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <pickup+0x1e0>
    1c7a:	6e c1       	rjmp	.+732    	; 0x1f58 <pickup+0x4bc>
						pickNode(arm1, 1);
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	ce 01       	movw	r24, r28
    1c82:	96 de       	rcall	.-724    	; 0x19b0 <pickNode>
    1c84:	37 c0       	rjmp	.+110    	; 0x1cf4 <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1c86:	48 17       	cp	r20, r24
    1c88:	59 07       	cpc	r21, r25
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <pickup+0x1f2>
    1c8c:	65 c1       	rjmp	.+714    	; 0x1f58 <pickup+0x4bc>
    1c8e:	4f 3f       	cpi	r20, 0xFF	; 255
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <pickup+0x1fa>
    1c94:	61 c1       	rjmp	.+706    	; 0x1f58 <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1c96:	21 70       	andi	r18, 0x01	; 1
    1c98:	30 78       	andi	r19, 0x80	; 128
    1c9a:	33 23       	and	r19, r19
    1c9c:	34 f4       	brge	.+12     	; 0x1caa <pickup+0x20e>
    1c9e:	21 50       	subi	r18, 0x01	; 1
    1ca0:	31 09       	sbc	r19, r1
    1ca2:	2e 6f       	ori	r18, 0xFE	; 254
    1ca4:	3f 6f       	ori	r19, 0xFF	; 255
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	d9 01       	movw	r26, r18
    1cac:	aa 0f       	add	r26, r26
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	ab 57       	subi	r26, 0x7B	; 123
    1cb2:	bd 4f       	sbci	r27, 0xFD	; 253
    1cb4:	8d 91       	ld	r24, X+
    1cb6:	9c 91       	ld	r25, X
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	c1 f0       	breq	.+48     	; 0x1cec <pickup+0x250>
    1cbc:	df 01       	movw	r26, r30
    1cbe:	aa 0f       	add	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	aa 0f       	add	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	a3 57       	subi	r26, 0x73	; 115
    1cc8:	bd 4f       	sbci	r27, 0xFD	; 253
    1cca:	8d 91       	ld	r24, X+
    1ccc:	9c 91       	ld	r25, X
    1cce:	11 97       	sbiw	r26, 0x01	; 1
    1cd0:	68 17       	cp	r22, r24
    1cd2:	79 07       	cpc	r23, r25
    1cd4:	59 f0       	breq	.+22     	; 0x1cec <pickup+0x250>
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <pickup+0x250>
    1cda:	fd 01       	movw	r30, r26
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	68 17       	cp	r22, r24
    1ce2:	79 07       	cpc	r23, r25
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <pickup+0x250>
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <pickup+0x250>
    1cea:	36 c1       	rjmp	.+620    	; 0x1f58 <pickup+0x4bc>
						pickNode(arm0, 0);
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	5e de       	rcall	.-836    	; 0x19b0 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    1cf4:	80 91 03 02 	lds	r24, 0x0203
    1cf8:	90 91 04 02 	lds	r25, 0x0204
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <pickup+0x266>
    1d00:	2b c1       	rjmp	.+598    	; 0x1f58 <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1d02:	f8 01       	movw	r30, r16
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	ed 54       	subi	r30, 0x4D	; 77
    1d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <pickup+0x27a>
					a1 = arm0;
    1d14:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1d16:	be 01       	movw	r22, r28
    1d18:	6f 5f       	subi	r22, 0xFF	; 255
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1c:	61 70       	andi	r22, 0x01	; 1
    1d1e:	70 78       	andi	r23, 0x80	; 128
    1d20:	77 23       	and	r23, r23
    1d22:	34 f4       	brge	.+12     	; 0x1d30 <pickup+0x294>
    1d24:	61 50       	subi	r22, 0x01	; 1
    1d26:	71 09       	sbc	r23, r1
    1d28:	6e 6f       	ori	r22, 0xFE	; 254
    1d2a:	7f 6f       	ori	r23, 0xFF	; 255
    1d2c:	6f 5f       	subi	r22, 0xFF	; 255
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1d30:	80 91 89 02 	lds	r24, 0x0289
    1d34:	90 91 8a 02 	lds	r25, 0x028A
    1d38:	9c 01       	movw	r18, r24
    1d3a:	21 70       	andi	r18, 0x01	; 1
    1d3c:	30 78       	andi	r19, 0x80	; 128
    1d3e:	33 23       	and	r19, r19
    1d40:	34 f4       	brge	.+12     	; 0x1d4e <pickup+0x2b2>
    1d42:	21 50       	subi	r18, 0x01	; 1
    1d44:	31 09       	sbc	r19, r1
    1d46:	2e 6f       	ori	r18, 0xFE	; 254
    1d48:	3f 6f       	ori	r19, 0xFF	; 255
    1d4a:	2f 5f       	subi	r18, 0xFF	; 255
    1d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4e:	f9 01       	movw	r30, r18
    1d50:	ee 0f       	add	r30, r30
    1d52:	ff 1f       	adc	r31, r31
    1d54:	eb 57       	subi	r30, 0x7B	; 123
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	20 81       	ld	r18, Z
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	2f 3f       	cpi	r18, 0xFF	; 255
    1d5e:	af ef       	ldi	r26, 0xFF	; 255
    1d60:	3a 07       	cpc	r19, r26
    1d62:	d9 f5       	brne	.+118    	; 0x1dda <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1d64:	fc 01       	movw	r30, r24
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	ec 0f       	add	r30, r28
    1d6c:	fd 1f       	adc	r31, r29
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	e3 57       	subi	r30, 0x73	; 115
    1d74:	fd 4f       	sbci	r31, 0xFD	; 253
    1d76:	20 81       	ld	r18, Z
    1d78:	31 81       	ldd	r19, Z+1	; 0x01
    1d7a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d7c:	ef ef       	ldi	r30, 0xFF	; 255
    1d7e:	3e 07       	cpc	r19, r30
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <pickup+0x302>
    1d82:	fc 01       	movw	r30, r24
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	e1 56       	subi	r30, 0x61	; 97
    1d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8c:	40 81       	ld	r20, Z
    1d8e:	51 81       	ldd	r21, Z+1	; 0x01
    1d90:	24 17       	cp	r18, r20
    1d92:	35 07       	cpc	r19, r21
    1d94:	21 f0       	breq	.+8      	; 0x1d9e <pickup+0x302>
						pickNode(a1, a1);
    1d96:	be 01       	movw	r22, r28
    1d98:	ce 01       	movw	r24, r28
    1d9a:	0a de       	rcall	.-1004   	; 0x19b0 <pickNode>
    1d9c:	dd c0       	rjmp	.+442    	; 0x1f58 <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1d9e:	fc 01       	movw	r30, r24
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	e6 0f       	add	r30, r22
    1da6:	f7 1f       	adc	r31, r23
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	e3 57       	subi	r30, 0x73	; 115
    1dae:	fd 4f       	sbci	r31, 0xFD	; 253
    1db0:	20 81       	ld	r18, Z
    1db2:	31 81       	ldd	r19, Z+1	; 0x01
    1db4:	2f 3f       	cpi	r18, 0xFF	; 255
    1db6:	4f ef       	ldi	r20, 0xFF	; 255
    1db8:	34 07       	cpc	r19, r20
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <pickup+0x322>
    1dbc:	cd c0       	rjmp	.+410    	; 0x1f58 <pickup+0x4bc>
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	ee 0f       	add	r30, r30
    1dc2:	ff 1f       	adc	r31, r31
    1dc4:	e1 56       	subi	r30, 0x61	; 97
    1dc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	28 17       	cp	r18, r24
    1dce:	39 07       	cpc	r19, r25
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <pickup+0x338>
    1dd2:	c2 c0       	rjmp	.+388    	; 0x1f58 <pickup+0x4bc>
						pickNode(a1, a2);
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	ec dd       	rcall	.-1064   	; 0x19b0 <pickNode>
    1dd8:	bf c0       	rjmp	.+382    	; 0x1f58 <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1dda:	40 91 af 02 	lds	r20, 0x02AF
    1dde:	50 91 b0 02 	lds	r21, 0x02B0
    1de2:	fa 01       	movw	r30, r20
    1de4:	ee 0f       	add	r30, r30
    1de6:	ff 1f       	adc	r31, r31
    1de8:	e1 56       	subi	r30, 0x61	; 97
    1dea:	fd 4f       	sbci	r31, 0xFD	; 253
    1dec:	01 90       	ld	r0, Z+
    1dee:	f0 81       	ld	r31, Z
    1df0:	e0 2d       	mov	r30, r0
    1df2:	dc 01       	movw	r26, r24
    1df4:	aa 0f       	add	r26, r26
    1df6:	bb 1f       	adc	r27, r27
    1df8:	aa 0f       	add	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	a3 57       	subi	r26, 0x73	; 115
    1dfe:	bd 4f       	sbci	r27, 0xFD	; 253
    1e00:	0d 90       	ld	r0, X+
    1e02:	bc 91       	ld	r27, X
    1e04:	a0 2d       	mov	r26, r0
    1e06:	ae 17       	cp	r26, r30
    1e08:	bf 07       	cpc	r27, r31
    1e0a:	71 f0       	breq	.+28     	; 0x1e28 <pickup+0x38c>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	aa 0f       	add	r26, r26
    1e10:	bb 1f       	adc	r27, r27
    1e12:	aa 0f       	add	r26, r26
    1e14:	bb 1f       	adc	r27, r27
    1e16:	a3 57       	subi	r26, 0x73	; 115
    1e18:	bd 4f       	sbci	r27, 0xFD	; 253
    1e1a:	12 96       	adiw	r26, 0x02	; 2
    1e1c:	0d 90       	ld	r0, X+
    1e1e:	bc 91       	ld	r27, X
    1e20:	a0 2d       	mov	r26, r0
    1e22:	ea 17       	cp	r30, r26
    1e24:	fb 07       	cpc	r31, r27
    1e26:	d9 f5       	brne	.+118    	; 0x1e9e <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1e28:	da 01       	movw	r26, r20
    1e2a:	aa 0f       	add	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	aa 59       	subi	r26, 0x9A	; 154
    1e30:	bd 4f       	sbci	r27, 0xFD	; 253
    1e32:	2d 91       	ld	r18, X+
    1e34:	3c 91       	ld	r19, X
    1e36:	21 30       	cpi	r18, 0x01	; 1
    1e38:	31 05       	cpc	r19, r1
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <pickup+0x3a2>
    1e3c:	8d c0       	rjmp	.+282    	; 0x1f58 <pickup+0x4bc>
    1e3e:	da 01       	movw	r26, r20
    1e40:	aa 0f       	add	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	aa 0f       	add	r26, r26
    1e46:	bb 1f       	adc	r27, r27
    1e48:	a3 57       	subi	r26, 0x73	; 115
    1e4a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e4c:	2d 91       	ld	r18, X+
    1e4e:	3c 91       	ld	r19, X
    1e50:	2f 3f       	cpi	r18, 0xFF	; 255
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	79 f0       	breq	.+30     	; 0x1e74 <pickup+0x3d8>
    1e56:	da 01       	movw	r26, r20
    1e58:	aa 0f       	add	r26, r26
    1e5a:	bb 1f       	adc	r27, r27
    1e5c:	aa 0f       	add	r26, r26
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	a3 57       	subi	r26, 0x73	; 115
    1e62:	bd 4f       	sbci	r27, 0xFD	; 253
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	2d 91       	ld	r18, X+
    1e68:	3c 91       	ld	r19, X
    1e6a:	13 97       	sbiw	r26, 0x03	; 3
    1e6c:	2f 3f       	cpi	r18, 0xFF	; 255
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <pickup+0x3d8>
    1e72:	72 c0       	rjmp	.+228    	; 0x1f58 <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	8c 0f       	add	r24, r28
    1e7a:	9d 1f       	adc	r25, r29
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	aa 0f       	add	r26, r26
    1e80:	bb 1f       	adc	r27, r27
    1e82:	a3 57       	subi	r26, 0x73	; 115
    1e84:	bd 4f       	sbci	r27, 0xFD	; 253
    1e86:	8d 91       	ld	r24, X+
    1e88:	9c 91       	ld	r25, X
    1e8a:	e8 17       	cp	r30, r24
    1e8c:	f9 07       	cpc	r31, r25
    1e8e:	21 f4       	brne	.+8      	; 0x1e98 <pickup+0x3fc>
								pickNode(a1, a1);
    1e90:	be 01       	movw	r22, r28
    1e92:	ce 01       	movw	r24, r28
    1e94:	8d dd       	rcall	.-1254   	; 0x19b0 <pickNode>
    1e96:	60 c0       	rjmp	.+192    	; 0x1f58 <pickup+0x4bc>
							else pickNode(a1, a2);
    1e98:	ce 01       	movw	r24, r28
    1e9a:	8a dd       	rcall	.-1260   	; 0x19b0 <pickNode>
    1e9c:	5d c0       	rjmp	.+186    	; 0x1f58 <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	aa 0f       	add	r26, r26
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	a1 56       	subi	r26, 0x61	; 97
    1ea6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ea8:	0d 90       	ld	r0, X+
    1eaa:	bc 91       	ld	r27, X
    1eac:	a0 2d       	mov	r26, r0
    1eae:	2a 17       	cp	r18, r26
    1eb0:	3b 07       	cpc	r19, r27
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <pickup+0x41a>
    1eb4:	51 c0       	rjmp	.+162    	; 0x1f58 <pickup+0x4bc>
    1eb6:	2e 17       	cp	r18, r30
    1eb8:	3f 07       	cpc	r19, r31
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <pickup+0x422>
    1ebc:	4d c0       	rjmp	.+154    	; 0x1f58 <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1ebe:	fa 01       	movw	r30, r20
    1ec0:	ee 0f       	add	r30, r30
    1ec2:	ff 1f       	adc	r31, r31
    1ec4:	ea 59       	subi	r30, 0x9A	; 154
    1ec6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec8:	20 81       	ld	r18, Z
    1eca:	31 81       	ldd	r19, Z+1	; 0x01
    1ecc:	21 30       	cpi	r18, 0x01	; 1
    1ece:	31 05       	cpc	r19, r1
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <pickup+0x438>
    1ed2:	42 c0       	rjmp	.+132    	; 0x1f58 <pickup+0x4bc>
    1ed4:	fa 01       	movw	r30, r20
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	e3 57       	subi	r30, 0x73	; 115
    1ee0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee2:	20 81       	ld	r18, Z
    1ee4:	31 81       	ldd	r19, Z+1	; 0x01
    1ee6:	a2 17       	cp	r26, r18
    1ee8:	b3 07       	cpc	r27, r19
    1eea:	b1 f1       	breq	.+108    	; 0x1f58 <pickup+0x4bc>
    1eec:	fa 01       	movw	r30, r20
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	e3 57       	subi	r30, 0x73	; 115
    1ef8:	fd 4f       	sbci	r31, 0xFD	; 253
    1efa:	22 81       	ldd	r18, Z+2	; 0x02
    1efc:	33 81       	ldd	r19, Z+3	; 0x03
    1efe:	a2 17       	cp	r26, r18
    1f00:	b3 07       	cpc	r27, r19
    1f02:	51 f1       	breq	.+84     	; 0x1f58 <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1f04:	fc 01       	movw	r30, r24
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	ec 0f       	add	r30, r28
    1f0c:	fd 1f       	adc	r31, r29
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	e3 57       	subi	r30, 0x73	; 115
    1f14:	fd 4f       	sbci	r31, 0xFD	; 253
    1f16:	20 81       	ld	r18, Z
    1f18:	31 81       	ldd	r19, Z+1	; 0x01
    1f1a:	2f 3f       	cpi	r18, 0xFF	; 255
    1f1c:	ef ef       	ldi	r30, 0xFF	; 255
    1f1e:	3e 07       	cpc	r19, r30
    1f20:	39 f0       	breq	.+14     	; 0x1f30 <pickup+0x494>
    1f22:	a2 17       	cp	r26, r18
    1f24:	b3 07       	cpc	r27, r19
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <pickup+0x494>
									pickNode(a1, a1);
    1f28:	be 01       	movw	r22, r28
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	41 dd       	rcall	.-1406   	; 0x19b0 <pickNode>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	86 0f       	add	r24, r22
    1f36:	97 1f       	adc	r25, r23
    1f38:	fc 01       	movw	r30, r24
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e3 57       	subi	r30, 0x73	; 115
    1f40:	fd 4f       	sbci	r31, 0xFD	; 253
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	8f 3f       	cpi	r24, 0xFF	; 255
    1f48:	2f ef       	ldi	r18, 0xFF	; 255
    1f4a:	92 07       	cpc	r25, r18
    1f4c:	29 f0       	breq	.+10     	; 0x1f58 <pickup+0x4bc>
    1f4e:	a8 17       	cp	r26, r24
    1f50:	b9 07       	cpc	r27, r25
    1f52:	11 f0       	breq	.+4      	; 0x1f58 <pickup+0x4bc>
									pickNode(a1, a2);
    1f54:	ce 01       	movw	r24, r28
    1f56:	2c dd       	rcall	.-1448   	; 0x19b0 <pickNode>
					}
				}
			}
		}
}
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	08 95       	ret

00001f66 <drop>:

void drop(int side)
{
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
	lower(side);//lower
    1f6c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <lower>
	open(side);
    1f70:	8c 2f       	mov	r24, r28
    1f72:	0e 94 ef 06 	call	0xdde	; 0xdde <open>
	elevate();//mid
    1f76:	0e 94 b4 06 	call	0xd68	; 0xd68 <elevate>
	
	armCount++;
    1f7a:	80 91 03 02 	lds	r24, 0x0203
    1f7e:	90 91 04 02 	lds	r25, 0x0204
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	90 93 04 02 	sts	0x0204, r25
    1f88:	80 93 03 02 	sts	0x0203, r24
	if(side==0)
    1f8c:	cd 2b       	or	r28, r29
    1f8e:	29 f4       	brne	.+10     	; 0x1f9a <drop+0x34>
	lcd("dropRight");
    1f90:	87 e3       	ldi	r24, 0x37	; 55
    1f92:	92 e0       	ldi	r25, 0x02	; 2
    1f94:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd>
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <drop+0x3c>
	else
	lcd("dropLeft");
    1f9a:	81 e4       	ldi	r24, 0x41	; 65
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd>
}
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	08 95       	ret

00001fa8 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1fb2:	e0 91 89 02 	lds	r30, 0x0289
    1fb6:	f0 91 8a 02 	lds	r31, 0x028A
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e6 0f       	add	r30, r22
    1fc0:	f7 1f       	adc	r31, r23
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	e3 57       	subi	r30, 0x73	; 115
    1fc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fca:	8c 01       	movw	r16, r24
    1fcc:	00 0f       	add	r16, r16
    1fce:	11 1f       	adc	r17, r17
    1fd0:	0d 54       	subi	r16, 0x4D	; 77
    1fd2:	1d 4f       	sbci	r17, 0xFD	; 253
    1fd4:	d8 01       	movw	r26, r16
    1fd6:	8d 91       	ld	r24, X+
    1fd8:	9c 91       	ld	r25, X
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
	position(armNo, side);
    1fde:	ce 01       	movw	r24, r28
    1fe0:	ff db       	rcall	.-2050   	; 0x17e0 <position>
	drop(armNo);
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	c0 df       	rcall	.-128    	; 0x1f66 <drop>
	arm[armNo] = -1;
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	f8 01       	movw	r30, r16
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1ff0:	80 91 58 02 	lds	r24, 0x0258
    1ff4:	90 91 59 02 	lds	r25, 0x0259
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	90 93 59 02 	sts	0x0259, r25
    1ffe:	80 93 58 02 	sts	0x0258, r24
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    2012:	fb 01       	movw	r30, r22
    2014:	ee 0f       	add	r30, r30
    2016:	ff 1f       	adc	r31, r31
    2018:	eb 57       	subi	r30, 0x7B	; 123
    201a:	fd 4f       	sbci	r31, 0xFD	; 253
    201c:	dc 01       	movw	r26, r24
    201e:	aa 0f       	add	r26, r26
    2020:	bb 1f       	adc	r27, r27
    2022:	ad 54       	subi	r26, 0x4D	; 77
    2024:	bd 4f       	sbci	r27, 0xFD	; 253
    2026:	8d 91       	ld	r24, X+
    2028:	9c 91       	ld	r25, X
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    202e:	c6 17       	cp	r28, r22
    2030:	d7 07       	cpc	r29, r23
    2032:	39 f4       	brne	.+14     	; 0x2042 <sortDrop+0x36>
    2034:	80 91 50 02 	lds	r24, 0x0250
    2038:	90 91 51 02 	lds	r25, 0x0251
    203c:	89 2b       	or	r24, r25
    203e:	51 f4       	brne	.+20     	; 0x2054 <sortDrop+0x48>
    2040:	06 c0       	rjmp	.+12     	; 0x204e <sortDrop+0x42>
    2042:	80 91 50 02 	lds	r24, 0x0250
    2046:	90 91 51 02 	lds	r25, 0x0251
    204a:	02 97       	sbiw	r24, 0x02	; 2
    204c:	19 f4       	brne	.+6      	; 0x2054 <sortDrop+0x48>
		turn();
    204e:	0e 94 26 08 	call	0x104c	; 0x104c <turn>
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <sortDrop+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    2054:	80 91 50 02 	lds	r24, 0x0250
    2058:	90 91 51 02 	lds	r25, 0x0251
    205c:	8d 7f       	andi	r24, 0xFD	; 253
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	39 f4       	brne	.+14     	; 0x2070 <sortDrop+0x64>
			if (armNo == 0)
    2062:	20 97       	sbiw	r28, 0x00	; 0
    2064:	19 f4       	brne	.+6      	; 0x206c <sortDrop+0x60>
				turnLeft();
    2066:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <turnLeft>
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <sortDrop+0x64>
			else turnRight();
    206c:	0e 94 8a 07 	call	0xf14	; 0xf14 <turnRight>
	}
	drop(armNo);
    2070:	ce 01       	movw	r24, r28
    2072:	79 df       	rcall	.-270    	; 0x1f66 <drop>
	arm[armNo] = -1;
    2074:	cc 0f       	add	r28, r28
    2076:	dd 1f       	adc	r29, r29
    2078:	cd 54       	subi	r28, 0x4D	; 77
    207a:	dd 4f       	sbci	r29, 0xFD	; 253
    207c:	8f ef       	ldi	r24, 0xFF	; 255
    207e:	9f ef       	ldi	r25, 0xFF	; 255
    2080:	99 83       	std	Y+1, r25	; 0x01
    2082:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <dropPickup>:

void dropPickup(int a1)
{
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    208e:	9c 01       	movw	r18, r24
    2090:	2f 5f       	subi	r18, 0xFF	; 255
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	21 70       	andi	r18, 0x01	; 1
    2096:	30 78       	andi	r19, 0x80	; 128
    2098:	33 23       	and	r19, r19
    209a:	34 f4       	brge	.+12     	; 0x20a8 <dropPickup+0x1e>
    209c:	21 50       	subi	r18, 0x01	; 1
    209e:	31 09       	sbc	r19, r1
    20a0:	2e 6f       	ori	r18, 0xFE	; 254
    20a2:	3f 6f       	ori	r19, 0xFF	; 255
    20a4:	2f 5f       	subi	r18, 0xFF	; 255
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255
    20a8:	d2 2f       	mov	r29, r18
    20aa:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    20ac:	e0 91 89 02 	lds	r30, 0x0289
    20b0:	f0 91 8a 02 	lds	r31, 0x028A
    20b4:	af 01       	movw	r20, r30
    20b6:	44 0f       	add	r20, r20
    20b8:	55 1f       	adc	r21, r21
    20ba:	24 0f       	add	r18, r20
    20bc:	35 1f       	adc	r19, r21
    20be:	d9 01       	movw	r26, r18
    20c0:	aa 0f       	add	r26, r26
    20c2:	bb 1f       	adc	r27, r27
    20c4:	a3 57       	subi	r26, 0x73	; 115
    20c6:	bd 4f       	sbci	r27, 0xFD	; 253
    20c8:	2d 91       	ld	r18, X+
    20ca:	3c 91       	ld	r19, X
    20cc:	da 01       	movw	r26, r20
    20ce:	a1 56       	subi	r26, 0x61	; 97
    20d0:	bd 4f       	sbci	r27, 0xFD	; 253
    20d2:	4d 91       	ld	r20, X+
    20d4:	5c 91       	ld	r21, X
    20d6:	24 17       	cp	r18, r20
    20d8:	35 07       	cpc	r19, r21
    20da:	69 f0       	breq	.+26     	; 0x20f6 <dropPickup+0x6c>
    20dc:	a0 91 af 02 	lds	r26, 0x02AF
    20e0:	b0 91 b0 02 	lds	r27, 0x02B0
    20e4:	aa 0f       	add	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	a1 56       	subi	r26, 0x61	; 97
    20ea:	bd 4f       	sbci	r27, 0xFD	; 253
    20ec:	6d 91       	ld	r22, X+
    20ee:	7c 91       	ld	r23, X
    20f0:	26 17       	cp	r18, r22
    20f2:	37 07       	cpc	r19, r23
    20f4:	a9 f0       	breq	.+42     	; 0x2120 <dropPickup+0x96>
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	e8 0f       	add	r30, r24
    20fc:	f9 1f       	adc	r31, r25
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e3 57       	subi	r30, 0x73	; 115
    2104:	fd 4f       	sbci	r31, 0xFD	; 253
    2106:	01 90       	ld	r0, Z+
    2108:	f0 81       	ld	r31, Z
    210a:	e0 2d       	mov	r30, r0
    210c:	4e 17       	cp	r20, r30
    210e:	5f 07       	cpc	r21, r31
    2110:	39 f0       	breq	.+14     	; 0x2120 <dropPickup+0x96>
    2112:	31 96       	adiw	r30, 0x01	; 1
    2114:	29 f0       	breq	.+10     	; 0x2120 <dropPickup+0x96>
		pickNode(a2, a1);
    2116:	bc 01       	movw	r22, r24
    2118:	8d 2f       	mov	r24, r29
    211a:	9c 2f       	mov	r25, r28
    211c:	49 dc       	rcall	.-1902   	; 0x19b0 <pickNode>
    211e:	0b c0       	rjmp	.+22     	; 0x2136 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    2120:	24 17       	cp	r18, r20
    2122:	35 07       	cpc	r19, r21
    2124:	41 f0       	breq	.+16     	; 0x2136 <dropPickup+0xac>
    2126:	2f 3f       	cpi	r18, 0xFF	; 255
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	29 f0       	breq	.+10     	; 0x2136 <dropPickup+0xac>
		pickNode(a2, a2);
    212c:	6d 2f       	mov	r22, r29
    212e:	7c 2f       	mov	r23, r28
    2130:	8d 2f       	mov	r24, r29
    2132:	9c 2f       	mov	r25, r28
    2134:	3d dc       	rcall	.-1926   	; 0x19b0 <pickNode>
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <canDrop>:

void canDrop()
{
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2144:	20 91 89 02 	lds	r18, 0x0289
    2148:	30 91 8a 02 	lds	r19, 0x028A
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	30 f4       	brcc	.+12     	; 0x215e <canDrop+0x22>
    2152:	80 91 50 02 	lds	r24, 0x0250
    2156:	90 91 51 02 	lds	r25, 0x0251
    215a:	02 97       	sbiw	r24, 0x02	; 2
    215c:	79 f0       	breq	.+30     	; 0x217c <canDrop+0x40>
    215e:	c9 01       	movw	r24, r18
    2160:	02 97       	sbiw	r24, 0x02	; 2
    2162:	02 97       	sbiw	r24, 0x02	; 2
    2164:	80 f4       	brcc	.+32     	; 0x2186 <canDrop+0x4a>
    2166:	80 91 50 02 	lds	r24, 0x0250
    216a:	90 91 51 02 	lds	r25, 0x0251
    216e:	89 2b       	or	r24, r25
    2170:	79 f0       	breq	.+30     	; 0x2190 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    2172:	01 e0       	ldi	r16, 0x01	; 1
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	c0 e0       	ldi	r28, 0x00	; 0
    2178:	d0 e0       	ldi	r29, 0x00	; 0
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    217c:	00 e0       	ldi	r16, 0x00	; 0
    217e:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2180:	c1 e0       	ldi	r28, 0x01	; 1
    2182:	d0 e0       	ldi	r29, 0x00	; 0
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    2186:	01 e0       	ldi	r16, 0x01	; 1
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	c0 e0       	ldi	r28, 0x00	; 0
    218c:	d0 e0       	ldi	r29, 0x00	; 0
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2190:	00 e0       	ldi	r16, 0x00	; 0
    2192:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2194:	c1 e0       	ldi	r28, 0x01	; 1
    2196:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    2198:	40 91 03 02 	lds	r20, 0x0203
    219c:	50 91 04 02 	lds	r21, 0x0204
    21a0:	42 30       	cpi	r20, 0x02	; 2
    21a2:	51 05       	cpc	r21, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <canDrop+0x6c>
    21a6:	3b c1       	rjmp	.+630    	; 0x241e <__stack+0x21f>
    21a8:	f9 01       	movw	r30, r18
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	e1 56       	subi	r30, 0x61	; 97
    21b0:	fd 4f       	sbci	r31, 0xFD	; 253
    21b2:	40 81       	ld	r20, Z
    21b4:	51 81       	ldd	r21, Z+1	; 0x01
    21b6:	80 91 b3 02 	lds	r24, 0x02B3
    21ba:	90 91 b4 02 	lds	r25, 0x02B4
    21be:	84 17       	cp	r24, r20
    21c0:	95 07       	cpc	r25, r21
    21c2:	41 f0       	breq	.+16     	; 0x21d4 <canDrop+0x98>
    21c4:	80 91 b5 02 	lds	r24, 0x02B5
    21c8:	90 91 b6 02 	lds	r25, 0x02B6
    21cc:	48 17       	cp	r20, r24
    21ce:	59 07       	cpc	r21, r25
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <canDrop+0x98>
    21d2:	25 c1       	rjmp	.+586    	; 0x241e <__stack+0x21f>
		return;
	else
	{
		if (visited[ct] == 0)
    21d4:	f9 01       	movw	r30, r18
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	ea 59       	subi	r30, 0x9A	; 154
    21dc:	fd 4f       	sbci	r31, 0xFD	; 253
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	89 2b       	or	r24, r25
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <canDrop+0xac>
			terminalCheck1();
    21e6:	09 d9       	rcall	.-3566   	; 0x13fa <terminalCheck1>
		if (armCount == 0)
    21e8:	80 91 03 02 	lds	r24, 0x0203
    21ec:	90 91 04 02 	lds	r25, 0x0204
    21f0:	89 2b       	or	r24, r25
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <canDrop+0xba>
    21f4:	48 c0       	rjmp	.+144    	; 0x2286 <__stack+0x87>
		{
			if (arm[arm0] == color[ct])
    21f6:	20 91 89 02 	lds	r18, 0x0289
    21fa:	30 91 8a 02 	lds	r19, 0x028A
    21fe:	f9 01       	movw	r30, r18
    2200:	ee 0f       	add	r30, r30
    2202:	ff 1f       	adc	r31, r31
    2204:	e1 56       	subi	r30, 0x61	; 97
    2206:	fd 4f       	sbci	r31, 0xFD	; 253
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	fe 01       	movw	r30, r28
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	ed 54       	subi	r30, 0x4D	; 77
    2214:	fd 4f       	sbci	r31, 0xFD	; 253
    2216:	40 81       	ld	r20, Z
    2218:	51 81       	ldd	r21, Z+1	; 0x01
    221a:	48 17       	cp	r20, r24
    221c:	59 07       	cpc	r21, r25
    221e:	a9 f4       	brne	.+42     	; 0x224a <__stack+0x4b>
				if (term[ct][0] == -1)
    2220:	f9 01       	movw	r30, r18
    2222:	ee 0f       	add	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	e3 57       	subi	r30, 0x73	; 115
    222c:	fd 4f       	sbci	r31, 0xFD	; 253
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	29 f4       	brne	.+10     	; 0x2240 <__stack+0x41>
					nodeDrop(arm0, 0);
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	ce 01       	movw	r24, r28
    223c:	b5 de       	rcall	.-662    	; 0x1fa8 <nodeDrop>
    223e:	23 c0       	rjmp	.+70     	; 0x2286 <__stack+0x87>
				else nodeDrop(arm0, 1);
    2240:	61 e0       	ldi	r22, 0x01	; 1
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	ce 01       	movw	r24, r28
    2246:	b0 de       	rcall	.-672    	; 0x1fa8 <nodeDrop>
    2248:	1e c0       	rjmp	.+60     	; 0x2286 <__stack+0x87>
			else if (arm[arm1] == color[ct])
    224a:	f8 01       	movw	r30, r16
    224c:	ee 0f       	add	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	ed 54       	subi	r30, 0x4D	; 77
    2252:	fd 4f       	sbci	r31, 0xFD	; 253
    2254:	40 81       	ld	r20, Z
    2256:	51 81       	ldd	r21, Z+1	; 0x01
    2258:	84 17       	cp	r24, r20
    225a:	95 07       	cpc	r25, r21
    225c:	a1 f4       	brne	.+40     	; 0x2286 <__stack+0x87>
				if (term[ct][0] != -1)
    225e:	f9 01       	movw	r30, r18
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ee 0f       	add	r30, r30
    2266:	ff 1f       	adc	r31, r31
    2268:	e3 57       	subi	r30, 0x73	; 115
    226a:	fd 4f       	sbci	r31, 0xFD	; 253
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	29 f0       	breq	.+10     	; 0x227e <__stack+0x7f>
					nodeDrop(arm1, 1);
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	c8 01       	movw	r24, r16
    227a:	96 de       	rcall	.-724    	; 0x1fa8 <nodeDrop>
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <__stack+0x87>
				else nodeDrop(arm1, 0);
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	c8 01       	movw	r24, r16
    2284:	91 de       	rcall	.-734    	; 0x1fa8 <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    2286:	20 91 89 02 	lds	r18, 0x0289
    228a:	30 91 8a 02 	lds	r19, 0x028A
    228e:	f9 01       	movw	r30, r18
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	e1 56       	subi	r30, 0x61	; 97
    2296:	fd 4f       	sbci	r31, 0xFD	; 253
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	40 91 b3 02 	lds	r20, 0x02B3
    22a0:	50 91 b4 02 	lds	r21, 0x02B4
    22a4:	48 17       	cp	r20, r24
    22a6:	59 07       	cpc	r21, r25
    22a8:	41 f0       	breq	.+16     	; 0x22ba <__stack+0xbb>
    22aa:	40 91 b5 02 	lds	r20, 0x02B5
    22ae:	50 91 b6 02 	lds	r21, 0x02B6
    22b2:	84 17       	cp	r24, r20
    22b4:	95 07       	cpc	r25, r21
    22b6:	09 f0       	breq	.+2      	; 0x22ba <__stack+0xbb>
    22b8:	b2 c0       	rjmp	.+356    	; 0x241e <__stack+0x21f>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    22ba:	f9 01       	movw	r30, r18
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	e3 57       	subi	r30, 0x73	; 115
    22c6:	fd 4f       	sbci	r31, 0xFD	; 253
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <__stack+0xd3>
    22d0:	45 c0       	rjmp	.+138    	; 0x235c <__stack+0x15d>
    22d2:	f9 01       	movw	r30, r18
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	e3 57       	subi	r30, 0x73	; 115
    22de:	fd 4f       	sbci	r31, 0xFD	; 253
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	c9 f0       	breq	.+50     	; 0x231a <__stack+0x11b>
				if (visited[ct] == 0)
    22e8:	f9 01       	movw	r30, r18
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	ea 59       	subi	r30, 0x9A	; 154
    22f0:	fd 4f       	sbci	r31, 0xFD	; 253
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	89 2b       	or	r24, r25
    22f8:	81 f4       	brne	.+32     	; 0x231a <__stack+0x11b>
					terminalCheck2();
    22fa:	42 d9       	rcall	.-3452   	; 0x1580 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    22fc:	20 91 89 02 	lds	r18, 0x0289
    2300:	30 91 8a 02 	lds	r19, 0x028A
    2304:	f9 01       	movw	r30, r18
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	e3 57       	subi	r30, 0x73	; 115
    2310:	fd 4f       	sbci	r31, 0xFD	; 253
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	09 f1       	breq	.+66     	; 0x235c <__stack+0x15d>
    231a:	f9 01       	movw	r30, r18
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	e3 57       	subi	r30, 0x73	; 115
    2326:	fd 4f       	sbci	r31, 0xFD	; 253
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	b1 f0       	breq	.+44     	; 0x235c <__stack+0x15d>
			{
				if (arm[arm0] == color[ct])
    2330:	de 01       	movw	r26, r28
    2332:	aa 0f       	add	r26, r26
    2334:	bb 1f       	adc	r27, r27
    2336:	ad 54       	subi	r26, 0x4D	; 77
    2338:	bd 4f       	sbci	r27, 0xFD	; 253
    233a:	f9 01       	movw	r30, r18
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	e1 56       	subi	r30, 0x61	; 97
    2342:	fd 4f       	sbci	r31, 0xFD	; 253
    2344:	4d 91       	ld	r20, X+
    2346:	5c 91       	ld	r21, X
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	48 17       	cp	r20, r24
    234e:	59 07       	cpc	r21, r25
    2350:	19 f4       	brne	.+6      	; 0x2358 <__stack+0x159>
					dropPickup(arm0);
    2352:	ce 01       	movw	r24, r28
    2354:	9a de       	rcall	.-716    	; 0x208a <dropPickup>
    2356:	02 c0       	rjmp	.+4      	; 0x235c <__stack+0x15d>
				else dropPickup(arm1);
    2358:	c8 01       	movw	r24, r16
    235a:	97 de       	rcall	.-722    	; 0x208a <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    235c:	80 91 89 02 	lds	r24, 0x0289
    2360:	90 91 8a 02 	lds	r25, 0x028A
    2364:	fc 01       	movw	r30, r24
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	e1 56       	subi	r30, 0x61	; 97
    236c:	fd 4f       	sbci	r31, 0xFD	; 253
    236e:	20 81       	ld	r18, Z
    2370:	31 81       	ldd	r19, Z+1	; 0x01
    2372:	fe 01       	movw	r30, r28
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ed 54       	subi	r30, 0x4D	; 77
    237a:	fd 4f       	sbci	r31, 0xFD	; 253
    237c:	40 81       	ld	r20, Z
    237e:	51 81       	ldd	r21, Z+1	; 0x01
    2380:	42 17       	cp	r20, r18
    2382:	53 07       	cpc	r21, r19
    2384:	11 f5       	brne	.+68     	; 0x23ca <__stack+0x1cb>
    2386:	fc 01       	movw	r30, r24
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	e3 57       	subi	r30, 0x73	; 115
    2392:	fd 4f       	sbci	r31, 0xFD	; 253
    2394:	40 81       	ld	r20, Z
    2396:	51 81       	ldd	r21, Z+1	; 0x01
    2398:	4f 3f       	cpi	r20, 0xFF	; 255
    239a:	5f 4f       	sbci	r21, 0xFF	; 255
    239c:	29 f4       	brne	.+10     	; 0x23a8 <__stack+0x1a9>
				nodeDrop(arm0, 0);
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    23a2:	ce 01       	movw	r24, r28
    23a4:	01 de       	rcall	.-1022   	; 0x1fa8 <nodeDrop>
    23a6:	3b c0       	rjmp	.+118    	; 0x241e <__stack+0x21f>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    23a8:	fc 01       	movw	r30, r24
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e3 57       	subi	r30, 0x73	; 115
    23b4:	fd 4f       	sbci	r31, 0xFD	; 253
    23b6:	42 81       	ldd	r20, Z+2	; 0x02
    23b8:	53 81       	ldd	r21, Z+3	; 0x03
    23ba:	4f 3f       	cpi	r20, 0xFF	; 255
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255
    23be:	29 f4       	brne	.+10     	; 0x23ca <__stack+0x1cb>
				nodeDrop(arm0, 1);
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	70 e0       	ldi	r23, 0x00	; 0
    23c4:	ce 01       	movw	r24, r28
    23c6:	f0 dd       	rcall	.-1056   	; 0x1fa8 <nodeDrop>
    23c8:	2a c0       	rjmp	.+84     	; 0x241e <__stack+0x21f>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    23ca:	f8 01       	movw	r30, r16
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	ed 54       	subi	r30, 0x4D	; 77
    23d2:	fd 4f       	sbci	r31, 0xFD	; 253
    23d4:	40 81       	ld	r20, Z
    23d6:	51 81       	ldd	r21, Z+1	; 0x01
    23d8:	24 17       	cp	r18, r20
    23da:	35 07       	cpc	r19, r21
    23dc:	01 f5       	brne	.+64     	; 0x241e <__stack+0x21f>
    23de:	fc 01       	movw	r30, r24
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	e3 57       	subi	r30, 0x73	; 115
    23ea:	fd 4f       	sbci	r31, 0xFD	; 253
    23ec:	20 81       	ld	r18, Z
    23ee:	31 81       	ldd	r19, Z+1	; 0x01
    23f0:	2f 3f       	cpi	r18, 0xFF	; 255
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	29 f4       	brne	.+10     	; 0x2400 <__stack+0x201>
				nodeDrop(arm1, 0);
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	c8 01       	movw	r24, r16
    23fc:	d5 dd       	rcall	.-1110   	; 0x1fa8 <nodeDrop>
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <__stack+0x21f>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    2400:	fc 01       	movw	r30, r24
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	e3 57       	subi	r30, 0x73	; 115
    240c:	fd 4f       	sbci	r31, 0xFD	; 253
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	21 f4       	brne	.+8      	; 0x241e <__stack+0x21f>
				nodeDrop(arm1, 1);
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	c8 01       	movw	r24, r16
    241c:	c5 dd       	rcall	.-1142   	; 0x1fa8 <nodeDrop>

		}
	}
}
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <newSort>:

void newSort()
{
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    2430:	20 91 b3 02 	lds	r18, 0x02B3
    2434:	30 91 b4 02 	lds	r19, 0x02B4
    2438:	2f 3f       	cpi	r18, 0xFF	; 255
    243a:	1f ef       	ldi	r17, 0xFF	; 255
    243c:	31 07       	cpc	r19, r17
    243e:	41 f0       	breq	.+16     	; 0x2450 <newSort+0x28>
		a1 = indicator[arm[0]];
    2440:	f9 01       	movw	r30, r18
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	e9 55       	subi	r30, 0x59	; 89
    2448:	fd 4f       	sbci	r31, 0xFD	; 253
    244a:	c0 81       	ld	r28, Z
    244c:	d1 81       	ldd	r29, Z+1	; 0x01
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    2450:	ce ef       	ldi	r28, 0xFE	; 254
    2452:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    2454:	e0 91 b5 02 	lds	r30, 0x02B5
    2458:	f0 91 b6 02 	lds	r31, 0x02B6
    245c:	ef 3f       	cpi	r30, 0xFF	; 255
    245e:	4f ef       	ldi	r20, 0xFF	; 255
    2460:	f4 07       	cpc	r31, r20
    2462:	09 f4       	brne	.+2      	; 0x2466 <newSort+0x3e>
    2464:	7f c1       	rjmp	.+766    	; 0x2764 <newSort+0x33c>
		a2 = indicator[arm[1]];
    2466:	df 01       	movw	r26, r30
    2468:	aa 0f       	add	r26, r26
    246a:	bb 1f       	adc	r27, r27
    246c:	a9 55       	subi	r26, 0x59	; 89
    246e:	bd 4f       	sbci	r27, 0xFD	; 253
    2470:	4d 91       	ld	r20, X+
    2472:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    2474:	80 91 89 02 	lds	r24, 0x0289
    2478:	90 91 8a 02 	lds	r25, 0x028A
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	81 70       	andi	r24, 0x01	; 1
    2480:	90 78       	andi	r25, 0x80	; 128
    2482:	99 23       	and	r25, r25
    2484:	24 f4       	brge	.+8      	; 0x248e <newSort+0x66>
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	8e 6f       	ori	r24, 0xFE	; 254
    248a:	9f 6f       	ori	r25, 0xFF	; 255
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2490:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    2492:	d0 93 8a 02 	sts	0x028A, r29
    2496:	c0 93 89 02 	sts	0x0289, r28
		if(arm[0]==arm[1] && (visited[a1]==0 ||(term[a1][0] != -1 && term[a1][1] != -1)))
    249a:	2e 17       	cp	r18, r30
    249c:	3f 07       	cpc	r19, r31
    249e:	61 f5       	brne	.+88     	; 0x24f8 <newSort+0xd0>
    24a0:	de 01       	movw	r26, r28
    24a2:	aa 0f       	add	r26, r26
    24a4:	bb 1f       	adc	r27, r27
    24a6:	aa 59       	subi	r26, 0x9A	; 154
    24a8:	bd 4f       	sbci	r27, 0xFD	; 253
    24aa:	0d 90       	ld	r0, X+
    24ac:	bc 91       	ld	r27, X
    24ae:	a0 2d       	mov	r26, r0
    24b0:	ab 2b       	or	r26, r27
    24b2:	c9 f0       	breq	.+50     	; 0x24e6 <newSort+0xbe>
    24b4:	de 01       	movw	r26, r28
    24b6:	aa 0f       	add	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	aa 0f       	add	r26, r26
    24bc:	bb 1f       	adc	r27, r27
    24be:	a3 57       	subi	r26, 0x73	; 115
    24c0:	bd 4f       	sbci	r27, 0xFD	; 253
    24c2:	0d 90       	ld	r0, X+
    24c4:	bc 91       	ld	r27, X
    24c6:	a0 2d       	mov	r26, r0
    24c8:	11 96       	adiw	r26, 0x01	; 1
    24ca:	b1 f0       	breq	.+44     	; 0x24f8 <newSort+0xd0>
    24cc:	de 01       	movw	r26, r28
    24ce:	aa 0f       	add	r26, r26
    24d0:	bb 1f       	adc	r27, r27
    24d2:	aa 0f       	add	r26, r26
    24d4:	bb 1f       	adc	r27, r27
    24d6:	a3 57       	subi	r26, 0x73	; 115
    24d8:	bd 4f       	sbci	r27, 0xFD	; 253
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	0d 90       	ld	r0, X+
    24de:	bc 91       	ld	r27, X
    24e0:	a0 2d       	mov	r26, r0
    24e2:	11 96       	adiw	r26, 0x01	; 1
    24e4:	49 f0       	breq	.+18     	; 0x24f8 <newSort+0xd0>
		{
			if(a1== 0 || a1==3)
    24e6:	20 97       	sbiw	r28, 0x00	; 0
    24e8:	19 f0       	breq	.+6      	; 0x24f0 <newSort+0xc8>
    24ea:	23 97       	sbiw	r28, 0x03	; 3
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <newSort+0xc8>
    24ee:	28 c1       	rjmp	.+592    	; 0x2740 <newSort+0x318>
				sortDrop(1,t1);
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	8b dd       	rcall	.-1258   	; 0x200c <sortDrop>
    24f6:	24 c1       	rjmp	.+584    	; 0x2740 <newSort+0x318>
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    24f8:	2f 3f       	cpi	r18, 0xFF	; 255
    24fa:	af ef       	ldi	r26, 0xFF	; 255
    24fc:	3a 07       	cpc	r19, r26
    24fe:	c1 f1       	breq	.+112    	; 0x2570 <newSort+0x148>
    2500:	de 01       	movw	r26, r28
    2502:	aa 0f       	add	r26, r26
    2504:	bb 1f       	adc	r27, r27
    2506:	aa 0f       	add	r26, r26
    2508:	bb 1f       	adc	r27, r27
    250a:	a3 57       	subi	r26, 0x73	; 115
    250c:	bd 4f       	sbci	r27, 0xFD	; 253
    250e:	0d 90       	ld	r0, X+
    2510:	bc 91       	ld	r27, X
    2512:	a0 2d       	mov	r26, r0
    2514:	11 96       	adiw	r26, 0x01	; 1
    2516:	51 f0       	breq	.+20     	; 0x252c <newSort+0x104>
    2518:	cc 0f       	add	r28, r28
    251a:	dd 1f       	adc	r29, r29
    251c:	cc 0f       	add	r28, r28
    251e:	dd 1f       	adc	r29, r29
    2520:	c3 57       	subi	r28, 0x73	; 115
    2522:	dd 4f       	sbci	r29, 0xFD	; 253
    2524:	aa 81       	ldd	r26, Y+2	; 0x02
    2526:	bb 81       	ldd	r27, Y+3	; 0x03
    2528:	11 96       	adiw	r26, 0x01	; 1
    252a:	11 f5       	brne	.+68     	; 0x2570 <newSort+0x148>
		{
			if (arm[1] == -1)
    252c:	31 96       	adiw	r30, 0x01	; 1
    252e:	09 f0       	breq	.+2      	; 0x2532 <newSort+0x10a>
    2530:	07 c1       	rjmp	.+526    	; 0x2740 <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2532:	9b 01       	movw	r18, r22
    2534:	22 0f       	add	r18, r18
    2536:	33 1f       	adc	r19, r19
    2538:	f9 01       	movw	r30, r18
    253a:	eb 57       	subi	r30, 0x7B	; 123
    253c:	fd 4f       	sbci	r31, 0xFD	; 253
    253e:	40 81       	ld	r20, Z
    2540:	51 81       	ldd	r21, Z+1	; 0x01
    2542:	f9 01       	movw	r30, r18
    2544:	e1 56       	subi	r30, 0x61	; 97
    2546:	fd 4f       	sbci	r31, 0xFD	; 253
    2548:	20 81       	ld	r18, Z
    254a:	31 81       	ldd	r19, Z+1	; 0x01
    254c:	42 17       	cp	r20, r18
    254e:	53 07       	cpc	r21, r19
    2550:	59 f0       	breq	.+22     	; 0x2568 <newSort+0x140>
    2552:	fc 01       	movw	r30, r24
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	e1 56       	subi	r30, 0x61	; 97
    255a:	fd 4f       	sbci	r31, 0xFD	; 253
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	48 17       	cp	r20, r24
    2562:	59 07       	cpc	r21, r25
    2564:	09 f0       	breq	.+2      	; 0x2568 <newSort+0x140>
    2566:	ec c0       	rjmp	.+472    	; 0x2740 <newSort+0x318>
					pickSort(1, t1);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	55 da       	rcall	.-2902   	; 0x1a18 <pickSort>
    256e:	e8 c0       	rjmp	.+464    	; 0x2740 <newSort+0x318>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    2570:	ef 3f       	cpi	r30, 0xFF	; 255
    2572:	af ef       	ldi	r26, 0xFF	; 255
    2574:	fa 07       	cpc	r31, r26
    2576:	09 f4       	brne	.+2      	; 0x257a <newSort+0x152>
    2578:	51 c0       	rjmp	.+162    	; 0x261c <newSort+0x1f4>
    257a:	da 01       	movw	r26, r20
    257c:	aa 0f       	add	r26, r26
    257e:	bb 1f       	adc	r27, r27
    2580:	aa 0f       	add	r26, r26
    2582:	bb 1f       	adc	r27, r27
    2584:	a3 57       	subi	r26, 0x73	; 115
    2586:	bd 4f       	sbci	r27, 0xFD	; 253
    2588:	0d 90       	ld	r0, X+
    258a:	bc 91       	ld	r27, X
    258c:	a0 2d       	mov	r26, r0
    258e:	11 96       	adiw	r26, 0x01	; 1
    2590:	09 f4       	brne	.+2      	; 0x2594 <newSort+0x16c>
    2592:	0a c1       	rjmp	.+532    	; 0x27a8 <newSort+0x380>
    2594:	da 01       	movw	r26, r20
    2596:	aa 0f       	add	r26, r26
    2598:	bb 1f       	adc	r27, r27
    259a:	aa 0f       	add	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	a3 57       	subi	r26, 0x73	; 115
    25a0:	bd 4f       	sbci	r27, 0xFD	; 253
    25a2:	12 96       	adiw	r26, 0x02	; 2
    25a4:	0d 90       	ld	r0, X+
    25a6:	bc 91       	ld	r27, X
    25a8:	a0 2d       	mov	r26, r0
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	b9 f5       	brne	.+110    	; 0x261c <newSort+0x1f4>
    25ae:	ea c0       	rjmp	.+468    	; 0x2784 <newSort+0x35c>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    25b0:	2f 3f       	cpi	r18, 0xFF	; 255
    25b2:	3f 4f       	sbci	r19, 0xFF	; 255
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <newSort+0x190>
    25b6:	c4 c0       	rjmp	.+392    	; 0x2740 <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    25b8:	9b 01       	movw	r18, r22
    25ba:	22 0f       	add	r18, r18
    25bc:	33 1f       	adc	r19, r19
    25be:	f9 01       	movw	r30, r18
    25c0:	eb 57       	subi	r30, 0x7B	; 123
    25c2:	fd 4f       	sbci	r31, 0xFD	; 253
    25c4:	40 81       	ld	r20, Z
    25c6:	51 81       	ldd	r21, Z+1	; 0x01
    25c8:	f9 01       	movw	r30, r18
    25ca:	e1 56       	subi	r30, 0x61	; 97
    25cc:	fd 4f       	sbci	r31, 0xFD	; 253
    25ce:	20 81       	ld	r18, Z
    25d0:	31 81       	ldd	r19, Z+1	; 0x01
    25d2:	42 17       	cp	r20, r18
    25d4:	53 07       	cpc	r21, r19
    25d6:	09 f0       	breq	.+2      	; 0x25da <newSort+0x1b2>
    25d8:	b3 c0       	rjmp	.+358    	; 0x2740 <newSort+0x318>
    25da:	fc 01       	movw	r30, r24
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	e1 56       	subi	r30, 0x61	; 97
    25e2:	fd 4f       	sbci	r31, 0xFD	; 253
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	48 17       	cp	r20, r24
    25ea:	59 07       	cpc	r21, r25
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <newSort+0x1c8>
    25ee:	a8 c0       	rjmp	.+336    	; 0x2740 <newSort+0x318>
						pickSort(1, t1);
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	11 da       	rcall	.-3038   	; 0x1a18 <pickSort>
    25f6:	a4 c0       	rjmp	.+328    	; 0x2740 <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    25f8:	fb 01       	movw	r30, r22
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	eb 57       	subi	r30, 0x7B	; 123
    2600:	fd 4f       	sbci	r31, 0xFD	; 253
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	09 f0       	breq	.+2      	; 0x260c <newSort+0x1e4>
    260a:	9a c0       	rjmp	.+308    	; 0x2740 <newSort+0x318>
    260c:	2f 3f       	cpi	r18, 0xFF	; 255
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	09 f4       	brne	.+2      	; 0x2614 <newSort+0x1ec>
    2612:	96 c0       	rjmp	.+300    	; 0x2740 <newSort+0x318>
				sortDrop(1, t1);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	f9 dc       	rcall	.-1550   	; 0x200c <sortDrop>
    261a:	92 c0       	rjmp	.+292    	; 0x2740 <newSort+0x318>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    261c:	2f 3f       	cpi	r18, 0xFF	; 255
    261e:	1f ef       	ldi	r17, 0xFF	; 255
    2620:	31 07       	cpc	r19, r17
    2622:	a1 f0       	breq	.+40     	; 0x264c <newSort+0x224>
    2624:	db 01       	movw	r26, r22
    2626:	aa 0f       	add	r26, r26
    2628:	bb 1f       	adc	r27, r27
    262a:	ab 57       	subi	r26, 0x7B	; 123
    262c:	bd 4f       	sbci	r27, 0xFD	; 253
    262e:	8d 91       	ld	r24, X+
    2630:	9c 91       	ld	r25, X
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	31 f4       	brne	.+12     	; 0x2642 <newSort+0x21a>
    2636:	31 96       	adiw	r30, 0x01	; 1
    2638:	21 f0       	breq	.+8      	; 0x2642 <newSort+0x21a>
			sortDrop(1, t1);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	e6 dc       	rcall	.-1588   	; 0x200c <sortDrop>
    2640:	7f c0       	rjmp	.+254    	; 0x2740 <newSort+0x318>
		else if (arm[0] != -1)
			ct = arm[0];
    2642:	30 93 8a 02 	sts	0x028A, r19
    2646:	20 93 89 02 	sts	0x0289, r18
    264a:	7a c0       	rjmp	.+244    	; 0x2740 <newSort+0x318>
		else ct = arm[1];
    264c:	f0 93 8a 02 	sts	0x028A, r31
    2650:	e0 93 89 02 	sts	0x0289, r30
    2654:	75 c0       	rjmp	.+234    	; 0x2740 <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    2656:	a8 01       	movw	r20, r16
    2658:	44 0f       	add	r20, r20
    265a:	55 1f       	adc	r21, r21
    265c:	fa 01       	movw	r30, r20
    265e:	eb 57       	subi	r30, 0x7B	; 123
    2660:	fd 4f       	sbci	r31, 0xFD	; 253
    2662:	20 81       	ld	r18, Z
    2664:	31 81       	ldd	r19, Z+1	; 0x01
    2666:	fa 01       	movw	r30, r20
    2668:	e1 56       	subi	r30, 0x61	; 97
    266a:	fd 4f       	sbci	r31, 0xFD	; 253
    266c:	40 81       	ld	r20, Z
    266e:	51 81       	ldd	r21, Z+1	; 0x01
    2670:	24 17       	cp	r18, r20
    2672:	35 07       	cpc	r19, r21
    2674:	51 f0       	breq	.+20     	; 0x268a <newSort+0x262>
    2676:	fc 01       	movw	r30, r24
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	e1 56       	subi	r30, 0x61	; 97
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	26 17       	cp	r18, r22
    2686:	37 07       	cpc	r19, r23
    2688:	81 f4       	brne	.+32     	; 0x26aa <newSort+0x282>
    268a:	2f 3f       	cpi	r18, 0xFF	; 255
    268c:	af ef       	ldi	r26, 0xFF	; 255
    268e:	3a 07       	cpc	r19, r26
    2690:	31 f1       	breq	.+76     	; 0x26de <newSort+0x2b6>
			ct = indicator[sort[t1]];
    2692:	f9 01       	movw	r30, r18
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	e9 55       	subi	r30, 0x59	; 89
    269a:	fd 4f       	sbci	r31, 0xFD	; 253
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	90 93 8a 02 	sts	0x028A, r25
    26a4:	80 93 89 02 	sts	0x0289, r24
    26a8:	4b c0       	rjmp	.+150    	; 0x2740 <newSort+0x318>
		else if (sort[t1] != -1)
    26aa:	2f 3f       	cpi	r18, 0xFF	; 255
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	b9 f0       	breq	.+46     	; 0x26de <newSort+0x2b6>
		{
			pickSort(0, t1);
    26b0:	b8 01       	movw	r22, r16
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	b0 d9       	rcall	.-3232   	; 0x1a18 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    26b8:	0f 5f       	subi	r16, 0xFF	; 255
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	01 70       	andi	r16, 0x01	; 1
    26be:	10 78       	andi	r17, 0x80	; 128
    26c0:	11 23       	and	r17, r17
    26c2:	34 f4       	brge	.+12     	; 0x26d0 <newSort+0x2a8>
    26c4:	01 50       	subi	r16, 0x01	; 1
    26c6:	11 09       	sbc	r17, r1
    26c8:	0e 6f       	ori	r16, 0xFE	; 254
    26ca:	1f 6f       	ori	r17, 0xFF	; 255
    26cc:	0f 5f       	subi	r16, 0xFF	; 255
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	0c 5f       	subi	r16, 0xFC	; 252
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	10 93 8a 02 	sts	0x028A, r17
    26d8:	00 93 89 02 	sts	0x0289, r16
    26dc:	31 c0       	rjmp	.+98     	; 0x2740 <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    26de:	f8 01       	movw	r30, r16
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	ea 59       	subi	r30, 0x9A	; 154
    26e6:	fd 4f       	sbci	r31, 0xFD	; 253
    26e8:	20 81       	ld	r18, Z
    26ea:	31 81       	ldd	r19, Z+1	; 0x01
    26ec:	21 30       	cpi	r18, 0x01	; 1
    26ee:	31 05       	cpc	r19, r1
    26f0:	19 f5       	brne	.+70     	; 0x2738 <newSort+0x310>
    26f2:	f8 01       	movw	r30, r16
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	e3 57       	subi	r30, 0x73	; 115
    26fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2700:	20 81       	ld	r18, Z
    2702:	31 81       	ldd	r19, Z+1	; 0x01
    2704:	42 17       	cp	r20, r18
    2706:	53 07       	cpc	r21, r19
    2708:	19 f0       	breq	.+6      	; 0x2710 <newSort+0x2e8>
    270a:	2f 3f       	cpi	r18, 0xFF	; 255
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	a1 f4       	brne	.+40     	; 0x2738 <newSort+0x310>
    2710:	f8 01       	movw	r30, r16
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	e3 57       	subi	r30, 0x73	; 115
    271c:	fd 4f       	sbci	r31, 0xFD	; 253
    271e:	22 81       	ldd	r18, Z+2	; 0x02
    2720:	33 81       	ldd	r19, Z+3	; 0x03
    2722:	42 17       	cp	r20, r18
    2724:	53 07       	cpc	r21, r19
    2726:	19 f0       	breq	.+6      	; 0x272e <newSort+0x306>
    2728:	2f 3f       	cpi	r18, 0xFF	; 255
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	29 f4       	brne	.+10     	; 0x2738 <newSort+0x310>
			ct = t2;
    272e:	90 93 8a 02 	sts	0x028A, r25
    2732:	80 93 89 02 	sts	0x0289, r24
    2736:	04 c0       	rjmp	.+8      	; 0x2740 <newSort+0x318>
		else ct = t1;
    2738:	10 93 8a 02 	sts	0x028A, r17
    273c:	00 93 89 02 	sts	0x0289, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2740:	80 91 89 02 	lds	r24, 0x0289
    2744:	90 91 8a 02 	lds	r25, 0x028A
    2748:	02 96       	adiw	r24, 0x02	; 2
    274a:	83 70       	andi	r24, 0x03	; 3
    274c:	90 78       	andi	r25, 0x80	; 128
    274e:	99 23       	and	r25, r25
    2750:	24 f4       	brge	.+8      	; 0x275a <newSort+0x332>
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	8c 6f       	ori	r24, 0xFC	; 252
    2756:	9f 6f       	ori	r25, 0xFF	; 255
    2758:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    275a:	90 93 b0 02 	sts	0x02B0, r25
    275e:	80 93 af 02 	sts	0x02AF, r24
    2762:	2e c0       	rjmp	.+92     	; 0x27c0 <newSort+0x398>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    2764:	80 91 89 02 	lds	r24, 0x0289
    2768:	90 91 8a 02 	lds	r25, 0x028A
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	62 e0       	ldi	r22, 0x02	; 2
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	ba d4       	rcall	.+2420   	; 0x30e8 <__divmodhi4>
    2774:	8c 01       	movw	r16, r24
    2776:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2778:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    277a:	2f 3f       	cpi	r18, 0xFF	; 255
    277c:	af ef       	ldi	r26, 0xFF	; 255
    277e:	3a 07       	cpc	r19, r26
    2780:	c1 f4       	brne	.+48     	; 0x27b2 <newSort+0x38a>
    2782:	69 cf       	rjmp	.-302    	; 0x2656 <newSort+0x22e>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2784:	50 93 8a 02 	sts	0x028A, r21
    2788:	40 93 89 02 	sts	0x0289, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    278c:	fa 01       	movw	r30, r20
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	ee 0f       	add	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	e3 57       	subi	r30, 0x73	; 115
    2798:	fd 4f       	sbci	r31, 0xFD	; 253
    279a:	42 81       	ldd	r20, Z+2	; 0x02
    279c:	53 81       	ldd	r21, Z+3	; 0x03
    279e:	4f 3f       	cpi	r20, 0xFF	; 255
    27a0:	5f 4f       	sbci	r21, 0xFF	; 255
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <newSort+0x37e>
    27a4:	29 cf       	rjmp	.-430    	; 0x25f8 <newSort+0x1d0>
    27a6:	04 cf       	rjmp	.-504    	; 0x25b0 <newSort+0x188>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    27a8:	50 93 8a 02 	sts	0x028A, r21
    27ac:	40 93 89 02 	sts	0x0289, r20
    27b0:	ff ce       	rjmp	.-514    	; 0x25b0 <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    27b2:	d0 93 8a 02 	sts	0x028A, r29
    27b6:	c0 93 89 02 	sts	0x0289, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    27ba:	4e ef       	ldi	r20, 0xFE	; 254
    27bc:	5f ef       	ldi	r21, 0xFF	; 255
    27be:	9c ce       	rjmp	.-712    	; 0x24f8 <newSort+0xd0>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	08 95       	ret

000027ca <sortCheck>:
void sortCheck()
{
    27ca:	8f 92       	push	r8
    27cc:	9f 92       	push	r9
    27ce:	af 92       	push	r10
    27d0:	bf 92       	push	r11
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    27e2:	40 91 89 02 	lds	r20, 0x0289
    27e6:	50 91 8a 02 	lds	r21, 0x028A
    27ea:	42 30       	cpi	r20, 0x02	; 2
    27ec:	51 05       	cpc	r21, r1
    27ee:	30 f4       	brcc	.+12     	; 0x27fc <sortCheck+0x32>
    27f0:	80 91 50 02 	lds	r24, 0x0250
    27f4:	90 91 51 02 	lds	r25, 0x0251
    27f8:	02 97       	sbiw	r24, 0x02	; 2
    27fa:	79 f0       	breq	.+30     	; 0x281a <sortCheck+0x50>
    27fc:	ca 01       	movw	r24, r20
    27fe:	02 97       	sbiw	r24, 0x02	; 2
    2800:	02 97       	sbiw	r24, 0x02	; 2
    2802:	80 f4       	brcc	.+32     	; 0x2824 <sortCheck+0x5a>
    2804:	80 91 50 02 	lds	r24, 0x0250
    2808:	90 91 51 02 	lds	r25, 0x0251
    280c:	89 2b       	or	r24, r25
    280e:	79 f0       	breq	.+30     	; 0x282e <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2810:	01 e0       	ldi	r16, 0x01	; 1
    2812:	10 e0       	ldi	r17, 0x00	; 0
    2814:	c0 e0       	ldi	r28, 0x00	; 0
    2816:	d0 e0       	ldi	r29, 0x00	; 0
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    281a:	00 e0       	ldi	r16, 0x00	; 0
    281c:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    281e:	c1 e0       	ldi	r28, 0x01	; 1
    2820:	d0 e0       	ldi	r29, 0x00	; 0
    2822:	09 c0       	rjmp	.+18     	; 0x2836 <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2824:	01 e0       	ldi	r16, 0x01	; 1
    2826:	10 e0       	ldi	r17, 0x00	; 0
    2828:	c0 e0       	ldi	r28, 0x00	; 0
    282a:	d0 e0       	ldi	r29, 0x00	; 0
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    282e:	00 e0       	ldi	r16, 0x00	; 0
    2830:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2832:	c1 e0       	ldi	r28, 0x01	; 1
    2834:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    2836:	9a 01       	movw	r18, r20
    2838:	21 70       	andi	r18, 0x01	; 1
    283a:	30 78       	andi	r19, 0x80	; 128
    283c:	33 23       	and	r19, r19
    283e:	34 f4       	brge	.+12     	; 0x284c <sortCheck+0x82>
    2840:	21 50       	subi	r18, 0x01	; 1
    2842:	31 09       	sbc	r19, r1
    2844:	2e 6f       	ori	r18, 0xFE	; 254
    2846:	3f 6f       	ori	r19, 0xFF	; 255
    2848:	2f 5f       	subi	r18, 0xFF	; 255
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	b2 2e       	mov	r11, r18
    284e:	a3 2e       	mov	r10, r19
    2850:	f9 01       	movw	r30, r18
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	eb 57       	subi	r30, 0x7B	; 123
    2858:	fd 4f       	sbci	r31, 0xFD	; 253
    285a:	20 81       	ld	r18, Z
    285c:	31 81       	ldd	r19, Z+1	; 0x01
    285e:	fa 01       	movw	r30, r20
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	e1 56       	subi	r30, 0x61	; 97
    2866:	fd 4f       	sbci	r31, 0xFD	; 253
    2868:	80 81       	ld	r24, Z
    286a:	91 81       	ldd	r25, Z+1	; 0x01
    286c:	28 17       	cp	r18, r24
    286e:	39 07       	cpc	r19, r25
    2870:	79 f0       	breq	.+30     	; 0x2890 <sortCheck+0xc6>
    2872:	80 91 af 02 	lds	r24, 0x02AF
    2876:	90 91 b0 02 	lds	r25, 0x02B0
    287a:	fc 01       	movw	r30, r24
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	e1 56       	subi	r30, 0x61	; 97
    2882:	fd 4f       	sbci	r31, 0xFD	; 253
    2884:	40 81       	ld	r20, Z
    2886:	51 81       	ldd	r21, Z+1	; 0x01
    2888:	24 17       	cp	r18, r20
    288a:	35 07       	cpc	r19, r21
    288c:	09 f0       	breq	.+2      	; 0x2890 <sortCheck+0xc6>
    288e:	a6 c0       	rjmp	.+332    	; 0x29dc <sortCheck+0x212>
	{
		if (armCount>0)
    2890:	80 91 03 02 	lds	r24, 0x0203
    2894:	90 91 04 02 	lds	r25, 0x0204
    2898:	18 16       	cp	r1, r24
    289a:	19 06       	cpc	r1, r25
    289c:	0c f0       	brlt	.+2      	; 0x28a0 <sortCheck+0xd6>
    289e:	95 c0       	rjmp	.+298    	; 0x29ca <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    28a0:	f9 01       	movw	r30, r18
    28a2:	ee 0f       	add	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	e9 55       	subi	r30, 0x59	; 89
    28a8:	fd 4f       	sbci	r31, 0xFD	; 253
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	70 93 8a 02 	sts	0x028A, r23
    28b2:	60 93 89 02 	sts	0x0289, r22
			if (arm[arm0] == -1)
    28b6:	fe 01       	movw	r30, r28
    28b8:	ee 0f       	add	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	ed 54       	subi	r30, 0x4D	; 77
    28be:	fd 4f       	sbci	r31, 0xFD	; 253
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	69 f4       	brne	.+26     	; 0x28e2 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    28c8:	61 70       	andi	r22, 0x01	; 1
    28ca:	70 78       	andi	r23, 0x80	; 128
    28cc:	77 23       	and	r23, r23
    28ce:	34 f4       	brge	.+12     	; 0x28dc <sortCheck+0x112>
    28d0:	61 50       	subi	r22, 0x01	; 1
    28d2:	71 09       	sbc	r23, r1
    28d4:	6e 6f       	ori	r22, 0xFE	; 254
    28d6:	7f 6f       	ori	r23, 0xFF	; 255
    28d8:	6f 5f       	subi	r22, 0xFF	; 255
    28da:	7f 4f       	sbci	r23, 0xFF	; 255
    28dc:	ce 01       	movw	r24, r28
    28de:	9c d8       	rcall	.-3784   	; 0x1a18 <pickSort>
    28e0:	15 c0       	rjmp	.+42     	; 0x290c <sortCheck+0x142>
			else if (arm[arm1] == -1)
    28e2:	f8 01       	movw	r30, r16
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	ed 54       	subi	r30, 0x4D	; 77
    28ea:	fd 4f       	sbci	r31, 0xFD	; 253
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	61 f4       	brne	.+24     	; 0x290c <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    28f4:	61 70       	andi	r22, 0x01	; 1
    28f6:	70 78       	andi	r23, 0x80	; 128
    28f8:	77 23       	and	r23, r23
    28fa:	34 f4       	brge	.+12     	; 0x2908 <sortCheck+0x13e>
    28fc:	61 50       	subi	r22, 0x01	; 1
    28fe:	71 09       	sbc	r23, r1
    2900:	6e 6f       	ori	r22, 0xFE	; 254
    2902:	7f 6f       	ori	r23, 0xFF	; 255
    2904:	6f 5f       	subi	r22, 0xFF	; 255
    2906:	7f 4f       	sbci	r23, 0xFF	; 255
    2908:	c8 01       	movw	r24, r16
    290a:	86 d8       	rcall	.-3828   	; 0x1a18 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    290c:	80 91 03 02 	lds	r24, 0x0203
    2910:	90 91 04 02 	lds	r25, 0x0204
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	09 f4       	brne	.+2      	; 0x291a <sortCheck+0x150>
    2918:	6d c1       	rjmp	.+730    	; 0x2bf4 <sortCheck+0x42a>
    291a:	80 91 89 02 	lds	r24, 0x0289
    291e:	90 91 8a 02 	lds	r25, 0x028A
    2922:	fc 01       	movw	r30, r24
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	ee 0f       	add	r30, r30
    292a:	ff 1f       	adc	r31, r31
    292c:	e3 57       	subi	r30, 0x73	; 115
    292e:	fd 4f       	sbci	r31, 0xFD	; 253
    2930:	20 81       	ld	r18, Z
    2932:	31 81       	ldd	r19, Z+1	; 0x01
    2934:	2f 3f       	cpi	r18, 0xFF	; 255
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	09 f4       	brne	.+2      	; 0x293c <sortCheck+0x172>
    293a:	5c c1       	rjmp	.+696    	; 0x2bf4 <sortCheck+0x42a>
    293c:	fc 01       	movw	r30, r24
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	ee 0f       	add	r30, r30
    2944:	ff 1f       	adc	r31, r31
    2946:	e3 57       	subi	r30, 0x73	; 115
    2948:	fd 4f       	sbci	r31, 0xFD	; 253
    294a:	22 81       	ldd	r18, Z+2	; 0x02
    294c:	33 81       	ldd	r19, Z+3	; 0x03
    294e:	2f 3f       	cpi	r18, 0xFF	; 255
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
    2952:	09 f4       	brne	.+2      	; 0x2956 <sortCheck+0x18c>
    2954:	4f c1       	rjmp	.+670    	; 0x2bf4 <sortCheck+0x42a>
    2956:	9c 01       	movw	r18, r24
    2958:	21 70       	andi	r18, 0x01	; 1
    295a:	30 78       	andi	r19, 0x80	; 128
    295c:	33 23       	and	r19, r19
    295e:	34 f4       	brge	.+12     	; 0x296c <sortCheck+0x1a2>
    2960:	21 50       	subi	r18, 0x01	; 1
    2962:	31 09       	sbc	r19, r1
    2964:	2e 6f       	ori	r18, 0xFE	; 254
    2966:	3f 6f       	ori	r19, 0xFF	; 255
    2968:	2f 5f       	subi	r18, 0xFF	; 255
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
    296c:	62 2f       	mov	r22, r18
    296e:	73 2f       	mov	r23, r19
    2970:	f9 01       	movw	r30, r18
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	eb 57       	subi	r30, 0x7B	; 123
    2978:	fd 4f       	sbci	r31, 0xFD	; 253
    297a:	20 81       	ld	r18, Z
    297c:	31 81       	ldd	r19, Z+1	; 0x01
    297e:	2f 3f       	cpi	r18, 0xFF	; 255
    2980:	3f 4f       	sbci	r19, 0xFF	; 255
    2982:	09 f0       	breq	.+2      	; 0x2986 <sortCheck+0x1bc>
    2984:	37 c1       	rjmp	.+622    	; 0x2bf4 <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    2986:	fc 01       	movw	r30, r24
    2988:	ee 0f       	add	r30, r30
    298a:	ff 1f       	adc	r31, r31
    298c:	e1 56       	subi	r30, 0x61	; 97
    298e:	fd 4f       	sbci	r31, 0xFD	; 253
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	fe 01       	movw	r30, r28
    2996:	ee 0f       	add	r30, r30
    2998:	ff 1f       	adc	r31, r31
    299a:	ed 54       	subi	r30, 0x4D	; 77
    299c:	fd 4f       	sbci	r31, 0xFD	; 253
    299e:	20 81       	ld	r18, Z
    29a0:	31 81       	ldd	r19, Z+1	; 0x01
    29a2:	28 17       	cp	r18, r24
    29a4:	39 07       	cpc	r19, r25
    29a6:	19 f4       	brne	.+6      	; 0x29ae <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    29a8:	c8 01       	movw	r24, r16
    29aa:	30 db       	rcall	.-2464   	; 0x200c <sortDrop>
    29ac:	23 c1       	rjmp	.+582    	; 0x2bf4 <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    29ae:	f8 01       	movw	r30, r16
    29b0:	ee 0f       	add	r30, r30
    29b2:	ff 1f       	adc	r31, r31
    29b4:	ed 54       	subi	r30, 0x4D	; 77
    29b6:	fd 4f       	sbci	r31, 0xFD	; 253
    29b8:	20 81       	ld	r18, Z
    29ba:	31 81       	ldd	r19, Z+1	; 0x01
    29bc:	82 17       	cp	r24, r18
    29be:	93 07       	cpc	r25, r19
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <sortCheck+0x1fa>
    29c2:	18 c1       	rjmp	.+560    	; 0x2bf4 <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    29c4:	ce 01       	movw	r24, r28
    29c6:	22 db       	rcall	.-2492   	; 0x200c <sortDrop>
    29c8:	15 c1       	rjmp	.+554    	; 0x2bf4 <sortCheck+0x42a>
			}
		}
		else ct = adj;
    29ca:	80 91 af 02 	lds	r24, 0x02AF
    29ce:	90 91 b0 02 	lds	r25, 0x02B0
    29d2:	90 93 8a 02 	sts	0x028A, r25
    29d6:	80 93 89 02 	sts	0x0289, r24
    29da:	0c c1       	rjmp	.+536    	; 0x2bf4 <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    29dc:	fe 01       	movw	r30, r28
    29de:	ee 0f       	add	r30, r30
    29e0:	ff 1f       	adc	r31, r31
    29e2:	ed 54       	subi	r30, 0x4D	; 77
    29e4:	fd 4f       	sbci	r31, 0xFD	; 253
    29e6:	01 90       	ld	r0, Z+
    29e8:	f0 81       	ld	r31, Z
    29ea:	e0 2d       	mov	r30, r0
    29ec:	4e 17       	cp	r20, r30
    29ee:	5f 07       	cpc	r21, r31
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <sortCheck+0x22a>
    29f2:	8f c0       	rjmp	.+286    	; 0x2b12 <sortCheck+0x348>
    29f4:	d8 01       	movw	r26, r16
    29f6:	aa 0f       	add	r26, r26
    29f8:	bb 1f       	adc	r27, r27
    29fa:	ad 54       	subi	r26, 0x4D	; 77
    29fc:	bd 4f       	sbci	r27, 0xFD	; 253
    29fe:	8d 90       	ld	r8, X+
    2a00:	9c 90       	ld	r9, X
    2a02:	48 15       	cp	r20, r8
    2a04:	59 05       	cpc	r21, r9
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <sortCheck+0x240>
    2a08:	84 c0       	rjmp	.+264    	; 0x2b12 <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2a0a:	e0 90 03 02 	lds	r14, 0x0203
    2a0e:	f0 90 04 02 	lds	r15, 0x0204
    2a12:	e1 14       	cp	r14, r1
    2a14:	f1 04       	cpc	r15, r1
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <sortCheck+0x250>
    2a18:	4e c0       	rjmp	.+156    	; 0x2ab6 <sortCheck+0x2ec>
    2a1a:	b1 e0       	ldi	r27, 0x01	; 1
    2a1c:	eb 16       	cp	r14, r27
    2a1e:	f1 04       	cpc	r15, r1
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <sortCheck+0x262>
    2a22:	2f 3f       	cpi	r18, 0xFF	; 255
    2a24:	6f ef       	ldi	r22, 0xFF	; 255
    2a26:	36 07       	cpc	r19, r22
    2a28:	b1 f5       	brne	.+108    	; 0x2a96 <sortCheck+0x2cc>
    2a2a:	09 c0       	rjmp	.+18     	; 0x2a3e <sortCheck+0x274>
    2a2c:	67 01       	movw	r12, r14
    2a2e:	71 e0       	ldi	r23, 0x01	; 1
    2a30:	c7 1a       	sub	r12, r23
    2a32:	d1 08       	sbc	r13, r1
    2a34:	a2 e0       	ldi	r26, 0x02	; 2
    2a36:	ca 16       	cp	r12, r26
    2a38:	d1 04       	cpc	r13, r1
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <sortCheck+0x274>
    2a3c:	65 c0       	rjmp	.+202    	; 0x2b08 <sortCheck+0x33e>
    2a3e:	6c 01       	movw	r12, r24
    2a40:	cc 0c       	add	r12, r12
    2a42:	dd 1c       	adc	r13, r13
    2a44:	cc 0c       	add	r12, r12
    2a46:	dd 1c       	adc	r13, r13
    2a48:	b6 01       	movw	r22, r12
    2a4a:	63 57       	subi	r22, 0x73	; 115
    2a4c:	7d 4f       	sbci	r23, 0xFD	; 253
    2a4e:	db 01       	movw	r26, r22
    2a50:	cd 90       	ld	r12, X+
    2a52:	dc 90       	ld	r13, X
    2a54:	4c 15       	cp	r20, r12
    2a56:	5d 05       	cpc	r21, r13
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <sortCheck+0x298>
    2a5a:	cd 20       	and	r12, r13
    2a5c:	c0 94       	com	r12
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <sortCheck+0x298>
    2a60:	53 c0       	rjmp	.+166    	; 0x2b08 <sortCheck+0x33e>
    2a62:	6c 01       	movw	r12, r24
    2a64:	cc 0c       	add	r12, r12
    2a66:	dd 1c       	adc	r13, r13
    2a68:	cc 0c       	add	r12, r12
    2a6a:	dd 1c       	adc	r13, r13
    2a6c:	b6 01       	movw	r22, r12
    2a6e:	63 57       	subi	r22, 0x73	; 115
    2a70:	7d 4f       	sbci	r23, 0xFD	; 253
    2a72:	db 01       	movw	r26, r22
    2a74:	12 96       	adiw	r26, 0x02	; 2
    2a76:	cd 90       	ld	r12, X+
    2a78:	dc 90       	ld	r13, X
    2a7a:	13 97       	sbiw	r26, 0x03	; 3
    2a7c:	4c 15       	cp	r20, r12
    2a7e:	5d 05       	cpc	r21, r13
    2a80:	21 f0       	breq	.+8      	; 0x2a8a <sortCheck+0x2c0>
    2a82:	cd 20       	and	r12, r13
    2a84:	c0 94       	com	r12
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <sortCheck+0x2c0>
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <sortCheck+0x33e>
		{
			if (armCount>0)
    2a8a:	1e 14       	cp	r1, r14
    2a8c:	1f 04       	cpc	r1, r15
    2a8e:	9c f4       	brge	.+38     	; 0x2ab6 <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    2a90:	2f 3f       	cpi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	81 f0       	breq	.+32     	; 0x2ab6 <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    2a96:	31 96       	adiw	r30, 0x01	; 1
    2a98:	31 f4       	brne	.+12     	; 0x2aa6 <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    2a9a:	6b 2d       	mov	r22, r11
    2a9c:	7a 2d       	mov	r23, r10
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <pickSort>
    2aa4:	08 c0       	rjmp	.+16     	; 0x2ab6 <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    2aa6:	89 20       	and	r8, r9
    2aa8:	80 94       	com	r8
    2aaa:	29 f4       	brne	.+10     	; 0x2ab6 <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    2aac:	6b 2d       	mov	r22, r11
    2aae:	7a 2d       	mov	r23, r10
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    2ab6:	80 91 89 02 	lds	r24, 0x0289
    2aba:	90 91 8a 02 	lds	r25, 0x028A
    2abe:	bc 01       	movw	r22, r24
    2ac0:	6f 5f       	subi	r22, 0xFF	; 255
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	61 70       	andi	r22, 0x01	; 1
    2ac6:	70 78       	andi	r23, 0x80	; 128
    2ac8:	77 23       	and	r23, r23
    2aca:	34 f4       	brge	.+12     	; 0x2ad8 <sortCheck+0x30e>
    2acc:	61 50       	subi	r22, 0x01	; 1
    2ace:	71 09       	sbc	r23, r1
    2ad0:	6e 6f       	ori	r22, 0xFE	; 254
    2ad2:	7f 6f       	ori	r23, 0xFF	; 255
    2ad4:	6f 5f       	subi	r22, 0xFF	; 255
    2ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad8:	6c 5f       	subi	r22, 0xFC	; 252
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	81 70       	andi	r24, 0x01	; 1
    2ade:	90 78       	andi	r25, 0x80	; 128
    2ae0:	99 23       	and	r25, r25
    2ae2:	24 f4       	brge	.+8      	; 0x2aec <sortCheck+0x322>
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	8e 6f       	ori	r24, 0xFE	; 254
    2ae8:	9f 6f       	ori	r25, 0xFF	; 255
    2aea:	01 96       	adiw	r24, 0x01	; 1
    2aec:	04 96       	adiw	r24, 0x04	; 4
    2aee:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <traverseToSort>
			newSort();
    2af2:	9a dc       	rcall	.-1740   	; 0x2428 <newSort>
			if (ct == 4 || ct == 5)
    2af4:	80 91 89 02 	lds	r24, 0x0289
    2af8:	90 91 8a 02 	lds	r25, 0x028A
    2afc:	04 97       	sbiw	r24, 0x04	; 4
    2afe:	02 97       	sbiw	r24, 0x02	; 2
    2b00:	08 f0       	brcs	.+2      	; 0x2b04 <sortCheck+0x33a>
    2b02:	89 c0       	rjmp	.+274    	; 0x2c16 <sortCheck+0x44c>
				newSort();
    2b04:	91 dc       	rcall	.-1758   	; 0x2428 <newSort>
    2b06:	87 c0       	rjmp	.+270    	; 0x2c16 <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    2b08:	90 93 8a 02 	sts	0x028A, r25
    2b0c:	80 93 89 02 	sts	0x0289, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2b10:	71 c0       	rjmp	.+226    	; 0x2bf4 <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2b12:	a0 91 03 02 	lds	r26, 0x0203
    2b16:	b0 91 04 02 	lds	r27, 0x0204
    2b1a:	10 97       	sbiw	r26, 0x00	; 0
    2b1c:	c1 f5       	brne	.+112    	; 0x2b8e <sortCheck+0x3c4>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	aa 0f       	add	r26, r26
    2b22:	bb 1f       	adc	r27, r27
    2b24:	aa 59       	subi	r26, 0x9A	; 154
    2b26:	bd 4f       	sbci	r27, 0xFD	; 253
    2b28:	0d 90       	ld	r0, X+
    2b2a:	bc 91       	ld	r27, X
    2b2c:	a0 2d       	mov	r26, r0
    2b2e:	a1 30       	cpi	r26, 0x01	; 1
    2b30:	b1 05       	cpc	r27, r1
    2b32:	d9 f4       	brne	.+54     	; 0x2b6a <sortCheck+0x3a0>
    2b34:	dc 01       	movw	r26, r24
    2b36:	aa 0f       	add	r26, r26
    2b38:	bb 1f       	adc	r27, r27
    2b3a:	aa 0f       	add	r26, r26
    2b3c:	bb 1f       	adc	r27, r27
    2b3e:	a3 57       	subi	r26, 0x73	; 115
    2b40:	bd 4f       	sbci	r27, 0xFD	; 253
    2b42:	0d 90       	ld	r0, X+
    2b44:	bc 91       	ld	r27, X
    2b46:	a0 2d       	mov	r26, r0
    2b48:	11 96       	adiw	r26, 0x01	; 1
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <sortCheck+0x384>
    2b4c:	4b c0       	rjmp	.+150    	; 0x2be4 <sortCheck+0x41a>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	aa 0f       	add	r26, r26
    2b52:	bb 1f       	adc	r27, r27
    2b54:	aa 0f       	add	r26, r26
    2b56:	bb 1f       	adc	r27, r27
    2b58:	a3 57       	subi	r26, 0x73	; 115
    2b5a:	bd 4f       	sbci	r27, 0xFD	; 253
    2b5c:	12 96       	adiw	r26, 0x02	; 2
    2b5e:	8d 91       	ld	r24, X+
    2b60:	9c 91       	ld	r25, X
    2b62:	13 97       	sbiw	r26, 0x03	; 3
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	19 f4       	brne	.+6      	; 0x2b6e <sortCheck+0x3a4>
    2b68:	3d c0       	rjmp	.+122    	; 0x2be4 <sortCheck+0x41a>
    2b6a:	ab 2b       	or	r26, r27
    2b6c:	d9 f5       	brne	.+118    	; 0x2be4 <sortCheck+0x41a>
    2b6e:	2f 3f       	cpi	r18, 0xFF	; 255
    2b70:	3f 4f       	sbci	r19, 0xFF	; 255
    2b72:	c1 f5       	brne	.+112    	; 0x2be4 <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    2b74:	4e 17       	cp	r20, r30
    2b76:	5f 07       	cpc	r21, r31
    2b78:	29 f4       	brne	.+10     	; 0x2b84 <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    2b7a:	6b 2d       	mov	r22, r11
    2b7c:	7a 2d       	mov	r23, r10
    2b7e:	c8 01       	movw	r24, r16
    2b80:	45 da       	rcall	.-2934   	; 0x200c <sortDrop>
    2b82:	30 c0       	rjmp	.+96     	; 0x2be4 <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    2b84:	6b 2d       	mov	r22, r11
    2b86:	7a 2d       	mov	r23, r10
    2b88:	ce 01       	movw	r24, r28
    2b8a:	40 da       	rcall	.-2944   	; 0x200c <sortDrop>
    2b8c:	2b c0       	rjmp	.+86     	; 0x2be4 <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2b8e:	11 97       	sbiw	r26, 0x01	; 1
    2b90:	49 f5       	brne	.+82     	; 0x2be4 <sortCheck+0x41a>
    2b92:	dc 01       	movw	r26, r24
    2b94:	aa 0f       	add	r26, r26
    2b96:	bb 1f       	adc	r27, r27
    2b98:	aa 0f       	add	r26, r26
    2b9a:	bb 1f       	adc	r27, r27
    2b9c:	a3 57       	subi	r26, 0x73	; 115
    2b9e:	bd 4f       	sbci	r27, 0xFD	; 253
    2ba0:	4d 91       	ld	r20, X+
    2ba2:	5c 91       	ld	r21, X
    2ba4:	4f 3f       	cpi	r20, 0xFF	; 255
    2ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba8:	69 f0       	breq	.+26     	; 0x2bc4 <sortCheck+0x3fa>
    2baa:	dc 01       	movw	r26, r24
    2bac:	aa 0f       	add	r26, r26
    2bae:	bb 1f       	adc	r27, r27
    2bb0:	aa 0f       	add	r26, r26
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	a3 57       	subi	r26, 0x73	; 115
    2bb6:	bd 4f       	sbci	r27, 0xFD	; 253
    2bb8:	12 96       	adiw	r26, 0x02	; 2
    2bba:	8d 91       	ld	r24, X+
    2bbc:	9c 91       	ld	r25, X
    2bbe:	13 97       	sbiw	r26, 0x03	; 3
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	81 f4       	brne	.+32     	; 0x2be4 <sortCheck+0x41a>
    2bc4:	2f 3f       	cpi	r18, 0xFF	; 255
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	69 f0       	breq	.+26     	; 0x2be4 <sortCheck+0x41a>
			if (arm[arm0] == -1)
    2bca:	31 96       	adiw	r30, 0x01	; 1
    2bcc:	31 f4       	brne	.+12     	; 0x2bda <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    2bce:	6b 2d       	mov	r22, r11
    2bd0:	7a 2d       	mov	r23, r10
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <pickSort>
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    2bda:	6b 2d       	mov	r22, r11
    2bdc:	7a 2d       	mov	r23, r10
    2bde:	c8 01       	movw	r24, r16
    2be0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <pickSort>
			ct = adj;
    2be4:	80 91 af 02 	lds	r24, 0x02AF
    2be8:	90 91 b0 02 	lds	r25, 0x02B0
    2bec:	90 93 8a 02 	sts	0x028A, r25
    2bf0:	80 93 89 02 	sts	0x0289, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2bf4:	80 91 89 02 	lds	r24, 0x0289
    2bf8:	90 91 8a 02 	lds	r25, 0x028A
    2bfc:	02 96       	adiw	r24, 0x02	; 2
    2bfe:	83 70       	andi	r24, 0x03	; 3
    2c00:	90 78       	andi	r25, 0x80	; 128
    2c02:	99 23       	and	r25, r25
    2c04:	24 f4       	brge	.+8      	; 0x2c0e <sortCheck+0x444>
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	8c 6f       	ori	r24, 0xFC	; 252
    2c0a:	9f 6f       	ori	r25, 0xFF	; 255
    2c0c:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2c0e:	90 93 b0 02 	sts	0x02B0, r25
    2c12:	80 93 af 02 	sts	0x02AF, r24
}
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
    2c26:	bf 90       	pop	r11
    2c28:	af 90       	pop	r10
    2c2a:	9f 90       	pop	r9
    2c2c:	8f 90       	pop	r8
    2c2e:	08 95       	ret

00002c30 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2c30:	80 91 8d 02 	lds	r24, 0x028D
    2c34:	90 91 8e 02 	lds	r25, 0x028E
    2c38:	20 91 9f 02 	lds	r18, 0x029F
    2c3c:	30 91 a0 02 	lds	r19, 0x02A0
    2c40:	82 17       	cp	r24, r18
    2c42:	93 07       	cpc	r25, r19
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <predict+0x18>
    2c46:	5f c0       	rjmp	.+190    	; 0x2d06 <predict+0xd6>
    2c48:	20 91 8f 02 	lds	r18, 0x028F
    2c4c:	30 91 90 02 	lds	r19, 0x0290
    2c50:	82 17       	cp	r24, r18
    2c52:	93 07       	cpc	r25, r19
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <predict+0x28>
    2c56:	57 c0       	rjmp	.+174    	; 0x2d06 <predict+0xd6>
    2c58:	80 91 91 02 	lds	r24, 0x0291
    2c5c:	90 91 92 02 	lds	r25, 0x0292
    2c60:	20 91 a1 02 	lds	r18, 0x02A1
    2c64:	30 91 a2 02 	lds	r19, 0x02A2
    2c68:	82 17       	cp	r24, r18
    2c6a:	93 07       	cpc	r25, r19
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <predict+0x40>
    2c6e:	4b c0       	rjmp	.+150    	; 0x2d06 <predict+0xd6>
    2c70:	20 91 93 02 	lds	r18, 0x0293
    2c74:	30 91 94 02 	lds	r19, 0x0294
    2c78:	82 17       	cp	r24, r18
    2c7a:	93 07       	cpc	r25, r19
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <predict+0x50>
    2c7e:	43 c0       	rjmp	.+134    	; 0x2d06 <predict+0xd6>
    2c80:	80 91 89 02 	lds	r24, 0x0289
    2c84:	90 91 8a 02 	lds	r25, 0x028A
    2c88:	fc 01       	movw	r30, r24
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	ee 0f       	add	r30, r30
    2c90:	ff 1f       	adc	r31, r31
    2c92:	e3 57       	subi	r30, 0x73	; 115
    2c94:	fd 4f       	sbci	r31, 0xFD	; 253
    2c96:	20 81       	ld	r18, Z
    2c98:	31 81       	ldd	r19, Z+1	; 0x01
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	ee 0f       	add	r30, r30
    2c9e:	ff 1f       	adc	r31, r31
    2ca0:	e1 56       	subi	r30, 0x61	; 97
    2ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ca4:	40 81       	ld	r20, Z
    2ca6:	51 81       	ldd	r21, Z+1	; 0x01
    2ca8:	24 17       	cp	r18, r20
    2caa:	35 07       	cpc	r19, r21
    2cac:	61 f5       	brne	.+88     	; 0x2d06 <predict+0xd6>
    2cae:	fc 01       	movw	r30, r24
    2cb0:	ee 0f       	add	r30, r30
    2cb2:	ff 1f       	adc	r31, r31
    2cb4:	ee 0f       	add	r30, r30
    2cb6:	ff 1f       	adc	r31, r31
    2cb8:	e3 57       	subi	r30, 0x73	; 115
    2cba:	fd 4f       	sbci	r31, 0xFD	; 253
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	28 17       	cp	r18, r24
    2cc2:	39 07       	cpc	r19, r25
    2cc4:	01 f5       	brne	.+64     	; 0x2d06 <predict+0xd6>
    2cc6:	80 91 85 02 	lds	r24, 0x0285
    2cca:	90 91 86 02 	lds	r25, 0x0286
    2cce:	01 96       	adiw	r24, 0x01	; 1
    2cd0:	d1 f4       	brne	.+52     	; 0x2d06 <predict+0xd6>
    2cd2:	80 91 87 02 	lds	r24, 0x0287
    2cd6:	90 91 88 02 	lds	r25, 0x0288
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	a1 f4       	brne	.+40     	; 0x2d06 <predict+0xd6>
    2cde:	80 91 b3 02 	lds	r24, 0x02B3
    2ce2:	90 91 b4 02 	lds	r25, 0x02B4
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	71 f4       	brne	.+28     	; 0x2d06 <predict+0xd6>
    2cea:	80 91 b5 02 	lds	r24, 0x02B5
    2cee:	90 91 b6 02 	lds	r25, 0x02B6
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	41 f4       	brne	.+16     	; 0x2d06 <predict+0xd6>
		sorted = total;
    2cf6:	80 91 01 02 	lds	r24, 0x0201
    2cfa:	90 91 02 02 	lds	r25, 0x0202
    2cfe:	90 93 59 02 	sts	0x0259, r25
    2d02:	80 93 58 02 	sts	0x0258, r24
    2d06:	08 95       	ret

00002d08 <main>:

}
int main()
{
	int i=0;
	init_devices();
    2d08:	0e 94 08 05 	call	0xa10	; 0xa10 <init_devices>
	lcd_set_4bit();
    2d0c:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2d10:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2d14:	0e 94 8f 03 	call	0x71e	; 0x71e <color_sensor_scaling>
	stop();
	lcd_print(2,11,scan(),1);
	stop();
	while(1);
	*/
	setIndicatorAndColor();
    2d18:	0e 94 a1 09 	call	0x1342	; 0x1342 <setIndicatorAndColor>
	
	threshold=6000;
    2d1c:	80 e7       	ldi	r24, 0x70	; 112
    2d1e:	97 e1       	ldi	r25, 0x17	; 23
    2d20:	90 93 6f 02 	sts	0x026F, r25
    2d24:	80 93 6e 02 	sts	0x026E, r24
	
	ct = 0; adj = 2;
    2d28:	10 92 8a 02 	sts	0x028A, r1
    2d2c:	10 92 89 02 	sts	0x0289, r1
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	90 93 b0 02 	sts	0x02B0, r25
    2d38:	80 93 af 02 	sts	0x02AF, r24
	//lcd("Begin");
	forwardJaa();
    2d3c:	0e 94 44 06 	call	0xc88	; 0xc88 <forwardJaa>
	stop();
    2d40:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	servo_1(0);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	0e 94 3b 03 	call	0x676	; 0x676 <servo_1>
	servo_2(90);
    2d4a:	8a e5       	ldi	r24, 0x5A	; 90
    2d4c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <servo_2>
	servo_3(0);
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	0e 94 6d 03 	call	0x6da	; 0x6da <servo_3>
	while (sorted<total)
    2d56:	20 91 58 02 	lds	r18, 0x0258
    2d5a:	30 91 59 02 	lds	r19, 0x0259
    2d5e:	80 91 01 02 	lds	r24, 0x0201
    2d62:	90 91 02 02 	lds	r25, 0x0202
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	a4 f5       	brge	.+104    	; 0x2dd4 <main+0xcc>
	{
		canDrop();
    2d6c:	e7 d9       	rcall	.-3122   	; 0x213c <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2d6e:	80 91 54 02 	lds	r24, 0x0254
    2d72:	90 91 55 02 	lds	r25, 0x0255
    2d76:	03 97       	sbiw	r24, 0x03	; 3
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <main+0x74>
			predict();
    2d7a:	5a df       	rcall	.-332    	; 0x2c30 <predict>
		if (sorted == total)
    2d7c:	20 91 58 02 	lds	r18, 0x0258
    2d80:	30 91 59 02 	lds	r19, 0x0259
    2d84:	80 91 01 02 	lds	r24, 0x0201
    2d88:	90 91 02 02 	lds	r25, 0x0202
    2d8c:	28 17       	cp	r18, r24
    2d8e:	39 07       	cpc	r19, r25
    2d90:	09 f1       	breq	.+66     	; 0x2dd4 <main+0xcc>
			break;
		pickup();
    2d92:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2d96:	80 91 89 02 	lds	r24, 0x0289
    2d9a:	90 91 8a 02 	lds	r25, 0x028A
    2d9e:	bc 01       	movw	r22, r24
    2da0:	61 70       	andi	r22, 0x01	; 1
    2da2:	70 78       	andi	r23, 0x80	; 128
    2da4:	77 23       	and	r23, r23
    2da6:	34 f4       	brge	.+12     	; 0x2db4 <main+0xac>
    2da8:	61 50       	subi	r22, 0x01	; 1
    2daa:	71 09       	sbc	r23, r1
    2dac:	6e 6f       	ori	r22, 0xFE	; 254
    2dae:	7f 6f       	ori	r23, 0xFF	; 255
    2db0:	6f 5f       	subi	r22, 0xFF	; 255
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	6c 5f       	subi	r22, 0xFC	; 252
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <traverseToSort>
		sortCheck();
    2dbc:	06 dd       	rcall	.-1524   	; 0x27ca <sortCheck>
	forwardJaa();
	stop();
	servo_1(0);
	servo_2(90);
	servo_3(0);
	while (sorted<total)
    2dbe:	20 91 58 02 	lds	r18, 0x0258
    2dc2:	30 91 59 02 	lds	r19, 0x0259
    2dc6:	80 91 01 02 	lds	r24, 0x0201
    2dca:	90 91 02 02 	lds	r25, 0x0202
    2dce:	28 17       	cp	r18, r24
    2dd0:	39 07       	cpc	r19, r25
    2dd2:	64 f2       	brlt	.-104    	; 0x2d6c <main+0x64>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	08 95       	ret

00002dda <__subsf3>:
    2dda:	50 58       	subi	r21, 0x80	; 128

00002ddc <__addsf3>:
    2ddc:	bb 27       	eor	r27, r27
    2dde:	aa 27       	eor	r26, r26
    2de0:	0e d0       	rcall	.+28     	; 0x2dfe <__addsf3x>
    2de2:	48 c1       	rjmp	.+656    	; 0x3074 <__fp_round>
    2de4:	39 d1       	rcall	.+626    	; 0x3058 <__fp_pscA>
    2de6:	30 f0       	brcs	.+12     	; 0x2df4 <__addsf3+0x18>
    2de8:	3e d1       	rcall	.+636    	; 0x3066 <__fp_pscB>
    2dea:	20 f0       	brcs	.+8      	; 0x2df4 <__addsf3+0x18>
    2dec:	31 f4       	brne	.+12     	; 0x2dfa <__addsf3+0x1e>
    2dee:	9f 3f       	cpi	r25, 0xFF	; 255
    2df0:	11 f4       	brne	.+4      	; 0x2df6 <__addsf3+0x1a>
    2df2:	1e f4       	brtc	.+6      	; 0x2dfa <__addsf3+0x1e>
    2df4:	2e c1       	rjmp	.+604    	; 0x3052 <__fp_nan>
    2df6:	0e f4       	brtc	.+2      	; 0x2dfa <__addsf3+0x1e>
    2df8:	e0 95       	com	r30
    2dfa:	e7 fb       	bst	r30, 7
    2dfc:	24 c1       	rjmp	.+584    	; 0x3046 <__fp_inf>

00002dfe <__addsf3x>:
    2dfe:	e9 2f       	mov	r30, r25
    2e00:	4a d1       	rcall	.+660    	; 0x3096 <__fp_split3>
    2e02:	80 f3       	brcs	.-32     	; 0x2de4 <__addsf3+0x8>
    2e04:	ba 17       	cp	r27, r26
    2e06:	62 07       	cpc	r22, r18
    2e08:	73 07       	cpc	r23, r19
    2e0a:	84 07       	cpc	r24, r20
    2e0c:	95 07       	cpc	r25, r21
    2e0e:	18 f0       	brcs	.+6      	; 0x2e16 <__addsf3x+0x18>
    2e10:	71 f4       	brne	.+28     	; 0x2e2e <__addsf3x+0x30>
    2e12:	9e f5       	brtc	.+102    	; 0x2e7a <__addsf3x+0x7c>
    2e14:	62 c1       	rjmp	.+708    	; 0x30da <__fp_zero>
    2e16:	0e f4       	brtc	.+2      	; 0x2e1a <__addsf3x+0x1c>
    2e18:	e0 95       	com	r30
    2e1a:	0b 2e       	mov	r0, r27
    2e1c:	ba 2f       	mov	r27, r26
    2e1e:	a0 2d       	mov	r26, r0
    2e20:	0b 01       	movw	r0, r22
    2e22:	b9 01       	movw	r22, r18
    2e24:	90 01       	movw	r18, r0
    2e26:	0c 01       	movw	r0, r24
    2e28:	ca 01       	movw	r24, r20
    2e2a:	a0 01       	movw	r20, r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	ff 27       	eor	r31, r31
    2e30:	59 1b       	sub	r21, r25
    2e32:	99 f0       	breq	.+38     	; 0x2e5a <__addsf3x+0x5c>
    2e34:	59 3f       	cpi	r21, 0xF9	; 249
    2e36:	50 f4       	brcc	.+20     	; 0x2e4c <__addsf3x+0x4e>
    2e38:	50 3e       	cpi	r21, 0xE0	; 224
    2e3a:	68 f1       	brcs	.+90     	; 0x2e96 <__addsf3x+0x98>
    2e3c:	1a 16       	cp	r1, r26
    2e3e:	f0 40       	sbci	r31, 0x00	; 0
    2e40:	a2 2f       	mov	r26, r18
    2e42:	23 2f       	mov	r18, r19
    2e44:	34 2f       	mov	r19, r20
    2e46:	44 27       	eor	r20, r20
    2e48:	58 5f       	subi	r21, 0xF8	; 248
    2e4a:	f3 cf       	rjmp	.-26     	; 0x2e32 <__addsf3x+0x34>
    2e4c:	46 95       	lsr	r20
    2e4e:	37 95       	ror	r19
    2e50:	27 95       	ror	r18
    2e52:	a7 95       	ror	r26
    2e54:	f0 40       	sbci	r31, 0x00	; 0
    2e56:	53 95       	inc	r21
    2e58:	c9 f7       	brne	.-14     	; 0x2e4c <__addsf3x+0x4e>
    2e5a:	7e f4       	brtc	.+30     	; 0x2e7a <__addsf3x+0x7c>
    2e5c:	1f 16       	cp	r1, r31
    2e5e:	ba 0b       	sbc	r27, r26
    2e60:	62 0b       	sbc	r22, r18
    2e62:	73 0b       	sbc	r23, r19
    2e64:	84 0b       	sbc	r24, r20
    2e66:	ba f0       	brmi	.+46     	; 0x2e96 <__addsf3x+0x98>
    2e68:	91 50       	subi	r25, 0x01	; 1
    2e6a:	a1 f0       	breq	.+40     	; 0x2e94 <__addsf3x+0x96>
    2e6c:	ff 0f       	add	r31, r31
    2e6e:	bb 1f       	adc	r27, r27
    2e70:	66 1f       	adc	r22, r22
    2e72:	77 1f       	adc	r23, r23
    2e74:	88 1f       	adc	r24, r24
    2e76:	c2 f7       	brpl	.-16     	; 0x2e68 <__addsf3x+0x6a>
    2e78:	0e c0       	rjmp	.+28     	; 0x2e96 <__addsf3x+0x98>
    2e7a:	ba 0f       	add	r27, r26
    2e7c:	62 1f       	adc	r22, r18
    2e7e:	73 1f       	adc	r23, r19
    2e80:	84 1f       	adc	r24, r20
    2e82:	48 f4       	brcc	.+18     	; 0x2e96 <__addsf3x+0x98>
    2e84:	87 95       	ror	r24
    2e86:	77 95       	ror	r23
    2e88:	67 95       	ror	r22
    2e8a:	b7 95       	ror	r27
    2e8c:	f7 95       	ror	r31
    2e8e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e90:	08 f0       	brcs	.+2      	; 0x2e94 <__addsf3x+0x96>
    2e92:	b3 cf       	rjmp	.-154    	; 0x2dfa <__addsf3+0x1e>
    2e94:	93 95       	inc	r25
    2e96:	88 0f       	add	r24, r24
    2e98:	08 f0       	brcs	.+2      	; 0x2e9c <__addsf3x+0x9e>
    2e9a:	99 27       	eor	r25, r25
    2e9c:	ee 0f       	add	r30, r30
    2e9e:	97 95       	ror	r25
    2ea0:	87 95       	ror	r24
    2ea2:	08 95       	ret

00002ea4 <__divsf3>:
    2ea4:	0c d0       	rcall	.+24     	; 0x2ebe <__divsf3x>
    2ea6:	e6 c0       	rjmp	.+460    	; 0x3074 <__fp_round>
    2ea8:	de d0       	rcall	.+444    	; 0x3066 <__fp_pscB>
    2eaa:	40 f0       	brcs	.+16     	; 0x2ebc <__divsf3+0x18>
    2eac:	d5 d0       	rcall	.+426    	; 0x3058 <__fp_pscA>
    2eae:	30 f0       	brcs	.+12     	; 0x2ebc <__divsf3+0x18>
    2eb0:	21 f4       	brne	.+8      	; 0x2eba <__divsf3+0x16>
    2eb2:	5f 3f       	cpi	r21, 0xFF	; 255
    2eb4:	19 f0       	breq	.+6      	; 0x2ebc <__divsf3+0x18>
    2eb6:	c7 c0       	rjmp	.+398    	; 0x3046 <__fp_inf>
    2eb8:	51 11       	cpse	r21, r1
    2eba:	10 c1       	rjmp	.+544    	; 0x30dc <__fp_szero>
    2ebc:	ca c0       	rjmp	.+404    	; 0x3052 <__fp_nan>

00002ebe <__divsf3x>:
    2ebe:	eb d0       	rcall	.+470    	; 0x3096 <__fp_split3>
    2ec0:	98 f3       	brcs	.-26     	; 0x2ea8 <__divsf3+0x4>

00002ec2 <__divsf3_pse>:
    2ec2:	99 23       	and	r25, r25
    2ec4:	c9 f3       	breq	.-14     	; 0x2eb8 <__divsf3+0x14>
    2ec6:	55 23       	and	r21, r21
    2ec8:	b1 f3       	breq	.-20     	; 0x2eb6 <__divsf3+0x12>
    2eca:	95 1b       	sub	r25, r21
    2ecc:	55 0b       	sbc	r21, r21
    2ece:	bb 27       	eor	r27, r27
    2ed0:	aa 27       	eor	r26, r26
    2ed2:	62 17       	cp	r22, r18
    2ed4:	73 07       	cpc	r23, r19
    2ed6:	84 07       	cpc	r24, r20
    2ed8:	38 f0       	brcs	.+14     	; 0x2ee8 <__divsf3_pse+0x26>
    2eda:	9f 5f       	subi	r25, 0xFF	; 255
    2edc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ede:	22 0f       	add	r18, r18
    2ee0:	33 1f       	adc	r19, r19
    2ee2:	44 1f       	adc	r20, r20
    2ee4:	aa 1f       	adc	r26, r26
    2ee6:	a9 f3       	breq	.-22     	; 0x2ed2 <__divsf3_pse+0x10>
    2ee8:	33 d0       	rcall	.+102    	; 0x2f50 <__divsf3_pse+0x8e>
    2eea:	0e 2e       	mov	r0, r30
    2eec:	3a f0       	brmi	.+14     	; 0x2efc <__divsf3_pse+0x3a>
    2eee:	e0 e8       	ldi	r30, 0x80	; 128
    2ef0:	30 d0       	rcall	.+96     	; 0x2f52 <__divsf3_pse+0x90>
    2ef2:	91 50       	subi	r25, 0x01	; 1
    2ef4:	50 40       	sbci	r21, 0x00	; 0
    2ef6:	e6 95       	lsr	r30
    2ef8:	00 1c       	adc	r0, r0
    2efa:	ca f7       	brpl	.-14     	; 0x2eee <__divsf3_pse+0x2c>
    2efc:	29 d0       	rcall	.+82     	; 0x2f50 <__divsf3_pse+0x8e>
    2efe:	fe 2f       	mov	r31, r30
    2f00:	27 d0       	rcall	.+78     	; 0x2f50 <__divsf3_pse+0x8e>
    2f02:	66 0f       	add	r22, r22
    2f04:	77 1f       	adc	r23, r23
    2f06:	88 1f       	adc	r24, r24
    2f08:	bb 1f       	adc	r27, r27
    2f0a:	26 17       	cp	r18, r22
    2f0c:	37 07       	cpc	r19, r23
    2f0e:	48 07       	cpc	r20, r24
    2f10:	ab 07       	cpc	r26, r27
    2f12:	b0 e8       	ldi	r27, 0x80	; 128
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <__divsf3_pse+0x56>
    2f16:	bb 0b       	sbc	r27, r27
    2f18:	80 2d       	mov	r24, r0
    2f1a:	bf 01       	movw	r22, r30
    2f1c:	ff 27       	eor	r31, r31
    2f1e:	93 58       	subi	r25, 0x83	; 131
    2f20:	5f 4f       	sbci	r21, 0xFF	; 255
    2f22:	2a f0       	brmi	.+10     	; 0x2f2e <__divsf3_pse+0x6c>
    2f24:	9e 3f       	cpi	r25, 0xFE	; 254
    2f26:	51 05       	cpc	r21, r1
    2f28:	68 f0       	brcs	.+26     	; 0x2f44 <__divsf3_pse+0x82>
    2f2a:	8d c0       	rjmp	.+282    	; 0x3046 <__fp_inf>
    2f2c:	d7 c0       	rjmp	.+430    	; 0x30dc <__fp_szero>
    2f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f30:	ec f3       	brlt	.-6      	; 0x2f2c <__divsf3_pse+0x6a>
    2f32:	98 3e       	cpi	r25, 0xE8	; 232
    2f34:	dc f3       	brlt	.-10     	; 0x2f2c <__divsf3_pse+0x6a>
    2f36:	86 95       	lsr	r24
    2f38:	77 95       	ror	r23
    2f3a:	67 95       	ror	r22
    2f3c:	b7 95       	ror	r27
    2f3e:	f7 95       	ror	r31
    2f40:	9f 5f       	subi	r25, 0xFF	; 255
    2f42:	c9 f7       	brne	.-14     	; 0x2f36 <__divsf3_pse+0x74>
    2f44:	88 0f       	add	r24, r24
    2f46:	91 1d       	adc	r25, r1
    2f48:	96 95       	lsr	r25
    2f4a:	87 95       	ror	r24
    2f4c:	97 f9       	bld	r25, 7
    2f4e:	08 95       	ret
    2f50:	e1 e0       	ldi	r30, 0x01	; 1
    2f52:	66 0f       	add	r22, r22
    2f54:	77 1f       	adc	r23, r23
    2f56:	88 1f       	adc	r24, r24
    2f58:	bb 1f       	adc	r27, r27
    2f5a:	62 17       	cp	r22, r18
    2f5c:	73 07       	cpc	r23, r19
    2f5e:	84 07       	cpc	r24, r20
    2f60:	ba 07       	cpc	r27, r26
    2f62:	20 f0       	brcs	.+8      	; 0x2f6c <__divsf3_pse+0xaa>
    2f64:	62 1b       	sub	r22, r18
    2f66:	73 0b       	sbc	r23, r19
    2f68:	84 0b       	sbc	r24, r20
    2f6a:	ba 0b       	sbc	r27, r26
    2f6c:	ee 1f       	adc	r30, r30
    2f6e:	88 f7       	brcc	.-30     	; 0x2f52 <__divsf3_pse+0x90>
    2f70:	e0 95       	com	r30
    2f72:	08 95       	ret

00002f74 <__fixunssfsi>:
    2f74:	98 d0       	rcall	.+304    	; 0x30a6 <__fp_splitA>
    2f76:	88 f0       	brcs	.+34     	; 0x2f9a <__fixunssfsi+0x26>
    2f78:	9f 57       	subi	r25, 0x7F	; 127
    2f7a:	90 f0       	brcs	.+36     	; 0x2fa0 <__fixunssfsi+0x2c>
    2f7c:	b9 2f       	mov	r27, r25
    2f7e:	99 27       	eor	r25, r25
    2f80:	b7 51       	subi	r27, 0x17	; 23
    2f82:	a0 f0       	brcs	.+40     	; 0x2fac <__fixunssfsi+0x38>
    2f84:	d1 f0       	breq	.+52     	; 0x2fba <__fixunssfsi+0x46>
    2f86:	66 0f       	add	r22, r22
    2f88:	77 1f       	adc	r23, r23
    2f8a:	88 1f       	adc	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	1a f0       	brmi	.+6      	; 0x2f96 <__fixunssfsi+0x22>
    2f90:	ba 95       	dec	r27
    2f92:	c9 f7       	brne	.-14     	; 0x2f86 <__fixunssfsi+0x12>
    2f94:	12 c0       	rjmp	.+36     	; 0x2fba <__fixunssfsi+0x46>
    2f96:	b1 30       	cpi	r27, 0x01	; 1
    2f98:	81 f0       	breq	.+32     	; 0x2fba <__fixunssfsi+0x46>
    2f9a:	9f d0       	rcall	.+318    	; 0x30da <__fp_zero>
    2f9c:	b1 e0       	ldi	r27, 0x01	; 1
    2f9e:	08 95       	ret
    2fa0:	9c c0       	rjmp	.+312    	; 0x30da <__fp_zero>
    2fa2:	67 2f       	mov	r22, r23
    2fa4:	78 2f       	mov	r23, r24
    2fa6:	88 27       	eor	r24, r24
    2fa8:	b8 5f       	subi	r27, 0xF8	; 248
    2faa:	39 f0       	breq	.+14     	; 0x2fba <__fixunssfsi+0x46>
    2fac:	b9 3f       	cpi	r27, 0xF9	; 249
    2fae:	cc f3       	brlt	.-14     	; 0x2fa2 <__fixunssfsi+0x2e>
    2fb0:	86 95       	lsr	r24
    2fb2:	77 95       	ror	r23
    2fb4:	67 95       	ror	r22
    2fb6:	b3 95       	inc	r27
    2fb8:	d9 f7       	brne	.-10     	; 0x2fb0 <__fixunssfsi+0x3c>
    2fba:	3e f4       	brtc	.+14     	; 0x2fca <__fixunssfsi+0x56>
    2fbc:	90 95       	com	r25
    2fbe:	80 95       	com	r24
    2fc0:	70 95       	com	r23
    2fc2:	61 95       	neg	r22
    2fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fca:	08 95       	ret

00002fcc <__floatunsisf>:
    2fcc:	e8 94       	clt
    2fce:	09 c0       	rjmp	.+18     	; 0x2fe2 <__floatsisf+0x12>

00002fd0 <__floatsisf>:
    2fd0:	97 fb       	bst	r25, 7
    2fd2:	3e f4       	brtc	.+14     	; 0x2fe2 <__floatsisf+0x12>
    2fd4:	90 95       	com	r25
    2fd6:	80 95       	com	r24
    2fd8:	70 95       	com	r23
    2fda:	61 95       	neg	r22
    2fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fde:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe2:	99 23       	and	r25, r25
    2fe4:	a9 f0       	breq	.+42     	; 0x3010 <__floatsisf+0x40>
    2fe6:	f9 2f       	mov	r31, r25
    2fe8:	96 e9       	ldi	r25, 0x96	; 150
    2fea:	bb 27       	eor	r27, r27
    2fec:	93 95       	inc	r25
    2fee:	f6 95       	lsr	r31
    2ff0:	87 95       	ror	r24
    2ff2:	77 95       	ror	r23
    2ff4:	67 95       	ror	r22
    2ff6:	b7 95       	ror	r27
    2ff8:	f1 11       	cpse	r31, r1
    2ffa:	f8 cf       	rjmp	.-16     	; 0x2fec <__floatsisf+0x1c>
    2ffc:	fa f4       	brpl	.+62     	; 0x303c <__floatsisf+0x6c>
    2ffe:	bb 0f       	add	r27, r27
    3000:	11 f4       	brne	.+4      	; 0x3006 <__floatsisf+0x36>
    3002:	60 ff       	sbrs	r22, 0
    3004:	1b c0       	rjmp	.+54     	; 0x303c <__floatsisf+0x6c>
    3006:	6f 5f       	subi	r22, 0xFF	; 255
    3008:	7f 4f       	sbci	r23, 0xFF	; 255
    300a:	8f 4f       	sbci	r24, 0xFF	; 255
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	16 c0       	rjmp	.+44     	; 0x303c <__floatsisf+0x6c>
    3010:	88 23       	and	r24, r24
    3012:	11 f0       	breq	.+4      	; 0x3018 <__floatsisf+0x48>
    3014:	96 e9       	ldi	r25, 0x96	; 150
    3016:	11 c0       	rjmp	.+34     	; 0x303a <__floatsisf+0x6a>
    3018:	77 23       	and	r23, r23
    301a:	21 f0       	breq	.+8      	; 0x3024 <__floatsisf+0x54>
    301c:	9e e8       	ldi	r25, 0x8E	; 142
    301e:	87 2f       	mov	r24, r23
    3020:	76 2f       	mov	r23, r22
    3022:	05 c0       	rjmp	.+10     	; 0x302e <__floatsisf+0x5e>
    3024:	66 23       	and	r22, r22
    3026:	71 f0       	breq	.+28     	; 0x3044 <__floatsisf+0x74>
    3028:	96 e8       	ldi	r25, 0x86	; 134
    302a:	86 2f       	mov	r24, r22
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	2a f0       	brmi	.+10     	; 0x303c <__floatsisf+0x6c>
    3032:	9a 95       	dec	r25
    3034:	66 0f       	add	r22, r22
    3036:	77 1f       	adc	r23, r23
    3038:	88 1f       	adc	r24, r24
    303a:	da f7       	brpl	.-10     	; 0x3032 <__floatsisf+0x62>
    303c:	88 0f       	add	r24, r24
    303e:	96 95       	lsr	r25
    3040:	87 95       	ror	r24
    3042:	97 f9       	bld	r25, 7
    3044:	08 95       	ret

00003046 <__fp_inf>:
    3046:	97 f9       	bld	r25, 7
    3048:	9f 67       	ori	r25, 0x7F	; 127
    304a:	80 e8       	ldi	r24, 0x80	; 128
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	08 95       	ret

00003052 <__fp_nan>:
    3052:	9f ef       	ldi	r25, 0xFF	; 255
    3054:	80 ec       	ldi	r24, 0xC0	; 192
    3056:	08 95       	ret

00003058 <__fp_pscA>:
    3058:	00 24       	eor	r0, r0
    305a:	0a 94       	dec	r0
    305c:	16 16       	cp	r1, r22
    305e:	17 06       	cpc	r1, r23
    3060:	18 06       	cpc	r1, r24
    3062:	09 06       	cpc	r0, r25
    3064:	08 95       	ret

00003066 <__fp_pscB>:
    3066:	00 24       	eor	r0, r0
    3068:	0a 94       	dec	r0
    306a:	12 16       	cp	r1, r18
    306c:	13 06       	cpc	r1, r19
    306e:	14 06       	cpc	r1, r20
    3070:	05 06       	cpc	r0, r21
    3072:	08 95       	ret

00003074 <__fp_round>:
    3074:	09 2e       	mov	r0, r25
    3076:	03 94       	inc	r0
    3078:	00 0c       	add	r0, r0
    307a:	11 f4       	brne	.+4      	; 0x3080 <__fp_round+0xc>
    307c:	88 23       	and	r24, r24
    307e:	52 f0       	brmi	.+20     	; 0x3094 <__fp_round+0x20>
    3080:	bb 0f       	add	r27, r27
    3082:	40 f4       	brcc	.+16     	; 0x3094 <__fp_round+0x20>
    3084:	bf 2b       	or	r27, r31
    3086:	11 f4       	brne	.+4      	; 0x308c <__fp_round+0x18>
    3088:	60 ff       	sbrs	r22, 0
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <__fp_round+0x20>
    308c:	6f 5f       	subi	r22, 0xFF	; 255
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	8f 4f       	sbci	r24, 0xFF	; 255
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	08 95       	ret

00003096 <__fp_split3>:
    3096:	57 fd       	sbrc	r21, 7
    3098:	90 58       	subi	r25, 0x80	; 128
    309a:	44 0f       	add	r20, r20
    309c:	55 1f       	adc	r21, r21
    309e:	59 f0       	breq	.+22     	; 0x30b6 <__fp_splitA+0x10>
    30a0:	5f 3f       	cpi	r21, 0xFF	; 255
    30a2:	71 f0       	breq	.+28     	; 0x30c0 <__fp_splitA+0x1a>
    30a4:	47 95       	ror	r20

000030a6 <__fp_splitA>:
    30a6:	88 0f       	add	r24, r24
    30a8:	97 fb       	bst	r25, 7
    30aa:	99 1f       	adc	r25, r25
    30ac:	61 f0       	breq	.+24     	; 0x30c6 <__fp_splitA+0x20>
    30ae:	9f 3f       	cpi	r25, 0xFF	; 255
    30b0:	79 f0       	breq	.+30     	; 0x30d0 <__fp_splitA+0x2a>
    30b2:	87 95       	ror	r24
    30b4:	08 95       	ret
    30b6:	12 16       	cp	r1, r18
    30b8:	13 06       	cpc	r1, r19
    30ba:	14 06       	cpc	r1, r20
    30bc:	55 1f       	adc	r21, r21
    30be:	f2 cf       	rjmp	.-28     	; 0x30a4 <__fp_split3+0xe>
    30c0:	46 95       	lsr	r20
    30c2:	f1 df       	rcall	.-30     	; 0x30a6 <__fp_splitA>
    30c4:	08 c0       	rjmp	.+16     	; 0x30d6 <__fp_splitA+0x30>
    30c6:	16 16       	cp	r1, r22
    30c8:	17 06       	cpc	r1, r23
    30ca:	18 06       	cpc	r1, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	f1 cf       	rjmp	.-30     	; 0x30b2 <__fp_splitA+0xc>
    30d0:	86 95       	lsr	r24
    30d2:	71 05       	cpc	r23, r1
    30d4:	61 05       	cpc	r22, r1
    30d6:	08 94       	sec
    30d8:	08 95       	ret

000030da <__fp_zero>:
    30da:	e8 94       	clt

000030dc <__fp_szero>:
    30dc:	bb 27       	eor	r27, r27
    30de:	66 27       	eor	r22, r22
    30e0:	77 27       	eor	r23, r23
    30e2:	cb 01       	movw	r24, r22
    30e4:	97 f9       	bld	r25, 7
    30e6:	08 95       	ret

000030e8 <__divmodhi4>:
    30e8:	97 fb       	bst	r25, 7
    30ea:	07 2e       	mov	r0, r23
    30ec:	16 f4       	brtc	.+4      	; 0x30f2 <__divmodhi4+0xa>
    30ee:	00 94       	com	r0
    30f0:	06 d0       	rcall	.+12     	; 0x30fe <__divmodhi4_neg1>
    30f2:	77 fd       	sbrc	r23, 7
    30f4:	08 d0       	rcall	.+16     	; 0x3106 <__divmodhi4_neg2>
    30f6:	1a d0       	rcall	.+52     	; 0x312c <__udivmodhi4>
    30f8:	07 fc       	sbrc	r0, 7
    30fa:	05 d0       	rcall	.+10     	; 0x3106 <__divmodhi4_neg2>
    30fc:	3e f4       	brtc	.+14     	; 0x310c <__divmodhi4_exit>

000030fe <__divmodhi4_neg1>:
    30fe:	90 95       	com	r25
    3100:	81 95       	neg	r24
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	08 95       	ret

00003106 <__divmodhi4_neg2>:
    3106:	70 95       	com	r23
    3108:	61 95       	neg	r22
    310a:	7f 4f       	sbci	r23, 0xFF	; 255

0000310c <__divmodhi4_exit>:
    310c:	08 95       	ret

0000310e <__umulhisi3>:
    310e:	a2 9f       	mul	r26, r18
    3110:	b0 01       	movw	r22, r0
    3112:	b3 9f       	mul	r27, r19
    3114:	c0 01       	movw	r24, r0
    3116:	a3 9f       	mul	r26, r19
    3118:	70 0d       	add	r23, r0
    311a:	81 1d       	adc	r24, r1
    311c:	11 24       	eor	r1, r1
    311e:	91 1d       	adc	r25, r1
    3120:	b2 9f       	mul	r27, r18
    3122:	70 0d       	add	r23, r0
    3124:	81 1d       	adc	r24, r1
    3126:	11 24       	eor	r1, r1
    3128:	91 1d       	adc	r25, r1
    312a:	08 95       	ret

0000312c <__udivmodhi4>:
    312c:	aa 1b       	sub	r26, r26
    312e:	bb 1b       	sub	r27, r27
    3130:	51 e1       	ldi	r21, 0x11	; 17
    3132:	07 c0       	rjmp	.+14     	; 0x3142 <__udivmodhi4_ep>

00003134 <__udivmodhi4_loop>:
    3134:	aa 1f       	adc	r26, r26
    3136:	bb 1f       	adc	r27, r27
    3138:	a6 17       	cp	r26, r22
    313a:	b7 07       	cpc	r27, r23
    313c:	10 f0       	brcs	.+4      	; 0x3142 <__udivmodhi4_ep>
    313e:	a6 1b       	sub	r26, r22
    3140:	b7 0b       	sbc	r27, r23

00003142 <__udivmodhi4_ep>:
    3142:	88 1f       	adc	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	5a 95       	dec	r21
    3148:	a9 f7       	brne	.-22     	; 0x3134 <__udivmodhi4_loop>
    314a:	80 95       	com	r24
    314c:	90 95       	com	r25
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	08 95       	ret

00003154 <_exit>:
    3154:	f8 94       	cli

00003156 <__stop_program>:
    3156:	ff cf       	rjmp	.-2      	; 0x3156 <__stop_program>
