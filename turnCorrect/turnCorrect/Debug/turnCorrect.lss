
turnCorrect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00002f50  00002fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080024a  0080024a  0000302e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000360  00000000  00000000  0000305e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003337  00000000  00000000  000033be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d8  00000000  00000000  000066f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000261f  00000000  00000000  00006bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000998  00000000  00000000  000091ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000084a  00000000  00000000  00009b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000234c  00000000  00000000  0000a3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b0  00000000  00000000  0000c71a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	08 c4       	rjmp	.+2064   	; 0x826 <__vector_5>
      16:	00 00       	nop
      18:	e1 c3       	rjmp	.+1986   	; 0x7dc <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e5       	ldi	r30, 0x50	; 80
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3b       	cpi	r26, 0xBB	; 187
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <main>
     122:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 75 02 	sts	0x0275, r25
     30a:	80 93 74 02 	sts	0x0274, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 79 02 	sts	0x0279, r21
     338:	40 93 78 02 	sts	0x0278, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 ba 02 	sts	0x02BA, r25
     374:	80 93 b9 02 	sts	0x02B9, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 79 02 	sts	0x0279, r21
     3a0:	40 93 78 02 	sts	0x0278, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b0 02 	sts	0x02B0, r25
     3dc:	80 93 af 02 	sts	0x02AF, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 79 02 	sts	0x0279, r21
     3fe:	40 93 78 02 	sts	0x0278, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8a 02 	sts	0x028A, r25
     436:	80 93 89 02 	sts	0x0289, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 b8 02 	sts	0x02B8, r25
     47c:	80 93 b7 02 	sts	0x02B7, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 58 02 	lds	r24, 0x0258
     628:	90 91 59 02 	lds	r25, 0x0259
     62c:	a0 91 5a 02 	lds	r26, 0x025A
     630:	b0 91 5b 02 	lds	r27, 0x025B
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 58 02 	sts	0x0258, r24
     63e:	90 93 59 02 	sts	0x0259, r25
     642:	a0 93 5a 02 	sts	0x025A, r26
     646:	b0 93 5b 02 	sts	0x025B, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <servo_1>:
     676:	10 92 89 00 	sts	0x0089, r1
     67a:	68 2f       	mov	r22, r24
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__floatunsisf>
     686:	2b e7       	ldi	r18, 0x7B	; 123
     688:	34 e1       	ldi	r19, 0x14	; 20
     68a:	4e ee       	ldi	r20, 0xEE	; 238
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4c e0       	ldi	r20, 0x0C	; 12
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__addsf3>
     69e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fixunssfsi>
     6a2:	60 93 88 00 	sts	0x0088, r22
     6a6:	08 95       	ret

000006a8 <filter_red>:
     6a8:	5e 98       	cbi	0x0b, 6	; 11
     6aa:	5f 98       	cbi	0x0b, 7	; 11
     6ac:	08 95       	ret

000006ae <filter_green>:
     6ae:	5e 9a       	sbi	0x0b, 6	; 11
     6b0:	5f 9a       	sbi	0x0b, 7	; 11
     6b2:	08 95       	ret

000006b4 <filter_blue>:
     6b4:	5e 98       	cbi	0x0b, 6	; 11
     6b6:	5f 9a       	sbi	0x0b, 7	; 11
     6b8:	08 95       	ret

000006ba <color_sensor_scaling>:
     6ba:	5c 9a       	sbi	0x0b, 4	; 11
     6bc:	5d 9a       	sbi	0x0b, 5	; 11
     6be:	08 95       	ret

000006c0 <red_read>:
     6c0:	f3 df       	rcall	.-26     	; 0x6a8 <filter_red>
     6c2:	10 92 58 02 	sts	0x0258, r1
     6c6:	10 92 59 02 	sts	0x0259, r1
     6ca:	10 92 5a 02 	sts	0x025A, r1
     6ce:	10 92 5b 02 	sts	0x025B, r1
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	8f e7       	ldi	r24, 0x7F	; 127
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <red_read+0x18>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <red_read+0x22>
     6e2:	00 00       	nop
     6e4:	80 91 58 02 	lds	r24, 0x0258
     6e8:	90 91 59 02 	lds	r25, 0x0259
     6ec:	a0 91 5a 02 	lds	r26, 0x025A
     6f0:	b0 91 5b 02 	lds	r27, 0x025B
     6f4:	80 93 7e 02 	sts	0x027E, r24
     6f8:	90 93 7f 02 	sts	0x027F, r25
     6fc:	a0 93 80 02 	sts	0x0280, r26
     700:	b0 93 81 02 	sts	0x0281, r27
     704:	2f ef       	ldi	r18, 0xFF	; 255
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9c e2       	ldi	r25, 0x2C	; 44
     70a:	21 50       	subi	r18, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <red_read+0x4a>
     712:	00 c0       	rjmp	.+0      	; 0x714 <red_read+0x54>
     714:	00 00       	nop
     716:	08 95       	ret

00000718 <green_read>:
     718:	ca df       	rcall	.-108    	; 0x6ae <filter_green>
     71a:	10 92 58 02 	sts	0x0258, r1
     71e:	10 92 59 02 	sts	0x0259, r1
     722:	10 92 5a 02 	sts	0x025A, r1
     726:	10 92 5b 02 	sts	0x025B, r1
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	8f e7       	ldi	r24, 0x7F	; 127
     72e:	94 e0       	ldi	r25, 0x04	; 4
     730:	21 50       	subi	r18, 0x01	; 1
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <green_read+0x18>
     738:	00 c0       	rjmp	.+0      	; 0x73a <green_read+0x22>
     73a:	00 00       	nop
     73c:	80 91 58 02 	lds	r24, 0x0258
     740:	90 91 59 02 	lds	r25, 0x0259
     744:	a0 91 5a 02 	lds	r26, 0x025A
     748:	b0 91 5b 02 	lds	r27, 0x025B
     74c:	80 93 7a 02 	sts	0x027A, r24
     750:	90 93 7b 02 	sts	0x027B, r25
     754:	a0 93 7c 02 	sts	0x027C, r26
     758:	b0 93 7d 02 	sts	0x027D, r27
     75c:	08 95       	ret

0000075e <blue_read>:
     75e:	aa df       	rcall	.-172    	; 0x6b4 <filter_blue>
     760:	10 92 58 02 	sts	0x0258, r1
     764:	10 92 59 02 	sts	0x0259, r1
     768:	10 92 5a 02 	sts	0x025A, r1
     76c:	10 92 5b 02 	sts	0x025B, r1
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	8f e7       	ldi	r24, 0x7F	; 127
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	21 50       	subi	r18, 0x01	; 1
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	90 40       	sbci	r25, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <blue_read+0x18>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <blue_read+0x22>
     780:	00 00       	nop
     782:	80 91 58 02 	lds	r24, 0x0258
     786:	90 91 59 02 	lds	r25, 0x0259
     78a:	a0 91 5a 02 	lds	r26, 0x025A
     78e:	b0 91 5b 02 	lds	r27, 0x025B
     792:	80 93 6e 02 	sts	0x026E, r24
     796:	90 93 6f 02 	sts	0x026F, r25
     79a:	a0 93 70 02 	sts	0x0270, r26
     79e:	b0 93 71 02 	sts	0x0271, r27
     7a2:	08 95       	ret

000007a4 <left_encoder_pin_config>:
     7a4:	6c 98       	cbi	0x0d, 4	; 13
     7a6:	74 9a       	sbi	0x0e, 4	; 14
     7a8:	08 95       	ret

000007aa <right_encoder_pin_config>:
     7aa:	6d 98       	cbi	0x0d, 5	; 13
     7ac:	75 9a       	sbi	0x0e, 5	; 14
     7ae:	08 95       	ret

000007b0 <port_init_poz>:
     7b0:	96 de       	rcall	.-724    	; 0x4de <motion_pin_config>
     7b2:	f8 df       	rcall	.-16     	; 0x7a4 <left_encoder_pin_config>
     7b4:	fa cf       	rjmp	.-12     	; 0x7aa <right_encoder_pin_config>
     7b6:	08 95       	ret

000007b8 <left_position_encoder_interrupt_init>:
     7b8:	f8 94       	cli
     7ba:	ea e6       	ldi	r30, 0x6A	; 106
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 83       	st	Z, r24
     7c4:	ec 9a       	sbi	0x1d, 4	; 29
     7c6:	78 94       	sei
     7c8:	08 95       	ret

000007ca <right_position_encoder_interrupt_init>:
     7ca:	f8 94       	cli
     7cc:	ea e6       	ldi	r30, 0x6A	; 106
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	88 60       	ori	r24, 0x08	; 8
     7d4:	80 83       	st	Z, r24
     7d6:	ed 9a       	sbi	0x1d, 5	; 29
     7d8:	78 94       	sei
     7da:	08 95       	ret

000007dc <__vector_6>:
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	80 91 5c 02 	lds	r24, 0x025C
     7f2:	90 91 5d 02 	lds	r25, 0x025D
     7f6:	a0 91 5e 02 	lds	r26, 0x025E
     7fa:	b0 91 5f 02 	lds	r27, 0x025F
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	a1 1d       	adc	r26, r1
     802:	b1 1d       	adc	r27, r1
     804:	80 93 5c 02 	sts	0x025C, r24
     808:	90 93 5d 02 	sts	0x025D, r25
     80c:	a0 93 5e 02 	sts	0x025E, r26
     810:	b0 93 5f 02 	sts	0x025F, r27
     814:	bf 91       	pop	r27
     816:	af 91       	pop	r26
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_5>:
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	80 91 60 02 	lds	r24, 0x0260
     83c:	90 91 61 02 	lds	r25, 0x0261
     840:	a0 91 62 02 	lds	r26, 0x0262
     844:	b0 91 63 02 	lds	r27, 0x0263
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	a1 1d       	adc	r26, r1
     84c:	b1 1d       	adc	r27, r1
     84e:	80 93 60 02 	sts	0x0260, r24
     852:	90 93 61 02 	sts	0x0261, r25
     856:	a0 93 62 02 	sts	0x0262, r26
     85a:	b0 93 63 02 	sts	0x0263, r27
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <angle_rotate>:
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	bc 01       	movw	r22, r24
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__floatunsisf>
     886:	28 e4       	ldi	r18, 0x48	; 72
     888:	31 ee       	ldi	r19, 0xE1	; 225
     88a:	42 e8       	ldi	r20, 0x82	; 130
     88c:	50 e4       	ldi	r21, 0x40	; 64
     88e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     892:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fixunssfsi>
     896:	cb 01       	movw	r24, r22
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	10 92 5c 02 	sts	0x025C, r1
     8a0:	10 92 5d 02 	sts	0x025D, r1
     8a4:	10 92 5e 02 	sts	0x025E, r1
     8a8:	10 92 5f 02 	sts	0x025F, r1
     8ac:	10 92 60 02 	sts	0x0260, r1
     8b0:	10 92 61 02 	sts	0x0261, r1
     8b4:	10 92 62 02 	sts	0x0262, r1
     8b8:	10 92 63 02 	sts	0x0263, r1
     8bc:	51 e0       	ldi	r21, 0x01	; 1
     8be:	e0 e0       	ldi	r30, 0x00	; 0
     8c0:	c0 90 5c 02 	lds	r12, 0x025C
     8c4:	d0 90 5d 02 	lds	r13, 0x025D
     8c8:	e0 90 5e 02 	lds	r14, 0x025E
     8cc:	f0 90 5f 02 	lds	r15, 0x025F
     8d0:	00 91 60 02 	lds	r16, 0x0260
     8d4:	10 91 61 02 	lds	r17, 0x0261
     8d8:	20 91 62 02 	lds	r18, 0x0262
     8dc:	30 91 63 02 	lds	r19, 0x0263
     8e0:	45 2f       	mov	r20, r21
     8e2:	08 17       	cp	r16, r24
     8e4:	19 07       	cpc	r17, r25
     8e6:	2a 07       	cpc	r18, r26
     8e8:	3b 07       	cpc	r19, r27
     8ea:	08 f4       	brcc	.+2      	; 0x8ee <angle_rotate+0x7e>
     8ec:	4e 2f       	mov	r20, r30
     8ee:	41 11       	cpse	r20, r1
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <angle_rotate+0x94>
     8f2:	25 2f       	mov	r18, r21
     8f4:	c8 16       	cp	r12, r24
     8f6:	d9 06       	cpc	r13, r25
     8f8:	ea 06       	cpc	r14, r26
     8fa:	fb 06       	cpc	r15, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <angle_rotate+0x90>
     8fe:	2e 2f       	mov	r18, r30
     900:	22 23       	and	r18, r18
     902:	f1 f2       	breq	.-68     	; 0x8c0 <angle_rotate+0x50>
     904:	0f de       	rcall	.-994    	; 0x524 <stop>
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	08 95       	ret

00000914 <linear_distance_mm>:
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	bc 01       	movw	r22, r24
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__floatunsisf>
     922:	25 ee       	ldi	r18, 0xE5	; 229
     924:	30 ed       	ldi	r19, 0xD0	; 208
     926:	4a ea       	ldi	r20, 0xAA	; 170
     928:	50 e4       	ldi	r21, 0x40	; 64
     92a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     92e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fixunssfsi>
     932:	10 92 5c 02 	sts	0x025C, r1
     936:	10 92 5d 02 	sts	0x025D, r1
     93a:	10 92 5e 02 	sts	0x025E, r1
     93e:	10 92 5f 02 	sts	0x025F, r1
     942:	00 91 5c 02 	lds	r16, 0x025C
     946:	10 91 5d 02 	lds	r17, 0x025D
     94a:	20 91 5e 02 	lds	r18, 0x025E
     94e:	30 91 5f 02 	lds	r19, 0x025F
     952:	60 17       	cp	r22, r16
     954:	71 07       	cpc	r23, r17
     956:	82 07       	cpc	r24, r18
     958:	93 07       	cpc	r25, r19
     95a:	98 f7       	brcc	.-26     	; 0x942 <linear_distance_mm+0x2e>
     95c:	e3 dd       	rcall	.-1082   	; 0x524 <stop>
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <forward_mm>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	d0 dd       	rcall	.-1120   	; 0x50c <forward>
     96c:	ce 01       	movw	r24, r28
     96e:	d2 df       	rcall	.-92     	; 0x914 <linear_distance_mm>
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <back_mm>:
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	ca dd       	rcall	.-1132   	; 0x512 <back>
     97e:	ce 01       	movw	r24, r28
     980:	c9 df       	rcall	.-110    	; 0x914 <linear_distance_mm>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <left_degrees>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
     98e:	c4 dd       	rcall	.-1144   	; 0x518 <left>
     990:	ce 01       	movw	r24, r28
     992:	6e df       	rcall	.-292    	; 0x870 <angle_rotate>
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <right_degrees>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	be dd       	rcall	.-1156   	; 0x51e <right>
     9a2:	ce 01       	movw	r24, r28
     9a4:	65 df       	rcall	.-310    	; 0x870 <angle_rotate>
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <init_devices>:
     9ac:	f8 94       	cli
     9ae:	00 df       	rcall	.-512    	; 0x7b0 <port_init_poz>
     9b0:	03 df       	rcall	.-506    	; 0x7b8 <left_position_encoder_interrupt_init>
     9b2:	0b df       	rcall	.-490    	; 0x7ca <right_position_encoder_interrupt_init>
     9b4:	f9 dd       	rcall	.-1038   	; 0x5a8 <port_init>
     9b6:	24 de       	rcall	.-952    	; 0x600 <color_sensor_pin_interrupt_init>
     9b8:	51 de       	rcall	.-862    	; 0x65c <adc_init>
     9ba:	91 dd       	rcall	.-1246   	; 0x4de <motion_pin_config>
     9bc:	75 dd       	rcall	.-1302   	; 0x4a8 <timer5_init>
     9be:	d1 dd       	rcall	.-1118   	; 0x562 <timer1_init>
     9c0:	78 94       	sei
     9c2:	08 95       	ret

000009c4 <Delay>:
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	8c 01       	movw	r16, r24
     9ce:	18 16       	cp	r1, r24
     9d0:	19 06       	cpc	r1, r25
     9d2:	8c f4       	brge	.+34     	; 0x9f6 <Delay+0x32>
     9d4:	c0 e0       	ldi	r28, 0x00	; 0
     9d6:	d0 e0       	ldi	r29, 0x00	; 0
     9d8:	09 c0       	rjmp	.+18     	; 0x9ec <Delay+0x28>
     9da:	86 e6       	ldi	r24, 0x66	; 102
     9dc:	9e e0       	ldi	r25, 0x0E	; 14
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <Delay+0x1a>
     9e2:	00 00       	nop
     9e4:	21 96       	adiw	r28, 0x01	; 1
     9e6:	c0 17       	cp	r28, r16
     9e8:	d1 07       	cpc	r29, r17
     9ea:	39 f0       	breq	.+14     	; 0x9fa <Delay+0x36>
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	ed dd       	rcall	.-1062   	; 0x5ca <ADC_Conversion>
     9f0:	89 32       	cpi	r24, 0x29	; 41
     9f2:	98 f3       	brcs	.-26     	; 0x9da <Delay+0x16>
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <Delay+0x36>
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	94 dd       	rcall	.-1240   	; 0x524 <stop>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	c0 17       	cp	r28, r16
     a00:	d1 07       	cpc	r29, r17
     a02:	0c f0       	brlt	.+2      	; 0xa06 <Delay+0x42>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <set_color>:
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	db dd       	rcall	.-1098   	; 0x5ca <ADC_Conversion>
     a14:	80 93 4d 02 	sts	0x024D, r24
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	d7 dd       	rcall	.-1106   	; 0x5ca <ADC_Conversion>
     a1c:	80 93 4c 02 	sts	0x024C, r24
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	d3 dd       	rcall	.-1114   	; 0x5ca <ADC_Conversion>
     a24:	80 93 4b 02 	sts	0x024B, r24
     a28:	08 95       	ret

00000a2a <node>:
     a2a:	88 ec       	ldi	r24, 0xC8	; 200
     a2c:	80 93 28 01 	sts	0x0128, r24
     a30:	80 93 2a 01 	sts	0x012A, r24
     a34:	80 91 4c 02 	lds	r24, 0x024C
     a38:	89 32       	cpi	r24, 0x29	; 41
     a3a:	38 f4       	brcc	.+14     	; 0xa4a <node+0x20>
     a3c:	0e c0       	rjmp	.+28     	; 0xa5a <node+0x30>
     a3e:	66 dd       	rcall	.-1332   	; 0x50c <forward>
     a40:	e7 df       	rcall	.-50     	; 0xa10 <set_color>
     a42:	80 91 4c 02 	lds	r24, 0x024C
     a46:	89 32       	cpi	r24, 0x29	; 41
     a48:	40 f0       	brcs	.+16     	; 0xa5a <node+0x30>
     a4a:	80 91 4d 02 	lds	r24, 0x024D
     a4e:	89 32       	cpi	r24, 0x29	; 41
     a50:	b0 f7       	brcc	.-20     	; 0xa3e <node+0x14>
     a52:	80 91 4b 02 	lds	r24, 0x024B
     a56:	89 32       	cpi	r24, 0x29	; 41
     a58:	90 f7       	brcc	.-28     	; 0xa3e <node+0x14>
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	9a e1       	ldi	r25, 0x1A	; 26
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <node+0x36>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <node+0x40>
     a6a:	00 00       	nop
     a6c:	5b cd       	rjmp	.-1354   	; 0x524 <stop>
     a6e:	08 95       	ret

00000a70 <semiCorrect>:
     a70:	80 91 4c 02 	lds	r24, 0x024C
     a74:	88 32       	cpi	r24, 0x28	; 40
     a76:	58 f5       	brcc	.+86     	; 0xace <semiCorrect+0x5e>
     a78:	80 91 4d 02 	lds	r24, 0x024D
     a7c:	89 32       	cpi	r24, 0x29	; 41
     a7e:	98 f0       	brcs	.+38     	; 0xaa6 <semiCorrect+0x36>
     a80:	90 91 4b 02 	lds	r25, 0x024B
     a84:	98 32       	cpi	r25, 0x28	; 40
     a86:	78 f4       	brcc	.+30     	; 0xaa6 <semiCorrect+0x36>
     a88:	47 dd       	rcall	.-1394   	; 0x518 <left>
     a8a:	c2 df       	rcall	.-124    	; 0xa10 <set_color>
     a8c:	80 91 4c 02 	lds	r24, 0x024C
     a90:	88 32       	cpi	r24, 0x28	; 40
     a92:	e8 f4       	brcc	.+58     	; 0xace <semiCorrect+0x5e>
     a94:	80 91 4d 02 	lds	r24, 0x024D
     a98:	89 32       	cpi	r24, 0x29	; 41
     a9a:	c8 f0       	brcs	.+50     	; 0xace <semiCorrect+0x5e>
     a9c:	80 91 4b 02 	lds	r24, 0x024B
     aa0:	88 32       	cpi	r24, 0x28	; 40
     aa2:	90 f3       	brcs	.-28     	; 0xa88 <semiCorrect+0x18>
     aa4:	08 95       	ret
     aa6:	90 91 4b 02 	lds	r25, 0x024B
     aaa:	99 32       	cpi	r25, 0x29	; 41
     aac:	80 f0       	brcs	.+32     	; 0xace <semiCorrect+0x5e>
     aae:	88 32       	cpi	r24, 0x28	; 40
     ab0:	70 f4       	brcc	.+28     	; 0xace <semiCorrect+0x5e>
     ab2:	35 dd       	rcall	.-1430   	; 0x51e <right>
     ab4:	ad df       	rcall	.-166    	; 0xa10 <set_color>
     ab6:	80 91 4c 02 	lds	r24, 0x024C
     aba:	88 32       	cpi	r24, 0x28	; 40
     abc:	40 f4       	brcc	.+16     	; 0xace <semiCorrect+0x5e>
     abe:	80 91 4d 02 	lds	r24, 0x024D
     ac2:	88 32       	cpi	r24, 0x28	; 40
     ac4:	20 f4       	brcc	.+8      	; 0xace <semiCorrect+0x5e>
     ac6:	80 91 4b 02 	lds	r24, 0x024B
     aca:	89 32       	cpi	r24, 0x29	; 41
     acc:	90 f7       	brcc	.-28     	; 0xab2 <semiCorrect+0x42>
     ace:	08 95       	ret

00000ad0 <correct>:
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	85 e0       	ldi	r24, 0x05	; 5
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 73 02 	sts	0x0273, r25
     ae0:	80 93 72 02 	sts	0x0272, r24
     ae4:	1f dd       	rcall	.-1474   	; 0x524 <stop>
     ae6:	80 91 4a 02 	lds	r24, 0x024A
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	09 f0       	breq	.+2      	; 0xaf0 <correct+0x20>
     aee:	34 c0       	rjmp	.+104    	; 0xb58 <correct+0x88>
     af0:	10 92 4a 02 	sts	0x024A, r1
     af4:	ce e3       	ldi	r28, 0x3E	; 62
     af6:	d0 e0       	ldi	r29, 0x00	; 0
     af8:	02 e0       	ldi	r16, 0x02	; 2
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	10 dd       	rcall	.-1504   	; 0x51e <right>
     afe:	02 30       	cpi	r16, 0x02	; 2
     b00:	11 05       	cpc	r17, r1
     b02:	31 f4       	brne	.+12     	; 0xb10 <correct+0x40>
     b04:	8e e1       	ldi	r24, 0x1E	; 30
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	5d df       	rcall	.-326    	; 0x9c4 <Delay>
     b0a:	88 23       	and	r24, r24
     b0c:	29 f0       	breq	.+10     	; 0xb18 <correct+0x48>
     b0e:	58 c0       	rjmp	.+176    	; 0xbc0 <correct+0xf0>
     b10:	ce 01       	movw	r24, r28
     b12:	58 df       	rcall	.-336    	; 0x9c4 <Delay>
     b14:	81 11       	cpse	r24, r1
     b16:	54 c0       	rjmp	.+168    	; 0xbc0 <correct+0xf0>
     b18:	05 dd       	rcall	.-1526   	; 0x524 <stop>
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	56 dd       	rcall	.-1364   	; 0x5ca <ADC_Conversion>
     b1e:	89 32       	cpi	r24, 0x29	; 41
     b20:	08 f0       	brcs	.+2      	; 0xb24 <correct+0x54>
     b22:	4d c0       	rjmp	.+154    	; 0xbbe <correct+0xee>
     b24:	a5 df       	rcall	.-182    	; 0xa70 <semiCorrect>
     b26:	f8 dc       	rcall	.-1552   	; 0x518 <left>
     b28:	02 30       	cpi	r16, 0x02	; 2
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f4       	brne	.+12     	; 0xb3a <correct+0x6a>
     b2e:	8c e3       	ldi	r24, 0x3C	; 60
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	48 df       	rcall	.-368    	; 0x9c4 <Delay>
     b34:	88 23       	and	r24, r24
     b36:	29 f0       	breq	.+10     	; 0xb42 <correct+0x72>
     b38:	43 c0       	rjmp	.+134    	; 0xbc0 <correct+0xf0>
     b3a:	ce 01       	movw	r24, r28
     b3c:	43 df       	rcall	.-378    	; 0x9c4 <Delay>
     b3e:	81 11       	cpse	r24, r1
     b40:	3f c0       	rjmp	.+126    	; 0xbc0 <correct+0xf0>
     b42:	f0 dc       	rcall	.-1568   	; 0x524 <stop>
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	41 dd       	rcall	.-1406   	; 0x5ca <ADC_Conversion>
     b48:	64 96       	adiw	r28, 0x14	; 20
     b4a:	88 32       	cpi	r24, 0x28	; 40
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <correct+0x80>
     b4e:	37 c0       	rjmp	.+110    	; 0xbbe <correct+0xee>
     b50:	8f df       	rcall	.-226    	; 0xa70 <semiCorrect>
     b52:	0c 5e       	subi	r16, 0xEC	; 236
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	d2 cf       	rjmp	.-92     	; 0xafc <correct+0x2c>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 4a 02 	sts	0x024A, r24
     b5e:	ce e3       	ldi	r28, 0x3E	; 62
     b60:	d0 e0       	ldi	r29, 0x00	; 0
     b62:	02 e0       	ldi	r16, 0x02	; 2
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	d8 dc       	rcall	.-1616   	; 0x518 <left>
     b68:	02 30       	cpi	r16, 0x02	; 2
     b6a:	11 05       	cpc	r17, r1
     b6c:	31 f4       	brne	.+12     	; 0xb7a <correct+0xaa>
     b6e:	8e e1       	ldi	r24, 0x1E	; 30
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	28 df       	rcall	.-432    	; 0x9c4 <Delay>
     b74:	88 23       	and	r24, r24
     b76:	29 f0       	breq	.+10     	; 0xb82 <correct+0xb2>
     b78:	23 c0       	rjmp	.+70     	; 0xbc0 <correct+0xf0>
     b7a:	ce 01       	movw	r24, r28
     b7c:	23 df       	rcall	.-442    	; 0x9c4 <Delay>
     b7e:	81 11       	cpse	r24, r1
     b80:	1f c0       	rjmp	.+62     	; 0xbc0 <correct+0xf0>
     b82:	d0 dc       	rcall	.-1632   	; 0x524 <stop>
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	21 dd       	rcall	.-1470   	; 0x5ca <ADC_Conversion>
     b88:	89 32       	cpi	r24, 0x29	; 41
     b8a:	c8 f4       	brcc	.+50     	; 0xbbe <correct+0xee>
     b8c:	71 df       	rcall	.-286    	; 0xa70 <semiCorrect>
     b8e:	c7 dc       	rcall	.-1650   	; 0x51e <right>
     b90:	02 30       	cpi	r16, 0x02	; 2
     b92:	11 05       	cpc	r17, r1
     b94:	31 f4       	brne	.+12     	; 0xba2 <correct+0xd2>
     b96:	8c e3       	ldi	r24, 0x3C	; 60
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	14 df       	rcall	.-472    	; 0x9c4 <Delay>
     b9c:	88 23       	and	r24, r24
     b9e:	29 f0       	breq	.+10     	; 0xbaa <correct+0xda>
     ba0:	0f c0       	rjmp	.+30     	; 0xbc0 <correct+0xf0>
     ba2:	ce 01       	movw	r24, r28
     ba4:	0f df       	rcall	.-482    	; 0x9c4 <Delay>
     ba6:	81 11       	cpse	r24, r1
     ba8:	0b c0       	rjmp	.+22     	; 0xbc0 <correct+0xf0>
     baa:	bc dc       	rcall	.-1672   	; 0x524 <stop>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	0d dd       	rcall	.-1510   	; 0x5ca <ADC_Conversion>
     bb0:	64 96       	adiw	r28, 0x14	; 20
     bb2:	88 32       	cpi	r24, 0x28	; 40
     bb4:	20 f0       	brcs	.+8      	; 0xbbe <correct+0xee>
     bb6:	5c df       	rcall	.-328    	; 0xa70 <semiCorrect>
     bb8:	0c 5e       	subi	r16, 0xEC	; 236
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
     bbc:	d4 cf       	rjmp	.-88     	; 0xb66 <correct+0x96>
     bbe:	b2 dc       	rcall	.-1692   	; 0x524 <stop>
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <noNatak>:
     bca:	86 e9       	ldi	r24, 0x96	; 150
     bcc:	80 93 28 01 	sts	0x0128, r24
     bd0:	80 93 2a 01 	sts	0x012A, r24
     bd4:	80 91 4c 02 	lds	r24, 0x024C
     bd8:	88 32       	cpi	r24, 0x28	; 40
     bda:	70 f5       	brcc	.+92     	; 0xc38 <noNatak+0x6e>
     bdc:	80 91 4d 02 	lds	r24, 0x024D
     be0:	89 32       	cpi	r24, 0x29	; 41
     be2:	98 f0       	brcs	.+38     	; 0xc0a <noNatak+0x40>
     be4:	90 91 4b 02 	lds	r25, 0x024B
     be8:	98 32       	cpi	r25, 0x28	; 40
     bea:	78 f4       	brcc	.+30     	; 0xc0a <noNatak+0x40>
     bec:	95 dc       	rcall	.-1750   	; 0x518 <left>
     bee:	10 df       	rcall	.-480    	; 0xa10 <set_color>
     bf0:	80 91 4c 02 	lds	r24, 0x024C
     bf4:	88 32       	cpi	r24, 0x28	; 40
     bf6:	78 f5       	brcc	.+94     	; 0xc56 <noNatak+0x8c>
     bf8:	80 91 4d 02 	lds	r24, 0x024D
     bfc:	89 32       	cpi	r24, 0x29	; 41
     bfe:	58 f1       	brcs	.+86     	; 0xc56 <noNatak+0x8c>
     c00:	80 91 4b 02 	lds	r24, 0x024B
     c04:	88 32       	cpi	r24, 0x28	; 40
     c06:	90 f3       	brcs	.-28     	; 0xbec <noNatak+0x22>
     c08:	26 c0       	rjmp	.+76     	; 0xc56 <noNatak+0x8c>
     c0a:	90 91 4b 02 	lds	r25, 0x024B
     c0e:	99 32       	cpi	r25, 0x29	; 41
     c10:	88 f0       	brcs	.+34     	; 0xc34 <noNatak+0x6a>
     c12:	88 32       	cpi	r24, 0x28	; 40
     c14:	78 f4       	brcc	.+30     	; 0xc34 <noNatak+0x6a>
     c16:	83 dc       	rcall	.-1786   	; 0x51e <right>
     c18:	fb de       	rcall	.-522    	; 0xa10 <set_color>
     c1a:	80 91 4c 02 	lds	r24, 0x024C
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	d0 f4       	brcc	.+52     	; 0xc56 <noNatak+0x8c>
     c22:	80 91 4d 02 	lds	r24, 0x024D
     c26:	88 32       	cpi	r24, 0x28	; 40
     c28:	b0 f4       	brcc	.+44     	; 0xc56 <noNatak+0x8c>
     c2a:	80 91 4b 02 	lds	r24, 0x024B
     c2e:	89 32       	cpi	r24, 0x29	; 41
     c30:	90 f7       	brcc	.-28     	; 0xc16 <noNatak+0x4c>
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <noNatak+0x8c>
     c34:	4d df       	rcall	.-358    	; 0xad0 <correct>
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <noNatak+0x8c>
     c38:	80 91 4d 02 	lds	r24, 0x024D
     c3c:	89 32       	cpi	r24, 0x29	; 41
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <noNatak+0x7e>
     c40:	90 91 4b 02 	lds	r25, 0x024B
     c44:	98 32       	cpi	r25, 0x28	; 40
     c46:	40 f0       	brcs	.+16     	; 0xc58 <noNatak+0x8e>
     c48:	88 32       	cpi	r24, 0x28	; 40
     c4a:	20 f4       	brcc	.+8      	; 0xc54 <noNatak+0x8a>
     c4c:	80 91 4b 02 	lds	r24, 0x024B
     c50:	89 32       	cpi	r24, 0x29	; 41
     c52:	10 f4       	brcc	.+4      	; 0xc58 <noNatak+0x8e>
     c54:	3d df       	rcall	.-390    	; 0xad0 <correct>
     c56:	66 cc       	rjmp	.-1844   	; 0x524 <stop>
     c58:	08 95       	ret

00000c5a <forwardJaa>:
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	08 e2       	ldi	r16, 0x28	; 40
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	0f 2e       	mov	r0, r31
     c6a:	f0 ef       	ldi	r31, 0xF0	; 240
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	ca e2       	ldi	r28, 0x2A	; 42
     c72:	d1 e0       	ldi	r29, 0x01	; 1
     c74:	4b dc       	rcall	.-1898   	; 0x50c <forward>
     c76:	cc de       	rcall	.-616    	; 0xa10 <set_color>
     c78:	80 91 4c 02 	lds	r24, 0x024C
     c7c:	89 32       	cpi	r24, 0x29	; 41
     c7e:	50 f0       	brcs	.+20     	; 0xc94 <forwardJaa+0x3a>
     c80:	80 91 4d 02 	lds	r24, 0x024D
     c84:	89 32       	cpi	r24, 0x29	; 41
     c86:	20 f4       	brcc	.+8      	; 0xc90 <forwardJaa+0x36>
     c88:	80 91 4b 02 	lds	r24, 0x024B
     c8c:	89 32       	cpi	r24, 0x29	; 41
     c8e:	10 f0       	brcs	.+4      	; 0xc94 <forwardJaa+0x3a>
     c90:	cc de       	rcall	.-616    	; 0xa2a <node>
     c92:	11 c0       	rjmp	.+34     	; 0xcb6 <forwardJaa+0x5c>
     c94:	f8 01       	movw	r30, r16
     c96:	f0 82       	st	Z, r15
     c98:	f8 82       	st	Y, r15
     c9a:	80 91 4c 02 	lds	r24, 0x024C
     c9e:	89 32       	cpi	r24, 0x29	; 41
     ca0:	40 f0       	brcs	.+16     	; 0xcb2 <forwardJaa+0x58>
     ca2:	80 91 4d 02 	lds	r24, 0x024D
     ca6:	88 32       	cpi	r24, 0x28	; 40
     ca8:	20 f4       	brcc	.+8      	; 0xcb2 <forwardJaa+0x58>
     caa:	80 91 4b 02 	lds	r24, 0x024B
     cae:	88 32       	cpi	r24, 0x28	; 40
     cb0:	08 f3       	brcs	.-62     	; 0xc74 <forwardJaa+0x1a>
     cb2:	8b df       	rcall	.-234    	; 0xbca <noNatak>
     cb4:	d2 df       	rcall	.-92     	; 0xc5a <forwardJaa>
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	08 95       	ret

00000cc2 <elevate>:
     cc2:	61 11       	cpse	r22, r1
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <elevate+0x8>
     cc6:	d7 cc       	rjmp	.-1618   	; 0x676 <servo_1>
     cc8:	08 95       	ret
     cca:	61 30       	cpi	r22, 0x01	; 1
     ccc:	31 f4       	brne	.+12     	; 0xcda <elevate+0x18>
     cce:	8d 32       	cpi	r24, 0x2D	; 45
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <elevate+0x14>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <elevate+0x16>
     cd6:	8d e2       	ldi	r24, 0x2D	; 45
     cd8:	ce cc       	rjmp	.-1636   	; 0x676 <servo_1>
     cda:	08 95       	ret

00000cdc <open>:
     cdc:	81 11       	cpse	r24, r1
     cde:	06 c0       	rjmp	.+12     	; 0xcec <open+0x10>
     ce0:	10 92 8b 00 	sts	0x008B, r1
     ce4:	83 e8       	ldi	r24, 0x83	; 131
     ce6:	80 93 8a 00 	sts	0x008A, r24
     cea:	08 95       	ret
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	29 f4       	brne	.+10     	; 0xcfa <open+0x1e>
     cf0:	10 92 8d 00 	sts	0x008D, r1
     cf4:	83 e8       	ldi	r24, 0x83	; 131
     cf6:	80 93 8c 00 	sts	0x008C, r24
     cfa:	08 95       	ret

00000cfc <close>:
     cfc:	81 11       	cpse	r24, r1
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <close+0x10>
     d00:	10 92 8b 00 	sts	0x008B, r1
     d04:	83 e2       	ldi	r24, 0x23	; 35
     d06:	80 93 8a 00 	sts	0x008A, r24
     d0a:	08 95       	ret
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	29 f4       	brne	.+10     	; 0xd1a <close+0x1e>
     d10:	10 92 8d 00 	sts	0x008D, r1
     d14:	83 e2       	ldi	r24, 0x23	; 35
     d16:	80 93 8c 00 	sts	0x008C, r24
     d1a:	08 95       	ret

00000d1c <buzzer>:
     d1c:	4e dc       	rcall	.-1892   	; 0x5ba <buzzer_on>
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	8f e7       	ldi	r24, 0x7F	; 127
     d22:	94 e0       	ldi	r25, 0x04	; 4
     d24:	21 50       	subi	r18, 0x01	; 1
     d26:	80 40       	sbci	r24, 0x00	; 0
     d28:	90 40       	sbci	r25, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <buzzer+0x8>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <buzzer+0x12>
     d2e:	00 00       	nop
     d30:	48 cc       	rjmp	.-1904   	; 0x5c2 <buzzer_off>
     d32:	08 95       	ret

00000d34 <lcd>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	3a da       	rcall	.-2956   	; 0x1b2 <lcd_wr_command>
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	a3 da       	rcall	.-2746   	; 0x28a <lcd_cursor>
     d44:	ce 01       	movw	r24, r28
     d46:	93 da       	rcall	.-2778   	; 0x26e <lcd_string>
     d48:	e9 df       	rcall	.-46     	; 0xd1c <buzzer>
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	9c e2       	ldi	r25, 0x2C	; 44
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	80 40       	sbci	r24, 0x00	; 0
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <lcd+0x1c>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <lcd+0x26>
     d5a:	00 00       	nop
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <front>:
     d62:	7b df       	rcall	.-266    	; 0xc5a <forwardJaa>
     d64:	80 91 76 02 	lds	r24, 0x0276
     d68:	90 91 77 02 	lds	r25, 0x0277
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 77 02 	sts	0x0277, r25
     d72:	80 93 76 02 	sts	0x0276, r24
     d76:	08 95       	ret

00000d78 <turnRight>:
     d78:	80 91 4e 02 	lds	r24, 0x024E
     d7c:	90 91 4f 02 	lds	r25, 0x024F
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	39 f4       	brne	.+14     	; 0xd94 <turnRight+0x1c>
     d86:	80 91 50 02 	lds	r24, 0x0250
     d8a:	90 91 51 02 	lds	r25, 0x0251
     d8e:	02 97       	sbiw	r24, 0x02	; 2
     d90:	98 f4       	brcc	.+38     	; 0xdb8 <turnRight+0x40>
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <turnRight+0x2e>
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	81 f4       	brne	.+32     	; 0xdb8 <turnRight+0x40>
     d98:	80 91 50 02 	lds	r24, 0x0250
     d9c:	90 91 51 02 	lds	r25, 0x0251
     da0:	02 97       	sbiw	r24, 0x02	; 2
     da2:	02 97       	sbiw	r24, 0x02	; 2
     da4:	48 f4       	brcc	.+18     	; 0xdb8 <turnRight+0x40>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	80 93 28 01 	sts	0x0128, r24
     dac:	80 93 2a 01 	sts	0x012A, r24
     db0:	8a e5       	ldi	r24, 0x5A	; 90
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	f2 dd       	rcall	.-1052   	; 0x99a <right_degrees>
     db6:	18 c0       	rjmp	.+48     	; 0xde8 <turnRight+0x70>
     db8:	8e e1       	ldi	r24, 0x1E	; 30
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	ee dd       	rcall	.-1060   	; 0x99a <right_degrees>
     dbe:	8a ea       	ldi	r24, 0xAA	; 170
     dc0:	80 93 28 01 	sts	0x0128, r24
     dc4:	80 93 2a 01 	sts	0x012A, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <turnRight+0x54>
     dca:	a9 db       	rcall	.-2222   	; 0x51e <right>
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	fd db       	rcall	.-2054   	; 0x5ca <ADC_Conversion>
     dd0:	88 32       	cpi	r24, 0x28	; 40
     dd2:	d8 f3       	brcs	.-10     	; 0xdca <turnRight+0x52>
     dd4:	2f ef       	ldi	r18, 0xFF	; 255
     dd6:	8f e7       	ldi	r24, 0x7F	; 127
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	21 50       	subi	r18, 0x01	; 1
     ddc:	80 40       	sbci	r24, 0x00	; 0
     dde:	90 40       	sbci	r25, 0x00	; 0
     de0:	e1 f7       	brne	.-8      	; 0xdda <turnRight+0x62>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <turnRight+0x6c>
     de4:	00 00       	nop
     de6:	9e db       	rcall	.-2244   	; 0x524 <stop>
     de8:	8e e0       	ldi	r24, 0x0E	; 14
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	a3 df       	rcall	.-186    	; 0xd34 <lcd>
     dee:	80 91 4e 02 	lds	r24, 0x024E
     df2:	90 91 4f 02 	lds	r25, 0x024F
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	83 70       	andi	r24, 0x03	; 3
     dfa:	90 78       	andi	r25, 0x80	; 128
     dfc:	99 23       	and	r25, r25
     dfe:	24 f4       	brge	.+8      	; 0xe08 <turnRight+0x90>
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	8c 6f       	ori	r24, 0xFC	; 252
     e04:	9f 6f       	ori	r25, 0xFF	; 255
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	90 93 4f 02 	sts	0x024F, r25
     e0c:	80 93 4e 02 	sts	0x024E, r24
     e10:	80 91 9b 02 	lds	r24, 0x029B
     e14:	90 91 9c 02 	lds	r25, 0x029C
     e18:	86 5a       	subi	r24, 0xA6	; 166
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	90 93 9c 02 	sts	0x029C, r25
     e20:	80 93 9b 02 	sts	0x029B, r24
     e24:	08 95       	ret

00000e26 <turnLeft>:
     e26:	80 91 4e 02 	lds	r24, 0x024E
     e2a:	90 91 4f 02 	lds	r25, 0x024F
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	39 f4       	brne	.+14     	; 0xe42 <turnLeft+0x1c>
     e34:	80 91 50 02 	lds	r24, 0x0250
     e38:	90 91 51 02 	lds	r25, 0x0251
     e3c:	02 97       	sbiw	r24, 0x02	; 2
     e3e:	98 f4       	brcc	.+38     	; 0xe66 <turnLeft+0x40>
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <turnLeft+0x2e>
     e42:	03 97       	sbiw	r24, 0x03	; 3
     e44:	81 f4       	brne	.+32     	; 0xe66 <turnLeft+0x40>
     e46:	80 91 50 02 	lds	r24, 0x0250
     e4a:	90 91 51 02 	lds	r25, 0x0251
     e4e:	02 97       	sbiw	r24, 0x02	; 2
     e50:	02 97       	sbiw	r24, 0x02	; 2
     e52:	48 f4       	brcc	.+18     	; 0xe66 <turnLeft+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 93 28 01 	sts	0x0128, r24
     e5a:	80 93 2a 01 	sts	0x012A, r24
     e5e:	8a e5       	ldi	r24, 0x5A	; 90
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	92 dd       	rcall	.-1244   	; 0x988 <left_degrees>
     e64:	18 c0       	rjmp	.+48     	; 0xe96 <turnLeft+0x70>
     e66:	8e e1       	ldi	r24, 0x1E	; 30
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	8e dd       	rcall	.-1252   	; 0x988 <left_degrees>
     e6c:	8a ea       	ldi	r24, 0xAA	; 170
     e6e:	80 93 28 01 	sts	0x0128, r24
     e72:	80 93 2a 01 	sts	0x012A, r24
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <turnLeft+0x54>
     e78:	4f db       	rcall	.-2402   	; 0x518 <left>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	a6 db       	rcall	.-2228   	; 0x5ca <ADC_Conversion>
     e7e:	86 34       	cpi	r24, 0x46	; 70
     e80:	d8 f3       	brcs	.-10     	; 0xe78 <turnLeft+0x52>
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	8f e7       	ldi	r24, 0x7F	; 127
     e86:	94 e0       	ldi	r25, 0x04	; 4
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	80 40       	sbci	r24, 0x00	; 0
     e8c:	90 40       	sbci	r25, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <turnLeft+0x62>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <turnLeft+0x6c>
     e92:	00 00       	nop
     e94:	47 db       	rcall	.-2418   	; 0x524 <stop>
     e96:	89 e1       	ldi	r24, 0x19	; 25
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	4c df       	rcall	.-360    	; 0xd34 <lcd>
     e9c:	80 91 4e 02 	lds	r24, 0x024E
     ea0:	90 91 4f 02 	lds	r25, 0x024F
     ea4:	03 96       	adiw	r24, 0x03	; 3
     ea6:	83 70       	andi	r24, 0x03	; 3
     ea8:	90 78       	andi	r25, 0x80	; 128
     eaa:	99 23       	and	r25, r25
     eac:	24 f4       	brge	.+8      	; 0xeb6 <turnLeft+0x90>
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	8c 6f       	ori	r24, 0xFC	; 252
     eb2:	9f 6f       	ori	r25, 0xFF	; 255
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	90 93 4f 02 	sts	0x024F, r25
     eba:	80 93 4e 02 	sts	0x024E, r24
     ebe:	80 91 9b 02 	lds	r24, 0x029B
     ec2:	90 91 9c 02 	lds	r25, 0x029C
     ec6:	86 5a       	subi	r24, 0xA6	; 166
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	90 93 9c 02 	sts	0x029C, r25
     ece:	80 93 9b 02 	sts	0x029B, r24
     ed2:	08 95       	ret

00000ed4 <turn>:
     ed4:	80 91 4e 02 	lds	r24, 0x024E
     ed8:	90 91 4f 02 	lds	r25, 0x024F
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	81 f4       	brne	.+32     	; 0xf00 <turn+0x2c>
     ee0:	80 91 50 02 	lds	r24, 0x0250
     ee4:	90 91 51 02 	lds	r25, 0x0251
     ee8:	02 97       	sbiw	r24, 0x02	; 2
     eea:	02 97       	sbiw	r24, 0x02	; 2
     eec:	d0 f4       	brcc	.+52     	; 0xf22 <turn+0x4e>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	80 93 28 01 	sts	0x0128, r24
     ef4:	80 93 2a 01 	sts	0x012A, r24
     ef8:	84 eb       	ldi	r24, 0xB4	; 180
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	45 dd       	rcall	.-1398   	; 0x988 <left_degrees>
     efe:	20 c0       	rjmp	.+64     	; 0xf40 <turn+0x6c>
     f00:	02 97       	sbiw	r24, 0x02	; 2
     f02:	79 f4       	brne	.+30     	; 0xf22 <turn+0x4e>
     f04:	80 91 50 02 	lds	r24, 0x0250
     f08:	90 91 51 02 	lds	r25, 0x0251
     f0c:	02 97       	sbiw	r24, 0x02	; 2
     f0e:	48 f4       	brcc	.+18     	; 0xf22 <turn+0x4e>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	80 93 28 01 	sts	0x0128, r24
     f16:	80 93 2a 01 	sts	0x012A, r24
     f1a:	84 eb       	ldi	r24, 0xB4	; 180
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	34 dd       	rcall	.-1432   	; 0x988 <left_degrees>
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <turn+0x6c>
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	80 93 28 01 	sts	0x0128, r24
     f28:	80 93 2a 01 	sts	0x012A, r24
     f2c:	86 e9       	ldi	r24, 0x96	; 150
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2b dd       	rcall	.-1450   	; 0x988 <left_degrees>
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <turn+0x62>
     f34:	f1 da       	rcall	.-2590   	; 0x518 <left>
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	48 db       	rcall	.-2416   	; 0x5ca <ADC_Conversion>
     f3a:	88 32       	cpi	r24, 0x28	; 40
     f3c:	d8 f3       	brcs	.-10     	; 0xf34 <turn+0x60>
     f3e:	f2 da       	rcall	.-2588   	; 0x524 <stop>
     f40:	8e e1       	ldi	r24, 0x1E	; 30
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	f7 de       	rcall	.-530    	; 0xd34 <lcd>
     f46:	80 91 4e 02 	lds	r24, 0x024E
     f4a:	90 91 4f 02 	lds	r25, 0x024F
     f4e:	02 96       	adiw	r24, 0x02	; 2
     f50:	83 70       	andi	r24, 0x03	; 3
     f52:	90 78       	andi	r25, 0x80	; 128
     f54:	99 23       	and	r25, r25
     f56:	24 f4       	brge	.+8      	; 0xf60 <turn+0x8c>
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	8c 6f       	ori	r24, 0xFC	; 252
     f5c:	9f 6f       	ori	r25, 0xFF	; 255
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	90 93 4f 02 	sts	0x024F, r25
     f64:	80 93 4e 02 	sts	0x024E, r24
     f68:	80 91 9b 02 	lds	r24, 0x029B
     f6c:	90 91 9c 02 	lds	r25, 0x029C
     f70:	8c 54       	subi	r24, 0x4C	; 76
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	90 93 9c 02 	sts	0x029C, r25
     f78:	80 93 9b 02 	sts	0x029B, r24
     f7c:	08 95       	ret

00000f7e <traverseToSort>:
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	80 91 54 02 	lds	r24, 0x0254
     f88:	90 91 55 02 	lds	r25, 0x0255
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	21 f4       	brne	.+8      	; 0xf98 <traverseToSort+0x1a>
     f90:	10 92 55 02 	sts	0x0255, r1
     f94:	10 92 54 02 	sts	0x0254, r1
     f98:	ce 01       	movw	r24, r28
     f9a:	04 97       	sbiw	r24, 0x04	; 4
     f9c:	02 97       	sbiw	r24, 0x02	; 2
     f9e:	88 f5       	brcc	.+98     	; 0x1002 <traverseToSort+0x84>
     fa0:	c4 30       	cpi	r28, 0x04	; 4
     fa2:	d1 05       	cpc	r29, r1
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <traverseToSort+0x36>
     fa6:	80 91 4e 02 	lds	r24, 0x024E
     faa:	90 91 4f 02 	lds	r25, 0x024F
     fae:	89 2b       	or	r24, r25
     fb0:	51 f0       	breq	.+20     	; 0xfc6 <traverseToSort+0x48>
     fb2:	0b c0       	rjmp	.+22     	; 0xfca <traverseToSort+0x4c>
     fb4:	c5 30       	cpi	r28, 0x05	; 5
     fb6:	d1 05       	cpc	r29, r1
     fb8:	41 f4       	brne	.+16     	; 0xfca <traverseToSort+0x4c>
     fba:	80 91 4e 02 	lds	r24, 0x024E
     fbe:	90 91 4f 02 	lds	r25, 0x024F
     fc2:	02 97       	sbiw	r24, 0x02	; 2
     fc4:	11 f4       	brne	.+4      	; 0xfca <traverseToSort+0x4c>
     fc6:	d8 de       	rcall	.-592    	; 0xd78 <turnRight>
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <traverseToSort+0x4e>
     fca:	2d df       	rcall	.-422    	; 0xe26 <turnLeft>
     fcc:	ca de       	rcall	.-620    	; 0xd62 <front>
     fce:	c9 de       	rcall	.-622    	; 0xd62 <front>
     fd0:	24 97       	sbiw	r28, 0x04	; 4
     fd2:	39 f4       	brne	.+14     	; 0xfe2 <traverseToSort+0x64>
     fd4:	85 e0       	ldi	r24, 0x05	; 5
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	90 93 51 02 	sts	0x0251, r25
     fdc:	80 93 50 02 	sts	0x0250, r24
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <traverseToSort+0x70>
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	90 93 51 02 	sts	0x0251, r25
     fea:	80 93 50 02 	sts	0x0250, r24
     fee:	80 91 76 02 	lds	r24, 0x0276
     ff2:	90 91 77 02 	lds	r25, 0x0277
     ff6:	02 96       	adiw	r24, 0x02	; 2
     ff8:	90 93 77 02 	sts	0x0277, r25
     ffc:	80 93 76 02 	sts	0x0276, r24
    1000:	45 c0       	rjmp	.+138    	; 0x108c <traverseToSort+0x10e>
    1002:	80 91 4e 02 	lds	r24, 0x024E
    1006:	90 91 4f 02 	lds	r25, 0x024F
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	39 f4       	brne	.+14     	; 0x101e <traverseToSort+0xa0>
    1010:	80 91 50 02 	lds	r24, 0x0250
    1014:	90 91 51 02 	lds	r25, 0x0251
    1018:	02 97       	sbiw	r24, 0x02	; 2
    101a:	78 f4       	brcc	.+30     	; 0x103a <traverseToSort+0xbc>
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <traverseToSort+0xb2>
    101e:	03 97       	sbiw	r24, 0x03	; 3
    1020:	99 f4       	brne	.+38     	; 0x1048 <traverseToSort+0xca>
    1022:	80 91 50 02 	lds	r24, 0x0250
    1026:	90 91 51 02 	lds	r25, 0x0251
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	91 05       	cpc	r25, r1
    102e:	11 f4       	brne	.+4      	; 0x1034 <traverseToSort+0xb6>
    1030:	a3 de       	rcall	.-698    	; 0xd78 <turnRight>
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <traverseToSort+0xca>
    1034:	02 97       	sbiw	r24, 0x02	; 2
    1036:	40 f4       	brcc	.+16     	; 0x1048 <traverseToSort+0xca>
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <traverseToSort+0xc8>
    103a:	80 91 50 02 	lds	r24, 0x0250
    103e:	90 91 51 02 	lds	r25, 0x0251
    1042:	02 97       	sbiw	r24, 0x02	; 2
    1044:	09 f4       	brne	.+2      	; 0x1048 <traverseToSort+0xca>
    1046:	ef de       	rcall	.-546    	; 0xe26 <turnLeft>
    1048:	22 97       	sbiw	r28, 0x02	; 2
    104a:	3c f4       	brge	.+14     	; 0x105a <traverseToSort+0xdc>
    104c:	80 91 4e 02 	lds	r24, 0x024E
    1050:	90 91 4f 02 	lds	r25, 0x024F
    1054:	89 2b       	or	r24, r25
    1056:	39 f0       	breq	.+14     	; 0x1066 <traverseToSort+0xe8>
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <traverseToSort+0xea>
    105a:	80 91 4e 02 	lds	r24, 0x024E
    105e:	90 91 4f 02 	lds	r25, 0x024F
    1062:	02 97       	sbiw	r24, 0x02	; 2
    1064:	09 f4       	brne	.+2      	; 0x1068 <traverseToSort+0xea>
    1066:	36 df       	rcall	.-404    	; 0xed4 <turn>
    1068:	7c de       	rcall	.-776    	; 0xd62 <front>
    106a:	80 91 87 02 	lds	r24, 0x0287
    106e:	90 91 88 02 	lds	r25, 0x0288
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	90 78       	andi	r25, 0x80	; 128
    1076:	99 23       	and	r25, r25
    1078:	24 f4       	brge	.+8      	; 0x1082 <traverseToSort+0x104>
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	8e 6f       	ori	r24, 0xFE	; 254
    107e:	9f 6f       	ori	r25, 0xFF	; 255
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	04 96       	adiw	r24, 0x04	; 4
    1084:	90 93 51 02 	sts	0x0251, r25
    1088:	80 93 50 02 	sts	0x0250, r24
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <scan>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	14 db       	rcall	.-2520   	; 0x6c0 <red_read>
    1098:	62 db       	rcall	.-2364   	; 0x75e <blue_read>
    109a:	3e db       	rcall	.-2436   	; 0x718 <green_read>
    109c:	8b e0       	ldi	r24, 0x0B	; 11
    109e:	95 da       	rcall	.-2774   	; 0x5ca <ADC_Conversion>
    10a0:	81 35       	cpi	r24, 0x51	; 81
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <scan+0x14>
    10a4:	7b c0       	rjmp	.+246    	; 0x119c <scan+0x10a>
    10a6:	8b e0       	ldi	r24, 0x0B	; 11
    10a8:	90 da       	rcall	.-2784   	; 0x5ca <ADC_Conversion>
    10aa:	84 36       	cpi	r24, 0x64	; 100
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <scan+0x1e>
    10ae:	79 c0       	rjmp	.+242    	; 0x11a2 <scan+0x110>
    10b0:	80 91 6c 02 	lds	r24, 0x026C
    10b4:	90 91 6d 02 	lds	r25, 0x026D
    10b8:	aa 27       	eor	r26, r26
    10ba:	97 fd       	sbrc	r25, 7
    10bc:	a0 95       	com	r26
    10be:	ba 2f       	mov	r27, r26
    10c0:	40 91 7e 02 	lds	r20, 0x027E
    10c4:	50 91 7f 02 	lds	r21, 0x027F
    10c8:	60 91 80 02 	lds	r22, 0x0280
    10cc:	70 91 81 02 	lds	r23, 0x0281
    10d0:	48 17       	cp	r20, r24
    10d2:	59 07       	cpc	r21, r25
    10d4:	6a 07       	cpc	r22, r26
    10d6:	7b 07       	cpc	r23, r27
    10d8:	d8 f4       	brcc	.+54     	; 0x1110 <scan+0x7e>
    10da:	40 91 7a 02 	lds	r20, 0x027A
    10de:	50 91 7b 02 	lds	r21, 0x027B
    10e2:	60 91 7c 02 	lds	r22, 0x027C
    10e6:	70 91 7d 02 	lds	r23, 0x027D
    10ea:	48 17       	cp	r20, r24
    10ec:	59 07       	cpc	r21, r25
    10ee:	6a 07       	cpc	r22, r26
    10f0:	7b 07       	cpc	r23, r27
    10f2:	70 f4       	brcc	.+28     	; 0x1110 <scan+0x7e>
    10f4:	40 91 6e 02 	lds	r20, 0x026E
    10f8:	50 91 6f 02 	lds	r21, 0x026F
    10fc:	60 91 70 02 	lds	r22, 0x0270
    1100:	70 91 71 02 	lds	r23, 0x0271
    1104:	48 17       	cp	r20, r24
    1106:	59 07       	cpc	r21, r25
    1108:	6a 07       	cpc	r22, r26
    110a:	7b 07       	cpc	r23, r27
    110c:	08 f4       	brcc	.+2      	; 0x1110 <scan+0x7e>
    110e:	4c c0       	rjmp	.+152    	; 0x11a8 <scan+0x116>
    1110:	40 91 7e 02 	lds	r20, 0x027E
    1114:	50 91 7f 02 	lds	r21, 0x027F
    1118:	60 91 80 02 	lds	r22, 0x0280
    111c:	70 91 81 02 	lds	r23, 0x0281
    1120:	80 91 6e 02 	lds	r24, 0x026E
    1124:	90 91 6f 02 	lds	r25, 0x026F
    1128:	a0 91 70 02 	lds	r26, 0x0270
    112c:	b0 91 71 02 	lds	r27, 0x0271
    1130:	84 17       	cp	r24, r20
    1132:	95 07       	cpc	r25, r21
    1134:	a6 07       	cpc	r26, r22
    1136:	b7 07       	cpc	r27, r23
    1138:	c8 f4       	brcc	.+50     	; 0x116c <scan+0xda>
    113a:	00 91 7e 02 	lds	r16, 0x027E
    113e:	10 91 7f 02 	lds	r17, 0x027F
    1142:	20 91 80 02 	lds	r18, 0x0280
    1146:	30 91 81 02 	lds	r19, 0x0281
    114a:	40 91 7a 02 	lds	r20, 0x027A
    114e:	50 91 7b 02 	lds	r21, 0x027B
    1152:	60 91 7c 02 	lds	r22, 0x027C
    1156:	70 91 7d 02 	lds	r23, 0x027D
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	40 17       	cp	r20, r16
    1160:	51 07       	cpc	r21, r17
    1162:	62 07       	cpc	r22, r18
    1164:	73 07       	cpc	r23, r19
    1166:	28 f5       	brcc	.+74     	; 0x11b2 <scan+0x120>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	23 c0       	rjmp	.+70     	; 0x11b2 <scan+0x120>
    116c:	40 91 6e 02 	lds	r20, 0x026E
    1170:	50 91 6f 02 	lds	r21, 0x026F
    1174:	60 91 70 02 	lds	r22, 0x0270
    1178:	70 91 71 02 	lds	r23, 0x0271
    117c:	80 91 7a 02 	lds	r24, 0x027A
    1180:	90 91 7b 02 	lds	r25, 0x027B
    1184:	a0 91 7c 02 	lds	r26, 0x027C
    1188:	b0 91 7d 02 	lds	r27, 0x027D
    118c:	84 17       	cp	r24, r20
    118e:	95 07       	cpc	r25, r21
    1190:	a6 07       	cpc	r26, r22
    1192:	b7 07       	cpc	r27, r23
    1194:	60 f4       	brcc	.+24     	; 0x11ae <scan+0x11c>
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <scan+0x120>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	9f ef       	ldi	r25, 0xFF	; 255
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <scan+0x120>
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <scan+0x120>
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <scan+0x120>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	08 95       	ret

000011b8 <setIndicatorAndColor>:
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd e9       	ldi	r28, 0x9D	; 157
    11be:	d2 e0       	ldi	r29, 0x02	; 2
    11c0:	eb e8       	ldi	r30, 0x8B	; 139
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	a4 e6       	ldi	r26, 0x64	; 100
    11c6:	b2 e0       	ldi	r27, 0x02	; 2
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	2e ef       	ldi	r18, 0xFE	; 254
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	89 93       	st	Y+, r24
    11d2:	99 93       	st	Y+, r25
    11d4:	33 83       	std	Z+3, r19	; 0x03
    11d6:	22 83       	std	Z+2, r18	; 0x02
    11d8:	31 83       	std	Z+1, r19	; 0x01
    11da:	20 83       	st	Z, r18
    11dc:	1d 92       	st	X+, r1
    11de:	1d 92       	st	X+, r1
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	34 96       	adiw	r30, 0x04	; 4
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	91 05       	cpc	r25, r1
    11e8:	99 f7       	brne	.-26     	; 0x11d0 <setIndicatorAndColor+0x18>
    11ea:	e0 91 9d 02 	lds	r30, 0x029D
    11ee:	f0 91 9e 02 	lds	r31, 0x029E
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	eb 55       	subi	r30, 0x5B	; 91
    11f8:	fd 4f       	sbci	r31, 0xFD	; 253
    11fa:	11 82       	std	Z+1, r1	; 0x01
    11fc:	10 82       	st	Z, r1
    11fe:	e0 91 9f 02 	lds	r30, 0x029F
    1202:	f0 91 a0 02 	lds	r31, 0x02A0
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	eb 55       	subi	r30, 0x5B	; 91
    120c:	fd 4f       	sbci	r31, 0xFD	; 253
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
    1216:	e0 91 a1 02 	lds	r30, 0x02A1
    121a:	f0 91 a2 02 	lds	r31, 0x02A2
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	eb 55       	subi	r30, 0x5B	; 91
    1224:	fd 4f       	sbci	r31, 0xFD	; 253
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    122e:	e0 91 a3 02 	lds	r30, 0x02A3
    1232:	f0 91 a4 02 	lds	r31, 0x02A4
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	eb 55       	subi	r30, 0x5B	; 91
    123c:	fd 4f       	sbci	r31, 0xFD	; 253
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	9f ef       	ldi	r25, 0xFF	; 255
    124a:	90 93 86 02 	sts	0x0286, r25
    124e:	80 93 85 02 	sts	0x0285, r24
    1252:	90 93 84 02 	sts	0x0284, r25
    1256:	80 93 83 02 	sts	0x0283, r24
    125a:	90 93 b4 02 	sts	0x02B4, r25
    125e:	80 93 b3 02 	sts	0x02B3, r24
    1262:	90 93 b2 02 	sts	0x02B2, r25
    1266:	80 93 b1 02 	sts	0x02B1, r24
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <terminalCheck1>:
void terminalCheck1()
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
	forward_mm(30);
    1274:	8e e1       	ldi	r24, 0x1E	; 30
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	75 db       	rcall	.-2326   	; 0x964 <forward_mm>
	flag = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	90 93 55 02 	sts	0x0255, r25
    1282:	80 93 54 02 	sts	0x0254, r24
	if (ct != ot)
    1286:	80 91 50 02 	lds	r24, 0x0250
    128a:	90 91 51 02 	lds	r25, 0x0251
    128e:	20 91 87 02 	lds	r18, 0x0287
    1292:	30 91 88 02 	lds	r19, 0x0288
    1296:	28 17       	cp	r18, r24
    1298:	39 07       	cpc	r19, r25
    129a:	89 f1       	breq	.+98     	; 0x12fe <terminalCheck1+0x8e>
	{
		if (dir == 1 || dir == 3)
    129c:	20 91 4e 02 	lds	r18, 0x024E
    12a0:	30 91 4f 02 	lds	r19, 0x024F
    12a4:	2d 7f       	andi	r18, 0xFD	; 253
    12a6:	21 30       	cpi	r18, 0x01	; 1
    12a8:	31 05       	cpc	r19, r1
    12aa:	41 f4       	brne	.+16     	; 0x12bc <terminalCheck1+0x4c>
		{
			if (ot == 3 || ot == 0)
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <terminalCheck1+0x46>
    12b2:	89 2b       	or	r24, r25
    12b4:	11 f4       	brne	.+4      	; 0x12ba <terminalCheck1+0x4a>
				turnRight();
    12b6:	60 dd       	rcall	.-1344   	; 0xd78 <turnRight>
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <terminalCheck1+0x4c>
			else turnLeft();
    12ba:	b5 dd       	rcall	.-1174   	; 0xe26 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    12bc:	80 91 87 02 	lds	r24, 0x0287
    12c0:	90 91 88 02 	lds	r25, 0x0288
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	91 05       	cpc	r25, r1
    12c8:	38 f4       	brcc	.+14     	; 0x12d8 <terminalCheck1+0x68>
    12ca:	20 91 4e 02 	lds	r18, 0x024E
    12ce:	30 91 4f 02 	lds	r19, 0x024F
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	49 f0       	breq	.+18     	; 0x12ea <terminalCheck1+0x7a>
    12d8:	02 97       	sbiw	r24, 0x02	; 2
    12da:	02 97       	sbiw	r24, 0x02	; 2
    12dc:	38 f4       	brcc	.+14     	; 0x12ec <terminalCheck1+0x7c>
    12de:	80 91 4e 02 	lds	r24, 0x024E
    12e2:	90 91 4f 02 	lds	r25, 0x024F
    12e6:	89 2b       	or	r24, r25
    12e8:	09 f4       	brne	.+2      	; 0x12ec <terminalCheck1+0x7c>
			turn();
    12ea:	f4 dd       	rcall	.-1048   	; 0xed4 <turn>
		front();
    12ec:	3a dd       	rcall	.-1420   	; 0xd62 <front>
		ot = ct;
    12ee:	80 91 87 02 	lds	r24, 0x0287
    12f2:	90 91 88 02 	lds	r25, 0x0288
    12f6:	90 93 51 02 	sts	0x0251, r25
    12fa:	80 93 50 02 	sts	0x0250, r24
	}
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    12fe:	80 91 87 02 	lds	r24, 0x0287
    1302:	90 91 88 02 	lds	r25, 0x0288
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	30 f4       	brcc	.+12     	; 0x1318 <terminalCheck1+0xa8>
    130c:	20 91 4e 02 	lds	r18, 0x024E
    1310:	30 91 4f 02 	lds	r19, 0x024F
    1314:	23 2b       	or	r18, r19
    1316:	49 f0       	breq	.+18     	; 0x132a <terminalCheck1+0xba>
    1318:	02 97       	sbiw	r24, 0x02	; 2
    131a:	02 97       	sbiw	r24, 0x02	; 2
    131c:	40 f4       	brcc	.+16     	; 0x132e <terminalCheck1+0xbe>
    131e:	80 91 4e 02 	lds	r24, 0x024E
    1322:	90 91 4f 02 	lds	r25, 0x024F
    1326:	02 97       	sbiw	r24, 0x02	; 2
    1328:	11 f4       	brne	.+4      	; 0x132e <terminalCheck1+0xbe>
		turnRight();
    132a:	26 dd       	rcall	.-1460   	; 0xd78 <turnRight>
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <terminalCheck1+0xc0>
	else turnLeft();
    132e:	7b dd       	rcall	.-1290   	; 0xe26 <turnLeft>
	term[ct][0] = scan();
    1330:	c0 91 87 02 	lds	r28, 0x0287
    1334:	d0 91 88 02 	lds	r29, 0x0288
    1338:	ac de       	rcall	.-680    	; 0x1092 <scan>
    133a:	cc 0f       	add	r28, r28
    133c:	dd 1f       	adc	r29, r29
    133e:	cc 0f       	add	r28, r28
    1340:	dd 1f       	adc	r29, r29
    1342:	c5 57       	subi	r28, 0x75	; 117
    1344:	dd 4f       	sbci	r29, 0xFD	; 253
    1346:	99 83       	std	Y+1, r25	; 0x01
    1348:	88 83       	st	Y, r24
	if(term[ct][0]==-1)
    134a:	e0 91 87 02 	lds	r30, 0x0287
    134e:	f0 91 88 02 	lds	r31, 0x0288
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	e5 57       	subi	r30, 0x75	; 117
    135c:	fd 4f       	sbci	r31, 0xFD	; 253
    135e:	40 81       	ld	r20, Z
    1360:	51 81       	ldd	r21, Z+1	; 0x01
    1362:	4f 3f       	cpi	r20, 0xFF	; 255
    1364:	2f ef       	ldi	r18, 0xFF	; 255
    1366:	52 07       	cpc	r21, r18
    1368:	49 f4       	brne	.+18     	; 0x137c <terminalCheck1+0x10c>
		lcd_print(2,11,9, 1);
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	49 e0       	ldi	r20, 0x09	; 9
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	6b e0       	ldi	r22, 0x0B	; 11
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <terminalCheck1+0x118>
	else
		lcd_print(2,11, term[ct][0], 1);
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	6b e0       	ldi	r22, 0x0B	; 11
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1388:	4f ef       	ldi	r20, 0xFF	; 255
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	9c e2       	ldi	r25, 0x2C	; 44
    138e:	41 50       	subi	r20, 0x01	; 1
    1390:	80 40       	sbci	r24, 0x00	; 0
    1392:	90 40       	sbci	r25, 0x00	; 0
    1394:	e1 f7       	brne	.-8      	; 0x138e <terminalCheck1+0x11e>
    1396:	00 c0       	rjmp	.+0      	; 0x1398 <terminalCheck1+0x128>
    1398:	00 00       	nop
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);



	lcd((char*)term[ct][0]);
    139a:	e0 91 87 02 	lds	r30, 0x0287
    139e:	f0 91 88 02 	lds	r31, 0x0288
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	e5 57       	subi	r30, 0x75	; 117
    13ac:	fd 4f       	sbci	r31, 0xFD	; 253
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	c0 dc       	rcall	.-1664   	; 0xd34 <lcd>
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    13b4:	20 91 87 02 	lds	r18, 0x0287
    13b8:	30 91 88 02 	lds	r19, 0x0288
    13bc:	f9 01       	movw	r30, r18
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e5 57       	subi	r30, 0x75	; 117
    13c8:	fd 4f       	sbci	r31, 0xFD	; 253
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	8f 3f       	cpi	r24, 0xFF	; 255
    13d0:	4f ef       	ldi	r20, 0xFF	; 255
    13d2:	94 07       	cpc	r25, r20
    13d4:	51 f0       	breq	.+20     	; 0x13ea <terminalCheck1+0x17a>
    13d6:	f9 01       	movw	r30, r18
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	e3 56       	subi	r30, 0x63	; 99
    13de:	fd 4f       	sbci	r31, 0xFD	; 253
    13e0:	20 81       	ld	r18, Z
    13e2:	31 81       	ldd	r19, Z+1	; 0x01
    13e4:	82 17       	cp	r24, r18
    13e6:	93 07       	cpc	r25, r19
    13e8:	49 f4       	brne	.+18     	; 0x13fc <terminalCheck1+0x18c>
		total--;
    13ea:	80 91 00 02 	lds	r24, 0x0200
    13ee:	90 91 01 02 	lds	r25, 0x0201
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	90 93 01 02 	sts	0x0201, r25
    13f8:	80 93 00 02 	sts	0x0200, r24
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <terminalCheck2>:
void terminalCheck2()
{
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
	if (flag == 0)
    1406:	80 91 54 02 	lds	r24, 0x0254
    140a:	90 91 55 02 	lds	r25, 0x0255
    140e:	89 2b       	or	r24, r25
    1410:	39 f5       	brne	.+78     	; 0x1460 <terminalCheck2+0x5e>
	{
		if (dir == 0)
    1412:	80 91 4e 02 	lds	r24, 0x024E
    1416:	90 91 4f 02 	lds	r25, 0x024F
    141a:	89 2b       	or	r24, r25
    141c:	71 f4       	brne	.+28     	; 0x143a <terminalCheck2+0x38>
			if (ot == 0 || ot == 1)
    141e:	80 91 50 02 	lds	r24, 0x0250
    1422:	90 91 51 02 	lds	r25, 0x0251
    1426:	02 97       	sbiw	r24, 0x02	; 2
    1428:	20 f4       	brcc	.+8      	; 0x1432 <terminalCheck2+0x30>
				forward_mm(30);
    142a:	8e e1       	ldi	r24, 0x1E	; 30
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9a da       	rcall	.-2764   	; 0x964 <forward_mm>
    1430:	11 c0       	rjmp	.+34     	; 0x1454 <terminalCheck2+0x52>
			else back_mm(30);
    1432:	8e e1       	ldi	r24, 0x1E	; 30
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9f da       	rcall	.-2754   	; 0x976 <back_mm>
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <terminalCheck2+0x52>
		else if (ot == 0 || ot == 1)
    143a:	80 91 50 02 	lds	r24, 0x0250
    143e:	90 91 51 02 	lds	r25, 0x0251
    1442:	02 97       	sbiw	r24, 0x02	; 2
    1444:	20 f4       	brcc	.+8      	; 0x144e <terminalCheck2+0x4c>
			back_mm(30);
    1446:	8e e1       	ldi	r24, 0x1E	; 30
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	95 da       	rcall	.-2774   	; 0x976 <back_mm>
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <terminalCheck2+0x52>
		else forward_mm(30);
    144e:	8e e1       	ldi	r24, 0x1E	; 30
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	88 da       	rcall	.-2800   	; 0x964 <forward_mm>
		flag = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 55 02 	sts	0x0255, r25
    145c:	80 93 54 02 	sts	0x0254, r24
	}

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1460:	80 91 87 02 	lds	r24, 0x0287
    1464:	90 91 88 02 	lds	r25, 0x0288
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	91 05       	cpc	r25, r1
    146c:	30 f4       	brcc	.+12     	; 0x147a <terminalCheck2+0x78>
    146e:	20 91 4e 02 	lds	r18, 0x024E
    1472:	30 91 4f 02 	lds	r19, 0x024F
    1476:	23 2b       	or	r18, r19
    1478:	69 f0       	breq	.+26     	; 0x1494 <terminalCheck2+0x92>
    147a:	9c 01       	movw	r18, r24
    147c:	22 50       	subi	r18, 0x02	; 2
    147e:	31 09       	sbc	r19, r1
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	48 f4       	brcc	.+18     	; 0x1498 <terminalCheck2+0x96>
    1486:	40 91 4e 02 	lds	r20, 0x024E
    148a:	50 91 4f 02 	lds	r21, 0x024F
    148e:	42 30       	cpi	r20, 0x02	; 2
    1490:	51 05       	cpc	r21, r1
    1492:	11 f4       	brne	.+4      	; 0x1498 <terminalCheck2+0x96>
		turnLeft();
    1494:	c8 dc       	rcall	.-1648   	; 0xe26 <turnLeft>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <terminalCheck2+0xbe>
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1498:	02 97       	sbiw	r24, 0x02	; 2
    149a:	30 f4       	brcc	.+12     	; 0x14a8 <terminalCheck2+0xa6>
    149c:	80 91 4e 02 	lds	r24, 0x024E
    14a0:	90 91 4f 02 	lds	r25, 0x024F
    14a4:	02 97       	sbiw	r24, 0x02	; 2
    14a6:	49 f0       	breq	.+18     	; 0x14ba <terminalCheck2+0xb8>
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	40 f4       	brcc	.+16     	; 0x14be <terminalCheck2+0xbc>
    14ae:	80 91 4e 02 	lds	r24, 0x024E
    14b2:	90 91 4f 02 	lds	r25, 0x024F
    14b6:	89 2b       	or	r24, r25
    14b8:	11 f4       	brne	.+4      	; 0x14be <terminalCheck2+0xbc>
		turnRight();
    14ba:	5e dc       	rcall	.-1860   	; 0xd78 <turnRight>
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <terminalCheck2+0xbe>
	else turn();
    14be:	0a dd       	rcall	.-1516   	; 0xed4 <turn>
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
    14c0:	c0 91 87 02 	lds	r28, 0x0287
    14c4:	d0 91 88 02 	lds	r29, 0x0288
    14c8:	e4 dd       	rcall	.-1080   	; 0x1092 <scan>
    14ca:	cc 0f       	add	r28, r28
    14cc:	dd 1f       	adc	r29, r29
    14ce:	cc 0f       	add	r28, r28
    14d0:	dd 1f       	adc	r29, r29
    14d2:	c5 57       	subi	r28, 0x75	; 117
    14d4:	dd 4f       	sbci	r29, 0xFD	; 253
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==-1)
    14da:	e0 91 87 02 	lds	r30, 0x0287
    14de:	f0 91 88 02 	lds	r31, 0x0288
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	e5 57       	subi	r30, 0x75	; 117
    14ec:	fd 4f       	sbci	r31, 0xFD	; 253
    14ee:	42 81       	ldd	r20, Z+2	; 0x02
    14f0:	53 81       	ldd	r21, Z+3	; 0x03
    14f2:	4f 3f       	cpi	r20, 0xFF	; 255
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    14f6:	52 07       	cpc	r21, r18
    14f8:	49 f4       	brne	.+18     	; 0x150c <terminalCheck2+0x10a>
		lcd_print(2,11,9, 1);
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	49 e0       	ldi	r20, 0x09	; 9
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	6b e0       	ldi	r22, 0x0B	; 11
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <terminalCheck2+0x116>
	else
		lcd_print(2,11, term[ct][1], 1);
    150c:	21 e0       	ldi	r18, 0x01	; 1
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	6b e0       	ldi	r22, 0x0B	; 11
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    1518:	4f ef       	ldi	r20, 0xFF	; 255
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9c e2       	ldi	r25, 0x2C	; 44
    151e:	41 50       	subi	r20, 0x01	; 1
    1520:	80 40       	sbci	r24, 0x00	; 0
    1522:	90 40       	sbci	r25, 0x00	; 0
    1524:	e1 f7       	brne	.-8      	; 0x151e <terminalCheck2+0x11c>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <terminalCheck2+0x126>
    1528:	00 00       	nop
	_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    152a:	80 91 87 02 	lds	r24, 0x0287
    152e:	90 91 88 02 	lds	r25, 0x0288
    1532:	fc 01       	movw	r30, r24
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	e5 57       	subi	r30, 0x75	; 117
    153e:	fd 4f       	sbci	r31, 0xFD	; 253
    1540:	22 81       	ldd	r18, Z+2	; 0x02
    1542:	33 81       	ldd	r19, Z+3	; 0x03
    1544:	2f 3f       	cpi	r18, 0xFF	; 255
    1546:	4f ef       	ldi	r20, 0xFF	; 255
    1548:	34 07       	cpc	r19, r20
    154a:	51 f0       	breq	.+20     	; 0x1560 <terminalCheck2+0x15e>
    154c:	fc 01       	movw	r30, r24
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	e3 56       	subi	r30, 0x63	; 99
    1554:	fd 4f       	sbci	r31, 0xFD	; 253
    1556:	40 81       	ld	r20, Z
    1558:	51 81       	ldd	r21, Z+1	; 0x01
    155a:	24 17       	cp	r18, r20
    155c:	35 07       	cpc	r19, r21
    155e:	51 f4       	brne	.+20     	; 0x1574 <terminalCheck2+0x172>
		total--;
    1560:	20 91 00 02 	lds	r18, 0x0200
    1564:	30 91 01 02 	lds	r19, 0x0201
    1568:	21 50       	subi	r18, 0x01	; 1
    156a:	31 09       	sbc	r19, r1
    156c:	30 93 01 02 	sts	0x0201, r19
    1570:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
    1574:	fc 01       	movw	r30, r24
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	ec 59       	subi	r30, 0x9C	; 156
    157c:	fd 4f       	sbci	r31, 0xFD	; 253
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
	visitedCount++;
    1586:	80 91 52 02 	lds	r24, 0x0252
    158a:	90 91 53 02 	lds	r25, 0x0253
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	90 93 53 02 	sts	0x0253, r25
    1594:	80 93 52 02 	sts	0x0252, r24
}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <pick>:

void pick(int side)
{
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
	elevate(0, side);//lower
    15a4:	68 2f       	mov	r22, r24
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	8c db       	rcall	.-2280   	; 0xcc2 <elevate>
	open(side);
    15aa:	8c 2f       	mov	r24, r28
    15ac:	97 db       	rcall	.-2258   	; 0xcdc <open>
	close(side);
    15ae:	8c 2f       	mov	r24, r28
    15b0:	a5 db       	rcall	.-2230   	; 0xcfc <close>
	elevate(45, side);//mid
    15b2:	6c 2f       	mov	r22, r28
    15b4:	8d e2       	ldi	r24, 0x2D	; 45
    15b6:	85 db       	rcall	.-2294   	; 0xcc2 <elevate>
	armCount--;
    15b8:	80 91 02 02 	lds	r24, 0x0202
    15bc:	90 91 03 02 	lds	r25, 0x0203
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	90 93 03 02 	sts	0x0203, r25
    15c6:	80 93 02 02 	sts	0x0202, r24
	if (side == 0)
    15ca:	cd 2b       	or	r28, r29
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <pick+0x38>
		lcd("pickRight");
    15ce:	83 e2       	ldi	r24, 0x23	; 35
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	b0 db       	rcall	.-2208   	; 0xd34 <lcd>
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <pick+0x3e>
	else
		lcd("pickLeft");
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	ac db       	rcall	.-2216   	; 0xd34 <lcd>
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <position>:

void position(int armNo, int side)
{
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	8c 01       	movw	r16, r24
    15ec:	eb 01       	movw	r28, r22
	if (ct == ot)
    15ee:	20 91 87 02 	lds	r18, 0x0287
    15f2:	30 91 88 02 	lds	r19, 0x0288
    15f6:	40 91 50 02 	lds	r20, 0x0250
    15fa:	50 91 51 02 	lds	r21, 0x0251
    15fe:	24 17       	cp	r18, r20
    1600:	35 07       	cpc	r19, r21
    1602:	09 f0       	breq	.+2      	; 0x1606 <position+0x24>
    1604:	7d c0       	rjmp	.+250    	; 0x1700 <position+0x11e>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1606:	c9 01       	movw	r24, r18
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	30 f4       	brcc	.+12     	; 0x161a <position+0x38>
    160e:	40 91 4e 02 	lds	r20, 0x024E
    1612:	50 91 4f 02 	lds	r21, 0x024F
    1616:	45 2b       	or	r20, r21
    1618:	61 f0       	breq	.+24     	; 0x1632 <position+0x50>
    161a:	22 50       	subi	r18, 0x02	; 2
    161c:	31 09       	sbc	r19, r1
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	68 f4       	brcc	.+26     	; 0x163e <position+0x5c>
    1624:	40 91 4e 02 	lds	r20, 0x024E
    1628:	50 91 4f 02 	lds	r21, 0x024F
    162c:	42 30       	cpi	r20, 0x02	; 2
    162e:	51 05       	cpc	r21, r1
    1630:	31 f4       	brne	.+12     	; 0x163e <position+0x5c>
		{
			if (armNo != side)
    1632:	0c 17       	cp	r16, r28
    1634:	1d 07       	cpc	r17, r29
    1636:	09 f4       	brne	.+2      	; 0x163a <position+0x58>
    1638:	4c c0       	rjmp	.+152    	; 0x16d2 <position+0xf0>
				turn();
    163a:	4c dc       	rcall	.-1896   	; 0xed4 <turn>
    163c:	4a c0       	rjmp	.+148    	; 0x16d2 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	91 05       	cpc	r25, r1
    1642:	38 f4       	brcc	.+14     	; 0x1652 <position+0x70>
    1644:	40 91 4e 02 	lds	r20, 0x024E
    1648:	50 91 4f 02 	lds	r21, 0x024F
    164c:	42 30       	cpi	r20, 0x02	; 2
    164e:	51 05       	cpc	r21, r1
    1650:	49 f0       	breq	.+18     	; 0x1664 <position+0x82>
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	58 f4       	brcc	.+22     	; 0x166e <position+0x8c>
    1658:	40 91 4e 02 	lds	r20, 0x024E
    165c:	50 91 4f 02 	lds	r21, 0x024F
    1660:	45 2b       	or	r20, r21
    1662:	29 f4       	brne	.+10     	; 0x166e <position+0x8c>
		{
			if (armNo == side)
    1664:	0c 17       	cp	r16, r28
    1666:	1d 07       	cpc	r17, r29
    1668:	a1 f5       	brne	.+104    	; 0x16d2 <position+0xf0>
				turn();
    166a:	34 dc       	rcall	.-1944   	; 0xed4 <turn>
    166c:	32 c0       	rjmp	.+100    	; 0x16d2 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	91 05       	cpc	r25, r1
    1672:	38 f4       	brcc	.+14     	; 0x1682 <position+0xa0>
    1674:	40 91 4e 02 	lds	r20, 0x024E
    1678:	50 91 4f 02 	lds	r21, 0x024F
    167c:	41 30       	cpi	r20, 0x01	; 1
    167e:	51 05       	cpc	r21, r1
    1680:	51 f0       	breq	.+20     	; 0x1696 <position+0xb4>
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	70 f4       	brcc	.+28     	; 0x16a4 <position+0xc2>
    1688:	40 91 4e 02 	lds	r20, 0x024E
    168c:	50 91 4f 02 	lds	r21, 0x024F
    1690:	43 30       	cpi	r20, 0x03	; 3
    1692:	51 05       	cpc	r21, r1
    1694:	39 f4       	brne	.+14     	; 0x16a4 <position+0xc2>
		{
			if (armNo != side)
    1696:	0c 17       	cp	r16, r28
    1698:	1d 07       	cpc	r17, r29
    169a:	11 f0       	breq	.+4      	; 0x16a0 <position+0xbe>
				turnRight();
    169c:	6d db       	rcall	.-2342   	; 0xd78 <turnRight>
    169e:	19 c0       	rjmp	.+50     	; 0x16d2 <position+0xf0>
			else turnLeft();
    16a0:	c2 db       	rcall	.-2172   	; 0xe26 <turnLeft>
    16a2:	17 c0       	rjmp	.+46     	; 0x16d2 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    16a4:	02 97       	sbiw	r24, 0x02	; 2
    16a6:	30 f4       	brcc	.+12     	; 0x16b4 <position+0xd2>
    16a8:	80 91 4e 02 	lds	r24, 0x024E
    16ac:	90 91 4f 02 	lds	r25, 0x024F
    16b0:	03 97       	sbiw	r24, 0x03	; 3
    16b2:	49 f0       	breq	.+18     	; 0x16c6 <position+0xe4>
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	60 f4       	brcc	.+24     	; 0x16d2 <position+0xf0>
    16ba:	80 91 4e 02 	lds	r24, 0x024E
    16be:	90 91 4f 02 	lds	r25, 0x024F
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	31 f4       	brne	.+12     	; 0x16d2 <position+0xf0>
			if (armNo == side)
    16c6:	0c 17       	cp	r16, r28
    16c8:	1d 07       	cpc	r17, r29
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <position+0xee>
				turnRight();
    16cc:	55 db       	rcall	.-2390   	; 0xd78 <turnRight>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <position+0xf0>
			else turnLeft();
    16d0:	aa db       	rcall	.-2220   	; 0xe26 <turnLeft>
		if (flag == 1 && (dir == 0 || dir == 2))
    16d2:	80 91 54 02 	lds	r24, 0x0254
    16d6:	90 91 55 02 	lds	r25, 0x0255
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <position+0xfe>
    16de:	64 c0       	rjmp	.+200    	; 0x17a8 <position+0x1c6>
    16e0:	80 91 4e 02 	lds	r24, 0x024E
    16e4:	90 91 4f 02 	lds	r25, 0x024F
    16e8:	8d 7f       	andi	r24, 0xFD	; 253
    16ea:	89 2b       	or	r24, r25
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <position+0x10e>
    16ee:	5c c0       	rjmp	.+184    	; 0x17a8 <position+0x1c6>
		{
			back_mm(30);
    16f0:	8e e1       	ldi	r24, 0x1E	; 30
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	40 d9       	rcall	.-3456   	; 0x976 <back_mm>
			flag = 0;
    16f6:	10 92 55 02 	sts	0x0255, r1
    16fa:	10 92 54 02 	sts	0x0254, r1
    16fe:	54 c0       	rjmp	.+168    	; 0x17a8 <position+0x1c6>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    1700:	80 91 4e 02 	lds	r24, 0x024E
    1704:	90 91 4f 02 	lds	r25, 0x024F
    1708:	8d 7f       	andi	r24, 0xFD	; 253
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	49 f4       	brne	.+18     	; 0x1720 <position+0x13e>
			if (ct == 0 || ct == 3)
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	19 f0       	breq	.+6      	; 0x171a <position+0x138>
    1714:	23 30       	cpi	r18, 0x03	; 3
    1716:	31 05       	cpc	r19, r1
    1718:	11 f4       	brne	.+4      	; 0x171e <position+0x13c>
				turnRight();
    171a:	2e db       	rcall	.-2468   	; 0xd78 <turnRight>
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <position+0x13e>
			else turnLeft();
    171e:	83 db       	rcall	.-2298   	; 0xe26 <turnLeft>
		if (dir == 0 || dir == 2)
    1720:	20 91 4e 02 	lds	r18, 0x024E
    1724:	30 91 4f 02 	lds	r19, 0x024F
    1728:	21 15       	cp	r18, r1
    172a:	31 05       	cpc	r19, r1
    172c:	21 f0       	breq	.+8      	; 0x1736 <position+0x154>
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	91 f5       	brne	.+100    	; 0x1798 <position+0x1b6>
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <position+0x162>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1736:	80 91 87 02 	lds	r24, 0x0287
    173a:	90 91 88 02 	lds	r25, 0x0288
    173e:	02 97       	sbiw	r24, 0x02	; 2
    1740:	c8 f4       	brcc	.+50     	; 0x1774 <position+0x192>
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <position+0x170>
    1744:	80 91 87 02 	lds	r24, 0x0287
    1748:	90 91 88 02 	lds	r25, 0x0288
    174c:	02 97       	sbiw	r24, 0x02	; 2
    174e:	02 97       	sbiw	r24, 0x02	; 2
    1750:	88 f4       	brcc	.+34     	; 0x1774 <position+0x192>
			{
				if (ot != 4 && ot != 5)
    1752:	80 91 50 02 	lds	r24, 0x0250
    1756:	90 91 51 02 	lds	r25, 0x0251
    175a:	04 97       	sbiw	r24, 0x04	; 4
    175c:	02 97       	sbiw	r24, 0x02	; 2
    175e:	10 f0       	brcs	.+4      	; 0x1764 <position+0x182>
				{
					turnLeft();
    1760:	62 db       	rcall	.-2364   	; 0xe26 <turnLeft>
					front();
    1762:	ff da       	rcall	.-2562   	; 0xd62 <front>
				}
				if (armNo == side)
    1764:	0c 17       	cp	r16, r28
    1766:	1d 07       	cpc	r17, r29
    1768:	11 f4       	brne	.+4      	; 0x176e <position+0x18c>
				{
					front();
    176a:	fb da       	rcall	.-2570   	; 0xd62 <front>
    176c:	15 c0       	rjmp	.+42     	; 0x1798 <position+0x1b6>
				}
				else
				{
					front();
    176e:	f9 da       	rcall	.-2574   	; 0xd62 <front>
					turn();
    1770:	b1 db       	rcall	.-2206   	; 0xed4 <turn>
    1772:	12 c0       	rjmp	.+36     	; 0x1798 <position+0x1b6>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1774:	80 91 50 02 	lds	r24, 0x0250
    1778:	90 91 51 02 	lds	r25, 0x0251
    177c:	04 97       	sbiw	r24, 0x04	; 4
    177e:	02 97       	sbiw	r24, 0x02	; 2
    1780:	10 f0       	brcs	.+4      	; 0x1786 <position+0x1a4>
				{
					turnLeft();
    1782:	51 db       	rcall	.-2398   	; 0xe26 <turnLeft>
					front();
    1784:	ee da       	rcall	.-2596   	; 0xd62 <front>
				}
				if (armNo == side)
    1786:	0c 17       	cp	r16, r28
    1788:	1d 07       	cpc	r17, r29
    178a:	19 f4       	brne	.+6      	; 0x1792 <position+0x1b0>
				{
					turn();
    178c:	a3 db       	rcall	.-2234   	; 0xed4 <turn>
					front();
    178e:	e9 da       	rcall	.-2606   	; 0xd62 <front>
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <position+0x1b6>
				}
				else
				{
					turn();
    1792:	a0 db       	rcall	.-2240   	; 0xed4 <turn>
					front();
    1794:	e6 da       	rcall	.-2612   	; 0xd62 <front>
					turn();
    1796:	9e db       	rcall	.-2244   	; 0xed4 <turn>
				}
			}
		}
		ot = ct;
    1798:	80 91 87 02 	lds	r24, 0x0287
    179c:	90 91 88 02 	lds	r25, 0x0288
    17a0:	90 93 51 02 	sts	0x0251, r25
    17a4:	80 93 50 02 	sts	0x0250, r24
	}
}
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <pickNode>:
void pickNode(int armNo, int side)
{
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	8c 01       	movw	r16, r24
    17bc:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    17be:	fc 01       	movw	r30, r24
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	ef 54       	subi	r30, 0x4F	; 79
    17c6:	fd 4f       	sbci	r31, 0xFD	; 253
    17c8:	a0 91 87 02 	lds	r26, 0x0287
    17cc:	b0 91 88 02 	lds	r27, 0x0288
    17d0:	aa 0f       	add	r26, r26
    17d2:	bb 1f       	adc	r27, r27
    17d4:	a6 0f       	add	r26, r22
    17d6:	b7 1f       	adc	r27, r23
    17d8:	aa 0f       	add	r26, r26
    17da:	bb 1f       	adc	r27, r27
    17dc:	a5 57       	subi	r26, 0x75	; 117
    17de:	bd 4f       	sbci	r27, 0xFD	; 253
    17e0:	8d 91       	ld	r24, X+
    17e2:	9c 91       	ld	r25, X
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
	position(armNo, side);
    17e8:	c8 01       	movw	r24, r16
    17ea:	fb de       	rcall	.-522    	; 0x15e2 <position>
	pick(armNo);
    17ec:	c8 01       	movw	r24, r16
    17ee:	d7 de       	rcall	.-594    	; 0x159e <pick>
	term[ct][side] = -1;
    17f0:	80 91 87 02 	lds	r24, 0x0287
    17f4:	90 91 88 02 	lds	r25, 0x0288
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	c8 0f       	add	r28, r24
    17fe:	d9 1f       	adc	r29, r25
    1800:	cc 0f       	add	r28, r28
    1802:	dd 1f       	adc	r29, r29
    1804:	c5 57       	subi	r28, 0x75	; 117
    1806:	dd 4f       	sbci	r29, 0xFD	; 253
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	9f ef       	ldi	r25, 0xFF	; 255
    180c:	99 83       	std	Y+1, r25	; 0x01
    180e:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <pickSort>:

void pickSort(int armNo, int sortNo)
{
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ec 01       	movw	r28, r24
    1824:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    1826:	fc 01       	movw	r30, r24
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	ef 54       	subi	r30, 0x4F	; 79
    182e:	fd 4f       	sbci	r31, 0xFD	; 253
    1830:	db 01       	movw	r26, r22
    1832:	aa 0f       	add	r26, r26
    1834:	bb 1f       	adc	r27, r27
    1836:	ad 57       	subi	r26, 0x7D	; 125
    1838:	bd 4f       	sbci	r27, 0xFD	; 253
    183a:	8d 91       	ld	r24, X+
    183c:	9c 91       	ld	r25, X
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1842:	c6 17       	cp	r28, r22
    1844:	d7 07       	cpc	r29, r23
    1846:	39 f4       	brne	.+14     	; 0x1856 <pickSort+0x3c>
    1848:	80 91 4e 02 	lds	r24, 0x024E
    184c:	90 91 4f 02 	lds	r25, 0x024F
    1850:	89 2b       	or	r24, r25
    1852:	49 f4       	brne	.+18     	; 0x1866 <pickSort+0x4c>
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <pickSort+0x48>
    1856:	80 91 4e 02 	lds	r24, 0x024E
    185a:	90 91 4f 02 	lds	r25, 0x024F
    185e:	02 97       	sbiw	r24, 0x02	; 2
    1860:	11 f4       	brne	.+4      	; 0x1866 <pickSort+0x4c>
		turn();
    1862:	38 db       	rcall	.-2448   	; 0xed4 <turn>
    1864:	0c c0       	rjmp	.+24     	; 0x187e <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1866:	80 91 4e 02 	lds	r24, 0x024E
    186a:	90 91 4f 02 	lds	r25, 0x024F
    186e:	8d 7f       	andi	r24, 0xFD	; 253
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	29 f4       	brne	.+10     	; 0x187e <pickSort+0x64>
			if (armNo == 0)
    1874:	20 97       	sbiw	r28, 0x00	; 0
    1876:	11 f4       	brne	.+4      	; 0x187c <pickSort+0x62>
				turnLeft();
    1878:	d6 da       	rcall	.-2644   	; 0xe26 <turnLeft>
    187a:	01 c0       	rjmp	.+2      	; 0x187e <pickSort+0x64>
			else turnRight();
    187c:	7d da       	rcall	.-2822   	; 0xd78 <turnRight>
	}
	pick(armNo);
    187e:	ce 01       	movw	r24, r28
    1880:	8e de       	rcall	.-740    	; 0x159e <pick>
	sort[sortNo] = -1;
    1882:	f8 01       	movw	r30, r16
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	ed 57       	subi	r30, 0x7D	; 125
    188a:	fd 4f       	sbci	r31, 0xFD	; 253
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	9f ef       	ldi	r25, 0xFF	; 255
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <pickup>:
void pickup()
{
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    18aa:	20 91 87 02 	lds	r18, 0x0287
    18ae:	30 91 88 02 	lds	r19, 0x0288
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	30 f4       	brcc	.+12     	; 0x18c4 <pickup+0x26>
    18b8:	80 91 4e 02 	lds	r24, 0x024E
    18bc:	90 91 4f 02 	lds	r25, 0x024F
    18c0:	02 97       	sbiw	r24, 0x02	; 2
    18c2:	79 f0       	breq	.+30     	; 0x18e2 <pickup+0x44>
    18c4:	c9 01       	movw	r24, r18
    18c6:	02 97       	sbiw	r24, 0x02	; 2
    18c8:	02 97       	sbiw	r24, 0x02	; 2
    18ca:	80 f4       	brcc	.+32     	; 0x18ec <pickup+0x4e>
    18cc:	80 91 4e 02 	lds	r24, 0x024E
    18d0:	90 91 4f 02 	lds	r25, 0x024F
    18d4:	89 2b       	or	r24, r25
    18d6:	79 f0       	breq	.+30     	; 0x18f6 <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    18d8:	c1 e0       	ldi	r28, 0x01	; 1
    18da:	d0 e0       	ldi	r29, 0x00	; 0
    18dc:	00 e0       	ldi	r16, 0x00	; 0
    18de:	10 e0       	ldi	r17, 0x00	; 0
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    18e2:	c0 e0       	ldi	r28, 0x00	; 0
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    18e6:	01 e0       	ldi	r16, 0x01	; 1
    18e8:	10 e0       	ldi	r17, 0x00	; 0
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    18ec:	c1 e0       	ldi	r28, 0x01	; 1
    18ee:	d0 e0       	ldi	r29, 0x00	; 0
    18f0:	00 e0       	ldi	r16, 0x00	; 0
    18f2:	10 e0       	ldi	r17, 0x00	; 0
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    18f6:	c0 e0       	ldi	r28, 0x00	; 0
    18f8:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    18fa:	01 e0       	ldi	r16, 0x01	; 1
    18fc:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    18fe:	f9 01       	movw	r30, r18
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ec 59       	subi	r30, 0x9C	; 156
    1906:	fd 4f       	sbci	r31, 0xFD	; 253
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	89 2b       	or	r24, r25
    190e:	79 f4       	brne	.+30     	; 0x192e <pickup+0x90>
		if (term[ct][0] == -2)
    1910:	f9 01       	movw	r30, r18
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	e5 57       	subi	r30, 0x75	; 117
    191c:	fd 4f       	sbci	r31, 0xFD	; 253
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	02 96       	adiw	r24, 0x02	; 2
    1924:	19 f4       	brne	.+6      	; 0x192c <pickup+0x8e>
		{
		terminalCheck1();
    1926:	a4 dc       	rcall	.-1720   	; 0x1270 <terminalCheck1>
		terminalCheck2();
    1928:	6c dd       	rcall	.-1320   	; 0x1402 <terminalCheck2>
    192a:	01 c0       	rjmp	.+2      	; 0x192e <pickup+0x90>
		}
		else	terminalCheck2();
    192c:	6a dd       	rcall	.-1324   	; 0x1402 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    192e:	20 91 87 02 	lds	r18, 0x0287
    1932:	30 91 88 02 	lds	r19, 0x0288
    1936:	f9 01       	movw	r30, r18
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	e5 57       	subi	r30, 0x75	; 117
    1942:	fd 4f       	sbci	r31, 0xFD	; 253
    1944:	40 81       	ld	r20, Z
    1946:	51 81       	ldd	r21, Z+1	; 0x01
    1948:	f9 01       	movw	r30, r18
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	e3 56       	subi	r30, 0x63	; 99
    1950:	fd 4f       	sbci	r31, 0xFD	; 253
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	48 17       	cp	r20, r24
    1958:	59 07       	cpc	r21, r25
    195a:	21 f0       	breq	.+8      	; 0x1964 <pickup+0xc6>
    195c:	4f 3f       	cpi	r20, 0xFF	; 255
    195e:	6f ef       	ldi	r22, 0xFF	; 255
    1960:	56 07       	cpc	r21, r22
    1962:	89 f4       	brne	.+34     	; 0x1986 <pickup+0xe8>
    1964:	f9 01       	movw	r30, r18
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	e5 57       	subi	r30, 0x75	; 117
    1970:	fd 4f       	sbci	r31, 0xFD	; 253
    1972:	62 81       	ldd	r22, Z+2	; 0x02
    1974:	73 81       	ldd	r23, Z+3	; 0x03
    1976:	86 17       	cp	r24, r22
    1978:	97 07       	cpc	r25, r23
    197a:	09 f4       	brne	.+2      	; 0x197e <pickup+0xe0>
    197c:	ee c1       	rjmp	.+988    	; 0x1d5a <pickup+0x4bc>
    197e:	6f 3f       	cpi	r22, 0xFF	; 255
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	09 f4       	brne	.+2      	; 0x1986 <pickup+0xe8>
    1984:	ea c1       	rjmp	.+980    	; 0x1d5a <pickup+0x4bc>
		{
			if (armCount == 2)
    1986:	60 91 02 02 	lds	r22, 0x0202
    198a:	70 91 03 02 	lds	r23, 0x0203
    198e:	62 30       	cpi	r22, 0x02	; 2
    1990:	71 05       	cpc	r23, r1
    1992:	09 f0       	breq	.+2      	; 0x1996 <pickup+0xf8>
    1994:	b0 c0       	rjmp	.+352    	; 0x1af6 <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1996:	e0 91 ad 02 	lds	r30, 0x02AD
    199a:	f0 91 ae 02 	lds	r31, 0x02AE
    199e:	df 01       	movw	r26, r30
    19a0:	aa 0f       	add	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	a3 56       	subi	r26, 0x63	; 99
    19a6:	bd 4f       	sbci	r27, 0xFD	; 253
    19a8:	6d 91       	ld	r22, X+
    19aa:	7c 91       	ld	r23, X
    19ac:	46 17       	cp	r20, r22
    19ae:	57 07       	cpc	r21, r23
    19b0:	79 f0       	breq	.+30     	; 0x19d0 <pickup+0x132>
    19b2:	d9 01       	movw	r26, r18
    19b4:	aa 0f       	add	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	aa 0f       	add	r26, r26
    19ba:	bb 1f       	adc	r27, r27
    19bc:	a5 57       	subi	r26, 0x75	; 117
    19be:	bd 4f       	sbci	r27, 0xFD	; 253
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	ed 90       	ld	r14, X+
    19c4:	fc 90       	ld	r15, X
    19c6:	13 97       	sbiw	r26, 0x03	; 3
    19c8:	6e 15       	cp	r22, r14
    19ca:	7f 05       	cpc	r23, r15
    19cc:	59 f4       	brne	.+22     	; 0x19e4 <pickup+0x146>
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	c8 01       	movw	r24, r16
    19d6:	ed de       	rcall	.-550    	; 0x17b2 <pickNode>
    19d8:	8e c0       	rjmp	.+284    	; 0x1af6 <pickup+0x258>
					else	pickNode(arm1, 1);
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	ce 01       	movw	r24, r28
    19e0:	e8 de       	rcall	.-560    	; 0x17b2 <pickNode>
    19e2:	89 c0       	rjmp	.+274    	; 0x1af6 <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    19e4:	8e 15       	cp	r24, r14
    19e6:	9f 05       	cpc	r25, r15
    19e8:	09 f4       	brne	.+2      	; 0x19ec <pickup+0x14e>
    19ea:	4e c0       	rjmp	.+156    	; 0x1a88 <pickup+0x1ea>
    19ec:	ef 20       	and	r14, r15
    19ee:	e0 94       	com	r14
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <pickup+0x156>
    19f2:	4a c0       	rjmp	.+148    	; 0x1a88 <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    19f4:	48 17       	cp	r20, r24
    19f6:	59 07       	cpc	r21, r25
    19f8:	69 f0       	breq	.+26     	; 0x1a14 <pickup+0x176>
    19fa:	4f 3f       	cpi	r20, 0xFF	; 255
    19fc:	af ef       	ldi	r26, 0xFF	; 255
    19fe:	5a 07       	cpc	r21, r26
    1a00:	49 f0       	breq	.+18     	; 0x1a14 <pickup+0x176>
					{
						pickNode(arm1, 1);
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	ce 01       	movw	r24, r28
    1a08:	d4 de       	rcall	.-600    	; 0x17b2 <pickNode>
						pickNode(arm0, 0);
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	c8 01       	movw	r24, r16
    1a10:	d0 de       	rcall	.-608    	; 0x17b2 <pickNode>
    1a12:	71 c0       	rjmp	.+226    	; 0x1af6 <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1a14:	21 70       	andi	r18, 0x01	; 1
    1a16:	30 78       	andi	r19, 0x80	; 128
    1a18:	33 23       	and	r19, r19
    1a1a:	34 f4       	brge	.+12     	; 0x1a28 <pickup+0x18a>
    1a1c:	21 50       	subi	r18, 0x01	; 1
    1a1e:	31 09       	sbc	r19, r1
    1a20:	2e 6f       	ori	r18, 0xFE	; 254
    1a22:	3f 6f       	ori	r19, 0xFF	; 255
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	d9 01       	movw	r26, r18
    1a2a:	aa 0f       	add	r26, r26
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	ad 57       	subi	r26, 0x7D	; 125
    1a30:	bd 4f       	sbci	r27, 0xFD	; 253
    1a32:	2d 91       	ld	r18, X+
    1a34:	3c 91       	ld	r19, X
    1a36:	2f 3f       	cpi	r18, 0xFF	; 255
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	09 f1       	breq	.+66     	; 0x1a7e <pickup+0x1e0>
    1a3c:	df 01       	movw	r26, r30
    1a3e:	aa 0f       	add	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	aa 0f       	add	r26, r26
    1a44:	bb 1f       	adc	r27, r27
    1a46:	a5 57       	subi	r26, 0x75	; 117
    1a48:	bd 4f       	sbci	r27, 0xFD	; 253
    1a4a:	2d 91       	ld	r18, X+
    1a4c:	3c 91       	ld	r19, X
    1a4e:	62 17       	cp	r22, r18
    1a50:	73 07       	cpc	r23, r19
    1a52:	a9 f0       	breq	.+42     	; 0x1a7e <pickup+0x1e0>
    1a54:	2f 3f       	cpi	r18, 0xFF	; 255
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	91 f0       	breq	.+36     	; 0x1a7e <pickup+0x1e0>
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	e5 57       	subi	r30, 0x75	; 117
    1a64:	fd 4f       	sbci	r31, 0xFD	; 253
    1a66:	22 81       	ldd	r18, Z+2	; 0x02
    1a68:	33 81       	ldd	r19, Z+3	; 0x03
    1a6a:	62 17       	cp	r22, r18
    1a6c:	73 07       	cpc	r23, r19
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <pickup+0x1e0>
    1a70:	2f 3f       	cpi	r18, 0xFF	; 255
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	21 f0       	breq	.+8      	; 0x1a7e <pickup+0x1e0>
    1a76:	48 17       	cp	r20, r24
    1a78:	59 07       	cpc	r21, r25
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <pickup+0x1e0>
    1a7c:	6e c1       	rjmp	.+732    	; 0x1d5a <pickup+0x4bc>
						pickNode(arm1, 1);
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	ce 01       	movw	r24, r28
    1a84:	96 de       	rcall	.-724    	; 0x17b2 <pickNode>
    1a86:	37 c0       	rjmp	.+110    	; 0x1af6 <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1a88:	48 17       	cp	r20, r24
    1a8a:	59 07       	cpc	r21, r25
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <pickup+0x1f2>
    1a8e:	65 c1       	rjmp	.+714    	; 0x1d5a <pickup+0x4bc>
    1a90:	4f 3f       	cpi	r20, 0xFF	; 255
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <pickup+0x1fa>
    1a96:	61 c1       	rjmp	.+706    	; 0x1d5a <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1a98:	21 70       	andi	r18, 0x01	; 1
    1a9a:	30 78       	andi	r19, 0x80	; 128
    1a9c:	33 23       	and	r19, r19
    1a9e:	34 f4       	brge	.+12     	; 0x1aac <pickup+0x20e>
    1aa0:	21 50       	subi	r18, 0x01	; 1
    1aa2:	31 09       	sbc	r19, r1
    1aa4:	2e 6f       	ori	r18, 0xFE	; 254
    1aa6:	3f 6f       	ori	r19, 0xFF	; 255
    1aa8:	2f 5f       	subi	r18, 0xFF	; 255
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	d9 01       	movw	r26, r18
    1aae:	aa 0f       	add	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	ad 57       	subi	r26, 0x7D	; 125
    1ab4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	9c 91       	ld	r25, X
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	c1 f0       	breq	.+48     	; 0x1aee <pickup+0x250>
    1abe:	df 01       	movw	r26, r30
    1ac0:	aa 0f       	add	r26, r26
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	aa 0f       	add	r26, r26
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	a5 57       	subi	r26, 0x75	; 117
    1aca:	bd 4f       	sbci	r27, 0xFD	; 253
    1acc:	8d 91       	ld	r24, X+
    1ace:	9c 91       	ld	r25, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	68 17       	cp	r22, r24
    1ad4:	79 07       	cpc	r23, r25
    1ad6:	59 f0       	breq	.+22     	; 0x1aee <pickup+0x250>
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	49 f0       	breq	.+18     	; 0x1aee <pickup+0x250>
    1adc:	fd 01       	movw	r30, r26
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	68 17       	cp	r22, r24
    1ae4:	79 07       	cpc	r23, r25
    1ae6:	19 f0       	breq	.+6      	; 0x1aee <pickup+0x250>
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	09 f0       	breq	.+2      	; 0x1aee <pickup+0x250>
    1aec:	36 c1       	rjmp	.+620    	; 0x1d5a <pickup+0x4bc>
						pickNode(arm0, 0);
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	c8 01       	movw	r24, r16
    1af4:	5e de       	rcall	.-836    	; 0x17b2 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    1af6:	80 91 02 02 	lds	r24, 0x0202
    1afa:	90 91 03 02 	lds	r25, 0x0203
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <pickup+0x266>
    1b02:	2b c1       	rjmp	.+598    	; 0x1d5a <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1b04:	f8 01       	movw	r30, r16
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	ef 54       	subi	r30, 0x4F	; 79
    1b0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <pickup+0x27a>
					a1 = arm0;
    1b16:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1b18:	be 01       	movw	r22, r28
    1b1a:	6f 5f       	subi	r22, 0xFF	; 255
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	61 70       	andi	r22, 0x01	; 1
    1b20:	70 78       	andi	r23, 0x80	; 128
    1b22:	77 23       	and	r23, r23
    1b24:	34 f4       	brge	.+12     	; 0x1b32 <pickup+0x294>
    1b26:	61 50       	subi	r22, 0x01	; 1
    1b28:	71 09       	sbc	r23, r1
    1b2a:	6e 6f       	ori	r22, 0xFE	; 254
    1b2c:	7f 6f       	ori	r23, 0xFF	; 255
    1b2e:	6f 5f       	subi	r22, 0xFF	; 255
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1b32:	80 91 87 02 	lds	r24, 0x0287
    1b36:	90 91 88 02 	lds	r25, 0x0288
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	21 70       	andi	r18, 0x01	; 1
    1b3e:	30 78       	andi	r19, 0x80	; 128
    1b40:	33 23       	and	r19, r19
    1b42:	34 f4       	brge	.+12     	; 0x1b50 <pickup+0x2b2>
    1b44:	21 50       	subi	r18, 0x01	; 1
    1b46:	31 09       	sbc	r19, r1
    1b48:	2e 6f       	ori	r18, 0xFE	; 254
    1b4a:	3f 6f       	ori	r19, 0xFF	; 255
    1b4c:	2f 5f       	subi	r18, 0xFF	; 255
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	f9 01       	movw	r30, r18
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	ed 57       	subi	r30, 0x7D	; 125
    1b58:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5a:	20 81       	ld	r18, Z
    1b5c:	31 81       	ldd	r19, Z+1	; 0x01
    1b5e:	2f 3f       	cpi	r18, 0xFF	; 255
    1b60:	af ef       	ldi	r26, 0xFF	; 255
    1b62:	3a 07       	cpc	r19, r26
    1b64:	d9 f5       	brne	.+118    	; 0x1bdc <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1b66:	fc 01       	movw	r30, r24
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	ec 0f       	add	r30, r28
    1b6e:	fd 1f       	adc	r31, r29
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	e5 57       	subi	r30, 0x75	; 117
    1b76:	fd 4f       	sbci	r31, 0xFD	; 253
    1b78:	20 81       	ld	r18, Z
    1b7a:	31 81       	ldd	r19, Z+1	; 0x01
    1b7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1b7e:	ef ef       	ldi	r30, 0xFF	; 255
    1b80:	3e 07       	cpc	r19, r30
    1b82:	71 f0       	breq	.+28     	; 0x1ba0 <pickup+0x302>
    1b84:	fc 01       	movw	r30, r24
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	e3 56       	subi	r30, 0x63	; 99
    1b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8e:	40 81       	ld	r20, Z
    1b90:	51 81       	ldd	r21, Z+1	; 0x01
    1b92:	24 17       	cp	r18, r20
    1b94:	35 07       	cpc	r19, r21
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <pickup+0x302>
						pickNode(a1, a1);
    1b98:	be 01       	movw	r22, r28
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0a de       	rcall	.-1004   	; 0x17b2 <pickNode>
    1b9e:	dd c0       	rjmp	.+442    	; 0x1d5a <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	e6 0f       	add	r30, r22
    1ba8:	f7 1f       	adc	r31, r23
    1baa:	ee 0f       	add	r30, r30
    1bac:	ff 1f       	adc	r31, r31
    1bae:	e5 57       	subi	r30, 0x75	; 117
    1bb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb2:	20 81       	ld	r18, Z
    1bb4:	31 81       	ldd	r19, Z+1	; 0x01
    1bb6:	2f 3f       	cpi	r18, 0xFF	; 255
    1bb8:	4f ef       	ldi	r20, 0xFF	; 255
    1bba:	34 07       	cpc	r19, r20
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <pickup+0x322>
    1bbe:	cd c0       	rjmp	.+410    	; 0x1d5a <pickup+0x4bc>
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	e3 56       	subi	r30, 0x63	; 99
    1bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	28 17       	cp	r18, r24
    1bd0:	39 07       	cpc	r19, r25
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <pickup+0x338>
    1bd4:	c2 c0       	rjmp	.+388    	; 0x1d5a <pickup+0x4bc>
						pickNode(a1, a2);
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	ec dd       	rcall	.-1064   	; 0x17b2 <pickNode>
    1bda:	bf c0       	rjmp	.+382    	; 0x1d5a <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1bdc:	40 91 ad 02 	lds	r20, 0x02AD
    1be0:	50 91 ae 02 	lds	r21, 0x02AE
    1be4:	fa 01       	movw	r30, r20
    1be6:	ee 0f       	add	r30, r30
    1be8:	ff 1f       	adc	r31, r31
    1bea:	e3 56       	subi	r30, 0x63	; 99
    1bec:	fd 4f       	sbci	r31, 0xFD	; 253
    1bee:	01 90       	ld	r0, Z+
    1bf0:	f0 81       	ld	r31, Z
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	aa 0f       	add	r26, r26
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	aa 0f       	add	r26, r26
    1bfc:	bb 1f       	adc	r27, r27
    1bfe:	a5 57       	subi	r26, 0x75	; 117
    1c00:	bd 4f       	sbci	r27, 0xFD	; 253
    1c02:	0d 90       	ld	r0, X+
    1c04:	bc 91       	ld	r27, X
    1c06:	a0 2d       	mov	r26, r0
    1c08:	ae 17       	cp	r26, r30
    1c0a:	bf 07       	cpc	r27, r31
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <pickup+0x38c>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	aa 0f       	add	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	aa 0f       	add	r26, r26
    1c16:	bb 1f       	adc	r27, r27
    1c18:	a5 57       	subi	r26, 0x75	; 117
    1c1a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c1c:	12 96       	adiw	r26, 0x02	; 2
    1c1e:	0d 90       	ld	r0, X+
    1c20:	bc 91       	ld	r27, X
    1c22:	a0 2d       	mov	r26, r0
    1c24:	ea 17       	cp	r30, r26
    1c26:	fb 07       	cpc	r31, r27
    1c28:	d9 f5       	brne	.+118    	; 0x1ca0 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1c2a:	da 01       	movw	r26, r20
    1c2c:	aa 0f       	add	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	ac 59       	subi	r26, 0x9C	; 156
    1c32:	bd 4f       	sbci	r27, 0xFD	; 253
    1c34:	2d 91       	ld	r18, X+
    1c36:	3c 91       	ld	r19, X
    1c38:	21 30       	cpi	r18, 0x01	; 1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <pickup+0x3a2>
    1c3e:	8d c0       	rjmp	.+282    	; 0x1d5a <pickup+0x4bc>
    1c40:	da 01       	movw	r26, r20
    1c42:	aa 0f       	add	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	aa 0f       	add	r26, r26
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	a5 57       	subi	r26, 0x75	; 117
    1c4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c4e:	2d 91       	ld	r18, X+
    1c50:	3c 91       	ld	r19, X
    1c52:	2f 3f       	cpi	r18, 0xFF	; 255
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	79 f0       	breq	.+30     	; 0x1c76 <pickup+0x3d8>
    1c58:	da 01       	movw	r26, r20
    1c5a:	aa 0f       	add	r26, r26
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	aa 0f       	add	r26, r26
    1c60:	bb 1f       	adc	r27, r27
    1c62:	a5 57       	subi	r26, 0x75	; 117
    1c64:	bd 4f       	sbci	r27, 0xFD	; 253
    1c66:	12 96       	adiw	r26, 0x02	; 2
    1c68:	2d 91       	ld	r18, X+
    1c6a:	3c 91       	ld	r19, X
    1c6c:	13 97       	sbiw	r26, 0x03	; 3
    1c6e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <pickup+0x3d8>
    1c74:	72 c0       	rjmp	.+228    	; 0x1d5a <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	8c 0f       	add	r24, r28
    1c7c:	9d 1f       	adc	r25, r29
    1c7e:	dc 01       	movw	r26, r24
    1c80:	aa 0f       	add	r26, r26
    1c82:	bb 1f       	adc	r27, r27
    1c84:	a5 57       	subi	r26, 0x75	; 117
    1c86:	bd 4f       	sbci	r27, 0xFD	; 253
    1c88:	8d 91       	ld	r24, X+
    1c8a:	9c 91       	ld	r25, X
    1c8c:	e8 17       	cp	r30, r24
    1c8e:	f9 07       	cpc	r31, r25
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <pickup+0x3fc>
								pickNode(a1, a1);
    1c92:	be 01       	movw	r22, r28
    1c94:	ce 01       	movw	r24, r28
    1c96:	8d dd       	rcall	.-1254   	; 0x17b2 <pickNode>
    1c98:	60 c0       	rjmp	.+192    	; 0x1d5a <pickup+0x4bc>
							else pickNode(a1, a2);
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	8a dd       	rcall	.-1260   	; 0x17b2 <pickNode>
    1c9e:	5d c0       	rjmp	.+186    	; 0x1d5a <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	aa 0f       	add	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	a3 56       	subi	r26, 0x63	; 99
    1ca8:	bd 4f       	sbci	r27, 0xFD	; 253
    1caa:	0d 90       	ld	r0, X+
    1cac:	bc 91       	ld	r27, X
    1cae:	a0 2d       	mov	r26, r0
    1cb0:	2a 17       	cp	r18, r26
    1cb2:	3b 07       	cpc	r19, r27
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <pickup+0x41a>
    1cb6:	51 c0       	rjmp	.+162    	; 0x1d5a <pickup+0x4bc>
    1cb8:	2e 17       	cp	r18, r30
    1cba:	3f 07       	cpc	r19, r31
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <pickup+0x422>
    1cbe:	4d c0       	rjmp	.+154    	; 0x1d5a <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1cc0:	fa 01       	movw	r30, r20
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	ec 59       	subi	r30, 0x9C	; 156
    1cc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cca:	20 81       	ld	r18, Z
    1ccc:	31 81       	ldd	r19, Z+1	; 0x01
    1cce:	21 30       	cpi	r18, 0x01	; 1
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <pickup+0x438>
    1cd4:	42 c0       	rjmp	.+132    	; 0x1d5a <pickup+0x4bc>
    1cd6:	fa 01       	movw	r30, r20
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	e5 57       	subi	r30, 0x75	; 117
    1ce2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce4:	20 81       	ld	r18, Z
    1ce6:	31 81       	ldd	r19, Z+1	; 0x01
    1ce8:	a2 17       	cp	r26, r18
    1cea:	b3 07       	cpc	r27, r19
    1cec:	b1 f1       	breq	.+108    	; 0x1d5a <pickup+0x4bc>
    1cee:	fa 01       	movw	r30, r20
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	ff 1f       	adc	r31, r31
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	e5 57       	subi	r30, 0x75	; 117
    1cfa:	fd 4f       	sbci	r31, 0xFD	; 253
    1cfc:	22 81       	ldd	r18, Z+2	; 0x02
    1cfe:	33 81       	ldd	r19, Z+3	; 0x03
    1d00:	a2 17       	cp	r26, r18
    1d02:	b3 07       	cpc	r27, r19
    1d04:	51 f1       	breq	.+84     	; 0x1d5a <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1d06:	fc 01       	movw	r30, r24
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	ec 0f       	add	r30, r28
    1d0e:	fd 1f       	adc	r31, r29
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	e5 57       	subi	r30, 0x75	; 117
    1d16:	fd 4f       	sbci	r31, 0xFD	; 253
    1d18:	20 81       	ld	r18, Z
    1d1a:	31 81       	ldd	r19, Z+1	; 0x01
    1d1c:	2f 3f       	cpi	r18, 0xFF	; 255
    1d1e:	ef ef       	ldi	r30, 0xFF	; 255
    1d20:	3e 07       	cpc	r19, r30
    1d22:	39 f0       	breq	.+14     	; 0x1d32 <pickup+0x494>
    1d24:	a2 17       	cp	r26, r18
    1d26:	b3 07       	cpc	r27, r19
    1d28:	21 f0       	breq	.+8      	; 0x1d32 <pickup+0x494>
									pickNode(a1, a1);
    1d2a:	be 01       	movw	r22, r28
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	41 dd       	rcall	.-1406   	; 0x17b2 <pickNode>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	86 0f       	add	r24, r22
    1d38:	97 1f       	adc	r25, r23
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	e5 57       	subi	r30, 0x75	; 117
    1d42:	fd 4f       	sbci	r31, 0xFD	; 253
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4a:	2f ef       	ldi	r18, 0xFF	; 255
    1d4c:	92 07       	cpc	r25, r18
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <pickup+0x4bc>
    1d50:	a8 17       	cp	r26, r24
    1d52:	b9 07       	cpc	r27, r25
    1d54:	11 f0       	breq	.+4      	; 0x1d5a <pickup+0x4bc>
									pickNode(a1, a2);
    1d56:	ce 01       	movw	r24, r28
    1d58:	2c dd       	rcall	.-1448   	; 0x17b2 <pickNode>
					}
				}
			}
		}
}
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	08 95       	ret

00001d68 <drop>:

void drop(int side)
{
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	ec 01       	movw	r28, r24
	elevate(0, side);//lower
    1d6e:	68 2f       	mov	r22, r24
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	0e 94 61 06 	call	0xcc2	; 0xcc2 <elevate>
	open(side);
    1d76:	8c 2f       	mov	r24, r28
    1d78:	0e 94 6e 06 	call	0xcdc	; 0xcdc <open>
	elevate(45, side);//mid
    1d7c:	6c 2f       	mov	r22, r28
    1d7e:	8d e2       	ldi	r24, 0x2D	; 45
    1d80:	0e 94 61 06 	call	0xcc2	; 0xcc2 <elevate>
	close(side);
    1d84:	8c 2f       	mov	r24, r28
    1d86:	0e 94 7e 06 	call	0xcfc	; 0xcfc <close>
	armCount++;
    1d8a:	80 91 02 02 	lds	r24, 0x0202
    1d8e:	90 91 03 02 	lds	r25, 0x0203
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	90 93 03 02 	sts	0x0203, r25
    1d98:	80 93 02 02 	sts	0x0202, r24
	if(side==0)
    1d9c:	cd 2b       	or	r28, r29
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <drop+0x42>
	lcd("dropRight");
    1da0:	86 e3       	ldi	r24, 0x36	; 54
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	0e 94 9a 06 	call	0xd34	; 0xd34 <lcd>
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <drop+0x4a>
	else
	lcd("dropLeft");
    1daa:	80 e4       	ldi	r24, 0x40	; 64
    1dac:	92 e0       	ldi	r25, 0x02	; 2
    1dae:	0e 94 9a 06 	call	0xd34	; 0xd34 <lcd>
}
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1dc2:	e0 91 87 02 	lds	r30, 0x0287
    1dc6:	f0 91 88 02 	lds	r31, 0x0288
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	e6 0f       	add	r30, r22
    1dd0:	f7 1f       	adc	r31, r23
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	e5 57       	subi	r30, 0x75	; 117
    1dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dda:	8c 01       	movw	r16, r24
    1ddc:	00 0f       	add	r16, r16
    1dde:	11 1f       	adc	r17, r17
    1de0:	0f 54       	subi	r16, 0x4F	; 79
    1de2:	1d 4f       	sbci	r17, 0xFD	; 253
    1de4:	d8 01       	movw	r26, r16
    1de6:	8d 91       	ld	r24, X+
    1de8:	9c 91       	ld	r25, X
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
	position(armNo, side);
    1dee:	ce 01       	movw	r24, r28
    1df0:	f8 db       	rcall	.-2064   	; 0x15e2 <position>
	drop(armNo);
    1df2:	ce 01       	movw	r24, r28
    1df4:	b9 df       	rcall	.-142    	; 0x1d68 <drop>
	arm[armNo] = -1;
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	9f ef       	ldi	r25, 0xFF	; 255
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1e00:	80 91 56 02 	lds	r24, 0x0256
    1e04:	90 91 57 02 	lds	r25, 0x0257
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	90 93 57 02 	sts	0x0257, r25
    1e0e:	80 93 56 02 	sts	0x0256, r24
}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	08 95       	ret

00001e1c <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1e22:	fb 01       	movw	r30, r22
    1e24:	ee 0f       	add	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	ed 57       	subi	r30, 0x7D	; 125
    1e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	aa 0f       	add	r26, r26
    1e30:	bb 1f       	adc	r27, r27
    1e32:	af 54       	subi	r26, 0x4F	; 79
    1e34:	bd 4f       	sbci	r27, 0xFD	; 253
    1e36:	8d 91       	ld	r24, X+
    1e38:	9c 91       	ld	r25, X
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1e3e:	c6 17       	cp	r28, r22
    1e40:	d7 07       	cpc	r29, r23
    1e42:	39 f4       	brne	.+14     	; 0x1e52 <sortDrop+0x36>
    1e44:	80 91 4e 02 	lds	r24, 0x024E
    1e48:	90 91 4f 02 	lds	r25, 0x024F
    1e4c:	89 2b       	or	r24, r25
    1e4e:	49 f4       	brne	.+18     	; 0x1e62 <sortDrop+0x46>
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <sortDrop+0x42>
    1e52:	80 91 4e 02 	lds	r24, 0x024E
    1e56:	90 91 4f 02 	lds	r25, 0x024F
    1e5a:	02 97       	sbiw	r24, 0x02	; 2
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <sortDrop+0x46>
		turn();
    1e5e:	3a d8       	rcall	.-3980   	; 0xed4 <turn>
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <sortDrop+0x62>
	else
	{
		if (dir == 1 || dir == 3)
    1e62:	80 91 4e 02 	lds	r24, 0x024E
    1e66:	90 91 4f 02 	lds	r25, 0x024F
    1e6a:	8d 7f       	andi	r24, 0xFD	; 253
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	39 f4       	brne	.+14     	; 0x1e7e <sortDrop+0x62>
			if (armNo == 0)
    1e70:	20 97       	sbiw	r28, 0x00	; 0
    1e72:	19 f4       	brne	.+6      	; 0x1e7a <sortDrop+0x5e>
				turnLeft();
    1e74:	0e 94 13 07 	call	0xe26	; 0xe26 <turnLeft>
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <sortDrop+0x62>
			else turnRight();
    1e7a:	0e 94 bc 06 	call	0xd78	; 0xd78 <turnRight>
	}
	drop(armNo);
    1e7e:	ce 01       	movw	r24, r28
    1e80:	73 df       	rcall	.-282    	; 0x1d68 <drop>
	arm[armNo] = -1;
    1e82:	cc 0f       	add	r28, r28
    1e84:	dd 1f       	adc	r29, r29
    1e86:	cf 54       	subi	r28, 0x4F	; 79
    1e88:	dd 4f       	sbci	r29, 0xFD	; 253
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	9f ef       	ldi	r25, 0xFF	; 255
    1e8e:	99 83       	std	Y+1, r25	; 0x01
    1e90:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <dropPickup>:

void dropPickup(int a1)
{
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	21 70       	andi	r18, 0x01	; 1
    1ea4:	30 78       	andi	r19, 0x80	; 128
    1ea6:	33 23       	and	r19, r19
    1ea8:	34 f4       	brge	.+12     	; 0x1eb6 <dropPickup+0x1e>
    1eaa:	21 50       	subi	r18, 0x01	; 1
    1eac:	31 09       	sbc	r19, r1
    1eae:	2e 6f       	ori	r18, 0xFE	; 254
    1eb0:	3f 6f       	ori	r19, 0xFF	; 255
    1eb2:	2f 5f       	subi	r18, 0xFF	; 255
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	d2 2f       	mov	r29, r18
    1eb8:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1eba:	e0 91 87 02 	lds	r30, 0x0287
    1ebe:	f0 91 88 02 	lds	r31, 0x0288
    1ec2:	af 01       	movw	r20, r30
    1ec4:	44 0f       	add	r20, r20
    1ec6:	55 1f       	adc	r21, r21
    1ec8:	24 0f       	add	r18, r20
    1eca:	35 1f       	adc	r19, r21
    1ecc:	d9 01       	movw	r26, r18
    1ece:	aa 0f       	add	r26, r26
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	a5 57       	subi	r26, 0x75	; 117
    1ed4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ed6:	2d 91       	ld	r18, X+
    1ed8:	3c 91       	ld	r19, X
    1eda:	da 01       	movw	r26, r20
    1edc:	a3 56       	subi	r26, 0x63	; 99
    1ede:	bd 4f       	sbci	r27, 0xFD	; 253
    1ee0:	4d 91       	ld	r20, X+
    1ee2:	5c 91       	ld	r21, X
    1ee4:	24 17       	cp	r18, r20
    1ee6:	35 07       	cpc	r19, r21
    1ee8:	69 f0       	breq	.+26     	; 0x1f04 <dropPickup+0x6c>
    1eea:	a0 91 ad 02 	lds	r26, 0x02AD
    1eee:	b0 91 ae 02 	lds	r27, 0x02AE
    1ef2:	aa 0f       	add	r26, r26
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	a3 56       	subi	r26, 0x63	; 99
    1ef8:	bd 4f       	sbci	r27, 0xFD	; 253
    1efa:	6d 91       	ld	r22, X+
    1efc:	7c 91       	ld	r23, X
    1efe:	26 17       	cp	r18, r22
    1f00:	37 07       	cpc	r19, r23
    1f02:	a9 f0       	breq	.+42     	; 0x1f2e <dropPickup+0x96>
    1f04:	ee 0f       	add	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	e8 0f       	add	r30, r24
    1f0a:	f9 1f       	adc	r31, r25
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	e5 57       	subi	r30, 0x75	; 117
    1f12:	fd 4f       	sbci	r31, 0xFD	; 253
    1f14:	01 90       	ld	r0, Z+
    1f16:	f0 81       	ld	r31, Z
    1f18:	e0 2d       	mov	r30, r0
    1f1a:	4e 17       	cp	r20, r30
    1f1c:	5f 07       	cpc	r21, r31
    1f1e:	39 f0       	breq	.+14     	; 0x1f2e <dropPickup+0x96>
    1f20:	31 96       	adiw	r30, 0x01	; 1
    1f22:	29 f0       	breq	.+10     	; 0x1f2e <dropPickup+0x96>
		pickNode(a2, a1);
    1f24:	bc 01       	movw	r22, r24
    1f26:	8d 2f       	mov	r24, r29
    1f28:	9c 2f       	mov	r25, r28
    1f2a:	43 dc       	rcall	.-1914   	; 0x17b2 <pickNode>
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1f2e:	24 17       	cp	r18, r20
    1f30:	35 07       	cpc	r19, r21
    1f32:	41 f0       	breq	.+16     	; 0x1f44 <dropPickup+0xac>
    1f34:	2f 3f       	cpi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <dropPickup+0xac>
		pickNode(a2, a2);
    1f3a:	6d 2f       	mov	r22, r29
    1f3c:	7c 2f       	mov	r23, r28
    1f3e:	8d 2f       	mov	r24, r29
    1f40:	9c 2f       	mov	r25, r28
    1f42:	37 dc       	rcall	.-1938   	; 0x17b2 <pickNode>
}
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <canDrop>:

void canDrop()
{
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1f52:	20 91 87 02 	lds	r18, 0x0287
    1f56:	30 91 88 02 	lds	r19, 0x0288
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	30 f4       	brcc	.+12     	; 0x1f6c <canDrop+0x22>
    1f60:	80 91 4e 02 	lds	r24, 0x024E
    1f64:	90 91 4f 02 	lds	r25, 0x024F
    1f68:	02 97       	sbiw	r24, 0x02	; 2
    1f6a:	79 f0       	breq	.+30     	; 0x1f8a <canDrop+0x40>
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	02 97       	sbiw	r24, 0x02	; 2
    1f70:	02 97       	sbiw	r24, 0x02	; 2
    1f72:	80 f4       	brcc	.+32     	; 0x1f94 <canDrop+0x4a>
    1f74:	80 91 4e 02 	lds	r24, 0x024E
    1f78:	90 91 4f 02 	lds	r25, 0x024F
    1f7c:	89 2b       	or	r24, r25
    1f7e:	79 f0       	breq	.+30     	; 0x1f9e <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1f80:	01 e0       	ldi	r16, 0x01	; 1
    1f82:	10 e0       	ldi	r17, 0x00	; 0
    1f84:	c0 e0       	ldi	r28, 0x00	; 0
    1f86:	d0 e0       	ldi	r29, 0x00	; 0
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1f8a:	00 e0       	ldi	r16, 0x00	; 0
    1f8c:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1f8e:	c1 e0       	ldi	r28, 0x01	; 1
    1f90:	d0 e0       	ldi	r29, 0x00	; 0
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1f94:	01 e0       	ldi	r16, 0x01	; 1
    1f96:	10 e0       	ldi	r17, 0x00	; 0
    1f98:	c0 e0       	ldi	r28, 0x00	; 0
    1f9a:	d0 e0       	ldi	r29, 0x00	; 0
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1f9e:	00 e0       	ldi	r16, 0x00	; 0
    1fa0:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1fa2:	c1 e0       	ldi	r28, 0x01	; 1
    1fa4:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    1fa6:	40 91 02 02 	lds	r20, 0x0202
    1faa:	50 91 03 02 	lds	r21, 0x0203
    1fae:	42 30       	cpi	r20, 0x02	; 2
    1fb0:	51 05       	cpc	r21, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <canDrop+0x6c>
    1fb4:	3b c1       	rjmp	.+630    	; 0x222c <__stack+0x2d>
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	e3 56       	subi	r30, 0x63	; 99
    1fbe:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc0:	40 81       	ld	r20, Z
    1fc2:	51 81       	ldd	r21, Z+1	; 0x01
    1fc4:	80 91 b1 02 	lds	r24, 0x02B1
    1fc8:	90 91 b2 02 	lds	r25, 0x02B2
    1fcc:	84 17       	cp	r24, r20
    1fce:	95 07       	cpc	r25, r21
    1fd0:	41 f0       	breq	.+16     	; 0x1fe2 <canDrop+0x98>
    1fd2:	80 91 b3 02 	lds	r24, 0x02B3
    1fd6:	90 91 b4 02 	lds	r25, 0x02B4
    1fda:	48 17       	cp	r20, r24
    1fdc:	59 07       	cpc	r21, r25
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <canDrop+0x98>
    1fe0:	25 c1       	rjmp	.+586    	; 0x222c <__stack+0x2d>
		return;
	else
	{
		if (visited[ct] == 0)
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ec 59       	subi	r30, 0x9C	; 156
    1fea:	fd 4f       	sbci	r31, 0xFD	; 253
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	89 2b       	or	r24, r25
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <canDrop+0xac>
			terminalCheck1();
    1ff4:	3d d9       	rcall	.-3462   	; 0x1270 <terminalCheck1>
		if (armCount == 0)
    1ff6:	80 91 02 02 	lds	r24, 0x0202
    1ffa:	90 91 03 02 	lds	r25, 0x0203
    1ffe:	89 2b       	or	r24, r25
    2000:	09 f0       	breq	.+2      	; 0x2004 <canDrop+0xba>
    2002:	48 c0       	rjmp	.+144    	; 0x2094 <canDrop+0x14a>
		{
			if (arm[arm0] == color[ct])
    2004:	20 91 87 02 	lds	r18, 0x0287
    2008:	30 91 88 02 	lds	r19, 0x0288
    200c:	f9 01       	movw	r30, r18
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	e3 56       	subi	r30, 0x63	; 99
    2014:	fd 4f       	sbci	r31, 0xFD	; 253
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	fe 01       	movw	r30, r28
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	ef 54       	subi	r30, 0x4F	; 79
    2022:	fd 4f       	sbci	r31, 0xFD	; 253
    2024:	40 81       	ld	r20, Z
    2026:	51 81       	ldd	r21, Z+1	; 0x01
    2028:	48 17       	cp	r20, r24
    202a:	59 07       	cpc	r21, r25
    202c:	a9 f4       	brne	.+42     	; 0x2058 <canDrop+0x10e>
				if (term[ct][0] == -1)
    202e:	f9 01       	movw	r30, r18
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e5 57       	subi	r30, 0x75	; 117
    203a:	fd 4f       	sbci	r31, 0xFD	; 253
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	29 f4       	brne	.+10     	; 0x204e <canDrop+0x104>
					nodeDrop(arm0, 0);
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	ce 01       	movw	r24, r28
    204a:	b6 de       	rcall	.-660    	; 0x1db8 <nodeDrop>
    204c:	23 c0       	rjmp	.+70     	; 0x2094 <canDrop+0x14a>
				else nodeDrop(arm0, 1);
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	ce 01       	movw	r24, r28
    2054:	b1 de       	rcall	.-670    	; 0x1db8 <nodeDrop>
    2056:	1e c0       	rjmp	.+60     	; 0x2094 <canDrop+0x14a>
			else if (arm[arm1] == color[ct])
    2058:	f8 01       	movw	r30, r16
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ef 54       	subi	r30, 0x4F	; 79
    2060:	fd 4f       	sbci	r31, 0xFD	; 253
    2062:	40 81       	ld	r20, Z
    2064:	51 81       	ldd	r21, Z+1	; 0x01
    2066:	84 17       	cp	r24, r20
    2068:	95 07       	cpc	r25, r21
    206a:	a1 f4       	brne	.+40     	; 0x2094 <canDrop+0x14a>
				if (term[ct][0] != -1)
    206c:	f9 01       	movw	r30, r18
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e5 57       	subi	r30, 0x75	; 117
    2078:	fd 4f       	sbci	r31, 0xFD	; 253
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	29 f0       	breq	.+10     	; 0x208c <canDrop+0x142>
					nodeDrop(arm1, 1);
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	c8 01       	movw	r24, r16
    2088:	97 de       	rcall	.-722    	; 0x1db8 <nodeDrop>
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <canDrop+0x14a>
				else nodeDrop(arm1, 0);
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	c8 01       	movw	r24, r16
    2092:	92 de       	rcall	.-732    	; 0x1db8 <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    2094:	20 91 87 02 	lds	r18, 0x0287
    2098:	30 91 88 02 	lds	r19, 0x0288
    209c:	f9 01       	movw	r30, r18
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	e3 56       	subi	r30, 0x63	; 99
    20a4:	fd 4f       	sbci	r31, 0xFD	; 253
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	40 91 b1 02 	lds	r20, 0x02B1
    20ae:	50 91 b2 02 	lds	r21, 0x02B2
    20b2:	48 17       	cp	r20, r24
    20b4:	59 07       	cpc	r21, r25
    20b6:	41 f0       	breq	.+16     	; 0x20c8 <canDrop+0x17e>
    20b8:	40 91 b3 02 	lds	r20, 0x02B3
    20bc:	50 91 b4 02 	lds	r21, 0x02B4
    20c0:	84 17       	cp	r24, r20
    20c2:	95 07       	cpc	r25, r21
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <canDrop+0x17e>
    20c6:	b2 c0       	rjmp	.+356    	; 0x222c <__stack+0x2d>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    20c8:	f9 01       	movw	r30, r18
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	ee 0f       	add	r30, r30
    20d0:	ff 1f       	adc	r31, r31
    20d2:	e5 57       	subi	r30, 0x75	; 117
    20d4:	fd 4f       	sbci	r31, 0xFD	; 253
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <canDrop+0x196>
    20de:	45 c0       	rjmp	.+138    	; 0x216a <canDrop+0x220>
    20e0:	f9 01       	movw	r30, r18
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
    20ea:	e5 57       	subi	r30, 0x75	; 117
    20ec:	fd 4f       	sbci	r31, 0xFD	; 253
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	01 96       	adiw	r24, 0x01	; 1
    20f4:	c9 f0       	breq	.+50     	; 0x2128 <canDrop+0x1de>
				if (visited[ct] == 0)
    20f6:	f9 01       	movw	r30, r18
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	ec 59       	subi	r30, 0x9C	; 156
    20fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	89 2b       	or	r24, r25
    2106:	81 f4       	brne	.+32     	; 0x2128 <canDrop+0x1de>
					terminalCheck2();
    2108:	7c d9       	rcall	.-3336   	; 0x1402 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    210a:	20 91 87 02 	lds	r18, 0x0287
    210e:	30 91 88 02 	lds	r19, 0x0288
    2112:	f9 01       	movw	r30, r18
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	e5 57       	subi	r30, 0x75	; 117
    211e:	fd 4f       	sbci	r31, 0xFD	; 253
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	09 f1       	breq	.+66     	; 0x216a <canDrop+0x220>
    2128:	f9 01       	movw	r30, r18
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	ee 0f       	add	r30, r30
    2130:	ff 1f       	adc	r31, r31
    2132:	e5 57       	subi	r30, 0x75	; 117
    2134:	fd 4f       	sbci	r31, 0xFD	; 253
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	b1 f0       	breq	.+44     	; 0x216a <canDrop+0x220>
			{
				if (arm[arm0] == color[ct])
    213e:	de 01       	movw	r26, r28
    2140:	aa 0f       	add	r26, r26
    2142:	bb 1f       	adc	r27, r27
    2144:	af 54       	subi	r26, 0x4F	; 79
    2146:	bd 4f       	sbci	r27, 0xFD	; 253
    2148:	f9 01       	movw	r30, r18
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	e3 56       	subi	r30, 0x63	; 99
    2150:	fd 4f       	sbci	r31, 0xFD	; 253
    2152:	4d 91       	ld	r20, X+
    2154:	5c 91       	ld	r21, X
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	48 17       	cp	r20, r24
    215c:	59 07       	cpc	r21, r25
    215e:	19 f4       	brne	.+6      	; 0x2166 <canDrop+0x21c>
					dropPickup(arm0);
    2160:	ce 01       	movw	r24, r28
    2162:	9a de       	rcall	.-716    	; 0x1e98 <dropPickup>
    2164:	02 c0       	rjmp	.+4      	; 0x216a <canDrop+0x220>
				else dropPickup(arm1);
    2166:	c8 01       	movw	r24, r16
    2168:	97 de       	rcall	.-722    	; 0x1e98 <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    216a:	80 91 87 02 	lds	r24, 0x0287
    216e:	90 91 88 02 	lds	r25, 0x0288
    2172:	fc 01       	movw	r30, r24
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	e3 56       	subi	r30, 0x63	; 99
    217a:	fd 4f       	sbci	r31, 0xFD	; 253
    217c:	20 81       	ld	r18, Z
    217e:	31 81       	ldd	r19, Z+1	; 0x01
    2180:	fe 01       	movw	r30, r28
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ef 54       	subi	r30, 0x4F	; 79
    2188:	fd 4f       	sbci	r31, 0xFD	; 253
    218a:	40 81       	ld	r20, Z
    218c:	51 81       	ldd	r21, Z+1	; 0x01
    218e:	42 17       	cp	r20, r18
    2190:	53 07       	cpc	r21, r19
    2192:	11 f5       	brne	.+68     	; 0x21d8 <canDrop+0x28e>
    2194:	fc 01       	movw	r30, r24
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	e5 57       	subi	r30, 0x75	; 117
    21a0:	fd 4f       	sbci	r31, 0xFD	; 253
    21a2:	40 81       	ld	r20, Z
    21a4:	51 81       	ldd	r21, Z+1	; 0x01
    21a6:	4f 3f       	cpi	r20, 0xFF	; 255
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <canDrop+0x26c>
				nodeDrop(arm0, 0);
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	ce 01       	movw	r24, r28
    21b2:	02 de       	rcall	.-1020   	; 0x1db8 <nodeDrop>
    21b4:	3b c0       	rjmp	.+118    	; 0x222c <__stack+0x2d>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    21b6:	fc 01       	movw	r30, r24
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	ee 0f       	add	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	e5 57       	subi	r30, 0x75	; 117
    21c2:	fd 4f       	sbci	r31, 0xFD	; 253
    21c4:	42 81       	ldd	r20, Z+2	; 0x02
    21c6:	53 81       	ldd	r21, Z+3	; 0x03
    21c8:	4f 3f       	cpi	r20, 0xFF	; 255
    21ca:	5f 4f       	sbci	r21, 0xFF	; 255
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <canDrop+0x28e>
				nodeDrop(arm0, 1);
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	ce 01       	movw	r24, r28
    21d4:	f1 dd       	rcall	.-1054   	; 0x1db8 <nodeDrop>
    21d6:	2a c0       	rjmp	.+84     	; 0x222c <__stack+0x2d>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    21d8:	f8 01       	movw	r30, r16
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ef 54       	subi	r30, 0x4F	; 79
    21e0:	fd 4f       	sbci	r31, 0xFD	; 253
    21e2:	40 81       	ld	r20, Z
    21e4:	51 81       	ldd	r21, Z+1	; 0x01
    21e6:	24 17       	cp	r18, r20
    21e8:	35 07       	cpc	r19, r21
    21ea:	01 f5       	brne	.+64     	; 0x222c <__stack+0x2d>
    21ec:	fc 01       	movw	r30, r24
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	e5 57       	subi	r30, 0x75	; 117
    21f8:	fd 4f       	sbci	r31, 0xFD	; 253
    21fa:	20 81       	ld	r18, Z
    21fc:	31 81       	ldd	r19, Z+1	; 0x01
    21fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	29 f4       	brne	.+10     	; 0x220e <__stack+0xf>
				nodeDrop(arm1, 0);
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	c8 01       	movw	r24, r16
    220a:	d6 dd       	rcall	.-1108   	; 0x1db8 <nodeDrop>
    220c:	0f c0       	rjmp	.+30     	; 0x222c <__stack+0x2d>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    220e:	fc 01       	movw	r30, r24
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	e5 57       	subi	r30, 0x75	; 117
    221a:	fd 4f       	sbci	r31, 0xFD	; 253
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	21 f4       	brne	.+8      	; 0x222c <__stack+0x2d>
				nodeDrop(arm1, 1);
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	c8 01       	movw	r24, r16
    222a:	c6 dd       	rcall	.-1140   	; 0x1db8 <nodeDrop>

		}
	}
}
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <newSort>:

void newSort()
{
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    223e:	20 91 b1 02 	lds	r18, 0x02B1
    2242:	30 91 b2 02 	lds	r19, 0x02B2
    2246:	2f 3f       	cpi	r18, 0xFF	; 255
    2248:	1f ef       	ldi	r17, 0xFF	; 255
    224a:	31 07       	cpc	r19, r17
    224c:	41 f0       	breq	.+16     	; 0x225e <newSort+0x28>
		a1 = indicator[arm[0]];
    224e:	f9 01       	movw	r30, r18
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	eb 55       	subi	r30, 0x5B	; 91
    2256:	fd 4f       	sbci	r31, 0xFD	; 253
    2258:	c0 81       	ld	r28, Z
    225a:	d1 81       	ldd	r29, Z+1	; 0x01
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    225e:	ce ef       	ldi	r28, 0xFE	; 254
    2260:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    2262:	e0 91 b3 02 	lds	r30, 0x02B3
    2266:	f0 91 b4 02 	lds	r31, 0x02B4
    226a:	ef 3f       	cpi	r30, 0xFF	; 255
    226c:	4f ef       	ldi	r20, 0xFF	; 255
    226e:	f4 07       	cpc	r31, r20
    2270:	09 f4       	brne	.+2      	; 0x2274 <newSort+0x3e>
    2272:	7f c1       	rjmp	.+766    	; 0x2572 <newSort+0x33c>
		a2 = indicator[arm[1]];
    2274:	df 01       	movw	r26, r30
    2276:	aa 0f       	add	r26, r26
    2278:	bb 1f       	adc	r27, r27
    227a:	ab 55       	subi	r26, 0x5B	; 91
    227c:	bd 4f       	sbci	r27, 0xFD	; 253
    227e:	4d 91       	ld	r20, X+
    2280:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    2282:	80 91 87 02 	lds	r24, 0x0287
    2286:	90 91 88 02 	lds	r25, 0x0288
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	81 70       	andi	r24, 0x01	; 1
    228e:	90 78       	andi	r25, 0x80	; 128
    2290:	99 23       	and	r25, r25
    2292:	24 f4       	brge	.+8      	; 0x229c <newSort+0x66>
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	8e 6f       	ori	r24, 0xFE	; 254
    2298:	9f 6f       	ori	r25, 0xFF	; 255
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    229e:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    22a0:	d0 93 88 02 	sts	0x0288, r29
    22a4:	c0 93 87 02 	sts	0x0287, r28
		if(arm[0]==arm[1] && (visited[a1]==0 ||(term[a1][0] != -1 && term[a1][1] != -1)))
    22a8:	2e 17       	cp	r18, r30
    22aa:	3f 07       	cpc	r19, r31
    22ac:	61 f5       	brne	.+88     	; 0x2306 <newSort+0xd0>
    22ae:	de 01       	movw	r26, r28
    22b0:	aa 0f       	add	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	ac 59       	subi	r26, 0x9C	; 156
    22b6:	bd 4f       	sbci	r27, 0xFD	; 253
    22b8:	0d 90       	ld	r0, X+
    22ba:	bc 91       	ld	r27, X
    22bc:	a0 2d       	mov	r26, r0
    22be:	ab 2b       	or	r26, r27
    22c0:	c9 f0       	breq	.+50     	; 0x22f4 <newSort+0xbe>
    22c2:	de 01       	movw	r26, r28
    22c4:	aa 0f       	add	r26, r26
    22c6:	bb 1f       	adc	r27, r27
    22c8:	aa 0f       	add	r26, r26
    22ca:	bb 1f       	adc	r27, r27
    22cc:	a5 57       	subi	r26, 0x75	; 117
    22ce:	bd 4f       	sbci	r27, 0xFD	; 253
    22d0:	0d 90       	ld	r0, X+
    22d2:	bc 91       	ld	r27, X
    22d4:	a0 2d       	mov	r26, r0
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	b1 f0       	breq	.+44     	; 0x2306 <newSort+0xd0>
    22da:	de 01       	movw	r26, r28
    22dc:	aa 0f       	add	r26, r26
    22de:	bb 1f       	adc	r27, r27
    22e0:	aa 0f       	add	r26, r26
    22e2:	bb 1f       	adc	r27, r27
    22e4:	a5 57       	subi	r26, 0x75	; 117
    22e6:	bd 4f       	sbci	r27, 0xFD	; 253
    22e8:	12 96       	adiw	r26, 0x02	; 2
    22ea:	0d 90       	ld	r0, X+
    22ec:	bc 91       	ld	r27, X
    22ee:	a0 2d       	mov	r26, r0
    22f0:	11 96       	adiw	r26, 0x01	; 1
    22f2:	49 f0       	breq	.+18     	; 0x2306 <newSort+0xd0>
		{
			if(a1== 0 || a1==3)
    22f4:	20 97       	sbiw	r28, 0x00	; 0
    22f6:	19 f0       	breq	.+6      	; 0x22fe <newSort+0xc8>
    22f8:	23 97       	sbiw	r28, 0x03	; 3
    22fa:	09 f0       	breq	.+2      	; 0x22fe <newSort+0xc8>
    22fc:	28 c1       	rjmp	.+592    	; 0x254e <newSort+0x318>
				sortDrop(1,t1);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	8c dd       	rcall	.-1256   	; 0x1e1c <sortDrop>
    2304:	24 c1       	rjmp	.+584    	; 0x254e <newSort+0x318>
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    2306:	2f 3f       	cpi	r18, 0xFF	; 255
    2308:	af ef       	ldi	r26, 0xFF	; 255
    230a:	3a 07       	cpc	r19, r26
    230c:	c1 f1       	breq	.+112    	; 0x237e <newSort+0x148>
    230e:	de 01       	movw	r26, r28
    2310:	aa 0f       	add	r26, r26
    2312:	bb 1f       	adc	r27, r27
    2314:	aa 0f       	add	r26, r26
    2316:	bb 1f       	adc	r27, r27
    2318:	a5 57       	subi	r26, 0x75	; 117
    231a:	bd 4f       	sbci	r27, 0xFD	; 253
    231c:	0d 90       	ld	r0, X+
    231e:	bc 91       	ld	r27, X
    2320:	a0 2d       	mov	r26, r0
    2322:	11 96       	adiw	r26, 0x01	; 1
    2324:	51 f0       	breq	.+20     	; 0x233a <newSort+0x104>
    2326:	cc 0f       	add	r28, r28
    2328:	dd 1f       	adc	r29, r29
    232a:	cc 0f       	add	r28, r28
    232c:	dd 1f       	adc	r29, r29
    232e:	c5 57       	subi	r28, 0x75	; 117
    2330:	dd 4f       	sbci	r29, 0xFD	; 253
    2332:	aa 81       	ldd	r26, Y+2	; 0x02
    2334:	bb 81       	ldd	r27, Y+3	; 0x03
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	11 f5       	brne	.+68     	; 0x237e <newSort+0x148>
		{
			if (arm[1] == -1)
    233a:	31 96       	adiw	r30, 0x01	; 1
    233c:	09 f0       	breq	.+2      	; 0x2340 <newSort+0x10a>
    233e:	07 c1       	rjmp	.+526    	; 0x254e <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2340:	9b 01       	movw	r18, r22
    2342:	22 0f       	add	r18, r18
    2344:	33 1f       	adc	r19, r19
    2346:	f9 01       	movw	r30, r18
    2348:	ed 57       	subi	r30, 0x7D	; 125
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	40 81       	ld	r20, Z
    234e:	51 81       	ldd	r21, Z+1	; 0x01
    2350:	f9 01       	movw	r30, r18
    2352:	e3 56       	subi	r30, 0x63	; 99
    2354:	fd 4f       	sbci	r31, 0xFD	; 253
    2356:	20 81       	ld	r18, Z
    2358:	31 81       	ldd	r19, Z+1	; 0x01
    235a:	42 17       	cp	r20, r18
    235c:	53 07       	cpc	r21, r19
    235e:	59 f0       	breq	.+22     	; 0x2376 <newSort+0x140>
    2360:	fc 01       	movw	r30, r24
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	e3 56       	subi	r30, 0x63	; 99
    2368:	fd 4f       	sbci	r31, 0xFD	; 253
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	48 17       	cp	r20, r24
    2370:	59 07       	cpc	r21, r25
    2372:	09 f0       	breq	.+2      	; 0x2376 <newSort+0x140>
    2374:	ec c0       	rjmp	.+472    	; 0x254e <newSort+0x318>
					pickSort(1, t1);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	4f da       	rcall	.-2914   	; 0x181a <pickSort>
    237c:	e8 c0       	rjmp	.+464    	; 0x254e <newSort+0x318>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    237e:	ef 3f       	cpi	r30, 0xFF	; 255
    2380:	af ef       	ldi	r26, 0xFF	; 255
    2382:	fa 07       	cpc	r31, r26
    2384:	09 f4       	brne	.+2      	; 0x2388 <newSort+0x152>
    2386:	51 c0       	rjmp	.+162    	; 0x242a <newSort+0x1f4>
    2388:	da 01       	movw	r26, r20
    238a:	aa 0f       	add	r26, r26
    238c:	bb 1f       	adc	r27, r27
    238e:	aa 0f       	add	r26, r26
    2390:	bb 1f       	adc	r27, r27
    2392:	a5 57       	subi	r26, 0x75	; 117
    2394:	bd 4f       	sbci	r27, 0xFD	; 253
    2396:	0d 90       	ld	r0, X+
    2398:	bc 91       	ld	r27, X
    239a:	a0 2d       	mov	r26, r0
    239c:	11 96       	adiw	r26, 0x01	; 1
    239e:	09 f4       	brne	.+2      	; 0x23a2 <newSort+0x16c>
    23a0:	0a c1       	rjmp	.+532    	; 0x25b6 <newSort+0x380>
    23a2:	da 01       	movw	r26, r20
    23a4:	aa 0f       	add	r26, r26
    23a6:	bb 1f       	adc	r27, r27
    23a8:	aa 0f       	add	r26, r26
    23aa:	bb 1f       	adc	r27, r27
    23ac:	a5 57       	subi	r26, 0x75	; 117
    23ae:	bd 4f       	sbci	r27, 0xFD	; 253
    23b0:	12 96       	adiw	r26, 0x02	; 2
    23b2:	0d 90       	ld	r0, X+
    23b4:	bc 91       	ld	r27, X
    23b6:	a0 2d       	mov	r26, r0
    23b8:	11 96       	adiw	r26, 0x01	; 1
    23ba:	b9 f5       	brne	.+110    	; 0x242a <newSort+0x1f4>
    23bc:	ea c0       	rjmp	.+468    	; 0x2592 <newSort+0x35c>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    23be:	2f 3f       	cpi	r18, 0xFF	; 255
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <newSort+0x190>
    23c4:	c4 c0       	rjmp	.+392    	; 0x254e <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    23c6:	9b 01       	movw	r18, r22
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	f9 01       	movw	r30, r18
    23ce:	ed 57       	subi	r30, 0x7D	; 125
    23d0:	fd 4f       	sbci	r31, 0xFD	; 253
    23d2:	40 81       	ld	r20, Z
    23d4:	51 81       	ldd	r21, Z+1	; 0x01
    23d6:	f9 01       	movw	r30, r18
    23d8:	e3 56       	subi	r30, 0x63	; 99
    23da:	fd 4f       	sbci	r31, 0xFD	; 253
    23dc:	20 81       	ld	r18, Z
    23de:	31 81       	ldd	r19, Z+1	; 0x01
    23e0:	42 17       	cp	r20, r18
    23e2:	53 07       	cpc	r21, r19
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <newSort+0x1b2>
    23e6:	b3 c0       	rjmp	.+358    	; 0x254e <newSort+0x318>
    23e8:	fc 01       	movw	r30, r24
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	e3 56       	subi	r30, 0x63	; 99
    23f0:	fd 4f       	sbci	r31, 0xFD	; 253
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	48 17       	cp	r20, r24
    23f8:	59 07       	cpc	r21, r25
    23fa:	09 f0       	breq	.+2      	; 0x23fe <newSort+0x1c8>
    23fc:	a8 c0       	rjmp	.+336    	; 0x254e <newSort+0x318>
						pickSort(1, t1);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0b da       	rcall	.-3050   	; 0x181a <pickSort>
    2404:	a4 c0       	rjmp	.+328    	; 0x254e <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    2406:	fb 01       	movw	r30, r22
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ed 57       	subi	r30, 0x7D	; 125
    240e:	fd 4f       	sbci	r31, 0xFD	; 253
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	09 f0       	breq	.+2      	; 0x241a <newSort+0x1e4>
    2418:	9a c0       	rjmp	.+308    	; 0x254e <newSort+0x318>
    241a:	2f 3f       	cpi	r18, 0xFF	; 255
    241c:	3f 4f       	sbci	r19, 0xFF	; 255
    241e:	09 f4       	brne	.+2      	; 0x2422 <newSort+0x1ec>
    2420:	96 c0       	rjmp	.+300    	; 0x254e <newSort+0x318>
				sortDrop(1, t1);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	fa dc       	rcall	.-1548   	; 0x1e1c <sortDrop>
    2428:	92 c0       	rjmp	.+292    	; 0x254e <newSort+0x318>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    242a:	2f 3f       	cpi	r18, 0xFF	; 255
    242c:	1f ef       	ldi	r17, 0xFF	; 255
    242e:	31 07       	cpc	r19, r17
    2430:	a1 f0       	breq	.+40     	; 0x245a <newSort+0x224>
    2432:	db 01       	movw	r26, r22
    2434:	aa 0f       	add	r26, r26
    2436:	bb 1f       	adc	r27, r27
    2438:	ad 57       	subi	r26, 0x7D	; 125
    243a:	bd 4f       	sbci	r27, 0xFD	; 253
    243c:	8d 91       	ld	r24, X+
    243e:	9c 91       	ld	r25, X
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	31 f4       	brne	.+12     	; 0x2450 <newSort+0x21a>
    2444:	31 96       	adiw	r30, 0x01	; 1
    2446:	21 f0       	breq	.+8      	; 0x2450 <newSort+0x21a>
			sortDrop(1, t1);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	e7 dc       	rcall	.-1586   	; 0x1e1c <sortDrop>
    244e:	7f c0       	rjmp	.+254    	; 0x254e <newSort+0x318>
		else if (arm[0] != -1)
			ct = arm[0];
    2450:	30 93 88 02 	sts	0x0288, r19
    2454:	20 93 87 02 	sts	0x0287, r18
    2458:	7a c0       	rjmp	.+244    	; 0x254e <newSort+0x318>
		else ct = arm[1];
    245a:	f0 93 88 02 	sts	0x0288, r31
    245e:	e0 93 87 02 	sts	0x0287, r30
    2462:	75 c0       	rjmp	.+234    	; 0x254e <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    2464:	a8 01       	movw	r20, r16
    2466:	44 0f       	add	r20, r20
    2468:	55 1f       	adc	r21, r21
    246a:	fa 01       	movw	r30, r20
    246c:	ed 57       	subi	r30, 0x7D	; 125
    246e:	fd 4f       	sbci	r31, 0xFD	; 253
    2470:	20 81       	ld	r18, Z
    2472:	31 81       	ldd	r19, Z+1	; 0x01
    2474:	fa 01       	movw	r30, r20
    2476:	e3 56       	subi	r30, 0x63	; 99
    2478:	fd 4f       	sbci	r31, 0xFD	; 253
    247a:	40 81       	ld	r20, Z
    247c:	51 81       	ldd	r21, Z+1	; 0x01
    247e:	24 17       	cp	r18, r20
    2480:	35 07       	cpc	r19, r21
    2482:	51 f0       	breq	.+20     	; 0x2498 <newSort+0x262>
    2484:	fc 01       	movw	r30, r24
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	e3 56       	subi	r30, 0x63	; 99
    248c:	fd 4f       	sbci	r31, 0xFD	; 253
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	26 17       	cp	r18, r22
    2494:	37 07       	cpc	r19, r23
    2496:	81 f4       	brne	.+32     	; 0x24b8 <newSort+0x282>
    2498:	2f 3f       	cpi	r18, 0xFF	; 255
    249a:	af ef       	ldi	r26, 0xFF	; 255
    249c:	3a 07       	cpc	r19, r26
    249e:	31 f1       	breq	.+76     	; 0x24ec <newSort+0x2b6>
			ct = indicator[sort[t1]];
    24a0:	f9 01       	movw	r30, r18
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	eb 55       	subi	r30, 0x5B	; 91
    24a8:	fd 4f       	sbci	r31, 0xFD	; 253
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	90 93 88 02 	sts	0x0288, r25
    24b2:	80 93 87 02 	sts	0x0287, r24
    24b6:	4b c0       	rjmp	.+150    	; 0x254e <newSort+0x318>
		else if (sort[t1] != -1)
    24b8:	2f 3f       	cpi	r18, 0xFF	; 255
    24ba:	3f 4f       	sbci	r19, 0xFF	; 255
    24bc:	b9 f0       	breq	.+46     	; 0x24ec <newSort+0x2b6>
		{
			pickSort(0, t1);
    24be:	b8 01       	movw	r22, r16
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	aa d9       	rcall	.-3244   	; 0x181a <pickSort>
			ct = (t1 + 1) % 2 + 4;
    24c6:	0f 5f       	subi	r16, 0xFF	; 255
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	01 70       	andi	r16, 0x01	; 1
    24cc:	10 78       	andi	r17, 0x80	; 128
    24ce:	11 23       	and	r17, r17
    24d0:	34 f4       	brge	.+12     	; 0x24de <newSort+0x2a8>
    24d2:	01 50       	subi	r16, 0x01	; 1
    24d4:	11 09       	sbc	r17, r1
    24d6:	0e 6f       	ori	r16, 0xFE	; 254
    24d8:	1f 6f       	ori	r17, 0xFF	; 255
    24da:	0f 5f       	subi	r16, 0xFF	; 255
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	0c 5f       	subi	r16, 0xFC	; 252
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	10 93 88 02 	sts	0x0288, r17
    24e6:	00 93 87 02 	sts	0x0287, r16
    24ea:	31 c0       	rjmp	.+98     	; 0x254e <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    24ec:	f8 01       	movw	r30, r16
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	ec 59       	subi	r30, 0x9C	; 156
    24f4:	fd 4f       	sbci	r31, 0xFD	; 253
    24f6:	20 81       	ld	r18, Z
    24f8:	31 81       	ldd	r19, Z+1	; 0x01
    24fa:	21 30       	cpi	r18, 0x01	; 1
    24fc:	31 05       	cpc	r19, r1
    24fe:	19 f5       	brne	.+70     	; 0x2546 <newSort+0x310>
    2500:	f8 01       	movw	r30, r16
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	e5 57       	subi	r30, 0x75	; 117
    250c:	fd 4f       	sbci	r31, 0xFD	; 253
    250e:	20 81       	ld	r18, Z
    2510:	31 81       	ldd	r19, Z+1	; 0x01
    2512:	42 17       	cp	r20, r18
    2514:	53 07       	cpc	r21, r19
    2516:	19 f0       	breq	.+6      	; 0x251e <newSort+0x2e8>
    2518:	2f 3f       	cpi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	a1 f4       	brne	.+40     	; 0x2546 <newSort+0x310>
    251e:	f8 01       	movw	r30, r16
    2520:	ee 0f       	add	r30, r30
    2522:	ff 1f       	adc	r31, r31
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	e5 57       	subi	r30, 0x75	; 117
    252a:	fd 4f       	sbci	r31, 0xFD	; 253
    252c:	22 81       	ldd	r18, Z+2	; 0x02
    252e:	33 81       	ldd	r19, Z+3	; 0x03
    2530:	42 17       	cp	r20, r18
    2532:	53 07       	cpc	r21, r19
    2534:	19 f0       	breq	.+6      	; 0x253c <newSort+0x306>
    2536:	2f 3f       	cpi	r18, 0xFF	; 255
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	29 f4       	brne	.+10     	; 0x2546 <newSort+0x310>
			ct = t2;
    253c:	90 93 88 02 	sts	0x0288, r25
    2540:	80 93 87 02 	sts	0x0287, r24
    2544:	04 c0       	rjmp	.+8      	; 0x254e <newSort+0x318>
		else ct = t1;
    2546:	10 93 88 02 	sts	0x0288, r17
    254a:	00 93 87 02 	sts	0x0287, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    254e:	80 91 87 02 	lds	r24, 0x0287
    2552:	90 91 88 02 	lds	r25, 0x0288
    2556:	02 96       	adiw	r24, 0x02	; 2
    2558:	83 70       	andi	r24, 0x03	; 3
    255a:	90 78       	andi	r25, 0x80	; 128
    255c:	99 23       	and	r25, r25
    255e:	24 f4       	brge	.+8      	; 0x2568 <newSort+0x332>
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	8c 6f       	ori	r24, 0xFC	; 252
    2564:	9f 6f       	ori	r25, 0xFF	; 255
    2566:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2568:	90 93 ae 02 	sts	0x02AE, r25
    256c:	80 93 ad 02 	sts	0x02AD, r24
    2570:	2e c0       	rjmp	.+92     	; 0x25ce <newSort+0x398>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    2572:	80 91 87 02 	lds	r24, 0x0287
    2576:	90 91 88 02 	lds	r25, 0x0288
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	62 e0       	ldi	r22, 0x02	; 2
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	af d4       	rcall	.+2398   	; 0x2ee0 <__divmodhi4>
    2582:	8c 01       	movw	r16, r24
    2584:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2586:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    2588:	2f 3f       	cpi	r18, 0xFF	; 255
    258a:	af ef       	ldi	r26, 0xFF	; 255
    258c:	3a 07       	cpc	r19, r26
    258e:	c1 f4       	brne	.+48     	; 0x25c0 <newSort+0x38a>
    2590:	69 cf       	rjmp	.-302    	; 0x2464 <newSort+0x22e>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2592:	50 93 88 02 	sts	0x0288, r21
    2596:	40 93 87 02 	sts	0x0287, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    259a:	fa 01       	movw	r30, r20
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e5 57       	subi	r30, 0x75	; 117
    25a6:	fd 4f       	sbci	r31, 0xFD	; 253
    25a8:	42 81       	ldd	r20, Z+2	; 0x02
    25aa:	53 81       	ldd	r21, Z+3	; 0x03
    25ac:	4f 3f       	cpi	r20, 0xFF	; 255
    25ae:	5f 4f       	sbci	r21, 0xFF	; 255
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <newSort+0x37e>
    25b2:	29 cf       	rjmp	.-430    	; 0x2406 <newSort+0x1d0>
    25b4:	04 cf       	rjmp	.-504    	; 0x23be <newSort+0x188>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    25b6:	50 93 88 02 	sts	0x0288, r21
    25ba:	40 93 87 02 	sts	0x0287, r20
    25be:	ff ce       	rjmp	.-514    	; 0x23be <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    25c0:	d0 93 88 02 	sts	0x0288, r29
    25c4:	c0 93 87 02 	sts	0x0287, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    25c8:	4e ef       	ldi	r20, 0xFE	; 254
    25ca:	5f ef       	ldi	r21, 0xFF	; 255
    25cc:	9c ce       	rjmp	.-712    	; 0x2306 <newSort+0xd0>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	08 95       	ret

000025d8 <sortCheck>:
void sortCheck()
{
    25d8:	8f 92       	push	r8
    25da:	9f 92       	push	r9
    25dc:	af 92       	push	r10
    25de:	bf 92       	push	r11
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    25f0:	40 91 87 02 	lds	r20, 0x0287
    25f4:	50 91 88 02 	lds	r21, 0x0288
    25f8:	42 30       	cpi	r20, 0x02	; 2
    25fa:	51 05       	cpc	r21, r1
    25fc:	30 f4       	brcc	.+12     	; 0x260a <sortCheck+0x32>
    25fe:	80 91 4e 02 	lds	r24, 0x024E
    2602:	90 91 4f 02 	lds	r25, 0x024F
    2606:	02 97       	sbiw	r24, 0x02	; 2
    2608:	79 f0       	breq	.+30     	; 0x2628 <sortCheck+0x50>
    260a:	ca 01       	movw	r24, r20
    260c:	02 97       	sbiw	r24, 0x02	; 2
    260e:	02 97       	sbiw	r24, 0x02	; 2
    2610:	80 f4       	brcc	.+32     	; 0x2632 <sortCheck+0x5a>
    2612:	80 91 4e 02 	lds	r24, 0x024E
    2616:	90 91 4f 02 	lds	r25, 0x024F
    261a:	89 2b       	or	r24, r25
    261c:	79 f0       	breq	.+30     	; 0x263c <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    261e:	01 e0       	ldi	r16, 0x01	; 1
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	c0 e0       	ldi	r28, 0x00	; 0
    2624:	d0 e0       	ldi	r29, 0x00	; 0
    2626:	0e c0       	rjmp	.+28     	; 0x2644 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2628:	00 e0       	ldi	r16, 0x00	; 0
    262a:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    262c:	c1 e0       	ldi	r28, 0x01	; 1
    262e:	d0 e0       	ldi	r29, 0x00	; 0
    2630:	09 c0       	rjmp	.+18     	; 0x2644 <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2632:	01 e0       	ldi	r16, 0x01	; 1
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	c0 e0       	ldi	r28, 0x00	; 0
    2638:	d0 e0       	ldi	r29, 0x00	; 0
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    263c:	00 e0       	ldi	r16, 0x00	; 0
    263e:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2640:	c1 e0       	ldi	r28, 0x01	; 1
    2642:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    2644:	9a 01       	movw	r18, r20
    2646:	21 70       	andi	r18, 0x01	; 1
    2648:	30 78       	andi	r19, 0x80	; 128
    264a:	33 23       	and	r19, r19
    264c:	34 f4       	brge	.+12     	; 0x265a <sortCheck+0x82>
    264e:	21 50       	subi	r18, 0x01	; 1
    2650:	31 09       	sbc	r19, r1
    2652:	2e 6f       	ori	r18, 0xFE	; 254
    2654:	3f 6f       	ori	r19, 0xFF	; 255
    2656:	2f 5f       	subi	r18, 0xFF	; 255
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
    265a:	b2 2e       	mov	r11, r18
    265c:	a3 2e       	mov	r10, r19
    265e:	f9 01       	movw	r30, r18
    2660:	ee 0f       	add	r30, r30
    2662:	ff 1f       	adc	r31, r31
    2664:	ed 57       	subi	r30, 0x7D	; 125
    2666:	fd 4f       	sbci	r31, 0xFD	; 253
    2668:	20 81       	ld	r18, Z
    266a:	31 81       	ldd	r19, Z+1	; 0x01
    266c:	fa 01       	movw	r30, r20
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	e3 56       	subi	r30, 0x63	; 99
    2674:	fd 4f       	sbci	r31, 0xFD	; 253
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	28 17       	cp	r18, r24
    267c:	39 07       	cpc	r19, r25
    267e:	79 f0       	breq	.+30     	; 0x269e <sortCheck+0xc6>
    2680:	80 91 ad 02 	lds	r24, 0x02AD
    2684:	90 91 ae 02 	lds	r25, 0x02AE
    2688:	fc 01       	movw	r30, r24
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	e3 56       	subi	r30, 0x63	; 99
    2690:	fd 4f       	sbci	r31, 0xFD	; 253
    2692:	40 81       	ld	r20, Z
    2694:	51 81       	ldd	r21, Z+1	; 0x01
    2696:	24 17       	cp	r18, r20
    2698:	35 07       	cpc	r19, r21
    269a:	09 f0       	breq	.+2      	; 0x269e <sortCheck+0xc6>
    269c:	a6 c0       	rjmp	.+332    	; 0x27ea <sortCheck+0x212>
	{
		if (armCount>0)
    269e:	80 91 02 02 	lds	r24, 0x0202
    26a2:	90 91 03 02 	lds	r25, 0x0203
    26a6:	18 16       	cp	r1, r24
    26a8:	19 06       	cpc	r1, r25
    26aa:	0c f0       	brlt	.+2      	; 0x26ae <sortCheck+0xd6>
    26ac:	95 c0       	rjmp	.+298    	; 0x27d8 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    26ae:	f9 01       	movw	r30, r18
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	eb 55       	subi	r30, 0x5B	; 91
    26b6:	fd 4f       	sbci	r31, 0xFD	; 253
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	70 93 88 02 	sts	0x0288, r23
    26c0:	60 93 87 02 	sts	0x0287, r22
			if (arm[arm0] == -1)
    26c4:	fe 01       	movw	r30, r28
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	ef 54       	subi	r30, 0x4F	; 79
    26cc:	fd 4f       	sbci	r31, 0xFD	; 253
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	69 f4       	brne	.+26     	; 0x26f0 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    26d6:	61 70       	andi	r22, 0x01	; 1
    26d8:	70 78       	andi	r23, 0x80	; 128
    26da:	77 23       	and	r23, r23
    26dc:	34 f4       	brge	.+12     	; 0x26ea <sortCheck+0x112>
    26de:	61 50       	subi	r22, 0x01	; 1
    26e0:	71 09       	sbc	r23, r1
    26e2:	6e 6f       	ori	r22, 0xFE	; 254
    26e4:	7f 6f       	ori	r23, 0xFF	; 255
    26e6:	6f 5f       	subi	r22, 0xFF	; 255
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	ce 01       	movw	r24, r28
    26ec:	96 d8       	rcall	.-3796   	; 0x181a <pickSort>
    26ee:	15 c0       	rjmp	.+42     	; 0x271a <sortCheck+0x142>
			else if (arm[arm1] == -1)
    26f0:	f8 01       	movw	r30, r16
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	ef 54       	subi	r30, 0x4F	; 79
    26f8:	fd 4f       	sbci	r31, 0xFD	; 253
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	61 f4       	brne	.+24     	; 0x271a <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    2702:	61 70       	andi	r22, 0x01	; 1
    2704:	70 78       	andi	r23, 0x80	; 128
    2706:	77 23       	and	r23, r23
    2708:	34 f4       	brge	.+12     	; 0x2716 <sortCheck+0x13e>
    270a:	61 50       	subi	r22, 0x01	; 1
    270c:	71 09       	sbc	r23, r1
    270e:	6e 6f       	ori	r22, 0xFE	; 254
    2710:	7f 6f       	ori	r23, 0xFF	; 255
    2712:	6f 5f       	subi	r22, 0xFF	; 255
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	c8 01       	movw	r24, r16
    2718:	80 d8       	rcall	.-3840   	; 0x181a <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    271a:	80 91 02 02 	lds	r24, 0x0202
    271e:	90 91 03 02 	lds	r25, 0x0203
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	09 f4       	brne	.+2      	; 0x2728 <sortCheck+0x150>
    2726:	6d c1       	rjmp	.+730    	; 0x2a02 <sortCheck+0x42a>
    2728:	80 91 87 02 	lds	r24, 0x0287
    272c:	90 91 88 02 	lds	r25, 0x0288
    2730:	fc 01       	movw	r30, r24
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	e5 57       	subi	r30, 0x75	; 117
    273c:	fd 4f       	sbci	r31, 0xFD	; 253
    273e:	20 81       	ld	r18, Z
    2740:	31 81       	ldd	r19, Z+1	; 0x01
    2742:	2f 3f       	cpi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	09 f4       	brne	.+2      	; 0x274a <sortCheck+0x172>
    2748:	5c c1       	rjmp	.+696    	; 0x2a02 <sortCheck+0x42a>
    274a:	fc 01       	movw	r30, r24
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	e5 57       	subi	r30, 0x75	; 117
    2756:	fd 4f       	sbci	r31, 0xFD	; 253
    2758:	22 81       	ldd	r18, Z+2	; 0x02
    275a:	33 81       	ldd	r19, Z+3	; 0x03
    275c:	2f 3f       	cpi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	09 f4       	brne	.+2      	; 0x2764 <sortCheck+0x18c>
    2762:	4f c1       	rjmp	.+670    	; 0x2a02 <sortCheck+0x42a>
    2764:	9c 01       	movw	r18, r24
    2766:	21 70       	andi	r18, 0x01	; 1
    2768:	30 78       	andi	r19, 0x80	; 128
    276a:	33 23       	and	r19, r19
    276c:	34 f4       	brge	.+12     	; 0x277a <sortCheck+0x1a2>
    276e:	21 50       	subi	r18, 0x01	; 1
    2770:	31 09       	sbc	r19, r1
    2772:	2e 6f       	ori	r18, 0xFE	; 254
    2774:	3f 6f       	ori	r19, 0xFF	; 255
    2776:	2f 5f       	subi	r18, 0xFF	; 255
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	62 2f       	mov	r22, r18
    277c:	73 2f       	mov	r23, r19
    277e:	f9 01       	movw	r30, r18
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ed 57       	subi	r30, 0x7D	; 125
    2786:	fd 4f       	sbci	r31, 0xFD	; 253
    2788:	20 81       	ld	r18, Z
    278a:	31 81       	ldd	r19, Z+1	; 0x01
    278c:	2f 3f       	cpi	r18, 0xFF	; 255
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	09 f0       	breq	.+2      	; 0x2794 <sortCheck+0x1bc>
    2792:	37 c1       	rjmp	.+622    	; 0x2a02 <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    2794:	fc 01       	movw	r30, r24
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	e3 56       	subi	r30, 0x63	; 99
    279c:	fd 4f       	sbci	r31, 0xFD	; 253
    279e:	80 81       	ld	r24, Z
    27a0:	91 81       	ldd	r25, Z+1	; 0x01
    27a2:	fe 01       	movw	r30, r28
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ef 54       	subi	r30, 0x4F	; 79
    27aa:	fd 4f       	sbci	r31, 0xFD	; 253
    27ac:	20 81       	ld	r18, Z
    27ae:	31 81       	ldd	r19, Z+1	; 0x01
    27b0:	28 17       	cp	r18, r24
    27b2:	39 07       	cpc	r19, r25
    27b4:	19 f4       	brne	.+6      	; 0x27bc <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    27b6:	c8 01       	movw	r24, r16
    27b8:	31 db       	rcall	.-2462   	; 0x1e1c <sortDrop>
    27ba:	23 c1       	rjmp	.+582    	; 0x2a02 <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    27bc:	f8 01       	movw	r30, r16
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	ef 54       	subi	r30, 0x4F	; 79
    27c4:	fd 4f       	sbci	r31, 0xFD	; 253
    27c6:	20 81       	ld	r18, Z
    27c8:	31 81       	ldd	r19, Z+1	; 0x01
    27ca:	82 17       	cp	r24, r18
    27cc:	93 07       	cpc	r25, r19
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <sortCheck+0x1fa>
    27d0:	18 c1       	rjmp	.+560    	; 0x2a02 <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    27d2:	ce 01       	movw	r24, r28
    27d4:	23 db       	rcall	.-2490   	; 0x1e1c <sortDrop>
    27d6:	15 c1       	rjmp	.+554    	; 0x2a02 <sortCheck+0x42a>
			}
		}
		else ct = adj;
    27d8:	80 91 ad 02 	lds	r24, 0x02AD
    27dc:	90 91 ae 02 	lds	r25, 0x02AE
    27e0:	90 93 88 02 	sts	0x0288, r25
    27e4:	80 93 87 02 	sts	0x0287, r24
    27e8:	0c c1       	rjmp	.+536    	; 0x2a02 <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    27ea:	fe 01       	movw	r30, r28
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	ef 54       	subi	r30, 0x4F	; 79
    27f2:	fd 4f       	sbci	r31, 0xFD	; 253
    27f4:	01 90       	ld	r0, Z+
    27f6:	f0 81       	ld	r31, Z
    27f8:	e0 2d       	mov	r30, r0
    27fa:	4e 17       	cp	r20, r30
    27fc:	5f 07       	cpc	r21, r31
    27fe:	09 f4       	brne	.+2      	; 0x2802 <sortCheck+0x22a>
    2800:	8f c0       	rjmp	.+286    	; 0x2920 <sortCheck+0x348>
    2802:	d8 01       	movw	r26, r16
    2804:	aa 0f       	add	r26, r26
    2806:	bb 1f       	adc	r27, r27
    2808:	af 54       	subi	r26, 0x4F	; 79
    280a:	bd 4f       	sbci	r27, 0xFD	; 253
    280c:	8d 90       	ld	r8, X+
    280e:	9c 90       	ld	r9, X
    2810:	48 15       	cp	r20, r8
    2812:	59 05       	cpc	r21, r9
    2814:	09 f4       	brne	.+2      	; 0x2818 <sortCheck+0x240>
    2816:	84 c0       	rjmp	.+264    	; 0x2920 <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2818:	e0 90 02 02 	lds	r14, 0x0202
    281c:	f0 90 03 02 	lds	r15, 0x0203
    2820:	e1 14       	cp	r14, r1
    2822:	f1 04       	cpc	r15, r1
    2824:	09 f4       	brne	.+2      	; 0x2828 <sortCheck+0x250>
    2826:	4e c0       	rjmp	.+156    	; 0x28c4 <sortCheck+0x2ec>
    2828:	b1 e0       	ldi	r27, 0x01	; 1
    282a:	eb 16       	cp	r14, r27
    282c:	f1 04       	cpc	r15, r1
    282e:	29 f4       	brne	.+10     	; 0x283a <sortCheck+0x262>
    2830:	2f 3f       	cpi	r18, 0xFF	; 255
    2832:	6f ef       	ldi	r22, 0xFF	; 255
    2834:	36 07       	cpc	r19, r22
    2836:	b1 f5       	brne	.+108    	; 0x28a4 <sortCheck+0x2cc>
    2838:	09 c0       	rjmp	.+18     	; 0x284c <sortCheck+0x274>
    283a:	67 01       	movw	r12, r14
    283c:	71 e0       	ldi	r23, 0x01	; 1
    283e:	c7 1a       	sub	r12, r23
    2840:	d1 08       	sbc	r13, r1
    2842:	a2 e0       	ldi	r26, 0x02	; 2
    2844:	ca 16       	cp	r12, r26
    2846:	d1 04       	cpc	r13, r1
    2848:	08 f0       	brcs	.+2      	; 0x284c <sortCheck+0x274>
    284a:	65 c0       	rjmp	.+202    	; 0x2916 <sortCheck+0x33e>
    284c:	6c 01       	movw	r12, r24
    284e:	cc 0c       	add	r12, r12
    2850:	dd 1c       	adc	r13, r13
    2852:	cc 0c       	add	r12, r12
    2854:	dd 1c       	adc	r13, r13
    2856:	b6 01       	movw	r22, r12
    2858:	65 57       	subi	r22, 0x75	; 117
    285a:	7d 4f       	sbci	r23, 0xFD	; 253
    285c:	db 01       	movw	r26, r22
    285e:	cd 90       	ld	r12, X+
    2860:	dc 90       	ld	r13, X
    2862:	4c 15       	cp	r20, r12
    2864:	5d 05       	cpc	r21, r13
    2866:	21 f0       	breq	.+8      	; 0x2870 <sortCheck+0x298>
    2868:	cd 20       	and	r12, r13
    286a:	c0 94       	com	r12
    286c:	09 f0       	breq	.+2      	; 0x2870 <sortCheck+0x298>
    286e:	53 c0       	rjmp	.+166    	; 0x2916 <sortCheck+0x33e>
    2870:	6c 01       	movw	r12, r24
    2872:	cc 0c       	add	r12, r12
    2874:	dd 1c       	adc	r13, r13
    2876:	cc 0c       	add	r12, r12
    2878:	dd 1c       	adc	r13, r13
    287a:	b6 01       	movw	r22, r12
    287c:	65 57       	subi	r22, 0x75	; 117
    287e:	7d 4f       	sbci	r23, 0xFD	; 253
    2880:	db 01       	movw	r26, r22
    2882:	12 96       	adiw	r26, 0x02	; 2
    2884:	cd 90       	ld	r12, X+
    2886:	dc 90       	ld	r13, X
    2888:	13 97       	sbiw	r26, 0x03	; 3
    288a:	4c 15       	cp	r20, r12
    288c:	5d 05       	cpc	r21, r13
    288e:	21 f0       	breq	.+8      	; 0x2898 <sortCheck+0x2c0>
    2890:	cd 20       	and	r12, r13
    2892:	c0 94       	com	r12
    2894:	09 f0       	breq	.+2      	; 0x2898 <sortCheck+0x2c0>
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <sortCheck+0x33e>
		{
			if (armCount>0)
    2898:	1e 14       	cp	r1, r14
    289a:	1f 04       	cpc	r1, r15
    289c:	9c f4       	brge	.+38     	; 0x28c4 <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    289e:	2f 3f       	cpi	r18, 0xFF	; 255
    28a0:	3f 4f       	sbci	r19, 0xFF	; 255
    28a2:	81 f0       	breq	.+32     	; 0x28c4 <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    28a4:	31 96       	adiw	r30, 0x01	; 1
    28a6:	31 f4       	brne	.+12     	; 0x28b4 <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    28a8:	6b 2d       	mov	r22, r11
    28aa:	7a 2d       	mov	r23, r10
    28ac:	ce 01       	movw	r24, r28
    28ae:	0e 94 0d 0c 	call	0x181a	; 0x181a <pickSort>
    28b2:	08 c0       	rjmp	.+16     	; 0x28c4 <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    28b4:	89 20       	and	r8, r9
    28b6:	80 94       	com	r8
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    28ba:	6b 2d       	mov	r22, r11
    28bc:	7a 2d       	mov	r23, r10
    28be:	c8 01       	movw	r24, r16
    28c0:	0e 94 0d 0c 	call	0x181a	; 0x181a <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    28c4:	80 91 87 02 	lds	r24, 0x0287
    28c8:	90 91 88 02 	lds	r25, 0x0288
    28cc:	bc 01       	movw	r22, r24
    28ce:	6f 5f       	subi	r22, 0xFF	; 255
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	61 70       	andi	r22, 0x01	; 1
    28d4:	70 78       	andi	r23, 0x80	; 128
    28d6:	77 23       	and	r23, r23
    28d8:	34 f4       	brge	.+12     	; 0x28e6 <sortCheck+0x30e>
    28da:	61 50       	subi	r22, 0x01	; 1
    28dc:	71 09       	sbc	r23, r1
    28de:	6e 6f       	ori	r22, 0xFE	; 254
    28e0:	7f 6f       	ori	r23, 0xFF	; 255
    28e2:	6f 5f       	subi	r22, 0xFF	; 255
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	6c 5f       	subi	r22, 0xFC	; 252
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	81 70       	andi	r24, 0x01	; 1
    28ec:	90 78       	andi	r25, 0x80	; 128
    28ee:	99 23       	and	r25, r25
    28f0:	24 f4       	brge	.+8      	; 0x28fa <sortCheck+0x322>
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	8e 6f       	ori	r24, 0xFE	; 254
    28f6:	9f 6f       	ori	r25, 0xFF	; 255
    28f8:	01 96       	adiw	r24, 0x01	; 1
    28fa:	04 96       	adiw	r24, 0x04	; 4
    28fc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <traverseToSort>
			newSort();
    2900:	9a dc       	rcall	.-1740   	; 0x2236 <newSort>
			if (ct == 4 || ct == 5)
    2902:	80 91 87 02 	lds	r24, 0x0287
    2906:	90 91 88 02 	lds	r25, 0x0288
    290a:	04 97       	sbiw	r24, 0x04	; 4
    290c:	02 97       	sbiw	r24, 0x02	; 2
    290e:	08 f0       	brcs	.+2      	; 0x2912 <sortCheck+0x33a>
    2910:	89 c0       	rjmp	.+274    	; 0x2a24 <sortCheck+0x44c>
				newSort();
    2912:	91 dc       	rcall	.-1758   	; 0x2236 <newSort>
    2914:	87 c0       	rjmp	.+270    	; 0x2a24 <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    2916:	90 93 88 02 	sts	0x0288, r25
    291a:	80 93 87 02 	sts	0x0287, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    291e:	71 c0       	rjmp	.+226    	; 0x2a02 <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2920:	a0 91 02 02 	lds	r26, 0x0202
    2924:	b0 91 03 02 	lds	r27, 0x0203
    2928:	10 97       	sbiw	r26, 0x00	; 0
    292a:	c1 f5       	brne	.+112    	; 0x299c <sortCheck+0x3c4>
    292c:	dc 01       	movw	r26, r24
    292e:	aa 0f       	add	r26, r26
    2930:	bb 1f       	adc	r27, r27
    2932:	ac 59       	subi	r26, 0x9C	; 156
    2934:	bd 4f       	sbci	r27, 0xFD	; 253
    2936:	0d 90       	ld	r0, X+
    2938:	bc 91       	ld	r27, X
    293a:	a0 2d       	mov	r26, r0
    293c:	a1 30       	cpi	r26, 0x01	; 1
    293e:	b1 05       	cpc	r27, r1
    2940:	d9 f4       	brne	.+54     	; 0x2978 <sortCheck+0x3a0>
    2942:	dc 01       	movw	r26, r24
    2944:	aa 0f       	add	r26, r26
    2946:	bb 1f       	adc	r27, r27
    2948:	aa 0f       	add	r26, r26
    294a:	bb 1f       	adc	r27, r27
    294c:	a5 57       	subi	r26, 0x75	; 117
    294e:	bd 4f       	sbci	r27, 0xFD	; 253
    2950:	0d 90       	ld	r0, X+
    2952:	bc 91       	ld	r27, X
    2954:	a0 2d       	mov	r26, r0
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	09 f4       	brne	.+2      	; 0x295c <sortCheck+0x384>
    295a:	4b c0       	rjmp	.+150    	; 0x29f2 <sortCheck+0x41a>
    295c:	dc 01       	movw	r26, r24
    295e:	aa 0f       	add	r26, r26
    2960:	bb 1f       	adc	r27, r27
    2962:	aa 0f       	add	r26, r26
    2964:	bb 1f       	adc	r27, r27
    2966:	a5 57       	subi	r26, 0x75	; 117
    2968:	bd 4f       	sbci	r27, 0xFD	; 253
    296a:	12 96       	adiw	r26, 0x02	; 2
    296c:	8d 91       	ld	r24, X+
    296e:	9c 91       	ld	r25, X
    2970:	13 97       	sbiw	r26, 0x03	; 3
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	19 f4       	brne	.+6      	; 0x297c <sortCheck+0x3a4>
    2976:	3d c0       	rjmp	.+122    	; 0x29f2 <sortCheck+0x41a>
    2978:	ab 2b       	or	r26, r27
    297a:	d9 f5       	brne	.+118    	; 0x29f2 <sortCheck+0x41a>
    297c:	2f 3f       	cpi	r18, 0xFF	; 255
    297e:	3f 4f       	sbci	r19, 0xFF	; 255
    2980:	c1 f5       	brne	.+112    	; 0x29f2 <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    2982:	4e 17       	cp	r20, r30
    2984:	5f 07       	cpc	r21, r31
    2986:	29 f4       	brne	.+10     	; 0x2992 <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    2988:	6b 2d       	mov	r22, r11
    298a:	7a 2d       	mov	r23, r10
    298c:	c8 01       	movw	r24, r16
    298e:	46 da       	rcall	.-2932   	; 0x1e1c <sortDrop>
    2990:	30 c0       	rjmp	.+96     	; 0x29f2 <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    2992:	6b 2d       	mov	r22, r11
    2994:	7a 2d       	mov	r23, r10
    2996:	ce 01       	movw	r24, r28
    2998:	41 da       	rcall	.-2942   	; 0x1e1c <sortDrop>
    299a:	2b c0       	rjmp	.+86     	; 0x29f2 <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    299c:	11 97       	sbiw	r26, 0x01	; 1
    299e:	49 f5       	brne	.+82     	; 0x29f2 <sortCheck+0x41a>
    29a0:	dc 01       	movw	r26, r24
    29a2:	aa 0f       	add	r26, r26
    29a4:	bb 1f       	adc	r27, r27
    29a6:	aa 0f       	add	r26, r26
    29a8:	bb 1f       	adc	r27, r27
    29aa:	a5 57       	subi	r26, 0x75	; 117
    29ac:	bd 4f       	sbci	r27, 0xFD	; 253
    29ae:	4d 91       	ld	r20, X+
    29b0:	5c 91       	ld	r21, X
    29b2:	4f 3f       	cpi	r20, 0xFF	; 255
    29b4:	5f 4f       	sbci	r21, 0xFF	; 255
    29b6:	69 f0       	breq	.+26     	; 0x29d2 <sortCheck+0x3fa>
    29b8:	dc 01       	movw	r26, r24
    29ba:	aa 0f       	add	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	aa 0f       	add	r26, r26
    29c0:	bb 1f       	adc	r27, r27
    29c2:	a5 57       	subi	r26, 0x75	; 117
    29c4:	bd 4f       	sbci	r27, 0xFD	; 253
    29c6:	12 96       	adiw	r26, 0x02	; 2
    29c8:	8d 91       	ld	r24, X+
    29ca:	9c 91       	ld	r25, X
    29cc:	13 97       	sbiw	r26, 0x03	; 3
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	81 f4       	brne	.+32     	; 0x29f2 <sortCheck+0x41a>
    29d2:	2f 3f       	cpi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	69 f0       	breq	.+26     	; 0x29f2 <sortCheck+0x41a>
			if (arm[arm0] == -1)
    29d8:	31 96       	adiw	r30, 0x01	; 1
    29da:	31 f4       	brne	.+12     	; 0x29e8 <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    29dc:	6b 2d       	mov	r22, r11
    29de:	7a 2d       	mov	r23, r10
    29e0:	ce 01       	movw	r24, r28
    29e2:	0e 94 0d 0c 	call	0x181a	; 0x181a <pickSort>
    29e6:	05 c0       	rjmp	.+10     	; 0x29f2 <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    29e8:	6b 2d       	mov	r22, r11
    29ea:	7a 2d       	mov	r23, r10
    29ec:	c8 01       	movw	r24, r16
    29ee:	0e 94 0d 0c 	call	0x181a	; 0x181a <pickSort>
			ct = adj;
    29f2:	80 91 ad 02 	lds	r24, 0x02AD
    29f6:	90 91 ae 02 	lds	r25, 0x02AE
    29fa:	90 93 88 02 	sts	0x0288, r25
    29fe:	80 93 87 02 	sts	0x0287, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2a02:	80 91 87 02 	lds	r24, 0x0287
    2a06:	90 91 88 02 	lds	r25, 0x0288
    2a0a:	02 96       	adiw	r24, 0x02	; 2
    2a0c:	83 70       	andi	r24, 0x03	; 3
    2a0e:	90 78       	andi	r25, 0x80	; 128
    2a10:	99 23       	and	r25, r25
    2a12:	24 f4       	brge	.+8      	; 0x2a1c <sortCheck+0x444>
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	8c 6f       	ori	r24, 0xFC	; 252
    2a18:	9f 6f       	ori	r25, 0xFF	; 255
    2a1a:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2a1c:	90 93 ae 02 	sts	0x02AE, r25
    2a20:	80 93 ad 02 	sts	0x02AD, r24
}
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	df 90       	pop	r13
    2a32:	cf 90       	pop	r12
    2a34:	bf 90       	pop	r11
    2a36:	af 90       	pop	r10
    2a38:	9f 90       	pop	r9
    2a3a:	8f 90       	pop	r8
    2a3c:	08 95       	ret

00002a3e <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2a3e:	80 91 8b 02 	lds	r24, 0x028B
    2a42:	90 91 8c 02 	lds	r25, 0x028C
    2a46:	20 91 9d 02 	lds	r18, 0x029D
    2a4a:	30 91 9e 02 	lds	r19, 0x029E
    2a4e:	82 17       	cp	r24, r18
    2a50:	93 07       	cpc	r25, r19
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <predict+0x18>
    2a54:	5f c0       	rjmp	.+190    	; 0x2b14 <predict+0xd6>
    2a56:	20 91 8d 02 	lds	r18, 0x028D
    2a5a:	30 91 8e 02 	lds	r19, 0x028E
    2a5e:	82 17       	cp	r24, r18
    2a60:	93 07       	cpc	r25, r19
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <predict+0x28>
    2a64:	57 c0       	rjmp	.+174    	; 0x2b14 <predict+0xd6>
    2a66:	80 91 8f 02 	lds	r24, 0x028F
    2a6a:	90 91 90 02 	lds	r25, 0x0290
    2a6e:	20 91 9f 02 	lds	r18, 0x029F
    2a72:	30 91 a0 02 	lds	r19, 0x02A0
    2a76:	82 17       	cp	r24, r18
    2a78:	93 07       	cpc	r25, r19
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <predict+0x40>
    2a7c:	4b c0       	rjmp	.+150    	; 0x2b14 <predict+0xd6>
    2a7e:	20 91 91 02 	lds	r18, 0x0291
    2a82:	30 91 92 02 	lds	r19, 0x0292
    2a86:	82 17       	cp	r24, r18
    2a88:	93 07       	cpc	r25, r19
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <predict+0x50>
    2a8c:	43 c0       	rjmp	.+134    	; 0x2b14 <predict+0xd6>
    2a8e:	80 91 87 02 	lds	r24, 0x0287
    2a92:	90 91 88 02 	lds	r25, 0x0288
    2a96:	fc 01       	movw	r30, r24
    2a98:	ee 0f       	add	r30, r30
    2a9a:	ff 1f       	adc	r31, r31
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	e5 57       	subi	r30, 0x75	; 117
    2aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa4:	20 81       	ld	r18, Z
    2aa6:	31 81       	ldd	r19, Z+1	; 0x01
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	ee 0f       	add	r30, r30
    2aac:	ff 1f       	adc	r31, r31
    2aae:	e3 56       	subi	r30, 0x63	; 99
    2ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab2:	40 81       	ld	r20, Z
    2ab4:	51 81       	ldd	r21, Z+1	; 0x01
    2ab6:	24 17       	cp	r18, r20
    2ab8:	35 07       	cpc	r19, r21
    2aba:	61 f5       	brne	.+88     	; 0x2b14 <predict+0xd6>
    2abc:	fc 01       	movw	r30, r24
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	ee 0f       	add	r30, r30
    2ac4:	ff 1f       	adc	r31, r31
    2ac6:	e5 57       	subi	r30, 0x75	; 117
    2ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	28 17       	cp	r18, r24
    2ad0:	39 07       	cpc	r19, r25
    2ad2:	01 f5       	brne	.+64     	; 0x2b14 <predict+0xd6>
    2ad4:	80 91 83 02 	lds	r24, 0x0283
    2ad8:	90 91 84 02 	lds	r25, 0x0284
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	d1 f4       	brne	.+52     	; 0x2b14 <predict+0xd6>
    2ae0:	80 91 85 02 	lds	r24, 0x0285
    2ae4:	90 91 86 02 	lds	r25, 0x0286
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	a1 f4       	brne	.+40     	; 0x2b14 <predict+0xd6>
    2aec:	80 91 b1 02 	lds	r24, 0x02B1
    2af0:	90 91 b2 02 	lds	r25, 0x02B2
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	71 f4       	brne	.+28     	; 0x2b14 <predict+0xd6>
    2af8:	80 91 b3 02 	lds	r24, 0x02B3
    2afc:	90 91 b4 02 	lds	r25, 0x02B4
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	41 f4       	brne	.+16     	; 0x2b14 <predict+0xd6>
		sorted = total;
    2b04:	80 91 00 02 	lds	r24, 0x0200
    2b08:	90 91 01 02 	lds	r25, 0x0201
    2b0c:	90 93 57 02 	sts	0x0257, r25
    2b10:	80 93 56 02 	sts	0x0256, r24
    2b14:	08 95       	ret

00002b16 <main>:

}
int main()
{
	int i=0;
	init_devices();
    2b16:	0e 94 d6 04 	call	0x9ac	; 0x9ac <init_devices>
	lcd_set_4bit();
    2b1a:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2b1e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2b22:	0e 94 5d 03 	call	0x6ba	; 0x6ba <color_sensor_scaling>
	stop();
	lcd_print(2,11,scan(),1);
	stop();
	while(1);
	*/
	setIndicatorAndColor();
    2b26:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <setIndicatorAndColor>
	
	threshold=6000;
    2b2a:	80 e7       	ldi	r24, 0x70	; 112
    2b2c:	97 e1       	ldi	r25, 0x17	; 23
    2b2e:	90 93 6d 02 	sts	0x026D, r25
    2b32:	80 93 6c 02 	sts	0x026C, r24
	ct = 0; adj = 2;
    2b36:	10 92 88 02 	sts	0x0288, r1
    2b3a:	10 92 87 02 	sts	0x0287, r1
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	90 93 ae 02 	sts	0x02AE, r25
    2b46:	80 93 ad 02 	sts	0x02AD, r24
	//lcd("Begin");
	forwardJaa();
    2b4a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <forwardJaa>
	while (sorted<total)
    2b4e:	20 91 56 02 	lds	r18, 0x0256
    2b52:	30 91 57 02 	lds	r19, 0x0257
    2b56:	80 91 00 02 	lds	r24, 0x0200
    2b5a:	90 91 01 02 	lds	r25, 0x0201
    2b5e:	28 17       	cp	r18, r24
    2b60:	39 07       	cpc	r19, r25
    2b62:	a4 f5       	brge	.+104    	; 0x2bcc <main+0xb6>
	{
		canDrop();
    2b64:	f2 d9       	rcall	.-3100   	; 0x1f4a <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2b66:	80 91 52 02 	lds	r24, 0x0252
    2b6a:	90 91 53 02 	lds	r25, 0x0253
    2b6e:	03 97       	sbiw	r24, 0x03	; 3
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <main+0x5e>
			predict();
    2b72:	65 df       	rcall	.-310    	; 0x2a3e <predict>
		if (sorted == total)
    2b74:	20 91 56 02 	lds	r18, 0x0256
    2b78:	30 91 57 02 	lds	r19, 0x0257
    2b7c:	80 91 00 02 	lds	r24, 0x0200
    2b80:	90 91 01 02 	lds	r25, 0x0201
    2b84:	28 17       	cp	r18, r24
    2b86:	39 07       	cpc	r19, r25
    2b88:	09 f1       	breq	.+66     	; 0x2bcc <main+0xb6>
			break;
		pickup();
    2b8a:	0e 94 4f 0c 	call	0x189e	; 0x189e <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2b8e:	80 91 87 02 	lds	r24, 0x0287
    2b92:	90 91 88 02 	lds	r25, 0x0288
    2b96:	bc 01       	movw	r22, r24
    2b98:	61 70       	andi	r22, 0x01	; 1
    2b9a:	70 78       	andi	r23, 0x80	; 128
    2b9c:	77 23       	and	r23, r23
    2b9e:	34 f4       	brge	.+12     	; 0x2bac <main+0x96>
    2ba0:	61 50       	subi	r22, 0x01	; 1
    2ba2:	71 09       	sbc	r23, r1
    2ba4:	6e 6f       	ori	r22, 0xFE	; 254
    2ba6:	7f 6f       	ori	r23, 0xFF	; 255
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	6c 5f       	subi	r22, 0xFC	; 252
    2bae:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <traverseToSort>
		sortCheck();
    2bb4:	11 dd       	rcall	.-1502   	; 0x25d8 <sortCheck>
	
	threshold=6000;
	ct = 0; adj = 2;
	//lcd("Begin");
	forwardJaa();
	while (sorted<total)
    2bb6:	20 91 56 02 	lds	r18, 0x0256
    2bba:	30 91 57 02 	lds	r19, 0x0257
    2bbe:	80 91 00 02 	lds	r24, 0x0200
    2bc2:	90 91 01 02 	lds	r25, 0x0201
    2bc6:	28 17       	cp	r18, r24
    2bc8:	39 07       	cpc	r19, r25
    2bca:	64 f2       	brlt	.-104    	; 0x2b64 <main+0x4e>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	08 95       	ret

00002bd2 <__subsf3>:
    2bd2:	50 58       	subi	r21, 0x80	; 128

00002bd4 <__addsf3>:
    2bd4:	bb 27       	eor	r27, r27
    2bd6:	aa 27       	eor	r26, r26
    2bd8:	0e d0       	rcall	.+28     	; 0x2bf6 <__addsf3x>
    2bda:	48 c1       	rjmp	.+656    	; 0x2e6c <__fp_round>
    2bdc:	39 d1       	rcall	.+626    	; 0x2e50 <__fp_pscA>
    2bde:	30 f0       	brcs	.+12     	; 0x2bec <__addsf3+0x18>
    2be0:	3e d1       	rcall	.+636    	; 0x2e5e <__fp_pscB>
    2be2:	20 f0       	brcs	.+8      	; 0x2bec <__addsf3+0x18>
    2be4:	31 f4       	brne	.+12     	; 0x2bf2 <__addsf3+0x1e>
    2be6:	9f 3f       	cpi	r25, 0xFF	; 255
    2be8:	11 f4       	brne	.+4      	; 0x2bee <__addsf3+0x1a>
    2bea:	1e f4       	brtc	.+6      	; 0x2bf2 <__addsf3+0x1e>
    2bec:	2e c1       	rjmp	.+604    	; 0x2e4a <__fp_nan>
    2bee:	0e f4       	brtc	.+2      	; 0x2bf2 <__addsf3+0x1e>
    2bf0:	e0 95       	com	r30
    2bf2:	e7 fb       	bst	r30, 7
    2bf4:	24 c1       	rjmp	.+584    	; 0x2e3e <__fp_inf>

00002bf6 <__addsf3x>:
    2bf6:	e9 2f       	mov	r30, r25
    2bf8:	4a d1       	rcall	.+660    	; 0x2e8e <__fp_split3>
    2bfa:	80 f3       	brcs	.-32     	; 0x2bdc <__addsf3+0x8>
    2bfc:	ba 17       	cp	r27, r26
    2bfe:	62 07       	cpc	r22, r18
    2c00:	73 07       	cpc	r23, r19
    2c02:	84 07       	cpc	r24, r20
    2c04:	95 07       	cpc	r25, r21
    2c06:	18 f0       	brcs	.+6      	; 0x2c0e <__addsf3x+0x18>
    2c08:	71 f4       	brne	.+28     	; 0x2c26 <__addsf3x+0x30>
    2c0a:	9e f5       	brtc	.+102    	; 0x2c72 <__addsf3x+0x7c>
    2c0c:	62 c1       	rjmp	.+708    	; 0x2ed2 <__fp_zero>
    2c0e:	0e f4       	brtc	.+2      	; 0x2c12 <__addsf3x+0x1c>
    2c10:	e0 95       	com	r30
    2c12:	0b 2e       	mov	r0, r27
    2c14:	ba 2f       	mov	r27, r26
    2c16:	a0 2d       	mov	r26, r0
    2c18:	0b 01       	movw	r0, r22
    2c1a:	b9 01       	movw	r22, r18
    2c1c:	90 01       	movw	r18, r0
    2c1e:	0c 01       	movw	r0, r24
    2c20:	ca 01       	movw	r24, r20
    2c22:	a0 01       	movw	r20, r0
    2c24:	11 24       	eor	r1, r1
    2c26:	ff 27       	eor	r31, r31
    2c28:	59 1b       	sub	r21, r25
    2c2a:	99 f0       	breq	.+38     	; 0x2c52 <__addsf3x+0x5c>
    2c2c:	59 3f       	cpi	r21, 0xF9	; 249
    2c2e:	50 f4       	brcc	.+20     	; 0x2c44 <__addsf3x+0x4e>
    2c30:	50 3e       	cpi	r21, 0xE0	; 224
    2c32:	68 f1       	brcs	.+90     	; 0x2c8e <__addsf3x+0x98>
    2c34:	1a 16       	cp	r1, r26
    2c36:	f0 40       	sbci	r31, 0x00	; 0
    2c38:	a2 2f       	mov	r26, r18
    2c3a:	23 2f       	mov	r18, r19
    2c3c:	34 2f       	mov	r19, r20
    2c3e:	44 27       	eor	r20, r20
    2c40:	58 5f       	subi	r21, 0xF8	; 248
    2c42:	f3 cf       	rjmp	.-26     	; 0x2c2a <__addsf3x+0x34>
    2c44:	46 95       	lsr	r20
    2c46:	37 95       	ror	r19
    2c48:	27 95       	ror	r18
    2c4a:	a7 95       	ror	r26
    2c4c:	f0 40       	sbci	r31, 0x00	; 0
    2c4e:	53 95       	inc	r21
    2c50:	c9 f7       	brne	.-14     	; 0x2c44 <__addsf3x+0x4e>
    2c52:	7e f4       	brtc	.+30     	; 0x2c72 <__addsf3x+0x7c>
    2c54:	1f 16       	cp	r1, r31
    2c56:	ba 0b       	sbc	r27, r26
    2c58:	62 0b       	sbc	r22, r18
    2c5a:	73 0b       	sbc	r23, r19
    2c5c:	84 0b       	sbc	r24, r20
    2c5e:	ba f0       	brmi	.+46     	; 0x2c8e <__addsf3x+0x98>
    2c60:	91 50       	subi	r25, 0x01	; 1
    2c62:	a1 f0       	breq	.+40     	; 0x2c8c <__addsf3x+0x96>
    2c64:	ff 0f       	add	r31, r31
    2c66:	bb 1f       	adc	r27, r27
    2c68:	66 1f       	adc	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	c2 f7       	brpl	.-16     	; 0x2c60 <__addsf3x+0x6a>
    2c70:	0e c0       	rjmp	.+28     	; 0x2c8e <__addsf3x+0x98>
    2c72:	ba 0f       	add	r27, r26
    2c74:	62 1f       	adc	r22, r18
    2c76:	73 1f       	adc	r23, r19
    2c78:	84 1f       	adc	r24, r20
    2c7a:	48 f4       	brcc	.+18     	; 0x2c8e <__addsf3x+0x98>
    2c7c:	87 95       	ror	r24
    2c7e:	77 95       	ror	r23
    2c80:	67 95       	ror	r22
    2c82:	b7 95       	ror	r27
    2c84:	f7 95       	ror	r31
    2c86:	9e 3f       	cpi	r25, 0xFE	; 254
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <__addsf3x+0x96>
    2c8a:	b3 cf       	rjmp	.-154    	; 0x2bf2 <__addsf3+0x1e>
    2c8c:	93 95       	inc	r25
    2c8e:	88 0f       	add	r24, r24
    2c90:	08 f0       	brcs	.+2      	; 0x2c94 <__addsf3x+0x9e>
    2c92:	99 27       	eor	r25, r25
    2c94:	ee 0f       	add	r30, r30
    2c96:	97 95       	ror	r25
    2c98:	87 95       	ror	r24
    2c9a:	08 95       	ret

00002c9c <__divsf3>:
    2c9c:	0c d0       	rcall	.+24     	; 0x2cb6 <__divsf3x>
    2c9e:	e6 c0       	rjmp	.+460    	; 0x2e6c <__fp_round>
    2ca0:	de d0       	rcall	.+444    	; 0x2e5e <__fp_pscB>
    2ca2:	40 f0       	brcs	.+16     	; 0x2cb4 <__divsf3+0x18>
    2ca4:	d5 d0       	rcall	.+426    	; 0x2e50 <__fp_pscA>
    2ca6:	30 f0       	brcs	.+12     	; 0x2cb4 <__divsf3+0x18>
    2ca8:	21 f4       	brne	.+8      	; 0x2cb2 <__divsf3+0x16>
    2caa:	5f 3f       	cpi	r21, 0xFF	; 255
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <__divsf3+0x18>
    2cae:	c7 c0       	rjmp	.+398    	; 0x2e3e <__fp_inf>
    2cb0:	51 11       	cpse	r21, r1
    2cb2:	10 c1       	rjmp	.+544    	; 0x2ed4 <__fp_szero>
    2cb4:	ca c0       	rjmp	.+404    	; 0x2e4a <__fp_nan>

00002cb6 <__divsf3x>:
    2cb6:	eb d0       	rcall	.+470    	; 0x2e8e <__fp_split3>
    2cb8:	98 f3       	brcs	.-26     	; 0x2ca0 <__divsf3+0x4>

00002cba <__divsf3_pse>:
    2cba:	99 23       	and	r25, r25
    2cbc:	c9 f3       	breq	.-14     	; 0x2cb0 <__divsf3+0x14>
    2cbe:	55 23       	and	r21, r21
    2cc0:	b1 f3       	breq	.-20     	; 0x2cae <__divsf3+0x12>
    2cc2:	95 1b       	sub	r25, r21
    2cc4:	55 0b       	sbc	r21, r21
    2cc6:	bb 27       	eor	r27, r27
    2cc8:	aa 27       	eor	r26, r26
    2cca:	62 17       	cp	r22, r18
    2ccc:	73 07       	cpc	r23, r19
    2cce:	84 07       	cpc	r24, r20
    2cd0:	38 f0       	brcs	.+14     	; 0x2ce0 <__divsf3_pse+0x26>
    2cd2:	9f 5f       	subi	r25, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	22 0f       	add	r18, r18
    2cd8:	33 1f       	adc	r19, r19
    2cda:	44 1f       	adc	r20, r20
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	a9 f3       	breq	.-22     	; 0x2cca <__divsf3_pse+0x10>
    2ce0:	33 d0       	rcall	.+102    	; 0x2d48 <__divsf3_pse+0x8e>
    2ce2:	0e 2e       	mov	r0, r30
    2ce4:	3a f0       	brmi	.+14     	; 0x2cf4 <__divsf3_pse+0x3a>
    2ce6:	e0 e8       	ldi	r30, 0x80	; 128
    2ce8:	30 d0       	rcall	.+96     	; 0x2d4a <__divsf3_pse+0x90>
    2cea:	91 50       	subi	r25, 0x01	; 1
    2cec:	50 40       	sbci	r21, 0x00	; 0
    2cee:	e6 95       	lsr	r30
    2cf0:	00 1c       	adc	r0, r0
    2cf2:	ca f7       	brpl	.-14     	; 0x2ce6 <__divsf3_pse+0x2c>
    2cf4:	29 d0       	rcall	.+82     	; 0x2d48 <__divsf3_pse+0x8e>
    2cf6:	fe 2f       	mov	r31, r30
    2cf8:	27 d0       	rcall	.+78     	; 0x2d48 <__divsf3_pse+0x8e>
    2cfa:	66 0f       	add	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	88 1f       	adc	r24, r24
    2d00:	bb 1f       	adc	r27, r27
    2d02:	26 17       	cp	r18, r22
    2d04:	37 07       	cpc	r19, r23
    2d06:	48 07       	cpc	r20, r24
    2d08:	ab 07       	cpc	r26, r27
    2d0a:	b0 e8       	ldi	r27, 0x80	; 128
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <__divsf3_pse+0x56>
    2d0e:	bb 0b       	sbc	r27, r27
    2d10:	80 2d       	mov	r24, r0
    2d12:	bf 01       	movw	r22, r30
    2d14:	ff 27       	eor	r31, r31
    2d16:	93 58       	subi	r25, 0x83	; 131
    2d18:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1a:	2a f0       	brmi	.+10     	; 0x2d26 <__divsf3_pse+0x6c>
    2d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d1e:	51 05       	cpc	r21, r1
    2d20:	68 f0       	brcs	.+26     	; 0x2d3c <__divsf3_pse+0x82>
    2d22:	8d c0       	rjmp	.+282    	; 0x2e3e <__fp_inf>
    2d24:	d7 c0       	rjmp	.+430    	; 0x2ed4 <__fp_szero>
    2d26:	5f 3f       	cpi	r21, 0xFF	; 255
    2d28:	ec f3       	brlt	.-6      	; 0x2d24 <__divsf3_pse+0x6a>
    2d2a:	98 3e       	cpi	r25, 0xE8	; 232
    2d2c:	dc f3       	brlt	.-10     	; 0x2d24 <__divsf3_pse+0x6a>
    2d2e:	86 95       	lsr	r24
    2d30:	77 95       	ror	r23
    2d32:	67 95       	ror	r22
    2d34:	b7 95       	ror	r27
    2d36:	f7 95       	ror	r31
    2d38:	9f 5f       	subi	r25, 0xFF	; 255
    2d3a:	c9 f7       	brne	.-14     	; 0x2d2e <__divsf3_pse+0x74>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	91 1d       	adc	r25, r1
    2d40:	96 95       	lsr	r25
    2d42:	87 95       	ror	r24
    2d44:	97 f9       	bld	r25, 7
    2d46:	08 95       	ret
    2d48:	e1 e0       	ldi	r30, 0x01	; 1
    2d4a:	66 0f       	add	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	88 1f       	adc	r24, r24
    2d50:	bb 1f       	adc	r27, r27
    2d52:	62 17       	cp	r22, r18
    2d54:	73 07       	cpc	r23, r19
    2d56:	84 07       	cpc	r24, r20
    2d58:	ba 07       	cpc	r27, r26
    2d5a:	20 f0       	brcs	.+8      	; 0x2d64 <__divsf3_pse+0xaa>
    2d5c:	62 1b       	sub	r22, r18
    2d5e:	73 0b       	sbc	r23, r19
    2d60:	84 0b       	sbc	r24, r20
    2d62:	ba 0b       	sbc	r27, r26
    2d64:	ee 1f       	adc	r30, r30
    2d66:	88 f7       	brcc	.-30     	; 0x2d4a <__divsf3_pse+0x90>
    2d68:	e0 95       	com	r30
    2d6a:	08 95       	ret

00002d6c <__fixunssfsi>:
    2d6c:	98 d0       	rcall	.+304    	; 0x2e9e <__fp_splitA>
    2d6e:	88 f0       	brcs	.+34     	; 0x2d92 <__fixunssfsi+0x26>
    2d70:	9f 57       	subi	r25, 0x7F	; 127
    2d72:	90 f0       	brcs	.+36     	; 0x2d98 <__fixunssfsi+0x2c>
    2d74:	b9 2f       	mov	r27, r25
    2d76:	99 27       	eor	r25, r25
    2d78:	b7 51       	subi	r27, 0x17	; 23
    2d7a:	a0 f0       	brcs	.+40     	; 0x2da4 <__fixunssfsi+0x38>
    2d7c:	d1 f0       	breq	.+52     	; 0x2db2 <__fixunssfsi+0x46>
    2d7e:	66 0f       	add	r22, r22
    2d80:	77 1f       	adc	r23, r23
    2d82:	88 1f       	adc	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	1a f0       	brmi	.+6      	; 0x2d8e <__fixunssfsi+0x22>
    2d88:	ba 95       	dec	r27
    2d8a:	c9 f7       	brne	.-14     	; 0x2d7e <__fixunssfsi+0x12>
    2d8c:	12 c0       	rjmp	.+36     	; 0x2db2 <__fixunssfsi+0x46>
    2d8e:	b1 30       	cpi	r27, 0x01	; 1
    2d90:	81 f0       	breq	.+32     	; 0x2db2 <__fixunssfsi+0x46>
    2d92:	9f d0       	rcall	.+318    	; 0x2ed2 <__fp_zero>
    2d94:	b1 e0       	ldi	r27, 0x01	; 1
    2d96:	08 95       	ret
    2d98:	9c c0       	rjmp	.+312    	; 0x2ed2 <__fp_zero>
    2d9a:	67 2f       	mov	r22, r23
    2d9c:	78 2f       	mov	r23, r24
    2d9e:	88 27       	eor	r24, r24
    2da0:	b8 5f       	subi	r27, 0xF8	; 248
    2da2:	39 f0       	breq	.+14     	; 0x2db2 <__fixunssfsi+0x46>
    2da4:	b9 3f       	cpi	r27, 0xF9	; 249
    2da6:	cc f3       	brlt	.-14     	; 0x2d9a <__fixunssfsi+0x2e>
    2da8:	86 95       	lsr	r24
    2daa:	77 95       	ror	r23
    2dac:	67 95       	ror	r22
    2dae:	b3 95       	inc	r27
    2db0:	d9 f7       	brne	.-10     	; 0x2da8 <__fixunssfsi+0x3c>
    2db2:	3e f4       	brtc	.+14     	; 0x2dc2 <__fixunssfsi+0x56>
    2db4:	90 95       	com	r25
    2db6:	80 95       	com	r24
    2db8:	70 95       	com	r23
    2dba:	61 95       	neg	r22
    2dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc2:	08 95       	ret

00002dc4 <__floatunsisf>:
    2dc4:	e8 94       	clt
    2dc6:	09 c0       	rjmp	.+18     	; 0x2dda <__floatsisf+0x12>

00002dc8 <__floatsisf>:
    2dc8:	97 fb       	bst	r25, 7
    2dca:	3e f4       	brtc	.+14     	; 0x2dda <__floatsisf+0x12>
    2dcc:	90 95       	com	r25
    2dce:	80 95       	com	r24
    2dd0:	70 95       	com	r23
    2dd2:	61 95       	neg	r22
    2dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	99 23       	and	r25, r25
    2ddc:	a9 f0       	breq	.+42     	; 0x2e08 <__floatsisf+0x40>
    2dde:	f9 2f       	mov	r31, r25
    2de0:	96 e9       	ldi	r25, 0x96	; 150
    2de2:	bb 27       	eor	r27, r27
    2de4:	93 95       	inc	r25
    2de6:	f6 95       	lsr	r31
    2de8:	87 95       	ror	r24
    2dea:	77 95       	ror	r23
    2dec:	67 95       	ror	r22
    2dee:	b7 95       	ror	r27
    2df0:	f1 11       	cpse	r31, r1
    2df2:	f8 cf       	rjmp	.-16     	; 0x2de4 <__floatsisf+0x1c>
    2df4:	fa f4       	brpl	.+62     	; 0x2e34 <__floatsisf+0x6c>
    2df6:	bb 0f       	add	r27, r27
    2df8:	11 f4       	brne	.+4      	; 0x2dfe <__floatsisf+0x36>
    2dfa:	60 ff       	sbrs	r22, 0
    2dfc:	1b c0       	rjmp	.+54     	; 0x2e34 <__floatsisf+0x6c>
    2dfe:	6f 5f       	subi	r22, 0xFF	; 255
    2e00:	7f 4f       	sbci	r23, 0xFF	; 255
    2e02:	8f 4f       	sbci	r24, 0xFF	; 255
    2e04:	9f 4f       	sbci	r25, 0xFF	; 255
    2e06:	16 c0       	rjmp	.+44     	; 0x2e34 <__floatsisf+0x6c>
    2e08:	88 23       	and	r24, r24
    2e0a:	11 f0       	breq	.+4      	; 0x2e10 <__floatsisf+0x48>
    2e0c:	96 e9       	ldi	r25, 0x96	; 150
    2e0e:	11 c0       	rjmp	.+34     	; 0x2e32 <__floatsisf+0x6a>
    2e10:	77 23       	and	r23, r23
    2e12:	21 f0       	breq	.+8      	; 0x2e1c <__floatsisf+0x54>
    2e14:	9e e8       	ldi	r25, 0x8E	; 142
    2e16:	87 2f       	mov	r24, r23
    2e18:	76 2f       	mov	r23, r22
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <__floatsisf+0x5e>
    2e1c:	66 23       	and	r22, r22
    2e1e:	71 f0       	breq	.+28     	; 0x2e3c <__floatsisf+0x74>
    2e20:	96 e8       	ldi	r25, 0x86	; 134
    2e22:	86 2f       	mov	r24, r22
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	2a f0       	brmi	.+10     	; 0x2e34 <__floatsisf+0x6c>
    2e2a:	9a 95       	dec	r25
    2e2c:	66 0f       	add	r22, r22
    2e2e:	77 1f       	adc	r23, r23
    2e30:	88 1f       	adc	r24, r24
    2e32:	da f7       	brpl	.-10     	; 0x2e2a <__floatsisf+0x62>
    2e34:	88 0f       	add	r24, r24
    2e36:	96 95       	lsr	r25
    2e38:	87 95       	ror	r24
    2e3a:	97 f9       	bld	r25, 7
    2e3c:	08 95       	ret

00002e3e <__fp_inf>:
    2e3e:	97 f9       	bld	r25, 7
    2e40:	9f 67       	ori	r25, 0x7F	; 127
    2e42:	80 e8       	ldi	r24, 0x80	; 128
    2e44:	70 e0       	ldi	r23, 0x00	; 0
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	08 95       	ret

00002e4a <__fp_nan>:
    2e4a:	9f ef       	ldi	r25, 0xFF	; 255
    2e4c:	80 ec       	ldi	r24, 0xC0	; 192
    2e4e:	08 95       	ret

00002e50 <__fp_pscA>:
    2e50:	00 24       	eor	r0, r0
    2e52:	0a 94       	dec	r0
    2e54:	16 16       	cp	r1, r22
    2e56:	17 06       	cpc	r1, r23
    2e58:	18 06       	cpc	r1, r24
    2e5a:	09 06       	cpc	r0, r25
    2e5c:	08 95       	ret

00002e5e <__fp_pscB>:
    2e5e:	00 24       	eor	r0, r0
    2e60:	0a 94       	dec	r0
    2e62:	12 16       	cp	r1, r18
    2e64:	13 06       	cpc	r1, r19
    2e66:	14 06       	cpc	r1, r20
    2e68:	05 06       	cpc	r0, r21
    2e6a:	08 95       	ret

00002e6c <__fp_round>:
    2e6c:	09 2e       	mov	r0, r25
    2e6e:	03 94       	inc	r0
    2e70:	00 0c       	add	r0, r0
    2e72:	11 f4       	brne	.+4      	; 0x2e78 <__fp_round+0xc>
    2e74:	88 23       	and	r24, r24
    2e76:	52 f0       	brmi	.+20     	; 0x2e8c <__fp_round+0x20>
    2e78:	bb 0f       	add	r27, r27
    2e7a:	40 f4       	brcc	.+16     	; 0x2e8c <__fp_round+0x20>
    2e7c:	bf 2b       	or	r27, r31
    2e7e:	11 f4       	brne	.+4      	; 0x2e84 <__fp_round+0x18>
    2e80:	60 ff       	sbrs	r22, 0
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <__fp_round+0x20>
    2e84:	6f 5f       	subi	r22, 0xFF	; 255
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	08 95       	ret

00002e8e <__fp_split3>:
    2e8e:	57 fd       	sbrc	r21, 7
    2e90:	90 58       	subi	r25, 0x80	; 128
    2e92:	44 0f       	add	r20, r20
    2e94:	55 1f       	adc	r21, r21
    2e96:	59 f0       	breq	.+22     	; 0x2eae <__fp_splitA+0x10>
    2e98:	5f 3f       	cpi	r21, 0xFF	; 255
    2e9a:	71 f0       	breq	.+28     	; 0x2eb8 <__fp_splitA+0x1a>
    2e9c:	47 95       	ror	r20

00002e9e <__fp_splitA>:
    2e9e:	88 0f       	add	r24, r24
    2ea0:	97 fb       	bst	r25, 7
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	61 f0       	breq	.+24     	; 0x2ebe <__fp_splitA+0x20>
    2ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ea8:	79 f0       	breq	.+30     	; 0x2ec8 <__fp_splitA+0x2a>
    2eaa:	87 95       	ror	r24
    2eac:	08 95       	ret
    2eae:	12 16       	cp	r1, r18
    2eb0:	13 06       	cpc	r1, r19
    2eb2:	14 06       	cpc	r1, r20
    2eb4:	55 1f       	adc	r21, r21
    2eb6:	f2 cf       	rjmp	.-28     	; 0x2e9c <__fp_split3+0xe>
    2eb8:	46 95       	lsr	r20
    2eba:	f1 df       	rcall	.-30     	; 0x2e9e <__fp_splitA>
    2ebc:	08 c0       	rjmp	.+16     	; 0x2ece <__fp_splitA+0x30>
    2ebe:	16 16       	cp	r1, r22
    2ec0:	17 06       	cpc	r1, r23
    2ec2:	18 06       	cpc	r1, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	f1 cf       	rjmp	.-30     	; 0x2eaa <__fp_splitA+0xc>
    2ec8:	86 95       	lsr	r24
    2eca:	71 05       	cpc	r23, r1
    2ecc:	61 05       	cpc	r22, r1
    2ece:	08 94       	sec
    2ed0:	08 95       	ret

00002ed2 <__fp_zero>:
    2ed2:	e8 94       	clt

00002ed4 <__fp_szero>:
    2ed4:	bb 27       	eor	r27, r27
    2ed6:	66 27       	eor	r22, r22
    2ed8:	77 27       	eor	r23, r23
    2eda:	cb 01       	movw	r24, r22
    2edc:	97 f9       	bld	r25, 7
    2ede:	08 95       	ret

00002ee0 <__divmodhi4>:
    2ee0:	97 fb       	bst	r25, 7
    2ee2:	07 2e       	mov	r0, r23
    2ee4:	16 f4       	brtc	.+4      	; 0x2eea <__divmodhi4+0xa>
    2ee6:	00 94       	com	r0
    2ee8:	06 d0       	rcall	.+12     	; 0x2ef6 <__divmodhi4_neg1>
    2eea:	77 fd       	sbrc	r23, 7
    2eec:	08 d0       	rcall	.+16     	; 0x2efe <__divmodhi4_neg2>
    2eee:	1a d0       	rcall	.+52     	; 0x2f24 <__udivmodhi4>
    2ef0:	07 fc       	sbrc	r0, 7
    2ef2:	05 d0       	rcall	.+10     	; 0x2efe <__divmodhi4_neg2>
    2ef4:	3e f4       	brtc	.+14     	; 0x2f04 <__divmodhi4_exit>

00002ef6 <__divmodhi4_neg1>:
    2ef6:	90 95       	com	r25
    2ef8:	81 95       	neg	r24
    2efa:	9f 4f       	sbci	r25, 0xFF	; 255
    2efc:	08 95       	ret

00002efe <__divmodhi4_neg2>:
    2efe:	70 95       	com	r23
    2f00:	61 95       	neg	r22
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255

00002f04 <__divmodhi4_exit>:
    2f04:	08 95       	ret

00002f06 <__umulhisi3>:
    2f06:	a2 9f       	mul	r26, r18
    2f08:	b0 01       	movw	r22, r0
    2f0a:	b3 9f       	mul	r27, r19
    2f0c:	c0 01       	movw	r24, r0
    2f0e:	a3 9f       	mul	r26, r19
    2f10:	70 0d       	add	r23, r0
    2f12:	81 1d       	adc	r24, r1
    2f14:	11 24       	eor	r1, r1
    2f16:	91 1d       	adc	r25, r1
    2f18:	b2 9f       	mul	r27, r18
    2f1a:	70 0d       	add	r23, r0
    2f1c:	81 1d       	adc	r24, r1
    2f1e:	11 24       	eor	r1, r1
    2f20:	91 1d       	adc	r25, r1
    2f22:	08 95       	ret

00002f24 <__udivmodhi4>:
    2f24:	aa 1b       	sub	r26, r26
    2f26:	bb 1b       	sub	r27, r27
    2f28:	51 e1       	ldi	r21, 0x11	; 17
    2f2a:	07 c0       	rjmp	.+14     	; 0x2f3a <__udivmodhi4_ep>

00002f2c <__udivmodhi4_loop>:
    2f2c:	aa 1f       	adc	r26, r26
    2f2e:	bb 1f       	adc	r27, r27
    2f30:	a6 17       	cp	r26, r22
    2f32:	b7 07       	cpc	r27, r23
    2f34:	10 f0       	brcs	.+4      	; 0x2f3a <__udivmodhi4_ep>
    2f36:	a6 1b       	sub	r26, r22
    2f38:	b7 0b       	sbc	r27, r23

00002f3a <__udivmodhi4_ep>:
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	5a 95       	dec	r21
    2f40:	a9 f7       	brne	.-22     	; 0x2f2c <__udivmodhi4_loop>
    2f42:	80 95       	com	r24
    2f44:	90 95       	com	r25
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	08 95       	ret

00002f4c <_exit>:
    2f4c:	f8 94       	cli

00002f4e <__stop_program>:
    2f4e:	ff cf       	rjmp	.-2      	; 0x2f4e <__stop_program>
