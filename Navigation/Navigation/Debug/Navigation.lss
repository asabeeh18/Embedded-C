
Navigation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800200  0000288a  0000291e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000288a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  0080026c  0080026c  0000298a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  000029ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000308d  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004dd  00000000  00000000  00005d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023a7  00000000  00000000  00006274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008fc  00000000  00000000  0000861c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f8  00000000  00000000  00008f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ed7  00000000  00000000  00009710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  0000b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c c2       	rjmp	.+1048   	; 0x41e <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e8       	ldi	r30, 0x8A	; 138
      fc:	f8 e2       	ldi	r31, 0x28	; 40
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 36       	cpi	r26, 0x6C	; 108
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ac e6       	ldi	r26, 0x6C	; 108
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 3d       	cpi	r26, 0xD1	; 209
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 26 12 	call	0x244c	; 0x244c <main>
     122:	0c 94 43 14 	jmp	0x2886	; 0x2886 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_string>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	ec 01       	movw	r28, r24
     26e:	88 81       	ld	r24, Y
     270:	88 23       	and	r24, r24
     272:	29 f0       	breq	.+10     	; 0x27e <lcd_string+0x16>
     274:	21 96       	adiw	r28, 0x01	; 1
     276:	d3 df       	rcall	.-90     	; 0x21e <lcd_wr_char>
     278:	89 91       	ld	r24, Y+
     27a:	81 11       	cpse	r24, r1
     27c:	fc cf       	rjmp	.-8      	; 0x276 <lcd_string+0xe>
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <lcd_cursor>:
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	69 f0       	breq	.+26     	; 0x2a2 <lcd_cursor+0x1e>
     288:	18 f4       	brcc	.+6      	; 0x290 <lcd_cursor+0xc>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	31 f0       	breq	.+12     	; 0x29a <lcd_cursor+0x16>
     28e:	08 95       	ret
     290:	83 30       	cpi	r24, 0x03	; 3
     292:	59 f0       	breq	.+22     	; 0x2aa <lcd_cursor+0x26>
     294:	84 30       	cpi	r24, 0x04	; 4
     296:	69 f0       	breq	.+26     	; 0x2b2 <lcd_cursor+0x2e>
     298:	08 95       	ret
     29a:	8f e7       	ldi	r24, 0x7F	; 127
     29c:	86 0f       	add	r24, r22
     29e:	89 cf       	rjmp	.-238    	; 0x1b2 <lcd_wr_command>
     2a0:	08 95       	ret
     2a2:	8f eb       	ldi	r24, 0xBF	; 191
     2a4:	86 0f       	add	r24, r22
     2a6:	85 cf       	rjmp	.-246    	; 0x1b2 <lcd_wr_command>
     2a8:	08 95       	ret
     2aa:	83 e9       	ldi	r24, 0x93	; 147
     2ac:	86 0f       	add	r24, r22
     2ae:	81 cf       	rjmp	.-254    	; 0x1b2 <lcd_wr_command>
     2b0:	08 95       	ret
     2b2:	83 ed       	ldi	r24, 0xD3	; 211
     2b4:	86 0f       	add	r24, r22
     2b6:	7d cf       	rjmp	.-262    	; 0x1b2 <lcd_wr_command>
     2b8:	08 95       	ret

000002ba <timer5_init>:
     2ba:	e1 e2       	ldi	r30, 0x21	; 33
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	10 82       	st	Z, r1
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	80 93 25 01 	sts	0x0125, r24
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	90 93 24 01 	sts	0x0124, r25
     2cc:	10 92 29 01 	sts	0x0129, r1
     2d0:	80 93 28 01 	sts	0x0128, r24
     2d4:	10 92 2b 01 	sts	0x012B, r1
     2d8:	80 93 2a 01 	sts	0x012A, r24
     2dc:	10 92 2d 01 	sts	0x012D, r1
     2e0:	80 93 2c 01 	sts	0x012C, r24
     2e4:	89 ea       	ldi	r24, 0xA9	; 169
     2e6:	80 93 20 01 	sts	0x0120, r24
     2ea:	8b e0       	ldi	r24, 0x0B	; 11
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <motion_pin_config>:
     2f0:	81 b1       	in	r24, 0x01	; 1
     2f2:	8f 60       	ori	r24, 0x0F	; 15
     2f4:	81 b9       	out	0x01, r24	; 1
     2f6:	82 b1       	in	r24, 0x02	; 2
     2f8:	80 7f       	andi	r24, 0xF0	; 240
     2fa:	82 b9       	out	0x02, r24	; 2
     2fc:	ea e0       	ldi	r30, 0x0A	; 10
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	80 81       	ld	r24, Z
     302:	88 61       	ori	r24, 0x18	; 24
     304:	80 83       	st	Z, r24
     306:	eb e0       	ldi	r30, 0x0B	; 11
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	80 81       	ld	r24, Z
     30c:	88 61       	ori	r24, 0x18	; 24
     30e:	80 83       	st	Z, r24
     310:	08 95       	ret

00000312 <motion_set>:
     312:	92 b1       	in	r25, 0x02	; 2
     314:	90 7f       	andi	r25, 0xF0	; 240
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	98 2b       	or	r25, r24
     31a:	92 b9       	out	0x02, r25	; 2
     31c:	08 95       	ret

0000031e <forward>:
     31e:	86 e0       	ldi	r24, 0x06	; 6
     320:	f8 cf       	rjmp	.-16     	; 0x312 <motion_set>
     322:	08 95       	ret

00000324 <left>:
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	f5 cf       	rjmp	.-22     	; 0x312 <motion_set>
     328:	08 95       	ret

0000032a <right>:
     32a:	8a e0       	ldi	r24, 0x0A	; 10
     32c:	f2 cf       	rjmp	.-28     	; 0x312 <motion_set>
     32e:	08 95       	ret

00000330 <stop>:
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	ef cf       	rjmp	.-34     	; 0x312 <motion_set>
     334:	08 95       	ret

00000336 <lcd_port_config>:
     336:	87 b1       	in	r24, 0x07	; 7
     338:	87 6f       	ori	r24, 0xF7	; 247
     33a:	87 b9       	out	0x07, r24	; 7
     33c:	88 b1       	in	r24, 0x08	; 8
     33e:	80 78       	andi	r24, 0x80	; 128
     340:	88 b9       	out	0x08, r24	; 8
     342:	08 95       	ret

00000344 <color_sensor_pin_config>:
     344:	8a b1       	in	r24, 0x0a	; 10
     346:	8e 6f       	ori	r24, 0xFE	; 254
     348:	8a b9       	out	0x0a, r24	; 10
     34a:	58 9a       	sbi	0x0b, 0	; 11
     34c:	08 95       	ret

0000034e <adc_pin_config>:
     34e:	10 ba       	out	0x10, r1	; 16
     350:	11 ba       	out	0x11, r1	; 17
     352:	10 92 07 01 	sts	0x0107, r1
     356:	10 92 08 01 	sts	0x0108, r1
     35a:	08 95       	ret

0000035c <servo1_pin_config>:
     35c:	25 9a       	sbi	0x04, 5	; 4
     35e:	2d 9a       	sbi	0x05, 5	; 5
     360:	08 95       	ret

00000362 <servo2_pin_config>:
     362:	26 9a       	sbi	0x04, 6	; 4
     364:	2e 9a       	sbi	0x05, 6	; 5
     366:	08 95       	ret

00000368 <servo3_pin_config>:
     368:	27 9a       	sbi	0x04, 7	; 4
     36a:	2f 9a       	sbi	0x05, 7	; 5
     36c:	08 95       	ret

0000036e <timer1_init>:
     36e:	e1 e8       	ldi	r30, 0x81	; 129
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	10 82       	st	Z, r1
     374:	8c ef       	ldi	r24, 0xFC	; 252
     376:	80 93 85 00 	sts	0x0085, r24
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 84 00 	sts	0x0084, r24
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	90 93 89 00 	sts	0x0089, r25
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	80 93 88 00 	sts	0x0088, r24
     38c:	90 93 8b 00 	sts	0x008B, r25
     390:	80 93 8a 00 	sts	0x008A, r24
     394:	90 93 8d 00 	sts	0x008D, r25
     398:	80 93 8c 00 	sts	0x008C, r24
     39c:	90 93 87 00 	sts	0x0087, r25
     3a0:	80 93 86 00 	sts	0x0086, r24
     3a4:	8b ea       	ldi	r24, 0xAB	; 171
     3a6:	80 93 80 00 	sts	0x0080, r24
     3aa:	10 92 82 00 	sts	0x0082, r1
     3ae:	8c e0       	ldi	r24, 0x0C	; 12
     3b0:	80 83       	st	Z, r24
     3b2:	08 95       	ret

000003b4 <port_init>:
     3b4:	c0 df       	rcall	.-128    	; 0x336 <lcd_port_config>
     3b6:	cb df       	rcall	.-106    	; 0x34e <adc_pin_config>
     3b8:	3b 9a       	sbi	0x07, 3	; 7
     3ba:	43 98       	cbi	0x08, 3	; 8
     3bc:	cf df       	rcall	.-98     	; 0x35c <servo1_pin_config>
     3be:	d1 df       	rcall	.-94     	; 0x362 <servo2_pin_config>
     3c0:	d3 df       	rcall	.-90     	; 0x368 <servo3_pin_config>
     3c2:	c0 cf       	rjmp	.-128    	; 0x344 <color_sensor_pin_config>
     3c4:	08 95       	ret

000003c6 <buzzer_on>:
     3c6:	86 b1       	in	r24, 0x06	; 6
     3c8:	88 60       	ori	r24, 0x08	; 8
     3ca:	88 b9       	out	0x08, r24	; 8
     3cc:	08 95       	ret

000003ce <buzzer_off>:
     3ce:	86 b1       	in	r24, 0x06	; 6
     3d0:	87 7f       	andi	r24, 0xF7	; 247
     3d2:	88 b9       	out	0x08, r24	; 8
     3d4:	08 95       	ret

000003d6 <ADC_Conversion>:
     3d6:	88 30       	cpi	r24, 0x08	; 8
     3d8:	18 f0       	brcs	.+6      	; 0x3e0 <ADC_Conversion+0xa>
     3da:	98 e0       	ldi	r25, 0x08	; 8
     3dc:	90 93 7b 00 	sts	0x007B, r25
     3e0:	87 70       	andi	r24, 0x07	; 7
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	80 93 7c 00 	sts	0x007C, r24
     3e8:	ea e7       	ldi	r30, 0x7A	; 122
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	80 64       	ori	r24, 0x40	; 64
     3f0:	80 83       	st	Z, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	84 ff       	sbrs	r24, 4
     3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <ADC_Conversion+0x1c>
     3f8:	80 91 79 00 	lds	r24, 0x0079
     3fc:	ea e7       	ldi	r30, 0x7A	; 122
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	90 81       	ld	r25, Z
     402:	90 61       	ori	r25, 0x10	; 16
     404:	90 83       	st	Z, r25
     406:	10 92 7b 00 	sts	0x007B, r1
     40a:	08 95       	ret

0000040c <color_sensor_pin_interrupt_init>:
     40c:	f8 94       	cli
     40e:	e9 e6       	ldi	r30, 0x69	; 105
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	82 60       	ori	r24, 0x02	; 2
     416:	80 83       	st	Z, r24
     418:	e8 9a       	sbi	0x1d, 0	; 29
     41a:	78 94       	sei
     41c:	08 95       	ret

0000041e <__vector_1>:
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	80 91 78 02 	lds	r24, 0x0278
     434:	90 91 79 02 	lds	r25, 0x0279
     438:	a0 91 7a 02 	lds	r26, 0x027A
     43c:	b0 91 7b 02 	lds	r27, 0x027B
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	a1 1d       	adc	r26, r1
     444:	b1 1d       	adc	r27, r1
     446:	80 93 78 02 	sts	0x0278, r24
     44a:	90 93 79 02 	sts	0x0279, r25
     44e:	a0 93 7a 02 	sts	0x027A, r26
     452:	b0 93 7b 02 	sts	0x027B, r27
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <adc_init>:
     468:	ea e7       	ldi	r30, 0x7A	; 122
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	10 82       	st	Z, r1
     46e:	10 92 7b 00 	sts	0x007B, r1
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	80 93 7c 00 	sts	0x007C, r24
     478:	80 e8       	ldi	r24, 0x80	; 128
     47a:	80 bf       	out	0x30, r24	; 48
     47c:	86 e8       	ldi	r24, 0x86	; 134
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_devices>:
     482:	f8 94       	cli
     484:	97 df       	rcall	.-210    	; 0x3b4 <port_init>
     486:	c2 df       	rcall	.-124    	; 0x40c <color_sensor_pin_interrupt_init>
     488:	ef df       	rcall	.-34     	; 0x468 <adc_init>
     48a:	32 df       	rcall	.-412    	; 0x2f0 <motion_pin_config>
     48c:	16 df       	rcall	.-468    	; 0x2ba <timer5_init>
     48e:	6f df       	rcall	.-290    	; 0x36e <timer1_init>
     490:	78 94       	sei
     492:	08 95       	ret

00000494 <servo_1>:
     494:	10 92 89 00 	sts	0x0089, r1
     498:	68 2f       	mov	r22, r24
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 8e 13 	call	0x271c	; 0x271c <__floatunsisf>
     4a4:	2b e7       	ldi	r18, 0x7B	; 123
     4a6:	34 e1       	ldi	r19, 0x14	; 20
     4a8:	4e ee       	ldi	r20, 0xEE	; 238
     4aa:	5f e3       	ldi	r21, 0x3F	; 63
     4ac:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__divsf3>
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	4c e0       	ldi	r20, 0x0C	; 12
     4b6:	52 e4       	ldi	r21, 0x42	; 66
     4b8:	0e 94 96 12 	call	0x252c	; 0x252c <__addsf3>
     4bc:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__fixunssfsi>
     4c0:	60 93 88 00 	sts	0x0088, r22
     4c4:	08 95       	ret

000004c6 <filter_red>:
     4c6:	5e 98       	cbi	0x0b, 6	; 11
     4c8:	5f 98       	cbi	0x0b, 7	; 11
     4ca:	08 95       	ret

000004cc <filter_green>:
     4cc:	5e 9a       	sbi	0x0b, 6	; 11
     4ce:	5f 9a       	sbi	0x0b, 7	; 11
     4d0:	08 95       	ret

000004d2 <filter_blue>:
     4d2:	5e 98       	cbi	0x0b, 6	; 11
     4d4:	5f 9a       	sbi	0x0b, 7	; 11
     4d6:	08 95       	ret

000004d8 <color_sensor_scaling>:
     4d8:	5c 9a       	sbi	0x0b, 4	; 11
     4da:	5d 9a       	sbi	0x0b, 5	; 11
     4dc:	08 95       	ret

000004de <red_read>:
     4de:	f3 df       	rcall	.-26     	; 0x4c6 <filter_red>
     4e0:	10 92 78 02 	sts	0x0278, r1
     4e4:	10 92 79 02 	sts	0x0279, r1
     4e8:	10 92 7a 02 	sts	0x027A, r1
     4ec:	10 92 7b 02 	sts	0x027B, r1
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	8f e7       	ldi	r24, 0x7F	; 127
     4f4:	94 e0       	ldi	r25, 0x04	; 4
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <red_read+0x18>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <red_read+0x22>
     500:	00 00       	nop
     502:	80 91 78 02 	lds	r24, 0x0278
     506:	90 91 79 02 	lds	r25, 0x0279
     50a:	a0 91 7a 02 	lds	r26, 0x027A
     50e:	b0 91 7b 02 	lds	r27, 0x027B
     512:	80 93 96 02 	sts	0x0296, r24
     516:	90 93 97 02 	sts	0x0297, r25
     51a:	a0 93 98 02 	sts	0x0298, r26
     51e:	b0 93 99 02 	sts	0x0299, r27
     522:	2f ef       	ldi	r18, 0xFF	; 255
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	9c e2       	ldi	r25, 0x2C	; 44
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	80 40       	sbci	r24, 0x00	; 0
     52c:	90 40       	sbci	r25, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <red_read+0x4a>
     530:	00 c0       	rjmp	.+0      	; 0x532 <red_read+0x54>
     532:	00 00       	nop
     534:	08 95       	ret

00000536 <green_read>:
     536:	ca df       	rcall	.-108    	; 0x4cc <filter_green>
     538:	10 92 78 02 	sts	0x0278, r1
     53c:	10 92 79 02 	sts	0x0279, r1
     540:	10 92 7a 02 	sts	0x027A, r1
     544:	10 92 7b 02 	sts	0x027B, r1
     548:	2f ef       	ldi	r18, 0xFF	; 255
     54a:	8f e7       	ldi	r24, 0x7F	; 127
     54c:	94 e0       	ldi	r25, 0x04	; 4
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <green_read+0x18>
     556:	00 c0       	rjmp	.+0      	; 0x558 <green_read+0x22>
     558:	00 00       	nop
     55a:	80 91 78 02 	lds	r24, 0x0278
     55e:	90 91 79 02 	lds	r25, 0x0279
     562:	a0 91 7a 02 	lds	r26, 0x027A
     566:	b0 91 7b 02 	lds	r27, 0x027B
     56a:	80 93 92 02 	sts	0x0292, r24
     56e:	90 93 93 02 	sts	0x0293, r25
     572:	a0 93 94 02 	sts	0x0294, r26
     576:	b0 93 95 02 	sts	0x0295, r27
     57a:	08 95       	ret

0000057c <blue_read>:
     57c:	aa df       	rcall	.-172    	; 0x4d2 <filter_blue>
     57e:	10 92 78 02 	sts	0x0278, r1
     582:	10 92 79 02 	sts	0x0279, r1
     586:	10 92 7a 02 	sts	0x027A, r1
     58a:	10 92 7b 02 	sts	0x027B, r1
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	8f e7       	ldi	r24, 0x7F	; 127
     592:	94 e0       	ldi	r25, 0x04	; 4
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <blue_read+0x18>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <blue_read+0x22>
     59e:	00 00       	nop
     5a0:	80 91 78 02 	lds	r24, 0x0278
     5a4:	90 91 79 02 	lds	r25, 0x0279
     5a8:	a0 91 7a 02 	lds	r26, 0x027A
     5ac:	b0 91 7b 02 	lds	r27, 0x027B
     5b0:	80 93 86 02 	sts	0x0286, r24
     5b4:	90 93 87 02 	sts	0x0287, r25
     5b8:	a0 93 88 02 	sts	0x0288, r26
     5bc:	b0 93 89 02 	sts	0x0289, r27
     5c0:	08 95       	ret

000005c2 <set_color>:
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	08 df       	rcall	.-496    	; 0x3d6 <ADC_Conversion>
     5c6:	80 93 6f 02 	sts	0x026F, r24
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	04 df       	rcall	.-504    	; 0x3d6 <ADC_Conversion>
     5ce:	80 93 6e 02 	sts	0x026E, r24
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	00 df       	rcall	.-512    	; 0x3d6 <ADC_Conversion>
     5d6:	80 93 6d 02 	sts	0x026D, r24
     5da:	08 95       	ret

000005dc <Delay>:
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	8c 01       	movw	r16, r24
     5e6:	18 16       	cp	r1, r24
     5e8:	19 06       	cpc	r1, r25
     5ea:	8c f4       	brge	.+34     	; 0x60e <Delay+0x32>
     5ec:	c0 e0       	ldi	r28, 0x00	; 0
     5ee:	d0 e0       	ldi	r29, 0x00	; 0
     5f0:	09 c0       	rjmp	.+18     	; 0x604 <Delay+0x28>
     5f2:	86 e6       	ldi	r24, 0x66	; 102
     5f4:	9e e0       	ldi	r25, 0x0E	; 14
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <Delay+0x1a>
     5fa:	00 00       	nop
     5fc:	21 96       	adiw	r28, 0x01	; 1
     5fe:	c0 17       	cp	r28, r16
     600:	d1 07       	cpc	r29, r17
     602:	39 f0       	breq	.+14     	; 0x612 <Delay+0x36>
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	e7 de       	rcall	.-562    	; 0x3d6 <ADC_Conversion>
     608:	89 32       	cpi	r24, 0x29	; 41
     60a:	98 f3       	brcs	.-26     	; 0x5f2 <Delay+0x16>
     60c:	02 c0       	rjmp	.+4      	; 0x612 <Delay+0x36>
     60e:	c0 e0       	ldi	r28, 0x00	; 0
     610:	d0 e0       	ldi	r29, 0x00	; 0
     612:	8e de       	rcall	.-740    	; 0x330 <stop>
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	c0 17       	cp	r28, r16
     618:	d1 07       	cpc	r29, r17
     61a:	0c f0       	brlt	.+2      	; 0x61e <Delay+0x42>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <lcd>:
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	c0 dd       	rcall	.-1152   	; 0x1b2 <lcd_wr_command>
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	26 de       	rcall	.-948    	; 0x284 <lcd_cursor>
     638:	ce 01       	movw	r24, r28
     63a:	16 de       	rcall	.-980    	; 0x268 <lcd_string>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <semiCorrect>:
     642:	80 91 6e 02 	lds	r24, 0x026E
     646:	88 32       	cpi	r24, 0x28	; 40
     648:	08 f0       	brcs	.+2      	; 0x64c <semiCorrect+0xa>
     64a:	4f c0       	rjmp	.+158    	; 0x6ea <semiCorrect+0xa8>
     64c:	80 91 6f 02 	lds	r24, 0x026F
     650:	89 32       	cpi	r24, 0x29	; 41
     652:	28 f1       	brcs	.+74     	; 0x69e <semiCorrect+0x5c>
     654:	90 91 6d 02 	lds	r25, 0x026D
     658:	98 32       	cpi	r25, 0x28	; 40
     65a:	08 f5       	brcc	.+66     	; 0x69e <semiCorrect+0x5c>
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	e3 df       	rcall	.-58     	; 0x628 <lcd>
     662:	80 91 6e 02 	lds	r24, 0x026E
     666:	88 32       	cpi	r24, 0x28	; 40
     668:	b0 f4       	brcc	.+44     	; 0x696 <semiCorrect+0x54>
     66a:	80 91 6f 02 	lds	r24, 0x026F
     66e:	89 32       	cpi	r24, 0x29	; 41
     670:	90 f0       	brcs	.+36     	; 0x696 <semiCorrect+0x54>
     672:	80 91 6d 02 	lds	r24, 0x026D
     676:	88 32       	cpi	r24, 0x28	; 40
     678:	70 f4       	brcc	.+28     	; 0x696 <semiCorrect+0x54>
     67a:	54 de       	rcall	.-856    	; 0x324 <left>
     67c:	a2 df       	rcall	.-188    	; 0x5c2 <set_color>
     67e:	80 91 6e 02 	lds	r24, 0x026E
     682:	88 32       	cpi	r24, 0x28	; 40
     684:	40 f4       	brcc	.+16     	; 0x696 <semiCorrect+0x54>
     686:	80 91 6f 02 	lds	r24, 0x026F
     68a:	89 32       	cpi	r24, 0x29	; 41
     68c:	20 f0       	brcs	.+8      	; 0x696 <semiCorrect+0x54>
     68e:	80 91 6d 02 	lds	r24, 0x026D
     692:	88 32       	cpi	r24, 0x28	; 40
     694:	90 f3       	brcs	.-28     	; 0x67a <semiCorrect+0x38>
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	c6 cf       	rjmp	.-116    	; 0x628 <lcd>
     69c:	08 95       	ret
     69e:	90 91 6d 02 	lds	r25, 0x026D
     6a2:	99 32       	cpi	r25, 0x29	; 41
     6a4:	10 f1       	brcs	.+68     	; 0x6ea <semiCorrect+0xa8>
     6a6:	88 32       	cpi	r24, 0x28	; 40
     6a8:	00 f5       	brcc	.+64     	; 0x6ea <semiCorrect+0xa8>
     6aa:	8a e0       	ldi	r24, 0x0A	; 10
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	bc df       	rcall	.-136    	; 0x628 <lcd>
     6b0:	80 91 6e 02 	lds	r24, 0x026E
     6b4:	88 32       	cpi	r24, 0x28	; 40
     6b6:	b0 f4       	brcc	.+44     	; 0x6e4 <semiCorrect+0xa2>
     6b8:	80 91 6f 02 	lds	r24, 0x026F
     6bc:	88 32       	cpi	r24, 0x28	; 40
     6be:	90 f4       	brcc	.+36     	; 0x6e4 <semiCorrect+0xa2>
     6c0:	80 91 6d 02 	lds	r24, 0x026D
     6c4:	89 32       	cpi	r24, 0x29	; 41
     6c6:	70 f0       	brcs	.+28     	; 0x6e4 <semiCorrect+0xa2>
     6c8:	30 de       	rcall	.-928    	; 0x32a <right>
     6ca:	7b df       	rcall	.-266    	; 0x5c2 <set_color>
     6cc:	80 91 6e 02 	lds	r24, 0x026E
     6d0:	88 32       	cpi	r24, 0x28	; 40
     6d2:	40 f4       	brcc	.+16     	; 0x6e4 <semiCorrect+0xa2>
     6d4:	80 91 6f 02 	lds	r24, 0x026F
     6d8:	88 32       	cpi	r24, 0x28	; 40
     6da:	20 f4       	brcc	.+8      	; 0x6e4 <semiCorrect+0xa2>
     6dc:	80 91 6d 02 	lds	r24, 0x026D
     6e0:	89 32       	cpi	r24, 0x29	; 41
     6e2:	90 f7       	brcc	.-28     	; 0x6c8 <semiCorrect+0x86>
     6e4:	88 e0       	ldi	r24, 0x08	; 8
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	9f cf       	rjmp	.-194    	; 0x628 <lcd>
     6ea:	08 95       	ret

000006ec <correct>:
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	85 e0       	ldi	r24, 0x05	; 5
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 8b 02 	sts	0x028B, r25
     6fc:	80 93 8a 02 	sts	0x028A, r24
     700:	8e e0       	ldi	r24, 0x0E	; 14
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	91 df       	rcall	.-222    	; 0x628 <lcd>
     706:	14 de       	rcall	.-984    	; 0x330 <stop>
     708:	80 91 6c 02 	lds	r24, 0x026C
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	09 f0       	breq	.+2      	; 0x712 <correct+0x26>
     710:	34 c0       	rjmp	.+104    	; 0x77a <correct+0x8e>
     712:	10 92 6c 02 	sts	0x026C, r1
     716:	ce e3       	ldi	r28, 0x3E	; 62
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	02 e0       	ldi	r16, 0x02	; 2
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	05 de       	rcall	.-1014   	; 0x32a <right>
     720:	02 30       	cpi	r16, 0x02	; 2
     722:	11 05       	cpc	r17, r1
     724:	31 f4       	brne	.+12     	; 0x732 <correct+0x46>
     726:	8e e1       	ldi	r24, 0x1E	; 30
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	58 df       	rcall	.-336    	; 0x5dc <Delay>
     72c:	88 23       	and	r24, r24
     72e:	29 f0       	breq	.+10     	; 0x73a <correct+0x4e>
     730:	5b c0       	rjmp	.+182    	; 0x7e8 <correct+0xfc>
     732:	ce 01       	movw	r24, r28
     734:	53 df       	rcall	.-346    	; 0x5dc <Delay>
     736:	81 11       	cpse	r24, r1
     738:	57 c0       	rjmp	.+174    	; 0x7e8 <correct+0xfc>
     73a:	fa dd       	rcall	.-1036   	; 0x330 <stop>
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	4b de       	rcall	.-874    	; 0x3d6 <ADC_Conversion>
     740:	89 32       	cpi	r24, 0x29	; 41
     742:	08 f0       	brcs	.+2      	; 0x746 <correct+0x5a>
     744:	4d c0       	rjmp	.+154    	; 0x7e0 <correct+0xf4>
     746:	7d df       	rcall	.-262    	; 0x642 <semiCorrect>
     748:	ed dd       	rcall	.-1062   	; 0x324 <left>
     74a:	02 30       	cpi	r16, 0x02	; 2
     74c:	11 05       	cpc	r17, r1
     74e:	31 f4       	brne	.+12     	; 0x75c <correct+0x70>
     750:	8c e3       	ldi	r24, 0x3C	; 60
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	43 df       	rcall	.-378    	; 0x5dc <Delay>
     756:	88 23       	and	r24, r24
     758:	29 f0       	breq	.+10     	; 0x764 <correct+0x78>
     75a:	46 c0       	rjmp	.+140    	; 0x7e8 <correct+0xfc>
     75c:	ce 01       	movw	r24, r28
     75e:	3e df       	rcall	.-388    	; 0x5dc <Delay>
     760:	81 11       	cpse	r24, r1
     762:	42 c0       	rjmp	.+132    	; 0x7e8 <correct+0xfc>
     764:	e5 dd       	rcall	.-1078   	; 0x330 <stop>
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	36 de       	rcall	.-916    	; 0x3d6 <ADC_Conversion>
     76a:	64 96       	adiw	r28, 0x14	; 20
     76c:	88 32       	cpi	r24, 0x28	; 40
     76e:	08 f4       	brcc	.+2      	; 0x772 <correct+0x86>
     770:	37 c0       	rjmp	.+110    	; 0x7e0 <correct+0xf4>
     772:	67 df       	rcall	.-306    	; 0x642 <semiCorrect>
     774:	0c 5e       	subi	r16, 0xEC	; 236
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	d2 cf       	rjmp	.-92     	; 0x71e <correct+0x32>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 6c 02 	sts	0x026C, r24
     780:	ce e3       	ldi	r28, 0x3E	; 62
     782:	d0 e0       	ldi	r29, 0x00	; 0
     784:	02 e0       	ldi	r16, 0x02	; 2
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	cd dd       	rcall	.-1126   	; 0x324 <left>
     78a:	02 30       	cpi	r16, 0x02	; 2
     78c:	11 05       	cpc	r17, r1
     78e:	31 f4       	brne	.+12     	; 0x79c <correct+0xb0>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	23 df       	rcall	.-442    	; 0x5dc <Delay>
     796:	88 23       	and	r24, r24
     798:	29 f0       	breq	.+10     	; 0x7a4 <correct+0xb8>
     79a:	26 c0       	rjmp	.+76     	; 0x7e8 <correct+0xfc>
     79c:	ce 01       	movw	r24, r28
     79e:	1e df       	rcall	.-452    	; 0x5dc <Delay>
     7a0:	81 11       	cpse	r24, r1
     7a2:	22 c0       	rjmp	.+68     	; 0x7e8 <correct+0xfc>
     7a4:	c5 dd       	rcall	.-1142   	; 0x330 <stop>
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	16 de       	rcall	.-980    	; 0x3d6 <ADC_Conversion>
     7aa:	89 32       	cpi	r24, 0x29	; 41
     7ac:	c8 f4       	brcc	.+50     	; 0x7e0 <correct+0xf4>
     7ae:	49 df       	rcall	.-366    	; 0x642 <semiCorrect>
     7b0:	bc dd       	rcall	.-1160   	; 0x32a <right>
     7b2:	02 30       	cpi	r16, 0x02	; 2
     7b4:	11 05       	cpc	r17, r1
     7b6:	31 f4       	brne	.+12     	; 0x7c4 <correct+0xd8>
     7b8:	8c e3       	ldi	r24, 0x3C	; 60
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0f df       	rcall	.-482    	; 0x5dc <Delay>
     7be:	88 23       	and	r24, r24
     7c0:	29 f0       	breq	.+10     	; 0x7cc <correct+0xe0>
     7c2:	12 c0       	rjmp	.+36     	; 0x7e8 <correct+0xfc>
     7c4:	ce 01       	movw	r24, r28
     7c6:	0a df       	rcall	.-492    	; 0x5dc <Delay>
     7c8:	81 11       	cpse	r24, r1
     7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <correct+0xfc>
     7cc:	b1 dd       	rcall	.-1182   	; 0x330 <stop>
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	02 de       	rcall	.-1020   	; 0x3d6 <ADC_Conversion>
     7d2:	64 96       	adiw	r28, 0x14	; 20
     7d4:	88 32       	cpi	r24, 0x28	; 40
     7d6:	20 f0       	brcs	.+8      	; 0x7e0 <correct+0xf4>
     7d8:	34 df       	rcall	.-408    	; 0x642 <semiCorrect>
     7da:	0c 5e       	subi	r16, 0xEC	; 236
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	d4 cf       	rjmp	.-88     	; 0x788 <correct+0x9c>
     7e0:	88 e0       	ldi	r24, 0x08	; 8
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	21 df       	rcall	.-446    	; 0x628 <lcd>
     7e6:	a4 dd       	rcall	.-1208   	; 0x330 <stop>
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <noNatak>:
     7f2:	86 e9       	ldi	r24, 0x96	; 150
     7f4:	80 93 28 01 	sts	0x0128, r24
     7f8:	80 93 2a 01 	sts	0x012A, r24
     7fc:	80 91 6e 02 	lds	r24, 0x026E
     800:	88 32       	cpi	r24, 0x28	; 40
     802:	08 f0       	brcs	.+2      	; 0x806 <noNatak+0x14>
     804:	52 c0       	rjmp	.+164    	; 0x8aa <noNatak+0xb8>
     806:	80 91 6f 02 	lds	r24, 0x026F
     80a:	89 32       	cpi	r24, 0x29	; 41
     80c:	28 f1       	brcs	.+74     	; 0x858 <noNatak+0x66>
     80e:	90 91 6d 02 	lds	r25, 0x026D
     812:	98 32       	cpi	r25, 0x28	; 40
     814:	08 f5       	brcc	.+66     	; 0x858 <noNatak+0x66>
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	06 df       	rcall	.-500    	; 0x628 <lcd>
     81c:	80 91 6e 02 	lds	r24, 0x026E
     820:	88 32       	cpi	r24, 0x28	; 40
     822:	b0 f4       	brcc	.+44     	; 0x850 <noNatak+0x5e>
     824:	80 91 6f 02 	lds	r24, 0x026F
     828:	89 32       	cpi	r24, 0x29	; 41
     82a:	90 f0       	brcs	.+36     	; 0x850 <noNatak+0x5e>
     82c:	80 91 6d 02 	lds	r24, 0x026D
     830:	88 32       	cpi	r24, 0x28	; 40
     832:	70 f4       	brcc	.+28     	; 0x850 <noNatak+0x5e>
     834:	77 dd       	rcall	.-1298   	; 0x324 <left>
     836:	c5 de       	rcall	.-630    	; 0x5c2 <set_color>
     838:	80 91 6e 02 	lds	r24, 0x026E
     83c:	88 32       	cpi	r24, 0x28	; 40
     83e:	40 f4       	brcc	.+16     	; 0x850 <noNatak+0x5e>
     840:	80 91 6f 02 	lds	r24, 0x026F
     844:	89 32       	cpi	r24, 0x29	; 41
     846:	20 f0       	brcs	.+8      	; 0x850 <noNatak+0x5e>
     848:	80 91 6d 02 	lds	r24, 0x026D
     84c:	88 32       	cpi	r24, 0x28	; 40
     84e:	90 f3       	brcs	.-28     	; 0x834 <noNatak+0x42>
     850:	88 e0       	ldi	r24, 0x08	; 8
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	e9 de       	rcall	.-558    	; 0x628 <lcd>
     856:	38 c0       	rjmp	.+112    	; 0x8c8 <noNatak+0xd6>
     858:	90 91 6d 02 	lds	r25, 0x026D
     85c:	99 32       	cpi	r25, 0x29	; 41
     85e:	18 f1       	brcs	.+70     	; 0x8a6 <noNatak+0xb4>
     860:	88 32       	cpi	r24, 0x28	; 40
     862:	08 f5       	brcc	.+66     	; 0x8a6 <noNatak+0xb4>
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	df de       	rcall	.-578    	; 0x628 <lcd>
     86a:	80 91 6e 02 	lds	r24, 0x026E
     86e:	88 32       	cpi	r24, 0x28	; 40
     870:	b0 f4       	brcc	.+44     	; 0x89e <noNatak+0xac>
     872:	80 91 6f 02 	lds	r24, 0x026F
     876:	88 32       	cpi	r24, 0x28	; 40
     878:	90 f4       	brcc	.+36     	; 0x89e <noNatak+0xac>
     87a:	80 91 6d 02 	lds	r24, 0x026D
     87e:	89 32       	cpi	r24, 0x29	; 41
     880:	70 f0       	brcs	.+28     	; 0x89e <noNatak+0xac>
     882:	53 dd       	rcall	.-1370   	; 0x32a <right>
     884:	9e de       	rcall	.-708    	; 0x5c2 <set_color>
     886:	80 91 6e 02 	lds	r24, 0x026E
     88a:	88 32       	cpi	r24, 0x28	; 40
     88c:	40 f4       	brcc	.+16     	; 0x89e <noNatak+0xac>
     88e:	80 91 6f 02 	lds	r24, 0x026F
     892:	88 32       	cpi	r24, 0x28	; 40
     894:	20 f4       	brcc	.+8      	; 0x89e <noNatak+0xac>
     896:	80 91 6d 02 	lds	r24, 0x026D
     89a:	89 32       	cpi	r24, 0x29	; 41
     89c:	90 f7       	brcc	.-28     	; 0x882 <noNatak+0x90>
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	c2 de       	rcall	.-636    	; 0x628 <lcd>
     8a4:	11 c0       	rjmp	.+34     	; 0x8c8 <noNatak+0xd6>
     8a6:	22 df       	rcall	.-444    	; 0x6ec <correct>
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <noNatak+0xd6>
     8aa:	80 91 6f 02 	lds	r24, 0x026F
     8ae:	89 32       	cpi	r24, 0x29	; 41
     8b0:	20 f0       	brcs	.+8      	; 0x8ba <noNatak+0xc8>
     8b2:	90 91 6d 02 	lds	r25, 0x026D
     8b6:	98 32       	cpi	r25, 0x28	; 40
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <noNatak+0xd8>
     8ba:	88 32       	cpi	r24, 0x28	; 40
     8bc:	20 f4       	brcc	.+8      	; 0x8c6 <noNatak+0xd4>
     8be:	80 91 6d 02 	lds	r24, 0x026D
     8c2:	89 32       	cpi	r24, 0x29	; 41
     8c4:	10 f4       	brcc	.+4      	; 0x8ca <noNatak+0xd8>
     8c6:	12 df       	rcall	.-476    	; 0x6ec <correct>
     8c8:	33 cd       	rjmp	.-1434   	; 0x330 <stop>
     8ca:	08 95       	ret

000008cc <node>:
     8cc:	88 ec       	ldi	r24, 0xC8	; 200
     8ce:	80 93 28 01 	sts	0x0128, r24
     8d2:	80 93 2a 01 	sts	0x012A, r24
     8d6:	80 91 6e 02 	lds	r24, 0x026E
     8da:	89 32       	cpi	r24, 0x29	; 41
     8dc:	38 f4       	brcc	.+14     	; 0x8ec <node+0x20>
     8de:	0e c0       	rjmp	.+28     	; 0x8fc <node+0x30>
     8e0:	1e dd       	rcall	.-1476   	; 0x31e <forward>
     8e2:	6f de       	rcall	.-802    	; 0x5c2 <set_color>
     8e4:	80 91 6e 02 	lds	r24, 0x026E
     8e8:	89 32       	cpi	r24, 0x29	; 41
     8ea:	40 f0       	brcs	.+16     	; 0x8fc <node+0x30>
     8ec:	80 91 6f 02 	lds	r24, 0x026F
     8f0:	89 32       	cpi	r24, 0x29	; 41
     8f2:	b0 f7       	brcc	.-20     	; 0x8e0 <node+0x14>
     8f4:	80 91 6d 02 	lds	r24, 0x026D
     8f8:	89 32       	cpi	r24, 0x29	; 41
     8fa:	90 f7       	brcc	.-28     	; 0x8e0 <node+0x14>
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	9a e1       	ldi	r25, 0x1A	; 26
     902:	21 50       	subi	r18, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <node+0x36>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <node+0x40>
     90c:	00 00       	nop
     90e:	10 cd       	rjmp	.-1504   	; 0x330 <stop>
     910:	08 95       	ret

00000912 <forwardJaa>:
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	08 e2       	ldi	r16, 0x28	; 40
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	0f 2e       	mov	r0, r31
     922:	f0 ef       	ldi	r31, 0xF0	; 240
     924:	ff 2e       	mov	r15, r31
     926:	f0 2d       	mov	r31, r0
     928:	ca e2       	ldi	r28, 0x2A	; 42
     92a:	d1 e0       	ldi	r29, 0x01	; 1
     92c:	f8 dc       	rcall	.-1552   	; 0x31e <forward>
     92e:	49 de       	rcall	.-878    	; 0x5c2 <set_color>
     930:	80 91 6e 02 	lds	r24, 0x026E
     934:	89 32       	cpi	r24, 0x29	; 41
     936:	50 f0       	brcs	.+20     	; 0x94c <forwardJaa+0x3a>
     938:	80 91 6f 02 	lds	r24, 0x026F
     93c:	89 32       	cpi	r24, 0x29	; 41
     93e:	20 f4       	brcc	.+8      	; 0x948 <forwardJaa+0x36>
     940:	80 91 6d 02 	lds	r24, 0x026D
     944:	89 32       	cpi	r24, 0x29	; 41
     946:	10 f0       	brcs	.+4      	; 0x94c <forwardJaa+0x3a>
     948:	c1 df       	rcall	.-126    	; 0x8cc <node>
     94a:	11 c0       	rjmp	.+34     	; 0x96e <forwardJaa+0x5c>
     94c:	f8 01       	movw	r30, r16
     94e:	f0 82       	st	Z, r15
     950:	f8 82       	st	Y, r15
     952:	80 91 6e 02 	lds	r24, 0x026E
     956:	89 32       	cpi	r24, 0x29	; 41
     958:	40 f0       	brcs	.+16     	; 0x96a <forwardJaa+0x58>
     95a:	80 91 6f 02 	lds	r24, 0x026F
     95e:	88 32       	cpi	r24, 0x28	; 40
     960:	20 f4       	brcc	.+8      	; 0x96a <forwardJaa+0x58>
     962:	80 91 6d 02 	lds	r24, 0x026D
     966:	88 32       	cpi	r24, 0x28	; 40
     968:	08 f3       	brcs	.-62     	; 0x92c <forwardJaa+0x1a>
     96a:	43 df       	rcall	.-378    	; 0x7f2 <noNatak>
     96c:	d2 df       	rcall	.-92     	; 0x912 <forwardJaa>
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	08 95       	ret

0000097a <nodeLeft>:
     97a:	a8 df       	rcall	.-176    	; 0x8cc <node>
     97c:	d3 dc       	rcall	.-1626   	; 0x324 <left>
     97e:	2f ef       	ldi	r18, 0xFF	; 255
     980:	8f e7       	ldi	r24, 0x7F	; 127
     982:	98 e2       	ldi	r25, 0x28	; 40
     984:	21 50       	subi	r18, 0x01	; 1
     986:	80 40       	sbci	r24, 0x00	; 0
     988:	90 40       	sbci	r25, 0x00	; 0
     98a:	e1 f7       	brne	.-8      	; 0x984 <nodeLeft+0xa>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <nodeLeft+0x14>
     98e:	00 00       	nop
     990:	cf cc       	rjmp	.-1634   	; 0x330 <stop>
     992:	08 95       	ret

00000994 <nodeRight>:
     994:	9b df       	rcall	.-202    	; 0x8cc <node>
     996:	c9 dc       	rcall	.-1646   	; 0x32a <right>
     998:	2f ef       	ldi	r18, 0xFF	; 255
     99a:	8f e7       	ldi	r24, 0x7F	; 127
     99c:	98 e2       	ldi	r25, 0x28	; 40
     99e:	21 50       	subi	r18, 0x01	; 1
     9a0:	80 40       	sbci	r24, 0x00	; 0
     9a2:	90 40       	sbci	r25, 0x00	; 0
     9a4:	e1 f7       	brne	.-8      	; 0x99e <nodeRight+0xa>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <nodeRight+0x14>
     9a8:	00 00       	nop
     9aa:	c2 cc       	rjmp	.-1660   	; 0x330 <stop>
     9ac:	08 95       	ret

000009ae <Uturn>:
     9ae:	ba dc       	rcall	.-1676   	; 0x324 <left>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	99 e5       	ldi	r25, 0x59	; 89
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <Uturn+0x8>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <Uturn+0x12>
     9c0:	00 00       	nop
     9c2:	b6 cc       	rjmp	.-1684   	; 0x330 <stop>
     9c4:	08 95       	ret

000009c6 <front>:
     9c6:	a5 df       	rcall	.-182    	; 0x912 <forwardJaa>
     9c8:	80 91 8e 02 	lds	r24, 0x028E
     9cc:	90 91 8f 02 	lds	r25, 0x028F
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	90 93 8f 02 	sts	0x028F, r25
     9d6:	80 93 8e 02 	sts	0x028E, r24
     9da:	08 95       	ret

000009dc <turnRight>:
     9dc:	db df       	rcall	.-74     	; 0x994 <nodeRight>
     9de:	80 91 70 02 	lds	r24, 0x0270
     9e2:	90 91 71 02 	lds	r25, 0x0271
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	83 70       	andi	r24, 0x03	; 3
     9ea:	90 78       	andi	r25, 0x80	; 128
     9ec:	99 23       	and	r25, r25
     9ee:	24 f4       	brge	.+8      	; 0x9f8 <turnRight+0x1c>
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	8c 6f       	ori	r24, 0xFC	; 252
     9f4:	9f 6f       	ori	r25, 0xFF	; 255
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	90 93 71 02 	sts	0x0271, r25
     9fc:	80 93 70 02 	sts	0x0270, r24
     a00:	08 95       	ret

00000a02 <turnLeft>:
     a02:	bb df       	rcall	.-138    	; 0x97a <nodeLeft>
     a04:	80 91 70 02 	lds	r24, 0x0270
     a08:	90 91 71 02 	lds	r25, 0x0271
     a0c:	03 96       	adiw	r24, 0x03	; 3
     a0e:	83 70       	andi	r24, 0x03	; 3
     a10:	90 78       	andi	r25, 0x80	; 128
     a12:	99 23       	and	r25, r25
     a14:	24 f4       	brge	.+8      	; 0xa1e <turnLeft+0x1c>
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	8c 6f       	ori	r24, 0xFC	; 252
     a1a:	9f 6f       	ori	r25, 0xFF	; 255
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 71 02 	sts	0x0271, r25
     a22:	80 93 70 02 	sts	0x0270, r24
     a26:	08 95       	ret

00000a28 <turn>:
     a28:	c2 df       	rcall	.-124    	; 0x9ae <Uturn>
     a2a:	80 91 70 02 	lds	r24, 0x0270
     a2e:	90 91 71 02 	lds	r25, 0x0271
     a32:	02 96       	adiw	r24, 0x02	; 2
     a34:	83 70       	andi	r24, 0x03	; 3
     a36:	90 78       	andi	r25, 0x80	; 128
     a38:	99 23       	and	r25, r25
     a3a:	24 f4       	brge	.+8      	; 0xa44 <turn+0x1c>
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	8c 6f       	ori	r24, 0xFC	; 252
     a40:	9f 6f       	ori	r25, 0xFF	; 255
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	90 93 71 02 	sts	0x0271, r25
     a48:	80 93 70 02 	sts	0x0270, r24
     a4c:	08 95       	ret

00000a4e <traverseToSort>:
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	ec 01       	movw	r28, r24
     a54:	04 97       	sbiw	r24, 0x04	; 4
     a56:	02 97       	sbiw	r24, 0x02	; 2
     a58:	88 f5       	brcc	.+98     	; 0xabc <traverseToSort+0x6e>
     a5a:	c4 30       	cpi	r28, 0x04	; 4
     a5c:	d1 05       	cpc	r29, r1
     a5e:	39 f4       	brne	.+14     	; 0xa6e <traverseToSort+0x20>
     a60:	80 91 70 02 	lds	r24, 0x0270
     a64:	90 91 71 02 	lds	r25, 0x0271
     a68:	89 2b       	or	r24, r25
     a6a:	51 f0       	breq	.+20     	; 0xa80 <traverseToSort+0x32>
     a6c:	0b c0       	rjmp	.+22     	; 0xa84 <traverseToSort+0x36>
     a6e:	c5 30       	cpi	r28, 0x05	; 5
     a70:	d1 05       	cpc	r29, r1
     a72:	41 f4       	brne	.+16     	; 0xa84 <traverseToSort+0x36>
     a74:	80 91 70 02 	lds	r24, 0x0270
     a78:	90 91 71 02 	lds	r25, 0x0271
     a7c:	02 97       	sbiw	r24, 0x02	; 2
     a7e:	11 f4       	brne	.+4      	; 0xa84 <traverseToSort+0x36>
     a80:	ad df       	rcall	.-166    	; 0x9dc <turnRight>
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <traverseToSort+0x38>
     a84:	be df       	rcall	.-132    	; 0xa02 <turnLeft>
     a86:	9f df       	rcall	.-194    	; 0x9c6 <front>
     a88:	9e df       	rcall	.-196    	; 0x9c6 <front>
     a8a:	24 97       	sbiw	r28, 0x04	; 4
     a8c:	39 f4       	brne	.+14     	; 0xa9c <traverseToSort+0x4e>
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 73 02 	sts	0x0273, r25
     a96:	80 93 72 02 	sts	0x0272, r24
     a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <traverseToSort+0x5a>
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 73 02 	sts	0x0273, r25
     aa4:	80 93 72 02 	sts	0x0272, r24
     aa8:	80 91 8e 02 	lds	r24, 0x028E
     aac:	90 91 8f 02 	lds	r25, 0x028F
     ab0:	02 96       	adiw	r24, 0x02	; 2
     ab2:	90 93 8f 02 	sts	0x028F, r25
     ab6:	80 93 8e 02 	sts	0x028E, r24
     aba:	22 c0       	rjmp	.+68     	; 0xb00 <traverseToSort+0xb2>
     abc:	22 97       	sbiw	r28, 0x02	; 2
     abe:	3c f4       	brge	.+14     	; 0xace <traverseToSort+0x80>
     ac0:	80 91 70 02 	lds	r24, 0x0270
     ac4:	90 91 71 02 	lds	r25, 0x0271
     ac8:	89 2b       	or	r24, r25
     aca:	39 f0       	breq	.+14     	; 0xada <traverseToSort+0x8c>
     acc:	07 c0       	rjmp	.+14     	; 0xadc <traverseToSort+0x8e>
     ace:	80 91 70 02 	lds	r24, 0x0270
     ad2:	90 91 71 02 	lds	r25, 0x0271
     ad6:	02 97       	sbiw	r24, 0x02	; 2
     ad8:	09 f4       	brne	.+2      	; 0xadc <traverseToSort+0x8e>
     ada:	a6 df       	rcall	.-180    	; 0xa28 <turn>
     adc:	74 df       	rcall	.-280    	; 0x9c6 <front>
     ade:	80 91 9f 02 	lds	r24, 0x029F
     ae2:	90 91 a0 02 	lds	r25, 0x02A0
     ae6:	81 70       	andi	r24, 0x01	; 1
     ae8:	90 78       	andi	r25, 0x80	; 128
     aea:	99 23       	and	r25, r25
     aec:	24 f4       	brge	.+8      	; 0xaf6 <traverseToSort+0xa8>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	8e 6f       	ori	r24, 0xFE	; 254
     af2:	9f 6f       	ori	r25, 0xFF	; 255
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	04 96       	adiw	r24, 0x04	; 4
     af8:	90 93 73 02 	sts	0x0273, r25
     afc:	80 93 72 02 	sts	0x0272, r24
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <scan>:
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	e9 dc       	rcall	.-1582   	; 0x4de <red_read>
     b0c:	37 dd       	rcall	.-1426   	; 0x57c <blue_read>
     b0e:	13 dd       	rcall	.-1498   	; 0x536 <green_read>
     b10:	80 91 84 02 	lds	r24, 0x0284
     b14:	90 91 85 02 	lds	r25, 0x0285
     b18:	aa 27       	eor	r26, r26
     b1a:	97 fd       	sbrc	r25, 7
     b1c:	a0 95       	com	r26
     b1e:	ba 2f       	mov	r27, r26
     b20:	40 91 96 02 	lds	r20, 0x0296
     b24:	50 91 97 02 	lds	r21, 0x0297
     b28:	60 91 98 02 	lds	r22, 0x0298
     b2c:	70 91 99 02 	lds	r23, 0x0299
     b30:	48 17       	cp	r20, r24
     b32:	59 07       	cpc	r21, r25
     b34:	6a 07       	cpc	r22, r26
     b36:	7b 07       	cpc	r23, r27
     b38:	d8 f4       	brcc	.+54     	; 0xb70 <scan+0x6a>
     b3a:	40 91 92 02 	lds	r20, 0x0292
     b3e:	50 91 93 02 	lds	r21, 0x0293
     b42:	60 91 94 02 	lds	r22, 0x0294
     b46:	70 91 95 02 	lds	r23, 0x0295
     b4a:	48 17       	cp	r20, r24
     b4c:	59 07       	cpc	r21, r25
     b4e:	6a 07       	cpc	r22, r26
     b50:	7b 07       	cpc	r23, r27
     b52:	70 f4       	brcc	.+28     	; 0xb70 <scan+0x6a>
     b54:	40 91 86 02 	lds	r20, 0x0286
     b58:	50 91 87 02 	lds	r21, 0x0287
     b5c:	60 91 88 02 	lds	r22, 0x0288
     b60:	70 91 89 02 	lds	r23, 0x0289
     b64:	48 17       	cp	r20, r24
     b66:	59 07       	cpc	r21, r25
     b68:	6a 07       	cpc	r22, r26
     b6a:	7b 07       	cpc	r23, r27
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <scan+0x6a>
     b6e:	46 c0       	rjmp	.+140    	; 0xbfc <scan+0xf6>
     b70:	40 91 96 02 	lds	r20, 0x0296
     b74:	50 91 97 02 	lds	r21, 0x0297
     b78:	60 91 98 02 	lds	r22, 0x0298
     b7c:	70 91 99 02 	lds	r23, 0x0299
     b80:	80 91 86 02 	lds	r24, 0x0286
     b84:	90 91 87 02 	lds	r25, 0x0287
     b88:	a0 91 88 02 	lds	r26, 0x0288
     b8c:	b0 91 89 02 	lds	r27, 0x0289
     b90:	84 17       	cp	r24, r20
     b92:	95 07       	cpc	r25, r21
     b94:	a6 07       	cpc	r26, r22
     b96:	b7 07       	cpc	r27, r23
     b98:	c8 f4       	brcc	.+50     	; 0xbcc <scan+0xc6>
     b9a:	00 91 96 02 	lds	r16, 0x0296
     b9e:	10 91 97 02 	lds	r17, 0x0297
     ba2:	20 91 98 02 	lds	r18, 0x0298
     ba6:	30 91 99 02 	lds	r19, 0x0299
     baa:	40 91 92 02 	lds	r20, 0x0292
     bae:	50 91 93 02 	lds	r21, 0x0293
     bb2:	60 91 94 02 	lds	r22, 0x0294
     bb6:	70 91 95 02 	lds	r23, 0x0295
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	40 17       	cp	r20, r16
     bc0:	51 07       	cpc	r21, r17
     bc2:	62 07       	cpc	r22, r18
     bc4:	73 07       	cpc	r23, r19
     bc6:	f8 f4       	brcc	.+62     	; 0xc06 <scan+0x100>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	1d c0       	rjmp	.+58     	; 0xc06 <scan+0x100>
     bcc:	40 91 86 02 	lds	r20, 0x0286
     bd0:	50 91 87 02 	lds	r21, 0x0287
     bd4:	60 91 88 02 	lds	r22, 0x0288
     bd8:	70 91 89 02 	lds	r23, 0x0289
     bdc:	80 91 92 02 	lds	r24, 0x0292
     be0:	90 91 93 02 	lds	r25, 0x0293
     be4:	a0 91 94 02 	lds	r26, 0x0294
     be8:	b0 91 95 02 	lds	r27, 0x0295
     bec:	84 17       	cp	r24, r20
     bee:	95 07       	cpc	r25, r21
     bf0:	a6 07       	cpc	r26, r22
     bf2:	b7 07       	cpc	r27, r23
     bf4:	30 f4       	brcc	.+12     	; 0xc02 <scan+0xfc>
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <scan+0x100>
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <scan+0x100>
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <setIndicatorAndColor>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	c3 eb       	ldi	r28, 0xB3	; 179
     c12:	d2 e0       	ldi	r29, 0x02	; 2
     c14:	e3 ea       	ldi	r30, 0xA3	; 163
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	ac e7       	ldi	r26, 0x7C	; 124
     c1a:	b2 e0       	ldi	r27, 0x02	; 2
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	2e ef       	ldi	r18, 0xFE	; 254
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	89 93       	st	Y+, r24
     c26:	99 93       	st	Y+, r25
     c28:	33 83       	std	Z+3, r19	; 0x03
     c2a:	22 83       	std	Z+2, r18	; 0x02
     c2c:	31 83       	std	Z+1, r19	; 0x01
     c2e:	20 83       	st	Z, r18
     c30:	1d 92       	st	X+, r1
     c32:	1d 92       	st	X+, r1
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	34 96       	adiw	r30, 0x04	; 4
     c38:	84 30       	cpi	r24, 0x04	; 4
     c3a:	91 05       	cpc	r25, r1
     c3c:	99 f7       	brne	.-26     	; 0xc24 <setIndicatorAndColor+0x18>
     c3e:	e0 91 b3 02 	lds	r30, 0x02B3
     c42:	f0 91 b4 02 	lds	r31, 0x02B4
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	e5 54       	subi	r30, 0x45	; 69
     c4c:	fd 4f       	sbci	r31, 0xFD	; 253
     c4e:	11 82       	std	Z+1, r1	; 0x01
     c50:	10 82       	st	Z, r1
     c52:	e0 91 b5 02 	lds	r30, 0x02B5
     c56:	f0 91 b6 02 	lds	r31, 0x02B6
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	e5 54       	subi	r30, 0x45	; 69
     c60:	fd 4f       	sbci	r31, 0xFD	; 253
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
     c6a:	e0 91 b7 02 	lds	r30, 0x02B7
     c6e:	f0 91 b8 02 	lds	r31, 0x02B8
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	e5 54       	subi	r30, 0x45	; 69
     c78:	fd 4f       	sbci	r31, 0xFD	; 253
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	80 83       	st	Z, r24
     c82:	e0 91 b9 02 	lds	r30, 0x02B9
     c86:	f0 91 ba 02 	lds	r31, 0x02BA
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	e5 54       	subi	r30, 0x45	; 69
     c90:	fd 4f       	sbci	r31, 0xFD	; 253
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	9f ef       	ldi	r25, 0xFF	; 255
     c9e:	90 93 9e 02 	sts	0x029E, r25
     ca2:	80 93 9d 02 	sts	0x029D, r24
     ca6:	90 93 9c 02 	sts	0x029C, r25
     caa:	80 93 9b 02 	sts	0x029B, r24
     cae:	90 93 ca 02 	sts	0x02CA, r25
     cb2:	80 93 c9 02 	sts	0x02C9, r24
     cb6:	90 93 c8 02 	sts	0x02C8, r25
     cba:	80 93 c7 02 	sts	0x02C7, r24
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <terminalCheck1>:
void terminalCheck1()
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
	if (ct != ot)
     cc8:	80 91 72 02 	lds	r24, 0x0272
     ccc:	90 91 73 02 	lds	r25, 0x0273
     cd0:	20 91 9f 02 	lds	r18, 0x029F
     cd4:	30 91 a0 02 	lds	r19, 0x02A0
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	89 f1       	breq	.+98     	; 0xd40 <terminalCheck1+0x7c>
	{
		if (dir == 1 || dir == 3)
     cde:	20 91 70 02 	lds	r18, 0x0270
     ce2:	30 91 71 02 	lds	r19, 0x0271
     ce6:	2d 7f       	andi	r18, 0xFD	; 253
     ce8:	21 30       	cpi	r18, 0x01	; 1
     cea:	31 05       	cpc	r19, r1
     cec:	41 f4       	brne	.+16     	; 0xcfe <terminalCheck1+0x3a>
		{
			if (ot == 3 || ot == 0)
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <terminalCheck1+0x34>
     cf4:	89 2b       	or	r24, r25
     cf6:	11 f4       	brne	.+4      	; 0xcfc <terminalCheck1+0x38>
			turnRight();
     cf8:	71 de       	rcall	.-798    	; 0x9dc <turnRight>
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <terminalCheck1+0x3a>
			else turnLeft();
     cfc:	82 de       	rcall	.-764    	; 0xa02 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     cfe:	80 91 9f 02 	lds	r24, 0x029F
     d02:	90 91 a0 02 	lds	r25, 0x02A0
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	91 05       	cpc	r25, r1
     d0a:	38 f4       	brcc	.+14     	; 0xd1a <terminalCheck1+0x56>
     d0c:	20 91 70 02 	lds	r18, 0x0270
     d10:	30 91 71 02 	lds	r19, 0x0271
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	49 f0       	breq	.+18     	; 0xd2c <terminalCheck1+0x68>
     d1a:	02 97       	sbiw	r24, 0x02	; 2
     d1c:	02 97       	sbiw	r24, 0x02	; 2
     d1e:	38 f4       	brcc	.+14     	; 0xd2e <terminalCheck1+0x6a>
     d20:	80 91 70 02 	lds	r24, 0x0270
     d24:	90 91 71 02 	lds	r25, 0x0271
     d28:	89 2b       	or	r24, r25
     d2a:	09 f4       	brne	.+2      	; 0xd2e <terminalCheck1+0x6a>
			turn();
     d2c:	7d de       	rcall	.-774    	; 0xa28 <turn>
		front();
     d2e:	4b de       	rcall	.-874    	; 0x9c6 <front>
		ot = ct;
     d30:	80 91 9f 02 	lds	r24, 0x029F
     d34:	90 91 a0 02 	lds	r25, 0x02A0
     d38:	90 93 73 02 	sts	0x0273, r25
     d3c:	80 93 72 02 	sts	0x0272, r24
	}
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     d40:	80 91 9f 02 	lds	r24, 0x029F
     d44:	90 91 a0 02 	lds	r25, 0x02A0
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	91 05       	cpc	r25, r1
     d4c:	30 f4       	brcc	.+12     	; 0xd5a <terminalCheck1+0x96>
     d4e:	20 91 70 02 	lds	r18, 0x0270
     d52:	30 91 71 02 	lds	r19, 0x0271
     d56:	23 2b       	or	r18, r19
     d58:	49 f0       	breq	.+18     	; 0xd6c <terminalCheck1+0xa8>
     d5a:	02 97       	sbiw	r24, 0x02	; 2
     d5c:	02 97       	sbiw	r24, 0x02	; 2
     d5e:	40 f4       	brcc	.+16     	; 0xd70 <terminalCheck1+0xac>
     d60:	80 91 70 02 	lds	r24, 0x0270
     d64:	90 91 71 02 	lds	r25, 0x0271
     d68:	02 97       	sbiw	r24, 0x02	; 2
     d6a:	11 f4       	brne	.+4      	; 0xd70 <terminalCheck1+0xac>
	turnRight();
     d6c:	37 de       	rcall	.-914    	; 0x9dc <turnRight>
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <terminalCheck1+0xae>
	else turnLeft();
     d70:	48 de       	rcall	.-880    	; 0xa02 <turnLeft>
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);
	term[ct][0]=scan();
     d72:	c0 91 9f 02 	lds	r28, 0x029F
     d76:	d0 91 a0 02 	lds	r29, 0x02A0
     d7a:	c5 de       	rcall	.-630    	; 0xb06 <scan>
     d7c:	cc 0f       	add	r28, r28
     d7e:	dd 1f       	adc	r29, r29
     d80:	cc 0f       	add	r28, r28
     d82:	dd 1f       	adc	r29, r29
     d84:	cd 55       	subi	r28, 0x5D	; 93
     d86:	dd 4f       	sbci	r29, 0xFD	; 253
     d88:	99 83       	std	Y+1, r25	; 0x01
     d8a:	88 83       	st	Y, r24
	lcd((char*)term[ct][0]);
     d8c:	e0 91 9f 02 	lds	r30, 0x029F
     d90:	f0 91 a0 02 	lds	r31, 0x02A0
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	ed 55       	subi	r30, 0x5D	; 93
     d9e:	fd 4f       	sbci	r31, 0xFD	; 253
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	41 dc       	rcall	.-1918   	; 0x628 <lcd>
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
     da6:	20 91 9f 02 	lds	r18, 0x029F
     daa:	30 91 a0 02 	lds	r19, 0x02A0
     dae:	f9 01       	movw	r30, r18
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	ed 55       	subi	r30, 0x5D	; 93
     dba:	fd 4f       	sbci	r31, 0xFD	; 253
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	8f 3f       	cpi	r24, 0xFF	; 255
     dc2:	4f ef       	ldi	r20, 0xFF	; 255
     dc4:	94 07       	cpc	r25, r20
     dc6:	51 f0       	breq	.+20     	; 0xddc <terminalCheck1+0x118>
     dc8:	f9 01       	movw	r30, r18
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	ed 54       	subi	r30, 0x4D	; 77
     dd0:	fd 4f       	sbci	r31, 0xFD	; 253
     dd2:	20 81       	ld	r18, Z
     dd4:	31 81       	ldd	r19, Z+1	; 0x01
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	49 f4       	brne	.+18     	; 0xdee <terminalCheck1+0x12a>
	total--;
     ddc:	80 91 00 02 	lds	r24, 0x0200
     de0:	90 91 01 02 	lds	r25, 0x0201
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	90 93 01 02 	sts	0x0201, r25
     dea:	80 93 00 02 	sts	0x0200, r24
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <terminalCheck2>:
void terminalCheck2()
{
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     df8:	80 91 9f 02 	lds	r24, 0x029F
     dfc:	90 91 a0 02 	lds	r25, 0x02A0
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	91 05       	cpc	r25, r1
     e04:	30 f4       	brcc	.+12     	; 0xe12 <terminalCheck2+0x1e>
     e06:	20 91 70 02 	lds	r18, 0x0270
     e0a:	30 91 71 02 	lds	r19, 0x0271
     e0e:	23 2b       	or	r18, r19
     e10:	69 f0       	breq	.+26     	; 0xe2c <terminalCheck2+0x38>
     e12:	9c 01       	movw	r18, r24
     e14:	22 50       	subi	r18, 0x02	; 2
     e16:	31 09       	sbc	r19, r1
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	48 f4       	brcc	.+18     	; 0xe30 <terminalCheck2+0x3c>
     e1e:	40 91 70 02 	lds	r20, 0x0270
     e22:	50 91 71 02 	lds	r21, 0x0271
     e26:	42 30       	cpi	r20, 0x02	; 2
     e28:	51 05       	cpc	r21, r1
     e2a:	11 f4       	brne	.+4      	; 0xe30 <terminalCheck2+0x3c>
		turnLeft();
     e2c:	ea dd       	rcall	.-1068   	; 0xa02 <turnLeft>
     e2e:	14 c0       	rjmp	.+40     	; 0xe58 <terminalCheck2+0x64>
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     e30:	02 97       	sbiw	r24, 0x02	; 2
     e32:	30 f4       	brcc	.+12     	; 0xe40 <terminalCheck2+0x4c>
     e34:	80 91 70 02 	lds	r24, 0x0270
     e38:	90 91 71 02 	lds	r25, 0x0271
     e3c:	02 97       	sbiw	r24, 0x02	; 2
     e3e:	49 f0       	breq	.+18     	; 0xe52 <terminalCheck2+0x5e>
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	40 f4       	brcc	.+16     	; 0xe56 <terminalCheck2+0x62>
     e46:	80 91 70 02 	lds	r24, 0x0270
     e4a:	90 91 71 02 	lds	r25, 0x0271
     e4e:	89 2b       	or	r24, r25
     e50:	11 f4       	brne	.+4      	; 0xe56 <terminalCheck2+0x62>
		turnRight();
     e52:	c4 dd       	rcall	.-1144   	; 0x9dc <turnRight>
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <terminalCheck2+0x64>
	else turn();
     e56:	e8 dd       	rcall	.-1072   	; 0xa28 <turn>
	//..printf("Enter term[%d][%d]\n", ct, 1);
	//..scanf("%d", &term[ct][1]);
	term[ct][1]=scan();
     e58:	c0 91 9f 02 	lds	r28, 0x029F
     e5c:	d0 91 a0 02 	lds	r29, 0x02A0
     e60:	52 de       	rcall	.-860    	; 0xb06 <scan>
     e62:	cc 0f       	add	r28, r28
     e64:	dd 1f       	adc	r29, r29
     e66:	cc 0f       	add	r28, r28
     e68:	dd 1f       	adc	r29, r29
     e6a:	cd 55       	subi	r28, 0x5D	; 93
     e6c:	dd 4f       	sbci	r29, 0xFD	; 253
     e6e:	9b 83       	std	Y+3, r25	; 0x03
     e70:	8a 83       	std	Y+2, r24	; 0x02
	lcd((char*)term[ct][1]);
     e72:	e0 91 9f 02 	lds	r30, 0x029F
     e76:	f0 91 a0 02 	lds	r31, 0x02A0
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	ed 55       	subi	r30, 0x5D	; 93
     e84:	fd 4f       	sbci	r31, 0xFD	; 253
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	ce db       	rcall	.-2148   	; 0x628 <lcd>
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
     e8c:	80 91 9f 02 	lds	r24, 0x029F
     e90:	90 91 a0 02 	lds	r25, 0x02A0
     e94:	fc 01       	movw	r30, r24
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ed 55       	subi	r30, 0x5D	; 93
     ea0:	fd 4f       	sbci	r31, 0xFD	; 253
     ea2:	22 81       	ldd	r18, Z+2	; 0x02
     ea4:	33 81       	ldd	r19, Z+3	; 0x03
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	4f ef       	ldi	r20, 0xFF	; 255
     eaa:	34 07       	cpc	r19, r20
     eac:	51 f0       	breq	.+20     	; 0xec2 <terminalCheck2+0xce>
     eae:	fc 01       	movw	r30, r24
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ed 54       	subi	r30, 0x4D	; 77
     eb6:	fd 4f       	sbci	r31, 0xFD	; 253
     eb8:	40 81       	ld	r20, Z
     eba:	51 81       	ldd	r21, Z+1	; 0x01
     ebc:	24 17       	cp	r18, r20
     ebe:	35 07       	cpc	r19, r21
     ec0:	51 f4       	brne	.+20     	; 0xed6 <terminalCheck2+0xe2>
		total--;
     ec2:	20 91 00 02 	lds	r18, 0x0200
     ec6:	30 91 01 02 	lds	r19, 0x0201
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	31 09       	sbc	r19, r1
     ece:	30 93 01 02 	sts	0x0201, r19
     ed2:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
     ed6:	fc 01       	movw	r30, r24
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e4 58       	subi	r30, 0x84	; 132
     ede:	fd 4f       	sbci	r31, 0xFD	; 253
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
	visitedCount++;
     ee8:	80 91 74 02 	lds	r24, 0x0274
     eec:	90 91 75 02 	lds	r25, 0x0275
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	90 93 75 02 	sts	0x0275, r25
     ef6:	80 93 74 02 	sts	0x0274, r24
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <elevate>:
void elevate(unsigned char angle, unsigned char side)
{
	if (side == 0)
     f00:	61 11       	cpse	r22, r1
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <elevate+0x8>
	servo_1(angle);
     f04:	c7 ca       	rjmp	.-2674   	; 0x494 <servo_1>
     f06:	08 95       	ret
	else if (side == 1)
     f08:	61 30       	cpi	r22, 0x01	; 1
     f0a:	31 f4       	brne	.+12     	; 0xf18 <elevate+0x18>
	servo_1((angle == 45) ? 0 : 45);
     f0c:	8d 32       	cpi	r24, 0x2D	; 45
     f0e:	11 f4       	brne	.+4      	; 0xf14 <elevate+0x14>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <elevate+0x16>
     f14:	8d e2       	ldi	r24, 0x2D	; 45
     f16:	be ca       	rjmp	.-2692   	; 0x494 <servo_1>
     f18:	08 95       	ret

00000f1a <open>:
}
void open(unsigned char side)
{
	if (side == 0)
     f1a:	81 11       	cpse	r24, r1
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <open+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     f1e:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     f22:	83 e8       	ldi	r24, 0x83	; 131
     f24:	80 93 8a 00 	sts	0x008A, r24
     f28:	08 95       	ret
	servo_2(180);
	else if (side == 1)
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	29 f4       	brne	.+10     	; 0xf38 <open+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     f2e:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     f32:	83 e8       	ldi	r24, 0x83	; 131
     f34:	80 93 8c 00 	sts	0x008C, r24
     f38:	08 95       	ret

00000f3a <close>:
	servo_3(180);
}
void close(unsigned char side)
{
	if (side == 0)
     f3a:	81 11       	cpse	r24, r1
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <close+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     f3e:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     f42:	83 e2       	ldi	r24, 0x23	; 35
     f44:	80 93 8a 00 	sts	0x008A, r24
     f48:	08 95       	ret
	servo_2(0);
	else if (side == 1)
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	29 f4       	brne	.+10     	; 0xf58 <close+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     f4e:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     f52:	83 e2       	ldi	r24, 0x23	; 35
     f54:	80 93 8c 00 	sts	0x008C, r24
     f58:	08 95       	ret

00000f5a <pick>:
	servo_3(0);
}
void pick(int side)	//TODO delay
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
	if(side==0)
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	21 f4       	brne	.+8      	; 0xf6c <pick+0x12>
		lcd("pickRight");
     f64:	87 e2       	ldi	r24, 0x27	; 39
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	5f db       	rcall	.-2370   	; 0x628 <lcd>
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <pick+0x18>
	else
		lcd("pickLeft");
     f6c:	81 e3       	ldi	r24, 0x31	; 49
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	5b db       	rcall	.-2378   	; 0x628 <lcd>
	elevate(0, side);//lower
     f72:	6c 2f       	mov	r22, r28
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	c4 df       	rcall	.-120    	; 0xf00 <elevate>
	open(side);
     f78:	8c 2f       	mov	r24, r28
     f7a:	cf df       	rcall	.-98     	; 0xf1a <open>
	close(side);
     f7c:	8c 2f       	mov	r24, r28
     f7e:	dd df       	rcall	.-70     	; 0xf3a <close>
	elevate(45, side);//mid
     f80:	6c 2f       	mov	r22, r28
     f82:	8d e2       	ldi	r24, 0x2D	; 45
     f84:	bd df       	rcall	.-134    	; 0xf00 <elevate>
	armCount--;
     f86:	80 91 02 02 	lds	r24, 0x0202
     f8a:	90 91 03 02 	lds	r25, 0x0203
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	90 93 03 02 	sts	0x0203, r25
     f94:	80 93 02 02 	sts	0x0202, r24
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <position>:

void position(int armNo,int side)
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	8c 01       	movw	r16, r24
     fa8:	eb 01       	movw	r28, r22
	if (ct == ot)
     faa:	20 91 9f 02 	lds	r18, 0x029F
     fae:	30 91 a0 02 	lds	r19, 0x02A0
     fb2:	40 91 72 02 	lds	r20, 0x0272
     fb6:	50 91 73 02 	lds	r21, 0x0273
     fba:	24 17       	cp	r18, r20
     fbc:	35 07       	cpc	r19, r21
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <position+0x24>
     fc0:	6a c0       	rjmp	.+212    	; 0x1096 <position+0xf8>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     fc2:	c9 01       	movw	r24, r18
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	30 f4       	brcc	.+12     	; 0xfd6 <position+0x38>
     fca:	40 91 70 02 	lds	r20, 0x0270
     fce:	50 91 71 02 	lds	r21, 0x0271
     fd2:	45 2b       	or	r20, r21
     fd4:	61 f0       	breq	.+24     	; 0xfee <position+0x50>
     fd6:	22 50       	subi	r18, 0x02	; 2
     fd8:	31 09       	sbc	r19, r1
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	68 f4       	brcc	.+26     	; 0xffa <position+0x5c>
     fe0:	40 91 70 02 	lds	r20, 0x0270
     fe4:	50 91 71 02 	lds	r21, 0x0271
     fe8:	42 30       	cpi	r20, 0x02	; 2
     fea:	51 05       	cpc	r21, r1
     fec:	31 f4       	brne	.+12     	; 0xffa <position+0x5c>
		{
			if (armNo != side)
     fee:	0c 17       	cp	r16, r28
     ff0:	1d 07       	cpc	r17, r29
     ff2:	09 f4       	brne	.+2      	; 0xff6 <position+0x58>
     ff4:	a8 c0       	rjmp	.+336    	; 0x1146 <position+0x1a8>
			turn();
     ff6:	18 dd       	rcall	.-1488   	; 0xa28 <turn>
     ff8:	a6 c0       	rjmp	.+332    	; 0x1146 <position+0x1a8>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	91 05       	cpc	r25, r1
     ffe:	38 f4       	brcc	.+14     	; 0x100e <position+0x70>
    1000:	40 91 70 02 	lds	r20, 0x0270
    1004:	50 91 71 02 	lds	r21, 0x0271
    1008:	42 30       	cpi	r20, 0x02	; 2
    100a:	51 05       	cpc	r21, r1
    100c:	49 f0       	breq	.+18     	; 0x1020 <position+0x82>
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	60 f4       	brcc	.+24     	; 0x102c <position+0x8e>
    1014:	40 91 70 02 	lds	r20, 0x0270
    1018:	50 91 71 02 	lds	r21, 0x0271
    101c:	45 2b       	or	r20, r21
    101e:	31 f4       	brne	.+12     	; 0x102c <position+0x8e>
		{
			if (armNo == side)
    1020:	0c 17       	cp	r16, r28
    1022:	1d 07       	cpc	r17, r29
    1024:	09 f0       	breq	.+2      	; 0x1028 <position+0x8a>
    1026:	8f c0       	rjmp	.+286    	; 0x1146 <position+0x1a8>
			turn();
    1028:	ff dc       	rcall	.-1538   	; 0xa28 <turn>
    102a:	8d c0       	rjmp	.+282    	; 0x1146 <position+0x1a8>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	38 f4       	brcc	.+14     	; 0x1040 <position+0xa2>
    1032:	40 91 70 02 	lds	r20, 0x0270
    1036:	50 91 71 02 	lds	r21, 0x0271
    103a:	41 30       	cpi	r20, 0x01	; 1
    103c:	51 05       	cpc	r21, r1
    103e:	51 f0       	breq	.+20     	; 0x1054 <position+0xb6>
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	70 f4       	brcc	.+28     	; 0x1062 <position+0xc4>
    1046:	40 91 70 02 	lds	r20, 0x0270
    104a:	50 91 71 02 	lds	r21, 0x0271
    104e:	43 30       	cpi	r20, 0x03	; 3
    1050:	51 05       	cpc	r21, r1
    1052:	39 f4       	brne	.+14     	; 0x1062 <position+0xc4>
		{
			if (armNo != side)
    1054:	0c 17       	cp	r16, r28
    1056:	1d 07       	cpc	r17, r29
    1058:	11 f0       	breq	.+4      	; 0x105e <position+0xc0>
			turnRight();
    105a:	c0 dc       	rcall	.-1664   	; 0x9dc <turnRight>
    105c:	74 c0       	rjmp	.+232    	; 0x1146 <position+0x1a8>
			else turnLeft();
    105e:	d1 dc       	rcall	.-1630   	; 0xa02 <turnLeft>
    1060:	72 c0       	rjmp	.+228    	; 0x1146 <position+0x1a8>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1062:	02 97       	sbiw	r24, 0x02	; 2
    1064:	30 f4       	brcc	.+12     	; 0x1072 <position+0xd4>
    1066:	80 91 70 02 	lds	r24, 0x0270
    106a:	90 91 71 02 	lds	r25, 0x0271
    106e:	03 97       	sbiw	r24, 0x03	; 3
    1070:	59 f0       	breq	.+22     	; 0x1088 <position+0xea>
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	08 f0       	brcs	.+2      	; 0x107a <position+0xdc>
    1078:	66 c0       	rjmp	.+204    	; 0x1146 <position+0x1a8>
    107a:	80 91 70 02 	lds	r24, 0x0270
    107e:	90 91 71 02 	lds	r25, 0x0271
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	09 f0       	breq	.+2      	; 0x1088 <position+0xea>
    1086:	5f c0       	rjmp	.+190    	; 0x1146 <position+0x1a8>
		if (armNo == side)
    1088:	0c 17       	cp	r16, r28
    108a:	1d 07       	cpc	r17, r29
    108c:	11 f4       	brne	.+4      	; 0x1092 <position+0xf4>
		turnRight();
    108e:	a6 dc       	rcall	.-1716   	; 0x9dc <turnRight>
    1090:	5a c0       	rjmp	.+180    	; 0x1146 <position+0x1a8>
		else turnLeft();
    1092:	b7 dc       	rcall	.-1682   	; 0xa02 <turnLeft>
    1094:	58 c0       	rjmp	.+176    	; 0x1146 <position+0x1a8>
	}
	else
	{
		if (dir == 0 || dir == 2)
    1096:	80 91 70 02 	lds	r24, 0x0270
    109a:	90 91 71 02 	lds	r25, 0x0271
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <position+0x10a>
    10a2:	02 97       	sbiw	r24, 0x02	; 2
    10a4:	81 f5       	brne	.+96     	; 0x1106 <position+0x168>
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <position+0x112>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	a8 f4       	brcc	.+42     	; 0x10d8 <position+0x13a>
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <position+0x11c>
    10b0:	22 50       	subi	r18, 0x02	; 2
    10b2:	31 09       	sbc	r19, r1
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	78 f4       	brcc	.+30     	; 0x10d8 <position+0x13a>
			{
				if (ot != 4 && ot != 5)
    10ba:	44 50       	subi	r20, 0x04	; 4
    10bc:	51 09       	sbc	r21, r1
    10be:	42 30       	cpi	r20, 0x02	; 2
    10c0:	51 05       	cpc	r21, r1
    10c2:	10 f0       	brcs	.+4      	; 0x10c8 <position+0x12a>
				{
					turnLeft();
    10c4:	9e dc       	rcall	.-1732   	; 0xa02 <turnLeft>
					front();
    10c6:	7f dc       	rcall	.-1794   	; 0x9c6 <front>
				}
				if (armNo == side)
    10c8:	0c 17       	cp	r16, r28
    10ca:	1d 07       	cpc	r17, r29
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <position+0x134>
				{
					front();
    10ce:	7b dc       	rcall	.-1802   	; 0x9c6 <front>
    10d0:	32 c0       	rjmp	.+100    	; 0x1136 <position+0x198>
				}
				else
				{
					front();
    10d2:	79 dc       	rcall	.-1806   	; 0x9c6 <front>
					turn();
    10d4:	a9 dc       	rcall	.-1710   	; 0xa28 <turn>
    10d6:	2f c0       	rjmp	.+94     	; 0x1136 <position+0x198>
				}
			}
			else
			{
				if (armNo == side)
    10d8:	0c 17       	cp	r16, r28
    10da:	1d 07       	cpc	r17, r29
    10dc:	59 f4       	brne	.+22     	; 0x10f4 <position+0x156>
				{
					if (ot != 4 && ot != 5)
    10de:	44 50       	subi	r20, 0x04	; 4
    10e0:	51 09       	sbc	r21, r1
    10e2:	42 30       	cpi	r20, 0x02	; 2
    10e4:	51 05       	cpc	r21, r1
    10e6:	18 f0       	brcs	.+6      	; 0x10ee <position+0x150>
					{
						turnLeft();
    10e8:	8c dc       	rcall	.-1768   	; 0xa02 <turnLeft>
						front();
    10ea:	6d dc       	rcall	.-1830   	; 0x9c6 <front>
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <position+0x152>
					}
					else turn();
    10ee:	9c dc       	rcall	.-1736   	; 0xa28 <turn>
					front();
    10f0:	6a dc       	rcall	.-1836   	; 0x9c6 <front>
    10f2:	21 c0       	rjmp	.+66     	; 0x1136 <position+0x198>
				}
				else
				{
					if (ot != 4 && ot != 5)
    10f4:	44 50       	subi	r20, 0x04	; 4
    10f6:	51 09       	sbc	r21, r1
    10f8:	42 30       	cpi	r20, 0x02	; 2
    10fa:	51 05       	cpc	r21, r1
    10fc:	10 f0       	brcs	.+4      	; 0x1102 <position+0x164>
					{
						turnLeft();
    10fe:	81 dc       	rcall	.-1790   	; 0xa02 <turnLeft>
						front();
    1100:	62 dc       	rcall	.-1852   	; 0x9c6 <front>
					}
					front();
    1102:	61 dc       	rcall	.-1854   	; 0x9c6 <front>
    1104:	18 c0       	rjmp	.+48     	; 0x1136 <position+0x198>
				}
			}
		}
		else
		{
			if (armNo == side)
    1106:	06 17       	cp	r16, r22
    1108:	17 07       	cpc	r17, r23
    110a:	59 f4       	brne	.+22     	; 0x1122 <position+0x184>
			{
				if (ct == 0 || ct == 3)
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	19 f0       	breq	.+6      	; 0x1118 <position+0x17a>
    1112:	23 30       	cpi	r18, 0x03	; 3
    1114:	31 05       	cpc	r19, r1
    1116:	11 f4       	brne	.+4      	; 0x111c <position+0x17e>
				turnRight();
    1118:	61 dc       	rcall	.-1854   	; 0x9dc <turnRight>
    111a:	01 c0       	rjmp	.+2      	; 0x111e <position+0x180>
				else turnLeft();
    111c:	72 dc       	rcall	.-1820   	; 0xa02 <turnLeft>
				front();
    111e:	53 dc       	rcall	.-1882   	; 0x9c6 <front>
    1120:	0a c0       	rjmp	.+20     	; 0x1136 <position+0x198>
			}
			else
			{
				if (ct == 0 || ct == 3)
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	19 f0       	breq	.+6      	; 0x112e <position+0x190>
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	11 f4       	brne	.+4      	; 0x1132 <position+0x194>
				turnRight();
    112e:	56 dc       	rcall	.-1876   	; 0x9dc <turnRight>
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <position+0x196>
				else turnLeft();
    1132:	67 dc       	rcall	.-1842   	; 0xa02 <turnLeft>
				front();
    1134:	48 dc       	rcall	.-1904   	; 0x9c6 <front>
			}
		}
		ot = ct;
    1136:	80 91 9f 02 	lds	r24, 0x029F
    113a:	90 91 a0 02 	lds	r25, 0x02A0
    113e:	90 93 73 02 	sts	0x0273, r25
    1142:	80 93 72 02 	sts	0x0272, r24
	}
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	08 95       	ret

00001150 <pickNode>:
void pickNode(int armNo, int side)
{
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	8c 01       	movw	r16, r24
    115a:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    115c:	fc 01       	movw	r30, r24
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	e9 53       	subi	r30, 0x39	; 57
    1164:	fd 4f       	sbci	r31, 0xFD	; 253
    1166:	a0 91 9f 02 	lds	r26, 0x029F
    116a:	b0 91 a0 02 	lds	r27, 0x02A0
    116e:	aa 0f       	add	r26, r26
    1170:	bb 1f       	adc	r27, r27
    1172:	a6 0f       	add	r26, r22
    1174:	b7 1f       	adc	r27, r23
    1176:	aa 0f       	add	r26, r26
    1178:	bb 1f       	adc	r27, r27
    117a:	ad 55       	subi	r26, 0x5D	; 93
    117c:	bd 4f       	sbci	r27, 0xFD	; 253
    117e:	8d 91       	ld	r24, X+
    1180:	9c 91       	ld	r25, X
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	80 83       	st	Z, r24
	position(armNo,side);
    1186:	c8 01       	movw	r24, r16
    1188:	0a df       	rcall	.-492    	; 0xf9e <position>
	pick(armNo);
    118a:	c8 01       	movw	r24, r16
    118c:	e6 de       	rcall	.-564    	; 0xf5a <pick>
	term[ct][side] = -1;
    118e:	80 91 9f 02 	lds	r24, 0x029F
    1192:	90 91 a0 02 	lds	r25, 0x02A0
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	c8 0f       	add	r28, r24
    119c:	d9 1f       	adc	r29, r25
    119e:	cc 0f       	add	r28, r28
    11a0:	dd 1f       	adc	r29, r29
    11a2:	cd 55       	subi	r28, 0x5D	; 93
    11a4:	dd 4f       	sbci	r29, 0xFD	; 253
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	88 83       	st	Y, r24
	//..printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	08 95       	ret

000011b8 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ec 01       	movw	r28, r24
    11c2:	8b 01       	movw	r16, r22
	lcd("pickSort");
    11c4:	8a e3       	ldi	r24, 0x3A	; 58
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	2f da       	rcall	.-2978   	; 0x628 <lcd>
	arm[armNo] = sort[sortNo];
    11ca:	fe 01       	movw	r30, r28
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	e9 53       	subi	r30, 0x39	; 57
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	d8 01       	movw	r26, r16
    11d6:	aa 0f       	add	r26, r26
    11d8:	bb 1f       	adc	r27, r27
    11da:	a5 56       	subi	r26, 0x65	; 101
    11dc:	bd 4f       	sbci	r27, 0xFD	; 253
    11de:	8d 91       	ld	r24, X+
    11e0:	9c 91       	ld	r25, X
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    11e6:	c0 17       	cp	r28, r16
    11e8:	d1 07       	cpc	r29, r17
    11ea:	39 f4       	brne	.+14     	; 0x11fa <pickSort+0x42>
    11ec:	80 91 70 02 	lds	r24, 0x0270
    11f0:	90 91 71 02 	lds	r25, 0x0271
    11f4:	89 2b       	or	r24, r25
    11f6:	49 f4       	brne	.+18     	; 0x120a <pickSort+0x52>
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <pickSort+0x4e>
    11fa:	80 91 70 02 	lds	r24, 0x0270
    11fe:	90 91 71 02 	lds	r25, 0x0271
    1202:	02 97       	sbiw	r24, 0x02	; 2
    1204:	11 f4       	brne	.+4      	; 0x120a <pickSort+0x52>
		turn();
    1206:	10 dc       	rcall	.-2016   	; 0xa28 <turn>
    1208:	0c c0       	rjmp	.+24     	; 0x1222 <pickSort+0x6a>
	else
	{
		if (dir == 1 || dir == 3)
    120a:	80 91 70 02 	lds	r24, 0x0270
    120e:	90 91 71 02 	lds	r25, 0x0271
    1212:	8d 7f       	andi	r24, 0xFD	; 253
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	29 f4       	brne	.+10     	; 0x1222 <pickSort+0x6a>
		{
			if (armNo == 0)
    1218:	20 97       	sbiw	r28, 0x00	; 0
    121a:	11 f4       	brne	.+4      	; 0x1220 <pickSort+0x68>
				turnLeft();
    121c:	f2 db       	rcall	.-2076   	; 0xa02 <turnLeft>
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <pickSort+0x6a>
			else turnRight();
    1220:	dd db       	rcall	.-2118   	; 0x9dc <turnRight>
		}
	}
	pick(armNo);
    1222:	ce 01       	movw	r24, r28
    1224:	9a de       	rcall	.-716    	; 0xf5a <pick>
	sort[sortNo] = -1;
    1226:	f8 01       	movw	r30, r16
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	e5 56       	subi	r30, 0x65	; 101
    122e:	fd 4f       	sbci	r31, 0xFD	; 253
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	08 95       	ret

00001242 <pickup>:
void pickup()
{
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
	lcd("pickup");
    124e:	83 e4       	ldi	r24, 0x43	; 67
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	ea d9       	rcall	.-3116   	; 0x628 <lcd>
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1254:	20 91 9f 02 	lds	r18, 0x029F
    1258:	30 91 a0 02 	lds	r19, 0x02A0
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	30 f4       	brcc	.+12     	; 0x126e <pickup+0x2c>
    1262:	80 91 70 02 	lds	r24, 0x0270
    1266:	90 91 71 02 	lds	r25, 0x0271
    126a:	02 97       	sbiw	r24, 0x02	; 2
    126c:	79 f0       	breq	.+30     	; 0x128c <pickup+0x4a>
    126e:	c9 01       	movw	r24, r18
    1270:	02 97       	sbiw	r24, 0x02	; 2
    1272:	02 97       	sbiw	r24, 0x02	; 2
    1274:	80 f4       	brcc	.+32     	; 0x1296 <pickup+0x54>
    1276:	80 91 70 02 	lds	r24, 0x0270
    127a:	90 91 71 02 	lds	r25, 0x0271
    127e:	89 2b       	or	r24, r25
    1280:	79 f0       	breq	.+30     	; 0x12a0 <pickup+0x5e>
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
    1282:	c1 e0       	ldi	r28, 0x01	; 1
    1284:	d0 e0       	ldi	r29, 0x00	; 0
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	10 e0       	ldi	r17, 0x00	; 0
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <pickup+0x66>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    128c:	c0 e0       	ldi	r28, 0x00	; 0
    128e:	d0 e0       	ldi	r29, 0x00	; 0
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1290:	01 e0       	ldi	r16, 0x01	; 1
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <pickup+0x66>
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
    1296:	c1 e0       	ldi	r28, 0x01	; 1
    1298:	d0 e0       	ldi	r29, 0x00	; 0
    129a:	00 e0       	ldi	r16, 0x00	; 0
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <pickup+0x66>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    12a0:	c0 e0       	ldi	r28, 0x00	; 0
    12a2:	d0 e0       	ldi	r29, 0x00	; 0
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    12a4:	01 e0       	ldi	r16, 0x01	; 1
    12a6:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    12a8:	f9 01       	movw	r30, r18
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	e4 58       	subi	r30, 0x84	; 132
    12b0:	fd 4f       	sbci	r31, 0xFD	; 253
    12b2:	40 81       	ld	r20, Z
    12b4:	51 81       	ldd	r21, Z+1	; 0x01
    12b6:	45 2b       	or	r20, r21
    12b8:	09 f0       	breq	.+2      	; 0x12bc <pickup+0x7a>
    12ba:	24 c2       	rjmp	.+1096   	; 0x1704 <pickup+0x4c2>
	{
		if (term[ct][0] == -2)
    12bc:	f9 01       	movw	r30, r18
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	ed 55       	subi	r30, 0x5D	; 93
    12c8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	02 96       	adiw	r24, 0x02	; 2
    12d0:	19 f4       	brne	.+6      	; 0x12d8 <pickup+0x96>
		{
			terminalCheck1();
    12d2:	f8 dc       	rcall	.-1552   	; 0xcc4 <terminalCheck1>
			terminalCheck2();
    12d4:	8f dd       	rcall	.-1250   	; 0xdf4 <terminalCheck2>
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <pickup+0x98>
		}
		else
			terminalCheck2();
    12d8:	8d dd       	rcall	.-1254   	; 0xdf4 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    12da:	20 91 9f 02 	lds	r18, 0x029F
    12de:	30 91 a0 02 	lds	r19, 0x02A0
    12e2:	f9 01       	movw	r30, r18
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	ed 55       	subi	r30, 0x5D	; 93
    12ee:	fd 4f       	sbci	r31, 0xFD	; 253
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	f9 01       	movw	r30, r18
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	ed 54       	subi	r30, 0x4D	; 77
    12fc:	fd 4f       	sbci	r31, 0xFD	; 253
    12fe:	40 81       	ld	r20, Z
    1300:	51 81       	ldd	r21, Z+1	; 0x01
    1302:	84 17       	cp	r24, r20
    1304:	95 07       	cpc	r25, r21
    1306:	21 f0       	breq	.+8      	; 0x1310 <pickup+0xce>
    1308:	8f 3f       	cpi	r24, 0xFF	; 255
    130a:	6f ef       	ldi	r22, 0xFF	; 255
    130c:	96 07       	cpc	r25, r22
    130e:	89 f4       	brne	.+34     	; 0x1332 <pickup+0xf0>
    1310:	f9 01       	movw	r30, r18
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ed 55       	subi	r30, 0x5D	; 93
    131c:	fd 4f       	sbci	r31, 0xFD	; 253
    131e:	62 81       	ldd	r22, Z+2	; 0x02
    1320:	73 81       	ldd	r23, Z+3	; 0x03
    1322:	46 17       	cp	r20, r22
    1324:	57 07       	cpc	r21, r23
    1326:	09 f4       	brne	.+2      	; 0x132a <pickup+0xe8>
    1328:	ed c1       	rjmp	.+986    	; 0x1704 <pickup+0x4c2>
    132a:	6f 3f       	cpi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	09 f4       	brne	.+2      	; 0x1332 <pickup+0xf0>
    1330:	e9 c1       	rjmp	.+978    	; 0x1704 <pickup+0x4c2>
		{
			if (armCount == 2)
    1332:	60 91 02 02 	lds	r22, 0x0202
    1336:	70 91 03 02 	lds	r23, 0x0203
    133a:	62 30       	cpi	r22, 0x02	; 2
    133c:	71 05       	cpc	r23, r1
    133e:	09 f0       	breq	.+2      	; 0x1342 <pickup+0x100>
    1340:	af c0       	rjmp	.+350    	; 0x14a0 <pickup+0x25e>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1342:	e0 91 c3 02 	lds	r30, 0x02C3
    1346:	f0 91 c4 02 	lds	r31, 0x02C4
    134a:	df 01       	movw	r26, r30
    134c:	aa 0f       	add	r26, r26
    134e:	bb 1f       	adc	r27, r27
    1350:	ad 54       	subi	r26, 0x4D	; 77
    1352:	bd 4f       	sbci	r27, 0xFD	; 253
    1354:	6d 91       	ld	r22, X+
    1356:	7c 91       	ld	r23, X
    1358:	86 17       	cp	r24, r22
    135a:	97 07       	cpc	r25, r23
    135c:	79 f0       	breq	.+30     	; 0x137c <pickup+0x13a>
    135e:	d9 01       	movw	r26, r18
    1360:	aa 0f       	add	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	aa 0f       	add	r26, r26
    1366:	bb 1f       	adc	r27, r27
    1368:	ad 55       	subi	r26, 0x5D	; 93
    136a:	bd 4f       	sbci	r27, 0xFD	; 253
    136c:	12 96       	adiw	r26, 0x02	; 2
    136e:	ed 90       	ld	r14, X+
    1370:	fc 90       	ld	r15, X
    1372:	13 97       	sbiw	r26, 0x03	; 3
    1374:	6e 15       	cp	r22, r14
    1376:	7f 05       	cpc	r23, r15
    1378:	59 f4       	brne	.+22     	; 0x1390 <pickup+0x14e>
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <pickup+0x144>
				{
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	c8 01       	movw	r24, r16
    1382:	e6 de       	rcall	.-564    	; 0x1150 <pickNode>
    1384:	8d c0       	rjmp	.+282    	; 0x14a0 <pickup+0x25e>
					else	pickNode(arm1, 1);
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	ce 01       	movw	r24, r28
    138c:	e1 de       	rcall	.-574    	; 0x1150 <pickNode>
    138e:	88 c0       	rjmp	.+272    	; 0x14a0 <pickup+0x25e>
				}
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1390:	4e 15       	cp	r20, r14
    1392:	5f 05       	cpc	r21, r15
    1394:	09 f4       	brne	.+2      	; 0x1398 <pickup+0x156>
    1396:	4e c0       	rjmp	.+156    	; 0x1434 <pickup+0x1f2>
    1398:	ef 20       	and	r14, r15
    139a:	e0 94       	com	r14
    139c:	09 f4       	brne	.+2      	; 0x13a0 <pickup+0x15e>
    139e:	4a c0       	rjmp	.+148    	; 0x1434 <pickup+0x1f2>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    13a0:	84 17       	cp	r24, r20
    13a2:	95 07       	cpc	r25, r21
    13a4:	69 f0       	breq	.+26     	; 0x13c0 <pickup+0x17e>
    13a6:	8f 3f       	cpi	r24, 0xFF	; 255
    13a8:	af ef       	ldi	r26, 0xFF	; 255
    13aa:	9a 07       	cpc	r25, r26
    13ac:	49 f0       	breq	.+18     	; 0x13c0 <pickup+0x17e>
					{
						pickNode(arm1, 1);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	ce 01       	movw	r24, r28
    13b4:	cd de       	rcall	.-614    	; 0x1150 <pickNode>
						pickNode(arm0, 0);
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	c8 01       	movw	r24, r16
    13bc:	c9 de       	rcall	.-622    	; 0x1150 <pickNode>
    13be:	70 c0       	rjmp	.+224    	; 0x14a0 <pickup+0x25e>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    13c0:	21 70       	andi	r18, 0x01	; 1
    13c2:	30 78       	andi	r19, 0x80	; 128
    13c4:	33 23       	and	r19, r19
    13c6:	34 f4       	brge	.+12     	; 0x13d4 <pickup+0x192>
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	31 09       	sbc	r19, r1
    13cc:	2e 6f       	ori	r18, 0xFE	; 254
    13ce:	3f 6f       	ori	r19, 0xFF	; 255
    13d0:	2f 5f       	subi	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	d9 01       	movw	r26, r18
    13d6:	aa 0f       	add	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	a5 56       	subi	r26, 0x65	; 101
    13dc:	bd 4f       	sbci	r27, 0xFD	; 253
    13de:	2d 91       	ld	r18, X+
    13e0:	3c 91       	ld	r19, X
    13e2:	2f 3f       	cpi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	09 f1       	breq	.+66     	; 0x142a <pickup+0x1e8>
    13e8:	df 01       	movw	r26, r30
    13ea:	aa 0f       	add	r26, r26
    13ec:	bb 1f       	adc	r27, r27
    13ee:	aa 0f       	add	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	ad 55       	subi	r26, 0x5D	; 93
    13f4:	bd 4f       	sbci	r27, 0xFD	; 253
    13f6:	2d 91       	ld	r18, X+
    13f8:	3c 91       	ld	r19, X
    13fa:	62 17       	cp	r22, r18
    13fc:	73 07       	cpc	r23, r19
    13fe:	a9 f0       	breq	.+42     	; 0x142a <pickup+0x1e8>
    1400:	2f 3f       	cpi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	91 f0       	breq	.+36     	; 0x142a <pickup+0x1e8>
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ed 55       	subi	r30, 0x5D	; 93
    1410:	fd 4f       	sbci	r31, 0xFD	; 253
    1412:	22 81       	ldd	r18, Z+2	; 0x02
    1414:	33 81       	ldd	r19, Z+3	; 0x03
    1416:	62 17       	cp	r22, r18
    1418:	73 07       	cpc	r23, r19
    141a:	39 f0       	breq	.+14     	; 0x142a <pickup+0x1e8>
    141c:	2f 3f       	cpi	r18, 0xFF	; 255
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	21 f0       	breq	.+8      	; 0x142a <pickup+0x1e8>
    1422:	84 17       	cp	r24, r20
    1424:	95 07       	cpc	r25, r21
    1426:	09 f0       	breq	.+2      	; 0x142a <pickup+0x1e8>
    1428:	6d c1       	rjmp	.+730    	; 0x1704 <pickup+0x4c2>
						pickNode(arm1, 1);
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	ce 01       	movw	r24, r28
    1430:	8f de       	rcall	.-738    	; 0x1150 <pickNode>
    1432:	36 c0       	rjmp	.+108    	; 0x14a0 <pickup+0x25e>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1434:	84 17       	cp	r24, r20
    1436:	95 07       	cpc	r25, r21
    1438:	09 f4       	brne	.+2      	; 0x143c <pickup+0x1fa>
    143a:	64 c1       	rjmp	.+712    	; 0x1704 <pickup+0x4c2>
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	09 f4       	brne	.+2      	; 0x1442 <pickup+0x200>
    1440:	61 c1       	rjmp	.+706    	; 0x1704 <pickup+0x4c2>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1442:	21 70       	andi	r18, 0x01	; 1
    1444:	30 78       	andi	r19, 0x80	; 128
    1446:	33 23       	and	r19, r19
    1448:	34 f4       	brge	.+12     	; 0x1456 <pickup+0x214>
    144a:	21 50       	subi	r18, 0x01	; 1
    144c:	31 09       	sbc	r19, r1
    144e:	2e 6f       	ori	r18, 0xFE	; 254
    1450:	3f 6f       	ori	r19, 0xFF	; 255
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	d9 01       	movw	r26, r18
    1458:	aa 0f       	add	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	a5 56       	subi	r26, 0x65	; 101
    145e:	bd 4f       	sbci	r27, 0xFD	; 253
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	c1 f0       	breq	.+48     	; 0x1498 <pickup+0x256>
    1468:	df 01       	movw	r26, r30
    146a:	aa 0f       	add	r26, r26
    146c:	bb 1f       	adc	r27, r27
    146e:	aa 0f       	add	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	ad 55       	subi	r26, 0x5D	; 93
    1474:	bd 4f       	sbci	r27, 0xFD	; 253
    1476:	8d 91       	ld	r24, X+
    1478:	9c 91       	ld	r25, X
    147a:	11 97       	sbiw	r26, 0x01	; 1
    147c:	68 17       	cp	r22, r24
    147e:	79 07       	cpc	r23, r25
    1480:	59 f0       	breq	.+22     	; 0x1498 <pickup+0x256>
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	49 f0       	breq	.+18     	; 0x1498 <pickup+0x256>
    1486:	fd 01       	movw	r30, r26
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	68 17       	cp	r22, r24
    148e:	79 07       	cpc	r23, r25
    1490:	19 f0       	breq	.+6      	; 0x1498 <pickup+0x256>
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	09 f0       	breq	.+2      	; 0x1498 <pickup+0x256>
    1496:	36 c1       	rjmp	.+620    	; 0x1704 <pickup+0x4c2>
						pickNode(arm0, 0);
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	c8 01       	movw	r24, r16
    149e:	58 de       	rcall	.-848    	; 0x1150 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    14a0:	80 91 02 02 	lds	r24, 0x0202
    14a4:	90 91 03 02 	lds	r25, 0x0203
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <pickup+0x26c>
    14ac:	2b c1       	rjmp	.+598    	; 0x1704 <pickup+0x4c2>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    14ae:	f8 01       	movw	r30, r16
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	e9 53       	subi	r30, 0x39	; 57
    14b6:	fd 4f       	sbci	r31, 0xFD	; 253
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <pickup+0x280>
					a1 = arm0;
    14c0:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    14c2:	be 01       	movw	r22, r28
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	61 70       	andi	r22, 0x01	; 1
    14ca:	70 78       	andi	r23, 0x80	; 128
    14cc:	77 23       	and	r23, r23
    14ce:	34 f4       	brge	.+12     	; 0x14dc <pickup+0x29a>
    14d0:	61 50       	subi	r22, 0x01	; 1
    14d2:	71 09       	sbc	r23, r1
    14d4:	6e 6f       	ori	r22, 0xFE	; 254
    14d6:	7f 6f       	ori	r23, 0xFF	; 255
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    14dc:	80 91 9f 02 	lds	r24, 0x029F
    14e0:	90 91 a0 02 	lds	r25, 0x02A0
    14e4:	9c 01       	movw	r18, r24
    14e6:	21 70       	andi	r18, 0x01	; 1
    14e8:	30 78       	andi	r19, 0x80	; 128
    14ea:	33 23       	and	r19, r19
    14ec:	34 f4       	brge	.+12     	; 0x14fa <pickup+0x2b8>
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	31 09       	sbc	r19, r1
    14f2:	2e 6f       	ori	r18, 0xFE	; 254
    14f4:	3f 6f       	ori	r19, 0xFF	; 255
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	f9 01       	movw	r30, r18
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	e5 56       	subi	r30, 0x65	; 101
    1502:	fd 4f       	sbci	r31, 0xFD	; 253
    1504:	20 81       	ld	r18, Z
    1506:	31 81       	ldd	r19, Z+1	; 0x01
    1508:	2f 3f       	cpi	r18, 0xFF	; 255
    150a:	af ef       	ldi	r26, 0xFF	; 255
    150c:	3a 07       	cpc	r19, r26
    150e:	d9 f5       	brne	.+118    	; 0x1586 <pickup+0x344>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1510:	fc 01       	movw	r30, r24
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	ec 0f       	add	r30, r28
    1518:	fd 1f       	adc	r31, r29
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	ed 55       	subi	r30, 0x5D	; 93
    1520:	fd 4f       	sbci	r31, 0xFD	; 253
    1522:	20 81       	ld	r18, Z
    1524:	31 81       	ldd	r19, Z+1	; 0x01
    1526:	2f 3f       	cpi	r18, 0xFF	; 255
    1528:	ef ef       	ldi	r30, 0xFF	; 255
    152a:	3e 07       	cpc	r19, r30
    152c:	71 f0       	breq	.+28     	; 0x154a <pickup+0x308>
    152e:	fc 01       	movw	r30, r24
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	ed 54       	subi	r30, 0x4D	; 77
    1536:	fd 4f       	sbci	r31, 0xFD	; 253
    1538:	40 81       	ld	r20, Z
    153a:	51 81       	ldd	r21, Z+1	; 0x01
    153c:	24 17       	cp	r18, r20
    153e:	35 07       	cpc	r19, r21
    1540:	21 f0       	breq	.+8      	; 0x154a <pickup+0x308>
						pickNode(a1, a1);
    1542:	be 01       	movw	r22, r28
    1544:	ce 01       	movw	r24, r28
    1546:	04 de       	rcall	.-1016   	; 0x1150 <pickNode>
    1548:	dd c0       	rjmp	.+442    	; 0x1704 <pickup+0x4c2>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    154a:	fc 01       	movw	r30, r24
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	e6 0f       	add	r30, r22
    1552:	f7 1f       	adc	r31, r23
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	ed 55       	subi	r30, 0x5D	; 93
    155a:	fd 4f       	sbci	r31, 0xFD	; 253
    155c:	20 81       	ld	r18, Z
    155e:	31 81       	ldd	r19, Z+1	; 0x01
    1560:	2f 3f       	cpi	r18, 0xFF	; 255
    1562:	4f ef       	ldi	r20, 0xFF	; 255
    1564:	34 07       	cpc	r19, r20
    1566:	09 f4       	brne	.+2      	; 0x156a <pickup+0x328>
    1568:	cd c0       	rjmp	.+410    	; 0x1704 <pickup+0x4c2>
    156a:	fc 01       	movw	r30, r24
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	ed 54       	subi	r30, 0x4D	; 77
    1572:	fd 4f       	sbci	r31, 0xFD	; 253
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	28 17       	cp	r18, r24
    157a:	39 07       	cpc	r19, r25
    157c:	09 f4       	brne	.+2      	; 0x1580 <pickup+0x33e>
    157e:	c2 c0       	rjmp	.+388    	; 0x1704 <pickup+0x4c2>
						pickNode(a1, a2);
    1580:	ce 01       	movw	r24, r28
    1582:	e6 dd       	rcall	.-1076   	; 0x1150 <pickNode>
    1584:	bf c0       	rjmp	.+382    	; 0x1704 <pickup+0x4c2>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1586:	40 91 c3 02 	lds	r20, 0x02C3
    158a:	50 91 c4 02 	lds	r21, 0x02C4
    158e:	fa 01       	movw	r30, r20
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	ed 54       	subi	r30, 0x4D	; 77
    1596:	fd 4f       	sbci	r31, 0xFD	; 253
    1598:	01 90       	ld	r0, Z+
    159a:	f0 81       	ld	r31, Z
    159c:	e0 2d       	mov	r30, r0
    159e:	dc 01       	movw	r26, r24
    15a0:	aa 0f       	add	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	aa 0f       	add	r26, r26
    15a6:	bb 1f       	adc	r27, r27
    15a8:	ad 55       	subi	r26, 0x5D	; 93
    15aa:	bd 4f       	sbci	r27, 0xFD	; 253
    15ac:	0d 90       	ld	r0, X+
    15ae:	bc 91       	ld	r27, X
    15b0:	a0 2d       	mov	r26, r0
    15b2:	ae 17       	cp	r26, r30
    15b4:	bf 07       	cpc	r27, r31
    15b6:	71 f0       	breq	.+28     	; 0x15d4 <pickup+0x392>
    15b8:	dc 01       	movw	r26, r24
    15ba:	aa 0f       	add	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	aa 0f       	add	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	ad 55       	subi	r26, 0x5D	; 93
    15c4:	bd 4f       	sbci	r27, 0xFD	; 253
    15c6:	12 96       	adiw	r26, 0x02	; 2
    15c8:	0d 90       	ld	r0, X+
    15ca:	bc 91       	ld	r27, X
    15cc:	a0 2d       	mov	r26, r0
    15ce:	ea 17       	cp	r30, r26
    15d0:	fb 07       	cpc	r31, r27
    15d2:	d9 f5       	brne	.+118    	; 0x164a <pickup+0x408>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    15d4:	da 01       	movw	r26, r20
    15d6:	aa 0f       	add	r26, r26
    15d8:	bb 1f       	adc	r27, r27
    15da:	a4 58       	subi	r26, 0x84	; 132
    15dc:	bd 4f       	sbci	r27, 0xFD	; 253
    15de:	2d 91       	ld	r18, X+
    15e0:	3c 91       	ld	r19, X
    15e2:	21 30       	cpi	r18, 0x01	; 1
    15e4:	31 05       	cpc	r19, r1
    15e6:	09 f0       	breq	.+2      	; 0x15ea <pickup+0x3a8>
    15e8:	8d c0       	rjmp	.+282    	; 0x1704 <pickup+0x4c2>
    15ea:	da 01       	movw	r26, r20
    15ec:	aa 0f       	add	r26, r26
    15ee:	bb 1f       	adc	r27, r27
    15f0:	aa 0f       	add	r26, r26
    15f2:	bb 1f       	adc	r27, r27
    15f4:	ad 55       	subi	r26, 0x5D	; 93
    15f6:	bd 4f       	sbci	r27, 0xFD	; 253
    15f8:	2d 91       	ld	r18, X+
    15fa:	3c 91       	ld	r19, X
    15fc:	2f 3f       	cpi	r18, 0xFF	; 255
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	79 f0       	breq	.+30     	; 0x1620 <pickup+0x3de>
    1602:	da 01       	movw	r26, r20
    1604:	aa 0f       	add	r26, r26
    1606:	bb 1f       	adc	r27, r27
    1608:	aa 0f       	add	r26, r26
    160a:	bb 1f       	adc	r27, r27
    160c:	ad 55       	subi	r26, 0x5D	; 93
    160e:	bd 4f       	sbci	r27, 0xFD	; 253
    1610:	12 96       	adiw	r26, 0x02	; 2
    1612:	2d 91       	ld	r18, X+
    1614:	3c 91       	ld	r19, X
    1616:	13 97       	sbiw	r26, 0x03	; 3
    1618:	2f 3f       	cpi	r18, 0xFF	; 255
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	09 f0       	breq	.+2      	; 0x1620 <pickup+0x3de>
    161e:	72 c0       	rjmp	.+228    	; 0x1704 <pickup+0x4c2>
						{
							if (term[ct][a1] == color[adj])
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	8c 0f       	add	r24, r28
    1626:	9d 1f       	adc	r25, r29
    1628:	dc 01       	movw	r26, r24
    162a:	aa 0f       	add	r26, r26
    162c:	bb 1f       	adc	r27, r27
    162e:	ad 55       	subi	r26, 0x5D	; 93
    1630:	bd 4f       	sbci	r27, 0xFD	; 253
    1632:	8d 91       	ld	r24, X+
    1634:	9c 91       	ld	r25, X
    1636:	e8 17       	cp	r30, r24
    1638:	f9 07       	cpc	r31, r25
    163a:	21 f4       	brne	.+8      	; 0x1644 <pickup+0x402>
								pickNode(a1, a1);
    163c:	be 01       	movw	r22, r28
    163e:	ce 01       	movw	r24, r28
    1640:	87 dd       	rcall	.-1266   	; 0x1150 <pickNode>
    1642:	60 c0       	rjmp	.+192    	; 0x1704 <pickup+0x4c2>
							else pickNode(a1, a2);
    1644:	ce 01       	movw	r24, r28
    1646:	84 dd       	rcall	.-1272   	; 0x1150 <pickNode>
    1648:	5d c0       	rjmp	.+186    	; 0x1704 <pickup+0x4c2>
						}
					}
					else
					{
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    164a:	dc 01       	movw	r26, r24
    164c:	aa 0f       	add	r26, r26
    164e:	bb 1f       	adc	r27, r27
    1650:	ad 54       	subi	r26, 0x4D	; 77
    1652:	bd 4f       	sbci	r27, 0xFD	; 253
    1654:	0d 90       	ld	r0, X+
    1656:	bc 91       	ld	r27, X
    1658:	a0 2d       	mov	r26, r0
    165a:	2a 17       	cp	r18, r26
    165c:	3b 07       	cpc	r19, r27
    165e:	09 f4       	brne	.+2      	; 0x1662 <pickup+0x420>
    1660:	51 c0       	rjmp	.+162    	; 0x1704 <pickup+0x4c2>
    1662:	2e 17       	cp	r18, r30
    1664:	3f 07       	cpc	r19, r31
    1666:	09 f4       	brne	.+2      	; 0x166a <pickup+0x428>
    1668:	4d c0       	rjmp	.+154    	; 0x1704 <pickup+0x4c2>
						{
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    166a:	fa 01       	movw	r30, r20
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	e4 58       	subi	r30, 0x84	; 132
    1672:	fd 4f       	sbci	r31, 0xFD	; 253
    1674:	20 81       	ld	r18, Z
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	21 30       	cpi	r18, 0x01	; 1
    167a:	31 05       	cpc	r19, r1
    167c:	09 f0       	breq	.+2      	; 0x1680 <pickup+0x43e>
    167e:	42 c0       	rjmp	.+132    	; 0x1704 <pickup+0x4c2>
    1680:	fa 01       	movw	r30, r20
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	ed 55       	subi	r30, 0x5D	; 93
    168c:	fd 4f       	sbci	r31, 0xFD	; 253
    168e:	20 81       	ld	r18, Z
    1690:	31 81       	ldd	r19, Z+1	; 0x01
    1692:	a2 17       	cp	r26, r18
    1694:	b3 07       	cpc	r27, r19
    1696:	b1 f1       	breq	.+108    	; 0x1704 <pickup+0x4c2>
    1698:	fa 01       	movw	r30, r20
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ed 55       	subi	r30, 0x5D	; 93
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	22 81       	ldd	r18, Z+2	; 0x02
    16a8:	33 81       	ldd	r19, Z+3	; 0x03
    16aa:	a2 17       	cp	r26, r18
    16ac:	b3 07       	cpc	r27, r19
    16ae:	51 f1       	breq	.+84     	; 0x1704 <pickup+0x4c2>
							{
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    16b0:	fc 01       	movw	r30, r24
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	ec 0f       	add	r30, r28
    16b8:	fd 1f       	adc	r31, r29
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	ed 55       	subi	r30, 0x5D	; 93
    16c0:	fd 4f       	sbci	r31, 0xFD	; 253
    16c2:	20 81       	ld	r18, Z
    16c4:	31 81       	ldd	r19, Z+1	; 0x01
    16c6:	2f 3f       	cpi	r18, 0xFF	; 255
    16c8:	ef ef       	ldi	r30, 0xFF	; 255
    16ca:	3e 07       	cpc	r19, r30
    16cc:	39 f0       	breq	.+14     	; 0x16dc <pickup+0x49a>
    16ce:	a2 17       	cp	r26, r18
    16d0:	b3 07       	cpc	r27, r19
    16d2:	21 f0       	breq	.+8      	; 0x16dc <pickup+0x49a>
									pickNode(a1, a1);
    16d4:	be 01       	movw	r22, r28
    16d6:	ce 01       	movw	r24, r28
    16d8:	3b dd       	rcall	.-1418   	; 0x1150 <pickNode>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <pickup+0x4c2>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	86 0f       	add	r24, r22
    16e2:	97 1f       	adc	r25, r23
    16e4:	fc 01       	movw	r30, r24
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ed 55       	subi	r30, 0x5D	; 93
    16ec:	fd 4f       	sbci	r31, 0xFD	; 253
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	8f 3f       	cpi	r24, 0xFF	; 255
    16f4:	2f ef       	ldi	r18, 0xFF	; 255
    16f6:	92 07       	cpc	r25, r18
    16f8:	29 f0       	breq	.+10     	; 0x1704 <pickup+0x4c2>
    16fa:	a8 17       	cp	r26, r24
    16fc:	b9 07       	cpc	r27, r25
    16fe:	11 f0       	breq	.+4      	; 0x1704 <pickup+0x4c2>
									pickNode(a1, a2);
    1700:	ce 01       	movw	r24, r28
    1702:	26 dd       	rcall	.-1460   	; 0x1150 <pickNode>
					}
				}
			}
		}
	}
}	
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <drop>:

void drop(int side)	//TODO delay
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	ec 01       	movw	r28, r24
	if(side==0)
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	29 f4       	brne	.+10     	; 0x1726 <drop+0x14>
		lcd("dropRight");
    171c:	8a e4       	ldi	r24, 0x4A	; 74
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	0e 94 14 03 	call	0x628	; 0x628 <lcd>
    1724:	04 c0       	rjmp	.+8      	; 0x172e <drop+0x1c>
	else
		lcd("dropLeft");
    1726:	84 e5       	ldi	r24, 0x54	; 84
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 14 03 	call	0x628	; 0x628 <lcd>
	elevate(0, side);//lower
    172e:	6c 2f       	mov	r22, r28
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	e6 db       	rcall	.-2100   	; 0xf00 <elevate>
	open(side);
    1734:	8c 2f       	mov	r24, r28
    1736:	f1 db       	rcall	.-2078   	; 0xf1a <open>
	elevate(45, side);//mid
    1738:	6c 2f       	mov	r22, r28
    173a:	8d e2       	ldi	r24, 0x2D	; 45
    173c:	e1 db       	rcall	.-2110   	; 0xf00 <elevate>
	close(side);
    173e:	8c 2f       	mov	r24, r28
    1740:	fc db       	rcall	.-2056   	; 0xf3a <close>
	armCount++;
    1742:	80 91 02 02 	lds	r24, 0x0202
    1746:	90 91 03 02 	lds	r25, 0x0203
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	90 93 03 02 	sts	0x0203, r25
    1750:	80 93 02 02 	sts	0x0202, r24
}
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1764:	e0 91 9f 02 	lds	r30, 0x029F
    1768:	f0 91 a0 02 	lds	r31, 0x02A0
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	e6 0f       	add	r30, r22
    1772:	f7 1f       	adc	r31, r23
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	ed 55       	subi	r30, 0x5D	; 93
    177a:	fd 4f       	sbci	r31, 0xFD	; 253
    177c:	8c 01       	movw	r16, r24
    177e:	00 0f       	add	r16, r16
    1780:	11 1f       	adc	r17, r17
    1782:	09 53       	subi	r16, 0x39	; 57
    1784:	1d 4f       	sbci	r17, 0xFD	; 253
    1786:	d8 01       	movw	r26, r16
    1788:	8d 91       	ld	r24, X+
    178a:	9c 91       	ld	r25, X
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
	position(armNo,side);
    1790:	ce 01       	movw	r24, r28
    1792:	05 dc       	rcall	.-2038   	; 0xf9e <position>
	drop(armNo);
    1794:	ce 01       	movw	r24, r28
    1796:	bd df       	rcall	.-134    	; 0x1712 <drop>
	arm[armNo] = -1;
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	f8 01       	movw	r30, r16
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    17a2:	80 91 76 02 	lds	r24, 0x0276
    17a6:	90 91 77 02 	lds	r25, 0x0277
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	90 93 77 02 	sts	0x0277, r25
    17b0:	80 93 76 02 	sts	0x0276, r24
}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    17c4:	fb 01       	movw	r30, r22
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	e5 56       	subi	r30, 0x65	; 101
    17cc:	fd 4f       	sbci	r31, 0xFD	; 253
    17ce:	dc 01       	movw	r26, r24
    17d0:	aa 0f       	add	r26, r26
    17d2:	bb 1f       	adc	r27, r27
    17d4:	a9 53       	subi	r26, 0x39	; 57
    17d6:	bd 4f       	sbci	r27, 0xFD	; 253
    17d8:	8d 91       	ld	r24, X+
    17da:	9c 91       	ld	r25, X
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    17e0:	c6 17       	cp	r28, r22
    17e2:	d7 07       	cpc	r29, r23
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <sortDrop+0x36>
    17e6:	80 91 70 02 	lds	r24, 0x0270
    17ea:	90 91 71 02 	lds	r25, 0x0271
    17ee:	89 2b       	or	r24, r25
    17f0:	49 f4       	brne	.+18     	; 0x1804 <sortDrop+0x46>
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <sortDrop+0x42>
    17f4:	80 91 70 02 	lds	r24, 0x0270
    17f8:	90 91 71 02 	lds	r25, 0x0271
    17fc:	02 97       	sbiw	r24, 0x02	; 2
    17fe:	11 f4       	brne	.+4      	; 0x1804 <sortDrop+0x46>
		turn();
    1800:	13 d9       	rcall	.-3546   	; 0xa28 <turn>
    1802:	0c c0       	rjmp	.+24     	; 0x181c <sortDrop+0x5e>
	else
	{
		if (dir == 1 || dir == 3)
    1804:	80 91 70 02 	lds	r24, 0x0270
    1808:	90 91 71 02 	lds	r25, 0x0271
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	29 f4       	brne	.+10     	; 0x181c <sortDrop+0x5e>
		{
			if (armNo == 0)
    1812:	20 97       	sbiw	r28, 0x00	; 0
    1814:	11 f4       	brne	.+4      	; 0x181a <sortDrop+0x5c>
				turnLeft();
    1816:	f5 d8       	rcall	.-3606   	; 0xa02 <turnLeft>
    1818:	01 c0       	rjmp	.+2      	; 0x181c <sortDrop+0x5e>
			else turnRight();
    181a:	e0 d8       	rcall	.-3648   	; 0x9dc <turnRight>
		}
	}
	drop(armNo);
    181c:	ce 01       	movw	r24, r28
    181e:	79 df       	rcall	.-270    	; 0x1712 <drop>
	arm[armNo] = -1;
    1820:	cc 0f       	add	r28, r28
    1822:	dd 1f       	adc	r29, r29
    1824:	c9 53       	subi	r28, 0x39	; 57
    1826:	dd 4f       	sbci	r29, 0xFD	; 253
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	99 83       	std	Y+1, r25	; 0x01
    182e:	88 83       	st	Y, r24
	//..printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <dropPickup>:

void dropPickup(int a1)
{
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    183a:	9c 01       	movw	r18, r24
    183c:	2f 5f       	subi	r18, 0xFF	; 255
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	21 70       	andi	r18, 0x01	; 1
    1842:	30 78       	andi	r19, 0x80	; 128
    1844:	33 23       	and	r19, r19
    1846:	34 f4       	brge	.+12     	; 0x1854 <dropPickup+0x1e>
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	31 09       	sbc	r19, r1
    184c:	2e 6f       	ori	r18, 0xFE	; 254
    184e:	3f 6f       	ori	r19, 0xFF	; 255
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	d2 2f       	mov	r29, r18
    1856:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1858:	e0 91 9f 02 	lds	r30, 0x029F
    185c:	f0 91 a0 02 	lds	r31, 0x02A0
    1860:	af 01       	movw	r20, r30
    1862:	44 0f       	add	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	24 0f       	add	r18, r20
    1868:	35 1f       	adc	r19, r21
    186a:	d9 01       	movw	r26, r18
    186c:	aa 0f       	add	r26, r26
    186e:	bb 1f       	adc	r27, r27
    1870:	ad 55       	subi	r26, 0x5D	; 93
    1872:	bd 4f       	sbci	r27, 0xFD	; 253
    1874:	2d 91       	ld	r18, X+
    1876:	3c 91       	ld	r19, X
    1878:	da 01       	movw	r26, r20
    187a:	ad 54       	subi	r26, 0x4D	; 77
    187c:	bd 4f       	sbci	r27, 0xFD	; 253
    187e:	4d 91       	ld	r20, X+
    1880:	5c 91       	ld	r21, X
    1882:	24 17       	cp	r18, r20
    1884:	35 07       	cpc	r19, r21
    1886:	69 f0       	breq	.+26     	; 0x18a2 <dropPickup+0x6c>
    1888:	a0 91 c3 02 	lds	r26, 0x02C3
    188c:	b0 91 c4 02 	lds	r27, 0x02C4
    1890:	aa 0f       	add	r26, r26
    1892:	bb 1f       	adc	r27, r27
    1894:	ad 54       	subi	r26, 0x4D	; 77
    1896:	bd 4f       	sbci	r27, 0xFD	; 253
    1898:	6d 91       	ld	r22, X+
    189a:	7c 91       	ld	r23, X
    189c:	26 17       	cp	r18, r22
    189e:	37 07       	cpc	r19, r23
    18a0:	a9 f0       	breq	.+42     	; 0x18cc <dropPickup+0x96>
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	e8 0f       	add	r30, r24
    18a8:	f9 1f       	adc	r31, r25
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	ed 55       	subi	r30, 0x5D	; 93
    18b0:	fd 4f       	sbci	r31, 0xFD	; 253
    18b2:	01 90       	ld	r0, Z+
    18b4:	f0 81       	ld	r31, Z
    18b6:	e0 2d       	mov	r30, r0
    18b8:	4e 17       	cp	r20, r30
    18ba:	5f 07       	cpc	r21, r31
    18bc:	39 f0       	breq	.+14     	; 0x18cc <dropPickup+0x96>
    18be:	31 96       	adiw	r30, 0x01	; 1
    18c0:	29 f0       	breq	.+10     	; 0x18cc <dropPickup+0x96>
		pickNode(a2, a1);
    18c2:	bc 01       	movw	r22, r24
    18c4:	8d 2f       	mov	r24, r29
    18c6:	9c 2f       	mov	r25, r28
    18c8:	43 dc       	rcall	.-1914   	; 0x1150 <pickNode>
    18ca:	0b c0       	rjmp	.+22     	; 0x18e2 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    18cc:	24 17       	cp	r18, r20
    18ce:	35 07       	cpc	r19, r21
    18d0:	41 f0       	breq	.+16     	; 0x18e2 <dropPickup+0xac>
    18d2:	2f 3f       	cpi	r18, 0xFF	; 255
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <dropPickup+0xac>
		pickNode(a2, a2);
    18d8:	6d 2f       	mov	r22, r29
    18da:	7c 2f       	mov	r23, r28
    18dc:	8d 2f       	mov	r24, r29
    18de:	9c 2f       	mov	r25, r28
    18e0:	37 dc       	rcall	.-1938   	; 0x1150 <pickNode>
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <canDrop>:

void canDrop()
{
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
    18f0:	8d e5       	ldi	r24, 0x5D	; 93
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	0e 94 14 03 	call	0x628	; 0x628 <lcd>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    18f8:	20 91 9f 02 	lds	r18, 0x029F
    18fc:	30 91 a0 02 	lds	r19, 0x02A0
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	30 f4       	brcc	.+12     	; 0x1912 <canDrop+0x2a>
    1906:	80 91 70 02 	lds	r24, 0x0270
    190a:	90 91 71 02 	lds	r25, 0x0271
    190e:	02 97       	sbiw	r24, 0x02	; 2
    1910:	79 f0       	breq	.+30     	; 0x1930 <canDrop+0x48>
    1912:	c9 01       	movw	r24, r18
    1914:	02 97       	sbiw	r24, 0x02	; 2
    1916:	02 97       	sbiw	r24, 0x02	; 2
    1918:	80 f4       	brcc	.+32     	; 0x193a <canDrop+0x52>
    191a:	80 91 70 02 	lds	r24, 0x0270
    191e:	90 91 71 02 	lds	r25, 0x0271
    1922:	89 2b       	or	r24, r25
    1924:	79 f0       	breq	.+30     	; 0x1944 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1926:	01 e0       	ldi	r16, 0x01	; 1
    1928:	10 e0       	ldi	r17, 0x00	; 0
    192a:	c0 e0       	ldi	r28, 0x00	; 0
    192c:	d0 e0       	ldi	r29, 0x00	; 0
    192e:	0e c0       	rjmp	.+28     	; 0x194c <canDrop+0x64>
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1930:	00 e0       	ldi	r16, 0x00	; 0
    1932:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1934:	c1 e0       	ldi	r28, 0x01	; 1
    1936:	d0 e0       	ldi	r29, 0x00	; 0
    1938:	09 c0       	rjmp	.+18     	; 0x194c <canDrop+0x64>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    193a:	01 e0       	ldi	r16, 0x01	; 1
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	c0 e0       	ldi	r28, 0x00	; 0
    1940:	d0 e0       	ldi	r29, 0x00	; 0
    1942:	04 c0       	rjmp	.+8      	; 0x194c <canDrop+0x64>
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1948:	c1 e0       	ldi	r28, 0x01	; 1
    194a:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    194c:	40 91 02 02 	lds	r20, 0x0202
    1950:	50 91 03 02 	lds	r21, 0x0203
    1954:	42 30       	cpi	r20, 0x02	; 2
    1956:	51 05       	cpc	r21, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <canDrop+0x74>
    195a:	26 c1       	rjmp	.+588    	; 0x1ba8 <canDrop+0x2c0>
    195c:	f9 01       	movw	r30, r18
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	ed 54       	subi	r30, 0x4D	; 77
    1964:	fd 4f       	sbci	r31, 0xFD	; 253
    1966:	40 81       	ld	r20, Z
    1968:	51 81       	ldd	r21, Z+1	; 0x01
    196a:	60 91 c7 02 	lds	r22, 0x02C7
    196e:	70 91 c8 02 	lds	r23, 0x02C8
    1972:	64 17       	cp	r22, r20
    1974:	75 07       	cpc	r23, r21
    1976:	41 f0       	breq	.+16     	; 0x1988 <canDrop+0xa0>
    1978:	80 91 c9 02 	lds	r24, 0x02C9
    197c:	90 91 ca 02 	lds	r25, 0x02CA
    1980:	48 17       	cp	r20, r24
    1982:	59 07       	cpc	r21, r25
    1984:	09 f0       	breq	.+2      	; 0x1988 <canDrop+0xa0>
    1986:	10 c1       	rjmp	.+544    	; 0x1ba8 <canDrop+0x2c0>
		return;
	else
	{
		if (visited[ct] == 0)
    1988:	f9 01       	movw	r30, r18
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	e4 58       	subi	r30, 0x84	; 132
    1990:	fd 4f       	sbci	r31, 0xFD	; 253
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	89 2b       	or	r24, r25
    1998:	09 f4       	brne	.+2      	; 0x199c <canDrop+0xb4>
			terminalCheck1();
    199a:	94 d9       	rcall	.-3288   	; 0xcc4 <terminalCheck1>
		if (armCount == 0)
    199c:	80 91 02 02 	lds	r24, 0x0202
    19a0:	90 91 03 02 	lds	r25, 0x0203
    19a4:	89 2b       	or	r24, r25
    19a6:	09 f0       	breq	.+2      	; 0x19aa <canDrop+0xc2>
    19a8:	48 c0       	rjmp	.+144    	; 0x1a3a <canDrop+0x152>
		{
			if (arm[arm0] == color[ct])
    19aa:	20 91 9f 02 	lds	r18, 0x029F
    19ae:	30 91 a0 02 	lds	r19, 0x02A0
    19b2:	f9 01       	movw	r30, r18
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	ed 54       	subi	r30, 0x4D	; 77
    19ba:	fd 4f       	sbci	r31, 0xFD	; 253
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	fe 01       	movw	r30, r28
    19c2:	ee 0f       	add	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	e9 53       	subi	r30, 0x39	; 57
    19c8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ca:	40 81       	ld	r20, Z
    19cc:	51 81       	ldd	r21, Z+1	; 0x01
    19ce:	48 17       	cp	r20, r24
    19d0:	59 07       	cpc	r21, r25
    19d2:	a9 f4       	brne	.+42     	; 0x19fe <canDrop+0x116>
			{
				if (term[ct][0] == -1)
    19d4:	f9 01       	movw	r30, r18
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	ed 55       	subi	r30, 0x5D	; 93
    19e0:	fd 4f       	sbci	r31, 0xFD	; 253
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <canDrop+0x10c>
					nodeDrop(arm0, 0);
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	ce 01       	movw	r24, r28
    19f0:	b4 de       	rcall	.-664    	; 0x175a <nodeDrop>
    19f2:	23 c0       	rjmp	.+70     	; 0x1a3a <canDrop+0x152>
				else nodeDrop(arm0, 1);
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	ce 01       	movw	r24, r28
    19fa:	af de       	rcall	.-674    	; 0x175a <nodeDrop>
    19fc:	1e c0       	rjmp	.+60     	; 0x1a3a <canDrop+0x152>
			}
			else if (arm[arm1] == color[ct])
    19fe:	f8 01       	movw	r30, r16
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	e9 53       	subi	r30, 0x39	; 57
    1a06:	fd 4f       	sbci	r31, 0xFD	; 253
    1a08:	40 81       	ld	r20, Z
    1a0a:	51 81       	ldd	r21, Z+1	; 0x01
    1a0c:	84 17       	cp	r24, r20
    1a0e:	95 07       	cpc	r25, r21
    1a10:	a1 f4       	brne	.+40     	; 0x1a3a <canDrop+0x152>
			{
				if (term[ct][0] != -1)
    1a12:	f9 01       	movw	r30, r18
    1a14:	ee 0f       	add	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	ee 0f       	add	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	ed 55       	subi	r30, 0x5D	; 93
    1a1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	29 f0       	breq	.+10     	; 0x1a32 <canDrop+0x14a>
					nodeDrop(arm1, 1);
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	c8 01       	movw	r24, r16
    1a2e:	95 de       	rcall	.-726    	; 0x175a <nodeDrop>
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <canDrop+0x152>
				else nodeDrop(arm1, 0);
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	c8 01       	movw	r24, r16
    1a38:	90 de       	rcall	.-736    	; 0x175a <nodeDrop>
			}
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    1a3a:	20 91 9f 02 	lds	r18, 0x029F
    1a3e:	30 91 a0 02 	lds	r19, 0x02A0
    1a42:	f9 01       	movw	r30, r18
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	ed 54       	subi	r30, 0x4D	; 77
    1a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	40 91 c7 02 	lds	r20, 0x02C7
    1a54:	50 91 c8 02 	lds	r21, 0x02C8
    1a58:	48 17       	cp	r20, r24
    1a5a:	59 07       	cpc	r21, r25
    1a5c:	41 f0       	breq	.+16     	; 0x1a6e <canDrop+0x186>
    1a5e:	40 91 c9 02 	lds	r20, 0x02C9
    1a62:	50 91 ca 02 	lds	r21, 0x02CA
    1a66:	84 17       	cp	r24, r20
    1a68:	95 07       	cpc	r25, r21
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <canDrop+0x186>
    1a6c:	9d c0       	rjmp	.+314    	; 0x1ba8 <canDrop+0x2c0>
		{
			if (visited[ct] == 0)
    1a6e:	f9 01       	movw	r30, r18
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	e4 58       	subi	r30, 0x84	; 132
    1a76:	fd 4f       	sbci	r31, 0xFD	; 253
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	89 2b       	or	r24, r25
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <canDrop+0x19a>
				terminalCheck2();
    1a80:	b9 d9       	rcall	.-3214   	; 0xdf4 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    1a82:	80 91 9f 02 	lds	r24, 0x029F
    1a86:	90 91 a0 02 	lds	r25, 0x02A0
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ed 55       	subi	r30, 0x5D	; 93
    1a96:	fd 4f       	sbci	r31, 0xFD	; 253
    1a98:	20 81       	ld	r18, Z
    1a9a:	31 81       	ldd	r19, Z+1	; 0x01
    1a9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	11 f1       	breq	.+68     	; 0x1ae6 <canDrop+0x1fe>
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ed 55       	subi	r30, 0x5D	; 93
    1aae:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab0:	22 81       	ldd	r18, Z+2	; 0x02
    1ab2:	33 81       	ldd	r19, Z+3	; 0x03
    1ab4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab8:	b1 f0       	breq	.+44     	; 0x1ae6 <canDrop+0x1fe>
			{
				if (arm[arm0] == color[ct])
    1aba:	de 01       	movw	r26, r28
    1abc:	aa 0f       	add	r26, r26
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	a9 53       	subi	r26, 0x39	; 57
    1ac2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ee 0f       	add	r30, r30
    1ac8:	ff 1f       	adc	r31, r31
    1aca:	ed 54       	subi	r30, 0x4D	; 77
    1acc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ace:	2d 91       	ld	r18, X+
    1ad0:	3c 91       	ld	r19, X
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	28 17       	cp	r18, r24
    1ad8:	39 07       	cpc	r19, r25
    1ada:	19 f4       	brne	.+6      	; 0x1ae2 <canDrop+0x1fa>
					dropPickup(arm0);
    1adc:	ce 01       	movw	r24, r28
    1ade:	ab de       	rcall	.-682    	; 0x1836 <dropPickup>
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <canDrop+0x1fe>
				else dropPickup(arm1);
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	a8 de       	rcall	.-688    	; 0x1836 <dropPickup>
			}
			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    1ae6:	80 91 9f 02 	lds	r24, 0x029F
    1aea:	90 91 a0 02 	lds	r25, 0x02A0
    1aee:	fc 01       	movw	r30, r24
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	ed 54       	subi	r30, 0x4D	; 77
    1af6:	fd 4f       	sbci	r31, 0xFD	; 253
    1af8:	20 81       	ld	r18, Z
    1afa:	31 81       	ldd	r19, Z+1	; 0x01
    1afc:	fe 01       	movw	r30, r28
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	e9 53       	subi	r30, 0x39	; 57
    1b04:	fd 4f       	sbci	r31, 0xFD	; 253
    1b06:	40 81       	ld	r20, Z
    1b08:	51 81       	ldd	r21, Z+1	; 0x01
    1b0a:	42 17       	cp	r20, r18
    1b0c:	53 07       	cpc	r21, r19
    1b0e:	11 f5       	brne	.+68     	; 0x1b54 <canDrop+0x26c>
    1b10:	fc 01       	movw	r30, r24
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	ed 55       	subi	r30, 0x5D	; 93
    1b1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b1e:	40 81       	ld	r20, Z
    1b20:	51 81       	ldd	r21, Z+1	; 0x01
    1b22:	4f 3f       	cpi	r20, 0xFF	; 255
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	29 f4       	brne	.+10     	; 0x1b32 <canDrop+0x24a>
				nodeDrop(arm0, 0);
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	15 de       	rcall	.-982    	; 0x175a <nodeDrop>
    1b30:	3b c0       	rjmp	.+118    	; 0x1ba8 <canDrop+0x2c0>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    1b32:	fc 01       	movw	r30, r24
    1b34:	ee 0f       	add	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	ed 55       	subi	r30, 0x5D	; 93
    1b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b40:	42 81       	ldd	r20, Z+2	; 0x02
    1b42:	53 81       	ldd	r21, Z+3	; 0x03
    1b44:	4f 3f       	cpi	r20, 0xFF	; 255
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
    1b48:	29 f4       	brne	.+10     	; 0x1b54 <canDrop+0x26c>
				nodeDrop(arm0, 1);
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	ce 01       	movw	r24, r28
    1b50:	04 de       	rcall	.-1016   	; 0x175a <nodeDrop>
    1b52:	2a c0       	rjmp	.+84     	; 0x1ba8 <canDrop+0x2c0>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    1b54:	f8 01       	movw	r30, r16
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	e9 53       	subi	r30, 0x39	; 57
    1b5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5e:	40 81       	ld	r20, Z
    1b60:	51 81       	ldd	r21, Z+1	; 0x01
    1b62:	24 17       	cp	r18, r20
    1b64:	35 07       	cpc	r19, r21
    1b66:	01 f5       	brne	.+64     	; 0x1ba8 <canDrop+0x2c0>
    1b68:	fc 01       	movw	r30, r24
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	ed 55       	subi	r30, 0x5D	; 93
    1b74:	fd 4f       	sbci	r31, 0xFD	; 253
    1b76:	20 81       	ld	r18, Z
    1b78:	31 81       	ldd	r19, Z+1	; 0x01
    1b7a:	2f 3f       	cpi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	29 f4       	brne	.+10     	; 0x1b8a <canDrop+0x2a2>
				nodeDrop(arm1, 0);
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	c8 01       	movw	r24, r16
    1b86:	e9 dd       	rcall	.-1070   	; 0x175a <nodeDrop>
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <canDrop+0x2c0>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	ed 55       	subi	r30, 0x5D	; 93
    1b96:	fd 4f       	sbci	r31, 0xFD	; 253
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	21 f4       	brne	.+8      	; 0x1ba8 <canDrop+0x2c0>
				nodeDrop(arm1, 1);
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	d9 dd       	rcall	.-1102   	; 0x175a <nodeDrop>
		}
	}
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <newSort>:

void newSort()
{
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
	int t1, t2, a1, a2;
	if (arm[0] != -1)
    1bbe:	20 91 c7 02 	lds	r18, 0x02C7
    1bc2:	30 91 c8 02 	lds	r19, 0x02C8
    1bc6:	2f 3f       	cpi	r18, 0xFF	; 255
    1bc8:	4f ef       	ldi	r20, 0xFF	; 255
    1bca:	34 07       	cpc	r19, r20
    1bcc:	39 f0       	breq	.+14     	; 0x1bdc <newSort+0x2a>
		a1 = indicator[arm[0]];
    1bce:	f9 01       	movw	r30, r18
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	e5 54       	subi	r30, 0x45	; 69
    1bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd8:	c0 81       	ld	r28, Z
    1bda:	d1 81       	ldd	r29, Z+1	; 0x01
	if (arm[1] != -1)
    1bdc:	e0 91 c9 02 	lds	r30, 0x02C9
    1be0:	f0 91 ca 02 	lds	r31, 0x02CA
    1be4:	ef 3f       	cpi	r30, 0xFF	; 255
    1be6:	6f ef       	ldi	r22, 0xFF	; 255
    1be8:	f6 07       	cpc	r31, r22
    1bea:	09 f4       	brne	.+2      	; 0x1bee <newSort+0x3c>
    1bec:	5d c1       	rjmp	.+698    	; 0x1ea8 <newSort+0x2f6>
		a2 = indicator[arm[1]];
    1bee:	df 01       	movw	r26, r30
    1bf0:	aa 0f       	add	r26, r26
    1bf2:	bb 1f       	adc	r27, r27
    1bf4:	a5 54       	subi	r26, 0x45	; 69
    1bf6:	bd 4f       	sbci	r27, 0xFD	; 253
    1bf8:	0d 91       	ld	r16, X+
    1bfa:	1c 91       	ld	r17, X

	t1 = (ct + 1) % 2;
    1bfc:	80 91 9f 02 	lds	r24, 0x029F
    1c00:	90 91 a0 02 	lds	r25, 0x02A0
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	81 70       	andi	r24, 0x01	; 1
    1c08:	90 78       	andi	r25, 0x80	; 128
    1c0a:	99 23       	and	r25, r25
    1c0c:	24 f4       	brge	.+8      	; 0x1c16 <newSort+0x64>
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	8e 6f       	ori	r24, 0xFE	; 254
    1c12:	9f 6f       	ori	r25, 0xFF	; 255
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    1c18:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    1c1a:	d0 93 a0 02 	sts	0x02A0, r29
    1c1e:	c0 93 9f 02 	sts	0x029F, r28
		if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    1c22:	2f 3f       	cpi	r18, 0xFF	; 255
    1c24:	af ef       	ldi	r26, 0xFF	; 255
    1c26:	3a 07       	cpc	r19, r26
    1c28:	e1 f1       	breq	.+120    	; 0x1ca2 <newSort+0xf0>
    1c2a:	de 01       	movw	r26, r28
    1c2c:	aa 0f       	add	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	aa 0f       	add	r26, r26
    1c32:	bb 1f       	adc	r27, r27
    1c34:	ad 55       	subi	r26, 0x5D	; 93
    1c36:	bd 4f       	sbci	r27, 0xFD	; 253
    1c38:	4d 91       	ld	r20, X+
    1c3a:	5c 91       	ld	r21, X
    1c3c:	4f 3f       	cpi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	71 f0       	breq	.+28     	; 0x1c5e <newSort+0xac>
    1c42:	de 01       	movw	r26, r28
    1c44:	aa 0f       	add	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	aa 0f       	add	r26, r26
    1c4a:	bb 1f       	adc	r27, r27
    1c4c:	ad 55       	subi	r26, 0x5D	; 93
    1c4e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c50:	12 96       	adiw	r26, 0x02	; 2
    1c52:	4d 91       	ld	r20, X+
    1c54:	5c 91       	ld	r21, X
    1c56:	13 97       	sbiw	r26, 0x03	; 3
    1c58:	4f 3f       	cpi	r20, 0xFF	; 255
    1c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5c:	11 f5       	brne	.+68     	; 0x1ca2 <newSort+0xf0>
		{
			if (arm[1] == -1)
    1c5e:	31 96       	adiw	r30, 0x01	; 1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <newSort+0xb2>
    1c62:	10 c1       	rjmp	.+544    	; 0x1e84 <newSort+0x2d2>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    1c64:	66 0f       	add	r22, r22
    1c66:	77 1f       	adc	r23, r23
    1c68:	fb 01       	movw	r30, r22
    1c6a:	e5 56       	subi	r30, 0x65	; 101
    1c6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c6e:	20 81       	ld	r18, Z
    1c70:	31 81       	ldd	r19, Z+1	; 0x01
    1c72:	fb 01       	movw	r30, r22
    1c74:	ed 54       	subi	r30, 0x4D	; 77
    1c76:	fd 4f       	sbci	r31, 0xFD	; 253
    1c78:	40 81       	ld	r20, Z
    1c7a:	51 81       	ldd	r21, Z+1	; 0x01
    1c7c:	24 17       	cp	r18, r20
    1c7e:	35 07       	cpc	r19, r21
    1c80:	59 f0       	breq	.+22     	; 0x1c98 <newSort+0xe6>
    1c82:	fc 01       	movw	r30, r24
    1c84:	ee 0f       	add	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	ed 54       	subi	r30, 0x4D	; 77
    1c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	28 17       	cp	r18, r24
    1c92:	39 07       	cpc	r19, r25
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <newSort+0xe6>
    1c96:	f6 c0       	rjmp	.+492    	; 0x1e84 <newSort+0x2d2>
					pickSort(1, a1);
    1c98:	be 01       	movw	r22, r28
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	8c da       	rcall	.-2792   	; 0x11b8 <pickSort>
    1ca0:	f1 c0       	rjmp	.+482    	; 0x1e84 <newSort+0x2d2>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    1ca2:	ef 3f       	cpi	r30, 0xFF	; 255
    1ca4:	4f ef       	ldi	r20, 0xFF	; 255
    1ca6:	f4 07       	cpc	r31, r20
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <newSort+0xfa>
    1caa:	52 c0       	rjmp	.+164    	; 0x1d50 <newSort+0x19e>
    1cac:	d8 01       	movw	r26, r16
    1cae:	aa 0f       	add	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	aa 0f       	add	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	ad 55       	subi	r26, 0x5D	; 93
    1cb8:	bd 4f       	sbci	r27, 0xFD	; 253
    1cba:	4d 91       	ld	r20, X+
    1cbc:	5c 91       	ld	r21, X
    1cbe:	4f 3f       	cpi	r20, 0xFF	; 255
    1cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <newSort+0x114>
    1cc4:	13 c1       	rjmp	.+550    	; 0x1eec <newSort+0x33a>
    1cc6:	d8 01       	movw	r26, r16
    1cc8:	aa 0f       	add	r26, r26
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	aa 0f       	add	r26, r26
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	ad 55       	subi	r26, 0x5D	; 93
    1cd2:	bd 4f       	sbci	r27, 0xFD	; 253
    1cd4:	12 96       	adiw	r26, 0x02	; 2
    1cd6:	4d 91       	ld	r20, X+
    1cd8:	5c 91       	ld	r21, X
    1cda:	13 97       	sbiw	r26, 0x03	; 3
    1cdc:	4f 3f       	cpi	r20, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	b9 f5       	brne	.+110    	; 0x1d50 <newSort+0x19e>
    1ce2:	f2 c0       	rjmp	.+484    	; 0x1ec8 <newSort+0x316>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    1ce4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <newSort+0x13a>
    1cea:	cc c0       	rjmp	.+408    	; 0x1e84 <newSort+0x2d2>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    1cec:	9b 01       	movw	r18, r22
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	e5 56       	subi	r30, 0x65	; 101
    1cf6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf8:	40 81       	ld	r20, Z
    1cfa:	51 81       	ldd	r21, Z+1	; 0x01
    1cfc:	f9 01       	movw	r30, r18
    1cfe:	ed 54       	subi	r30, 0x4D	; 77
    1d00:	fd 4f       	sbci	r31, 0xFD	; 253
    1d02:	20 81       	ld	r18, Z
    1d04:	31 81       	ldd	r19, Z+1	; 0x01
    1d06:	42 17       	cp	r20, r18
    1d08:	53 07       	cpc	r21, r19
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <newSort+0x15c>
    1d0c:	bb c0       	rjmp	.+374    	; 0x1e84 <newSort+0x2d2>
    1d0e:	fc 01       	movw	r30, r24
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	ed 54       	subi	r30, 0x4D	; 77
    1d16:	fd 4f       	sbci	r31, 0xFD	; 253
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	48 17       	cp	r20, r24
    1d1e:	59 07       	cpc	r21, r25
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <newSort+0x172>
    1d22:	b0 c0       	rjmp	.+352    	; 0x1e84 <newSort+0x2d2>
						pickSort(1, t1);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	47 da       	rcall	.-2930   	; 0x11b8 <pickSort>
    1d2a:	ac c0       	rjmp	.+344    	; 0x1e84 <newSort+0x2d2>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    1d2c:	fb 01       	movw	r30, r22
    1d2e:	ee 0f       	add	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	e5 56       	subi	r30, 0x65	; 101
    1d34:	fd 4f       	sbci	r31, 0xFD	; 253
    1d36:	80 81       	ld	r24, Z
    1d38:	91 81       	ldd	r25, Z+1	; 0x01
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <newSort+0x18e>
    1d3e:	a2 c0       	rjmp	.+324    	; 0x1e84 <newSort+0x2d2>
    1d40:	2f 3f       	cpi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <newSort+0x196>
    1d46:	9e c0       	rjmp	.+316    	; 0x1e84 <newSort+0x2d2>
				sortDrop(1, t1);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	38 dd       	rcall	.-1424   	; 0x17be <sortDrop>
    1d4e:	9a c0       	rjmp	.+308    	; 0x1e84 <newSort+0x2d2>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    1d50:	2f 3f       	cpi	r18, 0xFF	; 255
    1d52:	af ef       	ldi	r26, 0xFF	; 255
    1d54:	3a 07       	cpc	r19, r26
    1d56:	a1 f0       	breq	.+40     	; 0x1d80 <newSort+0x1ce>
    1d58:	db 01       	movw	r26, r22
    1d5a:	aa 0f       	add	r26, r26
    1d5c:	bb 1f       	adc	r27, r27
    1d5e:	a5 56       	subi	r26, 0x65	; 101
    1d60:	bd 4f       	sbci	r27, 0xFD	; 253
    1d62:	8d 91       	ld	r24, X+
    1d64:	9c 91       	ld	r25, X
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	31 f4       	brne	.+12     	; 0x1d76 <newSort+0x1c4>
    1d6a:	31 96       	adiw	r30, 0x01	; 1
    1d6c:	21 f0       	breq	.+8      	; 0x1d76 <newSort+0x1c4>
			sortDrop(1, t1);
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	25 dd       	rcall	.-1462   	; 0x17be <sortDrop>
    1d74:	87 c0       	rjmp	.+270    	; 0x1e84 <newSort+0x2d2>
		else if (arm[0] != -1)
			ct = arm[0];
    1d76:	30 93 a0 02 	sts	0x02A0, r19
    1d7a:	20 93 9f 02 	sts	0x029F, r18
    1d7e:	82 c0       	rjmp	.+260    	; 0x1e84 <newSort+0x2d2>
		else ct = arm[1];
    1d80:	f0 93 a0 02 	sts	0x02A0, r31
    1d84:	e0 93 9f 02 	sts	0x029F, r30
    1d88:	7d c0       	rjmp	.+250    	; 0x1e84 <newSort+0x2d2>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    1d8a:	a7 01       	movw	r20, r14
    1d8c:	44 0f       	add	r20, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	fa 01       	movw	r30, r20
    1d92:	e5 56       	subi	r30, 0x65	; 101
    1d94:	fd 4f       	sbci	r31, 0xFD	; 253
    1d96:	20 81       	ld	r18, Z
    1d98:	31 81       	ldd	r19, Z+1	; 0x01
    1d9a:	fa 01       	movw	r30, r20
    1d9c:	ed 54       	subi	r30, 0x4D	; 77
    1d9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1da0:	40 81       	ld	r20, Z
    1da2:	51 81       	ldd	r21, Z+1	; 0x01
    1da4:	24 17       	cp	r18, r20
    1da6:	35 07       	cpc	r19, r21
    1da8:	51 f0       	breq	.+20     	; 0x1dbe <newSort+0x20c>
    1daa:	fc 01       	movw	r30, r24
    1dac:	ee 0f       	add	r30, r30
    1dae:	ff 1f       	adc	r31, r31
    1db0:	ed 54       	subi	r30, 0x4D	; 77
    1db2:	fd 4f       	sbci	r31, 0xFD	; 253
    1db4:	60 81       	ld	r22, Z
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	26 17       	cp	r18, r22
    1dba:	37 07       	cpc	r19, r23
    1dbc:	81 f4       	brne	.+32     	; 0x1dde <newSort+0x22c>
    1dbe:	2f 3f       	cpi	r18, 0xFF	; 255
    1dc0:	af ef       	ldi	r26, 0xFF	; 255
    1dc2:	3a 07       	cpc	r19, r26
    1dc4:	71 f1       	breq	.+92     	; 0x1e22 <newSort+0x270>
			ct = indicator[sort[t1]];
    1dc6:	f9 01       	movw	r30, r18
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	e5 54       	subi	r30, 0x45	; 69
    1dce:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	90 93 a0 02 	sts	0x02A0, r25
    1dd8:	80 93 9f 02 	sts	0x029F, r24
    1ddc:	53 c0       	rjmp	.+166    	; 0x1e84 <newSort+0x2d2>
		else if (sort[t1] != -1)
    1dde:	2f 3f       	cpi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	f9 f0       	breq	.+62     	; 0x1e22 <newSort+0x270>
		{
			pickSort(0, t1);
    1de4:	b7 01       	movw	r22, r14
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	e6 d9       	rcall	.-3124   	; 0x11b8 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    1dec:	2f ef       	ldi	r18, 0xFF	; 255
    1dee:	e2 1a       	sub	r14, r18
    1df0:	f2 0a       	sbc	r15, r18
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	e4 22       	and	r14, r20
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	f4 22       	and	r15, r20
    1dfa:	ff 20       	and	r15, r15
    1dfc:	54 f4       	brge	.+20     	; 0x1e12 <newSort+0x260>
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	e6 1a       	sub	r14, r22
    1e02:	f1 08       	sbc	r15, r1
    1e04:	8e ef       	ldi	r24, 0xFE	; 254
    1e06:	e8 2a       	or	r14, r24
    1e08:	ff 24       	eor	r15, r15
    1e0a:	fa 94       	dec	r15
    1e0c:	af ef       	ldi	r26, 0xFF	; 255
    1e0e:	ea 1a       	sub	r14, r26
    1e10:	fa 0a       	sbc	r15, r26
    1e12:	e4 e0       	ldi	r30, 0x04	; 4
    1e14:	ee 0e       	add	r14, r30
    1e16:	f1 1c       	adc	r15, r1
    1e18:	f0 92 a0 02 	sts	0x02A0, r15
    1e1c:	e0 92 9f 02 	sts	0x029F, r14
    1e20:	31 c0       	rjmp	.+98     	; 0x1e84 <newSort+0x2d2>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    1e22:	f7 01       	movw	r30, r14
    1e24:	ee 0f       	add	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	e4 58       	subi	r30, 0x84	; 132
    1e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2c:	20 81       	ld	r18, Z
    1e2e:	31 81       	ldd	r19, Z+1	; 0x01
    1e30:	21 30       	cpi	r18, 0x01	; 1
    1e32:	31 05       	cpc	r19, r1
    1e34:	19 f5       	brne	.+70     	; 0x1e7c <newSort+0x2ca>
    1e36:	f7 01       	movw	r30, r14
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	ee 0f       	add	r30, r30
    1e3e:	ff 1f       	adc	r31, r31
    1e40:	ed 55       	subi	r30, 0x5D	; 93
    1e42:	fd 4f       	sbci	r31, 0xFD	; 253
    1e44:	20 81       	ld	r18, Z
    1e46:	31 81       	ldd	r19, Z+1	; 0x01
    1e48:	42 17       	cp	r20, r18
    1e4a:	53 07       	cpc	r21, r19
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <newSort+0x2a2>
    1e4e:	2f 3f       	cpi	r18, 0xFF	; 255
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	a1 f4       	brne	.+40     	; 0x1e7c <newSort+0x2ca>
    1e54:	f7 01       	movw	r30, r14
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ed 55       	subi	r30, 0x5D	; 93
    1e60:	fd 4f       	sbci	r31, 0xFD	; 253
    1e62:	22 81       	ldd	r18, Z+2	; 0x02
    1e64:	33 81       	ldd	r19, Z+3	; 0x03
    1e66:	42 17       	cp	r20, r18
    1e68:	53 07       	cpc	r21, r19
    1e6a:	19 f0       	breq	.+6      	; 0x1e72 <newSort+0x2c0>
    1e6c:	2f 3f       	cpi	r18, 0xFF	; 255
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	29 f4       	brne	.+10     	; 0x1e7c <newSort+0x2ca>
			ct = t2;
    1e72:	90 93 a0 02 	sts	0x02A0, r25
    1e76:	80 93 9f 02 	sts	0x029F, r24
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <newSort+0x2d2>
		else ct = t1;
    1e7c:	f0 92 a0 02 	sts	0x02A0, r15
    1e80:	e0 92 9f 02 	sts	0x029F, r14
	arm[0] = arm[1] = -1;
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    1e84:	80 91 9f 02 	lds	r24, 0x029F
    1e88:	90 91 a0 02 	lds	r25, 0x02A0
    1e8c:	02 96       	adiw	r24, 0x02	; 2
    1e8e:	83 70       	andi	r24, 0x03	; 3
    1e90:	90 78       	andi	r25, 0x80	; 128
    1e92:	99 23       	and	r25, r25
    1e94:	24 f4       	brge	.+8      	; 0x1e9e <newSort+0x2ec>
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	8c 6f       	ori	r24, 0xFC	; 252
    1e9a:	9f 6f       	ori	r25, 0xFF	; 255
    1e9c:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    1e9e:	90 93 c4 02 	sts	0x02C4, r25
    1ea2:	80 93 c3 02 	sts	0x02C3, r24
    1ea6:	2c c0       	rjmp	.+88     	; 0x1f00 <newSort+0x34e>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    1ea8:	80 91 9f 02 	lds	r24, 0x029F
    1eac:	90 91 a0 02 	lds	r25, 0x02A0
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	62 e0       	ldi	r22, 0x02	; 2
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	c0 d4       	rcall	.+2432   	; 0x2838 <__divmodhi4>
    1eb8:	7c 01       	movw	r14, r24
    1eba:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    1ebc:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    1ebe:	2f 3f       	cpi	r18, 0xFF	; 255
    1ec0:	4f ef       	ldi	r20, 0xFF	; 255
    1ec2:	34 07       	cpc	r19, r20
    1ec4:	c1 f4       	brne	.+48     	; 0x1ef6 <newSort+0x344>
    1ec6:	61 cf       	rjmp	.-318    	; 0x1d8a <newSort+0x1d8>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    1ec8:	10 93 a0 02 	sts	0x02A0, r17
    1ecc:	00 93 9f 02 	sts	0x029F, r16
			if (term[a2][0] == -1 || term[a2][1] == -1)
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ed 55       	subi	r30, 0x5D	; 93
    1edc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ede:	42 81       	ldd	r20, Z+2	; 0x02
    1ee0:	53 81       	ldd	r21, Z+3	; 0x03
    1ee2:	4f 3f       	cpi	r20, 0xFF	; 255
    1ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <newSort+0x338>
    1ee8:	21 cf       	rjmp	.-446    	; 0x1d2c <newSort+0x17a>
    1eea:	fc ce       	rjmp	.-520    	; 0x1ce4 <newSort+0x132>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    1eec:	10 93 a0 02 	sts	0x02A0, r17
    1ef0:	00 93 9f 02 	sts	0x029F, r16
    1ef4:	f7 ce       	rjmp	.-530    	; 0x1ce4 <newSort+0x132>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    1ef6:	d0 93 a0 02 	sts	0x02A0, r29
    1efa:	c0 93 9f 02 	sts	0x029F, r28
    1efe:	95 ce       	rjmp	.-726    	; 0x1c2a <newSort+0x78>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	08 95       	ret

00001f0e <sortCheck>:
void sortCheck()
{
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1f26:	40 91 9f 02 	lds	r20, 0x029F
    1f2a:	50 91 a0 02 	lds	r21, 0x02A0
    1f2e:	42 30       	cpi	r20, 0x02	; 2
    1f30:	51 05       	cpc	r21, r1
    1f32:	30 f4       	brcc	.+12     	; 0x1f40 <sortCheck+0x32>
    1f34:	80 91 70 02 	lds	r24, 0x0270
    1f38:	90 91 71 02 	lds	r25, 0x0271
    1f3c:	02 97       	sbiw	r24, 0x02	; 2
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <sortCheck+0x50>
    1f40:	ca 01       	movw	r24, r20
    1f42:	02 97       	sbiw	r24, 0x02	; 2
    1f44:	02 97       	sbiw	r24, 0x02	; 2
    1f46:	80 f4       	brcc	.+32     	; 0x1f68 <sortCheck+0x5a>
    1f48:	80 91 70 02 	lds	r24, 0x0270
    1f4c:	90 91 71 02 	lds	r25, 0x0271
    1f50:	89 2b       	or	r24, r25
    1f52:	79 f0       	breq	.+30     	; 0x1f72 <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
    1f54:	01 e0       	ldi	r16, 0x01	; 1
    1f56:	10 e0       	ldi	r17, 0x00	; 0
    1f58:	c0 e0       	ldi	r28, 0x00	; 0
    1f5a:	d0 e0       	ldi	r29, 0x00	; 0
    1f5c:	0e c0       	rjmp	.+28     	; 0x1f7a <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1f5e:	00 e0       	ldi	r16, 0x00	; 0
    1f60:	10 e0       	ldi	r17, 0x00	; 0
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1f62:	c1 e0       	ldi	r28, 0x01	; 1
    1f64:	d0 e0       	ldi	r29, 0x00	; 0
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
    1f68:	01 e0       	ldi	r16, 0x01	; 1
    1f6a:	10 e0       	ldi	r17, 0x00	; 0
    1f6c:	c0 e0       	ldi	r28, 0x00	; 0
    1f6e:	d0 e0       	ldi	r29, 0x00	; 0
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1f72:	00 e0       	ldi	r16, 0x00	; 0
    1f74:	10 e0       	ldi	r17, 0x00	; 0
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1f76:	c1 e0       	ldi	r28, 0x01	; 1
    1f78:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    1f7a:	9a 01       	movw	r18, r20
    1f7c:	21 70       	andi	r18, 0x01	; 1
    1f7e:	30 78       	andi	r19, 0x80	; 128
    1f80:	33 23       	and	r19, r19
    1f82:	34 f4       	brge	.+12     	; 0x1f90 <sortCheck+0x82>
    1f84:	21 50       	subi	r18, 0x01	; 1
    1f86:	31 09       	sbc	r19, r1
    1f88:	2e 6f       	ori	r18, 0xFE	; 254
    1f8a:	3f 6f       	ori	r19, 0xFF	; 255
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	b2 2e       	mov	r11, r18
    1f92:	a3 2e       	mov	r10, r19
    1f94:	f9 01       	movw	r30, r18
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e5 56       	subi	r30, 0x65	; 101
    1f9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f9e:	20 81       	ld	r18, Z
    1fa0:	31 81       	ldd	r19, Z+1	; 0x01
    1fa2:	fa 01       	movw	r30, r20
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	ed 54       	subi	r30, 0x4D	; 77
    1faa:	fd 4f       	sbci	r31, 0xFD	; 253
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	28 17       	cp	r18, r24
    1fb2:	39 07       	cpc	r19, r25
    1fb4:	79 f0       	breq	.+30     	; 0x1fd4 <sortCheck+0xc6>
    1fb6:	80 91 c3 02 	lds	r24, 0x02C3
    1fba:	90 91 c4 02 	lds	r25, 0x02C4
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	ee 0f       	add	r30, r30
    1fc2:	ff 1f       	adc	r31, r31
    1fc4:	ed 54       	subi	r30, 0x4D	; 77
    1fc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc8:	40 81       	ld	r20, Z
    1fca:	51 81       	ldd	r21, Z+1	; 0x01
    1fcc:	24 17       	cp	r18, r20
    1fce:	35 07       	cpc	r19, r21
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <sortCheck+0xc6>
    1fd2:	a6 c0       	rjmp	.+332    	; 0x2120 <sortCheck+0x212>
	{
		if (armCount>0)
    1fd4:	80 91 02 02 	lds	r24, 0x0202
    1fd8:	90 91 03 02 	lds	r25, 0x0203
    1fdc:	18 16       	cp	r1, r24
    1fde:	19 06       	cpc	r1, r25
    1fe0:	0c f0       	brlt	.+2      	; 0x1fe4 <sortCheck+0xd6>
    1fe2:	95 c0       	rjmp	.+298    	; 0x210e <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	e5 54       	subi	r30, 0x45	; 69
    1fec:	fd 4f       	sbci	r31, 0xFD	; 253
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	70 93 a0 02 	sts	0x02A0, r23
    1ff6:	60 93 9f 02 	sts	0x029F, r22
			if (arm[arm0] == -1)
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ee 0f       	add	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	e9 53       	subi	r30, 0x39	; 57
    2002:	fd 4f       	sbci	r31, 0xFD	; 253
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	69 f4       	brne	.+26     	; 0x2026 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    200c:	61 70       	andi	r22, 0x01	; 1
    200e:	70 78       	andi	r23, 0x80	; 128
    2010:	77 23       	and	r23, r23
    2012:	34 f4       	brge	.+12     	; 0x2020 <sortCheck+0x112>
    2014:	61 50       	subi	r22, 0x01	; 1
    2016:	71 09       	sbc	r23, r1
    2018:	6e 6f       	ori	r22, 0xFE	; 254
    201a:	7f 6f       	ori	r23, 0xFF	; 255
    201c:	6f 5f       	subi	r22, 0xFF	; 255
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	ce 01       	movw	r24, r28
    2022:	ca d8       	rcall	.-3692   	; 0x11b8 <pickSort>
    2024:	15 c0       	rjmp	.+42     	; 0x2050 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    2026:	f8 01       	movw	r30, r16
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	e9 53       	subi	r30, 0x39	; 57
    202e:	fd 4f       	sbci	r31, 0xFD	; 253
    2030:	80 81       	ld	r24, Z
    2032:	91 81       	ldd	r25, Z+1	; 0x01
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	61 f4       	brne	.+24     	; 0x2050 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    2038:	61 70       	andi	r22, 0x01	; 1
    203a:	70 78       	andi	r23, 0x80	; 128
    203c:	77 23       	and	r23, r23
    203e:	34 f4       	brge	.+12     	; 0x204c <sortCheck+0x13e>
    2040:	61 50       	subi	r22, 0x01	; 1
    2042:	71 09       	sbc	r23, r1
    2044:	6e 6f       	ori	r22, 0xFE	; 254
    2046:	7f 6f       	ori	r23, 0xFF	; 255
    2048:	6f 5f       	subi	r22, 0xFF	; 255
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	c8 01       	movw	r24, r16
    204e:	b4 d8       	rcall	.-3736   	; 0x11b8 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    2050:	80 91 02 02 	lds	r24, 0x0202
    2054:	90 91 03 02 	lds	r25, 0x0203
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	09 f4       	brne	.+2      	; 0x205e <sortCheck+0x150>
    205c:	6d c1       	rjmp	.+730    	; 0x2338 <__stack+0x139>
    205e:	80 91 9f 02 	lds	r24, 0x029F
    2062:	90 91 a0 02 	lds	r25, 0x02A0
    2066:	fc 01       	movw	r30, r24
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	ed 55       	subi	r30, 0x5D	; 93
    2072:	fd 4f       	sbci	r31, 0xFD	; 253
    2074:	20 81       	ld	r18, Z
    2076:	31 81       	ldd	r19, Z+1	; 0x01
    2078:	2f 3f       	cpi	r18, 0xFF	; 255
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	09 f4       	brne	.+2      	; 0x2080 <sortCheck+0x172>
    207e:	5c c1       	rjmp	.+696    	; 0x2338 <__stack+0x139>
    2080:	fc 01       	movw	r30, r24
    2082:	ee 0f       	add	r30, r30
    2084:	ff 1f       	adc	r31, r31
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	ed 55       	subi	r30, 0x5D	; 93
    208c:	fd 4f       	sbci	r31, 0xFD	; 253
    208e:	22 81       	ldd	r18, Z+2	; 0x02
    2090:	33 81       	ldd	r19, Z+3	; 0x03
    2092:	2f 3f       	cpi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	09 f4       	brne	.+2      	; 0x209a <sortCheck+0x18c>
    2098:	4f c1       	rjmp	.+670    	; 0x2338 <__stack+0x139>
    209a:	9c 01       	movw	r18, r24
    209c:	21 70       	andi	r18, 0x01	; 1
    209e:	30 78       	andi	r19, 0x80	; 128
    20a0:	33 23       	and	r19, r19
    20a2:	34 f4       	brge	.+12     	; 0x20b0 <sortCheck+0x1a2>
    20a4:	21 50       	subi	r18, 0x01	; 1
    20a6:	31 09       	sbc	r19, r1
    20a8:	2e 6f       	ori	r18, 0xFE	; 254
    20aa:	3f 6f       	ori	r19, 0xFF	; 255
    20ac:	2f 5f       	subi	r18, 0xFF	; 255
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	62 2f       	mov	r22, r18
    20b2:	73 2f       	mov	r23, r19
    20b4:	f9 01       	movw	r30, r18
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	e5 56       	subi	r30, 0x65	; 101
    20bc:	fd 4f       	sbci	r31, 0xFD	; 253
    20be:	20 81       	ld	r18, Z
    20c0:	31 81       	ldd	r19, Z+1	; 0x01
    20c2:	2f 3f       	cpi	r18, 0xFF	; 255
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
    20c6:	09 f0       	breq	.+2      	; 0x20ca <sortCheck+0x1bc>
    20c8:	37 c1       	rjmp	.+622    	; 0x2338 <__stack+0x139>
			{
				if (arm[arm0] == color[ct])
    20ca:	fc 01       	movw	r30, r24
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	ed 54       	subi	r30, 0x4D	; 77
    20d2:	fd 4f       	sbci	r31, 0xFD	; 253
    20d4:	80 81       	ld	r24, Z
    20d6:	91 81       	ldd	r25, Z+1	; 0x01
    20d8:	fe 01       	movw	r30, r28
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	e9 53       	subi	r30, 0x39	; 57
    20e0:	fd 4f       	sbci	r31, 0xFD	; 253
    20e2:	20 81       	ld	r18, Z
    20e4:	31 81       	ldd	r19, Z+1	; 0x01
    20e6:	28 17       	cp	r18, r24
    20e8:	39 07       	cpc	r19, r25
    20ea:	19 f4       	brne	.+6      	; 0x20f2 <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    20ec:	c8 01       	movw	r24, r16
    20ee:	67 db       	rcall	.-2354   	; 0x17be <sortDrop>
    20f0:	23 c1       	rjmp	.+582    	; 0x2338 <__stack+0x139>
				else if (arm[arm1] == color[ct])
    20f2:	f8 01       	movw	r30, r16
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	e9 53       	subi	r30, 0x39	; 57
    20fa:	fd 4f       	sbci	r31, 0xFD	; 253
    20fc:	20 81       	ld	r18, Z
    20fe:	31 81       	ldd	r19, Z+1	; 0x01
    2100:	82 17       	cp	r24, r18
    2102:	93 07       	cpc	r25, r19
    2104:	09 f0       	breq	.+2      	; 0x2108 <sortCheck+0x1fa>
    2106:	18 c1       	rjmp	.+560    	; 0x2338 <__stack+0x139>
					sortDrop(arm0, ct % 2);
    2108:	ce 01       	movw	r24, r28
    210a:	59 db       	rcall	.-2382   	; 0x17be <sortDrop>
    210c:	15 c1       	rjmp	.+554    	; 0x2338 <__stack+0x139>
			}
		}
		else ct = adj;
    210e:	80 91 c3 02 	lds	r24, 0x02C3
    2112:	90 91 c4 02 	lds	r25, 0x02C4
    2116:	90 93 a0 02 	sts	0x02A0, r25
    211a:	80 93 9f 02 	sts	0x029F, r24
    211e:	0c c1       	rjmp	.+536    	; 0x2338 <__stack+0x139>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    2120:	fe 01       	movw	r30, r28
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	e9 53       	subi	r30, 0x39	; 57
    2128:	fd 4f       	sbci	r31, 0xFD	; 253
    212a:	01 90       	ld	r0, Z+
    212c:	f0 81       	ld	r31, Z
    212e:	e0 2d       	mov	r30, r0
    2130:	4e 17       	cp	r20, r30
    2132:	5f 07       	cpc	r21, r31
    2134:	09 f4       	brne	.+2      	; 0x2138 <sortCheck+0x22a>
    2136:	8f c0       	rjmp	.+286    	; 0x2256 <__stack+0x57>
    2138:	d8 01       	movw	r26, r16
    213a:	aa 0f       	add	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	a9 53       	subi	r26, 0x39	; 57
    2140:	bd 4f       	sbci	r27, 0xFD	; 253
    2142:	8d 90       	ld	r8, X+
    2144:	9c 90       	ld	r9, X
    2146:	48 15       	cp	r20, r8
    2148:	59 05       	cpc	r21, r9
    214a:	09 f4       	brne	.+2      	; 0x214e <sortCheck+0x240>
    214c:	84 c0       	rjmp	.+264    	; 0x2256 <__stack+0x57>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    214e:	e0 90 02 02 	lds	r14, 0x0202
    2152:	f0 90 03 02 	lds	r15, 0x0203
    2156:	e1 14       	cp	r14, r1
    2158:	f1 04       	cpc	r15, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <sortCheck+0x250>
    215c:	4e c0       	rjmp	.+156    	; 0x21fa <sortCheck+0x2ec>
    215e:	b1 e0       	ldi	r27, 0x01	; 1
    2160:	eb 16       	cp	r14, r27
    2162:	f1 04       	cpc	r15, r1
    2164:	29 f4       	brne	.+10     	; 0x2170 <sortCheck+0x262>
    2166:	2f 3f       	cpi	r18, 0xFF	; 255
    2168:	6f ef       	ldi	r22, 0xFF	; 255
    216a:	36 07       	cpc	r19, r22
    216c:	b1 f5       	brne	.+108    	; 0x21da <sortCheck+0x2cc>
    216e:	09 c0       	rjmp	.+18     	; 0x2182 <sortCheck+0x274>
    2170:	67 01       	movw	r12, r14
    2172:	71 e0       	ldi	r23, 0x01	; 1
    2174:	c7 1a       	sub	r12, r23
    2176:	d1 08       	sbc	r13, r1
    2178:	a2 e0       	ldi	r26, 0x02	; 2
    217a:	ca 16       	cp	r12, r26
    217c:	d1 04       	cpc	r13, r1
    217e:	08 f0       	brcs	.+2      	; 0x2182 <sortCheck+0x274>
    2180:	65 c0       	rjmp	.+202    	; 0x224c <__stack+0x4d>
    2182:	6c 01       	movw	r12, r24
    2184:	cc 0c       	add	r12, r12
    2186:	dd 1c       	adc	r13, r13
    2188:	cc 0c       	add	r12, r12
    218a:	dd 1c       	adc	r13, r13
    218c:	b6 01       	movw	r22, r12
    218e:	6d 55       	subi	r22, 0x5D	; 93
    2190:	7d 4f       	sbci	r23, 0xFD	; 253
    2192:	db 01       	movw	r26, r22
    2194:	cd 90       	ld	r12, X+
    2196:	dc 90       	ld	r13, X
    2198:	4c 15       	cp	r20, r12
    219a:	5d 05       	cpc	r21, r13
    219c:	21 f0       	breq	.+8      	; 0x21a6 <sortCheck+0x298>
    219e:	cd 20       	and	r12, r13
    21a0:	c0 94       	com	r12
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <sortCheck+0x298>
    21a4:	53 c0       	rjmp	.+166    	; 0x224c <__stack+0x4d>
    21a6:	6c 01       	movw	r12, r24
    21a8:	cc 0c       	add	r12, r12
    21aa:	dd 1c       	adc	r13, r13
    21ac:	cc 0c       	add	r12, r12
    21ae:	dd 1c       	adc	r13, r13
    21b0:	b6 01       	movw	r22, r12
    21b2:	6d 55       	subi	r22, 0x5D	; 93
    21b4:	7d 4f       	sbci	r23, 0xFD	; 253
    21b6:	db 01       	movw	r26, r22
    21b8:	12 96       	adiw	r26, 0x02	; 2
    21ba:	cd 90       	ld	r12, X+
    21bc:	dc 90       	ld	r13, X
    21be:	13 97       	sbiw	r26, 0x03	; 3
    21c0:	4c 15       	cp	r20, r12
    21c2:	5d 05       	cpc	r21, r13
    21c4:	21 f0       	breq	.+8      	; 0x21ce <sortCheck+0x2c0>
    21c6:	cd 20       	and	r12, r13
    21c8:	c0 94       	com	r12
    21ca:	09 f0       	breq	.+2      	; 0x21ce <sortCheck+0x2c0>
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <__stack+0x4d>
		{
			if (armCount>0)
    21ce:	1e 14       	cp	r1, r14
    21d0:	1f 04       	cpc	r1, r15
    21d2:	9c f4       	brge	.+38     	; 0x21fa <sortCheck+0x2ec>
			{
				if(sort[ct % 2] != -1)
    21d4:	2f 3f       	cpi	r18, 0xFF	; 255
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	81 f0       	breq	.+32     	; 0x21fa <sortCheck+0x2ec>
				{
					 
					if (arm[arm0] == -1)
    21da:	31 96       	adiw	r30, 0x01	; 1
    21dc:	31 f4       	brne	.+12     	; 0x21ea <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    21de:	6b 2d       	mov	r22, r11
    21e0:	7a 2d       	mov	r23, r10
    21e2:	ce 01       	movw	r24, r28
    21e4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <pickSort>
    21e8:	08 c0       	rjmp	.+16     	; 0x21fa <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    21ea:	89 20       	and	r8, r9
    21ec:	80 94       	com	r8
    21ee:	29 f4       	brne	.+10     	; 0x21fa <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    21f0:	6b 2d       	mov	r22, r11
    21f2:	7a 2d       	mov	r23, r10
    21f4:	c8 01       	movw	r24, r16
    21f6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <pickSort>
				}
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    21fa:	80 91 9f 02 	lds	r24, 0x029F
    21fe:	90 91 a0 02 	lds	r25, 0x02A0
    2202:	bc 01       	movw	r22, r24
    2204:	6f 5f       	subi	r22, 0xFF	; 255
    2206:	7f 4f       	sbci	r23, 0xFF	; 255
    2208:	61 70       	andi	r22, 0x01	; 1
    220a:	70 78       	andi	r23, 0x80	; 128
    220c:	77 23       	and	r23, r23
    220e:	34 f4       	brge	.+12     	; 0x221c <__stack+0x1d>
    2210:	61 50       	subi	r22, 0x01	; 1
    2212:	71 09       	sbc	r23, r1
    2214:	6e 6f       	ori	r22, 0xFE	; 254
    2216:	7f 6f       	ori	r23, 0xFF	; 255
    2218:	6f 5f       	subi	r22, 0xFF	; 255
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	6c 5f       	subi	r22, 0xFC	; 252
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	81 70       	andi	r24, 0x01	; 1
    2222:	90 78       	andi	r25, 0x80	; 128
    2224:	99 23       	and	r25, r25
    2226:	24 f4       	brge	.+8      	; 0x2230 <__stack+0x31>
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	8e 6f       	ori	r24, 0xFE	; 254
    222c:	9f 6f       	ori	r25, 0xFF	; 255
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	04 96       	adiw	r24, 0x04	; 4
    2232:	0e 94 27 05 	call	0xa4e	; 0xa4e <traverseToSort>
			newSort();
    2236:	bd dc       	rcall	.-1670   	; 0x1bb2 <newSort>
			if (ct == 4 || ct == 5)
    2238:	80 91 9f 02 	lds	r24, 0x029F
    223c:	90 91 a0 02 	lds	r25, 0x02A0
    2240:	04 97       	sbiw	r24, 0x04	; 4
    2242:	02 97       	sbiw	r24, 0x02	; 2
    2244:	08 f0       	brcs	.+2      	; 0x2248 <__stack+0x49>
    2246:	89 c0       	rjmp	.+274    	; 0x235a <__stack+0x15b>
				newSort();
    2248:	b4 dc       	rcall	.-1688   	; 0x1bb2 <newSort>
    224a:	87 c0       	rjmp	.+270    	; 0x235a <__stack+0x15b>
			return;
		}
		else ct = adj;
    224c:	90 93 a0 02 	sts	0x02A0, r25
    2250:	80 93 9f 02 	sts	0x029F, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2254:	71 c0       	rjmp	.+226    	; 0x2338 <__stack+0x139>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2256:	a0 91 02 02 	lds	r26, 0x0202
    225a:	b0 91 03 02 	lds	r27, 0x0203
    225e:	10 97       	sbiw	r26, 0x00	; 0
    2260:	c1 f5       	brne	.+112    	; 0x22d2 <__stack+0xd3>
    2262:	dc 01       	movw	r26, r24
    2264:	aa 0f       	add	r26, r26
    2266:	bb 1f       	adc	r27, r27
    2268:	a4 58       	subi	r26, 0x84	; 132
    226a:	bd 4f       	sbci	r27, 0xFD	; 253
    226c:	0d 90       	ld	r0, X+
    226e:	bc 91       	ld	r27, X
    2270:	a0 2d       	mov	r26, r0
    2272:	a1 30       	cpi	r26, 0x01	; 1
    2274:	b1 05       	cpc	r27, r1
    2276:	d9 f4       	brne	.+54     	; 0x22ae <__stack+0xaf>
    2278:	dc 01       	movw	r26, r24
    227a:	aa 0f       	add	r26, r26
    227c:	bb 1f       	adc	r27, r27
    227e:	aa 0f       	add	r26, r26
    2280:	bb 1f       	adc	r27, r27
    2282:	ad 55       	subi	r26, 0x5D	; 93
    2284:	bd 4f       	sbci	r27, 0xFD	; 253
    2286:	0d 90       	ld	r0, X+
    2288:	bc 91       	ld	r27, X
    228a:	a0 2d       	mov	r26, r0
    228c:	11 96       	adiw	r26, 0x01	; 1
    228e:	09 f4       	brne	.+2      	; 0x2292 <__stack+0x93>
    2290:	4b c0       	rjmp	.+150    	; 0x2328 <__stack+0x129>
    2292:	dc 01       	movw	r26, r24
    2294:	aa 0f       	add	r26, r26
    2296:	bb 1f       	adc	r27, r27
    2298:	aa 0f       	add	r26, r26
    229a:	bb 1f       	adc	r27, r27
    229c:	ad 55       	subi	r26, 0x5D	; 93
    229e:	bd 4f       	sbci	r27, 0xFD	; 253
    22a0:	12 96       	adiw	r26, 0x02	; 2
    22a2:	8d 91       	ld	r24, X+
    22a4:	9c 91       	ld	r25, X
    22a6:	13 97       	sbiw	r26, 0x03	; 3
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	19 f4       	brne	.+6      	; 0x22b2 <__stack+0xb3>
    22ac:	3d c0       	rjmp	.+122    	; 0x2328 <__stack+0x129>
    22ae:	ab 2b       	or	r26, r27
    22b0:	d9 f5       	brne	.+118    	; 0x2328 <__stack+0x129>
    22b2:	2f 3f       	cpi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	c1 f5       	brne	.+112    	; 0x2328 <__stack+0x129>
			if (arm[arm0] == color[adj])
    22b8:	4e 17       	cp	r20, r30
    22ba:	5f 07       	cpc	r21, r31
    22bc:	29 f4       	brne	.+10     	; 0x22c8 <__stack+0xc9>
				sortDrop(arm1, ct % 2);
    22be:	6b 2d       	mov	r22, r11
    22c0:	7a 2d       	mov	r23, r10
    22c2:	c8 01       	movw	r24, r16
    22c4:	7c da       	rcall	.-2824   	; 0x17be <sortDrop>
    22c6:	30 c0       	rjmp	.+96     	; 0x2328 <__stack+0x129>
			else sortDrop(arm0, ct % 2);
    22c8:	6b 2d       	mov	r22, r11
    22ca:	7a 2d       	mov	r23, r10
    22cc:	ce 01       	movw	r24, r28
    22ce:	77 da       	rcall	.-2834   	; 0x17be <sortDrop>
    22d0:	2b c0       	rjmp	.+86     	; 0x2328 <__stack+0x129>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    22d2:	11 97       	sbiw	r26, 0x01	; 1
    22d4:	49 f5       	brne	.+82     	; 0x2328 <__stack+0x129>
    22d6:	dc 01       	movw	r26, r24
    22d8:	aa 0f       	add	r26, r26
    22da:	bb 1f       	adc	r27, r27
    22dc:	aa 0f       	add	r26, r26
    22de:	bb 1f       	adc	r27, r27
    22e0:	ad 55       	subi	r26, 0x5D	; 93
    22e2:	bd 4f       	sbci	r27, 0xFD	; 253
    22e4:	4d 91       	ld	r20, X+
    22e6:	5c 91       	ld	r21, X
    22e8:	4f 3f       	cpi	r20, 0xFF	; 255
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	69 f0       	breq	.+26     	; 0x2308 <__stack+0x109>
    22ee:	dc 01       	movw	r26, r24
    22f0:	aa 0f       	add	r26, r26
    22f2:	bb 1f       	adc	r27, r27
    22f4:	aa 0f       	add	r26, r26
    22f6:	bb 1f       	adc	r27, r27
    22f8:	ad 55       	subi	r26, 0x5D	; 93
    22fa:	bd 4f       	sbci	r27, 0xFD	; 253
    22fc:	12 96       	adiw	r26, 0x02	; 2
    22fe:	8d 91       	ld	r24, X+
    2300:	9c 91       	ld	r25, X
    2302:	13 97       	sbiw	r26, 0x03	; 3
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	81 f4       	brne	.+32     	; 0x2328 <__stack+0x129>
    2308:	2f 3f       	cpi	r18, 0xFF	; 255
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	69 f0       	breq	.+26     	; 0x2328 <__stack+0x129>
			if (arm[arm0] == -1)
    230e:	31 96       	adiw	r30, 0x01	; 1
    2310:	31 f4       	brne	.+12     	; 0x231e <__stack+0x11f>
				pickSort(arm0, ct % 2);
    2312:	6b 2d       	mov	r22, r11
    2314:	7a 2d       	mov	r23, r10
    2316:	ce 01       	movw	r24, r28
    2318:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <pickSort>
    231c:	05 c0       	rjmp	.+10     	; 0x2328 <__stack+0x129>
			else	pickSort(arm1, ct % 2);
    231e:	6b 2d       	mov	r22, r11
    2320:	7a 2d       	mov	r23, r10
    2322:	c8 01       	movw	r24, r16
    2324:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <pickSort>
			ct = adj;
    2328:	80 91 c3 02 	lds	r24, 0x02C3
    232c:	90 91 c4 02 	lds	r25, 0x02C4
    2330:	90 93 a0 02 	sts	0x02A0, r25
    2334:	80 93 9f 02 	sts	0x029F, r24
	arm[0] = arm[1] = -1;
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    2338:	80 91 9f 02 	lds	r24, 0x029F
    233c:	90 91 a0 02 	lds	r25, 0x02A0
    2340:	02 96       	adiw	r24, 0x02	; 2
    2342:	83 70       	andi	r24, 0x03	; 3
    2344:	90 78       	andi	r25, 0x80	; 128
    2346:	99 23       	and	r25, r25
    2348:	24 f4       	brge	.+8      	; 0x2352 <__stack+0x153>
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	8c 6f       	ori	r24, 0xFC	; 252
    234e:	9f 6f       	ori	r25, 0xFF	; 255
    2350:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2352:	90 93 c4 02 	sts	0x02C4, r25
    2356:	80 93 c3 02 	sts	0x02C3, r24
}
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	ff 90       	pop	r15
    2364:	ef 90       	pop	r14
    2366:	df 90       	pop	r13
    2368:	cf 90       	pop	r12
    236a:	bf 90       	pop	r11
    236c:	af 90       	pop	r10
    236e:	9f 90       	pop	r9
    2370:	8f 90       	pop	r8
    2372:	08 95       	ret

00002374 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2374:	80 91 a3 02 	lds	r24, 0x02A3
    2378:	90 91 a4 02 	lds	r25, 0x02A4
    237c:	20 91 b3 02 	lds	r18, 0x02B3
    2380:	30 91 b4 02 	lds	r19, 0x02B4
    2384:	82 17       	cp	r24, r18
    2386:	93 07       	cpc	r25, r19
    2388:	09 f0       	breq	.+2      	; 0x238c <predict+0x18>
    238a:	5f c0       	rjmp	.+190    	; 0x244a <predict+0xd6>
    238c:	20 91 a5 02 	lds	r18, 0x02A5
    2390:	30 91 a6 02 	lds	r19, 0x02A6
    2394:	82 17       	cp	r24, r18
    2396:	93 07       	cpc	r25, r19
    2398:	09 f0       	breq	.+2      	; 0x239c <predict+0x28>
    239a:	57 c0       	rjmp	.+174    	; 0x244a <predict+0xd6>
    239c:	80 91 a7 02 	lds	r24, 0x02A7
    23a0:	90 91 a8 02 	lds	r25, 0x02A8
    23a4:	20 91 b5 02 	lds	r18, 0x02B5
    23a8:	30 91 b6 02 	lds	r19, 0x02B6
    23ac:	82 17       	cp	r24, r18
    23ae:	93 07       	cpc	r25, r19
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <predict+0x40>
    23b2:	4b c0       	rjmp	.+150    	; 0x244a <predict+0xd6>
    23b4:	20 91 a9 02 	lds	r18, 0x02A9
    23b8:	30 91 aa 02 	lds	r19, 0x02AA
    23bc:	82 17       	cp	r24, r18
    23be:	93 07       	cpc	r25, r19
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <predict+0x50>
    23c2:	43 c0       	rjmp	.+134    	; 0x244a <predict+0xd6>
    23c4:	80 91 9f 02 	lds	r24, 0x029F
    23c8:	90 91 a0 02 	lds	r25, 0x02A0
    23cc:	fc 01       	movw	r30, r24
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	ee 0f       	add	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	ed 55       	subi	r30, 0x5D	; 93
    23d8:	fd 4f       	sbci	r31, 0xFD	; 253
    23da:	20 81       	ld	r18, Z
    23dc:	31 81       	ldd	r19, Z+1	; 0x01
    23de:	fc 01       	movw	r30, r24
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ed 54       	subi	r30, 0x4D	; 77
    23e6:	fd 4f       	sbci	r31, 0xFD	; 253
    23e8:	40 81       	ld	r20, Z
    23ea:	51 81       	ldd	r21, Z+1	; 0x01
    23ec:	24 17       	cp	r18, r20
    23ee:	35 07       	cpc	r19, r21
    23f0:	61 f5       	brne	.+88     	; 0x244a <predict+0xd6>
    23f2:	fc 01       	movw	r30, r24
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	ed 55       	subi	r30, 0x5D	; 93
    23fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	28 17       	cp	r18, r24
    2406:	39 07       	cpc	r19, r25
    2408:	01 f5       	brne	.+64     	; 0x244a <predict+0xd6>
    240a:	80 91 9b 02 	lds	r24, 0x029B
    240e:	90 91 9c 02 	lds	r25, 0x029C
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	d1 f4       	brne	.+52     	; 0x244a <predict+0xd6>
    2416:	80 91 9d 02 	lds	r24, 0x029D
    241a:	90 91 9e 02 	lds	r25, 0x029E
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	a1 f4       	brne	.+40     	; 0x244a <predict+0xd6>
    2422:	80 91 c7 02 	lds	r24, 0x02C7
    2426:	90 91 c8 02 	lds	r25, 0x02C8
    242a:	01 96       	adiw	r24, 0x01	; 1
    242c:	71 f4       	brne	.+28     	; 0x244a <predict+0xd6>
    242e:	80 91 c9 02 	lds	r24, 0x02C9
    2432:	90 91 ca 02 	lds	r25, 0x02CA
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	41 f4       	brne	.+16     	; 0x244a <predict+0xd6>
		sorted = total;
    243a:	80 91 00 02 	lds	r24, 0x0200
    243e:	90 91 01 02 	lds	r25, 0x0201
    2442:	90 93 77 02 	sts	0x0277, r25
    2446:	80 93 76 02 	sts	0x0276, r24
    244a:	08 95       	ret

0000244c <main>:

}
int main()
{
	int i;
	init_devices();
    244c:	0e 94 41 02 	call	0x482	; 0x482 <init_devices>
	lcd_set_4bit();
    2450:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2454:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2458:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <color_sensor_scaling>
	threshold=5000;
    245c:	88 e8       	ldi	r24, 0x88	; 136
    245e:	93 e1       	ldi	r25, 0x13	; 19
    2460:	90 93 85 02 	sts	0x0285, r25
    2464:	80 93 84 02 	sts	0x0284, r24
	setIndicatorAndColor();
    2468:	0e 94 06 06 	call	0xc0c	; 0xc0c <setIndicatorAndColor>
	ct = 0; adj = 2;
    246c:	10 92 a0 02 	sts	0x02A0, r1
    2470:	10 92 9f 02 	sts	0x029F, r1
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	90 93 c4 02 	sts	0x02C4, r25
    247c:	80 93 c3 02 	sts	0x02C3, r24
	lcd("Begin");
    2480:	85 e6       	ldi	r24, 0x65	; 101
    2482:	92 e0       	ldi	r25, 0x02	; 2
    2484:	0e 94 14 03 	call	0x628	; 0x628 <lcd>
	while (sorted<total)
    2488:	20 91 76 02 	lds	r18, 0x0276
    248c:	30 91 77 02 	lds	r19, 0x0277
    2490:	80 91 00 02 	lds	r24, 0x0200
    2494:	90 91 01 02 	lds	r25, 0x0201
    2498:	28 17       	cp	r18, r24
    249a:	39 07       	cpc	r19, r25
    249c:	0c f0       	brlt	.+2      	; 0x24a0 <main+0x54>
    249e:	42 c0       	rjmp	.+132    	; 0x2524 <main+0xd8>
	{
		canDrop();
    24a0:	23 da       	rcall	.-3002   	; 0x18e8 <canDrop>
		buzzer_on();
    24a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24a6:	2f ef       	ldi	r18, 0xFF	; 255
    24a8:	8f e7       	ldi	r24, 0x7F	; 127
    24aa:	96 e1       	ldi	r25, 0x16	; 22
    24ac:	21 50       	subi	r18, 0x01	; 1
    24ae:	80 40       	sbci	r24, 0x00	; 0
    24b0:	90 40       	sbci	r25, 0x00	; 0
    24b2:	e1 f7       	brne	.-8      	; 0x24ac <main+0x60>
    24b4:	00 c0       	rjmp	.+0      	; 0x24b6 <main+0x6a>
    24b6:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
    24b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <buzzer_off>
		if (visitedCount == 3)
    24bc:	80 91 74 02 	lds	r24, 0x0274
    24c0:	90 91 75 02 	lds	r25, 0x0275
    24c4:	03 97       	sbiw	r24, 0x03	; 3
    24c6:	09 f4       	brne	.+2      	; 0x24ca <main+0x7e>
			predict();
    24c8:	55 df       	rcall	.-342    	; 0x2374 <predict>
		if (sorted == total)
    24ca:	20 91 76 02 	lds	r18, 0x0276
    24ce:	30 91 77 02 	lds	r19, 0x0277
    24d2:	80 91 00 02 	lds	r24, 0x0200
    24d6:	90 91 01 02 	lds	r25, 0x0201
    24da:	28 17       	cp	r18, r24
    24dc:	39 07       	cpc	r19, r25
    24de:	11 f1       	breq	.+68     	; 0x2524 <main+0xd8>
			break;
		pickup();
    24e0:	0e 94 21 09 	call	0x1242	; 0x1242 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    24e4:	80 91 9f 02 	lds	r24, 0x029F
    24e8:	90 91 a0 02 	lds	r25, 0x02A0
    24ec:	bc 01       	movw	r22, r24
    24ee:	61 70       	andi	r22, 0x01	; 1
    24f0:	70 78       	andi	r23, 0x80	; 128
    24f2:	77 23       	and	r23, r23
    24f4:	34 f4       	brge	.+12     	; 0x2502 <main+0xb6>
    24f6:	61 50       	subi	r22, 0x01	; 1
    24f8:	71 09       	sbc	r23, r1
    24fa:	6e 6f       	ori	r22, 0xFE	; 254
    24fc:	7f 6f       	ori	r23, 0xFF	; 255
    24fe:	6f 5f       	subi	r22, 0xFF	; 255
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	6c 5f       	subi	r22, 0xFC	; 252
    2504:	7f 4f       	sbci	r23, 0xFF	; 255
    2506:	0e 94 27 05 	call	0xa4e	; 0xa4e <traverseToSort>
		sortCheck();
    250a:	01 dd       	rcall	.-1534   	; 0x1f0e <sortCheck>
	color_sensor_scaling();
	threshold=5000;
	setIndicatorAndColor();
	ct = 0; adj = 2;
	lcd("Begin");
	while (sorted<total)
    250c:	20 91 76 02 	lds	r18, 0x0276
    2510:	30 91 77 02 	lds	r19, 0x0277
    2514:	80 91 00 02 	lds	r24, 0x0200
    2518:	90 91 01 02 	lds	r25, 0x0201
    251c:	28 17       	cp	r18, r24
    251e:	39 07       	cpc	r19, r25
    2520:	0c f4       	brge	.+2      	; 0x2524 <main+0xd8>
    2522:	be cf       	rjmp	.-132    	; 0x24a0 <main+0x54>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	08 95       	ret

0000252a <__subsf3>:
    252a:	50 58       	subi	r21, 0x80	; 128

0000252c <__addsf3>:
    252c:	bb 27       	eor	r27, r27
    252e:	aa 27       	eor	r26, r26
    2530:	0e d0       	rcall	.+28     	; 0x254e <__addsf3x>
    2532:	48 c1       	rjmp	.+656    	; 0x27c4 <__fp_round>
    2534:	39 d1       	rcall	.+626    	; 0x27a8 <__fp_pscA>
    2536:	30 f0       	brcs	.+12     	; 0x2544 <__addsf3+0x18>
    2538:	3e d1       	rcall	.+636    	; 0x27b6 <__fp_pscB>
    253a:	20 f0       	brcs	.+8      	; 0x2544 <__addsf3+0x18>
    253c:	31 f4       	brne	.+12     	; 0x254a <__addsf3+0x1e>
    253e:	9f 3f       	cpi	r25, 0xFF	; 255
    2540:	11 f4       	brne	.+4      	; 0x2546 <__addsf3+0x1a>
    2542:	1e f4       	brtc	.+6      	; 0x254a <__addsf3+0x1e>
    2544:	2e c1       	rjmp	.+604    	; 0x27a2 <__fp_nan>
    2546:	0e f4       	brtc	.+2      	; 0x254a <__addsf3+0x1e>
    2548:	e0 95       	com	r30
    254a:	e7 fb       	bst	r30, 7
    254c:	24 c1       	rjmp	.+584    	; 0x2796 <__fp_inf>

0000254e <__addsf3x>:
    254e:	e9 2f       	mov	r30, r25
    2550:	4a d1       	rcall	.+660    	; 0x27e6 <__fp_split3>
    2552:	80 f3       	brcs	.-32     	; 0x2534 <__addsf3+0x8>
    2554:	ba 17       	cp	r27, r26
    2556:	62 07       	cpc	r22, r18
    2558:	73 07       	cpc	r23, r19
    255a:	84 07       	cpc	r24, r20
    255c:	95 07       	cpc	r25, r21
    255e:	18 f0       	brcs	.+6      	; 0x2566 <__addsf3x+0x18>
    2560:	71 f4       	brne	.+28     	; 0x257e <__addsf3x+0x30>
    2562:	9e f5       	brtc	.+102    	; 0x25ca <__addsf3x+0x7c>
    2564:	62 c1       	rjmp	.+708    	; 0x282a <__fp_zero>
    2566:	0e f4       	brtc	.+2      	; 0x256a <__addsf3x+0x1c>
    2568:	e0 95       	com	r30
    256a:	0b 2e       	mov	r0, r27
    256c:	ba 2f       	mov	r27, r26
    256e:	a0 2d       	mov	r26, r0
    2570:	0b 01       	movw	r0, r22
    2572:	b9 01       	movw	r22, r18
    2574:	90 01       	movw	r18, r0
    2576:	0c 01       	movw	r0, r24
    2578:	ca 01       	movw	r24, r20
    257a:	a0 01       	movw	r20, r0
    257c:	11 24       	eor	r1, r1
    257e:	ff 27       	eor	r31, r31
    2580:	59 1b       	sub	r21, r25
    2582:	99 f0       	breq	.+38     	; 0x25aa <__addsf3x+0x5c>
    2584:	59 3f       	cpi	r21, 0xF9	; 249
    2586:	50 f4       	brcc	.+20     	; 0x259c <__addsf3x+0x4e>
    2588:	50 3e       	cpi	r21, 0xE0	; 224
    258a:	68 f1       	brcs	.+90     	; 0x25e6 <__addsf3x+0x98>
    258c:	1a 16       	cp	r1, r26
    258e:	f0 40       	sbci	r31, 0x00	; 0
    2590:	a2 2f       	mov	r26, r18
    2592:	23 2f       	mov	r18, r19
    2594:	34 2f       	mov	r19, r20
    2596:	44 27       	eor	r20, r20
    2598:	58 5f       	subi	r21, 0xF8	; 248
    259a:	f3 cf       	rjmp	.-26     	; 0x2582 <__addsf3x+0x34>
    259c:	46 95       	lsr	r20
    259e:	37 95       	ror	r19
    25a0:	27 95       	ror	r18
    25a2:	a7 95       	ror	r26
    25a4:	f0 40       	sbci	r31, 0x00	; 0
    25a6:	53 95       	inc	r21
    25a8:	c9 f7       	brne	.-14     	; 0x259c <__addsf3x+0x4e>
    25aa:	7e f4       	brtc	.+30     	; 0x25ca <__addsf3x+0x7c>
    25ac:	1f 16       	cp	r1, r31
    25ae:	ba 0b       	sbc	r27, r26
    25b0:	62 0b       	sbc	r22, r18
    25b2:	73 0b       	sbc	r23, r19
    25b4:	84 0b       	sbc	r24, r20
    25b6:	ba f0       	brmi	.+46     	; 0x25e6 <__addsf3x+0x98>
    25b8:	91 50       	subi	r25, 0x01	; 1
    25ba:	a1 f0       	breq	.+40     	; 0x25e4 <__addsf3x+0x96>
    25bc:	ff 0f       	add	r31, r31
    25be:	bb 1f       	adc	r27, r27
    25c0:	66 1f       	adc	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	88 1f       	adc	r24, r24
    25c6:	c2 f7       	brpl	.-16     	; 0x25b8 <__addsf3x+0x6a>
    25c8:	0e c0       	rjmp	.+28     	; 0x25e6 <__addsf3x+0x98>
    25ca:	ba 0f       	add	r27, r26
    25cc:	62 1f       	adc	r22, r18
    25ce:	73 1f       	adc	r23, r19
    25d0:	84 1f       	adc	r24, r20
    25d2:	48 f4       	brcc	.+18     	; 0x25e6 <__addsf3x+0x98>
    25d4:	87 95       	ror	r24
    25d6:	77 95       	ror	r23
    25d8:	67 95       	ror	r22
    25da:	b7 95       	ror	r27
    25dc:	f7 95       	ror	r31
    25de:	9e 3f       	cpi	r25, 0xFE	; 254
    25e0:	08 f0       	brcs	.+2      	; 0x25e4 <__addsf3x+0x96>
    25e2:	b3 cf       	rjmp	.-154    	; 0x254a <__addsf3+0x1e>
    25e4:	93 95       	inc	r25
    25e6:	88 0f       	add	r24, r24
    25e8:	08 f0       	brcs	.+2      	; 0x25ec <__addsf3x+0x9e>
    25ea:	99 27       	eor	r25, r25
    25ec:	ee 0f       	add	r30, r30
    25ee:	97 95       	ror	r25
    25f0:	87 95       	ror	r24
    25f2:	08 95       	ret

000025f4 <__divsf3>:
    25f4:	0c d0       	rcall	.+24     	; 0x260e <__divsf3x>
    25f6:	e6 c0       	rjmp	.+460    	; 0x27c4 <__fp_round>
    25f8:	de d0       	rcall	.+444    	; 0x27b6 <__fp_pscB>
    25fa:	40 f0       	brcs	.+16     	; 0x260c <__divsf3+0x18>
    25fc:	d5 d0       	rcall	.+426    	; 0x27a8 <__fp_pscA>
    25fe:	30 f0       	brcs	.+12     	; 0x260c <__divsf3+0x18>
    2600:	21 f4       	brne	.+8      	; 0x260a <__divsf3+0x16>
    2602:	5f 3f       	cpi	r21, 0xFF	; 255
    2604:	19 f0       	breq	.+6      	; 0x260c <__divsf3+0x18>
    2606:	c7 c0       	rjmp	.+398    	; 0x2796 <__fp_inf>
    2608:	51 11       	cpse	r21, r1
    260a:	10 c1       	rjmp	.+544    	; 0x282c <__fp_szero>
    260c:	ca c0       	rjmp	.+404    	; 0x27a2 <__fp_nan>

0000260e <__divsf3x>:
    260e:	eb d0       	rcall	.+470    	; 0x27e6 <__fp_split3>
    2610:	98 f3       	brcs	.-26     	; 0x25f8 <__divsf3+0x4>

00002612 <__divsf3_pse>:
    2612:	99 23       	and	r25, r25
    2614:	c9 f3       	breq	.-14     	; 0x2608 <__divsf3+0x14>
    2616:	55 23       	and	r21, r21
    2618:	b1 f3       	breq	.-20     	; 0x2606 <__divsf3+0x12>
    261a:	95 1b       	sub	r25, r21
    261c:	55 0b       	sbc	r21, r21
    261e:	bb 27       	eor	r27, r27
    2620:	aa 27       	eor	r26, r26
    2622:	62 17       	cp	r22, r18
    2624:	73 07       	cpc	r23, r19
    2626:	84 07       	cpc	r24, r20
    2628:	38 f0       	brcs	.+14     	; 0x2638 <__divsf3_pse+0x26>
    262a:	9f 5f       	subi	r25, 0xFF	; 255
    262c:	5f 4f       	sbci	r21, 0xFF	; 255
    262e:	22 0f       	add	r18, r18
    2630:	33 1f       	adc	r19, r19
    2632:	44 1f       	adc	r20, r20
    2634:	aa 1f       	adc	r26, r26
    2636:	a9 f3       	breq	.-22     	; 0x2622 <__divsf3_pse+0x10>
    2638:	33 d0       	rcall	.+102    	; 0x26a0 <__divsf3_pse+0x8e>
    263a:	0e 2e       	mov	r0, r30
    263c:	3a f0       	brmi	.+14     	; 0x264c <__divsf3_pse+0x3a>
    263e:	e0 e8       	ldi	r30, 0x80	; 128
    2640:	30 d0       	rcall	.+96     	; 0x26a2 <__divsf3_pse+0x90>
    2642:	91 50       	subi	r25, 0x01	; 1
    2644:	50 40       	sbci	r21, 0x00	; 0
    2646:	e6 95       	lsr	r30
    2648:	00 1c       	adc	r0, r0
    264a:	ca f7       	brpl	.-14     	; 0x263e <__divsf3_pse+0x2c>
    264c:	29 d0       	rcall	.+82     	; 0x26a0 <__divsf3_pse+0x8e>
    264e:	fe 2f       	mov	r31, r30
    2650:	27 d0       	rcall	.+78     	; 0x26a0 <__divsf3_pse+0x8e>
    2652:	66 0f       	add	r22, r22
    2654:	77 1f       	adc	r23, r23
    2656:	88 1f       	adc	r24, r24
    2658:	bb 1f       	adc	r27, r27
    265a:	26 17       	cp	r18, r22
    265c:	37 07       	cpc	r19, r23
    265e:	48 07       	cpc	r20, r24
    2660:	ab 07       	cpc	r26, r27
    2662:	b0 e8       	ldi	r27, 0x80	; 128
    2664:	09 f0       	breq	.+2      	; 0x2668 <__divsf3_pse+0x56>
    2666:	bb 0b       	sbc	r27, r27
    2668:	80 2d       	mov	r24, r0
    266a:	bf 01       	movw	r22, r30
    266c:	ff 27       	eor	r31, r31
    266e:	93 58       	subi	r25, 0x83	; 131
    2670:	5f 4f       	sbci	r21, 0xFF	; 255
    2672:	2a f0       	brmi	.+10     	; 0x267e <__divsf3_pse+0x6c>
    2674:	9e 3f       	cpi	r25, 0xFE	; 254
    2676:	51 05       	cpc	r21, r1
    2678:	68 f0       	brcs	.+26     	; 0x2694 <__divsf3_pse+0x82>
    267a:	8d c0       	rjmp	.+282    	; 0x2796 <__fp_inf>
    267c:	d7 c0       	rjmp	.+430    	; 0x282c <__fp_szero>
    267e:	5f 3f       	cpi	r21, 0xFF	; 255
    2680:	ec f3       	brlt	.-6      	; 0x267c <__divsf3_pse+0x6a>
    2682:	98 3e       	cpi	r25, 0xE8	; 232
    2684:	dc f3       	brlt	.-10     	; 0x267c <__divsf3_pse+0x6a>
    2686:	86 95       	lsr	r24
    2688:	77 95       	ror	r23
    268a:	67 95       	ror	r22
    268c:	b7 95       	ror	r27
    268e:	f7 95       	ror	r31
    2690:	9f 5f       	subi	r25, 0xFF	; 255
    2692:	c9 f7       	brne	.-14     	; 0x2686 <__divsf3_pse+0x74>
    2694:	88 0f       	add	r24, r24
    2696:	91 1d       	adc	r25, r1
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	97 f9       	bld	r25, 7
    269e:	08 95       	ret
    26a0:	e1 e0       	ldi	r30, 0x01	; 1
    26a2:	66 0f       	add	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	bb 1f       	adc	r27, r27
    26aa:	62 17       	cp	r22, r18
    26ac:	73 07       	cpc	r23, r19
    26ae:	84 07       	cpc	r24, r20
    26b0:	ba 07       	cpc	r27, r26
    26b2:	20 f0       	brcs	.+8      	; 0x26bc <__divsf3_pse+0xaa>
    26b4:	62 1b       	sub	r22, r18
    26b6:	73 0b       	sbc	r23, r19
    26b8:	84 0b       	sbc	r24, r20
    26ba:	ba 0b       	sbc	r27, r26
    26bc:	ee 1f       	adc	r30, r30
    26be:	88 f7       	brcc	.-30     	; 0x26a2 <__divsf3_pse+0x90>
    26c0:	e0 95       	com	r30
    26c2:	08 95       	ret

000026c4 <__fixunssfsi>:
    26c4:	98 d0       	rcall	.+304    	; 0x27f6 <__fp_splitA>
    26c6:	88 f0       	brcs	.+34     	; 0x26ea <__fixunssfsi+0x26>
    26c8:	9f 57       	subi	r25, 0x7F	; 127
    26ca:	90 f0       	brcs	.+36     	; 0x26f0 <__fixunssfsi+0x2c>
    26cc:	b9 2f       	mov	r27, r25
    26ce:	99 27       	eor	r25, r25
    26d0:	b7 51       	subi	r27, 0x17	; 23
    26d2:	a0 f0       	brcs	.+40     	; 0x26fc <__fixunssfsi+0x38>
    26d4:	d1 f0       	breq	.+52     	; 0x270a <__fixunssfsi+0x46>
    26d6:	66 0f       	add	r22, r22
    26d8:	77 1f       	adc	r23, r23
    26da:	88 1f       	adc	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	1a f0       	brmi	.+6      	; 0x26e6 <__fixunssfsi+0x22>
    26e0:	ba 95       	dec	r27
    26e2:	c9 f7       	brne	.-14     	; 0x26d6 <__fixunssfsi+0x12>
    26e4:	12 c0       	rjmp	.+36     	; 0x270a <__fixunssfsi+0x46>
    26e6:	b1 30       	cpi	r27, 0x01	; 1
    26e8:	81 f0       	breq	.+32     	; 0x270a <__fixunssfsi+0x46>
    26ea:	9f d0       	rcall	.+318    	; 0x282a <__fp_zero>
    26ec:	b1 e0       	ldi	r27, 0x01	; 1
    26ee:	08 95       	ret
    26f0:	9c c0       	rjmp	.+312    	; 0x282a <__fp_zero>
    26f2:	67 2f       	mov	r22, r23
    26f4:	78 2f       	mov	r23, r24
    26f6:	88 27       	eor	r24, r24
    26f8:	b8 5f       	subi	r27, 0xF8	; 248
    26fa:	39 f0       	breq	.+14     	; 0x270a <__fixunssfsi+0x46>
    26fc:	b9 3f       	cpi	r27, 0xF9	; 249
    26fe:	cc f3       	brlt	.-14     	; 0x26f2 <__fixunssfsi+0x2e>
    2700:	86 95       	lsr	r24
    2702:	77 95       	ror	r23
    2704:	67 95       	ror	r22
    2706:	b3 95       	inc	r27
    2708:	d9 f7       	brne	.-10     	; 0x2700 <__fixunssfsi+0x3c>
    270a:	3e f4       	brtc	.+14     	; 0x271a <__fixunssfsi+0x56>
    270c:	90 95       	com	r25
    270e:	80 95       	com	r24
    2710:	70 95       	com	r23
    2712:	61 95       	neg	r22
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	8f 4f       	sbci	r24, 0xFF	; 255
    2718:	9f 4f       	sbci	r25, 0xFF	; 255
    271a:	08 95       	ret

0000271c <__floatunsisf>:
    271c:	e8 94       	clt
    271e:	09 c0       	rjmp	.+18     	; 0x2732 <__floatsisf+0x12>

00002720 <__floatsisf>:
    2720:	97 fb       	bst	r25, 7
    2722:	3e f4       	brtc	.+14     	; 0x2732 <__floatsisf+0x12>
    2724:	90 95       	com	r25
    2726:	80 95       	com	r24
    2728:	70 95       	com	r23
    272a:	61 95       	neg	r22
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	8f 4f       	sbci	r24, 0xFF	; 255
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	99 23       	and	r25, r25
    2734:	a9 f0       	breq	.+42     	; 0x2760 <__floatsisf+0x40>
    2736:	f9 2f       	mov	r31, r25
    2738:	96 e9       	ldi	r25, 0x96	; 150
    273a:	bb 27       	eor	r27, r27
    273c:	93 95       	inc	r25
    273e:	f6 95       	lsr	r31
    2740:	87 95       	ror	r24
    2742:	77 95       	ror	r23
    2744:	67 95       	ror	r22
    2746:	b7 95       	ror	r27
    2748:	f1 11       	cpse	r31, r1
    274a:	f8 cf       	rjmp	.-16     	; 0x273c <__floatsisf+0x1c>
    274c:	fa f4       	brpl	.+62     	; 0x278c <__floatsisf+0x6c>
    274e:	bb 0f       	add	r27, r27
    2750:	11 f4       	brne	.+4      	; 0x2756 <__floatsisf+0x36>
    2752:	60 ff       	sbrs	r22, 0
    2754:	1b c0       	rjmp	.+54     	; 0x278c <__floatsisf+0x6c>
    2756:	6f 5f       	subi	r22, 0xFF	; 255
    2758:	7f 4f       	sbci	r23, 0xFF	; 255
    275a:	8f 4f       	sbci	r24, 0xFF	; 255
    275c:	9f 4f       	sbci	r25, 0xFF	; 255
    275e:	16 c0       	rjmp	.+44     	; 0x278c <__floatsisf+0x6c>
    2760:	88 23       	and	r24, r24
    2762:	11 f0       	breq	.+4      	; 0x2768 <__floatsisf+0x48>
    2764:	96 e9       	ldi	r25, 0x96	; 150
    2766:	11 c0       	rjmp	.+34     	; 0x278a <__floatsisf+0x6a>
    2768:	77 23       	and	r23, r23
    276a:	21 f0       	breq	.+8      	; 0x2774 <__floatsisf+0x54>
    276c:	9e e8       	ldi	r25, 0x8E	; 142
    276e:	87 2f       	mov	r24, r23
    2770:	76 2f       	mov	r23, r22
    2772:	05 c0       	rjmp	.+10     	; 0x277e <__floatsisf+0x5e>
    2774:	66 23       	and	r22, r22
    2776:	71 f0       	breq	.+28     	; 0x2794 <__floatsisf+0x74>
    2778:	96 e8       	ldi	r25, 0x86	; 134
    277a:	86 2f       	mov	r24, r22
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	2a f0       	brmi	.+10     	; 0x278c <__floatsisf+0x6c>
    2782:	9a 95       	dec	r25
    2784:	66 0f       	add	r22, r22
    2786:	77 1f       	adc	r23, r23
    2788:	88 1f       	adc	r24, r24
    278a:	da f7       	brpl	.-10     	; 0x2782 <__floatsisf+0x62>
    278c:	88 0f       	add	r24, r24
    278e:	96 95       	lsr	r25
    2790:	87 95       	ror	r24
    2792:	97 f9       	bld	r25, 7
    2794:	08 95       	ret

00002796 <__fp_inf>:
    2796:	97 f9       	bld	r25, 7
    2798:	9f 67       	ori	r25, 0x7F	; 127
    279a:	80 e8       	ldi	r24, 0x80	; 128
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	08 95       	ret

000027a2 <__fp_nan>:
    27a2:	9f ef       	ldi	r25, 0xFF	; 255
    27a4:	80 ec       	ldi	r24, 0xC0	; 192
    27a6:	08 95       	ret

000027a8 <__fp_pscA>:
    27a8:	00 24       	eor	r0, r0
    27aa:	0a 94       	dec	r0
    27ac:	16 16       	cp	r1, r22
    27ae:	17 06       	cpc	r1, r23
    27b0:	18 06       	cpc	r1, r24
    27b2:	09 06       	cpc	r0, r25
    27b4:	08 95       	ret

000027b6 <__fp_pscB>:
    27b6:	00 24       	eor	r0, r0
    27b8:	0a 94       	dec	r0
    27ba:	12 16       	cp	r1, r18
    27bc:	13 06       	cpc	r1, r19
    27be:	14 06       	cpc	r1, r20
    27c0:	05 06       	cpc	r0, r21
    27c2:	08 95       	ret

000027c4 <__fp_round>:
    27c4:	09 2e       	mov	r0, r25
    27c6:	03 94       	inc	r0
    27c8:	00 0c       	add	r0, r0
    27ca:	11 f4       	brne	.+4      	; 0x27d0 <__fp_round+0xc>
    27cc:	88 23       	and	r24, r24
    27ce:	52 f0       	brmi	.+20     	; 0x27e4 <__fp_round+0x20>
    27d0:	bb 0f       	add	r27, r27
    27d2:	40 f4       	brcc	.+16     	; 0x27e4 <__fp_round+0x20>
    27d4:	bf 2b       	or	r27, r31
    27d6:	11 f4       	brne	.+4      	; 0x27dc <__fp_round+0x18>
    27d8:	60 ff       	sbrs	r22, 0
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <__fp_round+0x20>
    27dc:	6f 5f       	subi	r22, 0xFF	; 255
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	8f 4f       	sbci	r24, 0xFF	; 255
    27e2:	9f 4f       	sbci	r25, 0xFF	; 255
    27e4:	08 95       	ret

000027e6 <__fp_split3>:
    27e6:	57 fd       	sbrc	r21, 7
    27e8:	90 58       	subi	r25, 0x80	; 128
    27ea:	44 0f       	add	r20, r20
    27ec:	55 1f       	adc	r21, r21
    27ee:	59 f0       	breq	.+22     	; 0x2806 <__fp_splitA+0x10>
    27f0:	5f 3f       	cpi	r21, 0xFF	; 255
    27f2:	71 f0       	breq	.+28     	; 0x2810 <__fp_splitA+0x1a>
    27f4:	47 95       	ror	r20

000027f6 <__fp_splitA>:
    27f6:	88 0f       	add	r24, r24
    27f8:	97 fb       	bst	r25, 7
    27fa:	99 1f       	adc	r25, r25
    27fc:	61 f0       	breq	.+24     	; 0x2816 <__fp_splitA+0x20>
    27fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2800:	79 f0       	breq	.+30     	; 0x2820 <__fp_splitA+0x2a>
    2802:	87 95       	ror	r24
    2804:	08 95       	ret
    2806:	12 16       	cp	r1, r18
    2808:	13 06       	cpc	r1, r19
    280a:	14 06       	cpc	r1, r20
    280c:	55 1f       	adc	r21, r21
    280e:	f2 cf       	rjmp	.-28     	; 0x27f4 <__fp_split3+0xe>
    2810:	46 95       	lsr	r20
    2812:	f1 df       	rcall	.-30     	; 0x27f6 <__fp_splitA>
    2814:	08 c0       	rjmp	.+16     	; 0x2826 <__fp_splitA+0x30>
    2816:	16 16       	cp	r1, r22
    2818:	17 06       	cpc	r1, r23
    281a:	18 06       	cpc	r1, r24
    281c:	99 1f       	adc	r25, r25
    281e:	f1 cf       	rjmp	.-30     	; 0x2802 <__fp_splitA+0xc>
    2820:	86 95       	lsr	r24
    2822:	71 05       	cpc	r23, r1
    2824:	61 05       	cpc	r22, r1
    2826:	08 94       	sec
    2828:	08 95       	ret

0000282a <__fp_zero>:
    282a:	e8 94       	clt

0000282c <__fp_szero>:
    282c:	bb 27       	eor	r27, r27
    282e:	66 27       	eor	r22, r22
    2830:	77 27       	eor	r23, r23
    2832:	cb 01       	movw	r24, r22
    2834:	97 f9       	bld	r25, 7
    2836:	08 95       	ret

00002838 <__divmodhi4>:
    2838:	97 fb       	bst	r25, 7
    283a:	07 2e       	mov	r0, r23
    283c:	16 f4       	brtc	.+4      	; 0x2842 <__divmodhi4+0xa>
    283e:	00 94       	com	r0
    2840:	06 d0       	rcall	.+12     	; 0x284e <__divmodhi4_neg1>
    2842:	77 fd       	sbrc	r23, 7
    2844:	08 d0       	rcall	.+16     	; 0x2856 <__divmodhi4_neg2>
    2846:	0b d0       	rcall	.+22     	; 0x285e <__udivmodhi4>
    2848:	07 fc       	sbrc	r0, 7
    284a:	05 d0       	rcall	.+10     	; 0x2856 <__divmodhi4_neg2>
    284c:	3e f4       	brtc	.+14     	; 0x285c <__divmodhi4_exit>

0000284e <__divmodhi4_neg1>:
    284e:	90 95       	com	r25
    2850:	81 95       	neg	r24
    2852:	9f 4f       	sbci	r25, 0xFF	; 255
    2854:	08 95       	ret

00002856 <__divmodhi4_neg2>:
    2856:	70 95       	com	r23
    2858:	61 95       	neg	r22
    285a:	7f 4f       	sbci	r23, 0xFF	; 255

0000285c <__divmodhi4_exit>:
    285c:	08 95       	ret

0000285e <__udivmodhi4>:
    285e:	aa 1b       	sub	r26, r26
    2860:	bb 1b       	sub	r27, r27
    2862:	51 e1       	ldi	r21, 0x11	; 17
    2864:	07 c0       	rjmp	.+14     	; 0x2874 <__udivmodhi4_ep>

00002866 <__udivmodhi4_loop>:
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	a6 17       	cp	r26, r22
    286c:	b7 07       	cpc	r27, r23
    286e:	10 f0       	brcs	.+4      	; 0x2874 <__udivmodhi4_ep>
    2870:	a6 1b       	sub	r26, r22
    2872:	b7 0b       	sbc	r27, r23

00002874 <__udivmodhi4_ep>:
    2874:	88 1f       	adc	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	5a 95       	dec	r21
    287a:	a9 f7       	brne	.-22     	; 0x2866 <__udivmodhi4_loop>
    287c:	80 95       	com	r24
    287e:	90 95       	com	r25
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	08 95       	ret

00002886 <_exit>:
    2886:	f8 94       	cli

00002888 <__stop_program>:
    2888:	ff cf       	rjmp	.-2      	; 0x2888 <__stop_program>
