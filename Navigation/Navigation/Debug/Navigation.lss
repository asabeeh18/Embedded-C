
Navigation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800200  000028e8  0000297c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800254  00800254  000029d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000328  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d7f  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004dd  00000000  00000000  00005aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002357  00000000  00000000  00005f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000888  00000000  00000000  000082dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c8  00000000  00000000  00008b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bea  00000000  00000000  0000932c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000378  00000000  00000000  0000af16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	07 c2       	rjmp	.+1038   	; 0x414 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ee       	ldi	r30, 0xE8	; 232
      fc:	f8 e2       	ldi	r31, 0x28	; 40
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 35       	cpi	r26, 0x54	; 84
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e5       	ldi	r26, 0x54	; 84
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 3b       	cpi	r26, 0xB9	; 185
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <main>
     122:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_string>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	ec 01       	movw	r28, r24
     26e:	88 81       	ld	r24, Y
     270:	88 23       	and	r24, r24
     272:	29 f0       	breq	.+10     	; 0x27e <lcd_string+0x16>
     274:	21 96       	adiw	r28, 0x01	; 1
     276:	d3 df       	rcall	.-90     	; 0x21e <lcd_wr_char>
     278:	89 91       	ld	r24, Y+
     27a:	81 11       	cpse	r24, r1
     27c:	fc cf       	rjmp	.-8      	; 0x276 <lcd_string+0xe>
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <lcd_cursor>:
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	69 f0       	breq	.+26     	; 0x2a2 <lcd_cursor+0x1e>
     288:	18 f4       	brcc	.+6      	; 0x290 <lcd_cursor+0xc>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	31 f0       	breq	.+12     	; 0x29a <lcd_cursor+0x16>
     28e:	08 95       	ret
     290:	83 30       	cpi	r24, 0x03	; 3
     292:	59 f0       	breq	.+22     	; 0x2aa <lcd_cursor+0x26>
     294:	84 30       	cpi	r24, 0x04	; 4
     296:	69 f0       	breq	.+26     	; 0x2b2 <lcd_cursor+0x2e>
     298:	08 95       	ret
     29a:	8f e7       	ldi	r24, 0x7F	; 127
     29c:	86 0f       	add	r24, r22
     29e:	89 cf       	rjmp	.-238    	; 0x1b2 <lcd_wr_command>
     2a0:	08 95       	ret
     2a2:	8f eb       	ldi	r24, 0xBF	; 191
     2a4:	86 0f       	add	r24, r22
     2a6:	85 cf       	rjmp	.-246    	; 0x1b2 <lcd_wr_command>
     2a8:	08 95       	ret
     2aa:	83 e9       	ldi	r24, 0x93	; 147
     2ac:	86 0f       	add	r24, r22
     2ae:	81 cf       	rjmp	.-254    	; 0x1b2 <lcd_wr_command>
     2b0:	08 95       	ret
     2b2:	83 ed       	ldi	r24, 0xD3	; 211
     2b4:	86 0f       	add	r24, r22
     2b6:	7d cf       	rjmp	.-262    	; 0x1b2 <lcd_wr_command>
     2b8:	08 95       	ret

000002ba <timer5_init>:
     2ba:	e1 e2       	ldi	r30, 0x21	; 33
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	10 82       	st	Z, r1
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	80 93 25 01 	sts	0x0125, r24
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	90 93 24 01 	sts	0x0124, r25
     2cc:	10 92 29 01 	sts	0x0129, r1
     2d0:	80 93 28 01 	sts	0x0128, r24
     2d4:	10 92 2b 01 	sts	0x012B, r1
     2d8:	80 93 2a 01 	sts	0x012A, r24
     2dc:	10 92 2d 01 	sts	0x012D, r1
     2e0:	80 93 2c 01 	sts	0x012C, r24
     2e4:	89 ea       	ldi	r24, 0xA9	; 169
     2e6:	80 93 20 01 	sts	0x0120, r24
     2ea:	8b e0       	ldi	r24, 0x0B	; 11
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <motion_pin_config>:
     2f0:	81 b1       	in	r24, 0x01	; 1
     2f2:	8f 60       	ori	r24, 0x0F	; 15
     2f4:	81 b9       	out	0x01, r24	; 1
     2f6:	82 b1       	in	r24, 0x02	; 2
     2f8:	80 7f       	andi	r24, 0xF0	; 240
     2fa:	82 b9       	out	0x02, r24	; 2
     2fc:	ea e0       	ldi	r30, 0x0A	; 10
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	80 81       	ld	r24, Z
     302:	88 61       	ori	r24, 0x18	; 24
     304:	80 83       	st	Z, r24
     306:	eb e0       	ldi	r30, 0x0B	; 11
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	80 81       	ld	r24, Z
     30c:	88 61       	ori	r24, 0x18	; 24
     30e:	80 83       	st	Z, r24
     310:	08 95       	ret

00000312 <motion_set>:
     312:	92 b1       	in	r25, 0x02	; 2
     314:	90 7f       	andi	r25, 0xF0	; 240
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	98 2b       	or	r25, r24
     31a:	92 b9       	out	0x02, r25	; 2
     31c:	08 95       	ret

0000031e <forward>:
     31e:	86 e0       	ldi	r24, 0x06	; 6
     320:	f8 cf       	rjmp	.-16     	; 0x312 <motion_set>
     322:	08 95       	ret

00000324 <back>:
     324:	89 e0       	ldi	r24, 0x09	; 9
     326:	f5 cf       	rjmp	.-22     	; 0x312 <motion_set>
     328:	08 95       	ret

0000032a <left>:
     32a:	85 e0       	ldi	r24, 0x05	; 5
     32c:	f2 cf       	rjmp	.-28     	; 0x312 <motion_set>
     32e:	08 95       	ret

00000330 <right>:
     330:	8a e0       	ldi	r24, 0x0A	; 10
     332:	ef cf       	rjmp	.-34     	; 0x312 <motion_set>
     334:	08 95       	ret

00000336 <stop>:
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	ec cf       	rjmp	.-40     	; 0x312 <motion_set>
     33a:	08 95       	ret

0000033c <lcd_port_config>:
     33c:	87 b1       	in	r24, 0x07	; 7
     33e:	87 6f       	ori	r24, 0xF7	; 247
     340:	87 b9       	out	0x07, r24	; 7
     342:	88 b1       	in	r24, 0x08	; 8
     344:	80 78       	andi	r24, 0x80	; 128
     346:	88 b9       	out	0x08, r24	; 8
     348:	08 95       	ret

0000034a <color_sensor_pin_config>:
     34a:	8a b1       	in	r24, 0x0a	; 10
     34c:	8e 6f       	ori	r24, 0xFE	; 254
     34e:	8a b9       	out	0x0a, r24	; 10
     350:	58 9a       	sbi	0x0b, 0	; 11
     352:	08 95       	ret

00000354 <adc_pin_config>:
     354:	10 ba       	out	0x10, r1	; 16
     356:	11 ba       	out	0x11, r1	; 17
     358:	10 92 07 01 	sts	0x0107, r1
     35c:	10 92 08 01 	sts	0x0108, r1
     360:	08 95       	ret

00000362 <servo1_pin_config>:
     362:	25 9a       	sbi	0x04, 5	; 4
     364:	2d 9a       	sbi	0x05, 5	; 5
     366:	08 95       	ret

00000368 <servo2_pin_config>:
     368:	26 9a       	sbi	0x04, 6	; 4
     36a:	2e 9a       	sbi	0x05, 6	; 5
     36c:	08 95       	ret

0000036e <servo3_pin_config>:
     36e:	27 9a       	sbi	0x04, 7	; 4
     370:	2f 9a       	sbi	0x05, 7	; 5
     372:	08 95       	ret

00000374 <timer1_init>:
     374:	e1 e8       	ldi	r30, 0x81	; 129
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	10 82       	st	Z, r1
     37a:	8c ef       	ldi	r24, 0xFC	; 252
     37c:	80 93 85 00 	sts	0x0085, r24
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 84 00 	sts	0x0084, r24
     386:	93 e0       	ldi	r25, 0x03	; 3
     388:	90 93 89 00 	sts	0x0089, r25
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	80 93 88 00 	sts	0x0088, r24
     392:	90 93 8b 00 	sts	0x008B, r25
     396:	80 93 8a 00 	sts	0x008A, r24
     39a:	90 93 8d 00 	sts	0x008D, r25
     39e:	80 93 8c 00 	sts	0x008C, r24
     3a2:	90 93 87 00 	sts	0x0087, r25
     3a6:	80 93 86 00 	sts	0x0086, r24
     3aa:	8b ea       	ldi	r24, 0xAB	; 171
     3ac:	80 93 80 00 	sts	0x0080, r24
     3b0:	10 92 82 00 	sts	0x0082, r1
     3b4:	8c e0       	ldi	r24, 0x0C	; 12
     3b6:	80 83       	st	Z, r24
     3b8:	08 95       	ret

000003ba <port_init>:
     3ba:	c0 df       	rcall	.-128    	; 0x33c <lcd_port_config>
     3bc:	cb df       	rcall	.-106    	; 0x354 <adc_pin_config>
     3be:	3b 9a       	sbi	0x07, 3	; 7
     3c0:	43 98       	cbi	0x08, 3	; 8
     3c2:	cf df       	rcall	.-98     	; 0x362 <servo1_pin_config>
     3c4:	d1 df       	rcall	.-94     	; 0x368 <servo2_pin_config>
     3c6:	d3 df       	rcall	.-90     	; 0x36e <servo3_pin_config>
     3c8:	c0 cf       	rjmp	.-128    	; 0x34a <color_sensor_pin_config>
     3ca:	08 95       	ret

000003cc <ADC_Conversion>:
     3cc:	88 30       	cpi	r24, 0x08	; 8
     3ce:	18 f0       	brcs	.+6      	; 0x3d6 <ADC_Conversion+0xa>
     3d0:	98 e0       	ldi	r25, 0x08	; 8
     3d2:	90 93 7b 00 	sts	0x007B, r25
     3d6:	87 70       	andi	r24, 0x07	; 7
     3d8:	80 62       	ori	r24, 0x20	; 32
     3da:	80 93 7c 00 	sts	0x007C, r24
     3de:	ea e7       	ldi	r30, 0x7A	; 122
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 83       	st	Z, r24
     3e8:	80 81       	ld	r24, Z
     3ea:	84 ff       	sbrs	r24, 4
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <ADC_Conversion+0x1c>
     3ee:	80 91 79 00 	lds	r24, 0x0079
     3f2:	ea e7       	ldi	r30, 0x7A	; 122
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	90 81       	ld	r25, Z
     3f8:	90 61       	ori	r25, 0x10	; 16
     3fa:	90 83       	st	Z, r25
     3fc:	10 92 7b 00 	sts	0x007B, r1
     400:	08 95       	ret

00000402 <color_sensor_pin_interrupt_init>:
     402:	f8 94       	cli
     404:	e9 e6       	ldi	r30, 0x69	; 105
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	82 60       	ori	r24, 0x02	; 2
     40c:	80 83       	st	Z, r24
     40e:	e8 9a       	sbi	0x1d, 0	; 29
     410:	78 94       	sei
     412:	08 95       	ret

00000414 <__vector_1>:
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
     426:	80 91 60 02 	lds	r24, 0x0260
     42a:	90 91 61 02 	lds	r25, 0x0261
     42e:	a0 91 62 02 	lds	r26, 0x0262
     432:	b0 91 63 02 	lds	r27, 0x0263
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	a1 1d       	adc	r26, r1
     43a:	b1 1d       	adc	r27, r1
     43c:	80 93 60 02 	sts	0x0260, r24
     440:	90 93 61 02 	sts	0x0261, r25
     444:	a0 93 62 02 	sts	0x0262, r26
     448:	b0 93 63 02 	sts	0x0263, r27
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <adc_init>:
     45e:	ea e7       	ldi	r30, 0x7A	; 122
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	10 82       	st	Z, r1
     464:	10 92 7b 00 	sts	0x007B, r1
     468:	80 e2       	ldi	r24, 0x20	; 32
     46a:	80 93 7c 00 	sts	0x007C, r24
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	80 bf       	out	0x30, r24	; 48
     472:	86 e8       	ldi	r24, 0x86	; 134
     474:	80 83       	st	Z, r24
     476:	08 95       	ret

00000478 <init_devices>:
     478:	f8 94       	cli
     47a:	9f df       	rcall	.-194    	; 0x3ba <port_init>
     47c:	c2 df       	rcall	.-124    	; 0x402 <color_sensor_pin_interrupt_init>
     47e:	ef df       	rcall	.-34     	; 0x45e <adc_init>
     480:	37 df       	rcall	.-402    	; 0x2f0 <motion_pin_config>
     482:	1b df       	rcall	.-458    	; 0x2ba <timer5_init>
     484:	77 df       	rcall	.-274    	; 0x374 <timer1_init>
     486:	78 94       	sei
     488:	08 95       	ret

0000048a <servo_1>:
     48a:	10 92 89 00 	sts	0x0089, r1
     48e:	68 2f       	mov	r22, r24
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 bd 13 	call	0x277a	; 0x277a <__floatunsisf>
     49a:	2b e7       	ldi	r18, 0x7B	; 123
     49c:	34 e1       	ldi	r19, 0x14	; 20
     49e:	4e ee       	ldi	r20, 0xEE	; 238
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	0e 94 29 13 	call	0x2652	; 0x2652 <__divsf3>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	4c e0       	ldi	r20, 0x0C	; 12
     4ac:	52 e4       	ldi	r21, 0x42	; 66
     4ae:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     4b2:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
     4b6:	60 93 88 00 	sts	0x0088, r22
     4ba:	08 95       	ret

000004bc <filter_red>:
     4bc:	5e 98       	cbi	0x0b, 6	; 11
     4be:	5f 98       	cbi	0x0b, 7	; 11
     4c0:	08 95       	ret

000004c2 <filter_green>:
     4c2:	5e 9a       	sbi	0x0b, 6	; 11
     4c4:	5f 9a       	sbi	0x0b, 7	; 11
     4c6:	08 95       	ret

000004c8 <filter_blue>:
     4c8:	5e 98       	cbi	0x0b, 6	; 11
     4ca:	5f 9a       	sbi	0x0b, 7	; 11
     4cc:	08 95       	ret

000004ce <color_sensor_scaling>:
     4ce:	5c 9a       	sbi	0x0b, 4	; 11
     4d0:	5d 9a       	sbi	0x0b, 5	; 11
     4d2:	08 95       	ret

000004d4 <red_read>:
     4d4:	f3 df       	rcall	.-26     	; 0x4bc <filter_red>
     4d6:	10 92 60 02 	sts	0x0260, r1
     4da:	10 92 61 02 	sts	0x0261, r1
     4de:	10 92 62 02 	sts	0x0262, r1
     4e2:	10 92 63 02 	sts	0x0263, r1
     4e6:	2f ef       	ldi	r18, 0xFF	; 255
     4e8:	8f e7       	ldi	r24, 0x7F	; 127
     4ea:	94 e0       	ldi	r25, 0x04	; 4
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	90 40       	sbci	r25, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <red_read+0x18>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <red_read+0x22>
     4f6:	00 00       	nop
     4f8:	80 91 60 02 	lds	r24, 0x0260
     4fc:	90 91 61 02 	lds	r25, 0x0261
     500:	a0 91 62 02 	lds	r26, 0x0262
     504:	b0 91 63 02 	lds	r27, 0x0263
     508:	80 93 7e 02 	sts	0x027E, r24
     50c:	90 93 7f 02 	sts	0x027F, r25
     510:	a0 93 80 02 	sts	0x0280, r26
     514:	b0 93 81 02 	sts	0x0281, r27
     518:	2f ef       	ldi	r18, 0xFF	; 255
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9c e2       	ldi	r25, 0x2C	; 44
     51e:	21 50       	subi	r18, 0x01	; 1
     520:	80 40       	sbci	r24, 0x00	; 0
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <red_read+0x4a>
     526:	00 c0       	rjmp	.+0      	; 0x528 <red_read+0x54>
     528:	00 00       	nop
     52a:	08 95       	ret

0000052c <green_read>:
     52c:	ca df       	rcall	.-108    	; 0x4c2 <filter_green>
     52e:	10 92 60 02 	sts	0x0260, r1
     532:	10 92 61 02 	sts	0x0261, r1
     536:	10 92 62 02 	sts	0x0262, r1
     53a:	10 92 63 02 	sts	0x0263, r1
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	8f e7       	ldi	r24, 0x7F	; 127
     542:	94 e0       	ldi	r25, 0x04	; 4
     544:	21 50       	subi	r18, 0x01	; 1
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	90 40       	sbci	r25, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <green_read+0x18>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <green_read+0x22>
     54e:	00 00       	nop
     550:	80 91 60 02 	lds	r24, 0x0260
     554:	90 91 61 02 	lds	r25, 0x0261
     558:	a0 91 62 02 	lds	r26, 0x0262
     55c:	b0 91 63 02 	lds	r27, 0x0263
     560:	80 93 7a 02 	sts	0x027A, r24
     564:	90 93 7b 02 	sts	0x027B, r25
     568:	a0 93 7c 02 	sts	0x027C, r26
     56c:	b0 93 7d 02 	sts	0x027D, r27
     570:	08 95       	ret

00000572 <blue_read>:
     572:	aa df       	rcall	.-172    	; 0x4c8 <filter_blue>
     574:	10 92 60 02 	sts	0x0260, r1
     578:	10 92 61 02 	sts	0x0261, r1
     57c:	10 92 62 02 	sts	0x0262, r1
     580:	10 92 63 02 	sts	0x0263, r1
     584:	2f ef       	ldi	r18, 0xFF	; 255
     586:	8f e7       	ldi	r24, 0x7F	; 127
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	21 50       	subi	r18, 0x01	; 1
     58c:	80 40       	sbci	r24, 0x00	; 0
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <blue_read+0x18>
     592:	00 c0       	rjmp	.+0      	; 0x594 <blue_read+0x22>
     594:	00 00       	nop
     596:	80 91 60 02 	lds	r24, 0x0260
     59a:	90 91 61 02 	lds	r25, 0x0261
     59e:	a0 91 62 02 	lds	r26, 0x0262
     5a2:	b0 91 63 02 	lds	r27, 0x0263
     5a6:	80 93 6e 02 	sts	0x026E, r24
     5aa:	90 93 6f 02 	sts	0x026F, r25
     5ae:	a0 93 70 02 	sts	0x0270, r26
     5b2:	b0 93 71 02 	sts	0x0271, r27
     5b6:	08 95       	ret

000005b8 <set_color>:
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	08 df       	rcall	.-496    	; 0x3cc <ADC_Conversion>
     5bc:	80 93 57 02 	sts	0x0257, r24
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	04 df       	rcall	.-504    	; 0x3cc <ADC_Conversion>
     5c4:	80 93 56 02 	sts	0x0256, r24
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	00 df       	rcall	.-512    	; 0x3cc <ADC_Conversion>
     5cc:	80 93 55 02 	sts	0x0255, r24
     5d0:	08 95       	ret

000005d2 <Delay>:
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	8c 01       	movw	r16, r24
     5dc:	18 16       	cp	r1, r24
     5de:	19 06       	cpc	r1, r25
     5e0:	8c f4       	brge	.+34     	; 0x604 <Delay+0x32>
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	d0 e0       	ldi	r29, 0x00	; 0
     5e6:	09 c0       	rjmp	.+18     	; 0x5fa <Delay+0x28>
     5e8:	86 e6       	ldi	r24, 0x66	; 102
     5ea:	9e e0       	ldi	r25, 0x0E	; 14
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <Delay+0x1a>
     5f0:	00 00       	nop
     5f2:	21 96       	adiw	r28, 0x01	; 1
     5f4:	c0 17       	cp	r28, r16
     5f6:	d1 07       	cpc	r29, r17
     5f8:	39 f0       	breq	.+14     	; 0x608 <Delay+0x36>
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	e7 de       	rcall	.-562    	; 0x3cc <ADC_Conversion>
     5fe:	89 32       	cpi	r24, 0x29	; 41
     600:	98 f3       	brcs	.-26     	; 0x5e8 <Delay+0x16>
     602:	02 c0       	rjmp	.+4      	; 0x608 <Delay+0x36>
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d0 e0       	ldi	r29, 0x00	; 0
     608:	96 de       	rcall	.-724    	; 0x336 <stop>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	c0 17       	cp	r28, r16
     60e:	d1 07       	cpc	r29, r17
     610:	0c f0       	brlt	.+2      	; 0x614 <Delay+0x42>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <backJaa>:
     61e:	82 de       	rcall	.-764    	; 0x324 <back>
     620:	cb df       	rcall	.-106    	; 0x5b8 <set_color>
     622:	80 91 56 02 	lds	r24, 0x0256
     626:	89 32       	cpi	r24, 0x29	; 41
     628:	d0 f3       	brcs	.-12     	; 0x61e <backJaa>
     62a:	80 91 57 02 	lds	r24, 0x0257
     62e:	89 32       	cpi	r24, 0x29	; 41
     630:	20 f4       	brcc	.+8      	; 0x63a <backJaa+0x1c>
     632:	80 91 55 02 	lds	r24, 0x0255
     636:	89 32       	cpi	r24, 0x29	; 41
     638:	90 f3       	brcs	.-28     	; 0x61e <backJaa>
     63a:	08 95       	ret

0000063c <lcd>:
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	b6 dd       	rcall	.-1172   	; 0x1b2 <lcd_wr_command>
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	1c de       	rcall	.-968    	; 0x284 <lcd_cursor>
     64c:	ce 01       	movw	r24, r28
     64e:	0c de       	rcall	.-1000   	; 0x268 <lcd_string>
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <semiCorrect>:
     656:	80 91 56 02 	lds	r24, 0x0256
     65a:	88 32       	cpi	r24, 0x28	; 40
     65c:	08 f0       	brcs	.+2      	; 0x660 <semiCorrect+0xa>
     65e:	4f c0       	rjmp	.+158    	; 0x6fe <semiCorrect+0xa8>
     660:	80 91 57 02 	lds	r24, 0x0257
     664:	89 32       	cpi	r24, 0x29	; 41
     666:	28 f1       	brcs	.+74     	; 0x6b2 <semiCorrect+0x5c>
     668:	90 91 55 02 	lds	r25, 0x0255
     66c:	98 32       	cpi	r25, 0x28	; 40
     66e:	08 f5       	brcc	.+66     	; 0x6b2 <semiCorrect+0x5c>
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	e3 df       	rcall	.-58     	; 0x63c <lcd>
     676:	80 91 56 02 	lds	r24, 0x0256
     67a:	88 32       	cpi	r24, 0x28	; 40
     67c:	b0 f4       	brcc	.+44     	; 0x6aa <semiCorrect+0x54>
     67e:	80 91 57 02 	lds	r24, 0x0257
     682:	89 32       	cpi	r24, 0x29	; 41
     684:	90 f0       	brcs	.+36     	; 0x6aa <semiCorrect+0x54>
     686:	80 91 55 02 	lds	r24, 0x0255
     68a:	88 32       	cpi	r24, 0x28	; 40
     68c:	70 f4       	brcc	.+28     	; 0x6aa <semiCorrect+0x54>
     68e:	4d de       	rcall	.-870    	; 0x32a <left>
     690:	93 df       	rcall	.-218    	; 0x5b8 <set_color>
     692:	80 91 56 02 	lds	r24, 0x0256
     696:	88 32       	cpi	r24, 0x28	; 40
     698:	40 f4       	brcc	.+16     	; 0x6aa <semiCorrect+0x54>
     69a:	80 91 57 02 	lds	r24, 0x0257
     69e:	89 32       	cpi	r24, 0x29	; 41
     6a0:	20 f0       	brcs	.+8      	; 0x6aa <semiCorrect+0x54>
     6a2:	80 91 55 02 	lds	r24, 0x0255
     6a6:	88 32       	cpi	r24, 0x28	; 40
     6a8:	90 f3       	brcs	.-28     	; 0x68e <semiCorrect+0x38>
     6aa:	88 e0       	ldi	r24, 0x08	; 8
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	c6 cf       	rjmp	.-116    	; 0x63c <lcd>
     6b0:	08 95       	ret
     6b2:	90 91 55 02 	lds	r25, 0x0255
     6b6:	99 32       	cpi	r25, 0x29	; 41
     6b8:	10 f1       	brcs	.+68     	; 0x6fe <semiCorrect+0xa8>
     6ba:	88 32       	cpi	r24, 0x28	; 40
     6bc:	00 f5       	brcc	.+64     	; 0x6fe <semiCorrect+0xa8>
     6be:	8a e0       	ldi	r24, 0x0A	; 10
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	bc df       	rcall	.-136    	; 0x63c <lcd>
     6c4:	80 91 56 02 	lds	r24, 0x0256
     6c8:	88 32       	cpi	r24, 0x28	; 40
     6ca:	b0 f4       	brcc	.+44     	; 0x6f8 <semiCorrect+0xa2>
     6cc:	80 91 57 02 	lds	r24, 0x0257
     6d0:	88 32       	cpi	r24, 0x28	; 40
     6d2:	90 f4       	brcc	.+36     	; 0x6f8 <semiCorrect+0xa2>
     6d4:	80 91 55 02 	lds	r24, 0x0255
     6d8:	89 32       	cpi	r24, 0x29	; 41
     6da:	70 f0       	brcs	.+28     	; 0x6f8 <semiCorrect+0xa2>
     6dc:	29 de       	rcall	.-942    	; 0x330 <right>
     6de:	6c df       	rcall	.-296    	; 0x5b8 <set_color>
     6e0:	80 91 56 02 	lds	r24, 0x0256
     6e4:	88 32       	cpi	r24, 0x28	; 40
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <semiCorrect+0xa2>
     6e8:	80 91 57 02 	lds	r24, 0x0257
     6ec:	88 32       	cpi	r24, 0x28	; 40
     6ee:	20 f4       	brcc	.+8      	; 0x6f8 <semiCorrect+0xa2>
     6f0:	80 91 55 02 	lds	r24, 0x0255
     6f4:	89 32       	cpi	r24, 0x29	; 41
     6f6:	90 f7       	brcc	.-28     	; 0x6dc <semiCorrect+0x86>
     6f8:	88 e0       	ldi	r24, 0x08	; 8
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	9f cf       	rjmp	.-194    	; 0x63c <lcd>
     6fe:	08 95       	ret

00000700 <correct>:
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	85 e0       	ldi	r24, 0x05	; 5
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 73 02 	sts	0x0273, r25
     710:	80 93 72 02 	sts	0x0272, r24
     714:	8e e0       	ldi	r24, 0x0E	; 14
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	91 df       	rcall	.-222    	; 0x63c <lcd>
     71a:	0d de       	rcall	.-998    	; 0x336 <stop>
     71c:	80 91 54 02 	lds	r24, 0x0254
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <correct+0x26>
     724:	34 c0       	rjmp	.+104    	; 0x78e <correct+0x8e>
     726:	10 92 54 02 	sts	0x0254, r1
     72a:	ce e3       	ldi	r28, 0x3E	; 62
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	02 e0       	ldi	r16, 0x02	; 2
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	fe dd       	rcall	.-1028   	; 0x330 <right>
     734:	02 30       	cpi	r16, 0x02	; 2
     736:	11 05       	cpc	r17, r1
     738:	31 f4       	brne	.+12     	; 0x746 <correct+0x46>
     73a:	8e e1       	ldi	r24, 0x1E	; 30
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	49 df       	rcall	.-366    	; 0x5d2 <Delay>
     740:	88 23       	and	r24, r24
     742:	29 f0       	breq	.+10     	; 0x74e <correct+0x4e>
     744:	5b c0       	rjmp	.+182    	; 0x7fc <correct+0xfc>
     746:	ce 01       	movw	r24, r28
     748:	44 df       	rcall	.-376    	; 0x5d2 <Delay>
     74a:	81 11       	cpse	r24, r1
     74c:	57 c0       	rjmp	.+174    	; 0x7fc <correct+0xfc>
     74e:	f3 dd       	rcall	.-1050   	; 0x336 <stop>
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	3c de       	rcall	.-904    	; 0x3cc <ADC_Conversion>
     754:	89 32       	cpi	r24, 0x29	; 41
     756:	08 f0       	brcs	.+2      	; 0x75a <correct+0x5a>
     758:	4d c0       	rjmp	.+154    	; 0x7f4 <correct+0xf4>
     75a:	7d df       	rcall	.-262    	; 0x656 <semiCorrect>
     75c:	e6 dd       	rcall	.-1076   	; 0x32a <left>
     75e:	02 30       	cpi	r16, 0x02	; 2
     760:	11 05       	cpc	r17, r1
     762:	31 f4       	brne	.+12     	; 0x770 <correct+0x70>
     764:	8c e3       	ldi	r24, 0x3C	; 60
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	34 df       	rcall	.-408    	; 0x5d2 <Delay>
     76a:	88 23       	and	r24, r24
     76c:	29 f0       	breq	.+10     	; 0x778 <correct+0x78>
     76e:	46 c0       	rjmp	.+140    	; 0x7fc <correct+0xfc>
     770:	ce 01       	movw	r24, r28
     772:	2f df       	rcall	.-418    	; 0x5d2 <Delay>
     774:	81 11       	cpse	r24, r1
     776:	42 c0       	rjmp	.+132    	; 0x7fc <correct+0xfc>
     778:	de dd       	rcall	.-1092   	; 0x336 <stop>
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	27 de       	rcall	.-946    	; 0x3cc <ADC_Conversion>
     77e:	64 96       	adiw	r28, 0x14	; 20
     780:	88 32       	cpi	r24, 0x28	; 40
     782:	08 f4       	brcc	.+2      	; 0x786 <correct+0x86>
     784:	37 c0       	rjmp	.+110    	; 0x7f4 <correct+0xf4>
     786:	67 df       	rcall	.-306    	; 0x656 <semiCorrect>
     788:	0c 5e       	subi	r16, 0xEC	; 236
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	d2 cf       	rjmp	.-92     	; 0x732 <correct+0x32>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 54 02 	sts	0x0254, r24
     794:	ce e3       	ldi	r28, 0x3E	; 62
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	02 e0       	ldi	r16, 0x02	; 2
     79a:	10 e0       	ldi	r17, 0x00	; 0
     79c:	c6 dd       	rcall	.-1140   	; 0x32a <left>
     79e:	02 30       	cpi	r16, 0x02	; 2
     7a0:	11 05       	cpc	r17, r1
     7a2:	31 f4       	brne	.+12     	; 0x7b0 <correct+0xb0>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	14 df       	rcall	.-472    	; 0x5d2 <Delay>
     7aa:	88 23       	and	r24, r24
     7ac:	29 f0       	breq	.+10     	; 0x7b8 <correct+0xb8>
     7ae:	26 c0       	rjmp	.+76     	; 0x7fc <correct+0xfc>
     7b0:	ce 01       	movw	r24, r28
     7b2:	0f df       	rcall	.-482    	; 0x5d2 <Delay>
     7b4:	81 11       	cpse	r24, r1
     7b6:	22 c0       	rjmp	.+68     	; 0x7fc <correct+0xfc>
     7b8:	be dd       	rcall	.-1156   	; 0x336 <stop>
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	07 de       	rcall	.-1010   	; 0x3cc <ADC_Conversion>
     7be:	89 32       	cpi	r24, 0x29	; 41
     7c0:	c8 f4       	brcc	.+50     	; 0x7f4 <correct+0xf4>
     7c2:	49 df       	rcall	.-366    	; 0x656 <semiCorrect>
     7c4:	b5 dd       	rcall	.-1174   	; 0x330 <right>
     7c6:	02 30       	cpi	r16, 0x02	; 2
     7c8:	11 05       	cpc	r17, r1
     7ca:	31 f4       	brne	.+12     	; 0x7d8 <correct+0xd8>
     7cc:	8c e3       	ldi	r24, 0x3C	; 60
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	00 df       	rcall	.-512    	; 0x5d2 <Delay>
     7d2:	88 23       	and	r24, r24
     7d4:	29 f0       	breq	.+10     	; 0x7e0 <correct+0xe0>
     7d6:	12 c0       	rjmp	.+36     	; 0x7fc <correct+0xfc>
     7d8:	ce 01       	movw	r24, r28
     7da:	fb de       	rcall	.-522    	; 0x5d2 <Delay>
     7dc:	81 11       	cpse	r24, r1
     7de:	0e c0       	rjmp	.+28     	; 0x7fc <correct+0xfc>
     7e0:	aa dd       	rcall	.-1196   	; 0x336 <stop>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	f3 dd       	rcall	.-1050   	; 0x3cc <ADC_Conversion>
     7e6:	64 96       	adiw	r28, 0x14	; 20
     7e8:	88 32       	cpi	r24, 0x28	; 40
     7ea:	20 f0       	brcs	.+8      	; 0x7f4 <correct+0xf4>
     7ec:	34 df       	rcall	.-408    	; 0x656 <semiCorrect>
     7ee:	0c 5e       	subi	r16, 0xEC	; 236
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
     7f2:	d4 cf       	rjmp	.-88     	; 0x79c <correct+0x9c>
     7f4:	88 e0       	ldi	r24, 0x08	; 8
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	21 df       	rcall	.-446    	; 0x63c <lcd>
     7fa:	9d dd       	rcall	.-1222   	; 0x336 <stop>
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <noNatak>:
     806:	86 e9       	ldi	r24, 0x96	; 150
     808:	80 93 28 01 	sts	0x0128, r24
     80c:	80 93 2a 01 	sts	0x012A, r24
     810:	80 91 56 02 	lds	r24, 0x0256
     814:	88 32       	cpi	r24, 0x28	; 40
     816:	08 f0       	brcs	.+2      	; 0x81a <noNatak+0x14>
     818:	52 c0       	rjmp	.+164    	; 0x8be <noNatak+0xb8>
     81a:	80 91 57 02 	lds	r24, 0x0257
     81e:	89 32       	cpi	r24, 0x29	; 41
     820:	28 f1       	brcs	.+74     	; 0x86c <noNatak+0x66>
     822:	90 91 55 02 	lds	r25, 0x0255
     826:	98 32       	cpi	r25, 0x28	; 40
     828:	08 f5       	brcc	.+66     	; 0x86c <noNatak+0x66>
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	06 df       	rcall	.-500    	; 0x63c <lcd>
     830:	80 91 56 02 	lds	r24, 0x0256
     834:	88 32       	cpi	r24, 0x28	; 40
     836:	b0 f4       	brcc	.+44     	; 0x864 <noNatak+0x5e>
     838:	80 91 57 02 	lds	r24, 0x0257
     83c:	89 32       	cpi	r24, 0x29	; 41
     83e:	90 f0       	brcs	.+36     	; 0x864 <noNatak+0x5e>
     840:	80 91 55 02 	lds	r24, 0x0255
     844:	88 32       	cpi	r24, 0x28	; 40
     846:	70 f4       	brcc	.+28     	; 0x864 <noNatak+0x5e>
     848:	70 dd       	rcall	.-1312   	; 0x32a <left>
     84a:	b6 de       	rcall	.-660    	; 0x5b8 <set_color>
     84c:	80 91 56 02 	lds	r24, 0x0256
     850:	88 32       	cpi	r24, 0x28	; 40
     852:	40 f4       	brcc	.+16     	; 0x864 <noNatak+0x5e>
     854:	80 91 57 02 	lds	r24, 0x0257
     858:	89 32       	cpi	r24, 0x29	; 41
     85a:	20 f0       	brcs	.+8      	; 0x864 <noNatak+0x5e>
     85c:	80 91 55 02 	lds	r24, 0x0255
     860:	88 32       	cpi	r24, 0x28	; 40
     862:	90 f3       	brcs	.-28     	; 0x848 <noNatak+0x42>
     864:	88 e0       	ldi	r24, 0x08	; 8
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	e9 de       	rcall	.-558    	; 0x63c <lcd>
     86a:	38 c0       	rjmp	.+112    	; 0x8dc <noNatak+0xd6>
     86c:	90 91 55 02 	lds	r25, 0x0255
     870:	99 32       	cpi	r25, 0x29	; 41
     872:	18 f1       	brcs	.+70     	; 0x8ba <noNatak+0xb4>
     874:	88 32       	cpi	r24, 0x28	; 40
     876:	08 f5       	brcc	.+66     	; 0x8ba <noNatak+0xb4>
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	df de       	rcall	.-578    	; 0x63c <lcd>
     87e:	80 91 56 02 	lds	r24, 0x0256
     882:	88 32       	cpi	r24, 0x28	; 40
     884:	b0 f4       	brcc	.+44     	; 0x8b2 <noNatak+0xac>
     886:	80 91 57 02 	lds	r24, 0x0257
     88a:	88 32       	cpi	r24, 0x28	; 40
     88c:	90 f4       	brcc	.+36     	; 0x8b2 <noNatak+0xac>
     88e:	80 91 55 02 	lds	r24, 0x0255
     892:	89 32       	cpi	r24, 0x29	; 41
     894:	70 f0       	brcs	.+28     	; 0x8b2 <noNatak+0xac>
     896:	4c dd       	rcall	.-1384   	; 0x330 <right>
     898:	8f de       	rcall	.-738    	; 0x5b8 <set_color>
     89a:	80 91 56 02 	lds	r24, 0x0256
     89e:	88 32       	cpi	r24, 0x28	; 40
     8a0:	40 f4       	brcc	.+16     	; 0x8b2 <noNatak+0xac>
     8a2:	80 91 57 02 	lds	r24, 0x0257
     8a6:	88 32       	cpi	r24, 0x28	; 40
     8a8:	20 f4       	brcc	.+8      	; 0x8b2 <noNatak+0xac>
     8aa:	80 91 55 02 	lds	r24, 0x0255
     8ae:	89 32       	cpi	r24, 0x29	; 41
     8b0:	90 f7       	brcc	.-28     	; 0x896 <noNatak+0x90>
     8b2:	88 e0       	ldi	r24, 0x08	; 8
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	c2 de       	rcall	.-636    	; 0x63c <lcd>
     8b8:	11 c0       	rjmp	.+34     	; 0x8dc <noNatak+0xd6>
     8ba:	22 df       	rcall	.-444    	; 0x700 <correct>
     8bc:	0f c0       	rjmp	.+30     	; 0x8dc <noNatak+0xd6>
     8be:	80 91 57 02 	lds	r24, 0x0257
     8c2:	89 32       	cpi	r24, 0x29	; 41
     8c4:	20 f0       	brcs	.+8      	; 0x8ce <noNatak+0xc8>
     8c6:	90 91 55 02 	lds	r25, 0x0255
     8ca:	98 32       	cpi	r25, 0x28	; 40
     8cc:	40 f0       	brcs	.+16     	; 0x8de <noNatak+0xd8>
     8ce:	88 32       	cpi	r24, 0x28	; 40
     8d0:	20 f4       	brcc	.+8      	; 0x8da <noNatak+0xd4>
     8d2:	80 91 55 02 	lds	r24, 0x0255
     8d6:	89 32       	cpi	r24, 0x29	; 41
     8d8:	10 f4       	brcc	.+4      	; 0x8de <noNatak+0xd8>
     8da:	12 df       	rcall	.-476    	; 0x700 <correct>
     8dc:	2c cd       	rjmp	.-1448   	; 0x336 <stop>
     8de:	08 95       	ret

000008e0 <forwardJaa>:
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	08 e2       	ldi	r16, 0x28	; 40
     8ec:	11 e0       	ldi	r17, 0x01	; 1
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f0 ef       	ldi	r31, 0xF0	; 240
     8f2:	ff 2e       	mov	r15, r31
     8f4:	f0 2d       	mov	r31, r0
     8f6:	ca e2       	ldi	r28, 0x2A	; 42
     8f8:	d1 e0       	ldi	r29, 0x01	; 1
     8fa:	11 dd       	rcall	.-1502   	; 0x31e <forward>
     8fc:	5d de       	rcall	.-838    	; 0x5b8 <set_color>
     8fe:	80 91 56 02 	lds	r24, 0x0256
     902:	89 32       	cpi	r24, 0x29	; 41
     904:	40 f0       	brcs	.+16     	; 0x916 <forwardJaa+0x36>
     906:	80 91 57 02 	lds	r24, 0x0257
     90a:	89 32       	cpi	r24, 0x29	; 41
     90c:	a8 f4       	brcc	.+42     	; 0x938 <forwardJaa+0x58>
     90e:	80 91 55 02 	lds	r24, 0x0255
     912:	89 32       	cpi	r24, 0x29	; 41
     914:	88 f4       	brcc	.+34     	; 0x938 <forwardJaa+0x58>
     916:	f8 01       	movw	r30, r16
     918:	f0 82       	st	Z, r15
     91a:	f8 82       	st	Y, r15
     91c:	80 91 56 02 	lds	r24, 0x0256
     920:	89 32       	cpi	r24, 0x29	; 41
     922:	40 f0       	brcs	.+16     	; 0x934 <forwardJaa+0x54>
     924:	80 91 57 02 	lds	r24, 0x0257
     928:	88 32       	cpi	r24, 0x28	; 40
     92a:	20 f4       	brcc	.+8      	; 0x934 <forwardJaa+0x54>
     92c:	80 91 55 02 	lds	r24, 0x0255
     930:	88 32       	cpi	r24, 0x28	; 40
     932:	18 f3       	brcs	.-58     	; 0x8fa <forwardJaa+0x1a>
     934:	68 df       	rcall	.-304    	; 0x806 <noNatak>
     936:	d4 df       	rcall	.-88     	; 0x8e0 <forwardJaa>
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	08 95       	ret

00000944 <front>:
     944:	cd df       	rcall	.-102    	; 0x8e0 <forwardJaa>
     946:	80 91 76 02 	lds	r24, 0x0276
     94a:	90 91 77 02 	lds	r25, 0x0277
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	90 93 77 02 	sts	0x0277, r25
     954:	80 93 76 02 	sts	0x0276, r24
     958:	08 95       	ret

0000095a <backward>:
     95a:	61 de       	rcall	.-830    	; 0x61e <backJaa>
     95c:	80 91 76 02 	lds	r24, 0x0276
     960:	90 91 77 02 	lds	r25, 0x0277
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	90 93 77 02 	sts	0x0277, r25
     96a:	80 93 76 02 	sts	0x0276, r24
     96e:	08 95       	ret

00000970 <turnRight>:
     970:	80 91 58 02 	lds	r24, 0x0258
     974:	90 91 59 02 	lds	r25, 0x0259
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	83 70       	andi	r24, 0x03	; 3
     97c:	90 78       	andi	r25, 0x80	; 128
     97e:	99 23       	and	r25, r25
     980:	24 f4       	brge	.+8      	; 0x98a <turnRight+0x1a>
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	8c 6f       	ori	r24, 0xFC	; 252
     986:	9f 6f       	ori	r25, 0xFF	; 255
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	90 93 59 02 	sts	0x0259, r25
     98e:	80 93 58 02 	sts	0x0258, r24
     992:	08 95       	ret

00000994 <turnLeft>:
     994:	80 91 58 02 	lds	r24, 0x0258
     998:	90 91 59 02 	lds	r25, 0x0259
     99c:	03 96       	adiw	r24, 0x03	; 3
     99e:	83 70       	andi	r24, 0x03	; 3
     9a0:	90 78       	andi	r25, 0x80	; 128
     9a2:	99 23       	and	r25, r25
     9a4:	24 f4       	brge	.+8      	; 0x9ae <turnLeft+0x1a>
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	8c 6f       	ori	r24, 0xFC	; 252
     9aa:	9f 6f       	ori	r25, 0xFF	; 255
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	90 93 59 02 	sts	0x0259, r25
     9b2:	80 93 58 02 	sts	0x0258, r24
     9b6:	08 95       	ret

000009b8 <turn>:
     9b8:	80 91 58 02 	lds	r24, 0x0258
     9bc:	90 91 59 02 	lds	r25, 0x0259
     9c0:	02 96       	adiw	r24, 0x02	; 2
     9c2:	83 70       	andi	r24, 0x03	; 3
     9c4:	90 78       	andi	r25, 0x80	; 128
     9c6:	99 23       	and	r25, r25
     9c8:	24 f4       	brge	.+8      	; 0x9d2 <turn+0x1a>
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	8c 6f       	ori	r24, 0xFC	; 252
     9ce:	9f 6f       	ori	r25, 0xFF	; 255
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	90 93 59 02 	sts	0x0259, r25
     9d6:	80 93 58 02 	sts	0x0258, r24
     9da:	08 95       	ret

000009dc <traverseToSort>:
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
     9e2:	04 97       	sbiw	r24, 0x04	; 4
     9e4:	02 97       	sbiw	r24, 0x02	; 2
     9e6:	88 f5       	brcc	.+98     	; 0xa4a <traverseToSort+0x6e>
     9e8:	c4 30       	cpi	r28, 0x04	; 4
     9ea:	d1 05       	cpc	r29, r1
     9ec:	39 f4       	brne	.+14     	; 0x9fc <traverseToSort+0x20>
     9ee:	80 91 58 02 	lds	r24, 0x0258
     9f2:	90 91 59 02 	lds	r25, 0x0259
     9f6:	89 2b       	or	r24, r25
     9f8:	51 f0       	breq	.+20     	; 0xa0e <traverseToSort+0x32>
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <traverseToSort+0x36>
     9fc:	c5 30       	cpi	r28, 0x05	; 5
     9fe:	d1 05       	cpc	r29, r1
     a00:	41 f4       	brne	.+16     	; 0xa12 <traverseToSort+0x36>
     a02:	80 91 58 02 	lds	r24, 0x0258
     a06:	90 91 59 02 	lds	r25, 0x0259
     a0a:	02 97       	sbiw	r24, 0x02	; 2
     a0c:	11 f4       	brne	.+4      	; 0xa12 <traverseToSort+0x36>
     a0e:	b0 df       	rcall	.-160    	; 0x970 <turnRight>
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <traverseToSort+0x38>
     a12:	c0 df       	rcall	.-128    	; 0x994 <turnLeft>
     a14:	97 df       	rcall	.-210    	; 0x944 <front>
     a16:	96 df       	rcall	.-212    	; 0x944 <front>
     a18:	24 97       	sbiw	r28, 0x04	; 4
     a1a:	39 f4       	brne	.+14     	; 0xa2a <traverseToSort+0x4e>
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 5b 02 	sts	0x025B, r25
     a24:	80 93 5a 02 	sts	0x025A, r24
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <traverseToSort+0x5a>
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 5b 02 	sts	0x025B, r25
     a32:	80 93 5a 02 	sts	0x025A, r24
     a36:	80 91 76 02 	lds	r24, 0x0276
     a3a:	90 91 77 02 	lds	r25, 0x0277
     a3e:	02 96       	adiw	r24, 0x02	; 2
     a40:	90 93 77 02 	sts	0x0277, r25
     a44:	80 93 76 02 	sts	0x0276, r24
     a48:	23 c0       	rjmp	.+70     	; 0xa90 <traverseToSort+0xb4>
     a4a:	22 97       	sbiw	r28, 0x02	; 2
     a4c:	3c f4       	brge	.+14     	; 0xa5c <traverseToSort+0x80>
     a4e:	80 91 58 02 	lds	r24, 0x0258
     a52:	90 91 59 02 	lds	r25, 0x0259
     a56:	89 2b       	or	r24, r25
     a58:	39 f0       	breq	.+14     	; 0xa68 <traverseToSort+0x8c>
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <traverseToSort+0x90>
     a5c:	80 91 58 02 	lds	r24, 0x0258
     a60:	90 91 59 02 	lds	r25, 0x0259
     a64:	02 97       	sbiw	r24, 0x02	; 2
     a66:	11 f4       	brne	.+4      	; 0xa6c <traverseToSort+0x90>
     a68:	78 df       	rcall	.-272    	; 0x95a <backward>
     a6a:	01 c0       	rjmp	.+2      	; 0xa6e <traverseToSort+0x92>
     a6c:	6b df       	rcall	.-298    	; 0x944 <front>
     a6e:	80 91 87 02 	lds	r24, 0x0287
     a72:	90 91 88 02 	lds	r25, 0x0288
     a76:	81 70       	andi	r24, 0x01	; 1
     a78:	90 78       	andi	r25, 0x80	; 128
     a7a:	99 23       	and	r25, r25
     a7c:	24 f4       	brge	.+8      	; 0xa86 <traverseToSort+0xaa>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	8e 6f       	ori	r24, 0xFE	; 254
     a82:	9f 6f       	ori	r25, 0xFF	; 255
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	04 96       	adiw	r24, 0x04	; 4
     a88:	90 93 5b 02 	sts	0x025B, r25
     a8c:	80 93 5a 02 	sts	0x025A, r24
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <scan>:
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	1c dd       	rcall	.-1480   	; 0x4d4 <red_read>
     a9c:	6a dd       	rcall	.-1324   	; 0x572 <blue_read>
     a9e:	46 dd       	rcall	.-1396   	; 0x52c <green_read>
     aa0:	80 91 6c 02 	lds	r24, 0x026C
     aa4:	90 91 6d 02 	lds	r25, 0x026D
     aa8:	aa 27       	eor	r26, r26
     aaa:	97 fd       	sbrc	r25, 7
     aac:	a0 95       	com	r26
     aae:	ba 2f       	mov	r27, r26
     ab0:	40 91 7e 02 	lds	r20, 0x027E
     ab4:	50 91 7f 02 	lds	r21, 0x027F
     ab8:	60 91 80 02 	lds	r22, 0x0280
     abc:	70 91 81 02 	lds	r23, 0x0281
     ac0:	48 17       	cp	r20, r24
     ac2:	59 07       	cpc	r21, r25
     ac4:	6a 07       	cpc	r22, r26
     ac6:	7b 07       	cpc	r23, r27
     ac8:	d8 f4       	brcc	.+54     	; 0xb00 <scan+0x6a>
     aca:	40 91 7a 02 	lds	r20, 0x027A
     ace:	50 91 7b 02 	lds	r21, 0x027B
     ad2:	60 91 7c 02 	lds	r22, 0x027C
     ad6:	70 91 7d 02 	lds	r23, 0x027D
     ada:	48 17       	cp	r20, r24
     adc:	59 07       	cpc	r21, r25
     ade:	6a 07       	cpc	r22, r26
     ae0:	7b 07       	cpc	r23, r27
     ae2:	70 f4       	brcc	.+28     	; 0xb00 <scan+0x6a>
     ae4:	40 91 6e 02 	lds	r20, 0x026E
     ae8:	50 91 6f 02 	lds	r21, 0x026F
     aec:	60 91 70 02 	lds	r22, 0x0270
     af0:	70 91 71 02 	lds	r23, 0x0271
     af4:	48 17       	cp	r20, r24
     af6:	59 07       	cpc	r21, r25
     af8:	6a 07       	cpc	r22, r26
     afa:	7b 07       	cpc	r23, r27
     afc:	08 f4       	brcc	.+2      	; 0xb00 <scan+0x6a>
     afe:	46 c0       	rjmp	.+140    	; 0xb8c <scan+0xf6>
     b00:	40 91 7e 02 	lds	r20, 0x027E
     b04:	50 91 7f 02 	lds	r21, 0x027F
     b08:	60 91 80 02 	lds	r22, 0x0280
     b0c:	70 91 81 02 	lds	r23, 0x0281
     b10:	80 91 6e 02 	lds	r24, 0x026E
     b14:	90 91 6f 02 	lds	r25, 0x026F
     b18:	a0 91 70 02 	lds	r26, 0x0270
     b1c:	b0 91 71 02 	lds	r27, 0x0271
     b20:	84 17       	cp	r24, r20
     b22:	95 07       	cpc	r25, r21
     b24:	a6 07       	cpc	r26, r22
     b26:	b7 07       	cpc	r27, r23
     b28:	c8 f4       	brcc	.+50     	; 0xb5c <scan+0xc6>
     b2a:	00 91 7e 02 	lds	r16, 0x027E
     b2e:	10 91 7f 02 	lds	r17, 0x027F
     b32:	20 91 80 02 	lds	r18, 0x0280
     b36:	30 91 81 02 	lds	r19, 0x0281
     b3a:	40 91 7a 02 	lds	r20, 0x027A
     b3e:	50 91 7b 02 	lds	r21, 0x027B
     b42:	60 91 7c 02 	lds	r22, 0x027C
     b46:	70 91 7d 02 	lds	r23, 0x027D
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	40 17       	cp	r20, r16
     b50:	51 07       	cpc	r21, r17
     b52:	62 07       	cpc	r22, r18
     b54:	73 07       	cpc	r23, r19
     b56:	f8 f4       	brcc	.+62     	; 0xb96 <scan+0x100>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	1d c0       	rjmp	.+58     	; 0xb96 <scan+0x100>
     b5c:	40 91 6e 02 	lds	r20, 0x026E
     b60:	50 91 6f 02 	lds	r21, 0x026F
     b64:	60 91 70 02 	lds	r22, 0x0270
     b68:	70 91 71 02 	lds	r23, 0x0271
     b6c:	80 91 7a 02 	lds	r24, 0x027A
     b70:	90 91 7b 02 	lds	r25, 0x027B
     b74:	a0 91 7c 02 	lds	r26, 0x027C
     b78:	b0 91 7d 02 	lds	r27, 0x027D
     b7c:	84 17       	cp	r24, r20
     b7e:	95 07       	cpc	r25, r21
     b80:	a6 07       	cpc	r26, r22
     b82:	b7 07       	cpc	r27, r23
     b84:	30 f4       	brcc	.+12     	; 0xb92 <scan+0xfc>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <scan+0x100>
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <scan+0x100>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <setIndicatorAndColor>:
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cb e9       	ldi	r28, 0x9B	; 155
     ba2:	d2 e0       	ldi	r29, 0x02	; 2
     ba4:	eb e8       	ldi	r30, 0x8B	; 139
     ba6:	f2 e0       	ldi	r31, 0x02	; 2
     ba8:	a4 e6       	ldi	r26, 0x64	; 100
     baa:	b2 e0       	ldi	r27, 0x02	; 2
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	2e ef       	ldi	r18, 0xFE	; 254
     bb2:	3f ef       	ldi	r19, 0xFF	; 255
     bb4:	89 93       	st	Y+, r24
     bb6:	99 93       	st	Y+, r25
     bb8:	33 83       	std	Z+3, r19	; 0x03
     bba:	22 83       	std	Z+2, r18	; 0x02
     bbc:	31 83       	std	Z+1, r19	; 0x01
     bbe:	20 83       	st	Z, r18
     bc0:	1d 92       	st	X+, r1
     bc2:	1d 92       	st	X+, r1
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	34 96       	adiw	r30, 0x04	; 4
     bc8:	84 30       	cpi	r24, 0x04	; 4
     bca:	91 05       	cpc	r25, r1
     bcc:	99 f7       	brne	.-26     	; 0xbb4 <setIndicatorAndColor+0x18>
     bce:	e0 91 9b 02 	lds	r30, 0x029B
     bd2:	f0 91 9c 02 	lds	r31, 0x029C
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	ed 55       	subi	r30, 0x5D	; 93
     bdc:	fd 4f       	sbci	r31, 0xFD	; 253
     bde:	11 82       	std	Z+1, r1	; 0x01
     be0:	10 82       	st	Z, r1
     be2:	e0 91 9d 02 	lds	r30, 0x029D
     be6:	f0 91 9e 02 	lds	r31, 0x029E
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ed 55       	subi	r30, 0x5D	; 93
     bf0:	fd 4f       	sbci	r31, 0xFD	; 253
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	80 83       	st	Z, r24
     bfa:	e0 91 9f 02 	lds	r30, 0x029F
     bfe:	f0 91 a0 02 	lds	r31, 0x02A0
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ed 55       	subi	r30, 0x5D	; 93
     c08:	fd 4f       	sbci	r31, 0xFD	; 253
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	91 83       	std	Z+1, r25	; 0x01
     c10:	80 83       	st	Z, r24
     c12:	e0 91 a1 02 	lds	r30, 0x02A1
     c16:	f0 91 a2 02 	lds	r31, 0x02A2
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ed 55       	subi	r30, 0x5D	; 93
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	9f ef       	ldi	r25, 0xFF	; 255
     c2e:	90 93 86 02 	sts	0x0286, r25
     c32:	80 93 85 02 	sts	0x0285, r24
     c36:	90 93 84 02 	sts	0x0284, r25
     c3a:	80 93 83 02 	sts	0x0283, r24
     c3e:	90 93 b2 02 	sts	0x02B2, r25
     c42:	80 93 b1 02 	sts	0x02B1, r24
     c46:	90 93 b0 02 	sts	0x02B0, r25
     c4a:	80 93 af 02 	sts	0x02AF, r24
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <terminalCheck1>:
void terminalCheck1()
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
	if (ct != ot)
     c58:	80 91 87 02 	lds	r24, 0x0287
     c5c:	90 91 88 02 	lds	r25, 0x0288
     c60:	20 91 5a 02 	lds	r18, 0x025A
     c64:	30 91 5b 02 	lds	r19, 0x025B
     c68:	82 17       	cp	r24, r18
     c6a:	93 07       	cpc	r25, r19
     c6c:	89 f1       	breq	.+98     	; 0xcd0 <terminalCheck1+0x7c>
	{
		if (dir == 1 || dir == 3)
     c6e:	20 91 58 02 	lds	r18, 0x0258
     c72:	30 91 59 02 	lds	r19, 0x0259
     c76:	2d 7f       	andi	r18, 0xFD	; 253
     c78:	21 30       	cpi	r18, 0x01	; 1
     c7a:	31 05       	cpc	r19, r1
     c7c:	49 f4       	brne	.+18     	; 0xc90 <terminalCheck1+0x3c>
		{
			if (ct == 3 || ct == 0)
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	91 05       	cpc	r25, r1
     c82:	11 f0       	breq	.+4      	; 0xc88 <terminalCheck1+0x34>
     c84:	89 2b       	or	r24, r25
     c86:	11 f4       	brne	.+4      	; 0xc8c <terminalCheck1+0x38>
				turnRight();
     c88:	73 de       	rcall	.-794    	; 0x970 <turnRight>
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <terminalCheck1+0x3a>
			else turnLeft();
     c8c:	83 de       	rcall	.-762    	; 0x994 <turnLeft>
			front();
     c8e:	5a de       	rcall	.-844    	; 0x944 <front>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     c90:	80 91 87 02 	lds	r24, 0x0287
     c94:	90 91 88 02 	lds	r25, 0x0288
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	91 05       	cpc	r25, r1
     c9c:	38 f4       	brcc	.+14     	; 0xcac <terminalCheck1+0x58>
     c9e:	20 91 58 02 	lds	r18, 0x0258
     ca2:	30 91 59 02 	lds	r19, 0x0259
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	49 f0       	breq	.+18     	; 0xcbe <terminalCheck1+0x6a>
     cac:	02 97       	sbiw	r24, 0x02	; 2
     cae:	02 97       	sbiw	r24, 0x02	; 2
     cb0:	38 f4       	brcc	.+14     	; 0xcc0 <terminalCheck1+0x6c>
     cb2:	80 91 58 02 	lds	r24, 0x0258
     cb6:	90 91 59 02 	lds	r25, 0x0259
     cba:	89 2b       	or	r24, r25
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <terminalCheck1+0x6c>
			backward();
     cbe:	4d de       	rcall	.-870    	; 0x95a <backward>
		ot = ct;
     cc0:	80 91 87 02 	lds	r24, 0x0287
     cc4:	90 91 88 02 	lds	r25, 0x0288
     cc8:	90 93 5b 02 	sts	0x025B, r25
     ccc:	80 93 5a 02 	sts	0x025A, r24
	}
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     cd0:	80 91 87 02 	lds	r24, 0x0287
     cd4:	90 91 88 02 	lds	r25, 0x0288
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	30 f4       	brcc	.+12     	; 0xcea <terminalCheck1+0x96>
     cde:	20 91 58 02 	lds	r18, 0x0258
     ce2:	30 91 59 02 	lds	r19, 0x0259
     ce6:	23 2b       	or	r18, r19
     ce8:	49 f0       	breq	.+18     	; 0xcfc <terminalCheck1+0xa8>
     cea:	02 97       	sbiw	r24, 0x02	; 2
     cec:	02 97       	sbiw	r24, 0x02	; 2
     cee:	40 f4       	brcc	.+16     	; 0xd00 <terminalCheck1+0xac>
     cf0:	80 91 58 02 	lds	r24, 0x0258
     cf4:	90 91 59 02 	lds	r25, 0x0259
     cf8:	02 97       	sbiw	r24, 0x02	; 2
     cfa:	11 f4       	brne	.+4      	; 0xd00 <terminalCheck1+0xac>
		turnRight();
     cfc:	39 de       	rcall	.-910    	; 0x970 <turnRight>
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <terminalCheck1+0xae>
	else turnLeft();
     d00:	49 de       	rcall	.-878    	; 0x994 <turnLeft>
	//..printf("Enter term[%d][%d]\n", ct, 0);
	//..scanf("%d", &term[ct][0]);
	term[ct][0]=scan();
     d02:	c0 91 87 02 	lds	r28, 0x0287
     d06:	d0 91 88 02 	lds	r29, 0x0288
     d0a:	c5 de       	rcall	.-630    	; 0xa96 <scan>
     d0c:	cc 0f       	add	r28, r28
     d0e:	dd 1f       	adc	r29, r29
     d10:	cc 0f       	add	r28, r28
     d12:	dd 1f       	adc	r29, r29
     d14:	c5 57       	subi	r28, 0x75	; 117
     d16:	dd 4f       	sbci	r29, 0xFD	; 253
     d18:	99 83       	std	Y+1, r25	; 0x01
     d1a:	88 83       	st	Y, r24
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
     d1c:	20 91 87 02 	lds	r18, 0x0287
     d20:	30 91 88 02 	lds	r19, 0x0288
     d24:	f9 01       	movw	r30, r18
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	e5 57       	subi	r30, 0x75	; 117
     d30:	fd 4f       	sbci	r31, 0xFD	; 253
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	8f 3f       	cpi	r24, 0xFF	; 255
     d38:	4f ef       	ldi	r20, 0xFF	; 255
     d3a:	94 07       	cpc	r25, r20
     d3c:	51 f0       	breq	.+20     	; 0xd52 <terminalCheck1+0xfe>
     d3e:	f9 01       	movw	r30, r18
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e5 56       	subi	r30, 0x65	; 101
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	20 81       	ld	r18, Z
     d4a:	31 81       	ldd	r19, Z+1	; 0x01
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	49 f4       	brne	.+18     	; 0xd64 <terminalCheck1+0x110>
		total--;
     d52:	80 91 00 02 	lds	r24, 0x0200
     d56:	90 91 01 02 	lds	r25, 0x0201
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	90 93 01 02 	sts	0x0201, r25
     d60:	80 93 00 02 	sts	0x0200, r24
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <terminalCheck2>:
void terminalCheck2()
{
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     d6e:	80 91 87 02 	lds	r24, 0x0287
     d72:	90 91 88 02 	lds	r25, 0x0288
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	91 05       	cpc	r25, r1
     d7a:	30 f4       	brcc	.+12     	; 0xd88 <terminalCheck2+0x1e>
     d7c:	20 91 58 02 	lds	r18, 0x0258
     d80:	30 91 59 02 	lds	r19, 0x0259
     d84:	23 2b       	or	r18, r19
     d86:	69 f0       	breq	.+26     	; 0xda2 <terminalCheck2+0x38>
     d88:	9c 01       	movw	r18, r24
     d8a:	22 50       	subi	r18, 0x02	; 2
     d8c:	31 09       	sbc	r19, r1
     d8e:	22 30       	cpi	r18, 0x02	; 2
     d90:	31 05       	cpc	r19, r1
     d92:	48 f4       	brcc	.+18     	; 0xda6 <terminalCheck2+0x3c>
     d94:	40 91 58 02 	lds	r20, 0x0258
     d98:	50 91 59 02 	lds	r21, 0x0259
     d9c:	42 30       	cpi	r20, 0x02	; 2
     d9e:	51 05       	cpc	r21, r1
     da0:	11 f4       	brne	.+4      	; 0xda6 <terminalCheck2+0x3c>
		turnLeft();
     da2:	f8 dd       	rcall	.-1040   	; 0x994 <turnLeft>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <terminalCheck2+0x64>
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     da6:	02 97       	sbiw	r24, 0x02	; 2
     da8:	30 f4       	brcc	.+12     	; 0xdb6 <terminalCheck2+0x4c>
     daa:	80 91 58 02 	lds	r24, 0x0258
     dae:	90 91 59 02 	lds	r25, 0x0259
     db2:	02 97       	sbiw	r24, 0x02	; 2
     db4:	49 f0       	breq	.+18     	; 0xdc8 <terminalCheck2+0x5e>
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	40 f4       	brcc	.+16     	; 0xdcc <terminalCheck2+0x62>
     dbc:	80 91 58 02 	lds	r24, 0x0258
     dc0:	90 91 59 02 	lds	r25, 0x0259
     dc4:	89 2b       	or	r24, r25
     dc6:	11 f4       	brne	.+4      	; 0xdcc <terminalCheck2+0x62>
		turnRight();
     dc8:	d3 dd       	rcall	.-1114   	; 0x970 <turnRight>
     dca:	01 c0       	rjmp	.+2      	; 0xdce <terminalCheck2+0x64>
	else turn();
     dcc:	f5 dd       	rcall	.-1046   	; 0x9b8 <turn>
	//..printf("Enter term[%d][%d]\n", ct, 1);
	//..scanf("%d", &term[ct][1]);
	term[ct][1]=scan();
     dce:	c0 91 87 02 	lds	r28, 0x0287
     dd2:	d0 91 88 02 	lds	r29, 0x0288
     dd6:	5f de       	rcall	.-834    	; 0xa96 <scan>
     dd8:	cc 0f       	add	r28, r28
     dda:	dd 1f       	adc	r29, r29
     ddc:	cc 0f       	add	r28, r28
     dde:	dd 1f       	adc	r29, r29
     de0:	c5 57       	subi	r28, 0x75	; 117
     de2:	dd 4f       	sbci	r29, 0xFD	; 253
     de4:	9b 83       	std	Y+3, r25	; 0x03
     de6:	8a 83       	std	Y+2, r24	; 0x02
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
     de8:	80 91 87 02 	lds	r24, 0x0287
     dec:	90 91 88 02 	lds	r25, 0x0288
     df0:	fc 01       	movw	r30, r24
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	e5 57       	subi	r30, 0x75	; 117
     dfc:	fd 4f       	sbci	r31, 0xFD	; 253
     dfe:	22 81       	ldd	r18, Z+2	; 0x02
     e00:	33 81       	ldd	r19, Z+3	; 0x03
     e02:	2f 3f       	cpi	r18, 0xFF	; 255
     e04:	4f ef       	ldi	r20, 0xFF	; 255
     e06:	34 07       	cpc	r19, r20
     e08:	51 f0       	breq	.+20     	; 0xe1e <terminalCheck2+0xb4>
     e0a:	fc 01       	movw	r30, r24
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	e5 56       	subi	r30, 0x65	; 101
     e12:	fd 4f       	sbci	r31, 0xFD	; 253
     e14:	40 81       	ld	r20, Z
     e16:	51 81       	ldd	r21, Z+1	; 0x01
     e18:	24 17       	cp	r18, r20
     e1a:	35 07       	cpc	r19, r21
     e1c:	51 f4       	brne	.+20     	; 0xe32 <terminalCheck2+0xc8>
		total--;
     e1e:	20 91 00 02 	lds	r18, 0x0200
     e22:	30 91 01 02 	lds	r19, 0x0201
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	31 09       	sbc	r19, r1
     e2a:	30 93 01 02 	sts	0x0201, r19
     e2e:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
     e32:	fc 01       	movw	r30, r24
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	ec 59       	subi	r30, 0x9C	; 156
     e3a:	fd 4f       	sbci	r31, 0xFD	; 253
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
	visitedCount++;
     e44:	80 91 5c 02 	lds	r24, 0x025C
     e48:	90 91 5d 02 	lds	r25, 0x025D
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	90 93 5d 02 	sts	0x025D, r25
     e52:	80 93 5c 02 	sts	0x025C, r24
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <elevate>:
void elevate(unsigned char angle, unsigned char side)
{
	if (side == 0)
     e5c:	61 11       	cpse	r22, r1
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <elevate+0x8>
	servo_1(angle);
     e60:	14 cb       	rjmp	.-2520   	; 0x48a <servo_1>
     e62:	08 95       	ret
	else if (side == 1)
     e64:	61 30       	cpi	r22, 0x01	; 1
     e66:	31 f4       	brne	.+12     	; 0xe74 <elevate+0x18>
	servo_1((angle == 45) ? 0 : 45);
     e68:	8d 32       	cpi	r24, 0x2D	; 45
     e6a:	11 f4       	brne	.+4      	; 0xe70 <elevate+0x14>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <elevate+0x16>
     e70:	8d e2       	ldi	r24, 0x2D	; 45
     e72:	0b cb       	rjmp	.-2538   	; 0x48a <servo_1>
     e74:	08 95       	ret

00000e76 <open>:
}
void open(unsigned char side)
{
	if (side == 0)
     e76:	81 11       	cpse	r24, r1
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <open+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     e7a:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     e7e:	83 e8       	ldi	r24, 0x83	; 131
     e80:	80 93 8a 00 	sts	0x008A, r24
     e84:	08 95       	ret
	servo_2(180);
	else if (side == 1)
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	29 f4       	brne	.+10     	; 0xe94 <open+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     e8a:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     e8e:	83 e8       	ldi	r24, 0x83	; 131
     e90:	80 93 8c 00 	sts	0x008C, r24
     e94:	08 95       	ret

00000e96 <close>:
	servo_3(180);
}
void close(unsigned char side)
{
	if (side == 0)
     e96:	81 11       	cpse	r24, r1
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <close+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     e9a:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     e9e:	83 e2       	ldi	r24, 0x23	; 35
     ea0:	80 93 8a 00 	sts	0x008A, r24
     ea4:	08 95       	ret
	servo_2(0);
	else if (side == 1)
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <close+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     eaa:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     eae:	83 e2       	ldi	r24, 0x23	; 35
     eb0:	80 93 8c 00 	sts	0x008C, r24
     eb4:	08 95       	ret

00000eb6 <pick>:
	servo_3(0);
}
void pick(int side)	//TODO delay
{
     eb6:	cf 93       	push	r28
     eb8:	c8 2f       	mov	r28, r24
	elevate(0, side);//lower
     eba:	68 2f       	mov	r22, r24
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	ce df       	rcall	.-100    	; 0xe5c <elevate>
	open(side);
     ec0:	8c 2f       	mov	r24, r28
     ec2:	d9 df       	rcall	.-78     	; 0xe76 <open>
	close(side);
     ec4:	8c 2f       	mov	r24, r28
     ec6:	e7 df       	rcall	.-50     	; 0xe96 <close>
	elevate(45, side);//mid
     ec8:	6c 2f       	mov	r22, r28
     eca:	8d e2       	ldi	r24, 0x2D	; 45
     ecc:	c7 df       	rcall	.-114    	; 0xe5c <elevate>
	armCount--;
     ece:	80 91 02 02 	lds	r24, 0x0202
     ed2:	90 91 03 02 	lds	r25, 0x0203
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	90 93 03 02 	sts	0x0203, r25
     edc:	80 93 02 02 	sts	0x0202, r24
}
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <pickNode>:

void pickNode(int armNo, int side)
{
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	8c 01       	movw	r16, r24
     eee:	eb 01       	movw	r28, r22
	lcd(pickNode);
     ef0:	82 e7       	ldi	r24, 0x72	; 114
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	a3 db       	rcall	.-2234   	; 0x63c <lcd>
	arm[armNo] = term[ct][side];
     ef6:	20 91 87 02 	lds	r18, 0x0287
     efa:	30 91 88 02 	lds	r19, 0x0288
     efe:	f8 01       	movw	r30, r16
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	e1 55       	subi	r30, 0x51	; 81
     f06:	fd 4f       	sbci	r31, 0xFD	; 253
     f08:	d9 01       	movw	r26, r18
     f0a:	aa 0f       	add	r26, r26
     f0c:	bb 1f       	adc	r27, r27
     f0e:	ac 0f       	add	r26, r28
     f10:	bd 1f       	adc	r27, r29
     f12:	aa 0f       	add	r26, r26
     f14:	bb 1f       	adc	r27, r27
     f16:	a5 57       	subi	r26, 0x75	; 117
     f18:	bd 4f       	sbci	r27, 0xFD	; 253
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
	if (ct == ot)
     f22:	80 91 5a 02 	lds	r24, 0x025A
     f26:	90 91 5b 02 	lds	r25, 0x025B
     f2a:	28 17       	cp	r18, r24
     f2c:	39 07       	cpc	r19, r25
     f2e:	09 f0       	breq	.+2      	; 0xf32 <pickNode+0x4e>
     f30:	75 c0       	rjmp	.+234    	; 0x101c <pickNode+0x138>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     f32:	c9 01       	movw	r24, r18
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	30 f4       	brcc	.+12     	; 0xf46 <pickNode+0x62>
     f3a:	40 91 58 02 	lds	r20, 0x0258
     f3e:	50 91 59 02 	lds	r21, 0x0259
     f42:	45 2b       	or	r20, r21
     f44:	61 f0       	breq	.+24     	; 0xf5e <pickNode+0x7a>
     f46:	22 50       	subi	r18, 0x02	; 2
     f48:	31 09       	sbc	r19, r1
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	68 f4       	brcc	.+26     	; 0xf6a <pickNode+0x86>
     f50:	40 91 58 02 	lds	r20, 0x0258
     f54:	50 91 59 02 	lds	r21, 0x0259
     f58:	42 30       	cpi	r20, 0x02	; 2
     f5a:	51 05       	cpc	r21, r1
     f5c:	31 f4       	brne	.+12     	; 0xf6a <pickNode+0x86>
		{
			if (armNo != side)
     f5e:	0c 17       	cp	r16, r28
     f60:	1d 07       	cpc	r17, r29
     f62:	09 f4       	brne	.+2      	; 0xf66 <pickNode+0x82>
     f64:	48 c0       	rjmp	.+144    	; 0xff6 <pickNode+0x112>
				turn();
     f66:	28 dd       	rcall	.-1456   	; 0x9b8 <turn>
     f68:	46 c0       	rjmp	.+140    	; 0xff6 <pickNode+0x112>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	91 05       	cpc	r25, r1
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <pickNode+0x9a>
     f70:	40 91 58 02 	lds	r20, 0x0258
     f74:	50 91 59 02 	lds	r21, 0x0259
     f78:	42 30       	cpi	r20, 0x02	; 2
     f7a:	51 05       	cpc	r21, r1
     f7c:	49 f0       	breq	.+18     	; 0xf90 <pickNode+0xac>
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	58 f4       	brcc	.+22     	; 0xf9a <pickNode+0xb6>
     f84:	40 91 58 02 	lds	r20, 0x0258
     f88:	50 91 59 02 	lds	r21, 0x0259
     f8c:	45 2b       	or	r20, r21
     f8e:	29 f4       	brne	.+10     	; 0xf9a <pickNode+0xb6>
		{
			if (armNo == side)
     f90:	0c 17       	cp	r16, r28
     f92:	1d 07       	cpc	r17, r29
     f94:	81 f5       	brne	.+96     	; 0xff6 <pickNode+0x112>
				turn();
     f96:	10 dd       	rcall	.-1504   	; 0x9b8 <turn>
     f98:	2e c0       	rjmp	.+92     	; 0xff6 <pickNode+0x112>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	91 05       	cpc	r25, r1
     f9e:	38 f4       	brcc	.+14     	; 0xfae <pickNode+0xca>
     fa0:	40 91 58 02 	lds	r20, 0x0258
     fa4:	50 91 59 02 	lds	r21, 0x0259
     fa8:	41 30       	cpi	r20, 0x01	; 1
     faa:	51 05       	cpc	r21, r1
     fac:	51 f0       	breq	.+20     	; 0xfc2 <pickNode+0xde>
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	60 f4       	brcc	.+24     	; 0xfcc <pickNode+0xe8>
     fb4:	40 91 58 02 	lds	r20, 0x0258
     fb8:	50 91 59 02 	lds	r21, 0x0259
     fbc:	43 30       	cpi	r20, 0x03	; 3
     fbe:	51 05       	cpc	r21, r1
     fc0:	29 f4       	brne	.+10     	; 0xfcc <pickNode+0xe8>
		{
			if (armNo != side)
     fc2:	0c 17       	cp	r16, r28
     fc4:	1d 07       	cpc	r17, r29
     fc6:	b9 f0       	breq	.+46     	; 0xff6 <pickNode+0x112>
				turnRight();
     fc8:	d3 dc       	rcall	.-1626   	; 0x970 <turnRight>
     fca:	15 c0       	rjmp	.+42     	; 0xff6 <pickNode+0x112>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
     fcc:	02 97       	sbiw	r24, 0x02	; 2
     fce:	30 f4       	brcc	.+12     	; 0xfdc <pickNode+0xf8>
     fd0:	80 91 58 02 	lds	r24, 0x0258
     fd4:	90 91 59 02 	lds	r25, 0x0259
     fd8:	03 97       	sbiw	r24, 0x03	; 3
     fda:	49 f0       	breq	.+18     	; 0xfee <pickNode+0x10a>
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	50 f4       	brcc	.+20     	; 0xff6 <pickNode+0x112>
     fe2:	80 91 58 02 	lds	r24, 0x0258
     fe6:	90 91 59 02 	lds	r25, 0x0259
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	21 f4       	brne	.+8      	; 0xff6 <pickNode+0x112>
			if (armNo == side)
     fee:	0c 17       	cp	r16, r28
     ff0:	1d 07       	cpc	r17, r29
     ff2:	09 f4       	brne	.+2      	; 0xff6 <pickNode+0x112>
				turnRight();
     ff4:	bd dc       	rcall	.-1670   	; 0x970 <turnRight>
		pick(armNo);
     ff6:	c8 01       	movw	r24, r16
     ff8:	5e df       	rcall	.-324    	; 0xeb6 <pick>
		term[ct][side] = -1;
     ffa:	80 91 87 02 	lds	r24, 0x0287
     ffe:	90 91 88 02 	lds	r25, 0x0288
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	c8 0f       	add	r28, r24
    1008:	d9 1f       	adc	r29, r25
    100a:	cc 0f       	add	r28, r28
    100c:	dd 1f       	adc	r29, r29
    100e:	c5 57       	subi	r28, 0x75	; 117
    1010:	dd 4f       	sbci	r29, 0xFD	; 253
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	99 83       	std	Y+1, r25	; 0x01
    1018:	88 83       	st	Y, r24
    101a:	50 c0       	rjmp	.+160    	; 0x10bc <pickNode+0x1d8>
	}
	else
	{
		ot = ct;
    101c:	30 93 5b 02 	sts	0x025B, r19
    1020:	20 93 5a 02 	sts	0x025A, r18
		if (dir == 0 || dir == 2)
    1024:	80 91 58 02 	lds	r24, 0x0258
    1028:	90 91 59 02 	lds	r25, 0x0259
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	19 f0       	breq	.+6      	; 0x1036 <pickNode+0x152>
    1030:	02 97       	sbiw	r24, 0x02	; 2
    1032:	d1 f4       	brne	.+52     	; 0x1068 <pickNode+0x184>
    1034:	04 c0       	rjmp	.+8      	; 0x103e <pickNode+0x15a>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	70 f4       	brcc	.+28     	; 0x1058 <pickNode+0x174>
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <pickNode+0x164>
    103e:	22 50       	subi	r18, 0x02	; 2
    1040:	31 09       	sbc	r19, r1
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	40 f4       	brcc	.+16     	; 0x1058 <pickNode+0x174>
			{
				if (armNo == side)
    1048:	0c 17       	cp	r16, r28
    104a:	1d 07       	cpc	r17, r29
    104c:	11 f4       	brne	.+4      	; 0x1052 <pickNode+0x16e>
					front();
    104e:	7a dc       	rcall	.-1804   	; 0x944 <front>
    1050:	23 c0       	rjmp	.+70     	; 0x1098 <pickNode+0x1b4>
				else
				{
					front();
    1052:	78 dc       	rcall	.-1808   	; 0x944 <front>
					turn();
    1054:	b1 dc       	rcall	.-1694   	; 0x9b8 <turn>
    1056:	20 c0       	rjmp	.+64     	; 0x1098 <pickNode+0x1b4>
				}
			}
			else
			{
				if (armNo == side)
    1058:	0c 17       	cp	r16, r28
    105a:	1d 07       	cpc	r17, r29
    105c:	19 f4       	brne	.+6      	; 0x1064 <pickNode+0x180>
				{
					turn();
    105e:	ac dc       	rcall	.-1704   	; 0x9b8 <turn>
					front();
    1060:	71 dc       	rcall	.-1822   	; 0x944 <front>
    1062:	1a c0       	rjmp	.+52     	; 0x1098 <pickNode+0x1b4>
				}
				else
				{
					backward();
    1064:	7a dc       	rcall	.-1804   	; 0x95a <backward>
    1066:	18 c0       	rjmp	.+48     	; 0x1098 <pickNode+0x1b4>
				}
			}
		}
		else
		{
			if (armNo == side)
    1068:	0c 17       	cp	r16, r28
    106a:	1d 07       	cpc	r17, r29
    106c:	59 f4       	brne	.+22     	; 0x1084 <pickNode+0x1a0>
			{
				if (ct == 0 || ct == 3)
    106e:	21 15       	cp	r18, r1
    1070:	31 05       	cpc	r19, r1
    1072:	19 f0       	breq	.+6      	; 0x107a <pickNode+0x196>
    1074:	23 30       	cpi	r18, 0x03	; 3
    1076:	31 05       	cpc	r19, r1
    1078:	11 f4       	brne	.+4      	; 0x107e <pickNode+0x19a>
					turnRight();
    107a:	7a dc       	rcall	.-1804   	; 0x970 <turnRight>
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <pickNode+0x19c>
				else turnLeft();
    107e:	8a dc       	rcall	.-1772   	; 0x994 <turnLeft>
				front();
    1080:	61 dc       	rcall	.-1854   	; 0x944 <front>
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <pickNode+0x1b4>
			}
			else
			{
				if (ct == 0 || ct == 3)
    1084:	21 15       	cp	r18, r1
    1086:	31 05       	cpc	r19, r1
    1088:	19 f0       	breq	.+6      	; 0x1090 <pickNode+0x1ac>
    108a:	23 30       	cpi	r18, 0x03	; 3
    108c:	31 05       	cpc	r19, r1
    108e:	11 f4       	brne	.+4      	; 0x1094 <pickNode+0x1b0>
					turnLeft();
    1090:	81 dc       	rcall	.-1790   	; 0x994 <turnLeft>
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <pickNode+0x1b2>
				else turnRight();
    1094:	6d dc       	rcall	.-1830   	; 0x970 <turnRight>
				backward();
    1096:	61 dc       	rcall	.-1854   	; 0x95a <backward>
			}
		}
		pick(armNo);
    1098:	c8 01       	movw	r24, r16
    109a:	0d df       	rcall	.-486    	; 0xeb6 <pick>
		term[ct][side] = -1;
    109c:	80 91 87 02 	lds	r24, 0x0287
    10a0:	90 91 88 02 	lds	r25, 0x0288
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	c8 0f       	add	r28, r24
    10aa:	d9 1f       	adc	r29, r25
    10ac:	cc 0f       	add	r28, r28
    10ae:	dd 1f       	adc	r29, r29
    10b0:	c5 57       	subi	r28, 0x75	; 117
    10b2:	dd 4f       	sbci	r29, 0xFD	; 253
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	99 83       	std	Y+1, r25	; 0x01
    10ba:	88 83       	st	Y, r24
	}
	//..printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
    10d0:	8b 01       	movw	r16, r22
	lcd("pickSort");
    10d2:	87 e2       	ldi	r24, 0x27	; 39
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	b2 da       	rcall	.-2716   	; 0x63c <lcd>
	arm[armNo] = sort[sortNo];
    10d8:	fe 01       	movw	r30, r28
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	e1 55       	subi	r30, 0x51	; 81
    10e0:	fd 4f       	sbci	r31, 0xFD	; 253
    10e2:	d8 01       	movw	r26, r16
    10e4:	aa 0f       	add	r26, r26
    10e6:	bb 1f       	adc	r27, r27
    10e8:	ad 57       	subi	r26, 0x7D	; 125
    10ea:	bd 4f       	sbci	r27, 0xFD	; 253
    10ec:	8d 91       	ld	r24, X+
    10ee:	9c 91       	ld	r25, X
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    10f4:	c0 17       	cp	r28, r16
    10f6:	d1 07       	cpc	r29, r17
    10f8:	39 f4       	brne	.+14     	; 0x1108 <pickSort+0x42>
    10fa:	80 91 58 02 	lds	r24, 0x0258
    10fe:	90 91 59 02 	lds	r25, 0x0259
    1102:	89 2b       	or	r24, r25
    1104:	49 f4       	brne	.+18     	; 0x1118 <pickSort+0x52>
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <pickSort+0x4e>
    1108:	80 91 58 02 	lds	r24, 0x0258
    110c:	90 91 59 02 	lds	r25, 0x0259
    1110:	02 97       	sbiw	r24, 0x02	; 2
    1112:	11 f4       	brne	.+4      	; 0x1118 <pickSort+0x52>
		turn();
    1114:	51 dc       	rcall	.-1886   	; 0x9b8 <turn>
    1116:	0c c0       	rjmp	.+24     	; 0x1130 <pickSort+0x6a>
	else
	{
		if (dir == 1 || dir == 3)
    1118:	80 91 58 02 	lds	r24, 0x0258
    111c:	90 91 59 02 	lds	r25, 0x0259
    1120:	8d 7f       	andi	r24, 0xFD	; 253
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	29 f4       	brne	.+10     	; 0x1130 <pickSort+0x6a>
		{
			if (armNo == 0)
    1126:	20 97       	sbiw	r28, 0x00	; 0
    1128:	11 f4       	brne	.+4      	; 0x112e <pickSort+0x68>
				turnLeft();
    112a:	34 dc       	rcall	.-1944   	; 0x994 <turnLeft>
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <pickSort+0x6a>
			else turnRight();
    112e:	20 dc       	rcall	.-1984   	; 0x970 <turnRight>
		}
	}
	pick(armNo);
    1130:	ce 01       	movw	r24, r28
    1132:	c1 de       	rcall	.-638    	; 0xeb6 <pick>
	sort[sortNo] = -1;
    1134:	f8 01       	movw	r30, r16
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ed 57       	subi	r30, 0x7D	; 125
    113c:	fd 4f       	sbci	r31, 0xFD	; 253
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	08 95       	ret

00001150 <pickup>:
void pickup()
{
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
	lcd("pickup");
    115c:	80 e3       	ldi	r24, 0x30	; 48
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	6d da       	rcall	.-2854   	; 0x63c <lcd>
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1162:	20 91 87 02 	lds	r18, 0x0287
    1166:	30 91 88 02 	lds	r19, 0x0288
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	30 f4       	brcc	.+12     	; 0x117c <pickup+0x2c>
    1170:	80 91 58 02 	lds	r24, 0x0258
    1174:	90 91 59 02 	lds	r25, 0x0259
    1178:	02 97       	sbiw	r24, 0x02	; 2
    117a:	79 f0       	breq	.+30     	; 0x119a <pickup+0x4a>
    117c:	c9 01       	movw	r24, r18
    117e:	02 97       	sbiw	r24, 0x02	; 2
    1180:	02 97       	sbiw	r24, 0x02	; 2
    1182:	80 f4       	brcc	.+32     	; 0x11a4 <pickup+0x54>
    1184:	80 91 58 02 	lds	r24, 0x0258
    1188:	90 91 59 02 	lds	r25, 0x0259
    118c:	89 2b       	or	r24, r25
    118e:	79 f0       	breq	.+30     	; 0x11ae <pickup+0x5e>
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
    1190:	c1 e0       	ldi	r28, 0x01	; 1
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	00 e0       	ldi	r16, 0x00	; 0
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	0e c0       	rjmp	.+28     	; 0x11b6 <pickup+0x66>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    119a:	c0 e0       	ldi	r28, 0x00	; 0
    119c:	d0 e0       	ldi	r29, 0x00	; 0
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    119e:	01 e0       	ldi	r16, 0x01	; 1
    11a0:	10 e0       	ldi	r17, 0x00	; 0
    11a2:	09 c0       	rjmp	.+18     	; 0x11b6 <pickup+0x66>
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
    11a4:	c1 e0       	ldi	r28, 0x01	; 1
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <pickup+0x66>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    11b2:	01 e0       	ldi	r16, 0x01	; 1
    11b4:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    11b6:	f9 01       	movw	r30, r18
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	ec 59       	subi	r30, 0x9C	; 156
    11be:	fd 4f       	sbci	r31, 0xFD	; 253
    11c0:	40 81       	ld	r20, Z
    11c2:	51 81       	ldd	r21, Z+1	; 0x01
    11c4:	45 2b       	or	r20, r21
    11c6:	09 f0       	breq	.+2      	; 0x11ca <pickup+0x7a>
    11c8:	24 c2       	rjmp	.+1096   	; 0x1612 <pickup+0x4c2>
	{
		if (term[ct][0] == -2)
    11ca:	f9 01       	movw	r30, r18
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	e5 57       	subi	r30, 0x75	; 117
    11d6:	fd 4f       	sbci	r31, 0xFD	; 253
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	02 96       	adiw	r24, 0x02	; 2
    11de:	19 f4       	brne	.+6      	; 0x11e6 <pickup+0x96>
		{
			terminalCheck1();
    11e0:	39 dd       	rcall	.-1422   	; 0xc54 <terminalCheck1>
			terminalCheck2();
    11e2:	c3 dd       	rcall	.-1146   	; 0xd6a <terminalCheck2>
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <pickup+0x98>
		}
		else
			terminalCheck2();
    11e6:	c1 dd       	rcall	.-1150   	; 0xd6a <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    11e8:	20 91 87 02 	lds	r18, 0x0287
    11ec:	30 91 88 02 	lds	r19, 0x0288
    11f0:	f9 01       	movw	r30, r18
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	e5 57       	subi	r30, 0x75	; 117
    11fc:	fd 4f       	sbci	r31, 0xFD	; 253
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	f9 01       	movw	r30, r18
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	e5 56       	subi	r30, 0x65	; 101
    120a:	fd 4f       	sbci	r31, 0xFD	; 253
    120c:	40 81       	ld	r20, Z
    120e:	51 81       	ldd	r21, Z+1	; 0x01
    1210:	84 17       	cp	r24, r20
    1212:	95 07       	cpc	r25, r21
    1214:	21 f0       	breq	.+8      	; 0x121e <pickup+0xce>
    1216:	8f 3f       	cpi	r24, 0xFF	; 255
    1218:	6f ef       	ldi	r22, 0xFF	; 255
    121a:	96 07       	cpc	r25, r22
    121c:	89 f4       	brne	.+34     	; 0x1240 <pickup+0xf0>
    121e:	f9 01       	movw	r30, r18
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	e5 57       	subi	r30, 0x75	; 117
    122a:	fd 4f       	sbci	r31, 0xFD	; 253
    122c:	62 81       	ldd	r22, Z+2	; 0x02
    122e:	73 81       	ldd	r23, Z+3	; 0x03
    1230:	46 17       	cp	r20, r22
    1232:	57 07       	cpc	r21, r23
    1234:	09 f4       	brne	.+2      	; 0x1238 <pickup+0xe8>
    1236:	ed c1       	rjmp	.+986    	; 0x1612 <pickup+0x4c2>
    1238:	6f 3f       	cpi	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	09 f4       	brne	.+2      	; 0x1240 <pickup+0xf0>
    123e:	e9 c1       	rjmp	.+978    	; 0x1612 <pickup+0x4c2>
		{
			if (armCount == 2)
    1240:	60 91 02 02 	lds	r22, 0x0202
    1244:	70 91 03 02 	lds	r23, 0x0203
    1248:	62 30       	cpi	r22, 0x02	; 2
    124a:	71 05       	cpc	r23, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <pickup+0x100>
    124e:	af c0       	rjmp	.+350    	; 0x13ae <pickup+0x25e>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1250:	e0 91 ab 02 	lds	r30, 0x02AB
    1254:	f0 91 ac 02 	lds	r31, 0x02AC
    1258:	df 01       	movw	r26, r30
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	a5 56       	subi	r26, 0x65	; 101
    1260:	bd 4f       	sbci	r27, 0xFD	; 253
    1262:	6d 91       	ld	r22, X+
    1264:	7c 91       	ld	r23, X
    1266:	86 17       	cp	r24, r22
    1268:	97 07       	cpc	r25, r23
    126a:	79 f0       	breq	.+30     	; 0x128a <pickup+0x13a>
    126c:	d9 01       	movw	r26, r18
    126e:	aa 0f       	add	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	aa 0f       	add	r26, r26
    1274:	bb 1f       	adc	r27, r27
    1276:	a5 57       	subi	r26, 0x75	; 117
    1278:	bd 4f       	sbci	r27, 0xFD	; 253
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	ed 90       	ld	r14, X+
    127e:	fc 90       	ld	r15, X
    1280:	13 97       	sbiw	r26, 0x03	; 3
    1282:	6e 15       	cp	r22, r14
    1284:	7f 05       	cpc	r23, r15
    1286:	59 f4       	brne	.+22     	; 0x129e <pickup+0x14e>
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <pickup+0x144>
				{
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	c8 01       	movw	r24, r16
    1290:	29 de       	rcall	.-942    	; 0xee4 <pickNode>
    1292:	8d c0       	rjmp	.+282    	; 0x13ae <pickup+0x25e>
					else	pickNode(arm1, 1);
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	ce 01       	movw	r24, r28
    129a:	24 de       	rcall	.-952    	; 0xee4 <pickNode>
    129c:	88 c0       	rjmp	.+272    	; 0x13ae <pickup+0x25e>
				}
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    129e:	4e 15       	cp	r20, r14
    12a0:	5f 05       	cpc	r21, r15
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <pickup+0x156>
    12a4:	4e c0       	rjmp	.+156    	; 0x1342 <pickup+0x1f2>
    12a6:	ef 20       	and	r14, r15
    12a8:	e0 94       	com	r14
    12aa:	09 f4       	brne	.+2      	; 0x12ae <pickup+0x15e>
    12ac:	4a c0       	rjmp	.+148    	; 0x1342 <pickup+0x1f2>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    12ae:	84 17       	cp	r24, r20
    12b0:	95 07       	cpc	r25, r21
    12b2:	69 f0       	breq	.+26     	; 0x12ce <pickup+0x17e>
    12b4:	8f 3f       	cpi	r24, 0xFF	; 255
    12b6:	af ef       	ldi	r26, 0xFF	; 255
    12b8:	9a 07       	cpc	r25, r26
    12ba:	49 f0       	breq	.+18     	; 0x12ce <pickup+0x17e>
					{
						pickNode(arm1, 1);
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	ce 01       	movw	r24, r28
    12c2:	10 de       	rcall	.-992    	; 0xee4 <pickNode>
						pickNode(arm0, 0);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	c8 01       	movw	r24, r16
    12ca:	0c de       	rcall	.-1000   	; 0xee4 <pickNode>
    12cc:	70 c0       	rjmp	.+224    	; 0x13ae <pickup+0x25e>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    12ce:	21 70       	andi	r18, 0x01	; 1
    12d0:	30 78       	andi	r19, 0x80	; 128
    12d2:	33 23       	and	r19, r19
    12d4:	34 f4       	brge	.+12     	; 0x12e2 <pickup+0x192>
    12d6:	21 50       	subi	r18, 0x01	; 1
    12d8:	31 09       	sbc	r19, r1
    12da:	2e 6f       	ori	r18, 0xFE	; 254
    12dc:	3f 6f       	ori	r19, 0xFF	; 255
    12de:	2f 5f       	subi	r18, 0xFF	; 255
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	d9 01       	movw	r26, r18
    12e4:	aa 0f       	add	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	ad 57       	subi	r26, 0x7D	; 125
    12ea:	bd 4f       	sbci	r27, 0xFD	; 253
    12ec:	2d 91       	ld	r18, X+
    12ee:	3c 91       	ld	r19, X
    12f0:	2f 3f       	cpi	r18, 0xFF	; 255
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	09 f1       	breq	.+66     	; 0x1338 <pickup+0x1e8>
    12f6:	df 01       	movw	r26, r30
    12f8:	aa 0f       	add	r26, r26
    12fa:	bb 1f       	adc	r27, r27
    12fc:	aa 0f       	add	r26, r26
    12fe:	bb 1f       	adc	r27, r27
    1300:	a5 57       	subi	r26, 0x75	; 117
    1302:	bd 4f       	sbci	r27, 0xFD	; 253
    1304:	2d 91       	ld	r18, X+
    1306:	3c 91       	ld	r19, X
    1308:	62 17       	cp	r22, r18
    130a:	73 07       	cpc	r23, r19
    130c:	a9 f0       	breq	.+42     	; 0x1338 <pickup+0x1e8>
    130e:	2f 3f       	cpi	r18, 0xFF	; 255
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	91 f0       	breq	.+36     	; 0x1338 <pickup+0x1e8>
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e5 57       	subi	r30, 0x75	; 117
    131e:	fd 4f       	sbci	r31, 0xFD	; 253
    1320:	22 81       	ldd	r18, Z+2	; 0x02
    1322:	33 81       	ldd	r19, Z+3	; 0x03
    1324:	62 17       	cp	r22, r18
    1326:	73 07       	cpc	r23, r19
    1328:	39 f0       	breq	.+14     	; 0x1338 <pickup+0x1e8>
    132a:	2f 3f       	cpi	r18, 0xFF	; 255
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	21 f0       	breq	.+8      	; 0x1338 <pickup+0x1e8>
    1330:	84 17       	cp	r24, r20
    1332:	95 07       	cpc	r25, r21
    1334:	09 f0       	breq	.+2      	; 0x1338 <pickup+0x1e8>
    1336:	6d c1       	rjmp	.+730    	; 0x1612 <pickup+0x4c2>
						pickNode(arm1, 1);
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	ce 01       	movw	r24, r28
    133e:	d2 dd       	rcall	.-1116   	; 0xee4 <pickNode>
    1340:	36 c0       	rjmp	.+108    	; 0x13ae <pickup+0x25e>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1342:	84 17       	cp	r24, r20
    1344:	95 07       	cpc	r25, r21
    1346:	09 f4       	brne	.+2      	; 0x134a <pickup+0x1fa>
    1348:	64 c1       	rjmp	.+712    	; 0x1612 <pickup+0x4c2>
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	09 f4       	brne	.+2      	; 0x1350 <pickup+0x200>
    134e:	61 c1       	rjmp	.+706    	; 0x1612 <pickup+0x4c2>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1350:	21 70       	andi	r18, 0x01	; 1
    1352:	30 78       	andi	r19, 0x80	; 128
    1354:	33 23       	and	r19, r19
    1356:	34 f4       	brge	.+12     	; 0x1364 <pickup+0x214>
    1358:	21 50       	subi	r18, 0x01	; 1
    135a:	31 09       	sbc	r19, r1
    135c:	2e 6f       	ori	r18, 0xFE	; 254
    135e:	3f 6f       	ori	r19, 0xFF	; 255
    1360:	2f 5f       	subi	r18, 0xFF	; 255
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	d9 01       	movw	r26, r18
    1366:	aa 0f       	add	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	ad 57       	subi	r26, 0x7D	; 125
    136c:	bd 4f       	sbci	r27, 0xFD	; 253
    136e:	8d 91       	ld	r24, X+
    1370:	9c 91       	ld	r25, X
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	c1 f0       	breq	.+48     	; 0x13a6 <pickup+0x256>
    1376:	df 01       	movw	r26, r30
    1378:	aa 0f       	add	r26, r26
    137a:	bb 1f       	adc	r27, r27
    137c:	aa 0f       	add	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	a5 57       	subi	r26, 0x75	; 117
    1382:	bd 4f       	sbci	r27, 0xFD	; 253
    1384:	8d 91       	ld	r24, X+
    1386:	9c 91       	ld	r25, X
    1388:	11 97       	sbiw	r26, 0x01	; 1
    138a:	68 17       	cp	r22, r24
    138c:	79 07       	cpc	r23, r25
    138e:	59 f0       	breq	.+22     	; 0x13a6 <pickup+0x256>
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	49 f0       	breq	.+18     	; 0x13a6 <pickup+0x256>
    1394:	fd 01       	movw	r30, r26
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	68 17       	cp	r22, r24
    139c:	79 07       	cpc	r23, r25
    139e:	19 f0       	breq	.+6      	; 0x13a6 <pickup+0x256>
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <pickup+0x256>
    13a4:	36 c1       	rjmp	.+620    	; 0x1612 <pickup+0x4c2>
						pickNode(arm0, 0);
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	c8 01       	movw	r24, r16
    13ac:	9b dd       	rcall	.-1226   	; 0xee4 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    13ae:	80 91 02 02 	lds	r24, 0x0202
    13b2:	90 91 03 02 	lds	r25, 0x0203
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	09 f0       	breq	.+2      	; 0x13bc <pickup+0x26c>
    13ba:	2b c1       	rjmp	.+598    	; 0x1612 <pickup+0x4c2>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    13bc:	f8 01       	movw	r30, r16
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	e1 55       	subi	r30, 0x51	; 81
    13c4:	fd 4f       	sbci	r31, 0xFD	; 253
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <pickup+0x280>
					a1 = arm0;
    13ce:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    13d0:	be 01       	movw	r22, r28
    13d2:	6f 5f       	subi	r22, 0xFF	; 255
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	61 70       	andi	r22, 0x01	; 1
    13d8:	70 78       	andi	r23, 0x80	; 128
    13da:	77 23       	and	r23, r23
    13dc:	34 f4       	brge	.+12     	; 0x13ea <pickup+0x29a>
    13de:	61 50       	subi	r22, 0x01	; 1
    13e0:	71 09       	sbc	r23, r1
    13e2:	6e 6f       	ori	r22, 0xFE	; 254
    13e4:	7f 6f       	ori	r23, 0xFF	; 255
    13e6:	6f 5f       	subi	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    13ea:	80 91 87 02 	lds	r24, 0x0287
    13ee:	90 91 88 02 	lds	r25, 0x0288
    13f2:	9c 01       	movw	r18, r24
    13f4:	21 70       	andi	r18, 0x01	; 1
    13f6:	30 78       	andi	r19, 0x80	; 128
    13f8:	33 23       	and	r19, r19
    13fa:	34 f4       	brge	.+12     	; 0x1408 <pickup+0x2b8>
    13fc:	21 50       	subi	r18, 0x01	; 1
    13fe:	31 09       	sbc	r19, r1
    1400:	2e 6f       	ori	r18, 0xFE	; 254
    1402:	3f 6f       	ori	r19, 0xFF	; 255
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	f9 01       	movw	r30, r18
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ed 57       	subi	r30, 0x7D	; 125
    1410:	fd 4f       	sbci	r31, 0xFD	; 253
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01
    1416:	2f 3f       	cpi	r18, 0xFF	; 255
    1418:	af ef       	ldi	r26, 0xFF	; 255
    141a:	3a 07       	cpc	r19, r26
    141c:	d9 f5       	brne	.+118    	; 0x1494 <pickup+0x344>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    141e:	fc 01       	movw	r30, r24
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	ec 0f       	add	r30, r28
    1426:	fd 1f       	adc	r31, r29
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e5 57       	subi	r30, 0x75	; 117
    142e:	fd 4f       	sbci	r31, 0xFD	; 253
    1430:	20 81       	ld	r18, Z
    1432:	31 81       	ldd	r19, Z+1	; 0x01
    1434:	2f 3f       	cpi	r18, 0xFF	; 255
    1436:	ef ef       	ldi	r30, 0xFF	; 255
    1438:	3e 07       	cpc	r19, r30
    143a:	71 f0       	breq	.+28     	; 0x1458 <pickup+0x308>
    143c:	fc 01       	movw	r30, r24
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	e5 56       	subi	r30, 0x65	; 101
    1444:	fd 4f       	sbci	r31, 0xFD	; 253
    1446:	40 81       	ld	r20, Z
    1448:	51 81       	ldd	r21, Z+1	; 0x01
    144a:	24 17       	cp	r18, r20
    144c:	35 07       	cpc	r19, r21
    144e:	21 f0       	breq	.+8      	; 0x1458 <pickup+0x308>
						pickNode(a1, a1);
    1450:	be 01       	movw	r22, r28
    1452:	ce 01       	movw	r24, r28
    1454:	47 dd       	rcall	.-1394   	; 0xee4 <pickNode>
    1456:	dd c0       	rjmp	.+442    	; 0x1612 <pickup+0x4c2>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1458:	fc 01       	movw	r30, r24
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	e6 0f       	add	r30, r22
    1460:	f7 1f       	adc	r31, r23
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	e5 57       	subi	r30, 0x75	; 117
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	20 81       	ld	r18, Z
    146c:	31 81       	ldd	r19, Z+1	; 0x01
    146e:	2f 3f       	cpi	r18, 0xFF	; 255
    1470:	4f ef       	ldi	r20, 0xFF	; 255
    1472:	34 07       	cpc	r19, r20
    1474:	09 f4       	brne	.+2      	; 0x1478 <pickup+0x328>
    1476:	cd c0       	rjmp	.+410    	; 0x1612 <pickup+0x4c2>
    1478:	fc 01       	movw	r30, r24
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e5 56       	subi	r30, 0x65	; 101
    1480:	fd 4f       	sbci	r31, 0xFD	; 253
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	28 17       	cp	r18, r24
    1488:	39 07       	cpc	r19, r25
    148a:	09 f4       	brne	.+2      	; 0x148e <pickup+0x33e>
    148c:	c2 c0       	rjmp	.+388    	; 0x1612 <pickup+0x4c2>
						pickNode(a1, a2);
    148e:	ce 01       	movw	r24, r28
    1490:	29 dd       	rcall	.-1454   	; 0xee4 <pickNode>
    1492:	bf c0       	rjmp	.+382    	; 0x1612 <pickup+0x4c2>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1494:	40 91 ab 02 	lds	r20, 0x02AB
    1498:	50 91 ac 02 	lds	r21, 0x02AC
    149c:	fa 01       	movw	r30, r20
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e5 56       	subi	r30, 0x65	; 101
    14a4:	fd 4f       	sbci	r31, 0xFD	; 253
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	dc 01       	movw	r26, r24
    14ae:	aa 0f       	add	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	aa 0f       	add	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	a5 57       	subi	r26, 0x75	; 117
    14b8:	bd 4f       	sbci	r27, 0xFD	; 253
    14ba:	0d 90       	ld	r0, X+
    14bc:	bc 91       	ld	r27, X
    14be:	a0 2d       	mov	r26, r0
    14c0:	ae 17       	cp	r26, r30
    14c2:	bf 07       	cpc	r27, r31
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <pickup+0x392>
    14c6:	dc 01       	movw	r26, r24
    14c8:	aa 0f       	add	r26, r26
    14ca:	bb 1f       	adc	r27, r27
    14cc:	aa 0f       	add	r26, r26
    14ce:	bb 1f       	adc	r27, r27
    14d0:	a5 57       	subi	r26, 0x75	; 117
    14d2:	bd 4f       	sbci	r27, 0xFD	; 253
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	0d 90       	ld	r0, X+
    14d8:	bc 91       	ld	r27, X
    14da:	a0 2d       	mov	r26, r0
    14dc:	ea 17       	cp	r30, r26
    14de:	fb 07       	cpc	r31, r27
    14e0:	d9 f5       	brne	.+118    	; 0x1558 <pickup+0x408>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    14e2:	da 01       	movw	r26, r20
    14e4:	aa 0f       	add	r26, r26
    14e6:	bb 1f       	adc	r27, r27
    14e8:	ac 59       	subi	r26, 0x9C	; 156
    14ea:	bd 4f       	sbci	r27, 0xFD	; 253
    14ec:	2d 91       	ld	r18, X+
    14ee:	3c 91       	ld	r19, X
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <pickup+0x3a8>
    14f6:	8d c0       	rjmp	.+282    	; 0x1612 <pickup+0x4c2>
    14f8:	da 01       	movw	r26, r20
    14fa:	aa 0f       	add	r26, r26
    14fc:	bb 1f       	adc	r27, r27
    14fe:	aa 0f       	add	r26, r26
    1500:	bb 1f       	adc	r27, r27
    1502:	a5 57       	subi	r26, 0x75	; 117
    1504:	bd 4f       	sbci	r27, 0xFD	; 253
    1506:	2d 91       	ld	r18, X+
    1508:	3c 91       	ld	r19, X
    150a:	2f 3f       	cpi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	79 f0       	breq	.+30     	; 0x152e <pickup+0x3de>
    1510:	da 01       	movw	r26, r20
    1512:	aa 0f       	add	r26, r26
    1514:	bb 1f       	adc	r27, r27
    1516:	aa 0f       	add	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	a5 57       	subi	r26, 0x75	; 117
    151c:	bd 4f       	sbci	r27, 0xFD	; 253
    151e:	12 96       	adiw	r26, 0x02	; 2
    1520:	2d 91       	ld	r18, X+
    1522:	3c 91       	ld	r19, X
    1524:	13 97       	sbiw	r26, 0x03	; 3
    1526:	2f 3f       	cpi	r18, 0xFF	; 255
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	09 f0       	breq	.+2      	; 0x152e <pickup+0x3de>
    152c:	72 c0       	rjmp	.+228    	; 0x1612 <pickup+0x4c2>
						{
							if (term[ct][a1] == color[adj])
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	8c 0f       	add	r24, r28
    1534:	9d 1f       	adc	r25, r29
    1536:	dc 01       	movw	r26, r24
    1538:	aa 0f       	add	r26, r26
    153a:	bb 1f       	adc	r27, r27
    153c:	a5 57       	subi	r26, 0x75	; 117
    153e:	bd 4f       	sbci	r27, 0xFD	; 253
    1540:	8d 91       	ld	r24, X+
    1542:	9c 91       	ld	r25, X
    1544:	e8 17       	cp	r30, r24
    1546:	f9 07       	cpc	r31, r25
    1548:	21 f4       	brne	.+8      	; 0x1552 <pickup+0x402>
								pickNode(a1, a1);
    154a:	be 01       	movw	r22, r28
    154c:	ce 01       	movw	r24, r28
    154e:	ca dc       	rcall	.-1644   	; 0xee4 <pickNode>
    1550:	60 c0       	rjmp	.+192    	; 0x1612 <pickup+0x4c2>
							else pickNode(a1, a2);
    1552:	ce 01       	movw	r24, r28
    1554:	c7 dc       	rcall	.-1650   	; 0xee4 <pickNode>
    1556:	5d c0       	rjmp	.+186    	; 0x1612 <pickup+0x4c2>
						}
					}
					else
					{
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1558:	dc 01       	movw	r26, r24
    155a:	aa 0f       	add	r26, r26
    155c:	bb 1f       	adc	r27, r27
    155e:	a5 56       	subi	r26, 0x65	; 101
    1560:	bd 4f       	sbci	r27, 0xFD	; 253
    1562:	0d 90       	ld	r0, X+
    1564:	bc 91       	ld	r27, X
    1566:	a0 2d       	mov	r26, r0
    1568:	2a 17       	cp	r18, r26
    156a:	3b 07       	cpc	r19, r27
    156c:	09 f4       	brne	.+2      	; 0x1570 <pickup+0x420>
    156e:	51 c0       	rjmp	.+162    	; 0x1612 <pickup+0x4c2>
    1570:	2e 17       	cp	r18, r30
    1572:	3f 07       	cpc	r19, r31
    1574:	09 f4       	brne	.+2      	; 0x1578 <pickup+0x428>
    1576:	4d c0       	rjmp	.+154    	; 0x1612 <pickup+0x4c2>
						{
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1578:	fa 01       	movw	r30, r20
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ec 59       	subi	r30, 0x9C	; 156
    1580:	fd 4f       	sbci	r31, 0xFD	; 253
    1582:	20 81       	ld	r18, Z
    1584:	31 81       	ldd	r19, Z+1	; 0x01
    1586:	21 30       	cpi	r18, 0x01	; 1
    1588:	31 05       	cpc	r19, r1
    158a:	09 f0       	breq	.+2      	; 0x158e <pickup+0x43e>
    158c:	42 c0       	rjmp	.+132    	; 0x1612 <pickup+0x4c2>
    158e:	fa 01       	movw	r30, r20
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	e5 57       	subi	r30, 0x75	; 117
    159a:	fd 4f       	sbci	r31, 0xFD	; 253
    159c:	20 81       	ld	r18, Z
    159e:	31 81       	ldd	r19, Z+1	; 0x01
    15a0:	a2 17       	cp	r26, r18
    15a2:	b3 07       	cpc	r27, r19
    15a4:	b1 f1       	breq	.+108    	; 0x1612 <pickup+0x4c2>
    15a6:	fa 01       	movw	r30, r20
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	e5 57       	subi	r30, 0x75	; 117
    15b2:	fd 4f       	sbci	r31, 0xFD	; 253
    15b4:	22 81       	ldd	r18, Z+2	; 0x02
    15b6:	33 81       	ldd	r19, Z+3	; 0x03
    15b8:	a2 17       	cp	r26, r18
    15ba:	b3 07       	cpc	r27, r19
    15bc:	51 f1       	breq	.+84     	; 0x1612 <pickup+0x4c2>
							{
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    15be:	fc 01       	movw	r30, r24
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	ec 0f       	add	r30, r28
    15c6:	fd 1f       	adc	r31, r29
    15c8:	ee 0f       	add	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	e5 57       	subi	r30, 0x75	; 117
    15ce:	fd 4f       	sbci	r31, 0xFD	; 253
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
    15d4:	2f 3f       	cpi	r18, 0xFF	; 255
    15d6:	ef ef       	ldi	r30, 0xFF	; 255
    15d8:	3e 07       	cpc	r19, r30
    15da:	39 f0       	breq	.+14     	; 0x15ea <pickup+0x49a>
    15dc:	a2 17       	cp	r26, r18
    15de:	b3 07       	cpc	r27, r19
    15e0:	21 f0       	breq	.+8      	; 0x15ea <pickup+0x49a>
									pickNode(a1, a1);
    15e2:	be 01       	movw	r22, r28
    15e4:	ce 01       	movw	r24, r28
    15e6:	7e dc       	rcall	.-1796   	; 0xee4 <pickNode>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <pickup+0x4c2>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	86 0f       	add	r24, r22
    15f0:	97 1f       	adc	r25, r23
    15f2:	fc 01       	movw	r30, r24
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e5 57       	subi	r30, 0x75	; 117
    15fa:	fd 4f       	sbci	r31, 0xFD	; 253
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	8f 3f       	cpi	r24, 0xFF	; 255
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	92 07       	cpc	r25, r18
    1606:	29 f0       	breq	.+10     	; 0x1612 <pickup+0x4c2>
    1608:	a8 17       	cp	r26, r24
    160a:	b9 07       	cpc	r27, r25
    160c:	11 f0       	breq	.+4      	; 0x1612 <pickup+0x4c2>
									pickNode(a1, a2);
    160e:	ce 01       	movw	r24, r28
    1610:	69 dc       	rcall	.-1838   	; 0xee4 <pickNode>
					}
				}
			}
		}
	}
}	
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	08 95       	ret

00001620 <drop>:

void drop(int side)	//TODO delay
{
    1620:	cf 93       	push	r28
    1622:	c8 2f       	mov	r28, r24
	lcd("drop");
    1624:	87 e3       	ldi	r24, 0x37	; 55
    1626:	92 e0       	ldi	r25, 0x02	; 2
    1628:	09 d8       	rcall	.-4078   	; 0x63c <lcd>
	elevate(0, side);//lower
    162a:	6c 2f       	mov	r22, r28
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	16 dc       	rcall	.-2004   	; 0xe5c <elevate>
	open(side);
    1630:	8c 2f       	mov	r24, r28
    1632:	21 dc       	rcall	.-1982   	; 0xe76 <open>
	elevate(45, side);//mid
    1634:	6c 2f       	mov	r22, r28
    1636:	8d e2       	ldi	r24, 0x2D	; 45
    1638:	11 dc       	rcall	.-2014   	; 0xe5c <elevate>
	close(side);
    163a:	8c 2f       	mov	r24, r28
    163c:	2c dc       	rcall	.-1960   	; 0xe96 <close>
	armCount++;
    163e:	80 91 02 02 	lds	r24, 0x0202
    1642:	90 91 03 02 	lds	r25, 0x0203
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	90 93 03 02 	sts	0x0203, r25
    164c:	80 93 02 02 	sts	0x0202, r24
}
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	ec 01       	movw	r28, r24
    165e:	8b 01       	movw	r16, r22
	lcd("nodeDrop");
    1660:	8c e3       	ldi	r24, 0x3C	; 60
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd>
	term[ct][side] = arm[armNo];
    1668:	20 91 87 02 	lds	r18, 0x0287
    166c:	30 91 88 02 	lds	r19, 0x0288
    1670:	f9 01       	movw	r30, r18
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	e0 0f       	add	r30, r16
    1678:	f1 1f       	adc	r31, r17
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	e5 57       	subi	r30, 0x75	; 117
    1680:	fd 4f       	sbci	r31, 0xFD	; 253
    1682:	de 01       	movw	r26, r28
    1684:	aa 0f       	add	r26, r26
    1686:	bb 1f       	adc	r27, r27
    1688:	a1 55       	subi	r26, 0x51	; 81
    168a:	bd 4f       	sbci	r27, 0xFD	; 253
    168c:	8d 91       	ld	r24, X+
    168e:	9c 91       	ld	r25, X
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
	if (ct == ot)
    1694:	80 91 5a 02 	lds	r24, 0x025A
    1698:	90 91 5b 02 	lds	r25, 0x025B
    169c:	28 17       	cp	r18, r24
    169e:	39 07       	cpc	r19, r25
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <nodeDrop+0x50>
    16a2:	6d c0       	rjmp	.+218    	; 0x177e <nodeDrop+0x12a>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    16a4:	c9 01       	movw	r24, r18
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	30 f4       	brcc	.+12     	; 0x16b8 <nodeDrop+0x64>
    16ac:	40 91 58 02 	lds	r20, 0x0258
    16b0:	50 91 59 02 	lds	r21, 0x0259
    16b4:	45 2b       	or	r20, r21
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <nodeDrop+0x7c>
    16b8:	22 50       	subi	r18, 0x02	; 2
    16ba:	31 09       	sbc	r19, r1
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	68 f4       	brcc	.+26     	; 0x16dc <nodeDrop+0x88>
    16c2:	40 91 58 02 	lds	r20, 0x0258
    16c6:	50 91 59 02 	lds	r21, 0x0259
    16ca:	42 30       	cpi	r20, 0x02	; 2
    16cc:	51 05       	cpc	r21, r1
    16ce:	31 f4       	brne	.+12     	; 0x16dc <nodeDrop+0x88>
		{
			if (armNo != side)
    16d0:	c0 17       	cp	r28, r16
    16d2:	d1 07       	cpc	r29, r17
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <nodeDrop+0x84>
    16d6:	48 c0       	rjmp	.+144    	; 0x1768 <nodeDrop+0x114>
				turn();
    16d8:	6f d9       	rcall	.-3362   	; 0x9b8 <turn>
    16da:	46 c0       	rjmp	.+140    	; 0x1768 <nodeDrop+0x114>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	91 05       	cpc	r25, r1
    16e0:	38 f4       	brcc	.+14     	; 0x16f0 <nodeDrop+0x9c>
    16e2:	40 91 58 02 	lds	r20, 0x0258
    16e6:	50 91 59 02 	lds	r21, 0x0259
    16ea:	42 30       	cpi	r20, 0x02	; 2
    16ec:	51 05       	cpc	r21, r1
    16ee:	49 f0       	breq	.+18     	; 0x1702 <nodeDrop+0xae>
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	58 f4       	brcc	.+22     	; 0x170c <nodeDrop+0xb8>
    16f6:	40 91 58 02 	lds	r20, 0x0258
    16fa:	50 91 59 02 	lds	r21, 0x0259
    16fe:	45 2b       	or	r20, r21
    1700:	29 f4       	brne	.+10     	; 0x170c <nodeDrop+0xb8>
		{
			if (armNo == side)
    1702:	c0 17       	cp	r28, r16
    1704:	d1 07       	cpc	r29, r17
    1706:	81 f5       	brne	.+96     	; 0x1768 <nodeDrop+0x114>
				turn();
    1708:	57 d9       	rcall	.-3410   	; 0x9b8 <turn>
    170a:	2e c0       	rjmp	.+92     	; 0x1768 <nodeDrop+0x114>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	91 05       	cpc	r25, r1
    1710:	38 f4       	brcc	.+14     	; 0x1720 <nodeDrop+0xcc>
    1712:	40 91 58 02 	lds	r20, 0x0258
    1716:	50 91 59 02 	lds	r21, 0x0259
    171a:	41 30       	cpi	r20, 0x01	; 1
    171c:	51 05       	cpc	r21, r1
    171e:	51 f0       	breq	.+20     	; 0x1734 <nodeDrop+0xe0>
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	60 f4       	brcc	.+24     	; 0x173e <nodeDrop+0xea>
    1726:	40 91 58 02 	lds	r20, 0x0258
    172a:	50 91 59 02 	lds	r21, 0x0259
    172e:	43 30       	cpi	r20, 0x03	; 3
    1730:	51 05       	cpc	r21, r1
    1732:	29 f4       	brne	.+10     	; 0x173e <nodeDrop+0xea>
		{
			if (armNo != side)
    1734:	c0 17       	cp	r28, r16
    1736:	d1 07       	cpc	r29, r17
    1738:	b9 f0       	breq	.+46     	; 0x1768 <nodeDrop+0x114>
				turnRight();
    173a:	1a d9       	rcall	.-3532   	; 0x970 <turnRight>
    173c:	15 c0       	rjmp	.+42     	; 0x1768 <nodeDrop+0x114>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    173e:	02 97       	sbiw	r24, 0x02	; 2
    1740:	30 f4       	brcc	.+12     	; 0x174e <nodeDrop+0xfa>
    1742:	80 91 58 02 	lds	r24, 0x0258
    1746:	90 91 59 02 	lds	r25, 0x0259
    174a:	03 97       	sbiw	r24, 0x03	; 3
    174c:	49 f0       	breq	.+18     	; 0x1760 <nodeDrop+0x10c>
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	50 f4       	brcc	.+20     	; 0x1768 <nodeDrop+0x114>
    1754:	80 91 58 02 	lds	r24, 0x0258
    1758:	90 91 59 02 	lds	r25, 0x0259
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	21 f4       	brne	.+8      	; 0x1768 <nodeDrop+0x114>
			if (armNo == side)
    1760:	c0 17       	cp	r28, r16
    1762:	d1 07       	cpc	r29, r17
    1764:	09 f4       	brne	.+2      	; 0x1768 <nodeDrop+0x114>
				turnRight();
    1766:	04 d9       	rcall	.-3576   	; 0x970 <turnRight>
		drop(armNo);
    1768:	ce 01       	movw	r24, r28
    176a:	5a df       	rcall	.-332    	; 0x1620 <drop>
		arm[armNo] = -1;
    176c:	cc 0f       	add	r28, r28
    176e:	dd 1f       	adc	r29, r29
    1770:	c1 55       	subi	r28, 0x51	; 81
    1772:	dd 4f       	sbci	r29, 0xFD	; 253
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	9f ef       	ldi	r25, 0xFF	; 255
    1778:	99 83       	std	Y+1, r25	; 0x01
    177a:	88 83       	st	Y, r24
    177c:	47 c0       	rjmp	.+142    	; 0x180c <nodeDrop+0x1b8>
	}
	else
	{
		ot = ct;
    177e:	30 93 5b 02 	sts	0x025B, r19
    1782:	20 93 5a 02 	sts	0x025A, r18
		if (dir == 0 || dir == 2)
    1786:	80 91 58 02 	lds	r24, 0x0258
    178a:	90 91 59 02 	lds	r25, 0x0259
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	19 f0       	breq	.+6      	; 0x1798 <nodeDrop+0x144>
    1792:	02 97       	sbiw	r24, 0x02	; 2
    1794:	c9 f4       	brne	.+50     	; 0x17c8 <nodeDrop+0x174>
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <nodeDrop+0x14c>

			if ((dir == 0 && (ct == 0 || ct == 2)) || (dir == 2 && (ct == 1 || ct == 3)))
    1798:	2d 7f       	andi	r18, 0xFD	; 253
    179a:	23 2b       	or	r18, r19
    179c:	29 f0       	breq	.+10     	; 0x17a8 <nodeDrop+0x154>
    179e:	0c c0       	rjmp	.+24     	; 0x17b8 <nodeDrop+0x164>
    17a0:	2d 7f       	andi	r18, 0xFD	; 253
    17a2:	21 30       	cpi	r18, 0x01	; 1
    17a4:	31 05       	cpc	r19, r1
    17a6:	41 f4       	brne	.+16     	; 0x17b8 <nodeDrop+0x164>
				if (armNo == side)
    17a8:	c0 17       	cp	r28, r16
    17aa:	d1 07       	cpc	r29, r17
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <nodeDrop+0x15e>
					front();
    17ae:	ca d8       	rcall	.-3692   	; 0x944 <front>
    17b0:	23 c0       	rjmp	.+70     	; 0x17f8 <nodeDrop+0x1a4>
				else
				{
					front();
    17b2:	c8 d8       	rcall	.-3696   	; 0x944 <front>
					turn();
    17b4:	01 d9       	rcall	.-3582   	; 0x9b8 <turn>
    17b6:	20 c0       	rjmp	.+64     	; 0x17f8 <nodeDrop+0x1a4>
				}
			else
			{
				if (armNo == side)
    17b8:	c0 17       	cp	r28, r16
    17ba:	d1 07       	cpc	r29, r17
    17bc:	19 f4       	brne	.+6      	; 0x17c4 <nodeDrop+0x170>
				{
					turn();
    17be:	fc d8       	rcall	.-3592   	; 0x9b8 <turn>
					front();
    17c0:	c1 d8       	rcall	.-3710   	; 0x944 <front>
    17c2:	1a c0       	rjmp	.+52     	; 0x17f8 <nodeDrop+0x1a4>
				}
				else
				{
					backward();
    17c4:	ca d8       	rcall	.-3692   	; 0x95a <backward>
    17c6:	18 c0       	rjmp	.+48     	; 0x17f8 <nodeDrop+0x1a4>
				}
			}
		else
		{
			if (armNo == side)
    17c8:	c0 17       	cp	r28, r16
    17ca:	d1 07       	cpc	r29, r17
    17cc:	59 f4       	brne	.+22     	; 0x17e4 <nodeDrop+0x190>
			{
				if (ct == 0 || ct == 3)
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	19 f0       	breq	.+6      	; 0x17da <nodeDrop+0x186>
    17d4:	23 30       	cpi	r18, 0x03	; 3
    17d6:	31 05       	cpc	r19, r1
    17d8:	11 f4       	brne	.+4      	; 0x17de <nodeDrop+0x18a>
					turnRight();
    17da:	ca d8       	rcall	.-3692   	; 0x970 <turnRight>
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <nodeDrop+0x18c>
				else turnLeft();
    17de:	da d8       	rcall	.-3660   	; 0x994 <turnLeft>
				front();
    17e0:	b1 d8       	rcall	.-3742   	; 0x944 <front>
    17e2:	0a c0       	rjmp	.+20     	; 0x17f8 <nodeDrop+0x1a4>
			}
			else
			{
				if (ct == 0 || ct == 3)
    17e4:	21 15       	cp	r18, r1
    17e6:	31 05       	cpc	r19, r1
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <nodeDrop+0x19c>
    17ea:	23 30       	cpi	r18, 0x03	; 3
    17ec:	31 05       	cpc	r19, r1
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <nodeDrop+0x1a0>
					turnLeft();
    17f0:	d1 d8       	rcall	.-3678   	; 0x994 <turnLeft>
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <nodeDrop+0x1a2>
				else turnRight();
    17f4:	bd d8       	rcall	.-3718   	; 0x970 <turnRight>
				backward();
    17f6:	b1 d8       	rcall	.-3742   	; 0x95a <backward>
			}
		}
		drop(armNo);
    17f8:	ce 01       	movw	r24, r28
    17fa:	12 df       	rcall	.-476    	; 0x1620 <drop>
		arm[armNo] = -1;
    17fc:	cc 0f       	add	r28, r28
    17fe:	dd 1f       	adc	r29, r29
    1800:	c1 55       	subi	r28, 0x51	; 81
    1802:	dd 4f       	sbci	r29, 0xFD	; 253
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	9f ef       	ldi	r25, 0xFF	; 255
    1808:	99 83       	std	Y+1, r25	; 0x01
    180a:	88 83       	st	Y, r24
	}

	ot = ct;
    180c:	80 91 87 02 	lds	r24, 0x0287
    1810:	90 91 88 02 	lds	r25, 0x0288
    1814:	90 93 5b 02 	sts	0x025B, r25
    1818:	80 93 5a 02 	sts	0x025A, r24
	//..printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    181c:	80 91 5e 02 	lds	r24, 0x025E
    1820:	90 91 5f 02 	lds	r25, 0x025F
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	90 93 5f 02 	sts	0x025F, r25
    182a:	80 93 5e 02 	sts	0x025E, r24
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    183e:	fb 01       	movw	r30, r22
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	ed 57       	subi	r30, 0x7D	; 125
    1846:	fd 4f       	sbci	r31, 0xFD	; 253
    1848:	dc 01       	movw	r26, r24
    184a:	aa 0f       	add	r26, r26
    184c:	bb 1f       	adc	r27, r27
    184e:	a1 55       	subi	r26, 0x51	; 81
    1850:	bd 4f       	sbci	r27, 0xFD	; 253
    1852:	8d 91       	ld	r24, X+
    1854:	9c 91       	ld	r25, X
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    185a:	c6 17       	cp	r28, r22
    185c:	d7 07       	cpc	r29, r23
    185e:	39 f4       	brne	.+14     	; 0x186e <sortDrop+0x36>
    1860:	80 91 58 02 	lds	r24, 0x0258
    1864:	90 91 59 02 	lds	r25, 0x0259
    1868:	89 2b       	or	r24, r25
    186a:	49 f4       	brne	.+18     	; 0x187e <sortDrop+0x46>
    186c:	06 c0       	rjmp	.+12     	; 0x187a <sortDrop+0x42>
    186e:	80 91 58 02 	lds	r24, 0x0258
    1872:	90 91 59 02 	lds	r25, 0x0259
    1876:	02 97       	sbiw	r24, 0x02	; 2
    1878:	11 f4       	brne	.+4      	; 0x187e <sortDrop+0x46>
		turn();
    187a:	9e d8       	rcall	.-3780   	; 0x9b8 <turn>
    187c:	0c c0       	rjmp	.+24     	; 0x1896 <sortDrop+0x5e>
	else
	{
		if (dir == 1 || dir == 3)
    187e:	80 91 58 02 	lds	r24, 0x0258
    1882:	90 91 59 02 	lds	r25, 0x0259
    1886:	8d 7f       	andi	r24, 0xFD	; 253
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	29 f4       	brne	.+10     	; 0x1896 <sortDrop+0x5e>
		{
			if (armNo == 0)
    188c:	20 97       	sbiw	r28, 0x00	; 0
    188e:	11 f4       	brne	.+4      	; 0x1894 <sortDrop+0x5c>
				turnLeft();
    1890:	81 d8       	rcall	.-3838   	; 0x994 <turnLeft>
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <sortDrop+0x5e>
			else turnRight();
    1894:	6d d8       	rcall	.-3878   	; 0x970 <turnRight>
		}
	}
	drop(armNo);
    1896:	ce 01       	movw	r24, r28
    1898:	c3 de       	rcall	.-634    	; 0x1620 <drop>
	arm[armNo] = -1;
    189a:	cc 0f       	add	r28, r28
    189c:	dd 1f       	adc	r29, r29
    189e:	c1 55       	subi	r28, 0x51	; 81
    18a0:	dd 4f       	sbci	r29, 0xFD	; 253
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
    18a6:	99 83       	std	Y+1, r25	; 0x01
    18a8:	88 83       	st	Y, r24
	//..printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	08 95       	ret

000018b0 <dropPickup>:

void dropPickup(int a1)
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    18b4:	9c 01       	movw	r18, r24
    18b6:	2f 5f       	subi	r18, 0xFF	; 255
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	21 70       	andi	r18, 0x01	; 1
    18bc:	30 78       	andi	r19, 0x80	; 128
    18be:	33 23       	and	r19, r19
    18c0:	34 f4       	brge	.+12     	; 0x18ce <dropPickup+0x1e>
    18c2:	21 50       	subi	r18, 0x01	; 1
    18c4:	31 09       	sbc	r19, r1
    18c6:	2e 6f       	ori	r18, 0xFE	; 254
    18c8:	3f 6f       	ori	r19, 0xFF	; 255
    18ca:	2f 5f       	subi	r18, 0xFF	; 255
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	d2 2f       	mov	r29, r18
    18d0:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    18d2:	e0 91 87 02 	lds	r30, 0x0287
    18d6:	f0 91 88 02 	lds	r31, 0x0288
    18da:	af 01       	movw	r20, r30
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	24 0f       	add	r18, r20
    18e2:	35 1f       	adc	r19, r21
    18e4:	d9 01       	movw	r26, r18
    18e6:	aa 0f       	add	r26, r26
    18e8:	bb 1f       	adc	r27, r27
    18ea:	a5 57       	subi	r26, 0x75	; 117
    18ec:	bd 4f       	sbci	r27, 0xFD	; 253
    18ee:	2d 91       	ld	r18, X+
    18f0:	3c 91       	ld	r19, X
    18f2:	da 01       	movw	r26, r20
    18f4:	a5 56       	subi	r26, 0x65	; 101
    18f6:	bd 4f       	sbci	r27, 0xFD	; 253
    18f8:	4d 91       	ld	r20, X+
    18fa:	5c 91       	ld	r21, X
    18fc:	24 17       	cp	r18, r20
    18fe:	35 07       	cpc	r19, r21
    1900:	69 f0       	breq	.+26     	; 0x191c <dropPickup+0x6c>
    1902:	a0 91 ab 02 	lds	r26, 0x02AB
    1906:	b0 91 ac 02 	lds	r27, 0x02AC
    190a:	aa 0f       	add	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	a5 56       	subi	r26, 0x65	; 101
    1910:	bd 4f       	sbci	r27, 0xFD	; 253
    1912:	6d 91       	ld	r22, X+
    1914:	7c 91       	ld	r23, X
    1916:	26 17       	cp	r18, r22
    1918:	37 07       	cpc	r19, r23
    191a:	a9 f0       	breq	.+42     	; 0x1946 <dropPickup+0x96>
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	e8 0f       	add	r30, r24
    1922:	f9 1f       	adc	r31, r25
    1924:	ee 0f       	add	r30, r30
    1926:	ff 1f       	adc	r31, r31
    1928:	e5 57       	subi	r30, 0x75	; 117
    192a:	fd 4f       	sbci	r31, 0xFD	; 253
    192c:	01 90       	ld	r0, Z+
    192e:	f0 81       	ld	r31, Z
    1930:	e0 2d       	mov	r30, r0
    1932:	4e 17       	cp	r20, r30
    1934:	5f 07       	cpc	r21, r31
    1936:	39 f0       	breq	.+14     	; 0x1946 <dropPickup+0x96>
    1938:	31 96       	adiw	r30, 0x01	; 1
    193a:	29 f0       	breq	.+10     	; 0x1946 <dropPickup+0x96>
		pickNode(a2, a1);
    193c:	bc 01       	movw	r22, r24
    193e:	8d 2f       	mov	r24, r29
    1940:	9c 2f       	mov	r25, r28
    1942:	d0 da       	rcall	.-2656   	; 0xee4 <pickNode>
    1944:	0b c0       	rjmp	.+22     	; 0x195c <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1946:	24 17       	cp	r18, r20
    1948:	35 07       	cpc	r19, r21
    194a:	41 f0       	breq	.+16     	; 0x195c <dropPickup+0xac>
    194c:	2f 3f       	cpi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	29 f0       	breq	.+10     	; 0x195c <dropPickup+0xac>
		pickNode(a2, a2);
    1952:	6d 2f       	mov	r22, r29
    1954:	7c 2f       	mov	r23, r28
    1956:	8d 2f       	mov	r24, r29
    1958:	9c 2f       	mov	r25, r28
    195a:	c4 da       	rcall	.-2680   	; 0xee4 <pickNode>
}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <canDrop>:

void canDrop()
{
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
    196a:	85 e4       	ldi	r24, 0x45	; 69
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1972:	20 91 87 02 	lds	r18, 0x0287
    1976:	30 91 88 02 	lds	r19, 0x0288
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	30 f4       	brcc	.+12     	; 0x198c <canDrop+0x2a>
    1980:	80 91 58 02 	lds	r24, 0x0258
    1984:	90 91 59 02 	lds	r25, 0x0259
    1988:	02 97       	sbiw	r24, 0x02	; 2
    198a:	79 f0       	breq	.+30     	; 0x19aa <canDrop+0x48>
    198c:	c9 01       	movw	r24, r18
    198e:	02 97       	sbiw	r24, 0x02	; 2
    1990:	02 97       	sbiw	r24, 0x02	; 2
    1992:	80 f4       	brcc	.+32     	; 0x19b4 <canDrop+0x52>
    1994:	80 91 58 02 	lds	r24, 0x0258
    1998:	90 91 59 02 	lds	r25, 0x0259
    199c:	89 2b       	or	r24, r25
    199e:	79 f0       	breq	.+30     	; 0x19be <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    19a0:	01 e0       	ldi	r16, 0x01	; 1
    19a2:	10 e0       	ldi	r17, 0x00	; 0
    19a4:	c0 e0       	ldi	r28, 0x00	; 0
    19a6:	d0 e0       	ldi	r29, 0x00	; 0
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <canDrop+0x64>
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    19aa:	00 e0       	ldi	r16, 0x00	; 0
    19ac:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    19ae:	c1 e0       	ldi	r28, 0x01	; 1
    19b0:	d0 e0       	ldi	r29, 0x00	; 0
    19b2:	09 c0       	rjmp	.+18     	; 0x19c6 <canDrop+0x64>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    19b4:	01 e0       	ldi	r16, 0x01	; 1
    19b6:	10 e0       	ldi	r17, 0x00	; 0
    19b8:	c0 e0       	ldi	r28, 0x00	; 0
    19ba:	d0 e0       	ldi	r29, 0x00	; 0
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <canDrop+0x64>
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    19be:	00 e0       	ldi	r16, 0x00	; 0
    19c0:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    19c2:	c1 e0       	ldi	r28, 0x01	; 1
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    19c6:	40 91 02 02 	lds	r20, 0x0202
    19ca:	50 91 03 02 	lds	r21, 0x0203
    19ce:	42 30       	cpi	r20, 0x02	; 2
    19d0:	51 05       	cpc	r21, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <canDrop+0x74>
    19d4:	26 c1       	rjmp	.+588    	; 0x1c22 <canDrop+0x2c0>
    19d6:	f9 01       	movw	r30, r18
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	e5 56       	subi	r30, 0x65	; 101
    19de:	fd 4f       	sbci	r31, 0xFD	; 253
    19e0:	40 81       	ld	r20, Z
    19e2:	51 81       	ldd	r21, Z+1	; 0x01
    19e4:	60 91 af 02 	lds	r22, 0x02AF
    19e8:	70 91 b0 02 	lds	r23, 0x02B0
    19ec:	64 17       	cp	r22, r20
    19ee:	75 07       	cpc	r23, r21
    19f0:	41 f0       	breq	.+16     	; 0x1a02 <canDrop+0xa0>
    19f2:	80 91 b1 02 	lds	r24, 0x02B1
    19f6:	90 91 b2 02 	lds	r25, 0x02B2
    19fa:	48 17       	cp	r20, r24
    19fc:	59 07       	cpc	r21, r25
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <canDrop+0xa0>
    1a00:	10 c1       	rjmp	.+544    	; 0x1c22 <canDrop+0x2c0>
		return;
	else
	{
		if (visited[ct] == 0)
    1a02:	f9 01       	movw	r30, r18
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	ec 59       	subi	r30, 0x9C	; 156
    1a0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	89 2b       	or	r24, r25
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <canDrop+0xb4>
			terminalCheck1();
    1a14:	1f d9       	rcall	.-3522   	; 0xc54 <terminalCheck1>
		if (armCount == 0)
    1a16:	80 91 02 02 	lds	r24, 0x0202
    1a1a:	90 91 03 02 	lds	r25, 0x0203
    1a1e:	89 2b       	or	r24, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <canDrop+0xc2>
    1a22:	48 c0       	rjmp	.+144    	; 0x1ab4 <canDrop+0x152>
		{
			if (arm[arm0] == color[ct])
    1a24:	20 91 87 02 	lds	r18, 0x0287
    1a28:	30 91 88 02 	lds	r19, 0x0288
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	e5 56       	subi	r30, 0x65	; 101
    1a34:	fd 4f       	sbci	r31, 0xFD	; 253
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	e1 55       	subi	r30, 0x51	; 81
    1a42:	fd 4f       	sbci	r31, 0xFD	; 253
    1a44:	40 81       	ld	r20, Z
    1a46:	51 81       	ldd	r21, Z+1	; 0x01
    1a48:	48 17       	cp	r20, r24
    1a4a:	59 07       	cpc	r21, r25
    1a4c:	a9 f4       	brne	.+42     	; 0x1a78 <canDrop+0x116>
			{
				if (term[ct][0] == -1)
    1a4e:	f9 01       	movw	r30, r18
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	e5 57       	subi	r30, 0x75	; 117
    1a5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	29 f4       	brne	.+10     	; 0x1a6e <canDrop+0x10c>
					nodeDrop(arm0, 0);
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	ce 01       	movw	r24, r28
    1a6a:	f4 dd       	rcall	.-1048   	; 0x1654 <nodeDrop>
    1a6c:	23 c0       	rjmp	.+70     	; 0x1ab4 <canDrop+0x152>
				else nodeDrop(arm0, 1);
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	ce 01       	movw	r24, r28
    1a74:	ef dd       	rcall	.-1058   	; 0x1654 <nodeDrop>
    1a76:	1e c0       	rjmp	.+60     	; 0x1ab4 <canDrop+0x152>
			}
			else if (arm[arm1] == color[ct])
    1a78:	f8 01       	movw	r30, r16
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	e1 55       	subi	r30, 0x51	; 81
    1a80:	fd 4f       	sbci	r31, 0xFD	; 253
    1a82:	40 81       	ld	r20, Z
    1a84:	51 81       	ldd	r21, Z+1	; 0x01
    1a86:	84 17       	cp	r24, r20
    1a88:	95 07       	cpc	r25, r21
    1a8a:	a1 f4       	brne	.+40     	; 0x1ab4 <canDrop+0x152>
			{
				if (term[ct][0] != -1)
    1a8c:	f9 01       	movw	r30, r18
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	ee 0f       	add	r30, r30
    1a94:	ff 1f       	adc	r31, r31
    1a96:	e5 57       	subi	r30, 0x75	; 117
    1a98:	fd 4f       	sbci	r31, 0xFD	; 253
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	29 f0       	breq	.+10     	; 0x1aac <canDrop+0x14a>
					nodeDrop(arm1, 1);
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	d5 dd       	rcall	.-1110   	; 0x1654 <nodeDrop>
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <canDrop+0x152>
				else nodeDrop(arm1, 0);
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	d0 dd       	rcall	.-1120   	; 0x1654 <nodeDrop>
			}
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    1ab4:	20 91 87 02 	lds	r18, 0x0287
    1ab8:	30 91 88 02 	lds	r19, 0x0288
    1abc:	f9 01       	movw	r30, r18
    1abe:	ee 0f       	add	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	e5 56       	subi	r30, 0x65	; 101
    1ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	40 91 af 02 	lds	r20, 0x02AF
    1ace:	50 91 b0 02 	lds	r21, 0x02B0
    1ad2:	48 17       	cp	r20, r24
    1ad4:	59 07       	cpc	r21, r25
    1ad6:	41 f0       	breq	.+16     	; 0x1ae8 <canDrop+0x186>
    1ad8:	40 91 b1 02 	lds	r20, 0x02B1
    1adc:	50 91 b2 02 	lds	r21, 0x02B2
    1ae0:	84 17       	cp	r24, r20
    1ae2:	95 07       	cpc	r25, r21
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <canDrop+0x186>
    1ae6:	9d c0       	rjmp	.+314    	; 0x1c22 <canDrop+0x2c0>
		{
			if (visited[ct] == 0)
    1ae8:	f9 01       	movw	r30, r18
    1aea:	ee 0f       	add	r30, r30
    1aec:	ff 1f       	adc	r31, r31
    1aee:	ec 59       	subi	r30, 0x9C	; 156
    1af0:	fd 4f       	sbci	r31, 0xFD	; 253
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	89 2b       	or	r24, r25
    1af8:	09 f4       	brne	.+2      	; 0x1afc <canDrop+0x19a>
				terminalCheck2();
    1afa:	37 d9       	rcall	.-3474   	; 0xd6a <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    1afc:	80 91 87 02 	lds	r24, 0x0287
    1b00:	90 91 88 02 	lds	r25, 0x0288
    1b04:	fc 01       	movw	r30, r24
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	e5 57       	subi	r30, 0x75	; 117
    1b10:	fd 4f       	sbci	r31, 0xFD	; 253
    1b12:	20 81       	ld	r18, Z
    1b14:	31 81       	ldd	r19, Z+1	; 0x01
    1b16:	2f 3f       	cpi	r18, 0xFF	; 255
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	11 f1       	breq	.+68     	; 0x1b60 <canDrop+0x1fe>
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	e5 57       	subi	r30, 0x75	; 117
    1b28:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2a:	22 81       	ldd	r18, Z+2	; 0x02
    1b2c:	33 81       	ldd	r19, Z+3	; 0x03
    1b2e:	2f 3f       	cpi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	b1 f0       	breq	.+44     	; 0x1b60 <canDrop+0x1fe>
			{
				if (arm[arm0] == color[ct])
    1b34:	de 01       	movw	r26, r28
    1b36:	aa 0f       	add	r26, r26
    1b38:	bb 1f       	adc	r27, r27
    1b3a:	a1 55       	subi	r26, 0x51	; 81
    1b3c:	bd 4f       	sbci	r27, 0xFD	; 253
    1b3e:	fc 01       	movw	r30, r24
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	e5 56       	subi	r30, 0x65	; 101
    1b46:	fd 4f       	sbci	r31, 0xFD	; 253
    1b48:	2d 91       	ld	r18, X+
    1b4a:	3c 91       	ld	r19, X
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	28 17       	cp	r18, r24
    1b52:	39 07       	cpc	r19, r25
    1b54:	19 f4       	brne	.+6      	; 0x1b5c <canDrop+0x1fa>
					dropPickup(arm0);
    1b56:	ce 01       	movw	r24, r28
    1b58:	ab de       	rcall	.-682    	; 0x18b0 <dropPickup>
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <canDrop+0x1fe>
				else dropPickup(arm1);
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	a8 de       	rcall	.-688    	; 0x18b0 <dropPickup>
			}
			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    1b60:	80 91 87 02 	lds	r24, 0x0287
    1b64:	90 91 88 02 	lds	r25, 0x0288
    1b68:	fc 01       	movw	r30, r24
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	e5 56       	subi	r30, 0x65	; 101
    1b70:	fd 4f       	sbci	r31, 0xFD	; 253
    1b72:	20 81       	ld	r18, Z
    1b74:	31 81       	ldd	r19, Z+1	; 0x01
    1b76:	fe 01       	movw	r30, r28
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	e1 55       	subi	r30, 0x51	; 81
    1b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b80:	40 81       	ld	r20, Z
    1b82:	51 81       	ldd	r21, Z+1	; 0x01
    1b84:	42 17       	cp	r20, r18
    1b86:	53 07       	cpc	r21, r19
    1b88:	11 f5       	brne	.+68     	; 0x1bce <canDrop+0x26c>
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	e5 57       	subi	r30, 0x75	; 117
    1b96:	fd 4f       	sbci	r31, 0xFD	; 253
    1b98:	40 81       	ld	r20, Z
    1b9a:	51 81       	ldd	r21, Z+1	; 0x01
    1b9c:	4f 3f       	cpi	r20, 0xFF	; 255
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	29 f4       	brne	.+10     	; 0x1bac <canDrop+0x24a>
				nodeDrop(arm0, 0);
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	55 dd       	rcall	.-1366   	; 0x1654 <nodeDrop>
    1baa:	3b c0       	rjmp	.+118    	; 0x1c22 <canDrop+0x2c0>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    1bac:	fc 01       	movw	r30, r24
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	e5 57       	subi	r30, 0x75	; 117
    1bb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bba:	42 81       	ldd	r20, Z+2	; 0x02
    1bbc:	53 81       	ldd	r21, Z+3	; 0x03
    1bbe:	4f 3f       	cpi	r20, 0xFF	; 255
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc2:	29 f4       	brne	.+10     	; 0x1bce <canDrop+0x26c>
				nodeDrop(arm0, 1);
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	ce 01       	movw	r24, r28
    1bca:	44 dd       	rcall	.-1400   	; 0x1654 <nodeDrop>
    1bcc:	2a c0       	rjmp	.+84     	; 0x1c22 <canDrop+0x2c0>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    1bce:	f8 01       	movw	r30, r16
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	e1 55       	subi	r30, 0x51	; 81
    1bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd8:	40 81       	ld	r20, Z
    1bda:	51 81       	ldd	r21, Z+1	; 0x01
    1bdc:	24 17       	cp	r18, r20
    1bde:	35 07       	cpc	r19, r21
    1be0:	01 f5       	brne	.+64     	; 0x1c22 <canDrop+0x2c0>
    1be2:	fc 01       	movw	r30, r24
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	e5 57       	subi	r30, 0x75	; 117
    1bee:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf0:	20 81       	ld	r18, Z
    1bf2:	31 81       	ldd	r19, Z+1	; 0x01
    1bf4:	2f 3f       	cpi	r18, 0xFF	; 255
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <canDrop+0x2a2>
				nodeDrop(arm1, 0);
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	c8 01       	movw	r24, r16
    1c00:	29 dd       	rcall	.-1454   	; 0x1654 <nodeDrop>
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <canDrop+0x2c0>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    1c04:	fc 01       	movw	r30, r24
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	e5 57       	subi	r30, 0x75	; 117
    1c10:	fd 4f       	sbci	r31, 0xFD	; 253
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <canDrop+0x2c0>
				nodeDrop(arm1, 1);
    1c1a:	61 e0       	ldi	r22, 0x01	; 1
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	c8 01       	movw	r24, r16
    1c20:	19 dd       	rcall	.-1486   	; 0x1654 <nodeDrop>
		}
	}
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <newSort>:

void newSort()
{
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
	int t1, t2, a1, a2;
	if (arm[0] != -1)
    1c38:	20 91 af 02 	lds	r18, 0x02AF
    1c3c:	30 91 b0 02 	lds	r19, 0x02B0
    1c40:	2f 3f       	cpi	r18, 0xFF	; 255
    1c42:	4f ef       	ldi	r20, 0xFF	; 255
    1c44:	34 07       	cpc	r19, r20
    1c46:	39 f0       	breq	.+14     	; 0x1c56 <newSort+0x2a>
		a1 = indicator[arm[0]];
    1c48:	f9 01       	movw	r30, r18
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ed 55       	subi	r30, 0x5D	; 93
    1c50:	fd 4f       	sbci	r31, 0xFD	; 253
    1c52:	c0 81       	ld	r28, Z
    1c54:	d1 81       	ldd	r29, Z+1	; 0x01
	if (arm[1] != -1)
    1c56:	e0 91 b1 02 	lds	r30, 0x02B1
    1c5a:	f0 91 b2 02 	lds	r31, 0x02B2
    1c5e:	ef 3f       	cpi	r30, 0xFF	; 255
    1c60:	6f ef       	ldi	r22, 0xFF	; 255
    1c62:	f6 07       	cpc	r31, r22
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <newSort+0x3c>
    1c66:	5d c1       	rjmp	.+698    	; 0x1f22 <newSort+0x2f6>
		a2 = indicator[arm[1]];
    1c68:	df 01       	movw	r26, r30
    1c6a:	aa 0f       	add	r26, r26
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	ad 55       	subi	r26, 0x5D	; 93
    1c70:	bd 4f       	sbci	r27, 0xFD	; 253
    1c72:	0d 91       	ld	r16, X+
    1c74:	1c 91       	ld	r17, X

	t1 = (ct + 1) % 2;
    1c76:	80 91 87 02 	lds	r24, 0x0287
    1c7a:	90 91 88 02 	lds	r25, 0x0288
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	81 70       	andi	r24, 0x01	; 1
    1c82:	90 78       	andi	r25, 0x80	; 128
    1c84:	99 23       	and	r25, r25
    1c86:	24 f4       	brge	.+8      	; 0x1c90 <newSort+0x64>
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	8e 6f       	ori	r24, 0xFE	; 254
    1c8c:	9f 6f       	ori	r25, 0xFF	; 255
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    1c92:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    1c94:	d0 93 88 02 	sts	0x0288, r29
    1c98:	c0 93 87 02 	sts	0x0287, r28
		if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    1c9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1c9e:	af ef       	ldi	r26, 0xFF	; 255
    1ca0:	3a 07       	cpc	r19, r26
    1ca2:	e1 f1       	breq	.+120    	; 0x1d1c <newSort+0xf0>
    1ca4:	de 01       	movw	r26, r28
    1ca6:	aa 0f       	add	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	aa 0f       	add	r26, r26
    1cac:	bb 1f       	adc	r27, r27
    1cae:	a5 57       	subi	r26, 0x75	; 117
    1cb0:	bd 4f       	sbci	r27, 0xFD	; 253
    1cb2:	4d 91       	ld	r20, X+
    1cb4:	5c 91       	ld	r21, X
    1cb6:	4f 3f       	cpi	r20, 0xFF	; 255
    1cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cba:	71 f0       	breq	.+28     	; 0x1cd8 <newSort+0xac>
    1cbc:	de 01       	movw	r26, r28
    1cbe:	aa 0f       	add	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	aa 0f       	add	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	a5 57       	subi	r26, 0x75	; 117
    1cc8:	bd 4f       	sbci	r27, 0xFD	; 253
    1cca:	12 96       	adiw	r26, 0x02	; 2
    1ccc:	4d 91       	ld	r20, X+
    1cce:	5c 91       	ld	r21, X
    1cd0:	13 97       	sbiw	r26, 0x03	; 3
    1cd2:	4f 3f       	cpi	r20, 0xFF	; 255
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd6:	11 f5       	brne	.+68     	; 0x1d1c <newSort+0xf0>
		{
			if (arm[1] == -1)
    1cd8:	31 96       	adiw	r30, 0x01	; 1
    1cda:	09 f0       	breq	.+2      	; 0x1cde <newSort+0xb2>
    1cdc:	10 c1       	rjmp	.+544    	; 0x1efe <newSort+0x2d2>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    1cde:	66 0f       	add	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	fb 01       	movw	r30, r22
    1ce4:	ed 57       	subi	r30, 0x7D	; 125
    1ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	fb 01       	movw	r30, r22
    1cee:	e5 56       	subi	r30, 0x65	; 101
    1cf0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf2:	40 81       	ld	r20, Z
    1cf4:	51 81       	ldd	r21, Z+1	; 0x01
    1cf6:	24 17       	cp	r18, r20
    1cf8:	35 07       	cpc	r19, r21
    1cfa:	59 f0       	breq	.+22     	; 0x1d12 <newSort+0xe6>
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	e5 56       	subi	r30, 0x65	; 101
    1d04:	fd 4f       	sbci	r31, 0xFD	; 253
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	28 17       	cp	r18, r24
    1d0c:	39 07       	cpc	r19, r25
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <newSort+0xe6>
    1d10:	f6 c0       	rjmp	.+492    	; 0x1efe <newSort+0x2d2>
					pickSort(1, a1);
    1d12:	be 01       	movw	r22, r28
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	d6 d9       	rcall	.-3156   	; 0x10c6 <pickSort>
    1d1a:	f1 c0       	rjmp	.+482    	; 0x1efe <newSort+0x2d2>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    1d1c:	ef 3f       	cpi	r30, 0xFF	; 255
    1d1e:	4f ef       	ldi	r20, 0xFF	; 255
    1d20:	f4 07       	cpc	r31, r20
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <newSort+0xfa>
    1d24:	52 c0       	rjmp	.+164    	; 0x1dca <newSort+0x19e>
    1d26:	d8 01       	movw	r26, r16
    1d28:	aa 0f       	add	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	aa 0f       	add	r26, r26
    1d2e:	bb 1f       	adc	r27, r27
    1d30:	a5 57       	subi	r26, 0x75	; 117
    1d32:	bd 4f       	sbci	r27, 0xFD	; 253
    1d34:	4d 91       	ld	r20, X+
    1d36:	5c 91       	ld	r21, X
    1d38:	4f 3f       	cpi	r20, 0xFF	; 255
    1d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <newSort+0x114>
    1d3e:	13 c1       	rjmp	.+550    	; 0x1f66 <newSort+0x33a>
    1d40:	d8 01       	movw	r26, r16
    1d42:	aa 0f       	add	r26, r26
    1d44:	bb 1f       	adc	r27, r27
    1d46:	aa 0f       	add	r26, r26
    1d48:	bb 1f       	adc	r27, r27
    1d4a:	a5 57       	subi	r26, 0x75	; 117
    1d4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d4e:	12 96       	adiw	r26, 0x02	; 2
    1d50:	4d 91       	ld	r20, X+
    1d52:	5c 91       	ld	r21, X
    1d54:	13 97       	sbiw	r26, 0x03	; 3
    1d56:	4f 3f       	cpi	r20, 0xFF	; 255
    1d58:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5a:	b9 f5       	brne	.+110    	; 0x1dca <newSort+0x19e>
    1d5c:	f2 c0       	rjmp	.+484    	; 0x1f42 <newSort+0x316>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    1d5e:	2f 3f       	cpi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <newSort+0x13a>
    1d64:	cc c0       	rjmp	.+408    	; 0x1efe <newSort+0x2d2>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    1d66:	9b 01       	movw	r18, r22
    1d68:	22 0f       	add	r18, r18
    1d6a:	33 1f       	adc	r19, r19
    1d6c:	f9 01       	movw	r30, r18
    1d6e:	ed 57       	subi	r30, 0x7D	; 125
    1d70:	fd 4f       	sbci	r31, 0xFD	; 253
    1d72:	40 81       	ld	r20, Z
    1d74:	51 81       	ldd	r21, Z+1	; 0x01
    1d76:	f9 01       	movw	r30, r18
    1d78:	e5 56       	subi	r30, 0x65	; 101
    1d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7c:	20 81       	ld	r18, Z
    1d7e:	31 81       	ldd	r19, Z+1	; 0x01
    1d80:	42 17       	cp	r20, r18
    1d82:	53 07       	cpc	r21, r19
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <newSort+0x15c>
    1d86:	bb c0       	rjmp	.+374    	; 0x1efe <newSort+0x2d2>
    1d88:	fc 01       	movw	r30, r24
    1d8a:	ee 0f       	add	r30, r30
    1d8c:	ff 1f       	adc	r31, r31
    1d8e:	e5 56       	subi	r30, 0x65	; 101
    1d90:	fd 4f       	sbci	r31, 0xFD	; 253
    1d92:	80 81       	ld	r24, Z
    1d94:	91 81       	ldd	r25, Z+1	; 0x01
    1d96:	48 17       	cp	r20, r24
    1d98:	59 07       	cpc	r21, r25
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <newSort+0x172>
    1d9c:	b0 c0       	rjmp	.+352    	; 0x1efe <newSort+0x2d2>
						pickSort(1, t1);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	91 d9       	rcall	.-3294   	; 0x10c6 <pickSort>
    1da4:	ac c0       	rjmp	.+344    	; 0x1efe <newSort+0x2d2>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    1da6:	fb 01       	movw	r30, r22
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	ed 57       	subi	r30, 0x7D	; 125
    1dae:	fd 4f       	sbci	r31, 0xFD	; 253
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	09 f0       	breq	.+2      	; 0x1dba <newSort+0x18e>
    1db8:	a2 c0       	rjmp	.+324    	; 0x1efe <newSort+0x2d2>
    1dba:	2f 3f       	cpi	r18, 0xFF	; 255
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <newSort+0x196>
    1dc0:	9e c0       	rjmp	.+316    	; 0x1efe <newSort+0x2d2>
				sortDrop(1, t1);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	38 dd       	rcall	.-1424   	; 0x1838 <sortDrop>
    1dc8:	9a c0       	rjmp	.+308    	; 0x1efe <newSort+0x2d2>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    1dca:	2f 3f       	cpi	r18, 0xFF	; 255
    1dcc:	af ef       	ldi	r26, 0xFF	; 255
    1dce:	3a 07       	cpc	r19, r26
    1dd0:	a1 f0       	breq	.+40     	; 0x1dfa <newSort+0x1ce>
    1dd2:	db 01       	movw	r26, r22
    1dd4:	aa 0f       	add	r26, r26
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	ad 57       	subi	r26, 0x7D	; 125
    1dda:	bd 4f       	sbci	r27, 0xFD	; 253
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	31 f4       	brne	.+12     	; 0x1df0 <newSort+0x1c4>
    1de4:	31 96       	adiw	r30, 0x01	; 1
    1de6:	21 f0       	breq	.+8      	; 0x1df0 <newSort+0x1c4>
			sortDrop(1, t1);
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	25 dd       	rcall	.-1462   	; 0x1838 <sortDrop>
    1dee:	87 c0       	rjmp	.+270    	; 0x1efe <newSort+0x2d2>
		else if (arm[0] != -1)
			ct = arm[0];
    1df0:	30 93 88 02 	sts	0x0288, r19
    1df4:	20 93 87 02 	sts	0x0287, r18
    1df8:	82 c0       	rjmp	.+260    	; 0x1efe <newSort+0x2d2>
		else ct = arm[1];
    1dfa:	f0 93 88 02 	sts	0x0288, r31
    1dfe:	e0 93 87 02 	sts	0x0287, r30
    1e02:	7d c0       	rjmp	.+250    	; 0x1efe <newSort+0x2d2>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    1e04:	a7 01       	movw	r20, r14
    1e06:	44 0f       	add	r20, r20
    1e08:	55 1f       	adc	r21, r21
    1e0a:	fa 01       	movw	r30, r20
    1e0c:	ed 57       	subi	r30, 0x7D	; 125
    1e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e10:	20 81       	ld	r18, Z
    1e12:	31 81       	ldd	r19, Z+1	; 0x01
    1e14:	fa 01       	movw	r30, r20
    1e16:	e5 56       	subi	r30, 0x65	; 101
    1e18:	fd 4f       	sbci	r31, 0xFD	; 253
    1e1a:	40 81       	ld	r20, Z
    1e1c:	51 81       	ldd	r21, Z+1	; 0x01
    1e1e:	24 17       	cp	r18, r20
    1e20:	35 07       	cpc	r19, r21
    1e22:	51 f0       	breq	.+20     	; 0x1e38 <newSort+0x20c>
    1e24:	fc 01       	movw	r30, r24
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	e5 56       	subi	r30, 0x65	; 101
    1e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	26 17       	cp	r18, r22
    1e34:	37 07       	cpc	r19, r23
    1e36:	81 f4       	brne	.+32     	; 0x1e58 <newSort+0x22c>
    1e38:	2f 3f       	cpi	r18, 0xFF	; 255
    1e3a:	af ef       	ldi	r26, 0xFF	; 255
    1e3c:	3a 07       	cpc	r19, r26
    1e3e:	71 f1       	breq	.+92     	; 0x1e9c <newSort+0x270>
			ct = indicator[sort[t1]];
    1e40:	f9 01       	movw	r30, r18
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	ed 55       	subi	r30, 0x5D	; 93
    1e48:	fd 4f       	sbci	r31, 0xFD	; 253
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	90 93 88 02 	sts	0x0288, r25
    1e52:	80 93 87 02 	sts	0x0287, r24
    1e56:	53 c0       	rjmp	.+166    	; 0x1efe <newSort+0x2d2>
		else if (sort[t1] != -1)
    1e58:	2f 3f       	cpi	r18, 0xFF	; 255
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	f9 f0       	breq	.+62     	; 0x1e9c <newSort+0x270>
		{
			pickSort(0, t1);
    1e5e:	b7 01       	movw	r22, r14
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	30 d9       	rcall	.-3488   	; 0x10c6 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    1e66:	2f ef       	ldi	r18, 0xFF	; 255
    1e68:	e2 1a       	sub	r14, r18
    1e6a:	f2 0a       	sbc	r15, r18
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	e4 22       	and	r14, r20
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	f4 22       	and	r15, r20
    1e74:	ff 20       	and	r15, r15
    1e76:	54 f4       	brge	.+20     	; 0x1e8c <newSort+0x260>
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	e6 1a       	sub	r14, r22
    1e7c:	f1 08       	sbc	r15, r1
    1e7e:	8e ef       	ldi	r24, 0xFE	; 254
    1e80:	e8 2a       	or	r14, r24
    1e82:	ff 24       	eor	r15, r15
    1e84:	fa 94       	dec	r15
    1e86:	af ef       	ldi	r26, 0xFF	; 255
    1e88:	ea 1a       	sub	r14, r26
    1e8a:	fa 0a       	sbc	r15, r26
    1e8c:	e4 e0       	ldi	r30, 0x04	; 4
    1e8e:	ee 0e       	add	r14, r30
    1e90:	f1 1c       	adc	r15, r1
    1e92:	f0 92 88 02 	sts	0x0288, r15
    1e96:	e0 92 87 02 	sts	0x0287, r14
    1e9a:	31 c0       	rjmp	.+98     	; 0x1efe <newSort+0x2d2>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    1e9c:	f7 01       	movw	r30, r14
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	ec 59       	subi	r30, 0x9C	; 156
    1ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea6:	20 81       	ld	r18, Z
    1ea8:	31 81       	ldd	r19, Z+1	; 0x01
    1eaa:	21 30       	cpi	r18, 0x01	; 1
    1eac:	31 05       	cpc	r19, r1
    1eae:	19 f5       	brne	.+70     	; 0x1ef6 <newSort+0x2ca>
    1eb0:	f7 01       	movw	r30, r14
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e5 57       	subi	r30, 0x75	; 117
    1ebc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ebe:	20 81       	ld	r18, Z
    1ec0:	31 81       	ldd	r19, Z+1	; 0x01
    1ec2:	42 17       	cp	r20, r18
    1ec4:	53 07       	cpc	r21, r19
    1ec6:	19 f0       	breq	.+6      	; 0x1ece <newSort+0x2a2>
    1ec8:	2f 3f       	cpi	r18, 0xFF	; 255
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	a1 f4       	brne	.+40     	; 0x1ef6 <newSort+0x2ca>
    1ece:	f7 01       	movw	r30, r14
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e5 57       	subi	r30, 0x75	; 117
    1eda:	fd 4f       	sbci	r31, 0xFD	; 253
    1edc:	22 81       	ldd	r18, Z+2	; 0x02
    1ede:	33 81       	ldd	r19, Z+3	; 0x03
    1ee0:	42 17       	cp	r20, r18
    1ee2:	53 07       	cpc	r21, r19
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <newSort+0x2c0>
    1ee6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	29 f4       	brne	.+10     	; 0x1ef6 <newSort+0x2ca>
			ct = t2;
    1eec:	90 93 88 02 	sts	0x0288, r25
    1ef0:	80 93 87 02 	sts	0x0287, r24
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <newSort+0x2d2>
		else ct = t1;
    1ef6:	f0 92 88 02 	sts	0x0288, r15
    1efa:	e0 92 87 02 	sts	0x0287, r14
	arm[0] = arm[1] = -1;
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    1efe:	80 91 87 02 	lds	r24, 0x0287
    1f02:	90 91 88 02 	lds	r25, 0x0288
    1f06:	02 96       	adiw	r24, 0x02	; 2
    1f08:	83 70       	andi	r24, 0x03	; 3
    1f0a:	90 78       	andi	r25, 0x80	; 128
    1f0c:	99 23       	and	r25, r25
    1f0e:	24 f4       	brge	.+8      	; 0x1f18 <newSort+0x2ec>
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	8c 6f       	ori	r24, 0xFC	; 252
    1f14:	9f 6f       	ori	r25, 0xFF	; 255
    1f16:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    1f18:	90 93 ac 02 	sts	0x02AC, r25
    1f1c:	80 93 ab 02 	sts	0x02AB, r24
    1f20:	2c c0       	rjmp	.+88     	; 0x1f7a <newSort+0x34e>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    1f22:	80 91 87 02 	lds	r24, 0x0287
    1f26:	90 91 88 02 	lds	r25, 0x0288
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	b2 d4       	rcall	.+2404   	; 0x2896 <__divmodhi4>
    1f32:	7c 01       	movw	r14, r24
    1f34:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    1f36:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    1f38:	2f 3f       	cpi	r18, 0xFF	; 255
    1f3a:	4f ef       	ldi	r20, 0xFF	; 255
    1f3c:	34 07       	cpc	r19, r20
    1f3e:	c1 f4       	brne	.+48     	; 0x1f70 <newSort+0x344>
    1f40:	61 cf       	rjmp	.-318    	; 0x1e04 <newSort+0x1d8>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    1f42:	10 93 88 02 	sts	0x0288, r17
    1f46:	00 93 87 02 	sts	0x0287, r16
			if (term[a2][0] == -1 || term[a2][1] == -1)
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	ee 0f       	add	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	e5 57       	subi	r30, 0x75	; 117
    1f56:	fd 4f       	sbci	r31, 0xFD	; 253
    1f58:	42 81       	ldd	r20, Z+2	; 0x02
    1f5a:	53 81       	ldd	r21, Z+3	; 0x03
    1f5c:	4f 3f       	cpi	r20, 0xFF	; 255
    1f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <newSort+0x338>
    1f62:	21 cf       	rjmp	.-446    	; 0x1da6 <newSort+0x17a>
    1f64:	fc ce       	rjmp	.-520    	; 0x1d5e <newSort+0x132>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    1f66:	10 93 88 02 	sts	0x0288, r17
    1f6a:	00 93 87 02 	sts	0x0287, r16
    1f6e:	f7 ce       	rjmp	.-530    	; 0x1d5e <newSort+0x132>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    1f70:	d0 93 88 02 	sts	0x0288, r29
    1f74:	c0 93 87 02 	sts	0x0287, r28
    1f78:	95 ce       	rjmp	.-726    	; 0x1ca4 <newSort+0x78>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	08 95       	ret

00001f88 <sortCheck>:
void sortCheck()
{
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1fa0:	40 91 87 02 	lds	r20, 0x0287
    1fa4:	50 91 88 02 	lds	r21, 0x0288
    1fa8:	42 30       	cpi	r20, 0x02	; 2
    1faa:	51 05       	cpc	r21, r1
    1fac:	30 f4       	brcc	.+12     	; 0x1fba <sortCheck+0x32>
    1fae:	80 91 58 02 	lds	r24, 0x0258
    1fb2:	90 91 59 02 	lds	r25, 0x0259
    1fb6:	02 97       	sbiw	r24, 0x02	; 2
    1fb8:	79 f0       	breq	.+30     	; 0x1fd8 <sortCheck+0x50>
    1fba:	ca 01       	movw	r24, r20
    1fbc:	02 97       	sbiw	r24, 0x02	; 2
    1fbe:	02 97       	sbiw	r24, 0x02	; 2
    1fc0:	80 f4       	brcc	.+32     	; 0x1fe2 <sortCheck+0x5a>
    1fc2:	80 91 58 02 	lds	r24, 0x0258
    1fc6:	90 91 59 02 	lds	r25, 0x0259
    1fca:	89 2b       	or	r24, r25
    1fcc:	79 f0       	breq	.+30     	; 0x1fec <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
    1fce:	01 e0       	ldi	r16, 0x01	; 1
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	c0 e0       	ldi	r28, 0x00	; 0
    1fd4:	d0 e0       	ldi	r29, 0x00	; 0
    1fd6:	0e c0       	rjmp	.+28     	; 0x1ff4 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1fd8:	00 e0       	ldi	r16, 0x00	; 0
    1fda:	10 e0       	ldi	r17, 0x00	; 0
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1fdc:	c1 e0       	ldi	r28, 0x01	; 1
    1fde:	d0 e0       	ldi	r29, 0x00	; 0
    1fe0:	09 c0       	rjmp	.+18     	; 0x1ff4 <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
    1fe2:	01 e0       	ldi	r16, 0x01	; 1
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
    1fe6:	c0 e0       	ldi	r28, 0x00	; 0
    1fe8:	d0 e0       	ldi	r29, 0x00	; 0
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1fec:	00 e0       	ldi	r16, 0x00	; 0
    1fee:	10 e0       	ldi	r17, 0x00	; 0
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1ff0:	c1 e0       	ldi	r28, 0x01	; 1
    1ff2:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    1ff4:	9a 01       	movw	r18, r20
    1ff6:	21 70       	andi	r18, 0x01	; 1
    1ff8:	30 78       	andi	r19, 0x80	; 128
    1ffa:	33 23       	and	r19, r19
    1ffc:	34 f4       	brge	.+12     	; 0x200a <sortCheck+0x82>
    1ffe:	21 50       	subi	r18, 0x01	; 1
    2000:	31 09       	sbc	r19, r1
    2002:	2e 6f       	ori	r18, 0xFE	; 254
    2004:	3f 6f       	ori	r19, 0xFF	; 255
    2006:	2f 5f       	subi	r18, 0xFF	; 255
    2008:	3f 4f       	sbci	r19, 0xFF	; 255
    200a:	b2 2e       	mov	r11, r18
    200c:	a3 2e       	mov	r10, r19
    200e:	f9 01       	movw	r30, r18
    2010:	ee 0f       	add	r30, r30
    2012:	ff 1f       	adc	r31, r31
    2014:	ed 57       	subi	r30, 0x7D	; 125
    2016:	fd 4f       	sbci	r31, 0xFD	; 253
    2018:	20 81       	ld	r18, Z
    201a:	31 81       	ldd	r19, Z+1	; 0x01
    201c:	fa 01       	movw	r30, r20
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	e5 56       	subi	r30, 0x65	; 101
    2024:	fd 4f       	sbci	r31, 0xFD	; 253
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	28 17       	cp	r18, r24
    202c:	39 07       	cpc	r19, r25
    202e:	79 f0       	breq	.+30     	; 0x204e <sortCheck+0xc6>
    2030:	80 91 ab 02 	lds	r24, 0x02AB
    2034:	90 91 ac 02 	lds	r25, 0x02AC
    2038:	fc 01       	movw	r30, r24
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	e5 56       	subi	r30, 0x65	; 101
    2040:	fd 4f       	sbci	r31, 0xFD	; 253
    2042:	40 81       	ld	r20, Z
    2044:	51 81       	ldd	r21, Z+1	; 0x01
    2046:	24 17       	cp	r18, r20
    2048:	35 07       	cpc	r19, r21
    204a:	09 f0       	breq	.+2      	; 0x204e <sortCheck+0xc6>
    204c:	a7 c0       	rjmp	.+334    	; 0x219c <sortCheck+0x214>
	{
		if (armCount>0)
    204e:	80 91 02 02 	lds	r24, 0x0202
    2052:	90 91 03 02 	lds	r25, 0x0203
    2056:	18 16       	cp	r1, r24
    2058:	19 06       	cpc	r1, r25
    205a:	0c f0       	brlt	.+2      	; 0x205e <sortCheck+0xd6>
    205c:	96 c0       	rjmp	.+300    	; 0x218a <sortCheck+0x202>
		{
			ct = indicator[sort[ct % 2]];
    205e:	f9 01       	movw	r30, r18
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	ed 55       	subi	r30, 0x5D	; 93
    2066:	fd 4f       	sbci	r31, 0xFD	; 253
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	70 93 88 02 	sts	0x0288, r23
    2070:	60 93 87 02 	sts	0x0287, r22
			if (arm[arm0] == -1)
    2074:	fe 01       	movw	r30, r28
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e1 55       	subi	r30, 0x51	; 81
    207c:	fd 4f       	sbci	r31, 0xFD	; 253
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	69 f4       	brne	.+26     	; 0x20a0 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    2086:	61 70       	andi	r22, 0x01	; 1
    2088:	70 78       	andi	r23, 0x80	; 128
    208a:	77 23       	and	r23, r23
    208c:	34 f4       	brge	.+12     	; 0x209a <sortCheck+0x112>
    208e:	61 50       	subi	r22, 0x01	; 1
    2090:	71 09       	sbc	r23, r1
    2092:	6e 6f       	ori	r22, 0xFE	; 254
    2094:	7f 6f       	ori	r23, 0xFF	; 255
    2096:	6f 5f       	subi	r22, 0xFF	; 255
    2098:	7f 4f       	sbci	r23, 0xFF	; 255
    209a:	ce 01       	movw	r24, r28
    209c:	14 d8       	rcall	.-4056   	; 0x10c6 <pickSort>
    209e:	16 c0       	rjmp	.+44     	; 0x20cc <sortCheck+0x144>
			else if (arm[arm1] == -1)
    20a0:	f8 01       	movw	r30, r16
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e1 55       	subi	r30, 0x51	; 81
    20a8:	fd 4f       	sbci	r31, 0xFD	; 253
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	69 f4       	brne	.+26     	; 0x20cc <sortCheck+0x144>
				pickSort(arm1, ct % 2);
    20b2:	61 70       	andi	r22, 0x01	; 1
    20b4:	70 78       	andi	r23, 0x80	; 128
    20b6:	77 23       	and	r23, r23
    20b8:	34 f4       	brge	.+12     	; 0x20c6 <sortCheck+0x13e>
    20ba:	61 50       	subi	r22, 0x01	; 1
    20bc:	71 09       	sbc	r23, r1
    20be:	6e 6f       	ori	r22, 0xFE	; 254
    20c0:	7f 6f       	ori	r23, 0xFF	; 255
    20c2:	6f 5f       	subi	r22, 0xFF	; 255
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	c8 01       	movw	r24, r16
    20c8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    20cc:	80 91 02 02 	lds	r24, 0x0202
    20d0:	90 91 03 02 	lds	r25, 0x0203
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	09 f4       	brne	.+2      	; 0x20da <sortCheck+0x152>
    20d8:	6d c1       	rjmp	.+730    	; 0x23b4 <__stack+0x1b5>
    20da:	80 91 87 02 	lds	r24, 0x0287
    20de:	90 91 88 02 	lds	r25, 0x0288
    20e2:	fc 01       	movw	r30, r24
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	e5 57       	subi	r30, 0x75	; 117
    20ee:	fd 4f       	sbci	r31, 0xFD	; 253
    20f0:	20 81       	ld	r18, Z
    20f2:	31 81       	ldd	r19, Z+1	; 0x01
    20f4:	2f 3f       	cpi	r18, 0xFF	; 255
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	09 f4       	brne	.+2      	; 0x20fc <sortCheck+0x174>
    20fa:	5c c1       	rjmp	.+696    	; 0x23b4 <__stack+0x1b5>
    20fc:	fc 01       	movw	r30, r24
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	e5 57       	subi	r30, 0x75	; 117
    2108:	fd 4f       	sbci	r31, 0xFD	; 253
    210a:	22 81       	ldd	r18, Z+2	; 0x02
    210c:	33 81       	ldd	r19, Z+3	; 0x03
    210e:	2f 3f       	cpi	r18, 0xFF	; 255
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	09 f4       	brne	.+2      	; 0x2116 <sortCheck+0x18e>
    2114:	4f c1       	rjmp	.+670    	; 0x23b4 <__stack+0x1b5>
    2116:	9c 01       	movw	r18, r24
    2118:	21 70       	andi	r18, 0x01	; 1
    211a:	30 78       	andi	r19, 0x80	; 128
    211c:	33 23       	and	r19, r19
    211e:	34 f4       	brge	.+12     	; 0x212c <sortCheck+0x1a4>
    2120:	21 50       	subi	r18, 0x01	; 1
    2122:	31 09       	sbc	r19, r1
    2124:	2e 6f       	ori	r18, 0xFE	; 254
    2126:	3f 6f       	ori	r19, 0xFF	; 255
    2128:	2f 5f       	subi	r18, 0xFF	; 255
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	62 2f       	mov	r22, r18
    212e:	73 2f       	mov	r23, r19
    2130:	f9 01       	movw	r30, r18
    2132:	ee 0f       	add	r30, r30
    2134:	ff 1f       	adc	r31, r31
    2136:	ed 57       	subi	r30, 0x7D	; 125
    2138:	fd 4f       	sbci	r31, 0xFD	; 253
    213a:	20 81       	ld	r18, Z
    213c:	31 81       	ldd	r19, Z+1	; 0x01
    213e:	2f 3f       	cpi	r18, 0xFF	; 255
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	09 f0       	breq	.+2      	; 0x2146 <sortCheck+0x1be>
    2144:	37 c1       	rjmp	.+622    	; 0x23b4 <__stack+0x1b5>
			{
				if (arm[arm0] == color[ct])
    2146:	fc 01       	movw	r30, r24
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	e5 56       	subi	r30, 0x65	; 101
    214e:	fd 4f       	sbci	r31, 0xFD	; 253
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	fe 01       	movw	r30, r28
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	e1 55       	subi	r30, 0x51	; 81
    215c:	fd 4f       	sbci	r31, 0xFD	; 253
    215e:	20 81       	ld	r18, Z
    2160:	31 81       	ldd	r19, Z+1	; 0x01
    2162:	28 17       	cp	r18, r24
    2164:	39 07       	cpc	r19, r25
    2166:	19 f4       	brne	.+6      	; 0x216e <sortCheck+0x1e6>
					sortDrop(arm1, ct % 2);
    2168:	c8 01       	movw	r24, r16
    216a:	66 db       	rcall	.-2356   	; 0x1838 <sortDrop>
    216c:	23 c1       	rjmp	.+582    	; 0x23b4 <__stack+0x1b5>
				else if (arm[arm1] == color[ct])
    216e:	f8 01       	movw	r30, r16
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	e1 55       	subi	r30, 0x51	; 81
    2176:	fd 4f       	sbci	r31, 0xFD	; 253
    2178:	20 81       	ld	r18, Z
    217a:	31 81       	ldd	r19, Z+1	; 0x01
    217c:	82 17       	cp	r24, r18
    217e:	93 07       	cpc	r25, r19
    2180:	09 f0       	breq	.+2      	; 0x2184 <sortCheck+0x1fc>
    2182:	18 c1       	rjmp	.+560    	; 0x23b4 <__stack+0x1b5>
					sortDrop(arm0, ct % 2);
    2184:	ce 01       	movw	r24, r28
    2186:	58 db       	rcall	.-2384   	; 0x1838 <sortDrop>
    2188:	15 c1       	rjmp	.+554    	; 0x23b4 <__stack+0x1b5>
			}
		}
		else ct = adj;
    218a:	80 91 ab 02 	lds	r24, 0x02AB
    218e:	90 91 ac 02 	lds	r25, 0x02AC
    2192:	90 93 88 02 	sts	0x0288, r25
    2196:	80 93 87 02 	sts	0x0287, r24
    219a:	0c c1       	rjmp	.+536    	; 0x23b4 <__stack+0x1b5>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    219c:	fe 01       	movw	r30, r28
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	e1 55       	subi	r30, 0x51	; 81
    21a4:	fd 4f       	sbci	r31, 0xFD	; 253
    21a6:	01 90       	ld	r0, Z+
    21a8:	f0 81       	ld	r31, Z
    21aa:	e0 2d       	mov	r30, r0
    21ac:	4e 17       	cp	r20, r30
    21ae:	5f 07       	cpc	r21, r31
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <sortCheck+0x22c>
    21b2:	8f c0       	rjmp	.+286    	; 0x22d2 <__stack+0xd3>
    21b4:	d8 01       	movw	r26, r16
    21b6:	aa 0f       	add	r26, r26
    21b8:	bb 1f       	adc	r27, r27
    21ba:	a1 55       	subi	r26, 0x51	; 81
    21bc:	bd 4f       	sbci	r27, 0xFD	; 253
    21be:	8d 90       	ld	r8, X+
    21c0:	9c 90       	ld	r9, X
    21c2:	48 15       	cp	r20, r8
    21c4:	59 05       	cpc	r21, r9
    21c6:	09 f4       	brne	.+2      	; 0x21ca <sortCheck+0x242>
    21c8:	84 c0       	rjmp	.+264    	; 0x22d2 <__stack+0xd3>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    21ca:	e0 90 02 02 	lds	r14, 0x0202
    21ce:	f0 90 03 02 	lds	r15, 0x0203
    21d2:	e1 14       	cp	r14, r1
    21d4:	f1 04       	cpc	r15, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <sortCheck+0x252>
    21d8:	4e c0       	rjmp	.+156    	; 0x2276 <__stack+0x77>
    21da:	b1 e0       	ldi	r27, 0x01	; 1
    21dc:	eb 16       	cp	r14, r27
    21de:	f1 04       	cpc	r15, r1
    21e0:	29 f4       	brne	.+10     	; 0x21ec <sortCheck+0x264>
    21e2:	2f 3f       	cpi	r18, 0xFF	; 255
    21e4:	6f ef       	ldi	r22, 0xFF	; 255
    21e6:	36 07       	cpc	r19, r22
    21e8:	b1 f5       	brne	.+108    	; 0x2256 <__stack+0x57>
    21ea:	09 c0       	rjmp	.+18     	; 0x21fe <sortCheck+0x276>
    21ec:	67 01       	movw	r12, r14
    21ee:	71 e0       	ldi	r23, 0x01	; 1
    21f0:	c7 1a       	sub	r12, r23
    21f2:	d1 08       	sbc	r13, r1
    21f4:	a2 e0       	ldi	r26, 0x02	; 2
    21f6:	ca 16       	cp	r12, r26
    21f8:	d1 04       	cpc	r13, r1
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <sortCheck+0x276>
    21fc:	65 c0       	rjmp	.+202    	; 0x22c8 <__stack+0xc9>
    21fe:	6c 01       	movw	r12, r24
    2200:	cc 0c       	add	r12, r12
    2202:	dd 1c       	adc	r13, r13
    2204:	cc 0c       	add	r12, r12
    2206:	dd 1c       	adc	r13, r13
    2208:	b6 01       	movw	r22, r12
    220a:	65 57       	subi	r22, 0x75	; 117
    220c:	7d 4f       	sbci	r23, 0xFD	; 253
    220e:	db 01       	movw	r26, r22
    2210:	cd 90       	ld	r12, X+
    2212:	dc 90       	ld	r13, X
    2214:	4c 15       	cp	r20, r12
    2216:	5d 05       	cpc	r21, r13
    2218:	21 f0       	breq	.+8      	; 0x2222 <__stack+0x23>
    221a:	cd 20       	and	r12, r13
    221c:	c0 94       	com	r12
    221e:	09 f0       	breq	.+2      	; 0x2222 <__stack+0x23>
    2220:	53 c0       	rjmp	.+166    	; 0x22c8 <__stack+0xc9>
    2222:	6c 01       	movw	r12, r24
    2224:	cc 0c       	add	r12, r12
    2226:	dd 1c       	adc	r13, r13
    2228:	cc 0c       	add	r12, r12
    222a:	dd 1c       	adc	r13, r13
    222c:	b6 01       	movw	r22, r12
    222e:	65 57       	subi	r22, 0x75	; 117
    2230:	7d 4f       	sbci	r23, 0xFD	; 253
    2232:	db 01       	movw	r26, r22
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	cd 90       	ld	r12, X+
    2238:	dc 90       	ld	r13, X
    223a:	13 97       	sbiw	r26, 0x03	; 3
    223c:	4c 15       	cp	r20, r12
    223e:	5d 05       	cpc	r21, r13
    2240:	21 f0       	breq	.+8      	; 0x224a <__stack+0x4b>
    2242:	cd 20       	and	r12, r13
    2244:	c0 94       	com	r12
    2246:	09 f0       	breq	.+2      	; 0x224a <__stack+0x4b>
    2248:	3f c0       	rjmp	.+126    	; 0x22c8 <__stack+0xc9>
		{
			if (armCount>0)
    224a:	1e 14       	cp	r1, r14
    224c:	1f 04       	cpc	r1, r15
    224e:	9c f4       	brge	.+38     	; 0x2276 <__stack+0x77>
			{
				if(sort[ct % 2] != -1)
    2250:	2f 3f       	cpi	r18, 0xFF	; 255
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	81 f0       	breq	.+32     	; 0x2276 <__stack+0x77>
				{
					 
					if (arm[arm0] == -1)
    2256:	31 96       	adiw	r30, 0x01	; 1
    2258:	31 f4       	brne	.+12     	; 0x2266 <__stack+0x67>
						pickSort(arm0, ct % 2);
    225a:	6b 2d       	mov	r22, r11
    225c:	7a 2d       	mov	r23, r10
    225e:	ce 01       	movw	r24, r28
    2260:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pickSort>
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <__stack+0x77>
					else if (arm[arm1] == -1)
    2266:	89 20       	and	r8, r9
    2268:	80 94       	com	r8
    226a:	29 f4       	brne	.+10     	; 0x2276 <__stack+0x77>
						pickSort(arm1, ct % 2);
    226c:	6b 2d       	mov	r22, r11
    226e:	7a 2d       	mov	r23, r10
    2270:	c8 01       	movw	r24, r16
    2272:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pickSort>
				}
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    2276:	80 91 87 02 	lds	r24, 0x0287
    227a:	90 91 88 02 	lds	r25, 0x0288
    227e:	bc 01       	movw	r22, r24
    2280:	6f 5f       	subi	r22, 0xFF	; 255
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	61 70       	andi	r22, 0x01	; 1
    2286:	70 78       	andi	r23, 0x80	; 128
    2288:	77 23       	and	r23, r23
    228a:	34 f4       	brge	.+12     	; 0x2298 <__stack+0x99>
    228c:	61 50       	subi	r22, 0x01	; 1
    228e:	71 09       	sbc	r23, r1
    2290:	6e 6f       	ori	r22, 0xFE	; 254
    2292:	7f 6f       	ori	r23, 0xFF	; 255
    2294:	6f 5f       	subi	r22, 0xFF	; 255
    2296:	7f 4f       	sbci	r23, 0xFF	; 255
    2298:	6c 5f       	subi	r22, 0xFC	; 252
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	81 70       	andi	r24, 0x01	; 1
    229e:	90 78       	andi	r25, 0x80	; 128
    22a0:	99 23       	and	r25, r25
    22a2:	24 f4       	brge	.+8      	; 0x22ac <__stack+0xad>
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	8e 6f       	ori	r24, 0xFE	; 254
    22a8:	9f 6f       	ori	r25, 0xFF	; 255
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	04 96       	adiw	r24, 0x04	; 4
    22ae:	0e 94 ee 04 	call	0x9dc	; 0x9dc <traverseToSort>
			newSort();
    22b2:	bc dc       	rcall	.-1672   	; 0x1c2c <newSort>
			if (ct == 4 || ct == 5)
    22b4:	80 91 87 02 	lds	r24, 0x0287
    22b8:	90 91 88 02 	lds	r25, 0x0288
    22bc:	04 97       	sbiw	r24, 0x04	; 4
    22be:	02 97       	sbiw	r24, 0x02	; 2
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <__stack+0xc5>
    22c2:	89 c0       	rjmp	.+274    	; 0x23d6 <__stack+0x1d7>
				newSort();
    22c4:	b3 dc       	rcall	.-1690   	; 0x1c2c <newSort>
    22c6:	87 c0       	rjmp	.+270    	; 0x23d6 <__stack+0x1d7>
			return;
		}
		else ct = adj;
    22c8:	90 93 88 02 	sts	0x0288, r25
    22cc:	80 93 87 02 	sts	0x0287, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    22d0:	71 c0       	rjmp	.+226    	; 0x23b4 <__stack+0x1b5>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    22d2:	a0 91 02 02 	lds	r26, 0x0202
    22d6:	b0 91 03 02 	lds	r27, 0x0203
    22da:	10 97       	sbiw	r26, 0x00	; 0
    22dc:	c1 f5       	brne	.+112    	; 0x234e <__stack+0x14f>
    22de:	dc 01       	movw	r26, r24
    22e0:	aa 0f       	add	r26, r26
    22e2:	bb 1f       	adc	r27, r27
    22e4:	ac 59       	subi	r26, 0x9C	; 156
    22e6:	bd 4f       	sbci	r27, 0xFD	; 253
    22e8:	0d 90       	ld	r0, X+
    22ea:	bc 91       	ld	r27, X
    22ec:	a0 2d       	mov	r26, r0
    22ee:	a1 30       	cpi	r26, 0x01	; 1
    22f0:	b1 05       	cpc	r27, r1
    22f2:	d9 f4       	brne	.+54     	; 0x232a <__stack+0x12b>
    22f4:	dc 01       	movw	r26, r24
    22f6:	aa 0f       	add	r26, r26
    22f8:	bb 1f       	adc	r27, r27
    22fa:	aa 0f       	add	r26, r26
    22fc:	bb 1f       	adc	r27, r27
    22fe:	a5 57       	subi	r26, 0x75	; 117
    2300:	bd 4f       	sbci	r27, 0xFD	; 253
    2302:	0d 90       	ld	r0, X+
    2304:	bc 91       	ld	r27, X
    2306:	a0 2d       	mov	r26, r0
    2308:	11 96       	adiw	r26, 0x01	; 1
    230a:	09 f4       	brne	.+2      	; 0x230e <__stack+0x10f>
    230c:	4b c0       	rjmp	.+150    	; 0x23a4 <__stack+0x1a5>
    230e:	dc 01       	movw	r26, r24
    2310:	aa 0f       	add	r26, r26
    2312:	bb 1f       	adc	r27, r27
    2314:	aa 0f       	add	r26, r26
    2316:	bb 1f       	adc	r27, r27
    2318:	a5 57       	subi	r26, 0x75	; 117
    231a:	bd 4f       	sbci	r27, 0xFD	; 253
    231c:	12 96       	adiw	r26, 0x02	; 2
    231e:	8d 91       	ld	r24, X+
    2320:	9c 91       	ld	r25, X
    2322:	13 97       	sbiw	r26, 0x03	; 3
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	19 f4       	brne	.+6      	; 0x232e <__stack+0x12f>
    2328:	3d c0       	rjmp	.+122    	; 0x23a4 <__stack+0x1a5>
    232a:	ab 2b       	or	r26, r27
    232c:	d9 f5       	brne	.+118    	; 0x23a4 <__stack+0x1a5>
    232e:	2f 3f       	cpi	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
    2332:	c1 f5       	brne	.+112    	; 0x23a4 <__stack+0x1a5>
			if (arm[arm0] == color[adj])
    2334:	4e 17       	cp	r20, r30
    2336:	5f 07       	cpc	r21, r31
    2338:	29 f4       	brne	.+10     	; 0x2344 <__stack+0x145>
				sortDrop(arm1, ct % 2);
    233a:	6b 2d       	mov	r22, r11
    233c:	7a 2d       	mov	r23, r10
    233e:	c8 01       	movw	r24, r16
    2340:	7b da       	rcall	.-2826   	; 0x1838 <sortDrop>
    2342:	30 c0       	rjmp	.+96     	; 0x23a4 <__stack+0x1a5>
			else sortDrop(arm0, ct % 2);
    2344:	6b 2d       	mov	r22, r11
    2346:	7a 2d       	mov	r23, r10
    2348:	ce 01       	movw	r24, r28
    234a:	76 da       	rcall	.-2836   	; 0x1838 <sortDrop>
    234c:	2b c0       	rjmp	.+86     	; 0x23a4 <__stack+0x1a5>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    234e:	11 97       	sbiw	r26, 0x01	; 1
    2350:	49 f5       	brne	.+82     	; 0x23a4 <__stack+0x1a5>
    2352:	dc 01       	movw	r26, r24
    2354:	aa 0f       	add	r26, r26
    2356:	bb 1f       	adc	r27, r27
    2358:	aa 0f       	add	r26, r26
    235a:	bb 1f       	adc	r27, r27
    235c:	a5 57       	subi	r26, 0x75	; 117
    235e:	bd 4f       	sbci	r27, 0xFD	; 253
    2360:	4d 91       	ld	r20, X+
    2362:	5c 91       	ld	r21, X
    2364:	4f 3f       	cpi	r20, 0xFF	; 255
    2366:	5f 4f       	sbci	r21, 0xFF	; 255
    2368:	69 f0       	breq	.+26     	; 0x2384 <__stack+0x185>
    236a:	dc 01       	movw	r26, r24
    236c:	aa 0f       	add	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	aa 0f       	add	r26, r26
    2372:	bb 1f       	adc	r27, r27
    2374:	a5 57       	subi	r26, 0x75	; 117
    2376:	bd 4f       	sbci	r27, 0xFD	; 253
    2378:	12 96       	adiw	r26, 0x02	; 2
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	13 97       	sbiw	r26, 0x03	; 3
    2380:	01 96       	adiw	r24, 0x01	; 1
    2382:	81 f4       	brne	.+32     	; 0x23a4 <__stack+0x1a5>
    2384:	2f 3f       	cpi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	69 f0       	breq	.+26     	; 0x23a4 <__stack+0x1a5>
			if (arm[arm0] == -1)
    238a:	31 96       	adiw	r30, 0x01	; 1
    238c:	31 f4       	brne	.+12     	; 0x239a <__stack+0x19b>
				pickSort(arm0, ct % 2);
    238e:	6b 2d       	mov	r22, r11
    2390:	7a 2d       	mov	r23, r10
    2392:	ce 01       	movw	r24, r28
    2394:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pickSort>
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <__stack+0x1a5>
			else	pickSort(arm1, ct % 2);
    239a:	6b 2d       	mov	r22, r11
    239c:	7a 2d       	mov	r23, r10
    239e:	c8 01       	movw	r24, r16
    23a0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pickSort>
			ct = adj;
    23a4:	80 91 ab 02 	lds	r24, 0x02AB
    23a8:	90 91 ac 02 	lds	r25, 0x02AC
    23ac:	90 93 88 02 	sts	0x0288, r25
    23b0:	80 93 87 02 	sts	0x0287, r24
	arm[0] = arm[1] = -1;
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    23b4:	80 91 87 02 	lds	r24, 0x0287
    23b8:	90 91 88 02 	lds	r25, 0x0288
    23bc:	02 96       	adiw	r24, 0x02	; 2
    23be:	83 70       	andi	r24, 0x03	; 3
    23c0:	90 78       	andi	r25, 0x80	; 128
    23c2:	99 23       	and	r25, r25
    23c4:	24 f4       	brge	.+8      	; 0x23ce <__stack+0x1cf>
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	8c 6f       	ori	r24, 0xFC	; 252
    23ca:	9f 6f       	ori	r25, 0xFF	; 255
    23cc:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    23ce:	90 93 ac 02 	sts	0x02AC, r25
    23d2:	80 93 ab 02 	sts	0x02AB, r24
}
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	bf 90       	pop	r11
    23e8:	af 90       	pop	r10
    23ea:	9f 90       	pop	r9
    23ec:	8f 90       	pop	r8
    23ee:	08 95       	ret

000023f0 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    23f0:	80 91 8b 02 	lds	r24, 0x028B
    23f4:	90 91 8c 02 	lds	r25, 0x028C
    23f8:	20 91 9b 02 	lds	r18, 0x029B
    23fc:	30 91 9c 02 	lds	r19, 0x029C
    2400:	82 17       	cp	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	09 f0       	breq	.+2      	; 0x2408 <predict+0x18>
    2406:	5f c0       	rjmp	.+190    	; 0x24c6 <predict+0xd6>
    2408:	20 91 8d 02 	lds	r18, 0x028D
    240c:	30 91 8e 02 	lds	r19, 0x028E
    2410:	82 17       	cp	r24, r18
    2412:	93 07       	cpc	r25, r19
    2414:	09 f0       	breq	.+2      	; 0x2418 <predict+0x28>
    2416:	57 c0       	rjmp	.+174    	; 0x24c6 <predict+0xd6>
    2418:	80 91 8f 02 	lds	r24, 0x028F
    241c:	90 91 90 02 	lds	r25, 0x0290
    2420:	20 91 9d 02 	lds	r18, 0x029D
    2424:	30 91 9e 02 	lds	r19, 0x029E
    2428:	82 17       	cp	r24, r18
    242a:	93 07       	cpc	r25, r19
    242c:	09 f0       	breq	.+2      	; 0x2430 <predict+0x40>
    242e:	4b c0       	rjmp	.+150    	; 0x24c6 <predict+0xd6>
    2430:	20 91 91 02 	lds	r18, 0x0291
    2434:	30 91 92 02 	lds	r19, 0x0292
    2438:	82 17       	cp	r24, r18
    243a:	93 07       	cpc	r25, r19
    243c:	09 f0       	breq	.+2      	; 0x2440 <predict+0x50>
    243e:	43 c0       	rjmp	.+134    	; 0x24c6 <predict+0xd6>
    2440:	80 91 87 02 	lds	r24, 0x0287
    2444:	90 91 88 02 	lds	r25, 0x0288
    2448:	fc 01       	movw	r30, r24
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	e5 57       	subi	r30, 0x75	; 117
    2454:	fd 4f       	sbci	r31, 0xFD	; 253
    2456:	20 81       	ld	r18, Z
    2458:	31 81       	ldd	r19, Z+1	; 0x01
    245a:	fc 01       	movw	r30, r24
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	e5 56       	subi	r30, 0x65	; 101
    2462:	fd 4f       	sbci	r31, 0xFD	; 253
    2464:	40 81       	ld	r20, Z
    2466:	51 81       	ldd	r21, Z+1	; 0x01
    2468:	24 17       	cp	r18, r20
    246a:	35 07       	cpc	r19, r21
    246c:	61 f5       	brne	.+88     	; 0x24c6 <predict+0xd6>
    246e:	fc 01       	movw	r30, r24
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	ee 0f       	add	r30, r30
    2476:	ff 1f       	adc	r31, r31
    2478:	e5 57       	subi	r30, 0x75	; 117
    247a:	fd 4f       	sbci	r31, 0xFD	; 253
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	28 17       	cp	r18, r24
    2482:	39 07       	cpc	r19, r25
    2484:	01 f5       	brne	.+64     	; 0x24c6 <predict+0xd6>
    2486:	80 91 83 02 	lds	r24, 0x0283
    248a:	90 91 84 02 	lds	r25, 0x0284
    248e:	01 96       	adiw	r24, 0x01	; 1
    2490:	d1 f4       	brne	.+52     	; 0x24c6 <predict+0xd6>
    2492:	80 91 85 02 	lds	r24, 0x0285
    2496:	90 91 86 02 	lds	r25, 0x0286
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	a1 f4       	brne	.+40     	; 0x24c6 <predict+0xd6>
    249e:	80 91 af 02 	lds	r24, 0x02AF
    24a2:	90 91 b0 02 	lds	r25, 0x02B0
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	71 f4       	brne	.+28     	; 0x24c6 <predict+0xd6>
    24aa:	80 91 b1 02 	lds	r24, 0x02B1
    24ae:	90 91 b2 02 	lds	r25, 0x02B2
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	41 f4       	brne	.+16     	; 0x24c6 <predict+0xd6>
		sorted = total;
    24b6:	80 91 00 02 	lds	r24, 0x0200
    24ba:	90 91 01 02 	lds	r25, 0x0201
    24be:	90 93 5f 02 	sts	0x025F, r25
    24c2:	80 93 5e 02 	sts	0x025E, r24
    24c6:	08 95       	ret

000024c8 <main>:

}
int main()
{
	int i;
	init_devices();
    24c8:	0e 94 3c 02 	call	0x478	; 0x478 <init_devices>
	lcd_set_4bit();
    24cc:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    24d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    24d4:	0e 94 67 02 	call	0x4ce	; 0x4ce <color_sensor_scaling>
	threshold=5000;
    24d8:	88 e8       	ldi	r24, 0x88	; 136
    24da:	93 e1       	ldi	r25, 0x13	; 19
    24dc:	90 93 6d 02 	sts	0x026D, r25
    24e0:	80 93 6c 02 	sts	0x026C, r24
	setIndicatorAndColor();
    24e4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <setIndicatorAndColor>
	ct = 0; adj = 2;
    24e8:	10 92 88 02 	sts	0x0288, r1
    24ec:	10 92 87 02 	sts	0x0287, r1
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	90 93 ac 02 	sts	0x02AC, r25
    24f8:	80 93 ab 02 	sts	0x02AB, r24
	lcd("Begin");
    24fc:	8d e4       	ldi	r24, 0x4D	; 77
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd>
	while (sorted<total)
    2504:	20 91 5e 02 	lds	r18, 0x025E
    2508:	30 91 5f 02 	lds	r19, 0x025F
    250c:	80 91 00 02 	lds	r24, 0x0200
    2510:	90 91 01 02 	lds	r25, 0x0201
    2514:	28 17       	cp	r18, r24
    2516:	39 07       	cpc	r19, r25
    2518:	a4 f5       	brge	.+104    	; 0x2582 <main+0xba>
	{
		canDrop();
    251a:	23 da       	rcall	.-3002   	; 0x1962 <canDrop>
		if (visitedCount == 3)
    251c:	80 91 5c 02 	lds	r24, 0x025C
    2520:	90 91 5d 02 	lds	r25, 0x025D
    2524:	03 97       	sbiw	r24, 0x03	; 3
    2526:	09 f4       	brne	.+2      	; 0x252a <main+0x62>
			predict();
    2528:	63 df       	rcall	.-314    	; 0x23f0 <predict>
		if (sorted == total)
    252a:	20 91 5e 02 	lds	r18, 0x025E
    252e:	30 91 5f 02 	lds	r19, 0x025F
    2532:	80 91 00 02 	lds	r24, 0x0200
    2536:	90 91 01 02 	lds	r25, 0x0201
    253a:	28 17       	cp	r18, r24
    253c:	39 07       	cpc	r19, r25
    253e:	09 f1       	breq	.+66     	; 0x2582 <main+0xba>
			break;
		pickup();
    2540:	0e 94 a8 08 	call	0x1150	; 0x1150 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2544:	80 91 87 02 	lds	r24, 0x0287
    2548:	90 91 88 02 	lds	r25, 0x0288
    254c:	bc 01       	movw	r22, r24
    254e:	61 70       	andi	r22, 0x01	; 1
    2550:	70 78       	andi	r23, 0x80	; 128
    2552:	77 23       	and	r23, r23
    2554:	34 f4       	brge	.+12     	; 0x2562 <main+0x9a>
    2556:	61 50       	subi	r22, 0x01	; 1
    2558:	71 09       	sbc	r23, r1
    255a:	6e 6f       	ori	r22, 0xFE	; 254
    255c:	7f 6f       	ori	r23, 0xFF	; 255
    255e:	6f 5f       	subi	r22, 0xFF	; 255
    2560:	7f 4f       	sbci	r23, 0xFF	; 255
    2562:	6c 5f       	subi	r22, 0xFC	; 252
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	0e 94 ee 04 	call	0x9dc	; 0x9dc <traverseToSort>
		sortCheck();
    256a:	0e dd       	rcall	.-1508   	; 0x1f88 <sortCheck>
	color_sensor_scaling();
	threshold=5000;
	setIndicatorAndColor();
	ct = 0; adj = 2;
	lcd("Begin");
	while (sorted<total)
    256c:	20 91 5e 02 	lds	r18, 0x025E
    2570:	30 91 5f 02 	lds	r19, 0x025F
    2574:	80 91 00 02 	lds	r24, 0x0200
    2578:	90 91 01 02 	lds	r25, 0x0201
    257c:	28 17       	cp	r18, r24
    257e:	39 07       	cpc	r19, r25
    2580:	64 f2       	brlt	.-104    	; 0x251a <main+0x52>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	08 95       	ret

00002588 <__subsf3>:
    2588:	50 58       	subi	r21, 0x80	; 128

0000258a <__addsf3>:
    258a:	bb 27       	eor	r27, r27
    258c:	aa 27       	eor	r26, r26
    258e:	0e d0       	rcall	.+28     	; 0x25ac <__addsf3x>
    2590:	48 c1       	rjmp	.+656    	; 0x2822 <__fp_round>
    2592:	39 d1       	rcall	.+626    	; 0x2806 <__fp_pscA>
    2594:	30 f0       	brcs	.+12     	; 0x25a2 <__addsf3+0x18>
    2596:	3e d1       	rcall	.+636    	; 0x2814 <__fp_pscB>
    2598:	20 f0       	brcs	.+8      	; 0x25a2 <__addsf3+0x18>
    259a:	31 f4       	brne	.+12     	; 0x25a8 <__addsf3+0x1e>
    259c:	9f 3f       	cpi	r25, 0xFF	; 255
    259e:	11 f4       	brne	.+4      	; 0x25a4 <__addsf3+0x1a>
    25a0:	1e f4       	brtc	.+6      	; 0x25a8 <__addsf3+0x1e>
    25a2:	2e c1       	rjmp	.+604    	; 0x2800 <__fp_nan>
    25a4:	0e f4       	brtc	.+2      	; 0x25a8 <__addsf3+0x1e>
    25a6:	e0 95       	com	r30
    25a8:	e7 fb       	bst	r30, 7
    25aa:	24 c1       	rjmp	.+584    	; 0x27f4 <__fp_inf>

000025ac <__addsf3x>:
    25ac:	e9 2f       	mov	r30, r25
    25ae:	4a d1       	rcall	.+660    	; 0x2844 <__fp_split3>
    25b0:	80 f3       	brcs	.-32     	; 0x2592 <__addsf3+0x8>
    25b2:	ba 17       	cp	r27, r26
    25b4:	62 07       	cpc	r22, r18
    25b6:	73 07       	cpc	r23, r19
    25b8:	84 07       	cpc	r24, r20
    25ba:	95 07       	cpc	r25, r21
    25bc:	18 f0       	brcs	.+6      	; 0x25c4 <__addsf3x+0x18>
    25be:	71 f4       	brne	.+28     	; 0x25dc <__addsf3x+0x30>
    25c0:	9e f5       	brtc	.+102    	; 0x2628 <__addsf3x+0x7c>
    25c2:	62 c1       	rjmp	.+708    	; 0x2888 <__fp_zero>
    25c4:	0e f4       	brtc	.+2      	; 0x25c8 <__addsf3x+0x1c>
    25c6:	e0 95       	com	r30
    25c8:	0b 2e       	mov	r0, r27
    25ca:	ba 2f       	mov	r27, r26
    25cc:	a0 2d       	mov	r26, r0
    25ce:	0b 01       	movw	r0, r22
    25d0:	b9 01       	movw	r22, r18
    25d2:	90 01       	movw	r18, r0
    25d4:	0c 01       	movw	r0, r24
    25d6:	ca 01       	movw	r24, r20
    25d8:	a0 01       	movw	r20, r0
    25da:	11 24       	eor	r1, r1
    25dc:	ff 27       	eor	r31, r31
    25de:	59 1b       	sub	r21, r25
    25e0:	99 f0       	breq	.+38     	; 0x2608 <__addsf3x+0x5c>
    25e2:	59 3f       	cpi	r21, 0xF9	; 249
    25e4:	50 f4       	brcc	.+20     	; 0x25fa <__addsf3x+0x4e>
    25e6:	50 3e       	cpi	r21, 0xE0	; 224
    25e8:	68 f1       	brcs	.+90     	; 0x2644 <__addsf3x+0x98>
    25ea:	1a 16       	cp	r1, r26
    25ec:	f0 40       	sbci	r31, 0x00	; 0
    25ee:	a2 2f       	mov	r26, r18
    25f0:	23 2f       	mov	r18, r19
    25f2:	34 2f       	mov	r19, r20
    25f4:	44 27       	eor	r20, r20
    25f6:	58 5f       	subi	r21, 0xF8	; 248
    25f8:	f3 cf       	rjmp	.-26     	; 0x25e0 <__addsf3x+0x34>
    25fa:	46 95       	lsr	r20
    25fc:	37 95       	ror	r19
    25fe:	27 95       	ror	r18
    2600:	a7 95       	ror	r26
    2602:	f0 40       	sbci	r31, 0x00	; 0
    2604:	53 95       	inc	r21
    2606:	c9 f7       	brne	.-14     	; 0x25fa <__addsf3x+0x4e>
    2608:	7e f4       	brtc	.+30     	; 0x2628 <__addsf3x+0x7c>
    260a:	1f 16       	cp	r1, r31
    260c:	ba 0b       	sbc	r27, r26
    260e:	62 0b       	sbc	r22, r18
    2610:	73 0b       	sbc	r23, r19
    2612:	84 0b       	sbc	r24, r20
    2614:	ba f0       	brmi	.+46     	; 0x2644 <__addsf3x+0x98>
    2616:	91 50       	subi	r25, 0x01	; 1
    2618:	a1 f0       	breq	.+40     	; 0x2642 <__addsf3x+0x96>
    261a:	ff 0f       	add	r31, r31
    261c:	bb 1f       	adc	r27, r27
    261e:	66 1f       	adc	r22, r22
    2620:	77 1f       	adc	r23, r23
    2622:	88 1f       	adc	r24, r24
    2624:	c2 f7       	brpl	.-16     	; 0x2616 <__addsf3x+0x6a>
    2626:	0e c0       	rjmp	.+28     	; 0x2644 <__addsf3x+0x98>
    2628:	ba 0f       	add	r27, r26
    262a:	62 1f       	adc	r22, r18
    262c:	73 1f       	adc	r23, r19
    262e:	84 1f       	adc	r24, r20
    2630:	48 f4       	brcc	.+18     	; 0x2644 <__addsf3x+0x98>
    2632:	87 95       	ror	r24
    2634:	77 95       	ror	r23
    2636:	67 95       	ror	r22
    2638:	b7 95       	ror	r27
    263a:	f7 95       	ror	r31
    263c:	9e 3f       	cpi	r25, 0xFE	; 254
    263e:	08 f0       	brcs	.+2      	; 0x2642 <__addsf3x+0x96>
    2640:	b3 cf       	rjmp	.-154    	; 0x25a8 <__addsf3+0x1e>
    2642:	93 95       	inc	r25
    2644:	88 0f       	add	r24, r24
    2646:	08 f0       	brcs	.+2      	; 0x264a <__addsf3x+0x9e>
    2648:	99 27       	eor	r25, r25
    264a:	ee 0f       	add	r30, r30
    264c:	97 95       	ror	r25
    264e:	87 95       	ror	r24
    2650:	08 95       	ret

00002652 <__divsf3>:
    2652:	0c d0       	rcall	.+24     	; 0x266c <__divsf3x>
    2654:	e6 c0       	rjmp	.+460    	; 0x2822 <__fp_round>
    2656:	de d0       	rcall	.+444    	; 0x2814 <__fp_pscB>
    2658:	40 f0       	brcs	.+16     	; 0x266a <__divsf3+0x18>
    265a:	d5 d0       	rcall	.+426    	; 0x2806 <__fp_pscA>
    265c:	30 f0       	brcs	.+12     	; 0x266a <__divsf3+0x18>
    265e:	21 f4       	brne	.+8      	; 0x2668 <__divsf3+0x16>
    2660:	5f 3f       	cpi	r21, 0xFF	; 255
    2662:	19 f0       	breq	.+6      	; 0x266a <__divsf3+0x18>
    2664:	c7 c0       	rjmp	.+398    	; 0x27f4 <__fp_inf>
    2666:	51 11       	cpse	r21, r1
    2668:	10 c1       	rjmp	.+544    	; 0x288a <__fp_szero>
    266a:	ca c0       	rjmp	.+404    	; 0x2800 <__fp_nan>

0000266c <__divsf3x>:
    266c:	eb d0       	rcall	.+470    	; 0x2844 <__fp_split3>
    266e:	98 f3       	brcs	.-26     	; 0x2656 <__divsf3+0x4>

00002670 <__divsf3_pse>:
    2670:	99 23       	and	r25, r25
    2672:	c9 f3       	breq	.-14     	; 0x2666 <__divsf3+0x14>
    2674:	55 23       	and	r21, r21
    2676:	b1 f3       	breq	.-20     	; 0x2664 <__divsf3+0x12>
    2678:	95 1b       	sub	r25, r21
    267a:	55 0b       	sbc	r21, r21
    267c:	bb 27       	eor	r27, r27
    267e:	aa 27       	eor	r26, r26
    2680:	62 17       	cp	r22, r18
    2682:	73 07       	cpc	r23, r19
    2684:	84 07       	cpc	r24, r20
    2686:	38 f0       	brcs	.+14     	; 0x2696 <__divsf3_pse+0x26>
    2688:	9f 5f       	subi	r25, 0xFF	; 255
    268a:	5f 4f       	sbci	r21, 0xFF	; 255
    268c:	22 0f       	add	r18, r18
    268e:	33 1f       	adc	r19, r19
    2690:	44 1f       	adc	r20, r20
    2692:	aa 1f       	adc	r26, r26
    2694:	a9 f3       	breq	.-22     	; 0x2680 <__divsf3_pse+0x10>
    2696:	33 d0       	rcall	.+102    	; 0x26fe <__divsf3_pse+0x8e>
    2698:	0e 2e       	mov	r0, r30
    269a:	3a f0       	brmi	.+14     	; 0x26aa <__divsf3_pse+0x3a>
    269c:	e0 e8       	ldi	r30, 0x80	; 128
    269e:	30 d0       	rcall	.+96     	; 0x2700 <__divsf3_pse+0x90>
    26a0:	91 50       	subi	r25, 0x01	; 1
    26a2:	50 40       	sbci	r21, 0x00	; 0
    26a4:	e6 95       	lsr	r30
    26a6:	00 1c       	adc	r0, r0
    26a8:	ca f7       	brpl	.-14     	; 0x269c <__divsf3_pse+0x2c>
    26aa:	29 d0       	rcall	.+82     	; 0x26fe <__divsf3_pse+0x8e>
    26ac:	fe 2f       	mov	r31, r30
    26ae:	27 d0       	rcall	.+78     	; 0x26fe <__divsf3_pse+0x8e>
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	88 1f       	adc	r24, r24
    26b6:	bb 1f       	adc	r27, r27
    26b8:	26 17       	cp	r18, r22
    26ba:	37 07       	cpc	r19, r23
    26bc:	48 07       	cpc	r20, r24
    26be:	ab 07       	cpc	r26, r27
    26c0:	b0 e8       	ldi	r27, 0x80	; 128
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <__divsf3_pse+0x56>
    26c4:	bb 0b       	sbc	r27, r27
    26c6:	80 2d       	mov	r24, r0
    26c8:	bf 01       	movw	r22, r30
    26ca:	ff 27       	eor	r31, r31
    26cc:	93 58       	subi	r25, 0x83	; 131
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	2a f0       	brmi	.+10     	; 0x26dc <__divsf3_pse+0x6c>
    26d2:	9e 3f       	cpi	r25, 0xFE	; 254
    26d4:	51 05       	cpc	r21, r1
    26d6:	68 f0       	brcs	.+26     	; 0x26f2 <__divsf3_pse+0x82>
    26d8:	8d c0       	rjmp	.+282    	; 0x27f4 <__fp_inf>
    26da:	d7 c0       	rjmp	.+430    	; 0x288a <__fp_szero>
    26dc:	5f 3f       	cpi	r21, 0xFF	; 255
    26de:	ec f3       	brlt	.-6      	; 0x26da <__divsf3_pse+0x6a>
    26e0:	98 3e       	cpi	r25, 0xE8	; 232
    26e2:	dc f3       	brlt	.-10     	; 0x26da <__divsf3_pse+0x6a>
    26e4:	86 95       	lsr	r24
    26e6:	77 95       	ror	r23
    26e8:	67 95       	ror	r22
    26ea:	b7 95       	ror	r27
    26ec:	f7 95       	ror	r31
    26ee:	9f 5f       	subi	r25, 0xFF	; 255
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <__divsf3_pse+0x74>
    26f2:	88 0f       	add	r24, r24
    26f4:	91 1d       	adc	r25, r1
    26f6:	96 95       	lsr	r25
    26f8:	87 95       	ror	r24
    26fa:	97 f9       	bld	r25, 7
    26fc:	08 95       	ret
    26fe:	e1 e0       	ldi	r30, 0x01	; 1
    2700:	66 0f       	add	r22, r22
    2702:	77 1f       	adc	r23, r23
    2704:	88 1f       	adc	r24, r24
    2706:	bb 1f       	adc	r27, r27
    2708:	62 17       	cp	r22, r18
    270a:	73 07       	cpc	r23, r19
    270c:	84 07       	cpc	r24, r20
    270e:	ba 07       	cpc	r27, r26
    2710:	20 f0       	brcs	.+8      	; 0x271a <__divsf3_pse+0xaa>
    2712:	62 1b       	sub	r22, r18
    2714:	73 0b       	sbc	r23, r19
    2716:	84 0b       	sbc	r24, r20
    2718:	ba 0b       	sbc	r27, r26
    271a:	ee 1f       	adc	r30, r30
    271c:	88 f7       	brcc	.-30     	; 0x2700 <__divsf3_pse+0x90>
    271e:	e0 95       	com	r30
    2720:	08 95       	ret

00002722 <__fixunssfsi>:
    2722:	98 d0       	rcall	.+304    	; 0x2854 <__fp_splitA>
    2724:	88 f0       	brcs	.+34     	; 0x2748 <__fixunssfsi+0x26>
    2726:	9f 57       	subi	r25, 0x7F	; 127
    2728:	90 f0       	brcs	.+36     	; 0x274e <__fixunssfsi+0x2c>
    272a:	b9 2f       	mov	r27, r25
    272c:	99 27       	eor	r25, r25
    272e:	b7 51       	subi	r27, 0x17	; 23
    2730:	a0 f0       	brcs	.+40     	; 0x275a <__fixunssfsi+0x38>
    2732:	d1 f0       	breq	.+52     	; 0x2768 <__fixunssfsi+0x46>
    2734:	66 0f       	add	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	1a f0       	brmi	.+6      	; 0x2744 <__fixunssfsi+0x22>
    273e:	ba 95       	dec	r27
    2740:	c9 f7       	brne	.-14     	; 0x2734 <__fixunssfsi+0x12>
    2742:	12 c0       	rjmp	.+36     	; 0x2768 <__fixunssfsi+0x46>
    2744:	b1 30       	cpi	r27, 0x01	; 1
    2746:	81 f0       	breq	.+32     	; 0x2768 <__fixunssfsi+0x46>
    2748:	9f d0       	rcall	.+318    	; 0x2888 <__fp_zero>
    274a:	b1 e0       	ldi	r27, 0x01	; 1
    274c:	08 95       	ret
    274e:	9c c0       	rjmp	.+312    	; 0x2888 <__fp_zero>
    2750:	67 2f       	mov	r22, r23
    2752:	78 2f       	mov	r23, r24
    2754:	88 27       	eor	r24, r24
    2756:	b8 5f       	subi	r27, 0xF8	; 248
    2758:	39 f0       	breq	.+14     	; 0x2768 <__fixunssfsi+0x46>
    275a:	b9 3f       	cpi	r27, 0xF9	; 249
    275c:	cc f3       	brlt	.-14     	; 0x2750 <__fixunssfsi+0x2e>
    275e:	86 95       	lsr	r24
    2760:	77 95       	ror	r23
    2762:	67 95       	ror	r22
    2764:	b3 95       	inc	r27
    2766:	d9 f7       	brne	.-10     	; 0x275e <__fixunssfsi+0x3c>
    2768:	3e f4       	brtc	.+14     	; 0x2778 <__fixunssfsi+0x56>
    276a:	90 95       	com	r25
    276c:	80 95       	com	r24
    276e:	70 95       	com	r23
    2770:	61 95       	neg	r22
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	8f 4f       	sbci	r24, 0xFF	; 255
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	08 95       	ret

0000277a <__floatunsisf>:
    277a:	e8 94       	clt
    277c:	09 c0       	rjmp	.+18     	; 0x2790 <__floatsisf+0x12>

0000277e <__floatsisf>:
    277e:	97 fb       	bst	r25, 7
    2780:	3e f4       	brtc	.+14     	; 0x2790 <__floatsisf+0x12>
    2782:	90 95       	com	r25
    2784:	80 95       	com	r24
    2786:	70 95       	com	r23
    2788:	61 95       	neg	r22
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	8f 4f       	sbci	r24, 0xFF	; 255
    278e:	9f 4f       	sbci	r25, 0xFF	; 255
    2790:	99 23       	and	r25, r25
    2792:	a9 f0       	breq	.+42     	; 0x27be <__floatsisf+0x40>
    2794:	f9 2f       	mov	r31, r25
    2796:	96 e9       	ldi	r25, 0x96	; 150
    2798:	bb 27       	eor	r27, r27
    279a:	93 95       	inc	r25
    279c:	f6 95       	lsr	r31
    279e:	87 95       	ror	r24
    27a0:	77 95       	ror	r23
    27a2:	67 95       	ror	r22
    27a4:	b7 95       	ror	r27
    27a6:	f1 11       	cpse	r31, r1
    27a8:	f8 cf       	rjmp	.-16     	; 0x279a <__floatsisf+0x1c>
    27aa:	fa f4       	brpl	.+62     	; 0x27ea <__floatsisf+0x6c>
    27ac:	bb 0f       	add	r27, r27
    27ae:	11 f4       	brne	.+4      	; 0x27b4 <__floatsisf+0x36>
    27b0:	60 ff       	sbrs	r22, 0
    27b2:	1b c0       	rjmp	.+54     	; 0x27ea <__floatsisf+0x6c>
    27b4:	6f 5f       	subi	r22, 0xFF	; 255
    27b6:	7f 4f       	sbci	r23, 0xFF	; 255
    27b8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	16 c0       	rjmp	.+44     	; 0x27ea <__floatsisf+0x6c>
    27be:	88 23       	and	r24, r24
    27c0:	11 f0       	breq	.+4      	; 0x27c6 <__floatsisf+0x48>
    27c2:	96 e9       	ldi	r25, 0x96	; 150
    27c4:	11 c0       	rjmp	.+34     	; 0x27e8 <__floatsisf+0x6a>
    27c6:	77 23       	and	r23, r23
    27c8:	21 f0       	breq	.+8      	; 0x27d2 <__floatsisf+0x54>
    27ca:	9e e8       	ldi	r25, 0x8E	; 142
    27cc:	87 2f       	mov	r24, r23
    27ce:	76 2f       	mov	r23, r22
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <__floatsisf+0x5e>
    27d2:	66 23       	and	r22, r22
    27d4:	71 f0       	breq	.+28     	; 0x27f2 <__floatsisf+0x74>
    27d6:	96 e8       	ldi	r25, 0x86	; 134
    27d8:	86 2f       	mov	r24, r22
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	2a f0       	brmi	.+10     	; 0x27ea <__floatsisf+0x6c>
    27e0:	9a 95       	dec	r25
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	da f7       	brpl	.-10     	; 0x27e0 <__floatsisf+0x62>
    27ea:	88 0f       	add	r24, r24
    27ec:	96 95       	lsr	r25
    27ee:	87 95       	ror	r24
    27f0:	97 f9       	bld	r25, 7
    27f2:	08 95       	ret

000027f4 <__fp_inf>:
    27f4:	97 f9       	bld	r25, 7
    27f6:	9f 67       	ori	r25, 0x7F	; 127
    27f8:	80 e8       	ldi	r24, 0x80	; 128
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	08 95       	ret

00002800 <__fp_nan>:
    2800:	9f ef       	ldi	r25, 0xFF	; 255
    2802:	80 ec       	ldi	r24, 0xC0	; 192
    2804:	08 95       	ret

00002806 <__fp_pscA>:
    2806:	00 24       	eor	r0, r0
    2808:	0a 94       	dec	r0
    280a:	16 16       	cp	r1, r22
    280c:	17 06       	cpc	r1, r23
    280e:	18 06       	cpc	r1, r24
    2810:	09 06       	cpc	r0, r25
    2812:	08 95       	ret

00002814 <__fp_pscB>:
    2814:	00 24       	eor	r0, r0
    2816:	0a 94       	dec	r0
    2818:	12 16       	cp	r1, r18
    281a:	13 06       	cpc	r1, r19
    281c:	14 06       	cpc	r1, r20
    281e:	05 06       	cpc	r0, r21
    2820:	08 95       	ret

00002822 <__fp_round>:
    2822:	09 2e       	mov	r0, r25
    2824:	03 94       	inc	r0
    2826:	00 0c       	add	r0, r0
    2828:	11 f4       	brne	.+4      	; 0x282e <__fp_round+0xc>
    282a:	88 23       	and	r24, r24
    282c:	52 f0       	brmi	.+20     	; 0x2842 <__fp_round+0x20>
    282e:	bb 0f       	add	r27, r27
    2830:	40 f4       	brcc	.+16     	; 0x2842 <__fp_round+0x20>
    2832:	bf 2b       	or	r27, r31
    2834:	11 f4       	brne	.+4      	; 0x283a <__fp_round+0x18>
    2836:	60 ff       	sbrs	r22, 0
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <__fp_round+0x20>
    283a:	6f 5f       	subi	r22, 0xFF	; 255
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	8f 4f       	sbci	r24, 0xFF	; 255
    2840:	9f 4f       	sbci	r25, 0xFF	; 255
    2842:	08 95       	ret

00002844 <__fp_split3>:
    2844:	57 fd       	sbrc	r21, 7
    2846:	90 58       	subi	r25, 0x80	; 128
    2848:	44 0f       	add	r20, r20
    284a:	55 1f       	adc	r21, r21
    284c:	59 f0       	breq	.+22     	; 0x2864 <__fp_splitA+0x10>
    284e:	5f 3f       	cpi	r21, 0xFF	; 255
    2850:	71 f0       	breq	.+28     	; 0x286e <__fp_splitA+0x1a>
    2852:	47 95       	ror	r20

00002854 <__fp_splitA>:
    2854:	88 0f       	add	r24, r24
    2856:	97 fb       	bst	r25, 7
    2858:	99 1f       	adc	r25, r25
    285a:	61 f0       	breq	.+24     	; 0x2874 <__fp_splitA+0x20>
    285c:	9f 3f       	cpi	r25, 0xFF	; 255
    285e:	79 f0       	breq	.+30     	; 0x287e <__fp_splitA+0x2a>
    2860:	87 95       	ror	r24
    2862:	08 95       	ret
    2864:	12 16       	cp	r1, r18
    2866:	13 06       	cpc	r1, r19
    2868:	14 06       	cpc	r1, r20
    286a:	55 1f       	adc	r21, r21
    286c:	f2 cf       	rjmp	.-28     	; 0x2852 <__fp_split3+0xe>
    286e:	46 95       	lsr	r20
    2870:	f1 df       	rcall	.-30     	; 0x2854 <__fp_splitA>
    2872:	08 c0       	rjmp	.+16     	; 0x2884 <__fp_splitA+0x30>
    2874:	16 16       	cp	r1, r22
    2876:	17 06       	cpc	r1, r23
    2878:	18 06       	cpc	r1, r24
    287a:	99 1f       	adc	r25, r25
    287c:	f1 cf       	rjmp	.-30     	; 0x2860 <__fp_splitA+0xc>
    287e:	86 95       	lsr	r24
    2880:	71 05       	cpc	r23, r1
    2882:	61 05       	cpc	r22, r1
    2884:	08 94       	sec
    2886:	08 95       	ret

00002888 <__fp_zero>:
    2888:	e8 94       	clt

0000288a <__fp_szero>:
    288a:	bb 27       	eor	r27, r27
    288c:	66 27       	eor	r22, r22
    288e:	77 27       	eor	r23, r23
    2890:	cb 01       	movw	r24, r22
    2892:	97 f9       	bld	r25, 7
    2894:	08 95       	ret

00002896 <__divmodhi4>:
    2896:	97 fb       	bst	r25, 7
    2898:	07 2e       	mov	r0, r23
    289a:	16 f4       	brtc	.+4      	; 0x28a0 <__divmodhi4+0xa>
    289c:	00 94       	com	r0
    289e:	06 d0       	rcall	.+12     	; 0x28ac <__divmodhi4_neg1>
    28a0:	77 fd       	sbrc	r23, 7
    28a2:	08 d0       	rcall	.+16     	; 0x28b4 <__divmodhi4_neg2>
    28a4:	0b d0       	rcall	.+22     	; 0x28bc <__udivmodhi4>
    28a6:	07 fc       	sbrc	r0, 7
    28a8:	05 d0       	rcall	.+10     	; 0x28b4 <__divmodhi4_neg2>
    28aa:	3e f4       	brtc	.+14     	; 0x28ba <__divmodhi4_exit>

000028ac <__divmodhi4_neg1>:
    28ac:	90 95       	com	r25
    28ae:	81 95       	neg	r24
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	08 95       	ret

000028b4 <__divmodhi4_neg2>:
    28b4:	70 95       	com	r23
    28b6:	61 95       	neg	r22
    28b8:	7f 4f       	sbci	r23, 0xFF	; 255

000028ba <__divmodhi4_exit>:
    28ba:	08 95       	ret

000028bc <__udivmodhi4>:
    28bc:	aa 1b       	sub	r26, r26
    28be:	bb 1b       	sub	r27, r27
    28c0:	51 e1       	ldi	r21, 0x11	; 17
    28c2:	07 c0       	rjmp	.+14     	; 0x28d2 <__udivmodhi4_ep>

000028c4 <__udivmodhi4_loop>:
    28c4:	aa 1f       	adc	r26, r26
    28c6:	bb 1f       	adc	r27, r27
    28c8:	a6 17       	cp	r26, r22
    28ca:	b7 07       	cpc	r27, r23
    28cc:	10 f0       	brcs	.+4      	; 0x28d2 <__udivmodhi4_ep>
    28ce:	a6 1b       	sub	r26, r22
    28d0:	b7 0b       	sbc	r27, r23

000028d2 <__udivmodhi4_ep>:
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	5a 95       	dec	r21
    28d8:	a9 f7       	brne	.-22     	; 0x28c4 <__udivmodhi4_loop>
    28da:	80 95       	com	r24
    28dc:	90 95       	com	r25
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	08 95       	ret

000028e4 <_exit>:
    28e4:	f8 94       	cli

000028e6 <__stop_program>:
    28e6:	ff cf       	rjmp	.-2      	; 0x28e6 <__stop_program>
