
CargoSorting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000036  00800200  00800200  00000c56  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000280  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000214d  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000041e  00000000  00000000  00003053  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000150f  00000000  00000000  00003471  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000654  00000000  00000000  00004980  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000706  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001319  00000000  00000000  000056da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002e8  00000000  00000000  000069f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	8d c1       	rjmp	.+794    	; 0x330 <__vector_5>
  16:	00 00       	nop
  18:	66 c1       	rjmp	.+716    	; 0x2e6 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ee       	ldi	r30, 0xE2	; 226
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 33       	cpi	r26, 0x36	; 54
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3a d4       	rcall	.+2164   	; 0x994 <main>
 120:	5e c5       	rjmp	.+2748   	; 0xbde <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <motion_set>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	92 b1       	in	r25, 0x02	; 2
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	98 2b       	or	r25, r24
 12c:	92 b9       	out	0x02, r25	; 2
 12e:	08 95       	ret

00000130 <forward>:
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	f8 cf       	rjmp	.-16     	; 0x124 <motion_set>
 134:	08 95       	ret

00000136 <left>:
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	f5 cf       	rjmp	.-22     	; 0x124 <motion_set>
 13a:	08 95       	ret

0000013c <right>:
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	f2 cf       	rjmp	.-28     	; 0x124 <motion_set>
 140:	08 95       	ret

00000142 <soft_left>:
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	ef cf       	rjmp	.-34     	; 0x124 <motion_set>
 146:	08 95       	ret

00000148 <soft_right>:
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	ec cf       	rjmp	.-40     	; 0x124 <motion_set>
 14c:	08 95       	ret

0000014e <soft_left_2>:
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	e9 cf       	rjmp	.-46     	; 0x124 <motion_set>
 152:	08 95       	ret

00000154 <soft_right_2>:
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	e6 cf       	rjmp	.-52     	; 0x124 <motion_set>
 158:	08 95       	ret

0000015a <stop>:
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	e3 cf       	rjmp	.-58     	; 0x124 <motion_set>
 15e:	08 95       	ret

00000160 <buzzer_on>:
 160:	86 b1       	in	r24, 0x06	; 6
 162:	88 60       	ori	r24, 0x08	; 8
 164:	88 b9       	out	0x08, r24	; 8
 166:	08 95       	ret

00000168 <buzzer_off>:
 168:	86 b1       	in	r24, 0x06	; 6
 16a:	87 7f       	andi	r24, 0xF7	; 247
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	08 95       	ret

00000170 <ADC_Conversion>:
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	18 f0       	brcs	.+6      	; 0x17a <ADC_Conversion+0xa>
 174:	98 e0       	ldi	r25, 0x08	; 8
 176:	90 93 7b 00 	sts	0x007B, r25
 17a:	87 70       	andi	r24, 0x07	; 7
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	80 93 7c 00 	sts	0x007C, r24
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	84 ff       	sbrs	r24, 4
 190:	fd cf       	rjmp	.-6      	; 0x18c <ADC_Conversion+0x1c>
 192:	80 91 79 00 	lds	r24, 0x0079
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	90 81       	ld	r25, Z
 19c:	90 61       	ori	r25, 0x10	; 16
 19e:	90 83       	st	Z, r25
 1a0:	10 92 7b 00 	sts	0x007B, r1
 1a4:	08 95       	ret

000001a6 <__vector_1>:
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	80 91 03 02 	lds	r24, 0x0203
 1bc:	90 91 04 02 	lds	r25, 0x0204
 1c0:	a0 91 05 02 	lds	r26, 0x0205
 1c4:	b0 91 06 02 	lds	r27, 0x0206
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	a1 1d       	adc	r26, r1
 1cc:	b1 1d       	adc	r27, r1
 1ce:	80 93 03 02 	sts	0x0203, r24
 1d2:	90 93 04 02 	sts	0x0204, r25
 1d6:	a0 93 05 02 	sts	0x0205, r26
 1da:	b0 93 06 02 	sts	0x0206, r27
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <filter_red>:
 1f0:	5e 98       	cbi	0x0b, 6	; 11
 1f2:	5f 98       	cbi	0x0b, 7	; 11
 1f4:	08 95       	ret

000001f6 <filter_green>:
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
 1f8:	5f 9a       	sbi	0x0b, 7	; 11
 1fa:	08 95       	ret

000001fc <filter_blue>:
 1fc:	5e 98       	cbi	0x0b, 6	; 11
 1fe:	5f 9a       	sbi	0x0b, 7	; 11
 200:	08 95       	ret

00000202 <red_read>:
 202:	f6 df       	rcall	.-20     	; 0x1f0 <filter_red>
 204:	10 92 03 02 	sts	0x0203, r1
 208:	10 92 04 02 	sts	0x0204, r1
 20c:	10 92 05 02 	sts	0x0205, r1
 210:	10 92 06 02 	sts	0x0206, r1
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	8f e7       	ldi	r24, 0x7F	; 127
 218:	94 e0       	ldi	r25, 0x04	; 4
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <red_read+0x18>
 222:	00 c0       	rjmp	.+0      	; 0x224 <red_read+0x22>
 224:	00 00       	nop
 226:	80 91 03 02 	lds	r24, 0x0203
 22a:	90 91 04 02 	lds	r25, 0x0204
 22e:	a0 91 05 02 	lds	r26, 0x0205
 232:	b0 91 06 02 	lds	r27, 0x0206
 236:	80 93 1f 02 	sts	0x021F, r24
 23a:	90 93 20 02 	sts	0x0220, r25
 23e:	a0 93 21 02 	sts	0x0221, r26
 242:	b0 93 22 02 	sts	0x0222, r27
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	9c e2       	ldi	r25, 0x2C	; 44
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <red_read+0x4a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <red_read+0x54>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <green_read>:
 25a:	cd df       	rcall	.-102    	; 0x1f6 <filter_green>
 25c:	10 92 03 02 	sts	0x0203, r1
 260:	10 92 04 02 	sts	0x0204, r1
 264:	10 92 05 02 	sts	0x0205, r1
 268:	10 92 06 02 	sts	0x0206, r1
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	8f e7       	ldi	r24, 0x7F	; 127
 270:	94 e0       	ldi	r25, 0x04	; 4
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <green_read+0x18>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <green_read+0x22>
 27c:	00 00       	nop
 27e:	80 91 03 02 	lds	r24, 0x0203
 282:	90 91 04 02 	lds	r25, 0x0204
 286:	a0 91 05 02 	lds	r26, 0x0205
 28a:	b0 91 06 02 	lds	r27, 0x0206
 28e:	80 93 1b 02 	sts	0x021B, r24
 292:	90 93 1c 02 	sts	0x021C, r25
 296:	a0 93 1d 02 	sts	0x021D, r26
 29a:	b0 93 1e 02 	sts	0x021E, r27
 29e:	08 95       	ret

000002a0 <blue_read>:
 2a0:	ad df       	rcall	.-166    	; 0x1fc <filter_blue>
 2a2:	10 92 03 02 	sts	0x0203, r1
 2a6:	10 92 04 02 	sts	0x0204, r1
 2aa:	10 92 05 02 	sts	0x0205, r1
 2ae:	10 92 06 02 	sts	0x0206, r1
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	8f e7       	ldi	r24, 0x7F	; 127
 2b6:	94 e0       	ldi	r25, 0x04	; 4
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <blue_read+0x18>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <blue_read+0x22>
 2c2:	00 00       	nop
 2c4:	80 91 03 02 	lds	r24, 0x0203
 2c8:	90 91 04 02 	lds	r25, 0x0204
 2cc:	a0 91 05 02 	lds	r26, 0x0205
 2d0:	b0 91 06 02 	lds	r27, 0x0206
 2d4:	80 93 11 02 	sts	0x0211, r24
 2d8:	90 93 12 02 	sts	0x0212, r25
 2dc:	a0 93 13 02 	sts	0x0213, r26
 2e0:	b0 93 14 02 	sts	0x0214, r27
 2e4:	08 95       	ret

000002e6 <__vector_6>:
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	80 91 07 02 	lds	r24, 0x0207
 2fc:	90 91 08 02 	lds	r25, 0x0208
 300:	a0 91 09 02 	lds	r26, 0x0209
 304:	b0 91 0a 02 	lds	r27, 0x020A
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	a1 1d       	adc	r26, r1
 30c:	b1 1d       	adc	r27, r1
 30e:	80 93 07 02 	sts	0x0207, r24
 312:	90 93 08 02 	sts	0x0208, r25
 316:	a0 93 09 02 	sts	0x0209, r26
 31a:	b0 93 0a 02 	sts	0x020A, r27
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_5>:
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	80 91 0b 02 	lds	r24, 0x020B
 346:	90 91 0c 02 	lds	r25, 0x020C
 34a:	a0 91 0d 02 	lds	r26, 0x020D
 34e:	b0 91 0e 02 	lds	r27, 0x020E
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	a1 1d       	adc	r26, r1
 356:	b1 1d       	adc	r27, r1
 358:	80 93 0b 02 	sts	0x020B, r24
 35c:	90 93 0c 02 	sts	0x020C, r25
 360:	a0 93 0d 02 	sts	0x020D, r26
 364:	b0 93 0e 02 	sts	0x020E, r27
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <linear_distance_mm>:
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	bc 01       	movw	r22, r24
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	9e d3       	rcall	.+1852   	; 0xac2 <__floatunsisf>
 386:	25 ee       	ldi	r18, 0xE5	; 229
 388:	30 ed       	ldi	r19, 0xD0	; 208
 38a:	4a ea       	ldi	r20, 0xAA	; 170
 38c:	50 e4       	ldi	r21, 0x40	; 64
 38e:	05 d3       	rcall	.+1546   	; 0x99a <__divsf3>
 390:	6c d3       	rcall	.+1752   	; 0xa6a <__fixunssfsi>
 392:	10 92 07 02 	sts	0x0207, r1
 396:	10 92 08 02 	sts	0x0208, r1
 39a:	10 92 09 02 	sts	0x0209, r1
 39e:	10 92 0a 02 	sts	0x020A, r1
 3a2:	00 91 07 02 	lds	r16, 0x0207
 3a6:	10 91 08 02 	lds	r17, 0x0208
 3aa:	20 91 09 02 	lds	r18, 0x0209
 3ae:	30 91 0a 02 	lds	r19, 0x020A
 3b2:	60 17       	cp	r22, r16
 3b4:	71 07       	cpc	r23, r17
 3b6:	82 07       	cpc	r24, r18
 3b8:	93 07       	cpc	r25, r19
 3ba:	98 f7       	brcc	.-26     	; 0x3a2 <linear_distance_mm+0x28>
 3bc:	ce de       	rcall	.-612    	; 0x15a <stop>
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <forward_mm>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
 3ca:	b2 de       	rcall	.-668    	; 0x130 <forward>
 3cc:	ce 01       	movw	r24, r28
 3ce:	d5 df       	rcall	.-86     	; 0x37a <linear_distance_mm>
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <set_color>:
unsigned char adj;


void set_color()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	cb de       	rcall	.-618    	; 0x170 <ADC_Conversion>
 3da:	80 93 02 02 	sts	0x0202, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	c7 de       	rcall	.-626    	; 0x170 <ADC_Conversion>
 3e2:	80 93 01 02 	sts	0x0201, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	c3 de       	rcall	.-634    	; 0x170 <ADC_Conversion>
 3ea:	80 93 00 02 	sts	0x0200, r24
 3ee:	08 95       	ret

000003f0 <turnLeft>:


void turnLeft()	//turns the robo left
{
	
	forward_mm(60);
 3f0:	8c e3       	ldi	r24, 0x3C	; 60
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	e7 df       	rcall	.-50     	; 0x3c4 <forward_mm>
	left();
 3f6:	9f de       	rcall	.-706    	; 0x136 <left>
	while(ADC_Conversion(2)<40);
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	ba de       	rcall	.-652    	; 0x170 <ADC_Conversion>
 3fc:	88 32       	cpi	r24, 0x28	; 40
 3fe:	e0 f3       	brcs	.-8      	; 0x3f8 <turnLeft+0x8>
	stop();
 400:	ac ce       	rjmp	.-680    	; 0x15a <stop>
 402:	08 95       	ret

00000404 <Delay>:
}

char Delay(int tim)
{
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	8c 01       	movw	r16, r24
	int i;
	for(i=0;i<tim && ADC_Conversion(2)<0x28;i++)
 40e:	18 16       	cp	r1, r24
 410:	19 06       	cpc	r1, r25
 412:	8c f4       	brge	.+34     	; 0x436 <Delay+0x32>
 414:	c0 e0       	ldi	r28, 0x00	; 0
 416:	d0 e0       	ldi	r29, 0x00	; 0
 418:	09 c0       	rjmp	.+18     	; 0x42c <Delay+0x28>
 41a:	86 e6       	ldi	r24, 0x66	; 102
 41c:	9e e0       	ldi	r25, 0x0E	; 14
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <Delay+0x1a>
 422:	00 00       	nop
 424:	21 96       	adiw	r28, 0x01	; 1
 426:	c0 17       	cp	r28, r16
 428:	d1 07       	cpc	r29, r17
 42a:	39 f0       	breq	.+14     	; 0x43a <Delay+0x36>
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	a0 de       	rcall	.-704    	; 0x170 <ADC_Conversion>
 430:	88 32       	cpi	r24, 0x28	; 40
 432:	98 f3       	brcs	.-26     	; 0x41a <Delay+0x16>
 434:	02 c0       	rjmp	.+4      	; 0x43a <Delay+0x36>
 436:	c0 e0       	ldi	r28, 0x00	; 0
 438:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		_delay_ms(1);
	}
	stop();
 43a:	8f de       	rcall	.-738    	; 0x15a <stop>
	if(i<tim)
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	c0 17       	cp	r28, r16
 440:	d1 07       	cpc	r29, r17
 442:	0c f0       	brlt	.+2      	; 0x446 <Delay+0x42>
 444:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else return 0;
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <semiCorrect_Indicator>:

void semiCorrect_Indicator()
{
	
	
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
 450:	80 91 01 02 	lds	r24, 0x0201
 454:	89 32       	cpi	r24, 0x29	; 41
 456:	40 f0       	brcs	.+16     	; 0x468 <semiCorrect_Indicator+0x18>
 458:	90 91 02 02 	lds	r25, 0x0202
 45c:	99 32       	cpi	r25, 0x29	; 41
 45e:	08 f5       	brcc	.+66     	; 0x4a2 <semiCorrect_Indicator+0x52>
 460:	90 91 00 02 	lds	r25, 0x0200
 464:	99 32       	cpi	r25, 0x29	; 41
 466:	e8 f4       	brcc	.+58     	; 0x4a2 <semiCorrect_Indicator+0x52>
	{
		return;
	}
	if(Center_white_line<40)
 468:	88 32       	cpi	r24, 0x28	; 40
 46a:	d8 f4       	brcc	.+54     	; 0x4a2 <semiCorrect_Indicator+0x52>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
 46c:	80 91 02 02 	lds	r24, 0x0202
 470:	89 32       	cpi	r24, 0x29	; 41
 472:	58 f0       	brcs	.+22     	; 0x48a <semiCorrect_Indicator+0x3a>
 474:	90 91 00 02 	lds	r25, 0x0200
 478:	98 32       	cpi	r25, 0x28	; 40
 47a:	38 f4       	brcc	.+14     	; 0x48a <semiCorrect_Indicator+0x3a>
		{
			while((Center_white_line<0x28))
			{		
				left();
 47c:	5c de       	rcall	.-840    	; 0x136 <left>
				set_color();
 47e:	ab df       	rcall	.-170    	; 0x3d6 <set_color>
	}
	if(Center_white_line<40)
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
			while((Center_white_line<0x28))
 480:	80 91 01 02 	lds	r24, 0x0201
 484:	88 32       	cpi	r24, 0x28	; 40
 486:	d0 f3       	brcs	.-12     	; 0x47c <semiCorrect_Indicator+0x2c>
 488:	08 95       	ret
			{		
				left();
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
 48a:	90 91 00 02 	lds	r25, 0x0200
 48e:	99 32       	cpi	r25, 0x29	; 41
 490:	40 f0       	brcs	.+16     	; 0x4a2 <semiCorrect_Indicator+0x52>
 492:	88 32       	cpi	r24, 0x28	; 40
 494:	30 f4       	brcc	.+12     	; 0x4a2 <semiCorrect_Indicator+0x52>
		{
			while((Center_white_line<0x28))
			{
				right();
 496:	52 de       	rcall	.-860    	; 0x13c <right>
				set_color();
 498:	9e df       	rcall	.-196    	; 0x3d6 <set_color>
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			while((Center_white_line<0x28))
 49a:	80 91 01 02 	lds	r24, 0x0201
 49e:	88 32       	cpi	r24, 0x28	; 40
 4a0:	d0 f3       	brcs	.-12     	; 0x496 <semiCorrect_Indicator+0x46>
 4a2:	08 95       	ret

000004a4 <correct>:
		}
	}
	
}
void correct()
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
	unsigned int i=50;
	stop();
 4a8:	58 de       	rcall	.-848    	; 0x15a <stop>
	}
	
}
void correct()
{
	unsigned int i=50;
 4aa:	c2 e3       	ldi	r28, 0x32	; 50
 4ac:	d0 e0       	ldi	r29, 0x00	; 0
	stop();
	while(1)
	{
		left();
 4ae:	43 de       	rcall	.-890    	; 0x136 <left>
		if(Delay(i))
 4b0:	ce 01       	movw	r24, r28
 4b2:	a8 df       	rcall	.-176    	; 0x404 <Delay>
 4b4:	81 11       	cpse	r24, r1
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <correct+0x40>
			return;
		stop();
 4b8:	50 de       	rcall	.-864    	; 0x15a <stop>
	
		semiCorrect_Indicator();
 4ba:	ca df       	rcall	.-108    	; 0x450 <semiCorrect_Indicator>
		if(ADC_Conversion(2)>40)
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	58 de       	rcall	.-848    	; 0x170 <ADC_Conversion>
 4c0:	89 32       	cpi	r24, 0x29	; 41
 4c2:	78 f4       	brcc	.+30     	; 0x4e2 <correct+0x3e>
			break;
	
		i+=50;
		right();
 4c4:	3b de       	rcall	.-906    	; 0x13c <right>
		if(Delay(i))
 4c6:	ce 01       	movw	r24, r28
 4c8:	c2 96       	adiw	r24, 0x32	; 50
 4ca:	9c df       	rcall	.-200    	; 0x404 <Delay>
 4cc:	81 11       	cpse	r24, r1
 4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <correct+0x40>
			return;
		stop();
 4d0:	44 de       	rcall	.-888    	; 0x15a <stop>
		
		semiCorrect_Indicator();
 4d2:	be df       	rcall	.-132    	; 0x450 <semiCorrect_Indicator>
		if(ADC_Conversion(2)>40)
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	4c de       	rcall	.-872    	; 0x170 <ADC_Conversion>
 4d8:	89 32       	cpi	r24, 0x29	; 41
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <correct+0x3e>
			break;
		i+=50;
 4dc:	cc 59       	subi	r28, 0x9C	; 156
 4de:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
 4e0:	e6 cf       	rjmp	.-52     	; 0x4ae <correct+0xa>
	stop();
 4e2:	3b de       	rcall	.-906    	; 0x15a <stop>
	return;
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <initialCorrect_Indicator>:
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 4ea:	88 ec       	ldi	r24, 0xC8	; 200
 4ec:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 4f0:	80 93 2a 01 	sts	0x012A, r24
void initialCorrect_Indicator()
{
	int flag=0;
	
	velocity(correct_v,correct_v);
	if(Center_white_line<40)
 4f4:	80 91 01 02 	lds	r24, 0x0201
 4f8:	88 32       	cpi	r24, 0x28	; 40
 4fa:	80 f5       	brcc	.+96     	; 0x55c <initialCorrect_Indicator+0x72>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
 4fc:	80 91 02 02 	lds	r24, 0x0202
 500:	89 32       	cpi	r24, 0x29	; 41
 502:	a0 f0       	brcs	.+40     	; 0x52c <initialCorrect_Indicator+0x42>
 504:	90 91 00 02 	lds	r25, 0x0200
 508:	98 32       	cpi	r25, 0x28	; 40
 50a:	80 f4       	brcc	.+32     	; 0x52c <initialCorrect_Indicator+0x42>
 50c:	02 c0       	rjmp	.+4      	; 0x512 <initialCorrect_Indicator+0x28>
		{
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
 50e:	13 de       	rcall	.-986    	; 0x136 <left>
				set_color();
 510:	62 df       	rcall	.-316    	; 0x3d6 <set_color>
	if(Center_white_line<40)
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
 512:	80 91 01 02 	lds	r24, 0x0201
 516:	89 32       	cpi	r24, 0x29	; 41
 518:	d0 f3       	brcs	.-12     	; 0x50e <initialCorrect_Indicator+0x24>
 51a:	80 91 02 02 	lds	r24, 0x0202
 51e:	88 32       	cpi	r24, 0x28	; 40
 520:	b0 f7       	brcc	.-20     	; 0x50e <initialCorrect_Indicator+0x24>
 522:	80 91 00 02 	lds	r24, 0x0200
 526:	88 32       	cpi	r24, 0x28	; 40
 528:	90 f7       	brcc	.-28     	; 0x50e <initialCorrect_Indicator+0x24>
 52a:	27 c0       	rjmp	.+78     	; 0x57a <initialCorrect_Indicator+0x90>
			{
				left();
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
 52c:	90 91 00 02 	lds	r25, 0x0200
 530:	99 32       	cpi	r25, 0x29	; 41
 532:	90 f0       	brcs	.+36     	; 0x558 <initialCorrect_Indicator+0x6e>
 534:	88 32       	cpi	r24, 0x28	; 40
 536:	80 f4       	brcc	.+32     	; 0x558 <initialCorrect_Indicator+0x6e>
 538:	02 c0       	rjmp	.+4      	; 0x53e <initialCorrect_Indicator+0x54>
		{
			flag=1;			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
 53a:	00 de       	rcall	.-1024   	; 0x13c <right>
				set_color();
 53c:	4c df       	rcall	.-360    	; 0x3d6 <set_color>
				set_color();
			}
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
 53e:	80 91 01 02 	lds	r24, 0x0201
 542:	89 32       	cpi	r24, 0x29	; 41
 544:	d0 f3       	brcs	.-12     	; 0x53a <initialCorrect_Indicator+0x50>
 546:	80 91 02 02 	lds	r24, 0x0202
 54a:	88 32       	cpi	r24, 0x28	; 40
 54c:	b0 f7       	brcc	.-20     	; 0x53a <initialCorrect_Indicator+0x50>
 54e:	80 91 00 02 	lds	r24, 0x0200
 552:	88 32       	cpi	r24, 0x28	; 40
 554:	90 f7       	brcc	.-28     	; 0x53a <initialCorrect_Indicator+0x50>
 556:	11 c0       	rjmp	.+34     	; 0x57a <initialCorrect_Indicator+0x90>
			}			
		}
		else
		{
			flag=1;
			correct();
 558:	a5 df       	rcall	.-182    	; 0x4a4 <correct>
 55a:	0f c0       	rjmp	.+30     	; 0x57a <initialCorrect_Indicator+0x90>
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
 55c:	80 91 02 02 	lds	r24, 0x0202
 560:	89 32       	cpi	r24, 0x29	; 41
 562:	20 f0       	brcs	.+8      	; 0x56c <initialCorrect_Indicator+0x82>
 564:	90 91 00 02 	lds	r25, 0x0200
 568:	98 32       	cpi	r25, 0x28	; 40
 56a:	40 f0       	brcs	.+16     	; 0x57c <initialCorrect_Indicator+0x92>
		{
			return;
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
 56c:	88 32       	cpi	r24, 0x28	; 40
 56e:	20 f4       	brcc	.+8      	; 0x578 <initialCorrect_Indicator+0x8e>
 570:	80 91 00 02 	lds	r24, 0x0200
 574:	89 32       	cpi	r24, 0x29	; 41
 576:	10 f4       	brcc	.+4      	; 0x57c <initialCorrect_Indicator+0x92>
			return;
		}
		else
		{
			flag=1;
			correct();
 578:	95 df       	rcall	.-214    	; 0x4a4 <correct>
		}
	}
	if(flag==0)	
		correct();
	stop();
 57a:	ef cd       	rjmp	.-1058   	; 0x15a <stop>
 57c:	08 95       	ret

0000057e <followLine_Indicator>:
	return;
}
void followLine_Indicator()
{
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 588:	08 e2       	ldi	r16, 0x28	; 40
 58a:	11 e0       	ldi	r17, 0x01	; 1
 58c:	0f 2e       	mov	r0, r31
 58e:	f0 ef       	ldi	r31, 0xF0	; 240
 590:	ff 2e       	mov	r15, r31
 592:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
 594:	ca e2       	ldi	r28, 0x2A	; 42
 596:	d1 e0       	ldi	r29, 0x01	; 1
	do
	{
		forward();
 598:	cb dd       	rcall	.-1130   	; 0x130 <forward>
		set_color();
 59a:	1d df       	rcall	.-454    	; 0x3d6 <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
 59c:	80 91 01 02 	lds	r24, 0x0201
 5a0:	89 32       	cpi	r24, 0x29	; 41
 5a2:	40 f0       	brcs	.+16     	; 0x5b4 <followLine_Indicator+0x36>
 5a4:	80 91 02 02 	lds	r24, 0x0202
 5a8:	89 32       	cpi	r24, 0x29	; 41
 5aa:	a8 f4       	brcc	.+42     	; 0x5d6 <followLine_Indicator+0x58>
 5ac:	80 91 00 02 	lds	r24, 0x0200
 5b0:	89 32       	cpi	r24, 0x29	; 41
 5b2:	88 f4       	brcc	.+34     	; 0x5d6 <followLine_Indicator+0x58>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 5b4:	f8 01       	movw	r30, r16
 5b6:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 5b8:	f8 82       	st	Y, r15
			return;
		}
		velocity(240,240);
		
		
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
 5ba:	80 91 01 02 	lds	r24, 0x0201
 5be:	89 32       	cpi	r24, 0x29	; 41
 5c0:	40 f0       	brcs	.+16     	; 0x5d2 <followLine_Indicator+0x54>
 5c2:	80 91 02 02 	lds	r24, 0x0202
 5c6:	88 32       	cpi	r24, 0x28	; 40
 5c8:	20 f4       	brcc	.+8      	; 0x5d2 <followLine_Indicator+0x54>
 5ca:	80 91 00 02 	lds	r24, 0x0200
 5ce:	88 32       	cpi	r24, 0x28	; 40
 5d0:	18 f3       	brcs	.-58     	; 0x598 <followLine_Indicator+0x1a>
	
	initialCorrect_Indicator();
 5d2:	8b df       	rcall	.-234    	; 0x4ea <initialCorrect_Indicator>
	followLine_Indicator();
 5d4:	d4 df       	rcall	.-88     	; 0x57e <followLine_Indicator>
	return;
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	08 95       	ret

000005e2 <scan>:
/*************************END GULLA CODE*************/

int scan()//return the color no.
{
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
	red_read();
 5e6:	0d de       	rcall	.-998    	; 0x202 <red_read>
	blue_read();
 5e8:	5b de       	rcall	.-842    	; 0x2a0 <blue_read>
	green_read();
 5ea:	37 de       	rcall	.-914    	; 0x25a <green_read>
	
	if(!(ADC_Conversion(11)>55 && ADC_Conversion(11)<100))
 5ec:	8b e0       	ldi	r24, 0x0B	; 11
 5ee:	c0 dd       	rcall	.-1152   	; 0x170 <ADC_Conversion>
 5f0:	88 33       	cpi	r24, 0x38	; 56
 5f2:	08 f4       	brcc	.+2      	; 0x5f6 <scan+0x14>
 5f4:	7b c0       	rjmp	.+246    	; 0x6ec <scan+0x10a>
 5f6:	8b e0       	ldi	r24, 0x0B	; 11
 5f8:	bb dd       	rcall	.-1162   	; 0x170 <ADC_Conversion>
 5fa:	84 36       	cpi	r24, 0x64	; 100
 5fc:	08 f0       	brcs	.+2      	; 0x600 <scan+0x1e>
 5fe:	79 c0       	rjmp	.+242    	; 0x6f2 <scan+0x110>
		return EMPTY;
	
	if (red<threshold && green < threshold && blue < threshold)
 600:	80 91 0f 02 	lds	r24, 0x020F
 604:	90 91 10 02 	lds	r25, 0x0210
 608:	aa 27       	eor	r26, r26
 60a:	97 fd       	sbrc	r25, 7
 60c:	a0 95       	com	r26
 60e:	ba 2f       	mov	r27, r26
 610:	40 91 1f 02 	lds	r20, 0x021F
 614:	50 91 20 02 	lds	r21, 0x0220
 618:	60 91 21 02 	lds	r22, 0x0221
 61c:	70 91 22 02 	lds	r23, 0x0222
 620:	48 17       	cp	r20, r24
 622:	59 07       	cpc	r21, r25
 624:	6a 07       	cpc	r22, r26
 626:	7b 07       	cpc	r23, r27
 628:	d8 f4       	brcc	.+54     	; 0x660 <scan+0x7e>
 62a:	40 91 1b 02 	lds	r20, 0x021B
 62e:	50 91 1c 02 	lds	r21, 0x021C
 632:	60 91 1d 02 	lds	r22, 0x021D
 636:	70 91 1e 02 	lds	r23, 0x021E
 63a:	48 17       	cp	r20, r24
 63c:	59 07       	cpc	r21, r25
 63e:	6a 07       	cpc	r22, r26
 640:	7b 07       	cpc	r23, r27
 642:	70 f4       	brcc	.+28     	; 0x660 <scan+0x7e>
 644:	40 91 11 02 	lds	r20, 0x0211
 648:	50 91 12 02 	lds	r21, 0x0212
 64c:	60 91 13 02 	lds	r22, 0x0213
 650:	70 91 14 02 	lds	r23, 0x0214
 654:	48 17       	cp	r20, r24
 656:	59 07       	cpc	r21, r25
 658:	6a 07       	cpc	r22, r26
 65a:	7b 07       	cpc	r23, r27
 65c:	08 f4       	brcc	.+2      	; 0x660 <scan+0x7e>
 65e:	4c c0       	rjmp	.+152    	; 0x6f8 <scan+0x116>
	{
		return BLACK;
	}
	else
	{
		if (red > blue)
 660:	40 91 1f 02 	lds	r20, 0x021F
 664:	50 91 20 02 	lds	r21, 0x0220
 668:	60 91 21 02 	lds	r22, 0x0221
 66c:	70 91 22 02 	lds	r23, 0x0222
 670:	80 91 11 02 	lds	r24, 0x0211
 674:	90 91 12 02 	lds	r25, 0x0212
 678:	a0 91 13 02 	lds	r26, 0x0213
 67c:	b0 91 14 02 	lds	r27, 0x0214
 680:	84 17       	cp	r24, r20
 682:	95 07       	cpc	r25, r21
 684:	a6 07       	cpc	r26, r22
 686:	b7 07       	cpc	r27, r23
 688:	c8 f4       	brcc	.+50     	; 0x6bc <scan+0xda>
		{
			if (red > green)
 68a:	00 91 1f 02 	lds	r16, 0x021F
 68e:	10 91 20 02 	lds	r17, 0x0220
 692:	20 91 21 02 	lds	r18, 0x0221
 696:	30 91 22 02 	lds	r19, 0x0222
 69a:	40 91 1b 02 	lds	r20, 0x021B
 69e:	50 91 1c 02 	lds	r21, 0x021C
 6a2:	60 91 1d 02 	lds	r22, 0x021D
 6a6:	70 91 1e 02 	lds	r23, 0x021E
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	40 17       	cp	r20, r16
 6b0:	51 07       	cpc	r21, r17
 6b2:	62 07       	cpc	r22, r18
 6b4:	73 07       	cpc	r23, r19
 6b6:	28 f5       	brcc	.+74     	; 0x702 <scan+0x120>
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	23 c0       	rjmp	.+70     	; 0x702 <scan+0x120>
			return RED;
			else
			return GREEN;
		}
		else if (blue > green)
 6bc:	40 91 11 02 	lds	r20, 0x0211
 6c0:	50 91 12 02 	lds	r21, 0x0212
 6c4:	60 91 13 02 	lds	r22, 0x0213
 6c8:	70 91 14 02 	lds	r23, 0x0214
 6cc:	80 91 1b 02 	lds	r24, 0x021B
 6d0:	90 91 1c 02 	lds	r25, 0x021C
 6d4:	a0 91 1d 02 	lds	r26, 0x021D
 6d8:	b0 91 1e 02 	lds	r27, 0x021E
 6dc:	84 17       	cp	r24, r20
 6de:	95 07       	cpc	r25, r21
 6e0:	a6 07       	cpc	r26, r22
 6e2:	b7 07       	cpc	r27, r23
 6e4:	60 f4       	brcc	.+24     	; 0x6fe <scan+0x11c>
		return BLUE;
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0b c0       	rjmp	.+22     	; 0x702 <scan+0x120>
	red_read();
	blue_read();
	green_read();
	
	if(!(ADC_Conversion(11)>55 && ADC_Conversion(11)<100))
		return EMPTY;
 6ec:	8f ef       	ldi	r24, 0xFF	; 255
 6ee:	9f ef       	ldi	r25, 0xFF	; 255
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <scan+0x120>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <scan+0x120>
	
	if (red<threshold && green < threshold && blue < threshold)
	{
		return BLACK;
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <scan+0x120>
			else
			return GREEN;
		}
		else if (blue > green)
		return BLUE;
		else return GREEN;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
	}

}
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	08 95       	ret

00000708 <setIndicator>:

void setIndicator()
{
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
	unsigned char i;
	followLine_Indicator();
 70e:	37 df       	rcall	.-402    	; 0x57e <followLine_Indicator>
	
	//turn efficiency
	forward_mm(160);
 710:	80 ea       	ldi	r24, 0xA0	; 160
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	57 de       	rcall	.-850    	; 0x3c4 <forward_mm>
	//scan 4
	soft_right_2();
 716:	1e dd       	rcall	.-1476   	; 0x154 <soft_right_2>
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	8f e7       	ldi	r24, 0x7F	; 127
 71c:	9f e1       	ldi	r25, 0x1F	; 31
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <setIndicator+0x16>
 726:	00 c0       	rjmp	.+0      	; 0x728 <setIndicator+0x20>
 728:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	21 dd       	rcall	.-1470   	; 0x170 <ADC_Conversion>
 72e:	88 32       	cpi	r24, 0x28	; 40
 730:	e0 f3       	brcs	.-8      	; 0x72a <setIndicator+0x22>
	stop();
 732:	13 dd       	rcall	.-1498   	; 0x15a <stop>
	indicator[3]=scan();
 734:	56 df       	rcall	.-340    	; 0x5e2 <scan>
 736:	90 93 2e 02 	sts	0x022E, r25
 73a:	80 93 2d 02 	sts	0x022D, r24
	for(i=0;i<indicator[3];i++)
 73e:	18 16       	cp	r1, r24
 740:	19 06       	cpc	r1, r25
 742:	fc f4       	brge	.+62     	; 0x782 <setIndicator+0x7a>
 744:	10 e0       	ldi	r17, 0x00	; 0
 746:	cd e2       	ldi	r28, 0x2D	; 45
 748:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 74a:	0a dd       	rcall	.-1516   	; 0x160 <buzzer_on>
 74c:	2f ef       	ldi	r18, 0xFF	; 255
 74e:	8f e7       	ldi	r24, 0x7F	; 127
 750:	94 e0       	ldi	r25, 0x04	; 4
 752:	21 50       	subi	r18, 0x01	; 1
 754:	80 40       	sbci	r24, 0x00	; 0
 756:	90 40       	sbci	r25, 0x00	; 0
 758:	e1 f7       	brne	.-8      	; 0x752 <setIndicator+0x4a>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <setIndicator+0x54>
 75c:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 75e:	04 dd       	rcall	.-1528   	; 0x168 <buzzer_off>
 760:	2f ef       	ldi	r18, 0xFF	; 255
 762:	8f e7       	ldi	r24, 0x7F	; 127
 764:	96 e1       	ldi	r25, 0x16	; 22
 766:	21 50       	subi	r18, 0x01	; 1
 768:	80 40       	sbci	r24, 0x00	; 0
 76a:	90 40       	sbci	r25, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <setIndicator+0x5e>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <setIndicator+0x68>
 770:	00 00       	nop
	soft_right_2();
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
	stop();
	indicator[3]=scan();
	for(i=0;i<indicator[3];i++)
 772:	1f 5f       	subi	r17, 0xFF	; 255
 774:	21 2f       	mov	r18, r17
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	88 81       	ld	r24, Y
 77a:	99 81       	ldd	r25, Y+1	; 0x01
 77c:	28 17       	cp	r18, r24
 77e:	39 07       	cpc	r19, r25
 780:	24 f3       	brlt	.-56     	; 0x74a <setIndicator+0x42>
		buzzer_off();
		_delay_ms(500);
	}
	
	//back to line
	soft_left();
 782:	df dc       	rcall	.-1602   	; 0x142 <soft_left>
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	9c e2       	ldi	r25, 0x2C	; 44
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <setIndicator+0x82>
 792:	00 c0       	rjmp	.+0      	; 0x794 <setIndicator+0x8c>
 794:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	eb dc       	rcall	.-1578   	; 0x170 <ADC_Conversion>
 79a:	88 32       	cpi	r24, 0x28	; 40
 79c:	e0 f3       	brcs	.-8      	; 0x796 <setIndicator+0x8e>
	stop();
 79e:	dd dc       	rcall	.-1606   	; 0x15a <stop>
	
	//scan 3
	soft_left_2();
 7a0:	d6 dc       	rcall	.-1620   	; 0x14e <soft_left_2>
 7a2:	2f ef       	ldi	r18, 0xFF	; 255
 7a4:	8f e7       	ldi	r24, 0x7F	; 127
 7a6:	96 e1       	ldi	r25, 0x16	; 22
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <setIndicator+0xa0>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <setIndicator+0xaa>
 7b2:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 7b4:	82 e0       	ldi	r24, 0x02	; 2
 7b6:	dc dc       	rcall	.-1608   	; 0x170 <ADC_Conversion>
 7b8:	88 32       	cpi	r24, 0x28	; 40
 7ba:	e0 f3       	brcs	.-8      	; 0x7b4 <setIndicator+0xac>
	stop();
 7bc:	ce dc       	rcall	.-1636   	; 0x15a <stop>
	indicator[2]=scan();
 7be:	11 df       	rcall	.-478    	; 0x5e2 <scan>
 7c0:	90 93 2c 02 	sts	0x022C, r25
 7c4:	80 93 2b 02 	sts	0x022B, r24
	for(i=0;i<indicator[2];i++)
 7c8:	18 16       	cp	r1, r24
 7ca:	19 06       	cpc	r1, r25
 7cc:	fc f4       	brge	.+62     	; 0x80c <setIndicator+0x104>
 7ce:	10 e0       	ldi	r17, 0x00	; 0
 7d0:	cb e2       	ldi	r28, 0x2B	; 43
 7d2:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 7d4:	c5 dc       	rcall	.-1654   	; 0x160 <buzzer_on>
 7d6:	2f ef       	ldi	r18, 0xFF	; 255
 7d8:	8f e7       	ldi	r24, 0x7F	; 127
 7da:	94 e0       	ldi	r25, 0x04	; 4
 7dc:	21 50       	subi	r18, 0x01	; 1
 7de:	80 40       	sbci	r24, 0x00	; 0
 7e0:	90 40       	sbci	r25, 0x00	; 0
 7e2:	e1 f7       	brne	.-8      	; 0x7dc <setIndicator+0xd4>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <setIndicator+0xde>
 7e6:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 7e8:	bf dc       	rcall	.-1666   	; 0x168 <buzzer_off>
 7ea:	2f ef       	ldi	r18, 0xFF	; 255
 7ec:	8f e7       	ldi	r24, 0x7F	; 127
 7ee:	96 e1       	ldi	r25, 0x16	; 22
 7f0:	21 50       	subi	r18, 0x01	; 1
 7f2:	80 40       	sbci	r24, 0x00	; 0
 7f4:	90 40       	sbci	r25, 0x00	; 0
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <setIndicator+0xe8>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <setIndicator+0xf2>
 7fa:	00 00       	nop
	soft_left_2();
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
	stop();
	indicator[2]=scan();
	for(i=0;i<indicator[2];i++)
 7fc:	1f 5f       	subi	r17, 0xFF	; 255
 7fe:	21 2f       	mov	r18, r17
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	88 81       	ld	r24, Y
 804:	99 81       	ldd	r25, Y+1	; 0x01
 806:	28 17       	cp	r18, r24
 808:	39 07       	cpc	r19, r25
 80a:	24 f3       	brlt	.-56     	; 0x7d4 <setIndicator+0xcc>
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}
	//back to line
	soft_right();
 80c:	9d dc       	rcall	.-1734   	; 0x148 <soft_right>
 80e:	2f ef       	ldi	r18, 0xFF	; 255
 810:	8f e7       	ldi	r24, 0x7F	; 127
 812:	96 e1       	ldi	r25, 0x16	; 22
 814:	21 50       	subi	r18, 0x01	; 1
 816:	80 40       	sbci	r24, 0x00	; 0
 818:	90 40       	sbci	r25, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <setIndicator+0x10c>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <setIndicator+0x116>
 81e:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	a6 dc       	rcall	.-1716   	; 0x170 <ADC_Conversion>
 824:	88 32       	cpi	r24, 0x28	; 40
 826:	e0 f3       	brcs	.-8      	; 0x820 <setIndicator+0x118>
	stop();
 828:	98 dc       	rcall	.-1744   	; 0x15a <stop>
	
	//=====
	
	followLine_Indicator();
 82a:	a9 de       	rcall	.-686    	; 0x57e <followLine_Indicator>
	
	//turn efficiency
	forward_mm(160);
 82c:	80 ea       	ldi	r24, 0xA0	; 160
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	c9 dd       	rcall	.-1134   	; 0x3c4 <forward_mm>
	//scan 4
	soft_right_2();
 832:	90 dc       	rcall	.-1760   	; 0x154 <soft_right_2>
 834:	2f ef       	ldi	r18, 0xFF	; 255
 836:	8f e7       	ldi	r24, 0x7F	; 127
 838:	96 e1       	ldi	r25, 0x16	; 22
 83a:	21 50       	subi	r18, 0x01	; 1
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	90 40       	sbci	r25, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <setIndicator+0x132>
 842:	00 c0       	rjmp	.+0      	; 0x844 <setIndicator+0x13c>
 844:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(3)<40);
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	93 dc       	rcall	.-1754   	; 0x170 <ADC_Conversion>
 84a:	88 32       	cpi	r24, 0x28	; 40
 84c:	e0 f3       	brcs	.-8      	; 0x846 <setIndicator+0x13e>
	stop();
 84e:	85 dc       	rcall	.-1782   	; 0x15a <stop>
	indicator[1]=scan();
 850:	c8 de       	rcall	.-624    	; 0x5e2 <scan>
 852:	90 93 2a 02 	sts	0x022A, r25
 856:	80 93 29 02 	sts	0x0229, r24
	for(i=0;i<indicator[1];i++)
 85a:	18 16       	cp	r1, r24
 85c:	19 06       	cpc	r1, r25
 85e:	fc f4       	brge	.+62     	; 0x89e <setIndicator+0x196>
 860:	10 e0       	ldi	r17, 0x00	; 0
 862:	c9 e2       	ldi	r28, 0x29	; 41
 864:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 866:	7c dc       	rcall	.-1800   	; 0x160 <buzzer_on>
 868:	2f ef       	ldi	r18, 0xFF	; 255
 86a:	8f e7       	ldi	r24, 0x7F	; 127
 86c:	94 e0       	ldi	r25, 0x04	; 4
 86e:	21 50       	subi	r18, 0x01	; 1
 870:	80 40       	sbci	r24, 0x00	; 0
 872:	90 40       	sbci	r25, 0x00	; 0
 874:	e1 f7       	brne	.-8      	; 0x86e <setIndicator+0x166>
 876:	00 c0       	rjmp	.+0      	; 0x878 <setIndicator+0x170>
 878:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 87a:	76 dc       	rcall	.-1812   	; 0x168 <buzzer_off>
 87c:	2f ef       	ldi	r18, 0xFF	; 255
 87e:	8f e7       	ldi	r24, 0x7F	; 127
 880:	96 e1       	ldi	r25, 0x16	; 22
 882:	21 50       	subi	r18, 0x01	; 1
 884:	80 40       	sbci	r24, 0x00	; 0
 886:	90 40       	sbci	r25, 0x00	; 0
 888:	e1 f7       	brne	.-8      	; 0x882 <setIndicator+0x17a>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <setIndicator+0x184>
 88c:	00 00       	nop
	soft_right_2();
	_delay_ms(500);
	while(ADC_Conversion(3)<40);
	stop();
	indicator[1]=scan();
	for(i=0;i<indicator[1];i++)
 88e:	1f 5f       	subi	r17, 0xFF	; 255
 890:	21 2f       	mov	r18, r17
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	88 81       	ld	r24, Y
 896:	99 81       	ldd	r25, Y+1	; 0x01
 898:	28 17       	cp	r18, r24
 89a:	39 07       	cpc	r19, r25
 89c:	24 f3       	brlt	.-56     	; 0x866 <setIndicator+0x15e>
		buzzer_off();
		_delay_ms(500);
	}
	
	//back to line
	soft_left();
 89e:	51 dc       	rcall	.-1886   	; 0x142 <soft_left>
 8a0:	2f ef       	ldi	r18, 0xFF	; 255
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	9c e2       	ldi	r25, 0x2C	; 44
 8a6:	21 50       	subi	r18, 0x01	; 1
 8a8:	80 40       	sbci	r24, 0x00	; 0
 8aa:	90 40       	sbci	r25, 0x00	; 0
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <setIndicator+0x19e>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <setIndicator+0x1a8>
 8b0:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	5d dc       	rcall	.-1862   	; 0x170 <ADC_Conversion>
 8b6:	88 32       	cpi	r24, 0x28	; 40
 8b8:	e0 f3       	brcs	.-8      	; 0x8b2 <setIndicator+0x1aa>
	stop();
 8ba:	4f dc       	rcall	.-1890   	; 0x15a <stop>
	
	//scan 3
	soft_left_2();
 8bc:	48 dc       	rcall	.-1904   	; 0x14e <soft_left_2>
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	8f e7       	ldi	r24, 0x7F	; 127
 8c2:	96 e1       	ldi	r25, 0x16	; 22
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	80 40       	sbci	r24, 0x00	; 0
 8c8:	90 40       	sbci	r25, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <setIndicator+0x1bc>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <setIndicator+0x1c6>
 8ce:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	4e dc       	rcall	.-1892   	; 0x170 <ADC_Conversion>
 8d4:	88 32       	cpi	r24, 0x28	; 40
 8d6:	e0 f3       	brcs	.-8      	; 0x8d0 <setIndicator+0x1c8>
	stop();
 8d8:	40 dc       	rcall	.-1920   	; 0x15a <stop>
	indicator[0]=scan();
 8da:	83 de       	rcall	.-762    	; 0x5e2 <scan>
 8dc:	90 93 28 02 	sts	0x0228, r25
 8e0:	80 93 27 02 	sts	0x0227, r24
	for(i=0;i<indicator[0];i++)
 8e4:	18 16       	cp	r1, r24
 8e6:	19 06       	cpc	r1, r25
 8e8:	fc f4       	brge	.+62     	; 0x928 <setIndicator+0x220>
 8ea:	10 e0       	ldi	r17, 0x00	; 0
 8ec:	c7 e2       	ldi	r28, 0x27	; 39
 8ee:	d2 e0       	ldi	r29, 0x02	; 2
	{
		buzzer_on();
 8f0:	37 dc       	rcall	.-1938   	; 0x160 <buzzer_on>
 8f2:	2f ef       	ldi	r18, 0xFF	; 255
 8f4:	8f e7       	ldi	r24, 0x7F	; 127
 8f6:	94 e0       	ldi	r25, 0x04	; 4
 8f8:	21 50       	subi	r18, 0x01	; 1
 8fa:	80 40       	sbci	r24, 0x00	; 0
 8fc:	90 40       	sbci	r25, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <setIndicator+0x1f0>
 900:	00 c0       	rjmp	.+0      	; 0x902 <setIndicator+0x1fa>
 902:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
 904:	31 dc       	rcall	.-1950   	; 0x168 <buzzer_off>
 906:	2f ef       	ldi	r18, 0xFF	; 255
 908:	8f e7       	ldi	r24, 0x7F	; 127
 90a:	96 e1       	ldi	r25, 0x16	; 22
 90c:	21 50       	subi	r18, 0x01	; 1
 90e:	80 40       	sbci	r24, 0x00	; 0
 910:	90 40       	sbci	r25, 0x00	; 0
 912:	e1 f7       	brne	.-8      	; 0x90c <setIndicator+0x204>
 914:	00 c0       	rjmp	.+0      	; 0x916 <setIndicator+0x20e>
 916:	00 00       	nop
	soft_left_2();
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
	stop();
	indicator[0]=scan();
	for(i=0;i<indicator[0];i++)
 918:	1f 5f       	subi	r17, 0xFF	; 255
 91a:	21 2f       	mov	r18, r17
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	88 81       	ld	r24, Y
 920:	99 81       	ldd	r25, Y+1	; 0x01
 922:	28 17       	cp	r18, r24
 924:	39 07       	cpc	r19, r25
 926:	24 f3       	brlt	.-56     	; 0x8f0 <setIndicator+0x1e8>
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}
	//back to line
	soft_right();
 928:	0f dc       	rcall	.-2018   	; 0x148 <soft_right>
 92a:	2f ef       	ldi	r18, 0xFF	; 255
 92c:	8f e7       	ldi	r24, 0x7F	; 127
 92e:	96 e1       	ldi	r25, 0x16	; 22
 930:	21 50       	subi	r18, 0x01	; 1
 932:	80 40       	sbci	r24, 0x00	; 0
 934:	90 40       	sbci	r25, 0x00	; 0
 936:	e1 f7       	brne	.-8      	; 0x930 <setIndicator+0x228>
 938:	00 c0       	rjmp	.+0      	; 0x93a <setIndicator+0x232>
 93a:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	18 dc       	rcall	.-2000   	; 0x170 <ADC_Conversion>
 940:	88 32       	cpi	r24, 0x28	; 40
 942:	e0 f3       	brcs	.-8      	; 0x93c <setIndicator+0x234>
	stop();
 944:	0a dc       	rcall	.-2028   	; 0x15a <stop>
	
	
	followLine_Indicator();
 946:	1b de       	rcall	.-970    	; 0x57e <followLine_Indicator>
	turnLeft();
 948:	53 dd       	rcall	.-1370   	; 0x3f0 <turnLeft>
	forward();
 94a:	f2 db       	rcall	.-2076   	; 0x130 <forward>
 94c:	2f ef       	ldi	r18, 0xFF	; 255
 94e:	8f e7       	ldi	r24, 0x7F	; 127
 950:	96 e1       	ldi	r25, 0x16	; 22
 952:	21 50       	subi	r18, 0x01	; 1
 954:	80 40       	sbci	r24, 0x00	; 0
 956:	90 40       	sbci	r25, 0x00	; 0
 958:	e1 f7       	brne	.-8      	; 0x952 <setIndicator+0x24a>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <setIndicator+0x254>
 95c:	00 00       	nop
	_delay_ms(500);
	followLine_Indicator();
 95e:	0f de       	rcall	.-994    	; 0x57e <followLine_Indicator>
	turnLeft();
 960:	47 dd       	rcall	.-1394   	; 0x3f0 <turnLeft>
	followLine_Indicator();
 962:	0d de       	rcall	.-998    	; 0x57e <followLine_Indicator>
}
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	08 95       	ret

0000096c <__init__>:

void __init__()
{
	ct = 2; adj = 0;
 96c:	82 e0       	ldi	r24, 0x02	; 2
 96e:	80 93 24 02 	sts	0x0224, r24
 972:	10 92 2f 02 	sts	0x022F, r1
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
 976:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
 97a:	83 e2       	ldi	r24, 0x23	; 35
 97c:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
 980:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
 984:	93 e5       	ldi	r25, 0x53	; 83
 986:	90 93 8a 00 	sts	0x008A, r25
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
 98a:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
 98e:	80 93 8c 00 	sts	0x008C, r24
 992:	08 95       	ret

00000994 <main>:
	servo_3(0);
	
}
int main(void)
{
	__init__();
 994:	eb df       	rcall	.-42     	; 0x96c <__init__>
	setIndicator();
 996:	b8 de       	rcall	.-656    	; 0x708 <setIndicator>
 998:	ff cf       	rjmp	.-2      	; 0x998 <main+0x4>

0000099a <__divsf3>:
 99a:	0c d0       	rcall	.+24     	; 0x9b4 <__divsf3x>
 99c:	e6 c0       	rjmp	.+460    	; 0xb6a <__fp_round>
 99e:	de d0       	rcall	.+444    	; 0xb5c <__fp_pscB>
 9a0:	40 f0       	brcs	.+16     	; 0x9b2 <__divsf3+0x18>
 9a2:	d5 d0       	rcall	.+426    	; 0xb4e <__fp_pscA>
 9a4:	30 f0       	brcs	.+12     	; 0x9b2 <__divsf3+0x18>
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <__divsf3+0x16>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <__divsf3+0x18>
 9ac:	c7 c0       	rjmp	.+398    	; 0xb3c <__fp_inf>
 9ae:	51 11       	cpse	r21, r1
 9b0:	10 c1       	rjmp	.+544    	; 0xbd2 <__fp_szero>
 9b2:	ca c0       	rjmp	.+404    	; 0xb48 <__fp_nan>

000009b4 <__divsf3x>:
 9b4:	eb d0       	rcall	.+470    	; 0xb8c <__fp_split3>
 9b6:	98 f3       	brcs	.-26     	; 0x99e <__divsf3+0x4>

000009b8 <__divsf3_pse>:
 9b8:	99 23       	and	r25, r25
 9ba:	c9 f3       	breq	.-14     	; 0x9ae <__divsf3+0x14>
 9bc:	55 23       	and	r21, r21
 9be:	b1 f3       	breq	.-20     	; 0x9ac <__divsf3+0x12>
 9c0:	95 1b       	sub	r25, r21
 9c2:	55 0b       	sbc	r21, r21
 9c4:	bb 27       	eor	r27, r27
 9c6:	aa 27       	eor	r26, r26
 9c8:	62 17       	cp	r22, r18
 9ca:	73 07       	cpc	r23, r19
 9cc:	84 07       	cpc	r24, r20
 9ce:	38 f0       	brcs	.+14     	; 0x9de <__divsf3_pse+0x26>
 9d0:	9f 5f       	subi	r25, 0xFF	; 255
 9d2:	5f 4f       	sbci	r21, 0xFF	; 255
 9d4:	22 0f       	add	r18, r18
 9d6:	33 1f       	adc	r19, r19
 9d8:	44 1f       	adc	r20, r20
 9da:	aa 1f       	adc	r26, r26
 9dc:	a9 f3       	breq	.-22     	; 0x9c8 <__divsf3_pse+0x10>
 9de:	33 d0       	rcall	.+102    	; 0xa46 <__divsf3_pse+0x8e>
 9e0:	0e 2e       	mov	r0, r30
 9e2:	3a f0       	brmi	.+14     	; 0x9f2 <__divsf3_pse+0x3a>
 9e4:	e0 e8       	ldi	r30, 0x80	; 128
 9e6:	30 d0       	rcall	.+96     	; 0xa48 <__divsf3_pse+0x90>
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	50 40       	sbci	r21, 0x00	; 0
 9ec:	e6 95       	lsr	r30
 9ee:	00 1c       	adc	r0, r0
 9f0:	ca f7       	brpl	.-14     	; 0x9e4 <__divsf3_pse+0x2c>
 9f2:	29 d0       	rcall	.+82     	; 0xa46 <__divsf3_pse+0x8e>
 9f4:	fe 2f       	mov	r31, r30
 9f6:	27 d0       	rcall	.+78     	; 0xa46 <__divsf3_pse+0x8e>
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	bb 1f       	adc	r27, r27
 a00:	26 17       	cp	r18, r22
 a02:	37 07       	cpc	r19, r23
 a04:	48 07       	cpc	r20, r24
 a06:	ab 07       	cpc	r26, r27
 a08:	b0 e8       	ldi	r27, 0x80	; 128
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__divsf3_pse+0x56>
 a0c:	bb 0b       	sbc	r27, r27
 a0e:	80 2d       	mov	r24, r0
 a10:	bf 01       	movw	r22, r30
 a12:	ff 27       	eor	r31, r31
 a14:	93 58       	subi	r25, 0x83	; 131
 a16:	5f 4f       	sbci	r21, 0xFF	; 255
 a18:	2a f0       	brmi	.+10     	; 0xa24 <__divsf3_pse+0x6c>
 a1a:	9e 3f       	cpi	r25, 0xFE	; 254
 a1c:	51 05       	cpc	r21, r1
 a1e:	68 f0       	brcs	.+26     	; 0xa3a <__divsf3_pse+0x82>
 a20:	8d c0       	rjmp	.+282    	; 0xb3c <__fp_inf>
 a22:	d7 c0       	rjmp	.+430    	; 0xbd2 <__fp_szero>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	ec f3       	brlt	.-6      	; 0xa22 <__divsf3_pse+0x6a>
 a28:	98 3e       	cpi	r25, 0xE8	; 232
 a2a:	dc f3       	brlt	.-10     	; 0xa22 <__divsf3_pse+0x6a>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f7 95       	ror	r31
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__divsf3_pse+0x74>
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret
 a46:	e1 e0       	ldi	r30, 0x01	; 1
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	bb 1f       	adc	r27, r27
 a50:	62 17       	cp	r22, r18
 a52:	73 07       	cpc	r23, r19
 a54:	84 07       	cpc	r24, r20
 a56:	ba 07       	cpc	r27, r26
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__divsf3_pse+0xaa>
 a5a:	62 1b       	sub	r22, r18
 a5c:	73 0b       	sbc	r23, r19
 a5e:	84 0b       	sbc	r24, r20
 a60:	ba 0b       	sbc	r27, r26
 a62:	ee 1f       	adc	r30, r30
 a64:	88 f7       	brcc	.-30     	; 0xa48 <__divsf3_pse+0x90>
 a66:	e0 95       	com	r30
 a68:	08 95       	ret

00000a6a <__fixunssfsi>:
 a6a:	98 d0       	rcall	.+304    	; 0xb9c <__fp_splitA>
 a6c:	88 f0       	brcs	.+34     	; 0xa90 <__fixunssfsi+0x26>
 a6e:	9f 57       	subi	r25, 0x7F	; 127
 a70:	90 f0       	brcs	.+36     	; 0xa96 <__fixunssfsi+0x2c>
 a72:	b9 2f       	mov	r27, r25
 a74:	99 27       	eor	r25, r25
 a76:	b7 51       	subi	r27, 0x17	; 23
 a78:	a0 f0       	brcs	.+40     	; 0xaa2 <__fixunssfsi+0x38>
 a7a:	d1 f0       	breq	.+52     	; 0xab0 <__fixunssfsi+0x46>
 a7c:	66 0f       	add	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	99 1f       	adc	r25, r25
 a84:	1a f0       	brmi	.+6      	; 0xa8c <__fixunssfsi+0x22>
 a86:	ba 95       	dec	r27
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__fixunssfsi+0x12>
 a8a:	12 c0       	rjmp	.+36     	; 0xab0 <__fixunssfsi+0x46>
 a8c:	b1 30       	cpi	r27, 0x01	; 1
 a8e:	81 f0       	breq	.+32     	; 0xab0 <__fixunssfsi+0x46>
 a90:	9f d0       	rcall	.+318    	; 0xbd0 <__fp_zero>
 a92:	b1 e0       	ldi	r27, 0x01	; 1
 a94:	08 95       	ret
 a96:	9c c0       	rjmp	.+312    	; 0xbd0 <__fp_zero>
 a98:	67 2f       	mov	r22, r23
 a9a:	78 2f       	mov	r23, r24
 a9c:	88 27       	eor	r24, r24
 a9e:	b8 5f       	subi	r27, 0xF8	; 248
 aa0:	39 f0       	breq	.+14     	; 0xab0 <__fixunssfsi+0x46>
 aa2:	b9 3f       	cpi	r27, 0xF9	; 249
 aa4:	cc f3       	brlt	.-14     	; 0xa98 <__fixunssfsi+0x2e>
 aa6:	86 95       	lsr	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	b3 95       	inc	r27
 aae:	d9 f7       	brne	.-10     	; 0xaa6 <__fixunssfsi+0x3c>
 ab0:	3e f4       	brtc	.+14     	; 0xac0 <__fixunssfsi+0x56>
 ab2:	90 95       	com	r25
 ab4:	80 95       	com	r24
 ab6:	70 95       	com	r23
 ab8:	61 95       	neg	r22
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	08 95       	ret

00000ac2 <__floatunsisf>:
 ac2:	e8 94       	clt
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <__floatsisf+0x12>

00000ac6 <__floatsisf>:
 ac6:	97 fb       	bst	r25, 7
 ac8:	3e f4       	brtc	.+14     	; 0xad8 <__floatsisf+0x12>
 aca:	90 95       	com	r25
 acc:	80 95       	com	r24
 ace:	70 95       	com	r23
 ad0:	61 95       	neg	r22
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	99 23       	and	r25, r25
 ada:	a9 f0       	breq	.+42     	; 0xb06 <__floatsisf+0x40>
 adc:	f9 2f       	mov	r31, r25
 ade:	96 e9       	ldi	r25, 0x96	; 150
 ae0:	bb 27       	eor	r27, r27
 ae2:	93 95       	inc	r25
 ae4:	f6 95       	lsr	r31
 ae6:	87 95       	ror	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	b7 95       	ror	r27
 aee:	f1 11       	cpse	r31, r1
 af0:	f8 cf       	rjmp	.-16     	; 0xae2 <__floatsisf+0x1c>
 af2:	fa f4       	brpl	.+62     	; 0xb32 <__floatsisf+0x6c>
 af4:	bb 0f       	add	r27, r27
 af6:	11 f4       	brne	.+4      	; 0xafc <__floatsisf+0x36>
 af8:	60 ff       	sbrs	r22, 0
 afa:	1b c0       	rjmp	.+54     	; 0xb32 <__floatsisf+0x6c>
 afc:	6f 5f       	subi	r22, 0xFF	; 255
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	16 c0       	rjmp	.+44     	; 0xb32 <__floatsisf+0x6c>
 b06:	88 23       	and	r24, r24
 b08:	11 f0       	breq	.+4      	; 0xb0e <__floatsisf+0x48>
 b0a:	96 e9       	ldi	r25, 0x96	; 150
 b0c:	11 c0       	rjmp	.+34     	; 0xb30 <__floatsisf+0x6a>
 b0e:	77 23       	and	r23, r23
 b10:	21 f0       	breq	.+8      	; 0xb1a <__floatsisf+0x54>
 b12:	9e e8       	ldi	r25, 0x8E	; 142
 b14:	87 2f       	mov	r24, r23
 b16:	76 2f       	mov	r23, r22
 b18:	05 c0       	rjmp	.+10     	; 0xb24 <__floatsisf+0x5e>
 b1a:	66 23       	and	r22, r22
 b1c:	71 f0       	breq	.+28     	; 0xb3a <__floatsisf+0x74>
 b1e:	96 e8       	ldi	r25, 0x86	; 134
 b20:	86 2f       	mov	r24, r22
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	60 e0       	ldi	r22, 0x00	; 0
 b26:	2a f0       	brmi	.+10     	; 0xb32 <__floatsisf+0x6c>
 b28:	9a 95       	dec	r25
 b2a:	66 0f       	add	r22, r22
 b2c:	77 1f       	adc	r23, r23
 b2e:	88 1f       	adc	r24, r24
 b30:	da f7       	brpl	.-10     	; 0xb28 <__floatsisf+0x62>
 b32:	88 0f       	add	r24, r24
 b34:	96 95       	lsr	r25
 b36:	87 95       	ror	r24
 b38:	97 f9       	bld	r25, 7
 b3a:	08 95       	ret

00000b3c <__fp_inf>:
 b3c:	97 f9       	bld	r25, 7
 b3e:	9f 67       	ori	r25, 0x7F	; 127
 b40:	80 e8       	ldi	r24, 0x80	; 128
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	60 e0       	ldi	r22, 0x00	; 0
 b46:	08 95       	ret

00000b48 <__fp_nan>:
 b48:	9f ef       	ldi	r25, 0xFF	; 255
 b4a:	80 ec       	ldi	r24, 0xC0	; 192
 b4c:	08 95       	ret

00000b4e <__fp_pscA>:
 b4e:	00 24       	eor	r0, r0
 b50:	0a 94       	dec	r0
 b52:	16 16       	cp	r1, r22
 b54:	17 06       	cpc	r1, r23
 b56:	18 06       	cpc	r1, r24
 b58:	09 06       	cpc	r0, r25
 b5a:	08 95       	ret

00000b5c <__fp_pscB>:
 b5c:	00 24       	eor	r0, r0
 b5e:	0a 94       	dec	r0
 b60:	12 16       	cp	r1, r18
 b62:	13 06       	cpc	r1, r19
 b64:	14 06       	cpc	r1, r20
 b66:	05 06       	cpc	r0, r21
 b68:	08 95       	ret

00000b6a <__fp_round>:
 b6a:	09 2e       	mov	r0, r25
 b6c:	03 94       	inc	r0
 b6e:	00 0c       	add	r0, r0
 b70:	11 f4       	brne	.+4      	; 0xb76 <__fp_round+0xc>
 b72:	88 23       	and	r24, r24
 b74:	52 f0       	brmi	.+20     	; 0xb8a <__fp_round+0x20>
 b76:	bb 0f       	add	r27, r27
 b78:	40 f4       	brcc	.+16     	; 0xb8a <__fp_round+0x20>
 b7a:	bf 2b       	or	r27, r31
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__fp_round+0x18>
 b7e:	60 ff       	sbrs	r22, 0
 b80:	04 c0       	rjmp	.+8      	; 0xb8a <__fp_round+0x20>
 b82:	6f 5f       	subi	r22, 0xFF	; 255
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	08 95       	ret

00000b8c <__fp_split3>:
 b8c:	57 fd       	sbrc	r21, 7
 b8e:	90 58       	subi	r25, 0x80	; 128
 b90:	44 0f       	add	r20, r20
 b92:	55 1f       	adc	r21, r21
 b94:	59 f0       	breq	.+22     	; 0xbac <__fp_splitA+0x10>
 b96:	5f 3f       	cpi	r21, 0xFF	; 255
 b98:	71 f0       	breq	.+28     	; 0xbb6 <__fp_splitA+0x1a>
 b9a:	47 95       	ror	r20

00000b9c <__fp_splitA>:
 b9c:	88 0f       	add	r24, r24
 b9e:	97 fb       	bst	r25, 7
 ba0:	99 1f       	adc	r25, r25
 ba2:	61 f0       	breq	.+24     	; 0xbbc <__fp_splitA+0x20>
 ba4:	9f 3f       	cpi	r25, 0xFF	; 255
 ba6:	79 f0       	breq	.+30     	; 0xbc6 <__fp_splitA+0x2a>
 ba8:	87 95       	ror	r24
 baa:	08 95       	ret
 bac:	12 16       	cp	r1, r18
 bae:	13 06       	cpc	r1, r19
 bb0:	14 06       	cpc	r1, r20
 bb2:	55 1f       	adc	r21, r21
 bb4:	f2 cf       	rjmp	.-28     	; 0xb9a <__fp_split3+0xe>
 bb6:	46 95       	lsr	r20
 bb8:	f1 df       	rcall	.-30     	; 0xb9c <__fp_splitA>
 bba:	08 c0       	rjmp	.+16     	; 0xbcc <__fp_splitA+0x30>
 bbc:	16 16       	cp	r1, r22
 bbe:	17 06       	cpc	r1, r23
 bc0:	18 06       	cpc	r1, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	f1 cf       	rjmp	.-30     	; 0xba8 <__fp_splitA+0xc>
 bc6:	86 95       	lsr	r24
 bc8:	71 05       	cpc	r23, r1
 bca:	61 05       	cpc	r22, r1
 bcc:	08 94       	sec
 bce:	08 95       	ret

00000bd0 <__fp_zero>:
 bd0:	e8 94       	clt

00000bd2 <__fp_szero>:
 bd2:	bb 27       	eor	r27, r27
 bd4:	66 27       	eor	r22, r22
 bd6:	77 27       	eor	r23, r23
 bd8:	cb 01       	movw	r24, r22
 bda:	97 f9       	bld	r25, 7
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
