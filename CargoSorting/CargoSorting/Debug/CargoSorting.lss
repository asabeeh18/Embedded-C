
CargoSorting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00002f22  00002fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800206  00800206  00002fbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000338  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032a4  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000439  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025b7  00000000  00000000  00006a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008fc  00000000  00000000  00008fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e4  00000000  00000000  000098b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f44  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000358  00000000  00000000  0000bfdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	59 c1       	rjmp	.+690    	; 0x2b8 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__vector_5>
      16:	00 00       	nop
      18:	13 c2       	rjmp	.+1062   	; 0x440 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e2       	ldi	r30, 0x22	; 34
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 30       	cpi	r26, 0x06	; 6
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a6 e0       	ldi	r26, 0x06	; 6
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 36       	cpi	r26, 0x6B	; 107
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ed 15 	call	0x2bda	; 0x2bda <main>
     122:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <timer5_init>:
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	e1 e2       	ldi	r30, 0x21	; 33
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	10 82       	st	Z, r1
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	80 93 25 01 	sts	0x0125, r24
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	90 93 24 01 	sts	0x0124, r25
     13a:	10 92 29 01 	sts	0x0129, r1
     13e:	80 93 28 01 	sts	0x0128, r24
     142:	10 92 2b 01 	sts	0x012B, r1
     146:	80 93 2a 01 	sts	0x012A, r24
     14a:	10 92 2d 01 	sts	0x012D, r1
     14e:	80 93 2c 01 	sts	0x012C, r24
     152:	89 ea       	ldi	r24, 0xA9	; 169
     154:	80 93 20 01 	sts	0x0120, r24
     158:	8b e0       	ldi	r24, 0x0B	; 11
     15a:	80 83       	st	Z, r24
     15c:	08 95       	ret

0000015e <motion_pin_config>:
     15e:	81 b1       	in	r24, 0x01	; 1
     160:	8f 60       	ori	r24, 0x0F	; 15
     162:	81 b9       	out	0x01, r24	; 1
     164:	82 b1       	in	r24, 0x02	; 2
     166:	80 7f       	andi	r24, 0xF0	; 240
     168:	82 b9       	out	0x02, r24	; 2
     16a:	ea e0       	ldi	r30, 0x0A	; 10
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	80 81       	ld	r24, Z
     170:	88 61       	ori	r24, 0x18	; 24
     172:	80 83       	st	Z, r24
     174:	eb e0       	ldi	r30, 0x0B	; 11
     176:	f1 e0       	ldi	r31, 0x01	; 1
     178:	80 81       	ld	r24, Z
     17a:	88 61       	ori	r24, 0x18	; 24
     17c:	80 83       	st	Z, r24
     17e:	08 95       	ret

00000180 <motion_set>:
     180:	92 b1       	in	r25, 0x02	; 2
     182:	90 7f       	andi	r25, 0xF0	; 240
     184:	8f 70       	andi	r24, 0x0F	; 15
     186:	98 2b       	or	r25, r24
     188:	92 b9       	out	0x02, r25	; 2
     18a:	08 95       	ret

0000018c <forward>:
     18c:	86 e0       	ldi	r24, 0x06	; 6
     18e:	f8 cf       	rjmp	.-16     	; 0x180 <motion_set>
     190:	08 95       	ret

00000192 <back>:
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	f5 cf       	rjmp	.-22     	; 0x180 <motion_set>
     196:	08 95       	ret

00000198 <left>:
     198:	85 e0       	ldi	r24, 0x05	; 5
     19a:	f2 cf       	rjmp	.-28     	; 0x180 <motion_set>
     19c:	08 95       	ret

0000019e <right>:
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	ef cf       	rjmp	.-34     	; 0x180 <motion_set>
     1a2:	08 95       	ret

000001a4 <soft_left>:
     1a4:	84 e0       	ldi	r24, 0x04	; 4
     1a6:	ec cf       	rjmp	.-40     	; 0x180 <motion_set>
     1a8:	08 95       	ret

000001aa <soft_right>:
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	e9 cf       	rjmp	.-46     	; 0x180 <motion_set>
     1ae:	08 95       	ret

000001b0 <soft_left_2>:
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	e6 cf       	rjmp	.-52     	; 0x180 <motion_set>
     1b4:	08 95       	ret

000001b6 <soft_right_2>:
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	e3 cf       	rjmp	.-58     	; 0x180 <motion_set>
     1ba:	08 95       	ret

000001bc <stop>:
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	e0 cf       	rjmp	.-64     	; 0x180 <motion_set>
     1c0:	08 95       	ret

000001c2 <servo_1_free>:
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	80 93 89 00 	sts	0x0089, r24
     1c8:	8f ef       	ldi	r24, 0xFF	; 255
     1ca:	80 93 88 00 	sts	0x0088, r24
     1ce:	08 95       	ret

000001d0 <servo_2_free>:
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	80 93 8b 00 	sts	0x008B, r24
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 93 8a 00 	sts	0x008A, r24
     1dc:	08 95       	ret

000001de <servo_3_free>:
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	80 93 8d 00 	sts	0x008D, r24
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	80 93 8c 00 	sts	0x008C, r24
     1ea:	08 95       	ret

000001ec <servo1_pin_config>:
     1ec:	25 9a       	sbi	0x04, 5	; 4
     1ee:	2d 9a       	sbi	0x05, 5	; 5
     1f0:	08 95       	ret

000001f2 <servo2_pin_config>:
     1f2:	26 9a       	sbi	0x04, 6	; 4
     1f4:	2e 9a       	sbi	0x05, 6	; 5
     1f6:	08 95       	ret

000001f8 <servo3_pin_config>:
     1f8:	27 9a       	sbi	0x04, 7	; 4
     1fa:	2f 9a       	sbi	0x05, 7	; 5
     1fc:	08 95       	ret

000001fe <timer1_init>:
     1fe:	e1 e8       	ldi	r30, 0x81	; 129
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	10 82       	st	Z, r1
     204:	8c ef       	ldi	r24, 0xFC	; 252
     206:	80 93 85 00 	sts	0x0085, r24
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 84 00 	sts	0x0084, r24
     210:	93 e0       	ldi	r25, 0x03	; 3
     212:	90 93 89 00 	sts	0x0089, r25
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	80 93 88 00 	sts	0x0088, r24
     21c:	90 93 8b 00 	sts	0x008B, r25
     220:	80 93 8a 00 	sts	0x008A, r24
     224:	90 93 8d 00 	sts	0x008D, r25
     228:	80 93 8c 00 	sts	0x008C, r24
     22c:	90 93 87 00 	sts	0x0087, r25
     230:	80 93 86 00 	sts	0x0086, r24
     234:	8b ea       	ldi	r24, 0xAB	; 171
     236:	80 93 80 00 	sts	0x0080, r24
     23a:	10 92 82 00 	sts	0x0082, r1
     23e:	8c e0       	ldi	r24, 0x0C	; 12
     240:	80 83       	st	Z, r24
     242:	08 95       	ret

00000244 <adc_pin_config>:
     244:	10 ba       	out	0x10, r1	; 16
     246:	11 ba       	out	0x11, r1	; 17
     248:	10 92 07 01 	sts	0x0107, r1
     24c:	10 92 08 01 	sts	0x0108, r1
     250:	08 95       	ret

00000252 <buzzer_on>:
     252:	86 b1       	in	r24, 0x06	; 6
     254:	88 60       	ori	r24, 0x08	; 8
     256:	88 b9       	out	0x08, r24	; 8
     258:	08 95       	ret

0000025a <buzzer_off>:
     25a:	86 b1       	in	r24, 0x06	; 6
     25c:	87 7f       	andi	r24, 0xF7	; 247
     25e:	88 b9       	out	0x08, r24	; 8
     260:	08 95       	ret

00000262 <buzzer_init>:
     262:	3b 9a       	sbi	0x07, 3	; 7
     264:	43 98       	cbi	0x08, 3	; 8
     266:	08 95       	ret

00000268 <ADC_Conversion>:
     268:	88 30       	cpi	r24, 0x08	; 8
     26a:	18 f0       	brcs	.+6      	; 0x272 <ADC_Conversion+0xa>
     26c:	98 e0       	ldi	r25, 0x08	; 8
     26e:	90 93 7b 00 	sts	0x007B, r25
     272:	87 70       	andi	r24, 0x07	; 7
     274:	80 62       	ori	r24, 0x20	; 32
     276:	80 93 7c 00 	sts	0x007C, r24
     27a:	ea e7       	ldi	r30, 0x7A	; 122
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	80 64       	ori	r24, 0x40	; 64
     282:	80 83       	st	Z, r24
     284:	80 81       	ld	r24, Z
     286:	84 ff       	sbrs	r24, 4
     288:	fd cf       	rjmp	.-6      	; 0x284 <ADC_Conversion+0x1c>
     28a:	80 91 79 00 	lds	r24, 0x0079
     28e:	ea e7       	ldi	r30, 0x7A	; 122
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	90 81       	ld	r25, Z
     294:	90 61       	ori	r25, 0x10	; 16
     296:	90 83       	st	Z, r25
     298:	10 92 7b 00 	sts	0x007B, r1
     29c:	08 95       	ret

0000029e <adc_init>:
     29e:	ea e7       	ldi	r30, 0x7A	; 122
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	10 82       	st	Z, r1
     2a4:	10 92 7b 00 	sts	0x007B, r1
     2a8:	80 e2       	ldi	r24, 0x20	; 32
     2aa:	80 93 7c 00 	sts	0x007C, r24
     2ae:	80 e8       	ldi	r24, 0x80	; 128
     2b0:	80 bf       	out	0x30, r24	; 48
     2b2:	86 e8       	ldi	r24, 0x86	; 134
     2b4:	80 83       	st	Z, r24
     2b6:	08 95       	ret

000002b8 <__vector_1>:
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	80 91 14 02 	lds	r24, 0x0214
     2ce:	90 91 15 02 	lds	r25, 0x0215
     2d2:	a0 91 16 02 	lds	r26, 0x0216
     2d6:	b0 91 17 02 	lds	r27, 0x0217
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
     2e0:	80 93 14 02 	sts	0x0214, r24
     2e4:	90 93 15 02 	sts	0x0215, r25
     2e8:	a0 93 16 02 	sts	0x0216, r26
     2ec:	b0 93 17 02 	sts	0x0217, r27
     2f0:	bf 91       	pop	r27
     2f2:	af 91       	pop	r26
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <color_sensor_pin_config>:
     302:	8a b1       	in	r24, 0x0a	; 10
     304:	8e 6f       	ori	r24, 0xFE	; 254
     306:	8a b9       	out	0x0a, r24	; 10
     308:	58 9a       	sbi	0x0b, 0	; 11
     30a:	08 95       	ret

0000030c <color_sensor_pin_interrupt_init>:
     30c:	f8 94       	cli
     30e:	e9 e6       	ldi	r30, 0x69	; 105
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	82 60       	ori	r24, 0x02	; 2
     316:	80 83       	st	Z, r24
     318:	e8 9a       	sbi	0x1d, 0	; 29
     31a:	78 94       	sei
     31c:	08 95       	ret

0000031e <filter_red>:
     31e:	5e 98       	cbi	0x0b, 6	; 11
     320:	5f 98       	cbi	0x0b, 7	; 11
     322:	08 95       	ret

00000324 <filter_green>:
     324:	5e 9a       	sbi	0x0b, 6	; 11
     326:	5f 9a       	sbi	0x0b, 7	; 11
     328:	08 95       	ret

0000032a <filter_blue>:
     32a:	5e 98       	cbi	0x0b, 6	; 11
     32c:	5f 9a       	sbi	0x0b, 7	; 11
     32e:	08 95       	ret

00000330 <color_sensor_scaling>:
     330:	5c 9a       	sbi	0x0b, 4	; 11
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	08 95       	ret

00000336 <red_read>:
     336:	f3 df       	rcall	.-26     	; 0x31e <filter_red>
     338:	10 92 14 02 	sts	0x0214, r1
     33c:	10 92 15 02 	sts	0x0215, r1
     340:	10 92 16 02 	sts	0x0216, r1
     344:	10 92 17 02 	sts	0x0217, r1
     348:	2f ef       	ldi	r18, 0xFF	; 255
     34a:	8f e7       	ldi	r24, 0x7F	; 127
     34c:	94 e0       	ldi	r25, 0x04	; 4
     34e:	21 50       	subi	r18, 0x01	; 1
     350:	80 40       	sbci	r24, 0x00	; 0
     352:	90 40       	sbci	r25, 0x00	; 0
     354:	e1 f7       	brne	.-8      	; 0x34e <red_read+0x18>
     356:	00 c0       	rjmp	.+0      	; 0x358 <red_read+0x22>
     358:	00 00       	nop
     35a:	80 91 14 02 	lds	r24, 0x0214
     35e:	90 91 15 02 	lds	r25, 0x0215
     362:	a0 91 16 02 	lds	r26, 0x0216
     366:	b0 91 17 02 	lds	r27, 0x0217
     36a:	80 93 36 02 	sts	0x0236, r24
     36e:	90 93 37 02 	sts	0x0237, r25
     372:	a0 93 38 02 	sts	0x0238, r26
     376:	b0 93 39 02 	sts	0x0239, r27
     37a:	08 95       	ret

0000037c <green_read>:
     37c:	d3 df       	rcall	.-90     	; 0x324 <filter_green>
     37e:	10 92 14 02 	sts	0x0214, r1
     382:	10 92 15 02 	sts	0x0215, r1
     386:	10 92 16 02 	sts	0x0216, r1
     38a:	10 92 17 02 	sts	0x0217, r1
     38e:	2f ef       	ldi	r18, 0xFF	; 255
     390:	8f e7       	ldi	r24, 0x7F	; 127
     392:	94 e0       	ldi	r25, 0x04	; 4
     394:	21 50       	subi	r18, 0x01	; 1
     396:	80 40       	sbci	r24, 0x00	; 0
     398:	90 40       	sbci	r25, 0x00	; 0
     39a:	e1 f7       	brne	.-8      	; 0x394 <green_read+0x18>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <green_read+0x22>
     39e:	00 00       	nop
     3a0:	80 91 14 02 	lds	r24, 0x0214
     3a4:	90 91 15 02 	lds	r25, 0x0215
     3a8:	a0 91 16 02 	lds	r26, 0x0216
     3ac:	b0 91 17 02 	lds	r27, 0x0217
     3b0:	80 93 32 02 	sts	0x0232, r24
     3b4:	90 93 33 02 	sts	0x0233, r25
     3b8:	a0 93 34 02 	sts	0x0234, r26
     3bc:	b0 93 35 02 	sts	0x0235, r27
     3c0:	08 95       	ret

000003c2 <blue_read>:
     3c2:	b3 df       	rcall	.-154    	; 0x32a <filter_blue>
     3c4:	10 92 14 02 	sts	0x0214, r1
     3c8:	10 92 15 02 	sts	0x0215, r1
     3cc:	10 92 16 02 	sts	0x0216, r1
     3d0:	10 92 17 02 	sts	0x0217, r1
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	8f e7       	ldi	r24, 0x7F	; 127
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	90 40       	sbci	r25, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <blue_read+0x18>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <blue_read+0x22>
     3e4:	00 00       	nop
     3e6:	80 91 14 02 	lds	r24, 0x0214
     3ea:	90 91 15 02 	lds	r25, 0x0215
     3ee:	a0 91 16 02 	lds	r26, 0x0216
     3f2:	b0 91 17 02 	lds	r27, 0x0217
     3f6:	80 93 2a 02 	sts	0x022A, r24
     3fa:	90 93 2b 02 	sts	0x022B, r25
     3fe:	a0 93 2c 02 	sts	0x022C, r26
     402:	b0 93 2d 02 	sts	0x022D, r27
     406:	08 95       	ret

00000408 <left_encoder_pin_config>:
     408:	6c 98       	cbi	0x0d, 4	; 13
     40a:	74 9a       	sbi	0x0e, 4	; 14
     40c:	08 95       	ret

0000040e <right_encoder_pin_config>:
     40e:	6d 98       	cbi	0x0d, 5	; 13
     410:	75 9a       	sbi	0x0e, 5	; 14
     412:	08 95       	ret

00000414 <port_init_poz>:
     414:	a4 de       	rcall	.-696    	; 0x15e <motion_pin_config>
     416:	f8 df       	rcall	.-16     	; 0x408 <left_encoder_pin_config>
     418:	fa cf       	rjmp	.-12     	; 0x40e <right_encoder_pin_config>
     41a:	08 95       	ret

0000041c <left_position_encoder_interrupt_init>:
     41c:	f8 94       	cli
     41e:	ea e6       	ldi	r30, 0x6A	; 106
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	82 60       	ori	r24, 0x02	; 2
     426:	80 83       	st	Z, r24
     428:	ec 9a       	sbi	0x1d, 4	; 29
     42a:	78 94       	sei
     42c:	08 95       	ret

0000042e <right_position_encoder_interrupt_init>:
     42e:	f8 94       	cli
     430:	ea e6       	ldi	r30, 0x6A	; 106
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	88 60       	ori	r24, 0x08	; 8
     438:	80 83       	st	Z, r24
     43a:	ed 9a       	sbi	0x1d, 5	; 29
     43c:	78 94       	sei
     43e:	08 95       	ret

00000440 <__vector_6>:
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	80 91 18 02 	lds	r24, 0x0218
     456:	90 91 19 02 	lds	r25, 0x0219
     45a:	a0 91 1a 02 	lds	r26, 0x021A
     45e:	b0 91 1b 02 	lds	r27, 0x021B
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	a1 1d       	adc	r26, r1
     466:	b1 1d       	adc	r27, r1
     468:	80 93 18 02 	sts	0x0218, r24
     46c:	90 93 19 02 	sts	0x0219, r25
     470:	a0 93 1a 02 	sts	0x021A, r26
     474:	b0 93 1b 02 	sts	0x021B, r27
     478:	bf 91       	pop	r27
     47a:	af 91       	pop	r26
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <__vector_5>:
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	80 91 1c 02 	lds	r24, 0x021C
     4a0:	90 91 1d 02 	lds	r25, 0x021D
     4a4:	a0 91 1e 02 	lds	r26, 0x021E
     4a8:	b0 91 1f 02 	lds	r27, 0x021F
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 1c 02 	sts	0x021C, r24
     4b6:	90 93 1d 02 	sts	0x021D, r25
     4ba:	a0 93 1e 02 	sts	0x021E, r26
     4be:	b0 93 1f 02 	sts	0x021F, r27
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <angle_rotate>:
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	bc 01       	movw	r22, r24
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__floatunsisf>
     4ea:	28 e4       	ldi	r18, 0x48	; 72
     4ec:	31 ee       	ldi	r19, 0xE1	; 225
     4ee:	42 e8       	ldi	r20, 0x82	; 130
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divsf3>
     4f6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__fixunssfsi>
     4fa:	cb 01       	movw	r24, r22
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	10 92 18 02 	sts	0x0218, r1
     504:	10 92 19 02 	sts	0x0219, r1
     508:	10 92 1a 02 	sts	0x021A, r1
     50c:	10 92 1b 02 	sts	0x021B, r1
     510:	10 92 1c 02 	sts	0x021C, r1
     514:	10 92 1d 02 	sts	0x021D, r1
     518:	10 92 1e 02 	sts	0x021E, r1
     51c:	10 92 1f 02 	sts	0x021F, r1
     520:	51 e0       	ldi	r21, 0x01	; 1
     522:	e0 e0       	ldi	r30, 0x00	; 0
     524:	c0 90 18 02 	lds	r12, 0x0218
     528:	d0 90 19 02 	lds	r13, 0x0219
     52c:	e0 90 1a 02 	lds	r14, 0x021A
     530:	f0 90 1b 02 	lds	r15, 0x021B
     534:	00 91 1c 02 	lds	r16, 0x021C
     538:	10 91 1d 02 	lds	r17, 0x021D
     53c:	20 91 1e 02 	lds	r18, 0x021E
     540:	30 91 1f 02 	lds	r19, 0x021F
     544:	45 2f       	mov	r20, r21
     546:	08 17       	cp	r16, r24
     548:	19 07       	cpc	r17, r25
     54a:	2a 07       	cpc	r18, r26
     54c:	3b 07       	cpc	r19, r27
     54e:	08 f4       	brcc	.+2      	; 0x552 <angle_rotate+0x7e>
     550:	4e 2f       	mov	r20, r30
     552:	41 11       	cpse	r20, r1
     554:	09 c0       	rjmp	.+18     	; 0x568 <angle_rotate+0x94>
     556:	25 2f       	mov	r18, r21
     558:	c8 16       	cp	r12, r24
     55a:	d9 06       	cpc	r13, r25
     55c:	ea 06       	cpc	r14, r26
     55e:	fb 06       	cpc	r15, r27
     560:	08 f4       	brcc	.+2      	; 0x564 <angle_rotate+0x90>
     562:	2e 2f       	mov	r18, r30
     564:	22 23       	and	r18, r18
     566:	f1 f2       	breq	.-68     	; 0x524 <angle_rotate+0x50>
     568:	29 de       	rcall	.-942    	; 0x1bc <stop>
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	08 95       	ret

00000578 <linear_distance_mm>:
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	bc 01       	movw	r22, r24
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__floatunsisf>
     586:	25 ee       	ldi	r18, 0xE5	; 229
     588:	30 ed       	ldi	r19, 0xD0	; 208
     58a:	4a ea       	ldi	r20, 0xAA	; 170
     58c:	50 e4       	ldi	r21, 0x40	; 64
     58e:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divsf3>
     592:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__fixunssfsi>
     596:	10 92 18 02 	sts	0x0218, r1
     59a:	10 92 19 02 	sts	0x0219, r1
     59e:	10 92 1a 02 	sts	0x021A, r1
     5a2:	10 92 1b 02 	sts	0x021B, r1
     5a6:	00 91 18 02 	lds	r16, 0x0218
     5aa:	10 91 19 02 	lds	r17, 0x0219
     5ae:	20 91 1a 02 	lds	r18, 0x021A
     5b2:	30 91 1b 02 	lds	r19, 0x021B
     5b6:	60 17       	cp	r22, r16
     5b8:	71 07       	cpc	r23, r17
     5ba:	82 07       	cpc	r24, r18
     5bc:	93 07       	cpc	r25, r19
     5be:	98 f7       	brcc	.-26     	; 0x5a6 <linear_distance_mm+0x2e>
     5c0:	fd dd       	rcall	.-1030   	; 0x1bc <stop>
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <forward_mm>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ec 01       	movw	r28, r24
     5ce:	de dd       	rcall	.-1092   	; 0x18c <forward>
     5d0:	ce 01       	movw	r24, r28
     5d2:	d2 df       	rcall	.-92     	; 0x578 <linear_distance_mm>
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <back_mm>:
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	d8 dd       	rcall	.-1104   	; 0x192 <back>
     5e2:	ce 01       	movw	r24, r28
     5e4:	c9 df       	rcall	.-110    	; 0x578 <linear_distance_mm>
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <left_degrees>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	d2 dd       	rcall	.-1116   	; 0x198 <left>
     5f4:	ce 01       	movw	r24, r28
     5f6:	6e df       	rcall	.-292    	; 0x4d4 <angle_rotate>
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <right_degrees>:
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
     604:	cc dd       	rcall	.-1128   	; 0x19e <right>
     606:	ce 01       	movw	r24, r28
     608:	65 df       	rcall	.-310    	; 0x4d4 <angle_rotate>
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <port_init>:
     610:	19 de       	rcall	.-974    	; 0x244 <adc_pin_config>
     612:	27 de       	rcall	.-946    	; 0x262 <buzzer_init>
     614:	eb dd       	rcall	.-1066   	; 0x1ec <servo1_pin_config>
     616:	ed dd       	rcall	.-1062   	; 0x1f2 <servo2_pin_config>
     618:	ef dd       	rcall	.-1058   	; 0x1f8 <servo3_pin_config>
     61a:	73 ce       	rjmp	.-794    	; 0x302 <color_sensor_pin_config>
     61c:	08 95       	ret

0000061e <init_devices>:
     61e:	f8 94       	cli
     620:	f9 de       	rcall	.-526    	; 0x414 <port_init_poz>
     622:	fc de       	rcall	.-520    	; 0x41c <left_position_encoder_interrupt_init>
     624:	04 df       	rcall	.-504    	; 0x42e <right_position_encoder_interrupt_init>
     626:	f4 df       	rcall	.-24     	; 0x610 <port_init>
     628:	71 de       	rcall	.-798    	; 0x30c <color_sensor_pin_interrupt_init>
     62a:	39 de       	rcall	.-910    	; 0x29e <adc_init>
     62c:	98 dd       	rcall	.-1232   	; 0x15e <motion_pin_config>
     62e:	7c dd       	rcall	.-1288   	; 0x128 <timer5_init>
     630:	e6 dd       	rcall	.-1076   	; 0x1fe <timer1_init>
     632:	78 94       	sei
     634:	08 95       	ret

00000636 <set_color>:
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	17 de       	rcall	.-978    	; 0x268 <ADC_Conversion>
     63a:	80 93 09 02 	sts	0x0209, r24
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	13 de       	rcall	.-986    	; 0x268 <ADC_Conversion>
     642:	80 93 08 02 	sts	0x0208, r24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0f de       	rcall	.-994    	; 0x268 <ADC_Conversion>
     64a:	80 93 07 02 	sts	0x0207, r24
     64e:	08 95       	ret

00000650 <scan>:
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	70 de       	rcall	.-800    	; 0x336 <red_read>
     656:	b5 de       	rcall	.-662    	; 0x3c2 <blue_read>
     658:	91 de       	rcall	.-734    	; 0x37c <green_read>
     65a:	8b e0       	ldi	r24, 0x0B	; 11
     65c:	05 de       	rcall	.-1014   	; 0x268 <ADC_Conversion>
     65e:	88 33       	cpi	r24, 0x38	; 56
     660:	08 f4       	brcc	.+2      	; 0x664 <scan+0x14>
     662:	7b c0       	rjmp	.+246    	; 0x75a <scan+0x10a>
     664:	8b e0       	ldi	r24, 0x0B	; 11
     666:	00 de       	rcall	.-1024   	; 0x268 <ADC_Conversion>
     668:	84 36       	cpi	r24, 0x64	; 100
     66a:	08 f0       	brcs	.+2      	; 0x66e <scan+0x1e>
     66c:	79 c0       	rjmp	.+242    	; 0x760 <scan+0x110>
     66e:	80 91 28 02 	lds	r24, 0x0228
     672:	90 91 29 02 	lds	r25, 0x0229
     676:	aa 27       	eor	r26, r26
     678:	97 fd       	sbrc	r25, 7
     67a:	a0 95       	com	r26
     67c:	ba 2f       	mov	r27, r26
     67e:	40 91 36 02 	lds	r20, 0x0236
     682:	50 91 37 02 	lds	r21, 0x0237
     686:	60 91 38 02 	lds	r22, 0x0238
     68a:	70 91 39 02 	lds	r23, 0x0239
     68e:	48 17       	cp	r20, r24
     690:	59 07       	cpc	r21, r25
     692:	6a 07       	cpc	r22, r26
     694:	7b 07       	cpc	r23, r27
     696:	d8 f4       	brcc	.+54     	; 0x6ce <scan+0x7e>
     698:	40 91 32 02 	lds	r20, 0x0232
     69c:	50 91 33 02 	lds	r21, 0x0233
     6a0:	60 91 34 02 	lds	r22, 0x0234
     6a4:	70 91 35 02 	lds	r23, 0x0235
     6a8:	48 17       	cp	r20, r24
     6aa:	59 07       	cpc	r21, r25
     6ac:	6a 07       	cpc	r22, r26
     6ae:	7b 07       	cpc	r23, r27
     6b0:	70 f4       	brcc	.+28     	; 0x6ce <scan+0x7e>
     6b2:	40 91 2a 02 	lds	r20, 0x022A
     6b6:	50 91 2b 02 	lds	r21, 0x022B
     6ba:	60 91 2c 02 	lds	r22, 0x022C
     6be:	70 91 2d 02 	lds	r23, 0x022D
     6c2:	48 17       	cp	r20, r24
     6c4:	59 07       	cpc	r21, r25
     6c6:	6a 07       	cpc	r22, r26
     6c8:	7b 07       	cpc	r23, r27
     6ca:	08 f4       	brcc	.+2      	; 0x6ce <scan+0x7e>
     6cc:	4c c0       	rjmp	.+152    	; 0x766 <scan+0x116>
     6ce:	40 91 36 02 	lds	r20, 0x0236
     6d2:	50 91 37 02 	lds	r21, 0x0237
     6d6:	60 91 38 02 	lds	r22, 0x0238
     6da:	70 91 39 02 	lds	r23, 0x0239
     6de:	80 91 2a 02 	lds	r24, 0x022A
     6e2:	90 91 2b 02 	lds	r25, 0x022B
     6e6:	a0 91 2c 02 	lds	r26, 0x022C
     6ea:	b0 91 2d 02 	lds	r27, 0x022D
     6ee:	84 17       	cp	r24, r20
     6f0:	95 07       	cpc	r25, r21
     6f2:	a6 07       	cpc	r26, r22
     6f4:	b7 07       	cpc	r27, r23
     6f6:	c8 f4       	brcc	.+50     	; 0x72a <scan+0xda>
     6f8:	00 91 36 02 	lds	r16, 0x0236
     6fc:	10 91 37 02 	lds	r17, 0x0237
     700:	20 91 38 02 	lds	r18, 0x0238
     704:	30 91 39 02 	lds	r19, 0x0239
     708:	40 91 32 02 	lds	r20, 0x0232
     70c:	50 91 33 02 	lds	r21, 0x0233
     710:	60 91 34 02 	lds	r22, 0x0234
     714:	70 91 35 02 	lds	r23, 0x0235
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	40 17       	cp	r20, r16
     71e:	51 07       	cpc	r21, r17
     720:	62 07       	cpc	r22, r18
     722:	73 07       	cpc	r23, r19
     724:	28 f5       	brcc	.+74     	; 0x770 <scan+0x120>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	23 c0       	rjmp	.+70     	; 0x770 <scan+0x120>
     72a:	40 91 2a 02 	lds	r20, 0x022A
     72e:	50 91 2b 02 	lds	r21, 0x022B
     732:	60 91 2c 02 	lds	r22, 0x022C
     736:	70 91 2d 02 	lds	r23, 0x022D
     73a:	80 91 32 02 	lds	r24, 0x0232
     73e:	90 91 33 02 	lds	r25, 0x0233
     742:	a0 91 34 02 	lds	r26, 0x0234
     746:	b0 91 35 02 	lds	r27, 0x0235
     74a:	84 17       	cp	r24, r20
     74c:	95 07       	cpc	r25, r21
     74e:	a6 07       	cpc	r26, r22
     750:	b7 07       	cpc	r27, r23
     752:	60 f4       	brcc	.+24     	; 0x76c <scan+0x11c>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0b c0       	rjmp	.+22     	; 0x770 <scan+0x120>
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	9f ef       	ldi	r25, 0xFF	; 255
     75e:	08 c0       	rjmp	.+16     	; 0x770 <scan+0x120>
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	05 c0       	rjmp	.+10     	; 0x770 <scan+0x120>
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	02 c0       	rjmp	.+4      	; 0x770 <scan+0x120>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <lower>:
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	31 f4       	brne	.+12     	; 0x786 <lower+0x10>
     77a:	10 92 8b 00 	sts	0x008B, r1
     77e:	80 e4       	ldi	r24, 0x40	; 64
     780:	80 93 8a 00 	sts	0x008A, r24
     784:	05 c0       	rjmp	.+10     	; 0x790 <lower+0x1a>
     786:	10 92 8b 00 	sts	0x008B, r1
     78a:	83 e6       	ldi	r24, 0x63	; 99
     78c:	80 93 8a 00 	sts	0x008A, r24
     790:	2f ef       	ldi	r18, 0xFF	; 255
     792:	8f e7       	ldi	r24, 0x7F	; 127
     794:	96 e1       	ldi	r25, 0x16	; 22
     796:	21 50       	subi	r18, 0x01	; 1
     798:	80 40       	sbci	r24, 0x00	; 0
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <lower+0x20>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <lower+0x2a>
     7a0:	00 00       	nop
     7a2:	08 95       	ret

000007a4 <elevate>:
     7a4:	10 92 8b 00 	sts	0x008B, r1
     7a8:	83 e5       	ldi	r24, 0x53	; 83
     7aa:	80 93 8a 00 	sts	0x008A, r24
     7ae:	2f ef       	ldi	r18, 0xFF	; 255
     7b0:	8f e7       	ldi	r24, 0x7F	; 127
     7b2:	96 e1       	ldi	r25, 0x16	; 22
     7b4:	21 50       	subi	r18, 0x01	; 1
     7b6:	80 40       	sbci	r24, 0x00	; 0
     7b8:	90 40       	sbci	r25, 0x00	; 0
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <elevate+0x10>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <elevate+0x1a>
     7be:	00 00       	nop
     7c0:	07 dd       	rcall	.-1522   	; 0x1d0 <servo_2_free>
     7c2:	2f ef       	ldi	r18, 0xFF	; 255
     7c4:	8f e7       	ldi	r24, 0x7F	; 127
     7c6:	96 e1       	ldi	r25, 0x16	; 22
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	90 40       	sbci	r25, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <elevate+0x24>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <elevate+0x2e>
     7d2:	00 00       	nop
     7d4:	08 95       	ret

000007d6 <open>:
     7d6:	81 11       	cpse	r24, r1
     7d8:	19 c0       	rjmp	.+50     	; 0x80c <open+0x36>
     7da:	10 92 8d 00 	sts	0x008D, r1
     7de:	83 e5       	ldi	r24, 0x53	; 83
     7e0:	80 93 8c 00 	sts	0x008C, r24
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	8f e7       	ldi	r24, 0x7F	; 127
     7e8:	96 e1       	ldi	r25, 0x16	; 22
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	80 40       	sbci	r24, 0x00	; 0
     7ee:	90 40       	sbci	r25, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <open+0x14>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <open+0x1e>
     7f4:	00 00       	nop
     7f6:	f3 dc       	rcall	.-1562   	; 0x1de <servo_3_free>
     7f8:	2f ef       	ldi	r18, 0xFF	; 255
     7fa:	8f e7       	ldi	r24, 0x7F	; 127
     7fc:	96 e1       	ldi	r25, 0x16	; 22
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	80 40       	sbci	r24, 0x00	; 0
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <open+0x28>
     806:	00 c0       	rjmp	.+0      	; 0x808 <open+0x32>
     808:	00 00       	nop
     80a:	08 95       	ret
     80c:	10 92 89 00 	sts	0x0089, r1
     810:	83 e2       	ldi	r24, 0x23	; 35
     812:	80 93 88 00 	sts	0x0088, r24
     816:	2f ef       	ldi	r18, 0xFF	; 255
     818:	8f e7       	ldi	r24, 0x7F	; 127
     81a:	96 e1       	ldi	r25, 0x16	; 22
     81c:	21 50       	subi	r18, 0x01	; 1
     81e:	80 40       	sbci	r24, 0x00	; 0
     820:	90 40       	sbci	r25, 0x00	; 0
     822:	e1 f7       	brne	.-8      	; 0x81c <open+0x46>
     824:	00 c0       	rjmp	.+0      	; 0x826 <open+0x50>
     826:	00 00       	nop
     828:	cc dc       	rcall	.-1640   	; 0x1c2 <servo_1_free>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	8f e7       	ldi	r24, 0x7F	; 127
     82e:	96 e1       	ldi	r25, 0x16	; 22
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <open+0x5a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <open+0x64>
     83a:	00 00       	nop
     83c:	08 95       	ret

0000083e <close>:
     83e:	81 11       	cpse	r24, r1
     840:	06 c0       	rjmp	.+12     	; 0x84e <close+0x10>
     842:	10 92 8d 00 	sts	0x008D, r1
     846:	83 e2       	ldi	r24, 0x23	; 35
     848:	80 93 8c 00 	sts	0x008C, r24
     84c:	07 c0       	rjmp	.+14     	; 0x85c <close+0x1e>
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	29 f4       	brne	.+10     	; 0x85c <close+0x1e>
     852:	10 92 89 00 	sts	0x0089, r1
     856:	8e e4       	ldi	r24, 0x4E	; 78
     858:	80 93 88 00 	sts	0x0088, r24
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	8f e7       	ldi	r24, 0x7F	; 127
     860:	96 e1       	ldi	r25, 0x16	; 22
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <close+0x24>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <close+0x2e>
     86c:	00 00       	nop
     86e:	08 95       	ret

00000870 <node>:
     870:	88 ec       	ldi	r24, 0xC8	; 200
     872:	80 93 28 01 	sts	0x0128, r24
     876:	80 93 2a 01 	sts	0x012A, r24
     87a:	86 e4       	ldi	r24, 0x46	; 70
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a4 de       	rcall	.-696    	; 0x5c8 <forward_mm>
     880:	9d cc       	rjmp	.-1734   	; 0x1bc <stop>
     882:	08 95       	ret

00000884 <turnRight>:
     884:	80 91 0a 02 	lds	r24, 0x020A
     888:	90 91 0b 02 	lds	r25, 0x020B
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	91 05       	cpc	r25, r1
     890:	39 f4       	brne	.+14     	; 0x8a0 <turnRight+0x1c>
     892:	80 91 00 02 	lds	r24, 0x0200
     896:	90 91 01 02 	lds	r25, 0x0201
     89a:	02 97       	sbiw	r24, 0x02	; 2
     89c:	98 f4       	brcc	.+38     	; 0x8c4 <turnRight+0x40>
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <turnRight+0x2e>
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	81 f4       	brne	.+32     	; 0x8c4 <turnRight+0x40>
     8a4:	80 91 00 02 	lds	r24, 0x0200
     8a8:	90 91 01 02 	lds	r25, 0x0201
     8ac:	02 97       	sbiw	r24, 0x02	; 2
     8ae:	02 97       	sbiw	r24, 0x02	; 2
     8b0:	48 f4       	brcc	.+18     	; 0x8c4 <turnRight+0x40>
     8b2:	88 ec       	ldi	r24, 0xC8	; 200
     8b4:	80 93 28 01 	sts	0x0128, r24
     8b8:	80 93 2a 01 	sts	0x012A, r24
     8bc:	8a e5       	ldi	r24, 0x5A	; 90
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	9e de       	rcall	.-708    	; 0x5fe <right_degrees>
     8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <turnRight+0x5e>
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	80 93 28 01 	sts	0x0128, r24
     8ca:	80 93 2a 01 	sts	0x012A, r24
     8ce:	8e e1       	ldi	r24, 0x1E	; 30
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	95 de       	rcall	.-726    	; 0x5fe <right_degrees>
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <turnRight+0x54>
     8d6:	63 dc       	rcall	.-1850   	; 0x19e <right>
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	c6 dc       	rcall	.-1652   	; 0x268 <ADC_Conversion>
     8dc:	82 33       	cpi	r24, 0x32	; 50
     8de:	d8 f3       	brcs	.-10     	; 0x8d6 <turnRight+0x52>
     8e0:	6d dc       	rcall	.-1830   	; 0x1bc <stop>
     8e2:	80 91 0a 02 	lds	r24, 0x020A
     8e6:	90 91 0b 02 	lds	r25, 0x020B
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	83 70       	andi	r24, 0x03	; 3
     8ee:	90 78       	andi	r25, 0x80	; 128
     8f0:	99 23       	and	r25, r25
     8f2:	24 f4       	brge	.+8      	; 0x8fc <turnRight+0x78>
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	8c 6f       	ori	r24, 0xFC	; 252
     8f8:	9f 6f       	ori	r25, 0xFF	; 255
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	90 93 0b 02 	sts	0x020B, r25
     900:	80 93 0a 02 	sts	0x020A, r24
     904:	80 91 51 02 	lds	r24, 0x0251
     908:	90 91 52 02 	lds	r25, 0x0252
     90c:	86 5a       	subi	r24, 0xA6	; 166
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	90 93 52 02 	sts	0x0252, r25
     914:	80 93 51 02 	sts	0x0251, r24
     918:	08 95       	ret

0000091a <turnLeft>:
     91a:	80 91 0a 02 	lds	r24, 0x020A
     91e:	90 91 0b 02 	lds	r25, 0x020B
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	91 05       	cpc	r25, r1
     926:	39 f4       	brne	.+14     	; 0x936 <turnLeft+0x1c>
     928:	80 91 00 02 	lds	r24, 0x0200
     92c:	90 91 01 02 	lds	r25, 0x0201
     930:	02 97       	sbiw	r24, 0x02	; 2
     932:	98 f4       	brcc	.+38     	; 0x95a <turnLeft+0x40>
     934:	09 c0       	rjmp	.+18     	; 0x948 <turnLeft+0x2e>
     936:	03 97       	sbiw	r24, 0x03	; 3
     938:	81 f4       	brne	.+32     	; 0x95a <turnLeft+0x40>
     93a:	80 91 00 02 	lds	r24, 0x0200
     93e:	90 91 01 02 	lds	r25, 0x0201
     942:	02 97       	sbiw	r24, 0x02	; 2
     944:	02 97       	sbiw	r24, 0x02	; 2
     946:	48 f4       	brcc	.+18     	; 0x95a <turnLeft+0x40>
     948:	88 ec       	ldi	r24, 0xC8	; 200
     94a:	80 93 28 01 	sts	0x0128, r24
     94e:	80 93 2a 01 	sts	0x012A, r24
     952:	8a e5       	ldi	r24, 0x5A	; 90
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	4a de       	rcall	.-876    	; 0x5ec <left_degrees>
     958:	0f c0       	rjmp	.+30     	; 0x978 <turnLeft+0x5e>
     95a:	8e e1       	ldi	r24, 0x1E	; 30
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	46 de       	rcall	.-884    	; 0x5ec <left_degrees>
     960:	88 ec       	ldi	r24, 0xC8	; 200
     962:	80 93 28 01 	sts	0x0128, r24
     966:	80 93 2a 01 	sts	0x012A, r24
     96a:	01 c0       	rjmp	.+2      	; 0x96e <turnLeft+0x54>
     96c:	15 dc       	rcall	.-2006   	; 0x198 <left>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	7b dc       	rcall	.-1802   	; 0x268 <ADC_Conversion>
     972:	88 32       	cpi	r24, 0x28	; 40
     974:	d8 f3       	brcs	.-10     	; 0x96c <turnLeft+0x52>
     976:	22 dc       	rcall	.-1980   	; 0x1bc <stop>
     978:	80 91 0a 02 	lds	r24, 0x020A
     97c:	90 91 0b 02 	lds	r25, 0x020B
     980:	03 96       	adiw	r24, 0x03	; 3
     982:	83 70       	andi	r24, 0x03	; 3
     984:	90 78       	andi	r25, 0x80	; 128
     986:	99 23       	and	r25, r25
     988:	24 f4       	brge	.+8      	; 0x992 <turnLeft+0x78>
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	8c 6f       	ori	r24, 0xFC	; 252
     98e:	9f 6f       	ori	r25, 0xFF	; 255
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	90 93 0b 02 	sts	0x020B, r25
     996:	80 93 0a 02 	sts	0x020A, r24
     99a:	80 91 51 02 	lds	r24, 0x0251
     99e:	90 91 52 02 	lds	r25, 0x0252
     9a2:	86 5a       	subi	r24, 0xA6	; 166
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	90 93 52 02 	sts	0x0252, r25
     9aa:	80 93 51 02 	sts	0x0251, r24
     9ae:	08 95       	ret

000009b0 <turn>:
     9b0:	80 91 0a 02 	lds	r24, 0x020A
     9b4:	90 91 0b 02 	lds	r25, 0x020B
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	81 f4       	brne	.+32     	; 0x9dc <turn+0x2c>
     9bc:	80 91 00 02 	lds	r24, 0x0200
     9c0:	90 91 01 02 	lds	r25, 0x0201
     9c4:	02 97       	sbiw	r24, 0x02	; 2
     9c6:	02 97       	sbiw	r24, 0x02	; 2
     9c8:	d0 f4       	brcc	.+52     	; 0x9fe <turn+0x4e>
     9ca:	88 ec       	ldi	r24, 0xC8	; 200
     9cc:	80 93 28 01 	sts	0x0128, r24
     9d0:	80 93 2a 01 	sts	0x012A, r24
     9d4:	8e eb       	ldi	r24, 0xBE	; 190
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	09 de       	rcall	.-1006   	; 0x5ec <left_degrees>
     9da:	29 c0       	rjmp	.+82     	; 0xa2e <turn+0x7e>
     9dc:	02 97       	sbiw	r24, 0x02	; 2
     9de:	79 f4       	brne	.+30     	; 0x9fe <turn+0x4e>
     9e0:	80 91 00 02 	lds	r24, 0x0200
     9e4:	90 91 01 02 	lds	r25, 0x0201
     9e8:	02 97       	sbiw	r24, 0x02	; 2
     9ea:	48 f4       	brcc	.+18     	; 0x9fe <turn+0x4e>
     9ec:	88 ec       	ldi	r24, 0xC8	; 200
     9ee:	80 93 28 01 	sts	0x0128, r24
     9f2:	80 93 2a 01 	sts	0x012A, r24
     9f6:	8e eb       	ldi	r24, 0xBE	; 190
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	f8 dd       	rcall	.-1040   	; 0x5ec <left_degrees>
     9fc:	18 c0       	rjmp	.+48     	; 0xa2e <turn+0x7e>
     9fe:	88 ec       	ldi	r24, 0xC8	; 200
     a00:	80 93 28 01 	sts	0x0128, r24
     a04:	80 93 2a 01 	sts	0x012A, r24
     a08:	80 ea       	ldi	r24, 0xA0	; 160
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	ef dd       	rcall	.-1058   	; 0x5ec <left_degrees>
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <turn+0x62>
     a10:	c3 db       	rcall	.-2170   	; 0x198 <left>
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	29 dc       	rcall	.-1966   	; 0x268 <ADC_Conversion>
     a16:	8f 32       	cpi	r24, 0x2F	; 47
     a18:	d8 f3       	brcs	.-10     	; 0xa10 <turn+0x60>
     a1a:	2f ef       	ldi	r18, 0xFF	; 255
     a1c:	8f e3       	ldi	r24, 0x3F	; 63
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	21 50       	subi	r18, 0x01	; 1
     a22:	80 40       	sbci	r24, 0x00	; 0
     a24:	90 40       	sbci	r25, 0x00	; 0
     a26:	e1 f7       	brne	.-8      	; 0xa20 <turn+0x70>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <turn+0x7a>
     a2a:	00 00       	nop
     a2c:	c7 db       	rcall	.-2162   	; 0x1bc <stop>
     a2e:	80 91 0a 02 	lds	r24, 0x020A
     a32:	90 91 0b 02 	lds	r25, 0x020B
     a36:	02 96       	adiw	r24, 0x02	; 2
     a38:	83 70       	andi	r24, 0x03	; 3
     a3a:	90 78       	andi	r25, 0x80	; 128
     a3c:	99 23       	and	r25, r25
     a3e:	24 f4       	brge	.+8      	; 0xa48 <turn+0x98>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	8c 6f       	ori	r24, 0xFC	; 252
     a44:	9f 6f       	ori	r25, 0xFF	; 255
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	90 93 0b 02 	sts	0x020B, r25
     a4c:	80 93 0a 02 	sts	0x020A, r24
     a50:	80 91 51 02 	lds	r24, 0x0251
     a54:	90 91 52 02 	lds	r25, 0x0252
     a58:	8c 54       	subi	r24, 0x4C	; 76
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	90 93 52 02 	sts	0x0252, r25
     a60:	80 93 51 02 	sts	0x0251, r24
     a64:	10 92 0f 02 	sts	0x020F, r1
     a68:	10 92 0e 02 	sts	0x020E, r1
     a6c:	08 95       	ret

00000a6e <Delay>:
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	8c 01       	movw	r16, r24
     a78:	18 16       	cp	r1, r24
     a7a:	19 06       	cpc	r1, r25
     a7c:	8c f4       	brge	.+34     	; 0xaa0 <Delay+0x32>
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
     a80:	d0 e0       	ldi	r29, 0x00	; 0
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <Delay+0x28>
     a84:	86 e6       	ldi	r24, 0x66	; 102
     a86:	9e e0       	ldi	r25, 0x0E	; 14
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <Delay+0x1a>
     a8c:	00 00       	nop
     a8e:	21 96       	adiw	r28, 0x01	; 1
     a90:	c0 17       	cp	r28, r16
     a92:	d1 07       	cpc	r29, r17
     a94:	39 f0       	breq	.+14     	; 0xaa4 <Delay+0x36>
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	e7 db       	rcall	.-2098   	; 0x268 <ADC_Conversion>
     a9a:	88 32       	cpi	r24, 0x28	; 40
     a9c:	98 f3       	brcs	.-26     	; 0xa84 <Delay+0x16>
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <Delay+0x36>
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
     aa4:	8b db       	rcall	.-2282   	; 0x1bc <stop>
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	c0 17       	cp	r28, r16
     aaa:	d1 07       	cpc	r29, r17
     aac:	0c f0       	brlt	.+2      	; 0xab0 <Delay+0x42>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret

00000aba <semiCorrect_Indi>:
     aba:	80 91 08 02 	lds	r24, 0x0208
     abe:	89 32       	cpi	r24, 0x29	; 41
     ac0:	40 f0       	brcs	.+16     	; 0xad2 <semiCorrect_Indi+0x18>
     ac2:	90 91 09 02 	lds	r25, 0x0209
     ac6:	99 32       	cpi	r25, 0x29	; 41
     ac8:	08 f5       	brcc	.+66     	; 0xb0c <semiCorrect_Indi+0x52>
     aca:	90 91 07 02 	lds	r25, 0x0207
     ace:	99 32       	cpi	r25, 0x29	; 41
     ad0:	e8 f4       	brcc	.+58     	; 0xb0c <semiCorrect_Indi+0x52>
     ad2:	88 32       	cpi	r24, 0x28	; 40
     ad4:	d8 f4       	brcc	.+54     	; 0xb0c <semiCorrect_Indi+0x52>
     ad6:	80 91 09 02 	lds	r24, 0x0209
     ada:	89 32       	cpi	r24, 0x29	; 41
     adc:	58 f0       	brcs	.+22     	; 0xaf4 <semiCorrect_Indi+0x3a>
     ade:	90 91 07 02 	lds	r25, 0x0207
     ae2:	98 32       	cpi	r25, 0x28	; 40
     ae4:	38 f4       	brcc	.+14     	; 0xaf4 <semiCorrect_Indi+0x3a>
     ae6:	58 db       	rcall	.-2384   	; 0x198 <left>
     ae8:	a6 dd       	rcall	.-1204   	; 0x636 <set_color>
     aea:	80 91 08 02 	lds	r24, 0x0208
     aee:	88 32       	cpi	r24, 0x28	; 40
     af0:	d0 f3       	brcs	.-12     	; 0xae6 <semiCorrect_Indi+0x2c>
     af2:	08 95       	ret
     af4:	90 91 07 02 	lds	r25, 0x0207
     af8:	99 32       	cpi	r25, 0x29	; 41
     afa:	40 f0       	brcs	.+16     	; 0xb0c <semiCorrect_Indi+0x52>
     afc:	88 32       	cpi	r24, 0x28	; 40
     afe:	30 f4       	brcc	.+12     	; 0xb0c <semiCorrect_Indi+0x52>
     b00:	4e db       	rcall	.-2404   	; 0x19e <right>
     b02:	99 dd       	rcall	.-1230   	; 0x636 <set_color>
     b04:	80 91 08 02 	lds	r24, 0x0208
     b08:	88 32       	cpi	r24, 0x28	; 40
     b0a:	d0 f3       	brcs	.-12     	; 0xb00 <semiCorrect_Indi+0x46>
     b0c:	08 95       	ret

00000b0e <correct_Indi>:
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	85 e0       	ldi	r24, 0x05	; 5
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 2f 02 	sts	0x022F, r25
     b1a:	80 93 2e 02 	sts	0x022E, r24
     b1e:	4e db       	rcall	.-2404   	; 0x1bc <stop>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 06 02 	sts	0x0206, r24
     b26:	c2 e3       	ldi	r28, 0x32	; 50
     b28:	d0 e0       	ldi	r29, 0x00	; 0
     b2a:	36 db       	rcall	.-2452   	; 0x198 <left>
     b2c:	ce 01       	movw	r24, r28
     b2e:	9f df       	rcall	.-194    	; 0xa6e <Delay>
     b30:	81 11       	cpse	r24, r1
     b32:	16 c0       	rjmp	.+44     	; 0xb60 <correct_Indi+0x52>
     b34:	43 db       	rcall	.-2426   	; 0x1bc <stop>
     b36:	c1 df       	rcall	.-126    	; 0xaba <semiCorrect_Indi>
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	96 db       	rcall	.-2260   	; 0x268 <ADC_Conversion>
     b3c:	89 32       	cpi	r24, 0x29	; 41
     b3e:	78 f4       	brcc	.+30     	; 0xb5e <correct_Indi+0x50>
     b40:	2e db       	rcall	.-2468   	; 0x19e <right>
     b42:	ce 01       	movw	r24, r28
     b44:	c2 96       	adiw	r24, 0x32	; 50
     b46:	93 df       	rcall	.-218    	; 0xa6e <Delay>
     b48:	81 11       	cpse	r24, r1
     b4a:	0a c0       	rjmp	.+20     	; 0xb60 <correct_Indi+0x52>
     b4c:	37 db       	rcall	.-2450   	; 0x1bc <stop>
     b4e:	b5 df       	rcall	.-150    	; 0xaba <semiCorrect_Indi>
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	8a db       	rcall	.-2284   	; 0x268 <ADC_Conversion>
     b54:	89 32       	cpi	r24, 0x29	; 41
     b56:	18 f4       	brcc	.+6      	; 0xb5e <correct_Indi+0x50>
     b58:	cc 59       	subi	r28, 0x9C	; 156
     b5a:	df 4f       	sbci	r29, 0xFF	; 255
     b5c:	e6 cf       	rjmp	.-52     	; 0xb2a <correct_Indi+0x1c>
     b5e:	2e db       	rcall	.-2468   	; 0x1bc <stop>
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <noNatak_Indi>:
     b66:	88 ec       	ldi	r24, 0xC8	; 200
     b68:	80 93 28 01 	sts	0x0128, r24
     b6c:	80 93 2a 01 	sts	0x012A, r24
     b70:	80 91 08 02 	lds	r24, 0x0208
     b74:	88 32       	cpi	r24, 0x28	; 40
     b76:	80 f5       	brcc	.+96     	; 0xbd8 <noNatak_Indi+0x72>
     b78:	80 91 09 02 	lds	r24, 0x0209
     b7c:	89 32       	cpi	r24, 0x29	; 41
     b7e:	a0 f0       	brcs	.+40     	; 0xba8 <noNatak_Indi+0x42>
     b80:	90 91 07 02 	lds	r25, 0x0207
     b84:	98 32       	cpi	r25, 0x28	; 40
     b86:	80 f4       	brcc	.+32     	; 0xba8 <noNatak_Indi+0x42>
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <noNatak_Indi+0x28>
     b8a:	06 db       	rcall	.-2548   	; 0x198 <left>
     b8c:	54 dd       	rcall	.-1368   	; 0x636 <set_color>
     b8e:	80 91 08 02 	lds	r24, 0x0208
     b92:	89 32       	cpi	r24, 0x29	; 41
     b94:	d0 f3       	brcs	.-12     	; 0xb8a <noNatak_Indi+0x24>
     b96:	80 91 09 02 	lds	r24, 0x0209
     b9a:	88 32       	cpi	r24, 0x28	; 40
     b9c:	b0 f7       	brcc	.-20     	; 0xb8a <noNatak_Indi+0x24>
     b9e:	80 91 07 02 	lds	r24, 0x0207
     ba2:	88 32       	cpi	r24, 0x28	; 40
     ba4:	90 f7       	brcc	.-28     	; 0xb8a <noNatak_Indi+0x24>
     ba6:	27 c0       	rjmp	.+78     	; 0xbf6 <noNatak_Indi+0x90>
     ba8:	90 91 07 02 	lds	r25, 0x0207
     bac:	99 32       	cpi	r25, 0x29	; 41
     bae:	90 f0       	brcs	.+36     	; 0xbd4 <noNatak_Indi+0x6e>
     bb0:	88 32       	cpi	r24, 0x28	; 40
     bb2:	80 f4       	brcc	.+32     	; 0xbd4 <noNatak_Indi+0x6e>
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <noNatak_Indi+0x54>
     bb6:	f3 da       	rcall	.-2586   	; 0x19e <right>
     bb8:	3e dd       	rcall	.-1412   	; 0x636 <set_color>
     bba:	80 91 08 02 	lds	r24, 0x0208
     bbe:	89 32       	cpi	r24, 0x29	; 41
     bc0:	d0 f3       	brcs	.-12     	; 0xbb6 <noNatak_Indi+0x50>
     bc2:	80 91 09 02 	lds	r24, 0x0209
     bc6:	88 32       	cpi	r24, 0x28	; 40
     bc8:	b0 f7       	brcc	.-20     	; 0xbb6 <noNatak_Indi+0x50>
     bca:	80 91 07 02 	lds	r24, 0x0207
     bce:	88 32       	cpi	r24, 0x28	; 40
     bd0:	90 f7       	brcc	.-28     	; 0xbb6 <noNatak_Indi+0x50>
     bd2:	11 c0       	rjmp	.+34     	; 0xbf6 <noNatak_Indi+0x90>
     bd4:	9c df       	rcall	.-200    	; 0xb0e <correct_Indi>
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <noNatak_Indi+0x90>
     bd8:	80 91 09 02 	lds	r24, 0x0209
     bdc:	89 32       	cpi	r24, 0x29	; 41
     bde:	20 f0       	brcs	.+8      	; 0xbe8 <noNatak_Indi+0x82>
     be0:	90 91 07 02 	lds	r25, 0x0207
     be4:	98 32       	cpi	r25, 0x28	; 40
     be6:	40 f0       	brcs	.+16     	; 0xbf8 <noNatak_Indi+0x92>
     be8:	88 32       	cpi	r24, 0x28	; 40
     bea:	20 f4       	brcc	.+8      	; 0xbf4 <noNatak_Indi+0x8e>
     bec:	80 91 07 02 	lds	r24, 0x0207
     bf0:	89 32       	cpi	r24, 0x29	; 41
     bf2:	10 f4       	brcc	.+4      	; 0xbf8 <noNatak_Indi+0x92>
     bf4:	8c df       	rcall	.-232    	; 0xb0e <correct_Indi>
     bf6:	e2 ca       	rjmp	.-2620   	; 0x1bc <stop>
     bf8:	08 95       	ret

00000bfa <forwardJaa_Indi>:
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	08 e2       	ldi	r16, 0x28	; 40
     c06:	11 e0       	ldi	r17, 0x01	; 1
     c08:	ff 24       	eor	r15, r15
     c0a:	fa 94       	dec	r15
     c0c:	ca e2       	ldi	r28, 0x2A	; 42
     c0e:	d1 e0       	ldi	r29, 0x01	; 1
     c10:	bd da       	rcall	.-2694   	; 0x18c <forward>
     c12:	11 dd       	rcall	.-1502   	; 0x636 <set_color>
     c14:	80 91 08 02 	lds	r24, 0x0208
     c18:	89 32       	cpi	r24, 0x29	; 41
     c1a:	40 f0       	brcs	.+16     	; 0xc2c <forwardJaa_Indi+0x32>
     c1c:	80 91 09 02 	lds	r24, 0x0209
     c20:	89 32       	cpi	r24, 0x29	; 41
     c22:	a8 f4       	brcc	.+42     	; 0xc4e <forwardJaa_Indi+0x54>
     c24:	80 91 07 02 	lds	r24, 0x0207
     c28:	89 32       	cpi	r24, 0x29	; 41
     c2a:	88 f4       	brcc	.+34     	; 0xc4e <forwardJaa_Indi+0x54>
     c2c:	f8 01       	movw	r30, r16
     c2e:	f0 82       	st	Z, r15
     c30:	f8 82       	st	Y, r15
     c32:	80 91 08 02 	lds	r24, 0x0208
     c36:	89 32       	cpi	r24, 0x29	; 41
     c38:	40 f0       	brcs	.+16     	; 0xc4a <forwardJaa_Indi+0x50>
     c3a:	80 91 09 02 	lds	r24, 0x0209
     c3e:	88 32       	cpi	r24, 0x28	; 40
     c40:	20 f4       	brcc	.+8      	; 0xc4a <forwardJaa_Indi+0x50>
     c42:	80 91 07 02 	lds	r24, 0x0207
     c46:	88 32       	cpi	r24, 0x28	; 40
     c48:	18 f3       	brcs	.-58     	; 0xc10 <forwardJaa_Indi+0x16>
     c4a:	8d df       	rcall	.-230    	; 0xb66 <noNatak_Indi>
     c4c:	d6 df       	rcall	.-84     	; 0xbfa <forwardJaa_Indi>
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	08 95       	ret

00000c5a <semiCorrect>:
     c5a:	80 91 08 02 	lds	r24, 0x0208
     c5e:	89 32       	cpi	r24, 0x29	; 41
     c60:	58 f0       	brcs	.+22     	; 0xc78 <semiCorrect+0x1e>
     c62:	90 91 09 02 	lds	r25, 0x0209
     c66:	99 32       	cpi	r25, 0x29	; 41
     c68:	20 f4       	brcc	.+8      	; 0xc72 <semiCorrect+0x18>
     c6a:	90 91 07 02 	lds	r25, 0x0207
     c6e:	99 32       	cpi	r25, 0x29	; 41
     c70:	18 f0       	brcs	.+6      	; 0xc78 <semiCorrect+0x1e>
     c72:	fe dd       	rcall	.-1028   	; 0x870 <node>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	08 95       	ret
     c78:	88 32       	cpi	r24, 0x28	; 40
     c7a:	e0 f4       	brcc	.+56     	; 0xcb4 <semiCorrect+0x5a>
     c7c:	80 91 09 02 	lds	r24, 0x0209
     c80:	89 32       	cpi	r24, 0x29	; 41
     c82:	58 f0       	brcs	.+22     	; 0xc9a <semiCorrect+0x40>
     c84:	90 91 07 02 	lds	r25, 0x0207
     c88:	98 32       	cpi	r25, 0x28	; 40
     c8a:	38 f4       	brcc	.+14     	; 0xc9a <semiCorrect+0x40>
     c8c:	85 da       	rcall	.-2806   	; 0x198 <left>
     c8e:	d3 dc       	rcall	.-1626   	; 0x636 <set_color>
     c90:	80 91 08 02 	lds	r24, 0x0208
     c94:	88 32       	cpi	r24, 0x28	; 40
     c96:	d0 f3       	brcs	.-12     	; 0xc8c <semiCorrect+0x32>
     c98:	0f c0       	rjmp	.+30     	; 0xcb8 <semiCorrect+0x5e>
     c9a:	90 91 07 02 	lds	r25, 0x0207
     c9e:	99 32       	cpi	r25, 0x29	; 41
     ca0:	68 f0       	brcs	.+26     	; 0xcbc <semiCorrect+0x62>
     ca2:	88 32       	cpi	r24, 0x28	; 40
     ca4:	68 f4       	brcc	.+26     	; 0xcc0 <semiCorrect+0x66>
     ca6:	7b da       	rcall	.-2826   	; 0x19e <right>
     ca8:	c6 dc       	rcall	.-1652   	; 0x636 <set_color>
     caa:	80 91 08 02 	lds	r24, 0x0208
     cae:	88 32       	cpi	r24, 0x28	; 40
     cb0:	d0 f3       	brcs	.-12     	; 0xca6 <semiCorrect+0x4c>
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <semiCorrect+0x6a>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	08 95       	ret
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	08 95       	ret
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	08 95       	ret
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret

00000cc8 <correct>:
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	90 93 2f 02 	sts	0x022F, r25
     cd6:	80 93 2e 02 	sts	0x022E, r24
     cda:	70 da       	rcall	.-2848   	; 0x1bc <stop>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 06 02 	sts	0x0206, r24
     ce2:	c2 e3       	ldi	r28, 0x32	; 50
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	58 da       	rcall	.-2896   	; 0x198 <left>
     ce8:	ce 01       	movw	r24, r28
     cea:	c1 de       	rcall	.-638    	; 0xa6e <Delay>
     cec:	81 11       	cpse	r24, r1
     cee:	1c c0       	rjmp	.+56     	; 0xd28 <correct+0x60>
     cf0:	65 da       	rcall	.-2870   	; 0x1bc <stop>
     cf2:	b3 df       	rcall	.-154    	; 0xc5a <semiCorrect>
     cf4:	18 2f       	mov	r17, r24
     cf6:	81 11       	cpse	r24, r1
     cf8:	19 c0       	rjmp	.+50     	; 0xd2c <correct+0x64>
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	b5 da       	rcall	.-2710   	; 0x268 <ADC_Conversion>
     cfe:	89 32       	cpi	r24, 0x29	; 41
     d00:	88 f4       	brcc	.+34     	; 0xd24 <correct+0x5c>
     d02:	4d da       	rcall	.-2918   	; 0x19e <right>
     d04:	ce 01       	movw	r24, r28
     d06:	c2 96       	adiw	r24, 0x32	; 50
     d08:	b2 de       	rcall	.-668    	; 0xa6e <Delay>
     d0a:	81 11       	cpse	r24, r1
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <correct+0x6a>
     d0e:	56 da       	rcall	.-2900   	; 0x1bc <stop>
     d10:	a4 df       	rcall	.-184    	; 0xc5a <semiCorrect>
     d12:	81 11       	cpse	r24, r1
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <correct+0x68>
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	a7 da       	rcall	.-2738   	; 0x268 <ADC_Conversion>
     d1a:	89 32       	cpi	r24, 0x29	; 41
     d1c:	18 f4       	brcc	.+6      	; 0xd24 <correct+0x5c>
     d1e:	cc 59       	subi	r28, 0x9C	; 156
     d20:	df 4f       	sbci	r29, 0xFF	; 255
     d22:	e1 cf       	rjmp	.-62     	; 0xce6 <correct+0x1e>
     d24:	4b da       	rcall	.-2922   	; 0x1bc <stop>
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <correct+0x6a>
     d28:	10 e0       	ldi	r17, 0x00	; 0
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <correct+0x6a>
     d2c:	11 e0       	ldi	r17, 0x01	; 1
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <correct+0x6a>
     d30:	11 e0       	ldi	r17, 0x01	; 1
     d32:	81 2f       	mov	r24, r17
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	08 95       	ret

00000d3c <noNatak>:
     d3c:	88 ec       	ldi	r24, 0xC8	; 200
     d3e:	80 93 28 01 	sts	0x0128, r24
     d42:	80 93 2a 01 	sts	0x012A, r24
     d46:	80 91 08 02 	lds	r24, 0x0208
     d4a:	88 32       	cpi	r24, 0x28	; 40
     d4c:	90 f5       	brcc	.+100    	; 0xdb2 <noNatak+0x76>
     d4e:	80 91 09 02 	lds	r24, 0x0209
     d52:	89 32       	cpi	r24, 0x29	; 41
     d54:	a0 f0       	brcs	.+40     	; 0xd7e <noNatak+0x42>
     d56:	90 91 07 02 	lds	r25, 0x0207
     d5a:	98 32       	cpi	r25, 0x28	; 40
     d5c:	80 f4       	brcc	.+32     	; 0xd7e <noNatak+0x42>
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <noNatak+0x28>
     d60:	1b da       	rcall	.-3018   	; 0x198 <left>
     d62:	69 dc       	rcall	.-1838   	; 0x636 <set_color>
     d64:	80 91 08 02 	lds	r24, 0x0208
     d68:	89 32       	cpi	r24, 0x29	; 41
     d6a:	d0 f3       	brcs	.-12     	; 0xd60 <noNatak+0x24>
     d6c:	80 91 09 02 	lds	r24, 0x0209
     d70:	88 32       	cpi	r24, 0x28	; 40
     d72:	b0 f7       	brcc	.-20     	; 0xd60 <noNatak+0x24>
     d74:	80 91 07 02 	lds	r24, 0x0207
     d78:	88 32       	cpi	r24, 0x28	; 40
     d7a:	90 f7       	brcc	.-28     	; 0xd60 <noNatak+0x24>
     d7c:	33 c0       	rjmp	.+102    	; 0xde4 <noNatak+0xa8>
     d7e:	90 91 07 02 	lds	r25, 0x0207
     d82:	99 32       	cpi	r25, 0x29	; 41
     d84:	90 f0       	brcs	.+36     	; 0xdaa <noNatak+0x6e>
     d86:	88 32       	cpi	r24, 0x28	; 40
     d88:	80 f4       	brcc	.+32     	; 0xdaa <noNatak+0x6e>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <noNatak+0x54>
     d8c:	08 da       	rcall	.-3056   	; 0x19e <right>
     d8e:	53 dc       	rcall	.-1882   	; 0x636 <set_color>
     d90:	80 91 08 02 	lds	r24, 0x0208
     d94:	89 32       	cpi	r24, 0x29	; 41
     d96:	d0 f3       	brcs	.-12     	; 0xd8c <noNatak+0x50>
     d98:	80 91 09 02 	lds	r24, 0x0209
     d9c:	88 32       	cpi	r24, 0x28	; 40
     d9e:	b0 f7       	brcc	.-20     	; 0xd8c <noNatak+0x50>
     da0:	80 91 07 02 	lds	r24, 0x0207
     da4:	88 32       	cpi	r24, 0x28	; 40
     da6:	90 f7       	brcc	.-28     	; 0xd8c <noNatak+0x50>
     da8:	1d c0       	rjmp	.+58     	; 0xde4 <noNatak+0xa8>
     daa:	8e df       	rcall	.-228    	; 0xcc8 <correct>
     dac:	88 23       	and	r24, r24
     dae:	d1 f0       	breq	.+52     	; 0xde4 <noNatak+0xa8>
     db0:	1d c0       	rjmp	.+58     	; 0xdec <noNatak+0xb0>
     db2:	80 91 09 02 	lds	r24, 0x0209
     db6:	89 32       	cpi	r24, 0x29	; 41
     db8:	40 f0       	brcs	.+16     	; 0xdca <noNatak+0x8e>
     dba:	90 91 07 02 	lds	r25, 0x0207
     dbe:	98 32       	cpi	r25, 0x28	; 40
     dc0:	20 f4       	brcc	.+8      	; 0xdca <noNatak+0x8e>
     dc2:	56 dd       	rcall	.-1364   	; 0x870 <node>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	08 95       	ret
     dca:	88 32       	cpi	r24, 0x28	; 40
     dcc:	40 f4       	brcc	.+16     	; 0xdde <noNatak+0xa2>
     dce:	80 91 07 02 	lds	r24, 0x0207
     dd2:	89 32       	cpi	r24, 0x29	; 41
     dd4:	20 f0       	brcs	.+8      	; 0xdde <noNatak+0xa2>
     dd6:	4c dd       	rcall	.-1384   	; 0x870 <node>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	08 95       	ret
     dde:	74 df       	rcall	.-280    	; 0xcc8 <correct>
     de0:	81 11       	cpse	r24, r1
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <noNatak+0xb6>
     de4:	eb d9       	rcall	.-3114   	; 0x1bc <stop>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	08 95       	ret
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	08 95       	ret
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	08 95       	ret

00000df8 <forwardJaa>:
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	08 e2       	ldi	r16, 0x28	; 40
     e04:	11 e0       	ldi	r17, 0x01	; 1
     e06:	ff 24       	eor	r15, r15
     e08:	fa 94       	dec	r15
     e0a:	ca e2       	ldi	r28, 0x2A	; 42
     e0c:	d1 e0       	ldi	r29, 0x01	; 1
     e0e:	be d9       	rcall	.-3204   	; 0x18c <forward>
     e10:	12 dc       	rcall	.-2012   	; 0x636 <set_color>
     e12:	80 91 08 02 	lds	r24, 0x0208
     e16:	89 32       	cpi	r24, 0x29	; 41
     e18:	50 f0       	brcs	.+20     	; 0xe2e <forwardJaa+0x36>
     e1a:	80 91 09 02 	lds	r24, 0x0209
     e1e:	89 32       	cpi	r24, 0x29	; 41
     e20:	20 f4       	brcc	.+8      	; 0xe2a <forwardJaa+0x32>
     e22:	80 91 07 02 	lds	r24, 0x0207
     e26:	89 32       	cpi	r24, 0x29	; 41
     e28:	10 f0       	brcs	.+4      	; 0xe2e <forwardJaa+0x36>
     e2a:	22 dd       	rcall	.-1468   	; 0x870 <node>
     e2c:	13 c0       	rjmp	.+38     	; 0xe54 <forwardJaa+0x5c>
     e2e:	f8 01       	movw	r30, r16
     e30:	f0 82       	st	Z, r15
     e32:	f8 82       	st	Y, r15
     e34:	80 91 08 02 	lds	r24, 0x0208
     e38:	89 32       	cpi	r24, 0x29	; 41
     e3a:	40 f0       	brcs	.+16     	; 0xe4c <forwardJaa+0x54>
     e3c:	80 91 09 02 	lds	r24, 0x0209
     e40:	88 32       	cpi	r24, 0x28	; 40
     e42:	20 f4       	brcc	.+8      	; 0xe4c <forwardJaa+0x54>
     e44:	80 91 07 02 	lds	r24, 0x0207
     e48:	88 32       	cpi	r24, 0x28	; 40
     e4a:	08 f3       	brcs	.-62     	; 0xe0e <forwardJaa+0x16>
     e4c:	77 df       	rcall	.-274    	; 0xd3c <noNatak>
     e4e:	89 2b       	or	r24, r25
     e50:	09 f4       	brne	.+2      	; 0xe54 <forwardJaa+0x5c>
     e52:	d2 df       	rcall	.-92     	; 0xdf8 <forwardJaa>
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	08 95       	ret

00000e60 <front>:
     e60:	cb df       	rcall	.-106    	; 0xdf8 <forwardJaa>
     e62:	80 91 30 02 	lds	r24, 0x0230
     e66:	90 91 31 02 	lds	r25, 0x0231
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	90 93 31 02 	sts	0x0231, r25
     e70:	80 93 30 02 	sts	0x0230, r24
     e74:	08 95       	ret

00000e76 <traverseToSort>:
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
     e7c:	80 91 10 02 	lds	r24, 0x0210
     e80:	90 91 11 02 	lds	r25, 0x0211
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	21 f4       	brne	.+8      	; 0xe90 <traverseToSort+0x1a>
     e88:	10 92 11 02 	sts	0x0211, r1
     e8c:	10 92 10 02 	sts	0x0210, r1
     e90:	80 91 0e 02 	lds	r24, 0x020E
     e94:	90 91 0f 02 	lds	r25, 0x020F
     e98:	89 2b       	or	r24, r25
     e9a:	31 f4       	brne	.+12     	; 0xea8 <traverseToSort+0x32>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 11 02 	sts	0x0211, r25
     ea4:	80 93 10 02 	sts	0x0210, r24
     ea8:	ce 01       	movw	r24, r28
     eaa:	04 97       	sbiw	r24, 0x04	; 4
     eac:	02 97       	sbiw	r24, 0x02	; 2
     eae:	88 f5       	brcc	.+98     	; 0xf12 <traverseToSort+0x9c>
     eb0:	c4 30       	cpi	r28, 0x04	; 4
     eb2:	d1 05       	cpc	r29, r1
     eb4:	39 f4       	brne	.+14     	; 0xec4 <traverseToSort+0x4e>
     eb6:	80 91 0a 02 	lds	r24, 0x020A
     eba:	90 91 0b 02 	lds	r25, 0x020B
     ebe:	89 2b       	or	r24, r25
     ec0:	51 f0       	breq	.+20     	; 0xed6 <traverseToSort+0x60>
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <traverseToSort+0x64>
     ec4:	c5 30       	cpi	r28, 0x05	; 5
     ec6:	d1 05       	cpc	r29, r1
     ec8:	41 f4       	brne	.+16     	; 0xeda <traverseToSort+0x64>
     eca:	80 91 0a 02 	lds	r24, 0x020A
     ece:	90 91 0b 02 	lds	r25, 0x020B
     ed2:	02 97       	sbiw	r24, 0x02	; 2
     ed4:	11 f4       	brne	.+4      	; 0xeda <traverseToSort+0x64>
     ed6:	d6 dc       	rcall	.-1620   	; 0x884 <turnRight>
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <traverseToSort+0x66>
     eda:	1f dd       	rcall	.-1474   	; 0x91a <turnLeft>
     edc:	c1 df       	rcall	.-126    	; 0xe60 <front>
     ede:	c0 df       	rcall	.-128    	; 0xe60 <front>
     ee0:	24 97       	sbiw	r28, 0x04	; 4
     ee2:	39 f4       	brne	.+14     	; 0xef2 <traverseToSort+0x7c>
     ee4:	85 e0       	ldi	r24, 0x05	; 5
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 01 02 	sts	0x0201, r25
     eec:	80 93 00 02 	sts	0x0200, r24
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <traverseToSort+0x88>
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 01 02 	sts	0x0201, r25
     efa:	80 93 00 02 	sts	0x0200, r24
     efe:	80 91 30 02 	lds	r24, 0x0230
     f02:	90 91 31 02 	lds	r25, 0x0231
     f06:	02 96       	adiw	r24, 0x02	; 2
     f08:	90 93 31 02 	sts	0x0231, r25
     f0c:	80 93 30 02 	sts	0x0230, r24
     f10:	49 c0       	rjmp	.+146    	; 0xfa4 <traverseToSort+0x12e>
     f12:	80 91 0a 02 	lds	r24, 0x020A
     f16:	90 91 0b 02 	lds	r25, 0x020B
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	39 f4       	brne	.+14     	; 0xf2e <traverseToSort+0xb8>
     f20:	80 91 00 02 	lds	r24, 0x0200
     f24:	90 91 01 02 	lds	r25, 0x0201
     f28:	02 97       	sbiw	r24, 0x02	; 2
     f2a:	90 f4       	brcc	.+36     	; 0xf50 <traverseToSort+0xda>
     f2c:	0c c0       	rjmp	.+24     	; 0xf46 <traverseToSort+0xd0>
     f2e:	03 97       	sbiw	r24, 0x03	; 3
     f30:	b9 f4       	brne	.+46     	; 0xf60 <traverseToSort+0xea>
     f32:	80 91 00 02 	lds	r24, 0x0200
     f36:	90 91 01 02 	lds	r25, 0x0201
     f3a:	9c 01       	movw	r18, r24
     f3c:	22 50       	subi	r18, 0x02	; 2
     f3e:	31 09       	sbc	r19, r1
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	10 f4       	brcc	.+4      	; 0xf4a <traverseToSort+0xd4>
     f46:	9e dc       	rcall	.-1732   	; 0x884 <turnRight>
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <traverseToSort+0xea>
     f4a:	02 97       	sbiw	r24, 0x02	; 2
     f4c:	48 f4       	brcc	.+18     	; 0xf60 <traverseToSort+0xea>
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <traverseToSort+0xe8>
     f50:	80 91 00 02 	lds	r24, 0x0200
     f54:	90 91 01 02 	lds	r25, 0x0201
     f58:	02 97       	sbiw	r24, 0x02	; 2
     f5a:	02 97       	sbiw	r24, 0x02	; 2
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <traverseToSort+0xea>
     f5e:	dd dc       	rcall	.-1606   	; 0x91a <turnLeft>
     f60:	22 97       	sbiw	r28, 0x02	; 2
     f62:	3c f4       	brge	.+14     	; 0xf72 <traverseToSort+0xfc>
     f64:	80 91 0a 02 	lds	r24, 0x020A
     f68:	90 91 0b 02 	lds	r25, 0x020B
     f6c:	89 2b       	or	r24, r25
     f6e:	39 f0       	breq	.+14     	; 0xf7e <traverseToSort+0x108>
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <traverseToSort+0x10a>
     f72:	80 91 0a 02 	lds	r24, 0x020A
     f76:	90 91 0b 02 	lds	r25, 0x020B
     f7a:	02 97       	sbiw	r24, 0x02	; 2
     f7c:	09 f4       	brne	.+2      	; 0xf80 <traverseToSort+0x10a>
     f7e:	18 dd       	rcall	.-1488   	; 0x9b0 <turn>
     f80:	6f df       	rcall	.-290    	; 0xe60 <front>
     f82:	80 91 3f 02 	lds	r24, 0x023F
     f86:	90 91 40 02 	lds	r25, 0x0240
     f8a:	81 70       	andi	r24, 0x01	; 1
     f8c:	90 78       	andi	r25, 0x80	; 128
     f8e:	99 23       	and	r25, r25
     f90:	24 f4       	brge	.+8      	; 0xf9a <traverseToSort+0x124>
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	8e 6f       	ori	r24, 0xFE	; 254
     f96:	9f 6f       	ori	r25, 0xFF	; 255
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	04 96       	adiw	r24, 0x04	; 4
     f9c:	90 93 01 02 	sts	0x0201, r25
     fa0:	80 93 00 02 	sts	0x0200, r24
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <terminalCheck1>:
void terminalCheck1()
{
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
     fae:	88 ec       	ldi	r24, 0xC8	; 200
     fb0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
     fb4:	80 93 2a 01 	sts	0x012A, r24
	//????
	//lcd_wr_command(0x01);
	//lcd_print(1,1,888,3);
	
	velocity(turn_v,turn_v);
	forward_mm(10);
     fb8:	8a e0       	ldi	r24, 0x0A	; 10
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	05 db       	rcall	.-2550   	; 0x5c8 <forward_mm>
	flag = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 11 02 	sts	0x0211, r25
     fc6:	80 93 10 02 	sts	0x0210, r24
	if (ct != ot)
     fca:	80 91 3f 02 	lds	r24, 0x023F
     fce:	90 91 40 02 	lds	r25, 0x0240
     fd2:	20 91 00 02 	lds	r18, 0x0200
     fd6:	30 91 01 02 	lds	r19, 0x0201
     fda:	82 17       	cp	r24, r18
     fdc:	93 07       	cpc	r25, r19
     fde:	89 f1       	breq	.+98     	; 0x1042 <terminalCheck1+0x98>
	{
		if (dir == 1 || dir == 3)
     fe0:	20 91 0a 02 	lds	r18, 0x020A
     fe4:	30 91 0b 02 	lds	r19, 0x020B
     fe8:	2d 7f       	andi	r18, 0xFD	; 253
     fea:	21 30       	cpi	r18, 0x01	; 1
     fec:	31 05       	cpc	r19, r1
     fee:	41 f4       	brne	.+16     	; 0x1000 <terminalCheck1+0x56>
		{
			if (ct == 3 || ct == 0)
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	91 05       	cpc	r25, r1
     ff4:	11 f0       	breq	.+4      	; 0xffa <terminalCheck1+0x50>
     ff6:	89 2b       	or	r24, r25
     ff8:	11 f4       	brne	.+4      	; 0xffe <terminalCheck1+0x54>
				turnRight();
     ffa:	44 dc       	rcall	.-1912   	; 0x884 <turnRight>
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <terminalCheck1+0x56>
			else turnLeft();
     ffe:	8d dc       	rcall	.-1766   	; 0x91a <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1000:	80 91 3f 02 	lds	r24, 0x023F
    1004:	90 91 40 02 	lds	r25, 0x0240
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	91 05       	cpc	r25, r1
    100c:	38 f4       	brcc	.+14     	; 0x101c <terminalCheck1+0x72>
    100e:	20 91 0a 02 	lds	r18, 0x020A
    1012:	30 91 0b 02 	lds	r19, 0x020B
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	49 f0       	breq	.+18     	; 0x102e <terminalCheck1+0x84>
    101c:	02 97       	sbiw	r24, 0x02	; 2
    101e:	02 97       	sbiw	r24, 0x02	; 2
    1020:	38 f4       	brcc	.+14     	; 0x1030 <terminalCheck1+0x86>
    1022:	80 91 0a 02 	lds	r24, 0x020A
    1026:	90 91 0b 02 	lds	r25, 0x020B
    102a:	89 2b       	or	r24, r25
    102c:	09 f4       	brne	.+2      	; 0x1030 <terminalCheck1+0x86>
			turn();
    102e:	c0 dc       	rcall	.-1664   	; 0x9b0 <turn>
		front();
    1030:	17 df       	rcall	.-466    	; 0xe60 <front>
		ot = ct;
    1032:	80 91 3f 02 	lds	r24, 0x023F
    1036:	90 91 40 02 	lds	r25, 0x0240
    103a:	90 93 01 02 	sts	0x0201, r25
    103e:	80 93 00 02 	sts	0x0200, r24
	}
	//????
	right_degrees(30);
    1042:	8e e1       	ldi	r24, 0x1E	; 30
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	db da       	rcall	.-2634   	; 0x5fe <right_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    104e:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
    1052:	80 91 0a 02 	lds	r24, 0x020A
    1056:	90 91 0b 02 	lds	r25, 0x020B
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	83 70       	andi	r24, 0x03	; 3
    105e:	90 78       	andi	r25, 0x80	; 128
    1060:	99 23       	and	r25, r25
    1062:	24 f4       	brge	.+8      	; 0x106c <terminalCheck1+0xc2>
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	8c 6f       	ori	r24, 0xFC	; 252
    1068:	9f 6f       	ori	r25, 0xFF	; 255
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	90 93 0b 02 	sts	0x020B, r25
    1070:	80 93 0a 02 	sts	0x020A, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(2)<50)	//earlier 3
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <terminalCheck1+0xce>
		right();
    1076:	93 d8       	rcall	.-3802   	; 0x19e <right>
	right_degrees(30);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(2)<50)	//earlier 3
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	f6 d8       	rcall	.-3604   	; 0x268 <ADC_Conversion>
    107c:	82 33       	cpi	r24, 0x32	; 50
    107e:	d8 f3       	brcs	.-10     	; 0x1076 <terminalCheck1+0xcc>
		right();
	//_delay_ms(100);
	stop();
    1080:	9d d8       	rcall	.-3782   	; 0x1bc <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    1082:	c0 91 3f 02 	lds	r28, 0x023F
    1086:	d0 91 40 02 	lds	r29, 0x0240
    108a:	e2 da       	rcall	.-2620   	; 0x650 <scan>
    108c:	cc 0f       	add	r28, r28
    108e:	dd 1f       	adc	r29, r29
    1090:	cc 0f       	add	r28, r28
    1092:	dd 1f       	adc	r29, r29
    1094:	cf 5b       	subi	r28, 0xBF	; 191
    1096:	dd 4f       	sbci	r29, 0xFD	; 253
    1098:	99 83       	std	Y+1, r25	; 0x01
    109a:	88 83       	st	Y, r24
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}
*/	
	if(ct==0)
    109c:	80 91 3f 02 	lds	r24, 0x023F
    10a0:	90 91 40 02 	lds	r25, 0x0240
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	39 f4       	brne	.+14     	; 0x10b6 <terminalCheck1+0x10c>
		term[ct][0]=1;
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	30 93 42 02 	sts	0x0242, r19
    10b0:	20 93 41 02 	sts	0x0241, r18
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <terminalCheck1+0x134>
	if(ct==1)
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	39 f4       	brne	.+14     	; 0x10ca <terminalCheck1+0x120>
		term[ct][0]=2;
    10bc:	22 e0       	ldi	r18, 0x02	; 2
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	30 93 46 02 	sts	0x0246, r19
    10c4:	20 93 45 02 	sts	0x0245, r18
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <terminalCheck1+0x146>
	if(ct==3)
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	39 f4       	brne	.+14     	; 0x10de <terminalCheck1+0x134>
		term[ct][0]=-1;
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	3f ef       	ldi	r19, 0xFF	; 255
    10d4:	30 93 4e 02 	sts	0x024E, r19
    10d8:	20 93 4d 02 	sts	0x024D, r18
    10dc:	09 c0       	rjmp	.+18     	; 0x10f0 <terminalCheck1+0x146>
	if(ct==2)
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	91 05       	cpc	r25, r1
    10e2:	31 f4       	brne	.+12     	; 0x10f0 <terminalCheck1+0x146>
		term[ct][0]=2;
    10e4:	22 e0       	ldi	r18, 0x02	; 2
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	30 93 4a 02 	sts	0x024A, r19
    10ec:	20 93 49 02 	sts	0x0249, r18
	if(term[ct][0]==color[ct])
    10f0:	dc 01       	movw	r26, r24
    10f2:	aa 0f       	add	r26, r26
    10f4:	bb 1f       	adc	r27, r27
    10f6:	aa 0f       	add	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	af 5b       	subi	r26, 0xBF	; 191
    10fc:	bd 4f       	sbci	r27, 0xFD	; 253
    10fe:	fc 01       	movw	r30, r24
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	ed 5a       	subi	r30, 0xAD	; 173
    1106:	fd 4f       	sbci	r31, 0xFD	; 253
    1108:	2d 91       	ld	r18, X+
    110a:	3c 91       	ld	r19, X
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	59 f4       	brne	.+22     	; 0x112c <terminalCheck1+0x182>
 	{
 		buzzer_on();
    1116:	9d d8       	rcall	.-3782   	; 0x252 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1118:	2f ef       	ldi	r18, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	86 e1       	ldi	r24, 0x16	; 22
    111e:	21 50       	subi	r18, 0x01	; 1
    1120:	40 40       	sbci	r20, 0x00	; 0
    1122:	80 40       	sbci	r24, 0x00	; 0
    1124:	e1 f7       	brne	.-8      	; 0x111e <terminalCheck1+0x174>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <terminalCheck1+0x17e>
    1128:	00 00       	nop
 		_delay_ms(500);
 		buzzer_off();
    112a:	97 d8       	rcall	.-3794   	; 0x25a <buzzer_off>
 	}
	 if (term[ct][0] == -1 || term[ct][0] == color[ct])
    112c:	20 91 3f 02 	lds	r18, 0x023F
    1130:	30 91 40 02 	lds	r19, 0x0240
    1134:	f9 01       	movw	r30, r18
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ef 5b       	subi	r30, 0xBF	; 191
    1140:	fd 4f       	sbci	r31, 0xFD	; 253
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	8f 3f       	cpi	r24, 0xFF	; 255
    1148:	4f ef       	ldi	r20, 0xFF	; 255
    114a:	94 07       	cpc	r25, r20
    114c:	51 f0       	breq	.+20     	; 0x1162 <terminalCheck1+0x1b8>
    114e:	f9 01       	movw	r30, r18
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ed 5a       	subi	r30, 0xAD	; 173
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	20 81       	ld	r18, Z
    115a:	31 81       	ldd	r19, Z+1	; 0x01
    115c:	82 17       	cp	r24, r18
    115e:	93 07       	cpc	r25, r19
    1160:	49 f4       	brne	.+18     	; 0x1174 <terminalCheck1+0x1ca>
	 total--;
    1162:	80 91 02 02 	lds	r24, 0x0202
    1166:	90 91 03 02 	lds	r25, 0x0203
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	90 93 03 02 	sts	0x0203, r25
    1170:	80 93 02 02 	sts	0x0202, r24
	//_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <terminalCheck2>:
void terminalCheck2()
{
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    1184:	80 93 2a 01 	sts	0x012A, r24
			back_mm(30);
		else forward_mm(30);
		flag = 1;
	}*/

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1188:	80 91 3f 02 	lds	r24, 0x023F
    118c:	90 91 40 02 	lds	r25, 0x0240
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	91 05       	cpc	r25, r1
    1194:	30 f4       	brcc	.+12     	; 0x11a2 <terminalCheck2+0x28>
    1196:	20 91 0a 02 	lds	r18, 0x020A
    119a:	30 91 0b 02 	lds	r19, 0x020B
    119e:	23 2b       	or	r18, r19
    11a0:	69 f0       	breq	.+26     	; 0x11bc <terminalCheck2+0x42>
    11a2:	9c 01       	movw	r18, r24
    11a4:	22 50       	subi	r18, 0x02	; 2
    11a6:	31 09       	sbc	r19, r1
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	90 f5       	brcc	.+100    	; 0x1212 <terminalCheck2+0x98>
    11ae:	40 91 0a 02 	lds	r20, 0x020A
    11b2:	50 91 0b 02 	lds	r21, 0x020B
    11b6:	42 30       	cpi	r20, 0x02	; 2
    11b8:	51 05       	cpc	r21, r1
    11ba:	59 f5       	brne	.+86     	; 0x1212 <terminalCheck2+0x98>
	{
		left_degrees(30);
    11bc:	8e e1       	ldi	r24, 0x1E	; 30
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	15 da       	rcall	.-3030   	; 0x5ec <left_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    11c2:	88 ec       	ldi	r24, 0xC8	; 200
    11c4:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    11c8:	80 93 2a 01 	sts	0x012A, r24
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <terminalCheck2+0x58>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
		left();
    11ce:	0e 94 cc 00 	call	0x198	; 0x198 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	49 d8       	rcall	.-3950   	; 0x268 <ADC_Conversion>
    11d6:	82 33       	cpi	r24, 0x32	; 50
    11d8:	d0 f3       	brcs	.-12     	; 0x11ce <terminalCheck2+0x54>
    11da:	2c ec       	ldi	r18, 0xCC	; 204
    11dc:	4c e4       	ldi	r20, 0x4C	; 76
    11de:	86 e0       	ldi	r24, 0x06	; 6
    11e0:	21 50       	subi	r18, 0x01	; 1
    11e2:	40 40       	sbci	r20, 0x00	; 0
    11e4:	80 40       	sbci	r24, 0x00	; 0
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <terminalCheck2+0x66>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <terminalCheck2+0x70>
		left();
		_delay_ms(140);
		stop();
    11ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
		dir=(dir+3)%4;
    11ee:	80 91 0a 02 	lds	r24, 0x020A
    11f2:	90 91 0b 02 	lds	r25, 0x020B
    11f6:	03 96       	adiw	r24, 0x03	; 3
    11f8:	83 70       	andi	r24, 0x03	; 3
    11fa:	90 78       	andi	r25, 0x80	; 128
    11fc:	99 23       	and	r25, r25
    11fe:	24 f4       	brge	.+8      	; 0x1208 <terminalCheck2+0x8e>
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	8c 6f       	ori	r24, 0xFC	; 252
    1204:	9f 6f       	ori	r25, 0xFF	; 255
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	90 93 0b 02 	sts	0x020B, r25
    120c:	80 93 0a 02 	sts	0x020A, r24
    1210:	57 c0       	rjmp	.+174    	; 0x12c0 <terminalCheck2+0x146>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1212:	02 97       	sbiw	r24, 0x02	; 2
    1214:	30 f4       	brcc	.+12     	; 0x1222 <terminalCheck2+0xa8>
    1216:	80 91 0a 02 	lds	r24, 0x020A
    121a:	90 91 0b 02 	lds	r25, 0x020B
    121e:	02 97       	sbiw	r24, 0x02	; 2
    1220:	49 f0       	breq	.+18     	; 0x1234 <terminalCheck2+0xba>
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	48 f5       	brcc	.+82     	; 0x127a <terminalCheck2+0x100>
    1228:	80 91 0a 02 	lds	r24, 0x020A
    122c:	90 91 0b 02 	lds	r25, 0x020B
    1230:	89 2b       	or	r24, r25
    1232:	19 f5       	brne	.+70     	; 0x127a <terminalCheck2+0x100>
		{
			right_degrees(30);
    1234:	8e e1       	ldi	r24, 0x1E	; 30
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	e2 d9       	rcall	.-3132   	; 0x5fe <right_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    123a:	88 ec       	ldi	r24, 0xC8	; 200
    123c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    1240:	80 93 2a 01 	sts	0x012A, r24
    1244:	02 c0       	rjmp	.+4      	; 0x124a <terminalCheck2+0xd0>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(2)<50)
				right();
    1246:	0e 94 cf 00 	call	0x19e	; 0x19e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(2)<50)
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	0d d8       	rcall	.-4070   	; 0x268 <ADC_Conversion>
    124e:	82 33       	cpi	r24, 0x32	; 50
    1250:	d0 f3       	brcs	.-12     	; 0x1246 <terminalCheck2+0xcc>
				right();
			//_delay_ms(100);
			stop();	
    1252:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
			dir=(dir+1)%4;
    1256:	80 91 0a 02 	lds	r24, 0x020A
    125a:	90 91 0b 02 	lds	r25, 0x020B
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	83 70       	andi	r24, 0x03	; 3
    1262:	90 78       	andi	r25, 0x80	; 128
    1264:	99 23       	and	r25, r25
    1266:	24 f4       	brge	.+8      	; 0x1270 <terminalCheck2+0xf6>
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	8c 6f       	ori	r24, 0xFC	; 252
    126c:	9f 6f       	ori	r25, 0xFF	; 255
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	90 93 0b 02 	sts	0x020B, r25
    1274:	80 93 0a 02 	sts	0x020A, r24
    1278:	23 c0       	rjmp	.+70     	; 0x12c0 <terminalCheck2+0x146>
		}
	else {
		left_degrees(150);
    127a:	86 e9       	ldi	r24, 0x96	; 150
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	b6 d9       	rcall	.-3220   	; 0x5ec <left_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    1280:	88 ec       	ldi	r24, 0xC8	; 200
    1282:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    1286:	80 93 2a 01 	sts	0x012A, r24
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <terminalCheck2+0x116>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
			left();
    128c:	0e 94 cc 00 	call	0x198	; 0x198 <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    1296:	82 33       	cpi	r24, 0x32	; 50
    1298:	c8 f3       	brcs	.-14     	; 0x128c <terminalCheck2+0x112>
			left();
		//_delay_ms(100);
		stop();
    129a:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
		dir=(dir+2)%4;
    129e:	80 91 0a 02 	lds	r24, 0x020A
    12a2:	90 91 0b 02 	lds	r25, 0x020B
    12a6:	02 96       	adiw	r24, 0x02	; 2
    12a8:	83 70       	andi	r24, 0x03	; 3
    12aa:	90 78       	andi	r25, 0x80	; 128
    12ac:	99 23       	and	r25, r25
    12ae:	24 f4       	brge	.+8      	; 0x12b8 <terminalCheck2+0x13e>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	8c 6f       	ori	r24, 0xFC	; 252
    12b4:	9f 6f       	ori	r25, 0xFF	; 255
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	90 93 0b 02 	sts	0x020B, r25
    12bc:	80 93 0a 02 	sts	0x020A, r24
	//_delay_ms(400);
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
// 	left();
// 	_delay_ms(100);
	stop();
    12c0:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	term[ct][1] = scan();
    12c4:	c0 91 3f 02 	lds	r28, 0x023F
    12c8:	d0 91 40 02 	lds	r29, 0x0240
    12cc:	c1 d9       	rcall	.-3198   	; 0x650 <scan>
    12ce:	cc 0f       	add	r28, r28
    12d0:	dd 1f       	adc	r29, r29
    12d2:	cc 0f       	add	r28, r28
    12d4:	dd 1f       	adc	r29, r29
    12d6:	cf 5b       	subi	r28, 0xBF	; 191
    12d8:	dd 4f       	sbci	r29, 0xFD	; 253
    12da:	9b 83       	std	Y+3, r25	; 0x03
    12dc:	8a 83       	std	Y+2, r24	; 0x02
	if(ct==0)
    12de:	80 91 3f 02 	lds	r24, 0x023F
    12e2:	90 91 40 02 	lds	r25, 0x0240
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	39 f4       	brne	.+14     	; 0x12f8 <terminalCheck2+0x17e>
		term[ct][1]=1;
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	30 93 44 02 	sts	0x0244, r19
    12f2:	20 93 43 02 	sts	0x0243, r18
    12f6:	12 c0       	rjmp	.+36     	; 0x131c <terminalCheck2+0x1a2>
	if(ct==1)
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	29 f4       	brne	.+10     	; 0x1308 <terminalCheck2+0x18e>
		term[ct][1]=0;
    12fe:	10 92 48 02 	sts	0x0248, r1
    1302:	10 92 47 02 	sts	0x0247, r1
    1306:	11 c0       	rjmp	.+34     	; 0x132a <terminalCheck2+0x1b0>
	if(ct==3)
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	39 f4       	brne	.+14     	; 0x131c <terminalCheck2+0x1a2>
		term[ct][1]=-1;
    130e:	2f ef       	ldi	r18, 0xFF	; 255
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	30 93 50 02 	sts	0x0250, r19
    1316:	20 93 4f 02 	sts	0x024F, r18
    131a:	07 c0       	rjmp	.+14     	; 0x132a <terminalCheck2+0x1b0>
	if(ct==2)
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	91 05       	cpc	r25, r1
    1320:	21 f4       	brne	.+8      	; 0x132a <terminalCheck2+0x1b0>
		term[ct][1]=0;
    1322:	10 92 4c 02 	sts	0x024C, r1
    1326:	10 92 4b 02 	sts	0x024B, r1
		buzzer_on();
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}*/
 	if(term[ct][1]==color[ct])
    132a:	dc 01       	movw	r26, r24
    132c:	aa 0f       	add	r26, r26
    132e:	bb 1f       	adc	r27, r27
    1330:	aa 0f       	add	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	af 5b       	subi	r26, 0xBF	; 191
    1336:	bd 4f       	sbci	r27, 0xFD	; 253
    1338:	fc 01       	movw	r30, r24
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	ed 5a       	subi	r30, 0xAD	; 173
    1340:	fd 4f       	sbci	r31, 0xFD	; 253
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	2d 91       	ld	r18, X+
    1346:	3c 91       	ld	r19, X
    1348:	13 97       	sbiw	r26, 0x03	; 3
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	69 f4       	brne	.+26     	; 0x136e <terminalCheck2+0x1f4>
 	{
		buzzer_on();
    1354:	0e 94 29 01 	call	0x252	; 0x252 <buzzer_on>
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	2f e7       	ldi	r18, 0x7F	; 127
    135c:	46 e1       	ldi	r20, 0x16	; 22
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	20 40       	sbci	r18, 0x00	; 0
    1362:	40 40       	sbci	r20, 0x00	; 0
    1364:	e1 f7       	brne	.-8      	; 0x135e <terminalCheck2+0x1e4>
    1366:	00 c0       	rjmp	.+0      	; 0x1368 <terminalCheck2+0x1ee>
    1368:	00 00       	nop
		_delay_ms(500);
 		buzzer_off();
    136a:	0e 94 2d 01 	call	0x25a	; 0x25a <buzzer_off>
	}
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    136e:	80 91 3f 02 	lds	r24, 0x023F
    1372:	90 91 40 02 	lds	r25, 0x0240
    1376:	fc 01       	movw	r30, r24
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	ef 5b       	subi	r30, 0xBF	; 191
    1382:	fd 4f       	sbci	r31, 0xFD	; 253
    1384:	22 81       	ldd	r18, Z+2	; 0x02
    1386:	33 81       	ldd	r19, Z+3	; 0x03
    1388:	2f 3f       	cpi	r18, 0xFF	; 255
    138a:	4f ef       	ldi	r20, 0xFF	; 255
    138c:	34 07       	cpc	r19, r20
    138e:	51 f0       	breq	.+20     	; 0x13a4 <terminalCheck2+0x22a>
    1390:	fc 01       	movw	r30, r24
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ed 5a       	subi	r30, 0xAD	; 173
    1398:	fd 4f       	sbci	r31, 0xFD	; 253
    139a:	40 81       	ld	r20, Z
    139c:	51 81       	ldd	r21, Z+1	; 0x01
    139e:	24 17       	cp	r18, r20
    13a0:	35 07       	cpc	r19, r21
    13a2:	51 f4       	brne	.+20     	; 0x13b8 <terminalCheck2+0x23e>
		total--;
    13a4:	20 91 02 02 	lds	r18, 0x0202
    13a8:	30 91 03 02 	lds	r19, 0x0203
    13ac:	21 50       	subi	r18, 0x01	; 1
    13ae:	31 09       	sbc	r19, r1
    13b0:	30 93 03 02 	sts	0x0203, r19
    13b4:	20 93 02 02 	sts	0x0202, r18
	//_delay_ms(1000);
	
	visited[ct] = 1;
    13b8:	fc 01       	movw	r30, r24
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	e0 5e       	subi	r30, 0xE0	; 224
    13c0:	fd 4f       	sbci	r31, 0xFD	; 253
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
	visitedCount++;
    13ca:	80 91 0c 02 	lds	r24, 0x020C
    13ce:	90 91 0d 02 	lds	r25, 0x020D
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	90 93 0d 02 	sts	0x020D, r25
    13d8:	80 93 0c 02 	sts	0x020C, r24
// 		
// 	left();
// 	_delay_ms(1000);
// 	stop();
// 	}
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <pick>:

void pick(int side)
{	
    13e2:	cf 93       	push	r28
    13e4:	c8 2f       	mov	r28, r24
	open(side);
    13e6:	f7 d9       	rcall	.-3090   	; 0x7d6 <open>
	lower(side);
    13e8:	8c 2f       	mov	r24, r28
    13ea:	c5 d9       	rcall	.-3190   	; 0x776 <lower>
	//_delay_ms(1000);
	close(side);
    13ec:	8c 2f       	mov	r24, r28
    13ee:	27 da       	rcall	.-2994   	; 0x83e <close>
	//_delay_ms(3000);
	elevate();//mid
    13f0:	d9 d9       	rcall	.-3150   	; 0x7a4 <elevate>
	///_delay_ms(1000);
	armCount--;
    13f2:	80 91 04 02 	lds	r24, 0x0204
    13f6:	90 91 05 02 	lds	r25, 0x0205
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	90 93 05 02 	sts	0x0205, r25
    1400:	80 93 04 02 	sts	0x0204, r24
    1404:	2f ef       	ldi	r18, 0xFF	; 255
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	9c e2       	ldi	r25, 0x2C	; 44
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	80 40       	sbci	r24, 0x00	; 0
    140e:	90 40       	sbci	r25, 0x00	; 0
    1410:	e1 f7       	brne	.-8      	; 0x140a <pick+0x28>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <pick+0x32>
    1414:	00 00       	nop
// 	if(armCount==0)
// 	{
// 		servo_1_free();
// 		servo_3_free();
// 	}
}
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <position>:

void position(int armNo, int side)
{
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	8c 01       	movw	r16, r24
    1424:	eb 01       	movw	r28, r22
	if (ct == ot)
    1426:	20 91 3f 02 	lds	r18, 0x023F
    142a:	30 91 40 02 	lds	r19, 0x0240
    142e:	40 91 00 02 	lds	r20, 0x0200
    1432:	50 91 01 02 	lds	r21, 0x0201
    1436:	24 17       	cp	r18, r20
    1438:	35 07       	cpc	r19, r21
    143a:	09 f0       	breq	.+2      	; 0x143e <position+0x24>
    143c:	9e c0       	rjmp	.+316    	; 0x157a <position+0x160>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    143e:	c9 01       	movw	r24, r18
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	30 f4       	brcc	.+12     	; 0x1452 <position+0x38>
    1446:	40 91 0a 02 	lds	r20, 0x020A
    144a:	50 91 0b 02 	lds	r21, 0x020B
    144e:	45 2b       	or	r20, r21
    1450:	61 f0       	breq	.+24     	; 0x146a <position+0x50>
    1452:	22 50       	subi	r18, 0x02	; 2
    1454:	31 09       	sbc	r19, r1
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	68 f4       	brcc	.+26     	; 0x1476 <position+0x5c>
    145c:	40 91 0a 02 	lds	r20, 0x020A
    1460:	50 91 0b 02 	lds	r21, 0x020B
    1464:	42 30       	cpi	r20, 0x02	; 2
    1466:	51 05       	cpc	r21, r1
    1468:	31 f4       	brne	.+12     	; 0x1476 <position+0x5c>
		{
			if (armNo != side)
    146a:	0c 17       	cp	r16, r28
    146c:	1d 07       	cpc	r17, r29
    146e:	09 f4       	brne	.+2      	; 0x1472 <position+0x58>
    1470:	4c c0       	rjmp	.+152    	; 0x150a <position+0xf0>
				turn();
    1472:	9e da       	rcall	.-2756   	; 0x9b0 <turn>
    1474:	4a c0       	rjmp	.+148    	; 0x150a <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	91 05       	cpc	r25, r1
    147a:	38 f4       	brcc	.+14     	; 0x148a <position+0x70>
    147c:	40 91 0a 02 	lds	r20, 0x020A
    1480:	50 91 0b 02 	lds	r21, 0x020B
    1484:	42 30       	cpi	r20, 0x02	; 2
    1486:	51 05       	cpc	r21, r1
    1488:	49 f0       	breq	.+18     	; 0x149c <position+0x82>
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	58 f4       	brcc	.+22     	; 0x14a6 <position+0x8c>
    1490:	40 91 0a 02 	lds	r20, 0x020A
    1494:	50 91 0b 02 	lds	r21, 0x020B
    1498:	45 2b       	or	r20, r21
    149a:	29 f4       	brne	.+10     	; 0x14a6 <position+0x8c>
		{
			if (armNo == side)
    149c:	0c 17       	cp	r16, r28
    149e:	1d 07       	cpc	r17, r29
    14a0:	a1 f5       	brne	.+104    	; 0x150a <position+0xf0>
				turn();
    14a2:	86 da       	rcall	.-2804   	; 0x9b0 <turn>
    14a4:	32 c0       	rjmp	.+100    	; 0x150a <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	91 05       	cpc	r25, r1
    14aa:	38 f4       	brcc	.+14     	; 0x14ba <position+0xa0>
    14ac:	40 91 0a 02 	lds	r20, 0x020A
    14b0:	50 91 0b 02 	lds	r21, 0x020B
    14b4:	41 30       	cpi	r20, 0x01	; 1
    14b6:	51 05       	cpc	r21, r1
    14b8:	51 f0       	breq	.+20     	; 0x14ce <position+0xb4>
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	70 f4       	brcc	.+28     	; 0x14dc <position+0xc2>
    14c0:	40 91 0a 02 	lds	r20, 0x020A
    14c4:	50 91 0b 02 	lds	r21, 0x020B
    14c8:	43 30       	cpi	r20, 0x03	; 3
    14ca:	51 05       	cpc	r21, r1
    14cc:	39 f4       	brne	.+14     	; 0x14dc <position+0xc2>
		{
			if (armNo != side)
    14ce:	0c 17       	cp	r16, r28
    14d0:	1d 07       	cpc	r17, r29
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <position+0xbe>
			turnRight();
    14d4:	d7 d9       	rcall	.-3154   	; 0x884 <turnRight>
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <position+0xf0>
			else turnLeft();
    14d8:	20 da       	rcall	.-3008   	; 0x91a <turnLeft>
    14da:	17 c0       	rjmp	.+46     	; 0x150a <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    14dc:	02 97       	sbiw	r24, 0x02	; 2
    14de:	30 f4       	brcc	.+12     	; 0x14ec <position+0xd2>
    14e0:	80 91 0a 02 	lds	r24, 0x020A
    14e4:	90 91 0b 02 	lds	r25, 0x020B
    14e8:	03 97       	sbiw	r24, 0x03	; 3
    14ea:	49 f0       	breq	.+18     	; 0x14fe <position+0xe4>
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	60 f4       	brcc	.+24     	; 0x150a <position+0xf0>
    14f2:	80 91 0a 02 	lds	r24, 0x020A
    14f6:	90 91 0b 02 	lds	r25, 0x020B
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	31 f4       	brne	.+12     	; 0x150a <position+0xf0>
					if (armNo == side)
    14fe:	0c 17       	cp	r16, r28
    1500:	1d 07       	cpc	r17, r29
    1502:	11 f4       	brne	.+4      	; 0x1508 <position+0xee>
						turnRight();
    1504:	bf d9       	rcall	.-3202   	; 0x884 <turnRight>
    1506:	01 c0       	rjmp	.+2      	; 0x150a <position+0xf0>
					else turnLeft();
    1508:	08 da       	rcall	.-3056   	; 0x91a <turnLeft>
		if(flag==1 && (dir==0 || dir==2))
    150a:	80 91 10 02 	lds	r24, 0x0210
    150e:	90 91 11 02 	lds	r25, 0x0211
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	a9 f4       	brne	.+42     	; 0x1540 <position+0x126>
    1516:	80 91 0a 02 	lds	r24, 0x020A
    151a:	90 91 0b 02 	lds	r25, 0x020B
    151e:	8d 7f       	andi	r24, 0xFD	; 253
    1520:	89 2b       	or	r24, r25
    1522:	71 f4       	brne	.+28     	; 0x1540 <position+0x126>
		{
			back_mm(65);
    1524:	81 e4       	ldi	r24, 0x41	; 65
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	58 d8       	rcall	.-3920   	; 0x5da <back_mm>
			flag=0;
    152a:	10 92 11 02 	sts	0x0211, r1
    152e:	10 92 10 02 	sts	0x0210, r1
			flag1=1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	90 93 0f 02 	sts	0x020F, r25
    153a:	80 93 0e 02 	sts	0x020E, r24
    153e:	8d c0       	rjmp	.+282    	; 0x165a <position+0x240>
		}	
		if(flag1==0 && (dir==0 || dir==2))
    1540:	80 91 0e 02 	lds	r24, 0x020E
    1544:	90 91 0f 02 	lds	r25, 0x020F
    1548:	89 2b       	or	r24, r25
    154a:	09 f0       	breq	.+2      	; 0x154e <position+0x134>
    154c:	86 c0       	rjmp	.+268    	; 0x165a <position+0x240>
    154e:	80 91 0a 02 	lds	r24, 0x020A
    1552:	90 91 0b 02 	lds	r25, 0x020B
    1556:	8d 7f       	andi	r24, 0xFD	; 253
    1558:	89 2b       	or	r24, r25
    155a:	09 f0       	breq	.+2      	; 0x155e <position+0x144>
    155c:	7e c0       	rjmp	.+252    	; 0x165a <position+0x240>
		{
			back_mm(90);
    155e:	8a e5       	ldi	r24, 0x5A	; 90
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	3b d8       	rcall	.-3978   	; 0x5da <back_mm>
			flag=0;
    1564:	10 92 11 02 	sts	0x0211, r1
    1568:	10 92 10 02 	sts	0x0210, r1
			flag1=1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	90 93 0f 02 	sts	0x020F, r25
    1574:	80 93 0e 02 	sts	0x020E, r24
    1578:	70 c0       	rjmp	.+224    	; 0x165a <position+0x240>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    157a:	80 91 0a 02 	lds	r24, 0x020A
    157e:	90 91 0b 02 	lds	r25, 0x020B
    1582:	8d 7f       	andi	r24, 0xFD	; 253
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	49 f4       	brne	.+18     	; 0x159a <position+0x180>
			if (ct == 0 || ct == 3)
    1588:	21 15       	cp	r18, r1
    158a:	31 05       	cpc	r19, r1
    158c:	19 f0       	breq	.+6      	; 0x1594 <position+0x17a>
    158e:	23 30       	cpi	r18, 0x03	; 3
    1590:	31 05       	cpc	r19, r1
    1592:	11 f4       	brne	.+4      	; 0x1598 <position+0x17e>
				turnRight();
    1594:	77 d9       	rcall	.-3346   	; 0x884 <turnRight>
    1596:	01 c0       	rjmp	.+2      	; 0x159a <position+0x180>
			else turnLeft();
    1598:	c0 d9       	rcall	.-3200   	; 0x91a <turnLeft>
		if (dir == 0 || dir == 2)
    159a:	80 91 0a 02 	lds	r24, 0x020A
    159e:	90 91 0b 02 	lds	r25, 0x020B
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	21 f0       	breq	.+8      	; 0x15ae <position+0x194>
    15a6:	02 97       	sbiw	r24, 0x02	; 2
    15a8:	09 f0       	breq	.+2      	; 0x15ac <position+0x192>
    15aa:	33 c0       	rjmp	.+102    	; 0x1612 <position+0x1f8>
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <position+0x1a2>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    15ae:	80 91 3f 02 	lds	r24, 0x023F
    15b2:	90 91 40 02 	lds	r25, 0x0240
    15b6:	02 97       	sbiw	r24, 0x02	; 2
    15b8:	c8 f4       	brcc	.+50     	; 0x15ec <position+0x1d2>
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <position+0x1b0>
    15bc:	80 91 3f 02 	lds	r24, 0x023F
    15c0:	90 91 40 02 	lds	r25, 0x0240
    15c4:	02 97       	sbiw	r24, 0x02	; 2
    15c6:	02 97       	sbiw	r24, 0x02	; 2
    15c8:	88 f4       	brcc	.+34     	; 0x15ec <position+0x1d2>
			{
				if (ot != 4 && ot != 5)
    15ca:	80 91 00 02 	lds	r24, 0x0200
    15ce:	90 91 01 02 	lds	r25, 0x0201
    15d2:	04 97       	sbiw	r24, 0x04	; 4
    15d4:	02 97       	sbiw	r24, 0x02	; 2
    15d6:	10 f0       	brcs	.+4      	; 0x15dc <position+0x1c2>
				{
					turnLeft();
    15d8:	a0 d9       	rcall	.-3264   	; 0x91a <turnLeft>
					front();
    15da:	42 dc       	rcall	.-1916   	; 0xe60 <front>
				}
				if (armNo == side)
    15dc:	0c 17       	cp	r16, r28
    15de:	1d 07       	cpc	r17, r29
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <position+0x1cc>
				{
					front();
    15e2:	3e dc       	rcall	.-1924   	; 0xe60 <front>
    15e4:	32 c0       	rjmp	.+100    	; 0x164a <position+0x230>
				}
				else
				{
					front();
    15e6:	3c dc       	rcall	.-1928   	; 0xe60 <front>
					turn();
    15e8:	e3 d9       	rcall	.-3130   	; 0x9b0 <turn>
    15ea:	2f c0       	rjmp	.+94     	; 0x164a <position+0x230>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    15ec:	80 91 00 02 	lds	r24, 0x0200
    15f0:	90 91 01 02 	lds	r25, 0x0201
    15f4:	04 97       	sbiw	r24, 0x04	; 4
    15f6:	02 97       	sbiw	r24, 0x02	; 2
    15f8:	10 f0       	brcs	.+4      	; 0x15fe <position+0x1e4>
				{
					turnLeft();
    15fa:	8f d9       	rcall	.-3298   	; 0x91a <turnLeft>
					front();
    15fc:	31 dc       	rcall	.-1950   	; 0xe60 <front>
				}
				if (armNo == side)
    15fe:	0c 17       	cp	r16, r28
    1600:	1d 07       	cpc	r17, r29
    1602:	19 f4       	brne	.+6      	; 0x160a <position+0x1f0>
				{
					turn();
    1604:	d5 d9       	rcall	.-3158   	; 0x9b0 <turn>
					front();
    1606:	2c dc       	rcall	.-1960   	; 0xe60 <front>
    1608:	20 c0       	rjmp	.+64     	; 0x164a <position+0x230>
				}
				else
				{
					turn();
    160a:	d2 d9       	rcall	.-3164   	; 0x9b0 <turn>
					front();
    160c:	29 dc       	rcall	.-1966   	; 0xe60 <front>
					turn();
    160e:	d0 d9       	rcall	.-3168   	; 0x9b0 <turn>
    1610:	1c c0       	rjmp	.+56     	; 0x164a <position+0x230>
				}
			}
		}
		else
		{
			if (armNo == side)
    1612:	0c 17       	cp	r16, r28
    1614:	1d 07       	cpc	r17, r29
    1616:	69 f4       	brne	.+26     	; 0x1632 <position+0x218>
			{
				if (ct == 0 || ct == 3)
    1618:	80 91 3f 02 	lds	r24, 0x023F
    161c:	90 91 40 02 	lds	r25, 0x0240
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	11 f0       	breq	.+4      	; 0x1628 <position+0x20e>
    1624:	03 97       	sbiw	r24, 0x03	; 3
    1626:	11 f4       	brne	.+4      	; 0x162c <position+0x212>
				turnRight();
    1628:	2d d9       	rcall	.-3494   	; 0x884 <turnRight>
    162a:	01 c0       	rjmp	.+2      	; 0x162e <position+0x214>
				else turnLeft();
    162c:	76 d9       	rcall	.-3348   	; 0x91a <turnLeft>
				front();
    162e:	18 dc       	rcall	.-2000   	; 0xe60 <front>
    1630:	0c c0       	rjmp	.+24     	; 0x164a <position+0x230>
			}
			else
			{
				if (ct == 0 || ct == 3)
    1632:	80 91 3f 02 	lds	r24, 0x023F
    1636:	90 91 40 02 	lds	r25, 0x0240
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	11 f0       	breq	.+4      	; 0x1642 <position+0x228>
    163e:	03 97       	sbiw	r24, 0x03	; 3
    1640:	11 f4       	brne	.+4      	; 0x1646 <position+0x22c>
				turnRight();
    1642:	20 d9       	rcall	.-3520   	; 0x884 <turnRight>
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <position+0x22e>
				else turnLeft();
    1646:	69 d9       	rcall	.-3374   	; 0x91a <turnLeft>
				front();
    1648:	0b dc       	rcall	.-2026   	; 0xe60 <front>
			}
		}
		ot = ct;
    164a:	80 91 3f 02 	lds	r24, 0x023F
    164e:	90 91 40 02 	lds	r25, 0x0240
    1652:	90 93 01 02 	sts	0x0201, r25
    1656:	80 93 00 02 	sts	0x0200, r24
	}
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <pickNode>:

void pickNode(int armNo, int side)
{
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	8c 01       	movw	r16, r24
    166e:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    1670:	fc 01       	movw	r30, r24
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	eb 59       	subi	r30, 0x9B	; 155
    1678:	fd 4f       	sbci	r31, 0xFD	; 253
    167a:	a0 91 3f 02 	lds	r26, 0x023F
    167e:	b0 91 40 02 	lds	r27, 0x0240
    1682:	aa 0f       	add	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	a6 0f       	add	r26, r22
    1688:	b7 1f       	adc	r27, r23
    168a:	aa 0f       	add	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	af 5b       	subi	r26, 0xBF	; 191
    1690:	bd 4f       	sbci	r27, 0xFD	; 253
    1692:	8d 91       	ld	r24, X+
    1694:	9c 91       	ld	r25, X
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
	position(armNo, side);
    169a:	c8 01       	movw	r24, r16
    169c:	be de       	rcall	.-644    	; 0x141a <position>
	pick(armNo);
    169e:	c8 01       	movw	r24, r16
    16a0:	a0 de       	rcall	.-704    	; 0x13e2 <pick>
	term[ct][side] = -1;
    16a2:	80 91 3f 02 	lds	r24, 0x023F
    16a6:	90 91 40 02 	lds	r25, 0x0240
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	c8 0f       	add	r28, r24
    16b0:	d9 1f       	adc	r29, r25
    16b2:	cc 0f       	add	r28, r28
    16b4:	dd 1f       	adc	r29, r29
    16b6:	cf 5b       	subi	r28, 0xBF	; 191
    16b8:	dd 4f       	sbci	r29, 0xFD	; 253
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	9f ef       	ldi	r25, 0xFF	; 255
    16be:	99 83       	std	Y+1, r25	; 0x01
    16c0:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	08 95       	ret

000016cc <pickSort>:

void pickSort(int armNo, int sortNo)
{
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
    16d6:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    16d8:	fc 01       	movw	r30, r24
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	eb 59       	subi	r30, 0x9B	; 155
    16e0:	fd 4f       	sbci	r31, 0xFD	; 253
    16e2:	db 01       	movw	r26, r22
    16e4:	aa 0f       	add	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	a5 5c       	subi	r26, 0xC5	; 197
    16ea:	bd 4f       	sbci	r27, 0xFD	; 253
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    16f4:	c6 17       	cp	r28, r22
    16f6:	d7 07       	cpc	r29, r23
    16f8:	39 f4       	brne	.+14     	; 0x1708 <pickSort+0x3c>
    16fa:	80 91 0a 02 	lds	r24, 0x020A
    16fe:	90 91 0b 02 	lds	r25, 0x020B
    1702:	89 2b       	or	r24, r25
    1704:	49 f4       	brne	.+18     	; 0x1718 <pickSort+0x4c>
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <pickSort+0x48>
    1708:	80 91 0a 02 	lds	r24, 0x020A
    170c:	90 91 0b 02 	lds	r25, 0x020B
    1710:	02 97       	sbiw	r24, 0x02	; 2
    1712:	11 f4       	brne	.+4      	; 0x1718 <pickSort+0x4c>
		turn();
    1714:	4d d9       	rcall	.-3430   	; 0x9b0 <turn>
    1716:	0c c0       	rjmp	.+24     	; 0x1730 <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1718:	80 91 0a 02 	lds	r24, 0x020A
    171c:	90 91 0b 02 	lds	r25, 0x020B
    1720:	8d 7f       	andi	r24, 0xFD	; 253
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	29 f4       	brne	.+10     	; 0x1730 <pickSort+0x64>
			if (armNo == 0)
    1726:	20 97       	sbiw	r28, 0x00	; 0
    1728:	11 f4       	brne	.+4      	; 0x172e <pickSort+0x62>
				turnLeft();
    172a:	f7 d8       	rcall	.-3602   	; 0x91a <turnLeft>
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <pickSort+0x64>
			else turnRight();
    172e:	aa d8       	rcall	.-3756   	; 0x884 <turnRight>
	}
	back_mm(30);
    1730:	8e e1       	ldi	r24, 0x1E	; 30
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 ed 02 	call	0x5da	; 0x5da <back_mm>
	pick(armNo);
    1738:	ce 01       	movw	r24, r28
    173a:	53 de       	rcall	.-858    	; 0x13e2 <pick>
	forward_mm(30);
    173c:	8e e1       	ldi	r24, 0x1E	; 30
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <forward_mm>
	sort[sortNo] = -1;
    1744:	f8 01       	movw	r30, r16
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	e5 5c       	subi	r30, 0xC5	; 197
    174c:	fd 4f       	sbci	r31, 0xFD	; 253
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <pickup>:
void pickup()
{
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    176c:	20 91 3f 02 	lds	r18, 0x023F
    1770:	30 91 40 02 	lds	r19, 0x0240
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	30 f4       	brcc	.+12     	; 0x1786 <pickup+0x26>
    177a:	80 91 0a 02 	lds	r24, 0x020A
    177e:	90 91 0b 02 	lds	r25, 0x020B
    1782:	02 97       	sbiw	r24, 0x02	; 2
    1784:	79 f0       	breq	.+30     	; 0x17a4 <pickup+0x44>
    1786:	c9 01       	movw	r24, r18
    1788:	02 97       	sbiw	r24, 0x02	; 2
    178a:	02 97       	sbiw	r24, 0x02	; 2
    178c:	80 f4       	brcc	.+32     	; 0x17ae <pickup+0x4e>
    178e:	80 91 0a 02 	lds	r24, 0x020A
    1792:	90 91 0b 02 	lds	r25, 0x020B
    1796:	89 2b       	or	r24, r25
    1798:	79 f0       	breq	.+30     	; 0x17b8 <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    179a:	c1 e0       	ldi	r28, 0x01	; 1
    179c:	d0 e0       	ldi	r29, 0x00	; 0
    179e:	00 e0       	ldi	r16, 0x00	; 0
    17a0:	10 e0       	ldi	r17, 0x00	; 0
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    17a4:	c0 e0       	ldi	r28, 0x00	; 0
    17a6:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    17a8:	01 e0       	ldi	r16, 0x01	; 1
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    17ae:	c1 e0       	ldi	r28, 0x01	; 1
    17b0:	d0 e0       	ldi	r29, 0x00	; 0
    17b2:	00 e0       	ldi	r16, 0x00	; 0
    17b4:	10 e0       	ldi	r17, 0x00	; 0
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    17b8:	c0 e0       	ldi	r28, 0x00	; 0
    17ba:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    17bc:	01 e0       	ldi	r16, 0x01	; 1
    17be:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    17c0:	f9 01       	movw	r30, r18
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	e0 5e       	subi	r30, 0xE0	; 224
    17c8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	89 2b       	or	r24, r25
    17d0:	79 f4       	brne	.+30     	; 0x17f0 <pickup+0x90>
		if (term[ct][0] == -2)
    17d2:	f9 01       	movw	r30, r18
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	ef 5b       	subi	r30, 0xBF	; 191
    17de:	fd 4f       	sbci	r31, 0xFD	; 253
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	19 f4       	brne	.+6      	; 0x17ee <pickup+0x8e>
		{
			terminalCheck1();
    17e8:	e0 db       	rcall	.-2112   	; 0xfaa <terminalCheck1>
			terminalCheck2();
    17ea:	c7 dc       	rcall	.-1650   	; 0x117a <terminalCheck2>
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <pickup+0x90>
		}
		else	terminalCheck2();
    17ee:	c5 dc       	rcall	.-1654   	; 0x117a <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    17f0:	20 91 3f 02 	lds	r18, 0x023F
    17f4:	30 91 40 02 	lds	r19, 0x0240
    17f8:	f9 01       	movw	r30, r18
    17fa:	ee 0f       	add	r30, r30
    17fc:	ff 1f       	adc	r31, r31
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	ef 5b       	subi	r30, 0xBF	; 191
    1804:	fd 4f       	sbci	r31, 0xFD	; 253
    1806:	40 81       	ld	r20, Z
    1808:	51 81       	ldd	r21, Z+1	; 0x01
    180a:	f9 01       	movw	r30, r18
    180c:	ee 0f       	add	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	ed 5a       	subi	r30, 0xAD	; 173
    1812:	fd 4f       	sbci	r31, 0xFD	; 253
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	48 17       	cp	r20, r24
    181a:	59 07       	cpc	r21, r25
    181c:	21 f0       	breq	.+8      	; 0x1826 <pickup+0xc6>
    181e:	4f 3f       	cpi	r20, 0xFF	; 255
    1820:	6f ef       	ldi	r22, 0xFF	; 255
    1822:	56 07       	cpc	r21, r22
    1824:	89 f4       	brne	.+34     	; 0x1848 <pickup+0xe8>
    1826:	f9 01       	movw	r30, r18
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	ef 5b       	subi	r30, 0xBF	; 191
    1832:	fd 4f       	sbci	r31, 0xFD	; 253
    1834:	62 81       	ldd	r22, Z+2	; 0x02
    1836:	73 81       	ldd	r23, Z+3	; 0x03
    1838:	86 17       	cp	r24, r22
    183a:	97 07       	cpc	r25, r23
    183c:	09 f4       	brne	.+2      	; 0x1840 <pickup+0xe0>
    183e:	ee c1       	rjmp	.+988    	; 0x1c1c <pickup+0x4bc>
    1840:	6f 3f       	cpi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	09 f4       	brne	.+2      	; 0x1848 <pickup+0xe8>
    1846:	ea c1       	rjmp	.+980    	; 0x1c1c <pickup+0x4bc>
		{
			if (armCount == 2)
    1848:	60 91 04 02 	lds	r22, 0x0204
    184c:	70 91 05 02 	lds	r23, 0x0205
    1850:	62 30       	cpi	r22, 0x02	; 2
    1852:	71 05       	cpc	r23, r1
    1854:	09 f0       	breq	.+2      	; 0x1858 <pickup+0xf8>
    1856:	b0 c0       	rjmp	.+352    	; 0x19b8 <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1858:	e0 91 63 02 	lds	r30, 0x0263
    185c:	f0 91 64 02 	lds	r31, 0x0264
    1860:	df 01       	movw	r26, r30
    1862:	aa 0f       	add	r26, r26
    1864:	bb 1f       	adc	r27, r27
    1866:	ad 5a       	subi	r26, 0xAD	; 173
    1868:	bd 4f       	sbci	r27, 0xFD	; 253
    186a:	6d 91       	ld	r22, X+
    186c:	7c 91       	ld	r23, X
    186e:	46 17       	cp	r20, r22
    1870:	57 07       	cpc	r21, r23
    1872:	79 f0       	breq	.+30     	; 0x1892 <pickup+0x132>
    1874:	d9 01       	movw	r26, r18
    1876:	aa 0f       	add	r26, r26
    1878:	bb 1f       	adc	r27, r27
    187a:	aa 0f       	add	r26, r26
    187c:	bb 1f       	adc	r27, r27
    187e:	af 5b       	subi	r26, 0xBF	; 191
    1880:	bd 4f       	sbci	r27, 0xFD	; 253
    1882:	12 96       	adiw	r26, 0x02	; 2
    1884:	ed 90       	ld	r14, X+
    1886:	fc 90       	ld	r15, X
    1888:	13 97       	sbiw	r26, 0x03	; 3
    188a:	6e 15       	cp	r22, r14
    188c:	7f 05       	cpc	r23, r15
    188e:	59 f4       	brne	.+22     	; 0x18a6 <pickup+0x146>
    1890:	05 c0       	rjmp	.+10     	; 0x189c <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 1);
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	c8 01       	movw	r24, r16
    1898:	e5 de       	rcall	.-566    	; 0x1664 <pickNode>
    189a:	8e c0       	rjmp	.+284    	; 0x19b8 <pickup+0x258>
					else	pickNode(arm1, 0);
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	ce 01       	movw	r24, r28
    18a2:	e0 de       	rcall	.-576    	; 0x1664 <pickNode>
    18a4:	89 c0       	rjmp	.+274    	; 0x19b8 <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    18a6:	8e 15       	cp	r24, r14
    18a8:	9f 05       	cpc	r25, r15
    18aa:	09 f4       	brne	.+2      	; 0x18ae <pickup+0x14e>
    18ac:	4e c0       	rjmp	.+156    	; 0x194a <pickup+0x1ea>
    18ae:	ef 20       	and	r14, r15
    18b0:	e0 94       	com	r14
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <pickup+0x156>
    18b4:	4a c0       	rjmp	.+148    	; 0x194a <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    18b6:	48 17       	cp	r20, r24
    18b8:	59 07       	cpc	r21, r25
    18ba:	69 f0       	breq	.+26     	; 0x18d6 <pickup+0x176>
    18bc:	4f 3f       	cpi	r20, 0xFF	; 255
    18be:	af ef       	ldi	r26, 0xFF	; 255
    18c0:	5a 07       	cpc	r21, r26
    18c2:	49 f0       	breq	.+18     	; 0x18d6 <pickup+0x176>
					{
						pickNode(arm1, 0);
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	ce 01       	movw	r24, r28
    18ca:	cc de       	rcall	.-616    	; 0x1664 <pickNode>
						pickNode(arm0, 1);
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	c8 01       	movw	r24, r16
    18d2:	c8 de       	rcall	.-624    	; 0x1664 <pickNode>
    18d4:	71 c0       	rjmp	.+226    	; 0x19b8 <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    18d6:	21 70       	andi	r18, 0x01	; 1
    18d8:	30 78       	andi	r19, 0x80	; 128
    18da:	33 23       	and	r19, r19
    18dc:	34 f4       	brge	.+12     	; 0x18ea <pickup+0x18a>
    18de:	21 50       	subi	r18, 0x01	; 1
    18e0:	31 09       	sbc	r19, r1
    18e2:	2e 6f       	ori	r18, 0xFE	; 254
    18e4:	3f 6f       	ori	r19, 0xFF	; 255
    18e6:	2f 5f       	subi	r18, 0xFF	; 255
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	d9 01       	movw	r26, r18
    18ec:	aa 0f       	add	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	a5 5c       	subi	r26, 0xC5	; 197
    18f2:	bd 4f       	sbci	r27, 0xFD	; 253
    18f4:	2d 91       	ld	r18, X+
    18f6:	3c 91       	ld	r19, X
    18f8:	2f 3f       	cpi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	09 f1       	breq	.+66     	; 0x1940 <pickup+0x1e0>
    18fe:	df 01       	movw	r26, r30
    1900:	aa 0f       	add	r26, r26
    1902:	bb 1f       	adc	r27, r27
    1904:	aa 0f       	add	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	af 5b       	subi	r26, 0xBF	; 191
    190a:	bd 4f       	sbci	r27, 0xFD	; 253
    190c:	2d 91       	ld	r18, X+
    190e:	3c 91       	ld	r19, X
    1910:	62 17       	cp	r22, r18
    1912:	73 07       	cpc	r23, r19
    1914:	a9 f0       	breq	.+42     	; 0x1940 <pickup+0x1e0>
    1916:	2f 3f       	cpi	r18, 0xFF	; 255
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	91 f0       	breq	.+36     	; 0x1940 <pickup+0x1e0>
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	ef 5b       	subi	r30, 0xBF	; 191
    1926:	fd 4f       	sbci	r31, 0xFD	; 253
    1928:	22 81       	ldd	r18, Z+2	; 0x02
    192a:	33 81       	ldd	r19, Z+3	; 0x03
    192c:	62 17       	cp	r22, r18
    192e:	73 07       	cpc	r23, r19
    1930:	39 f0       	breq	.+14     	; 0x1940 <pickup+0x1e0>
    1932:	2f 3f       	cpi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	21 f0       	breq	.+8      	; 0x1940 <pickup+0x1e0>
    1938:	48 17       	cp	r20, r24
    193a:	59 07       	cpc	r21, r25
    193c:	09 f0       	breq	.+2      	; 0x1940 <pickup+0x1e0>
    193e:	6e c1       	rjmp	.+732    	; 0x1c1c <pickup+0x4bc>
						pickNode(arm0, 1);
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	c8 01       	movw	r24, r16
    1946:	8e de       	rcall	.-740    	; 0x1664 <pickNode>
    1948:	37 c0       	rjmp	.+110    	; 0x19b8 <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    194a:	48 17       	cp	r20, r24
    194c:	59 07       	cpc	r21, r25
    194e:	09 f4       	brne	.+2      	; 0x1952 <pickup+0x1f2>
    1950:	65 c1       	rjmp	.+714    	; 0x1c1c <pickup+0x4bc>
    1952:	4f 3f       	cpi	r20, 0xFF	; 255
    1954:	5f 4f       	sbci	r21, 0xFF	; 255
    1956:	09 f4       	brne	.+2      	; 0x195a <pickup+0x1fa>
    1958:	61 c1       	rjmp	.+706    	; 0x1c1c <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    195a:	21 70       	andi	r18, 0x01	; 1
    195c:	30 78       	andi	r19, 0x80	; 128
    195e:	33 23       	and	r19, r19
    1960:	34 f4       	brge	.+12     	; 0x196e <pickup+0x20e>
    1962:	21 50       	subi	r18, 0x01	; 1
    1964:	31 09       	sbc	r19, r1
    1966:	2e 6f       	ori	r18, 0xFE	; 254
    1968:	3f 6f       	ori	r19, 0xFF	; 255
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	d9 01       	movw	r26, r18
    1970:	aa 0f       	add	r26, r26
    1972:	bb 1f       	adc	r27, r27
    1974:	a5 5c       	subi	r26, 0xC5	; 197
    1976:	bd 4f       	sbci	r27, 0xFD	; 253
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	c1 f0       	breq	.+48     	; 0x19b0 <pickup+0x250>
    1980:	df 01       	movw	r26, r30
    1982:	aa 0f       	add	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	aa 0f       	add	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	af 5b       	subi	r26, 0xBF	; 191
    198c:	bd 4f       	sbci	r27, 0xFD	; 253
    198e:	8d 91       	ld	r24, X+
    1990:	9c 91       	ld	r25, X
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	68 17       	cp	r22, r24
    1996:	79 07       	cpc	r23, r25
    1998:	59 f0       	breq	.+22     	; 0x19b0 <pickup+0x250>
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	49 f0       	breq	.+18     	; 0x19b0 <pickup+0x250>
    199e:	fd 01       	movw	r30, r26
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	68 17       	cp	r22, r24
    19a6:	79 07       	cpc	r23, r25
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <pickup+0x250>
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <pickup+0x250>
    19ae:	36 c1       	rjmp	.+620    	; 0x1c1c <pickup+0x4bc>
						pickNode(arm1, 0);
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	ce 01       	movw	r24, r28
    19b6:	56 de       	rcall	.-852    	; 0x1664 <pickNode>
				}

			}
			if (armCount == 1)
    19b8:	80 91 04 02 	lds	r24, 0x0204
    19bc:	90 91 05 02 	lds	r25, 0x0205
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <pickup+0x266>
    19c4:	2b c1       	rjmp	.+598    	; 0x1c1c <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    19c6:	f8 01       	movw	r30, r16
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	eb 59       	subi	r30, 0x9B	; 155
    19ce:	fd 4f       	sbci	r31, 0xFD	; 253
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	09 f4       	brne	.+2      	; 0x19da <pickup+0x27a>
					a1 = arm0;
    19d8:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    19da:	be 01       	movw	r22, r28
    19dc:	6f 5f       	subi	r22, 0xFF	; 255
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	61 70       	andi	r22, 0x01	; 1
    19e2:	70 78       	andi	r23, 0x80	; 128
    19e4:	77 23       	and	r23, r23
    19e6:	34 f4       	brge	.+12     	; 0x19f4 <pickup+0x294>
    19e8:	61 50       	subi	r22, 0x01	; 1
    19ea:	71 09       	sbc	r23, r1
    19ec:	6e 6f       	ori	r22, 0xFE	; 254
    19ee:	7f 6f       	ori	r23, 0xFF	; 255
    19f0:	6f 5f       	subi	r22, 0xFF	; 255
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    19f4:	80 91 3f 02 	lds	r24, 0x023F
    19f8:	90 91 40 02 	lds	r25, 0x0240
    19fc:	9c 01       	movw	r18, r24
    19fe:	21 70       	andi	r18, 0x01	; 1
    1a00:	30 78       	andi	r19, 0x80	; 128
    1a02:	33 23       	and	r19, r19
    1a04:	34 f4       	brge	.+12     	; 0x1a12 <pickup+0x2b2>
    1a06:	21 50       	subi	r18, 0x01	; 1
    1a08:	31 09       	sbc	r19, r1
    1a0a:	2e 6f       	ori	r18, 0xFE	; 254
    1a0c:	3f 6f       	ori	r19, 0xFF	; 255
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	f9 01       	movw	r30, r18
    1a14:	ee 0f       	add	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	e5 5c       	subi	r30, 0xC5	; 197
    1a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1c:	20 81       	ld	r18, Z
    1a1e:	31 81       	ldd	r19, Z+1	; 0x01
    1a20:	2f 3f       	cpi	r18, 0xFF	; 255
    1a22:	af ef       	ldi	r26, 0xFF	; 255
    1a24:	3a 07       	cpc	r19, r26
    1a26:	d9 f5       	brne	.+118    	; 0x1a9e <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1a28:	fc 01       	movw	r30, r24
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	ec 0f       	add	r30, r28
    1a30:	fd 1f       	adc	r31, r29
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	ef 5b       	subi	r30, 0xBF	; 191
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	20 81       	ld	r18, Z
    1a3c:	31 81       	ldd	r19, Z+1	; 0x01
    1a3e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a40:	ef ef       	ldi	r30, 0xFF	; 255
    1a42:	3e 07       	cpc	r19, r30
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <pickup+0x302>
    1a46:	fc 01       	movw	r30, r24
    1a48:	ee 0f       	add	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	ed 5a       	subi	r30, 0xAD	; 173
    1a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a50:	40 81       	ld	r20, Z
    1a52:	51 81       	ldd	r21, Z+1	; 0x01
    1a54:	24 17       	cp	r18, r20
    1a56:	35 07       	cpc	r19, r21
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <pickup+0x302>
						pickNode(a1, a1);
    1a5a:	be 01       	movw	r22, r28
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	02 de       	rcall	.-1020   	; 0x1664 <pickNode>
    1a60:	dd c0       	rjmp	.+442    	; 0x1c1c <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1a62:	fc 01       	movw	r30, r24
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	e6 0f       	add	r30, r22
    1a6a:	f7 1f       	adc	r31, r23
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	ef 5b       	subi	r30, 0xBF	; 191
    1a72:	fd 4f       	sbci	r31, 0xFD	; 253
    1a74:	20 81       	ld	r18, Z
    1a76:	31 81       	ldd	r19, Z+1	; 0x01
    1a78:	2f 3f       	cpi	r18, 0xFF	; 255
    1a7a:	4f ef       	ldi	r20, 0xFF	; 255
    1a7c:	34 07       	cpc	r19, r20
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <pickup+0x322>
    1a80:	cd c0       	rjmp	.+410    	; 0x1c1c <pickup+0x4bc>
    1a82:	fc 01       	movw	r30, r24
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	ed 5a       	subi	r30, 0xAD	; 173
    1a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	28 17       	cp	r18, r24
    1a92:	39 07       	cpc	r19, r25
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <pickup+0x338>
    1a96:	c2 c0       	rjmp	.+388    	; 0x1c1c <pickup+0x4bc>
						pickNode(a1, a2);
    1a98:	ce 01       	movw	r24, r28
    1a9a:	e4 dd       	rcall	.-1080   	; 0x1664 <pickNode>
    1a9c:	bf c0       	rjmp	.+382    	; 0x1c1c <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1a9e:	40 91 63 02 	lds	r20, 0x0263
    1aa2:	50 91 64 02 	lds	r21, 0x0264
    1aa6:	fa 01       	movw	r30, r20
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ed 5a       	subi	r30, 0xAD	; 173
    1aae:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	f0 81       	ld	r31, Z
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	aa 0f       	add	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	aa 0f       	add	r26, r26
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	af 5b       	subi	r26, 0xBF	; 191
    1ac2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ac4:	0d 90       	ld	r0, X+
    1ac6:	bc 91       	ld	r27, X
    1ac8:	a0 2d       	mov	r26, r0
    1aca:	ae 17       	cp	r26, r30
    1acc:	bf 07       	cpc	r27, r31
    1ace:	71 f0       	breq	.+28     	; 0x1aec <pickup+0x38c>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	aa 0f       	add	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	aa 0f       	add	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	af 5b       	subi	r26, 0xBF	; 191
    1adc:	bd 4f       	sbci	r27, 0xFD	; 253
    1ade:	12 96       	adiw	r26, 0x02	; 2
    1ae0:	0d 90       	ld	r0, X+
    1ae2:	bc 91       	ld	r27, X
    1ae4:	a0 2d       	mov	r26, r0
    1ae6:	ea 17       	cp	r30, r26
    1ae8:	fb 07       	cpc	r31, r27
    1aea:	d9 f5       	brne	.+118    	; 0x1b62 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1aec:	da 01       	movw	r26, r20
    1aee:	aa 0f       	add	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	a0 5e       	subi	r26, 0xE0	; 224
    1af4:	bd 4f       	sbci	r27, 0xFD	; 253
    1af6:	2d 91       	ld	r18, X+
    1af8:	3c 91       	ld	r19, X
    1afa:	21 30       	cpi	r18, 0x01	; 1
    1afc:	31 05       	cpc	r19, r1
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <pickup+0x3a2>
    1b00:	8d c0       	rjmp	.+282    	; 0x1c1c <pickup+0x4bc>
    1b02:	da 01       	movw	r26, r20
    1b04:	aa 0f       	add	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	aa 0f       	add	r26, r26
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	af 5b       	subi	r26, 0xBF	; 191
    1b0e:	bd 4f       	sbci	r27, 0xFD	; 253
    1b10:	2d 91       	ld	r18, X+
    1b12:	3c 91       	ld	r19, X
    1b14:	2f 3f       	cpi	r18, 0xFF	; 255
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	79 f0       	breq	.+30     	; 0x1b38 <pickup+0x3d8>
    1b1a:	da 01       	movw	r26, r20
    1b1c:	aa 0f       	add	r26, r26
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	aa 0f       	add	r26, r26
    1b22:	bb 1f       	adc	r27, r27
    1b24:	af 5b       	subi	r26, 0xBF	; 191
    1b26:	bd 4f       	sbci	r27, 0xFD	; 253
    1b28:	12 96       	adiw	r26, 0x02	; 2
    1b2a:	2d 91       	ld	r18, X+
    1b2c:	3c 91       	ld	r19, X
    1b2e:	13 97       	sbiw	r26, 0x03	; 3
    1b30:	2f 3f       	cpi	r18, 0xFF	; 255
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <pickup+0x3d8>
    1b36:	72 c0       	rjmp	.+228    	; 0x1c1c <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	8c 0f       	add	r24, r28
    1b3e:	9d 1f       	adc	r25, r29
    1b40:	dc 01       	movw	r26, r24
    1b42:	aa 0f       	add	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	af 5b       	subi	r26, 0xBF	; 191
    1b48:	bd 4f       	sbci	r27, 0xFD	; 253
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9c 91       	ld	r25, X
    1b4e:	e8 17       	cp	r30, r24
    1b50:	f9 07       	cpc	r31, r25
    1b52:	21 f4       	brne	.+8      	; 0x1b5c <pickup+0x3fc>
								pickNode(a1, a1);
    1b54:	be 01       	movw	r22, r28
    1b56:	ce 01       	movw	r24, r28
    1b58:	85 dd       	rcall	.-1270   	; 0x1664 <pickNode>
    1b5a:	60 c0       	rjmp	.+192    	; 0x1c1c <pickup+0x4bc>
							else pickNode(a1, a2);
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	82 dd       	rcall	.-1276   	; 0x1664 <pickNode>
    1b60:	5d c0       	rjmp	.+186    	; 0x1c1c <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1b62:	dc 01       	movw	r26, r24
    1b64:	aa 0f       	add	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	ad 5a       	subi	r26, 0xAD	; 173
    1b6a:	bd 4f       	sbci	r27, 0xFD	; 253
    1b6c:	0d 90       	ld	r0, X+
    1b6e:	bc 91       	ld	r27, X
    1b70:	a0 2d       	mov	r26, r0
    1b72:	2a 17       	cp	r18, r26
    1b74:	3b 07       	cpc	r19, r27
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <pickup+0x41a>
    1b78:	51 c0       	rjmp	.+162    	; 0x1c1c <pickup+0x4bc>
    1b7a:	2e 17       	cp	r18, r30
    1b7c:	3f 07       	cpc	r19, r31
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <pickup+0x422>
    1b80:	4d c0       	rjmp	.+154    	; 0x1c1c <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1b82:	fa 01       	movw	r30, r20
    1b84:	ee 0f       	add	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	e0 5e       	subi	r30, 0xE0	; 224
    1b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8c:	20 81       	ld	r18, Z
    1b8e:	31 81       	ldd	r19, Z+1	; 0x01
    1b90:	21 30       	cpi	r18, 0x01	; 1
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <pickup+0x438>
    1b96:	42 c0       	rjmp	.+132    	; 0x1c1c <pickup+0x4bc>
    1b98:	fa 01       	movw	r30, r20
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	ef 5b       	subi	r30, 0xBF	; 191
    1ba4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ba6:	20 81       	ld	r18, Z
    1ba8:	31 81       	ldd	r19, Z+1	; 0x01
    1baa:	a2 17       	cp	r26, r18
    1bac:	b3 07       	cpc	r27, r19
    1bae:	b1 f1       	breq	.+108    	; 0x1c1c <pickup+0x4bc>
    1bb0:	fa 01       	movw	r30, r20
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	ef 5b       	subi	r30, 0xBF	; 191
    1bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bbe:	22 81       	ldd	r18, Z+2	; 0x02
    1bc0:	33 81       	ldd	r19, Z+3	; 0x03
    1bc2:	a2 17       	cp	r26, r18
    1bc4:	b3 07       	cpc	r27, r19
    1bc6:	51 f1       	breq	.+84     	; 0x1c1c <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1bc8:	fc 01       	movw	r30, r24
    1bca:	ee 0f       	add	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	ec 0f       	add	r30, r28
    1bd0:	fd 1f       	adc	r31, r29
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31
    1bd6:	ef 5b       	subi	r30, 0xBF	; 191
    1bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bda:	20 81       	ld	r18, Z
    1bdc:	31 81       	ldd	r19, Z+1	; 0x01
    1bde:	2f 3f       	cpi	r18, 0xFF	; 255
    1be0:	ef ef       	ldi	r30, 0xFF	; 255
    1be2:	3e 07       	cpc	r19, r30
    1be4:	39 f0       	breq	.+14     	; 0x1bf4 <pickup+0x494>
    1be6:	a2 17       	cp	r26, r18
    1be8:	b3 07       	cpc	r27, r19
    1bea:	21 f0       	breq	.+8      	; 0x1bf4 <pickup+0x494>
									pickNode(a1, a1);
    1bec:	be 01       	movw	r22, r28
    1bee:	ce 01       	movw	r24, r28
    1bf0:	39 dd       	rcall	.-1422   	; 0x1664 <pickNode>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	86 0f       	add	r24, r22
    1bfa:	97 1f       	adc	r25, r23
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	ef 5b       	subi	r30, 0xBF	; 191
    1c04:	fd 4f       	sbci	r31, 0xFD	; 253
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0c:	2f ef       	ldi	r18, 0xFF	; 255
    1c0e:	92 07       	cpc	r25, r18
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <pickup+0x4bc>
    1c12:	a8 17       	cp	r26, r24
    1c14:	b9 07       	cpc	r27, r25
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <pickup+0x4bc>
									pickNode(a1, a2);
    1c18:	ce 01       	movw	r24, r28
    1c1a:	24 dd       	rcall	.-1464   	; 0x1664 <pickNode>
					}
				}
			}
		}
}
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	08 95       	ret

00001c2a <drop>:

void drop(int side)
{
    1c2a:	cf 93       	push	r28
    1c2c:	c8 2f       	mov	r28, r24
	lower(side);//lower
    1c2e:	0e 94 bb 03 	call	0x776	; 0x776 <lower>
	//_delay_ms(1000);	
	open(side);
    1c32:	8c 2f       	mov	r24, r28
    1c34:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <open>
	//_delay_ms(1000);
	elevate();//mid
    1c38:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <elevate>
// 	lower(side);
// 	if(armCount==0)
// 	servo_2_free();
// 	open(side);
// 	elevate();
 	armCount++;
    1c3c:	80 91 04 02 	lds	r24, 0x0204
    1c40:	90 91 05 02 	lds	r25, 0x0205
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	90 93 05 02 	sts	0x0205, r25
    1c4a:	80 93 04 02 	sts	0x0204, r24
}
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1c5c:	e0 91 3f 02 	lds	r30, 0x023F
    1c60:	f0 91 40 02 	lds	r31, 0x0240
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	e6 0f       	add	r30, r22
    1c6a:	f7 1f       	adc	r31, r23
    1c6c:	ee 0f       	add	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	ef 5b       	subi	r30, 0xBF	; 191
    1c72:	fd 4f       	sbci	r31, 0xFD	; 253
    1c74:	8c 01       	movw	r16, r24
    1c76:	00 0f       	add	r16, r16
    1c78:	11 1f       	adc	r17, r17
    1c7a:	0b 59       	subi	r16, 0x9B	; 155
    1c7c:	1d 4f       	sbci	r17, 0xFD	; 253
    1c7e:	d8 01       	movw	r26, r16
    1c80:	8d 91       	ld	r24, X+
    1c82:	9c 91       	ld	r25, X
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
	position(armNo, side);
    1c88:	ce 01       	movw	r24, r28
    1c8a:	c7 db       	rcall	.-2162   	; 0x141a <position>
	drop(armNo);
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	cd df       	rcall	.-102    	; 0x1c2a <drop>
	arm[armNo] = -1;
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	9f ef       	ldi	r25, 0xFF	; 255
    1c94:	f8 01       	movw	r30, r16
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	80 83       	st	Z, r24
	sorted++;
    1c9a:	80 91 12 02 	lds	r24, 0x0212
    1c9e:	90 91 13 02 	lds	r25, 0x0213
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	90 93 13 02 	sts	0x0213, r25
    1ca8:	80 93 12 02 	sts	0x0212, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	e5 5c       	subi	r30, 0xC5	; 197
    1cc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	aa 0f       	add	r26, r26
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	ab 59       	subi	r26, 0x9B	; 155
    1cce:	bd 4f       	sbci	r27, 0xFD	; 253
    1cd0:	8d 91       	ld	r24, X+
    1cd2:	9c 91       	ld	r25, X
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1cd8:	c6 17       	cp	r28, r22
    1cda:	d7 07       	cpc	r29, r23
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <sortDrop+0x36>
    1cde:	80 91 0a 02 	lds	r24, 0x020A
    1ce2:	90 91 0b 02 	lds	r25, 0x020B
    1ce6:	89 2b       	or	r24, r25
    1ce8:	51 f4       	brne	.+20     	; 0x1cfe <sortDrop+0x48>
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <sortDrop+0x42>
    1cec:	80 91 0a 02 	lds	r24, 0x020A
    1cf0:	90 91 0b 02 	lds	r25, 0x020B
    1cf4:	02 97       	sbiw	r24, 0x02	; 2
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <sortDrop+0x48>
		turn();
    1cf8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <turn>
    1cfc:	0e c0       	rjmp	.+28     	; 0x1d1a <sortDrop+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1cfe:	80 91 0a 02 	lds	r24, 0x020A
    1d02:	90 91 0b 02 	lds	r25, 0x020B
    1d06:	8d 7f       	andi	r24, 0xFD	; 253
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	39 f4       	brne	.+14     	; 0x1d1a <sortDrop+0x64>
			if (armNo == 0)
    1d0c:	20 97       	sbiw	r28, 0x00	; 0
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <sortDrop+0x60>
				turnLeft();
    1d10:	0e 94 8d 04 	call	0x91a	; 0x91a <turnLeft>
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <sortDrop+0x64>
			else turnRight();
    1d16:	0e 94 42 04 	call	0x884	; 0x884 <turnRight>
	}
	drop(armNo);
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	86 df       	rcall	.-244    	; 0x1c2a <drop>
	arm[armNo] = -1;
    1d1e:	cc 0f       	add	r28, r28
    1d20:	dd 1f       	adc	r29, r29
    1d22:	cb 59       	subi	r28, 0x9B	; 155
    1d24:	dd 4f       	sbci	r29, 0xFD	; 253
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	9f ef       	ldi	r25, 0xFF	; 255
    1d2a:	99 83       	std	Y+1, r25	; 0x01
    1d2c:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <dropPickup>:

void dropPickup(int a1)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1d38:	9c 01       	movw	r18, r24
    1d3a:	2f 5f       	subi	r18, 0xFF	; 255
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	21 70       	andi	r18, 0x01	; 1
    1d40:	30 78       	andi	r19, 0x80	; 128
    1d42:	33 23       	and	r19, r19
    1d44:	34 f4       	brge	.+12     	; 0x1d52 <dropPickup+0x1e>
    1d46:	21 50       	subi	r18, 0x01	; 1
    1d48:	31 09       	sbc	r19, r1
    1d4a:	2e 6f       	ori	r18, 0xFE	; 254
    1d4c:	3f 6f       	ori	r19, 0xFF	; 255
    1d4e:	2f 5f       	subi	r18, 0xFF	; 255
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	d2 2f       	mov	r29, r18
    1d54:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1d56:	e0 91 3f 02 	lds	r30, 0x023F
    1d5a:	f0 91 40 02 	lds	r31, 0x0240
    1d5e:	af 01       	movw	r20, r30
    1d60:	44 0f       	add	r20, r20
    1d62:	55 1f       	adc	r21, r21
    1d64:	24 0f       	add	r18, r20
    1d66:	35 1f       	adc	r19, r21
    1d68:	d9 01       	movw	r26, r18
    1d6a:	aa 0f       	add	r26, r26
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	af 5b       	subi	r26, 0xBF	; 191
    1d70:	bd 4f       	sbci	r27, 0xFD	; 253
    1d72:	2d 91       	ld	r18, X+
    1d74:	3c 91       	ld	r19, X
    1d76:	da 01       	movw	r26, r20
    1d78:	ad 5a       	subi	r26, 0xAD	; 173
    1d7a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d7c:	4d 91       	ld	r20, X+
    1d7e:	5c 91       	ld	r21, X
    1d80:	24 17       	cp	r18, r20
    1d82:	35 07       	cpc	r19, r21
    1d84:	69 f0       	breq	.+26     	; 0x1da0 <dropPickup+0x6c>
    1d86:	a0 91 63 02 	lds	r26, 0x0263
    1d8a:	b0 91 64 02 	lds	r27, 0x0264
    1d8e:	aa 0f       	add	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	ad 5a       	subi	r26, 0xAD	; 173
    1d94:	bd 4f       	sbci	r27, 0xFD	; 253
    1d96:	6d 91       	ld	r22, X+
    1d98:	7c 91       	ld	r23, X
    1d9a:	26 17       	cp	r18, r22
    1d9c:	37 07       	cpc	r19, r23
    1d9e:	a9 f0       	breq	.+42     	; 0x1dca <dropPickup+0x96>
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	e8 0f       	add	r30, r24
    1da6:	f9 1f       	adc	r31, r25
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	ef 5b       	subi	r30, 0xBF	; 191
    1dae:	fd 4f       	sbci	r31, 0xFD	; 253
    1db0:	01 90       	ld	r0, Z+
    1db2:	f0 81       	ld	r31, Z
    1db4:	e0 2d       	mov	r30, r0
    1db6:	4e 17       	cp	r20, r30
    1db8:	5f 07       	cpc	r21, r31
    1dba:	39 f0       	breq	.+14     	; 0x1dca <dropPickup+0x96>
    1dbc:	31 96       	adiw	r30, 0x01	; 1
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <dropPickup+0x96>
		pickNode(a2, a1);
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	8d 2f       	mov	r24, r29
    1dc4:	9c 2f       	mov	r25, r28
    1dc6:	4e dc       	rcall	.-1892   	; 0x1664 <pickNode>
    1dc8:	0b c0       	rjmp	.+22     	; 0x1de0 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1dca:	24 17       	cp	r18, r20
    1dcc:	35 07       	cpc	r19, r21
    1dce:	41 f0       	breq	.+16     	; 0x1de0 <dropPickup+0xac>
    1dd0:	2f 3f       	cpi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	29 f0       	breq	.+10     	; 0x1de0 <dropPickup+0xac>
		pickNode(a2, a2);
    1dd6:	6d 2f       	mov	r22, r29
    1dd8:	7c 2f       	mov	r23, r28
    1dda:	8d 2f       	mov	r24, r29
    1ddc:	9c 2f       	mov	r25, r28
    1dde:	42 dc       	rcall	.-1916   	; 0x1664 <pickNode>
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <canDrop>:

void canDrop()
{
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1dee:	20 91 3f 02 	lds	r18, 0x023F
    1df2:	30 91 40 02 	lds	r19, 0x0240
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	30 f4       	brcc	.+12     	; 0x1e08 <canDrop+0x22>
    1dfc:	80 91 0a 02 	lds	r24, 0x020A
    1e00:	90 91 0b 02 	lds	r25, 0x020B
    1e04:	02 97       	sbiw	r24, 0x02	; 2
    1e06:	79 f0       	breq	.+30     	; 0x1e26 <canDrop+0x40>
    1e08:	c9 01       	movw	r24, r18
    1e0a:	02 97       	sbiw	r24, 0x02	; 2
    1e0c:	02 97       	sbiw	r24, 0x02	; 2
    1e0e:	80 f4       	brcc	.+32     	; 0x1e30 <canDrop+0x4a>
    1e10:	80 91 0a 02 	lds	r24, 0x020A
    1e14:	90 91 0b 02 	lds	r25, 0x020B
    1e18:	89 2b       	or	r24, r25
    1e1a:	79 f0       	breq	.+30     	; 0x1e3a <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1e1c:	01 e0       	ldi	r16, 0x01	; 1
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	c0 e0       	ldi	r28, 0x00	; 0
    1e22:	d0 e0       	ldi	r29, 0x00	; 0
    1e24:	0e c0       	rjmp	.+28     	; 0x1e42 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1e26:	00 e0       	ldi	r16, 0x00	; 0
    1e28:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1e2a:	c1 e0       	ldi	r28, 0x01	; 1
    1e2c:	d0 e0       	ldi	r29, 0x00	; 0
    1e2e:	09 c0       	rjmp	.+18     	; 0x1e42 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1e30:	01 e0       	ldi	r16, 0x01	; 1
    1e32:	10 e0       	ldi	r17, 0x00	; 0
    1e34:	c0 e0       	ldi	r28, 0x00	; 0
    1e36:	d0 e0       	ldi	r29, 0x00	; 0
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1e3a:	00 e0       	ldi	r16, 0x00	; 0
    1e3c:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1e3e:	c1 e0       	ldi	r28, 0x01	; 1
    1e40:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    1e42:	40 91 04 02 	lds	r20, 0x0204
    1e46:	50 91 05 02 	lds	r21, 0x0205
    1e4a:	42 30       	cpi	r20, 0x02	; 2
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <canDrop+0x6c>
    1e50:	12 c1       	rjmp	.+548    	; 0x2076 <canDrop+0x290>
    1e52:	f9 01       	movw	r30, r18
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	ed 5a       	subi	r30, 0xAD	; 173
    1e5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5c:	40 81       	ld	r20, Z
    1e5e:	51 81       	ldd	r21, Z+1	; 0x01
    1e60:	60 91 65 02 	lds	r22, 0x0265
    1e64:	70 91 66 02 	lds	r23, 0x0266
    1e68:	64 17       	cp	r22, r20
    1e6a:	75 07       	cpc	r23, r21
    1e6c:	41 f0       	breq	.+16     	; 0x1e7e <canDrop+0x98>
    1e6e:	80 91 67 02 	lds	r24, 0x0267
    1e72:	90 91 68 02 	lds	r25, 0x0268
    1e76:	48 17       	cp	r20, r24
    1e78:	59 07       	cpc	r21, r25
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <canDrop+0x98>
    1e7c:	fc c0       	rjmp	.+504    	; 0x2076 <canDrop+0x290>
		return;
	else
	{
		if (visited[ct] == 0)
    1e7e:	f9 01       	movw	r30, r18
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e0 5e       	subi	r30, 0xE0	; 224
    1e86:	fd 4f       	sbci	r31, 0xFD	; 253
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	89 2b       	or	r24, r25
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <canDrop+0xae>
		{
			terminalCheck1();
    1e90:	8c d8       	rcall	.-3816   	; 0xfaa <terminalCheck1>
			terminalCheck2();
    1e92:	73 d9       	rcall	.-3354   	; 0x117a <terminalCheck2>
		}
		if (armCount == 0)
    1e94:	80 91 04 02 	lds	r24, 0x0204
    1e98:	90 91 05 02 	lds	r25, 0x0205
    1e9c:	89 2b       	or	r24, r25
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <canDrop+0xbc>
    1ea0:	48 c0       	rjmp	.+144    	; 0x1f32 <canDrop+0x14c>
		{
			if (arm[arm0] == color[ct])
    1ea2:	20 91 3f 02 	lds	r18, 0x023F
    1ea6:	30 91 40 02 	lds	r19, 0x0240
    1eaa:	f9 01       	movw	r30, r18
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	ed 5a       	subi	r30, 0xAD	; 173
    1eb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ee 0f       	add	r30, r30
    1ebc:	ff 1f       	adc	r31, r31
    1ebe:	eb 59       	subi	r30, 0x9B	; 155
    1ec0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec2:	40 81       	ld	r20, Z
    1ec4:	51 81       	ldd	r21, Z+1	; 0x01
    1ec6:	48 17       	cp	r20, r24
    1ec8:	59 07       	cpc	r21, r25
    1eca:	a9 f4       	brne	.+42     	; 0x1ef6 <canDrop+0x110>
				if (term[ct][0] == -1)
    1ecc:	f9 01       	movw	r30, r18
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ef 5b       	subi	r30, 0xBF	; 191
    1ed8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	29 f4       	brne	.+10     	; 0x1eec <canDrop+0x106>
					nodeDrop(arm0, 0);
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	b4 de       	rcall	.-664    	; 0x1c52 <nodeDrop>
    1eea:	23 c0       	rjmp	.+70     	; 0x1f32 <canDrop+0x14c>
				else nodeDrop(arm0, 1);
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	af de       	rcall	.-674    	; 0x1c52 <nodeDrop>
    1ef4:	1e c0       	rjmp	.+60     	; 0x1f32 <canDrop+0x14c>
			else if (arm[arm1] == color[ct])
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	eb 59       	subi	r30, 0x9B	; 155
    1efe:	fd 4f       	sbci	r31, 0xFD	; 253
    1f00:	40 81       	ld	r20, Z
    1f02:	51 81       	ldd	r21, Z+1	; 0x01
    1f04:	84 17       	cp	r24, r20
    1f06:	95 07       	cpc	r25, r21
    1f08:	a1 f4       	brne	.+40     	; 0x1f32 <canDrop+0x14c>
				if (term[ct][0] != -1)
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	ef 5b       	subi	r30, 0xBF	; 191
    1f16:	fd 4f       	sbci	r31, 0xFD	; 253
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	29 f0       	breq	.+10     	; 0x1f2a <canDrop+0x144>
					nodeDrop(arm1, 1);
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	c8 01       	movw	r24, r16
    1f26:	95 de       	rcall	.-726    	; 0x1c52 <nodeDrop>
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <canDrop+0x14c>
				else nodeDrop(arm1, 0);
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	c8 01       	movw	r24, r16
    1f30:	90 de       	rcall	.-736    	; 0x1c52 <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    1f32:	20 91 3f 02 	lds	r18, 0x023F
    1f36:	30 91 40 02 	lds	r19, 0x0240
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ed 5a       	subi	r30, 0xAD	; 173
    1f42:	fd 4f       	sbci	r31, 0xFD	; 253
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	40 91 65 02 	lds	r20, 0x0265
    1f4c:	50 91 66 02 	lds	r21, 0x0266
    1f50:	48 17       	cp	r20, r24
    1f52:	59 07       	cpc	r21, r25
    1f54:	41 f0       	breq	.+16     	; 0x1f66 <canDrop+0x180>
    1f56:	40 91 67 02 	lds	r20, 0x0267
    1f5a:	50 91 68 02 	lds	r21, 0x0268
    1f5e:	84 17       	cp	r24, r20
    1f60:	95 07       	cpc	r25, r21
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <canDrop+0x180>
    1f64:	88 c0       	rjmp	.+272    	; 0x2076 <canDrop+0x290>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    1f66:	f9 01       	movw	r30, r18
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ef 5b       	subi	r30, 0xBF	; 191
    1f72:	fd 4f       	sbci	r31, 0xFD	; 253
    1f74:	40 81       	ld	r20, Z
    1f76:	51 81       	ldd	r21, Z+1	; 0x01
    1f78:	4f 3f       	cpi	r20, 0xFF	; 255
    1f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7c:	d9 f0       	breq	.+54     	; 0x1fb4 <canDrop+0x1ce>
    1f7e:	f9 01       	movw	r30, r18
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	ef 5b       	subi	r30, 0xBF	; 191
    1f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f8c:	22 81       	ldd	r18, Z+2	; 0x02
    1f8e:	33 81       	ldd	r19, Z+3	; 0x03
    1f90:	2f 3f       	cpi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	79 f0       	breq	.+30     	; 0x1fb4 <canDrop+0x1ce>
			{
				if (arm[arm0] == color[ct])
    1f96:	fe 01       	movw	r30, r28
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	eb 59       	subi	r30, 0x9B	; 155
    1f9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa0:	20 81       	ld	r18, Z
    1fa2:	31 81       	ldd	r19, Z+1	; 0x01
    1fa4:	82 17       	cp	r24, r18
    1fa6:	93 07       	cpc	r25, r19
    1fa8:	19 f4       	brne	.+6      	; 0x1fb0 <canDrop+0x1ca>
					dropPickup(arm0);
    1faa:	ce 01       	movw	r24, r28
    1fac:	c3 de       	rcall	.-634    	; 0x1d34 <dropPickup>
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <canDrop+0x1ce>
				else dropPickup(arm1);
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	c0 de       	rcall	.-640    	; 0x1d34 <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    1fb4:	80 91 3f 02 	lds	r24, 0x023F
    1fb8:	90 91 40 02 	lds	r25, 0x0240
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	ed 5a       	subi	r30, 0xAD	; 173
    1fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc6:	20 81       	ld	r18, Z
    1fc8:	31 81       	ldd	r19, Z+1	; 0x01
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	eb 59       	subi	r30, 0x9B	; 155
    1fd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fd4:	40 81       	ld	r20, Z
    1fd6:	51 81       	ldd	r21, Z+1	; 0x01
    1fd8:	42 17       	cp	r20, r18
    1fda:	53 07       	cpc	r21, r19
    1fdc:	11 f5       	brne	.+68     	; 0x2022 <canDrop+0x23c>
    1fde:	fc 01       	movw	r30, r24
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ef 5b       	subi	r30, 0xBF	; 191
    1fea:	fd 4f       	sbci	r31, 0xFD	; 253
    1fec:	40 81       	ld	r20, Z
    1fee:	51 81       	ldd	r21, Z+1	; 0x01
    1ff0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff4:	29 f4       	brne	.+10     	; 0x2000 <canDrop+0x21a>
				nodeDrop(arm0, 0);
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	2a de       	rcall	.-940    	; 0x1c52 <nodeDrop>
    1ffe:	3b c0       	rjmp	.+118    	; 0x2076 <canDrop+0x290>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    2000:	fc 01       	movw	r30, r24
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	ef 5b       	subi	r30, 0xBF	; 191
    200c:	fd 4f       	sbci	r31, 0xFD	; 253
    200e:	42 81       	ldd	r20, Z+2	; 0x02
    2010:	53 81       	ldd	r21, Z+3	; 0x03
    2012:	4f 3f       	cpi	r20, 0xFF	; 255
    2014:	5f 4f       	sbci	r21, 0xFF	; 255
    2016:	29 f4       	brne	.+10     	; 0x2022 <canDrop+0x23c>
				nodeDrop(arm0, 1);
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	ce 01       	movw	r24, r28
    201e:	19 de       	rcall	.-974    	; 0x1c52 <nodeDrop>
    2020:	2a c0       	rjmp	.+84     	; 0x2076 <canDrop+0x290>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2022:	f8 01       	movw	r30, r16
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	eb 59       	subi	r30, 0x9B	; 155
    202a:	fd 4f       	sbci	r31, 0xFD	; 253
    202c:	40 81       	ld	r20, Z
    202e:	51 81       	ldd	r21, Z+1	; 0x01
    2030:	24 17       	cp	r18, r20
    2032:	35 07       	cpc	r19, r21
    2034:	01 f5       	brne	.+64     	; 0x2076 <canDrop+0x290>
    2036:	fc 01       	movw	r30, r24
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ef 5b       	subi	r30, 0xBF	; 191
    2042:	fd 4f       	sbci	r31, 0xFD	; 253
    2044:	20 81       	ld	r18, Z
    2046:	31 81       	ldd	r19, Z+1	; 0x01
    2048:	2f 3f       	cpi	r18, 0xFF	; 255
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	29 f4       	brne	.+10     	; 0x2058 <canDrop+0x272>
				nodeDrop(arm1, 0);
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	c8 01       	movw	r24, r16
    2054:	fe dd       	rcall	.-1028   	; 0x1c52 <nodeDrop>
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <canDrop+0x290>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    2058:	fc 01       	movw	r30, r24
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	ef 5b       	subi	r30, 0xBF	; 191
    2064:	fd 4f       	sbci	r31, 0xFD	; 253
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	21 f4       	brne	.+8      	; 0x2076 <canDrop+0x290>
				nodeDrop(arm1, 1);
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	c8 01       	movw	r24, r16
    2074:	ee dd       	rcall	.-1060   	; 0x1c52 <nodeDrop>

		}
	}
}
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	08 95       	ret

00002080 <newSort>:

void newSort()
{
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
	int t1, t2, a2 = -2, a1 = -2;
	if (arm[1] != -1)
    2088:	20 91 67 02 	lds	r18, 0x0267
    208c:	30 91 68 02 	lds	r19, 0x0268
    2090:	2f 3f       	cpi	r18, 0xFF	; 255
    2092:	1f ef       	ldi	r17, 0xFF	; 255
    2094:	31 07       	cpc	r19, r17
    2096:	41 f0       	breq	.+16     	; 0x20a8 <newSort+0x28>
	a2 = indicator[arm[1]];
    2098:	f9 01       	movw	r30, r18
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	e5 5a       	subi	r30, 0xA5	; 165
    20a0:	fd 4f       	sbci	r31, 0xFD	; 253
    20a2:	c0 81       	ld	r28, Z
    20a4:	d1 81       	ldd	r29, Z+1	; 0x01
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    20a8:	ce ef       	ldi	r28, 0xFE	; 254
    20aa:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
    20ac:	e0 91 65 02 	lds	r30, 0x0265
    20b0:	f0 91 66 02 	lds	r31, 0x0266
    20b4:	ef 3f       	cpi	r30, 0xFF	; 255
    20b6:	4f ef       	ldi	r20, 0xFF	; 255
    20b8:	f4 07       	cpc	r31, r20
    20ba:	09 f4       	brne	.+2      	; 0x20be <newSort+0x3e>
    20bc:	7f c1       	rjmp	.+766    	; 0x23bc <__stack+0x1bd>
	a1 = indicator[arm[0]];
    20be:	df 01       	movw	r26, r30
    20c0:	aa 0f       	add	r26, r26
    20c2:	bb 1f       	adc	r27, r27
    20c4:	a5 5a       	subi	r26, 0xA5	; 165
    20c6:	bd 4f       	sbci	r27, 0xFD	; 253
    20c8:	4d 91       	ld	r20, X+
    20ca:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    20cc:	80 91 3f 02 	lds	r24, 0x023F
    20d0:	90 91 40 02 	lds	r25, 0x0240
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	90 78       	andi	r25, 0x80	; 128
    20da:	99 23       	and	r25, r25
    20dc:	24 f4       	brge	.+8      	; 0x20e6 <newSort+0x66>
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	8e 6f       	ori	r24, 0xFE	; 254
    20e2:	9f 6f       	ori	r25, 0xFF	; 255
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    20e8:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    20ea:	d0 93 40 02 	sts	0x0240, r29
    20ee:	c0 93 3f 02 	sts	0x023F, r28
		if (arm[1] == arm[0] && (visited[a2] == 0 || (term[a2][0] != -1 && term[a2][1] != -1)))
    20f2:	2e 17       	cp	r18, r30
    20f4:	3f 07       	cpc	r19, r31
    20f6:	61 f5       	brne	.+88     	; 0x2150 <newSort+0xd0>
    20f8:	de 01       	movw	r26, r28
    20fa:	aa 0f       	add	r26, r26
    20fc:	bb 1f       	adc	r27, r27
    20fe:	a0 5e       	subi	r26, 0xE0	; 224
    2100:	bd 4f       	sbci	r27, 0xFD	; 253
    2102:	0d 90       	ld	r0, X+
    2104:	bc 91       	ld	r27, X
    2106:	a0 2d       	mov	r26, r0
    2108:	ab 2b       	or	r26, r27
    210a:	c9 f0       	breq	.+50     	; 0x213e <newSort+0xbe>
    210c:	de 01       	movw	r26, r28
    210e:	aa 0f       	add	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	aa 0f       	add	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	af 5b       	subi	r26, 0xBF	; 191
    2118:	bd 4f       	sbci	r27, 0xFD	; 253
    211a:	0d 90       	ld	r0, X+
    211c:	bc 91       	ld	r27, X
    211e:	a0 2d       	mov	r26, r0
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	b1 f0       	breq	.+44     	; 0x2150 <newSort+0xd0>
    2124:	de 01       	movw	r26, r28
    2126:	aa 0f       	add	r26, r26
    2128:	bb 1f       	adc	r27, r27
    212a:	aa 0f       	add	r26, r26
    212c:	bb 1f       	adc	r27, r27
    212e:	af 5b       	subi	r26, 0xBF	; 191
    2130:	bd 4f       	sbci	r27, 0xFD	; 253
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	0d 90       	ld	r0, X+
    2136:	bc 91       	ld	r27, X
    2138:	a0 2d       	mov	r26, r0
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	49 f0       	breq	.+18     	; 0x2150 <newSort+0xd0>
		{
			if (a2 == 0 || a2 == 3)
    213e:	20 97       	sbiw	r28, 0x00	; 0
    2140:	19 f0       	breq	.+6      	; 0x2148 <newSort+0xc8>
    2142:	23 97       	sbiw	r28, 0x03	; 3
    2144:	09 f0       	breq	.+2      	; 0x2148 <newSort+0xc8>
    2146:	28 c1       	rjmp	.+592    	; 0x2398 <__stack+0x199>
			sortDrop(0, t1);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	b4 dd       	rcall	.-1176   	; 0x1cb6 <sortDrop>
    214e:	24 c1       	rjmp	.+584    	; 0x2398 <__stack+0x199>
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    2150:	2f 3f       	cpi	r18, 0xFF	; 255
    2152:	af ef       	ldi	r26, 0xFF	; 255
    2154:	3a 07       	cpc	r19, r26
    2156:	c1 f1       	breq	.+112    	; 0x21c8 <newSort+0x148>
    2158:	de 01       	movw	r26, r28
    215a:	aa 0f       	add	r26, r26
    215c:	bb 1f       	adc	r27, r27
    215e:	aa 0f       	add	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	af 5b       	subi	r26, 0xBF	; 191
    2164:	bd 4f       	sbci	r27, 0xFD	; 253
    2166:	0d 90       	ld	r0, X+
    2168:	bc 91       	ld	r27, X
    216a:	a0 2d       	mov	r26, r0
    216c:	11 96       	adiw	r26, 0x01	; 1
    216e:	51 f0       	breq	.+20     	; 0x2184 <newSort+0x104>
    2170:	cc 0f       	add	r28, r28
    2172:	dd 1f       	adc	r29, r29
    2174:	cc 0f       	add	r28, r28
    2176:	dd 1f       	adc	r29, r29
    2178:	cf 5b       	subi	r28, 0xBF	; 191
    217a:	dd 4f       	sbci	r29, 0xFD	; 253
    217c:	aa 81       	ldd	r26, Y+2	; 0x02
    217e:	bb 81       	ldd	r27, Y+3	; 0x03
    2180:	11 96       	adiw	r26, 0x01	; 1
    2182:	11 f5       	brne	.+68     	; 0x21c8 <newSort+0x148>
		{
			if (arm[0] == -1)
    2184:	31 96       	adiw	r30, 0x01	; 1
    2186:	09 f0       	breq	.+2      	; 0x218a <newSort+0x10a>
    2188:	07 c1       	rjmp	.+526    	; 0x2398 <__stack+0x199>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    218a:	9b 01       	movw	r18, r22
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	f9 01       	movw	r30, r18
    2192:	e5 5c       	subi	r30, 0xC5	; 197
    2194:	fd 4f       	sbci	r31, 0xFD	; 253
    2196:	40 81       	ld	r20, Z
    2198:	51 81       	ldd	r21, Z+1	; 0x01
    219a:	f9 01       	movw	r30, r18
    219c:	ed 5a       	subi	r30, 0xAD	; 173
    219e:	fd 4f       	sbci	r31, 0xFD	; 253
    21a0:	20 81       	ld	r18, Z
    21a2:	31 81       	ldd	r19, Z+1	; 0x01
    21a4:	42 17       	cp	r20, r18
    21a6:	53 07       	cpc	r21, r19
    21a8:	59 f0       	breq	.+22     	; 0x21c0 <newSort+0x140>
    21aa:	fc 01       	movw	r30, r24
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	ed 5a       	subi	r30, 0xAD	; 173
    21b2:	fd 4f       	sbci	r31, 0xFD	; 253
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	48 17       	cp	r20, r24
    21ba:	59 07       	cpc	r21, r25
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <newSort+0x140>
    21be:	ec c0       	rjmp	.+472    	; 0x2398 <__stack+0x199>
				pickSort(0, t1);
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	83 da       	rcall	.-2810   	; 0x16cc <pickSort>
    21c6:	e8 c0       	rjmp	.+464    	; 0x2398 <__stack+0x199>
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    21c8:	ef 3f       	cpi	r30, 0xFF	; 255
    21ca:	af ef       	ldi	r26, 0xFF	; 255
    21cc:	fa 07       	cpc	r31, r26
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <newSort+0x152>
    21d0:	51 c0       	rjmp	.+162    	; 0x2274 <__stack+0x75>
    21d2:	da 01       	movw	r26, r20
    21d4:	aa 0f       	add	r26, r26
    21d6:	bb 1f       	adc	r27, r27
    21d8:	aa 0f       	add	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	af 5b       	subi	r26, 0xBF	; 191
    21de:	bd 4f       	sbci	r27, 0xFD	; 253
    21e0:	0d 90       	ld	r0, X+
    21e2:	bc 91       	ld	r27, X
    21e4:	a0 2d       	mov	r26, r0
    21e6:	11 96       	adiw	r26, 0x01	; 1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <newSort+0x16c>
    21ea:	0a c1       	rjmp	.+532    	; 0x2400 <__stack+0x201>
    21ec:	da 01       	movw	r26, r20
    21ee:	aa 0f       	add	r26, r26
    21f0:	bb 1f       	adc	r27, r27
    21f2:	aa 0f       	add	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	af 5b       	subi	r26, 0xBF	; 191
    21f8:	bd 4f       	sbci	r27, 0xFD	; 253
    21fa:	12 96       	adiw	r26, 0x02	; 2
    21fc:	0d 90       	ld	r0, X+
    21fe:	bc 91       	ld	r27, X
    2200:	a0 2d       	mov	r26, r0
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	b9 f5       	brne	.+110    	; 0x2274 <__stack+0x75>
    2206:	ea c0       	rjmp	.+468    	; 0x23dc <__stack+0x1dd>
		{
			ct = a1;
			if (term[a1][0] == -1 || term[a1][1] == -1)
			{
				if (arm[1] == -1)
    2208:	2f 3f       	cpi	r18, 0xFF	; 255
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	09 f0       	breq	.+2      	; 0x2210 <__stack+0x11>
    220e:	c4 c0       	rjmp	.+392    	; 0x2398 <__stack+0x199>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    2210:	9b 01       	movw	r18, r22
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	f9 01       	movw	r30, r18
    2218:	e5 5c       	subi	r30, 0xC5	; 197
    221a:	fd 4f       	sbci	r31, 0xFD	; 253
    221c:	40 81       	ld	r20, Z
    221e:	51 81       	ldd	r21, Z+1	; 0x01
    2220:	f9 01       	movw	r30, r18
    2222:	ed 5a       	subi	r30, 0xAD	; 173
    2224:	fd 4f       	sbci	r31, 0xFD	; 253
    2226:	20 81       	ld	r18, Z
    2228:	31 81       	ldd	r19, Z+1	; 0x01
    222a:	42 17       	cp	r20, r18
    222c:	53 07       	cpc	r21, r19
    222e:	09 f0       	breq	.+2      	; 0x2232 <__stack+0x33>
    2230:	b3 c0       	rjmp	.+358    	; 0x2398 <__stack+0x199>
    2232:	fc 01       	movw	r30, r24
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	ed 5a       	subi	r30, 0xAD	; 173
    223a:	fd 4f       	sbci	r31, 0xFD	; 253
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	48 17       	cp	r20, r24
    2242:	59 07       	cpc	r21, r25
    2244:	09 f0       	breq	.+2      	; 0x2248 <__stack+0x49>
    2246:	a8 c0       	rjmp	.+336    	; 0x2398 <__stack+0x199>
					pickSort(0, t1);
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	3f da       	rcall	.-2946   	; 0x16cc <pickSort>
    224e:	a4 c0       	rjmp	.+328    	; 0x2398 <__stack+0x199>
				}
			}
			else	if (sort[t1] == -1 && arm[1] != -1)
    2250:	fb 01       	movw	r30, r22
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	e5 5c       	subi	r30, 0xC5	; 197
    2258:	fd 4f       	sbci	r31, 0xFD	; 253
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	09 f0       	breq	.+2      	; 0x2264 <__stack+0x65>
    2262:	9a c0       	rjmp	.+308    	; 0x2398 <__stack+0x199>
    2264:	2f 3f       	cpi	r18, 0xFF	; 255
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	09 f4       	brne	.+2      	; 0x226c <__stack+0x6d>
    226a:	96 c0       	rjmp	.+300    	; 0x2398 <__stack+0x199>
			sortDrop(0, t1);
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	22 dd       	rcall	.-1468   	; 0x1cb6 <sortDrop>
    2272:	92 c0       	rjmp	.+292    	; 0x2398 <__stack+0x199>
		}
		else	if (arm[1] != -1 && (sort[t1] == -1 && arm[0] != -1))
    2274:	2f 3f       	cpi	r18, 0xFF	; 255
    2276:	1f ef       	ldi	r17, 0xFF	; 255
    2278:	31 07       	cpc	r19, r17
    227a:	a1 f0       	breq	.+40     	; 0x22a4 <__stack+0xa5>
    227c:	db 01       	movw	r26, r22
    227e:	aa 0f       	add	r26, r26
    2280:	bb 1f       	adc	r27, r27
    2282:	a5 5c       	subi	r26, 0xC5	; 197
    2284:	bd 4f       	sbci	r27, 0xFD	; 253
    2286:	8d 91       	ld	r24, X+
    2288:	9c 91       	ld	r25, X
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	31 f4       	brne	.+12     	; 0x229a <__stack+0x9b>
    228e:	31 96       	adiw	r30, 0x01	; 1
    2290:	21 f0       	breq	.+8      	; 0x229a <__stack+0x9b>
		sortDrop(0, t1);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0f dd       	rcall	.-1506   	; 0x1cb6 <sortDrop>
    2298:	7f c0       	rjmp	.+254    	; 0x2398 <__stack+0x199>
		else if (arm[1] != -1)
		ct = arm[1];
    229a:	30 93 40 02 	sts	0x0240, r19
    229e:	20 93 3f 02 	sts	0x023F, r18
    22a2:	7a c0       	rjmp	.+244    	; 0x2398 <__stack+0x199>
		else ct = arm[0];
    22a4:	f0 93 40 02 	sts	0x0240, r31
    22a8:	e0 93 3f 02 	sts	0x023F, r30
    22ac:	75 c0       	rjmp	.+234    	; 0x2398 <__stack+0x199>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    22ae:	a8 01       	movw	r20, r16
    22b0:	44 0f       	add	r20, r20
    22b2:	55 1f       	adc	r21, r21
    22b4:	fa 01       	movw	r30, r20
    22b6:	e5 5c       	subi	r30, 0xC5	; 197
    22b8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ba:	20 81       	ld	r18, Z
    22bc:	31 81       	ldd	r19, Z+1	; 0x01
    22be:	fa 01       	movw	r30, r20
    22c0:	ed 5a       	subi	r30, 0xAD	; 173
    22c2:	fd 4f       	sbci	r31, 0xFD	; 253
    22c4:	40 81       	ld	r20, Z
    22c6:	51 81       	ldd	r21, Z+1	; 0x01
    22c8:	24 17       	cp	r18, r20
    22ca:	35 07       	cpc	r19, r21
    22cc:	51 f0       	breq	.+20     	; 0x22e2 <__stack+0xe3>
    22ce:	fc 01       	movw	r30, r24
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ed 5a       	subi	r30, 0xAD	; 173
    22d6:	fd 4f       	sbci	r31, 0xFD	; 253
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	26 17       	cp	r18, r22
    22de:	37 07       	cpc	r19, r23
    22e0:	81 f4       	brne	.+32     	; 0x2302 <__stack+0x103>
    22e2:	2f 3f       	cpi	r18, 0xFF	; 255
    22e4:	af ef       	ldi	r26, 0xFF	; 255
    22e6:	3a 07       	cpc	r19, r26
    22e8:	31 f1       	breq	.+76     	; 0x2336 <__stack+0x137>
		ct = indicator[sort[t1]];
    22ea:	f9 01       	movw	r30, r18
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	e5 5a       	subi	r30, 0xA5	; 165
    22f2:	fd 4f       	sbci	r31, 0xFD	; 253
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	90 93 40 02 	sts	0x0240, r25
    22fc:	80 93 3f 02 	sts	0x023F, r24
    2300:	4b c0       	rjmp	.+150    	; 0x2398 <__stack+0x199>
		else if (sort[t1] != -1)
    2302:	2f 3f       	cpi	r18, 0xFF	; 255
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	b9 f0       	breq	.+46     	; 0x2336 <__stack+0x137>
		{
			pickSort(1, t1);
    2308:	b8 01       	movw	r22, r16
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	de d9       	rcall	.-3140   	; 0x16cc <pickSort>
			ct = (t1 + 1) % 2 + 4;
    2310:	0f 5f       	subi	r16, 0xFF	; 255
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	01 70       	andi	r16, 0x01	; 1
    2316:	10 78       	andi	r17, 0x80	; 128
    2318:	11 23       	and	r17, r17
    231a:	34 f4       	brge	.+12     	; 0x2328 <__stack+0x129>
    231c:	01 50       	subi	r16, 0x01	; 1
    231e:	11 09       	sbc	r17, r1
    2320:	0e 6f       	ori	r16, 0xFE	; 254
    2322:	1f 6f       	ori	r17, 0xFF	; 255
    2324:	0f 5f       	subi	r16, 0xFF	; 255
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	0c 5f       	subi	r16, 0xFC	; 252
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	10 93 40 02 	sts	0x0240, r17
    2330:	00 93 3f 02 	sts	0x023F, r16
    2334:	31 c0       	rjmp	.+98     	; 0x2398 <__stack+0x199>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    2336:	f8 01       	movw	r30, r16
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	e0 5e       	subi	r30, 0xE0	; 224
    233e:	fd 4f       	sbci	r31, 0xFD	; 253
    2340:	20 81       	ld	r18, Z
    2342:	31 81       	ldd	r19, Z+1	; 0x01
    2344:	21 30       	cpi	r18, 0x01	; 1
    2346:	31 05       	cpc	r19, r1
    2348:	19 f5       	brne	.+70     	; 0x2390 <__stack+0x191>
    234a:	f8 01       	movw	r30, r16
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ef 5b       	subi	r30, 0xBF	; 191
    2356:	fd 4f       	sbci	r31, 0xFD	; 253
    2358:	20 81       	ld	r18, Z
    235a:	31 81       	ldd	r19, Z+1	; 0x01
    235c:	42 17       	cp	r20, r18
    235e:	53 07       	cpc	r21, r19
    2360:	19 f0       	breq	.+6      	; 0x2368 <__stack+0x169>
    2362:	2f 3f       	cpi	r18, 0xFF	; 255
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	a1 f4       	brne	.+40     	; 0x2390 <__stack+0x191>
    2368:	f8 01       	movw	r30, r16
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	ef 5b       	subi	r30, 0xBF	; 191
    2374:	fd 4f       	sbci	r31, 0xFD	; 253
    2376:	22 81       	ldd	r18, Z+2	; 0x02
    2378:	33 81       	ldd	r19, Z+3	; 0x03
    237a:	42 17       	cp	r20, r18
    237c:	53 07       	cpc	r21, r19
    237e:	19 f0       	breq	.+6      	; 0x2386 <__stack+0x187>
    2380:	2f 3f       	cpi	r18, 0xFF	; 255
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	29 f4       	brne	.+10     	; 0x2390 <__stack+0x191>
		ct = t2;
    2386:	90 93 40 02 	sts	0x0240, r25
    238a:	80 93 3f 02 	sts	0x023F, r24
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <__stack+0x199>
		else ct = t1;
    2390:	10 93 40 02 	sts	0x0240, r17
    2394:	00 93 3f 02 	sts	0x023F, r16
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    2398:	80 91 3f 02 	lds	r24, 0x023F
    239c:	90 91 40 02 	lds	r25, 0x0240
    23a0:	02 96       	adiw	r24, 0x02	; 2
    23a2:	83 70       	andi	r24, 0x03	; 3
    23a4:	90 78       	andi	r25, 0x80	; 128
    23a6:	99 23       	and	r25, r25
    23a8:	24 f4       	brge	.+8      	; 0x23b2 <__stack+0x1b3>
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	8c 6f       	ori	r24, 0xFC	; 252
    23ae:	9f 6f       	ori	r25, 0xFF	; 255
    23b0:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    23b2:	90 93 64 02 	sts	0x0264, r25
    23b6:	80 93 63 02 	sts	0x0263, r24
    23ba:	2e c0       	rjmp	.+92     	; 0x2418 <__stack+0x219>
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
	a1 = indicator[arm[0]];

	t1 = (ct + 1) % 2;
    23bc:	80 91 3f 02 	lds	r24, 0x023F
    23c0:	90 91 40 02 	lds	r25, 0x0240
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	62 e0       	ldi	r22, 0x02	; 2
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	82 d5       	rcall	.+2820   	; 0x2ed0 <__divmodhi4>
    23cc:	8c 01       	movw	r16, r24
    23ce:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    23d0:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
    23d2:	2f 3f       	cpi	r18, 0xFF	; 255
    23d4:	af ef       	ldi	r26, 0xFF	; 255
    23d6:	3a 07       	cpc	r19, r26
    23d8:	c1 f4       	brne	.+48     	; 0x240a <__stack+0x20b>
    23da:	69 cf       	rjmp	.-302    	; 0x22ae <__stack+0xaf>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    23dc:	50 93 40 02 	sts	0x0240, r21
    23e0:	40 93 3f 02 	sts	0x023F, r20
			if (term[a1][0] == -1 || term[a1][1] == -1)
    23e4:	fa 01       	movw	r30, r20
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	ef 5b       	subi	r30, 0xBF	; 191
    23f0:	fd 4f       	sbci	r31, 0xFD	; 253
    23f2:	42 81       	ldd	r20, Z+2	; 0x02
    23f4:	53 81       	ldd	r21, Z+3	; 0x03
    23f6:	4f 3f       	cpi	r20, 0xFF	; 255
    23f8:	5f 4f       	sbci	r21, 0xFF	; 255
    23fa:	09 f0       	breq	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	29 cf       	rjmp	.-430    	; 0x2250 <__stack+0x51>
    23fe:	04 cf       	rjmp	.-504    	; 0x2208 <__stack+0x9>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    2400:	50 93 40 02 	sts	0x0240, r21
    2404:	40 93 3f 02 	sts	0x023F, r20
    2408:	ff ce       	rjmp	.-514    	; 0x2208 <__stack+0x9>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    240a:	d0 93 40 02 	sts	0x0240, r29
    240e:	c0 93 3f 02 	sts	0x023F, r28
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    2412:	4e ef       	ldi	r20, 0xFE	; 254
    2414:	5f ef       	ldi	r21, 0xFF	; 255
    2416:	9c ce       	rjmp	.-712    	; 0x2150 <newSort+0xd0>
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	08 95       	ret

00002422 <sortCheck>:
void sortCheck()
{
    2422:	8f 92       	push	r8
    2424:	9f 92       	push	r9
    2426:	af 92       	push	r10
    2428:	bf 92       	push	r11
    242a:	cf 92       	push	r12
    242c:	df 92       	push	r13
    242e:	ef 92       	push	r14
    2430:	ff 92       	push	r15
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    243a:	40 91 3f 02 	lds	r20, 0x023F
    243e:	50 91 40 02 	lds	r21, 0x0240
    2442:	42 30       	cpi	r20, 0x02	; 2
    2444:	51 05       	cpc	r21, r1
    2446:	30 f4       	brcc	.+12     	; 0x2454 <sortCheck+0x32>
    2448:	80 91 0a 02 	lds	r24, 0x020A
    244c:	90 91 0b 02 	lds	r25, 0x020B
    2450:	02 97       	sbiw	r24, 0x02	; 2
    2452:	79 f0       	breq	.+30     	; 0x2472 <sortCheck+0x50>
    2454:	ca 01       	movw	r24, r20
    2456:	02 97       	sbiw	r24, 0x02	; 2
    2458:	02 97       	sbiw	r24, 0x02	; 2
    245a:	80 f4       	brcc	.+32     	; 0x247c <sortCheck+0x5a>
    245c:	80 91 0a 02 	lds	r24, 0x020A
    2460:	90 91 0b 02 	lds	r25, 0x020B
    2464:	89 2b       	or	r24, r25
    2466:	79 f0       	breq	.+30     	; 0x2486 <sortCheck+0x64>
}
void sortCheck()
{
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2468:	01 e0       	ldi	r16, 0x01	; 1
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	c0 e0       	ldi	r28, 0x00	; 0
    246e:	d0 e0       	ldi	r29, 0x00	; 0
    2470:	0e c0       	rjmp	.+28     	; 0x248e <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2472:	00 e0       	ldi	r16, 0x00	; 0
    2474:	10 e0       	ldi	r17, 0x00	; 0
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2476:	c1 e0       	ldi	r28, 0x01	; 1
    2478:	d0 e0       	ldi	r29, 0x00	; 0
    247a:	09 c0       	rjmp	.+18     	; 0x248e <sortCheck+0x6c>
}
void sortCheck()
{
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    247c:	01 e0       	ldi	r16, 0x01	; 1
    247e:	10 e0       	ldi	r17, 0x00	; 0
    2480:	c0 e0       	ldi	r28, 0x00	; 0
    2482:	d0 e0       	ldi	r29, 0x00	; 0
    2484:	04 c0       	rjmp	.+8      	; 0x248e <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2486:	00 e0       	ldi	r16, 0x00	; 0
    2488:	10 e0       	ldi	r17, 0x00	; 0
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    248a:	c1 e0       	ldi	r28, 0x01	; 1
    248c:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    248e:	9a 01       	movw	r18, r20
    2490:	21 70       	andi	r18, 0x01	; 1
    2492:	30 78       	andi	r19, 0x80	; 128
    2494:	33 23       	and	r19, r19
    2496:	34 f4       	brge	.+12     	; 0x24a4 <sortCheck+0x82>
    2498:	21 50       	subi	r18, 0x01	; 1
    249a:	31 09       	sbc	r19, r1
    249c:	2e 6f       	ori	r18, 0xFE	; 254
    249e:	3f 6f       	ori	r19, 0xFF	; 255
    24a0:	2f 5f       	subi	r18, 0xFF	; 255
    24a2:	3f 4f       	sbci	r19, 0xFF	; 255
    24a4:	b2 2e       	mov	r11, r18
    24a6:	a3 2e       	mov	r10, r19
    24a8:	f9 01       	movw	r30, r18
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	e5 5c       	subi	r30, 0xC5	; 197
    24b0:	fd 4f       	sbci	r31, 0xFD	; 253
    24b2:	20 81       	ld	r18, Z
    24b4:	31 81       	ldd	r19, Z+1	; 0x01
    24b6:	fa 01       	movw	r30, r20
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ed 5a       	subi	r30, 0xAD	; 173
    24be:	fd 4f       	sbci	r31, 0xFD	; 253
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	28 17       	cp	r18, r24
    24c6:	39 07       	cpc	r19, r25
    24c8:	79 f0       	breq	.+30     	; 0x24e8 <sortCheck+0xc6>
    24ca:	80 91 63 02 	lds	r24, 0x0263
    24ce:	90 91 64 02 	lds	r25, 0x0264
    24d2:	fc 01       	movw	r30, r24
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	ed 5a       	subi	r30, 0xAD	; 173
    24da:	fd 4f       	sbci	r31, 0xFD	; 253
    24dc:	40 81       	ld	r20, Z
    24de:	51 81       	ldd	r21, Z+1	; 0x01
    24e0:	24 17       	cp	r18, r20
    24e2:	35 07       	cpc	r19, r21
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <sortCheck+0xc6>
    24e6:	a6 c0       	rjmp	.+332    	; 0x2634 <sortCheck+0x212>
	{
		if (armCount>0)
    24e8:	80 91 04 02 	lds	r24, 0x0204
    24ec:	90 91 05 02 	lds	r25, 0x0205
    24f0:	18 16       	cp	r1, r24
    24f2:	19 06       	cpc	r1, r25
    24f4:	0c f0       	brlt	.+2      	; 0x24f8 <sortCheck+0xd6>
    24f6:	95 c0       	rjmp	.+298    	; 0x2622 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    24f8:	f9 01       	movw	r30, r18
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	e5 5a       	subi	r30, 0xA5	; 165
    2500:	fd 4f       	sbci	r31, 0xFD	; 253
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	70 93 40 02 	sts	0x0240, r23
    250a:	60 93 3f 02 	sts	0x023F, r22
			if (arm[arm0] == -1)
    250e:	fe 01       	movw	r30, r28
    2510:	ee 0f       	add	r30, r30
    2512:	ff 1f       	adc	r31, r31
    2514:	eb 59       	subi	r30, 0x9B	; 155
    2516:	fd 4f       	sbci	r31, 0xFD	; 253
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	69 f4       	brne	.+26     	; 0x253a <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    2520:	61 70       	andi	r22, 0x01	; 1
    2522:	70 78       	andi	r23, 0x80	; 128
    2524:	77 23       	and	r23, r23
    2526:	34 f4       	brge	.+12     	; 0x2534 <sortCheck+0x112>
    2528:	61 50       	subi	r22, 0x01	; 1
    252a:	71 09       	sbc	r23, r1
    252c:	6e 6f       	ori	r22, 0xFE	; 254
    252e:	7f 6f       	ori	r23, 0xFF	; 255
    2530:	6f 5f       	subi	r22, 0xFF	; 255
    2532:	7f 4f       	sbci	r23, 0xFF	; 255
    2534:	ce 01       	movw	r24, r28
    2536:	ca d8       	rcall	.-3692   	; 0x16cc <pickSort>
    2538:	15 c0       	rjmp	.+42     	; 0x2564 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    253a:	f8 01       	movw	r30, r16
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	eb 59       	subi	r30, 0x9B	; 155
    2542:	fd 4f       	sbci	r31, 0xFD	; 253
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	61 f4       	brne	.+24     	; 0x2564 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    254c:	61 70       	andi	r22, 0x01	; 1
    254e:	70 78       	andi	r23, 0x80	; 128
    2550:	77 23       	and	r23, r23
    2552:	34 f4       	brge	.+12     	; 0x2560 <sortCheck+0x13e>
    2554:	61 50       	subi	r22, 0x01	; 1
    2556:	71 09       	sbc	r23, r1
    2558:	6e 6f       	ori	r22, 0xFE	; 254
    255a:	7f 6f       	ori	r23, 0xFF	; 255
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	c8 01       	movw	r24, r16
    2562:	b4 d8       	rcall	.-3736   	; 0x16cc <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    2564:	80 91 04 02 	lds	r24, 0x0204
    2568:	90 91 05 02 	lds	r25, 0x0205
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	09 f4       	brne	.+2      	; 0x2572 <sortCheck+0x150>
    2570:	6d c1       	rjmp	.+730    	; 0x284c <sortCheck+0x42a>
    2572:	80 91 3f 02 	lds	r24, 0x023F
    2576:	90 91 40 02 	lds	r25, 0x0240
    257a:	fc 01       	movw	r30, r24
    257c:	ee 0f       	add	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	ee 0f       	add	r30, r30
    2582:	ff 1f       	adc	r31, r31
    2584:	ef 5b       	subi	r30, 0xBF	; 191
    2586:	fd 4f       	sbci	r31, 0xFD	; 253
    2588:	20 81       	ld	r18, Z
    258a:	31 81       	ldd	r19, Z+1	; 0x01
    258c:	2f 3f       	cpi	r18, 0xFF	; 255
    258e:	3f 4f       	sbci	r19, 0xFF	; 255
    2590:	09 f4       	brne	.+2      	; 0x2594 <sortCheck+0x172>
    2592:	5c c1       	rjmp	.+696    	; 0x284c <sortCheck+0x42a>
    2594:	fc 01       	movw	r30, r24
    2596:	ee 0f       	add	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ef 5b       	subi	r30, 0xBF	; 191
    25a0:	fd 4f       	sbci	r31, 0xFD	; 253
    25a2:	22 81       	ldd	r18, Z+2	; 0x02
    25a4:	33 81       	ldd	r19, Z+3	; 0x03
    25a6:	2f 3f       	cpi	r18, 0xFF	; 255
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	09 f4       	brne	.+2      	; 0x25ae <sortCheck+0x18c>
    25ac:	4f c1       	rjmp	.+670    	; 0x284c <sortCheck+0x42a>
    25ae:	9c 01       	movw	r18, r24
    25b0:	21 70       	andi	r18, 0x01	; 1
    25b2:	30 78       	andi	r19, 0x80	; 128
    25b4:	33 23       	and	r19, r19
    25b6:	34 f4       	brge	.+12     	; 0x25c4 <sortCheck+0x1a2>
    25b8:	21 50       	subi	r18, 0x01	; 1
    25ba:	31 09       	sbc	r19, r1
    25bc:	2e 6f       	ori	r18, 0xFE	; 254
    25be:	3f 6f       	ori	r19, 0xFF	; 255
    25c0:	2f 5f       	subi	r18, 0xFF	; 255
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	62 2f       	mov	r22, r18
    25c6:	73 2f       	mov	r23, r19
    25c8:	f9 01       	movw	r30, r18
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	e5 5c       	subi	r30, 0xC5	; 197
    25d0:	fd 4f       	sbci	r31, 0xFD	; 253
    25d2:	20 81       	ld	r18, Z
    25d4:	31 81       	ldd	r19, Z+1	; 0x01
    25d6:	2f 3f       	cpi	r18, 0xFF	; 255
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	09 f0       	breq	.+2      	; 0x25de <sortCheck+0x1bc>
    25dc:	37 c1       	rjmp	.+622    	; 0x284c <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    25de:	fc 01       	movw	r30, r24
    25e0:	ee 0f       	add	r30, r30
    25e2:	ff 1f       	adc	r31, r31
    25e4:	ed 5a       	subi	r30, 0xAD	; 173
    25e6:	fd 4f       	sbci	r31, 0xFD	; 253
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	fe 01       	movw	r30, r28
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	eb 59       	subi	r30, 0x9B	; 155
    25f4:	fd 4f       	sbci	r31, 0xFD	; 253
    25f6:	20 81       	ld	r18, Z
    25f8:	31 81       	ldd	r19, Z+1	; 0x01
    25fa:	28 17       	cp	r18, r24
    25fc:	39 07       	cpc	r19, r25
    25fe:	19 f4       	brne	.+6      	; 0x2606 <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    2600:	c8 01       	movw	r24, r16
    2602:	59 db       	rcall	.-2382   	; 0x1cb6 <sortDrop>
    2604:	23 c1       	rjmp	.+582    	; 0x284c <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    2606:	f8 01       	movw	r30, r16
    2608:	ee 0f       	add	r30, r30
    260a:	ff 1f       	adc	r31, r31
    260c:	eb 59       	subi	r30, 0x9B	; 155
    260e:	fd 4f       	sbci	r31, 0xFD	; 253
    2610:	20 81       	ld	r18, Z
    2612:	31 81       	ldd	r19, Z+1	; 0x01
    2614:	82 17       	cp	r24, r18
    2616:	93 07       	cpc	r25, r19
    2618:	09 f0       	breq	.+2      	; 0x261c <sortCheck+0x1fa>
    261a:	18 c1       	rjmp	.+560    	; 0x284c <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    261c:	ce 01       	movw	r24, r28
    261e:	4b db       	rcall	.-2410   	; 0x1cb6 <sortDrop>
    2620:	15 c1       	rjmp	.+554    	; 0x284c <sortCheck+0x42a>
			}
		}
		else ct = adj;
    2622:	80 91 63 02 	lds	r24, 0x0263
    2626:	90 91 64 02 	lds	r25, 0x0264
    262a:	90 93 40 02 	sts	0x0240, r25
    262e:	80 93 3f 02 	sts	0x023F, r24
    2632:	0c c1       	rjmp	.+536    	; 0x284c <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    2634:	fe 01       	movw	r30, r28
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	eb 59       	subi	r30, 0x9B	; 155
    263c:	fd 4f       	sbci	r31, 0xFD	; 253
    263e:	01 90       	ld	r0, Z+
    2640:	f0 81       	ld	r31, Z
    2642:	e0 2d       	mov	r30, r0
    2644:	4e 17       	cp	r20, r30
    2646:	5f 07       	cpc	r21, r31
    2648:	09 f4       	brne	.+2      	; 0x264c <sortCheck+0x22a>
    264a:	8f c0       	rjmp	.+286    	; 0x276a <sortCheck+0x348>
    264c:	d8 01       	movw	r26, r16
    264e:	aa 0f       	add	r26, r26
    2650:	bb 1f       	adc	r27, r27
    2652:	ab 59       	subi	r26, 0x9B	; 155
    2654:	bd 4f       	sbci	r27, 0xFD	; 253
    2656:	8d 90       	ld	r8, X+
    2658:	9c 90       	ld	r9, X
    265a:	48 15       	cp	r20, r8
    265c:	59 05       	cpc	r21, r9
    265e:	09 f4       	brne	.+2      	; 0x2662 <sortCheck+0x240>
    2660:	84 c0       	rjmp	.+264    	; 0x276a <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2662:	e0 90 04 02 	lds	r14, 0x0204
    2666:	f0 90 05 02 	lds	r15, 0x0205
    266a:	e1 14       	cp	r14, r1
    266c:	f1 04       	cpc	r15, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <sortCheck+0x250>
    2670:	4e c0       	rjmp	.+156    	; 0x270e <sortCheck+0x2ec>
    2672:	b1 e0       	ldi	r27, 0x01	; 1
    2674:	eb 16       	cp	r14, r27
    2676:	f1 04       	cpc	r15, r1
    2678:	29 f4       	brne	.+10     	; 0x2684 <sortCheck+0x262>
    267a:	2f 3f       	cpi	r18, 0xFF	; 255
    267c:	6f ef       	ldi	r22, 0xFF	; 255
    267e:	36 07       	cpc	r19, r22
    2680:	b1 f5       	brne	.+108    	; 0x26ee <sortCheck+0x2cc>
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <sortCheck+0x274>
    2684:	67 01       	movw	r12, r14
    2686:	71 e0       	ldi	r23, 0x01	; 1
    2688:	c7 1a       	sub	r12, r23
    268a:	d1 08       	sbc	r13, r1
    268c:	a2 e0       	ldi	r26, 0x02	; 2
    268e:	ca 16       	cp	r12, r26
    2690:	d1 04       	cpc	r13, r1
    2692:	08 f0       	brcs	.+2      	; 0x2696 <sortCheck+0x274>
    2694:	65 c0       	rjmp	.+202    	; 0x2760 <sortCheck+0x33e>
    2696:	6c 01       	movw	r12, r24
    2698:	cc 0c       	add	r12, r12
    269a:	dd 1c       	adc	r13, r13
    269c:	cc 0c       	add	r12, r12
    269e:	dd 1c       	adc	r13, r13
    26a0:	b6 01       	movw	r22, r12
    26a2:	6f 5b       	subi	r22, 0xBF	; 191
    26a4:	7d 4f       	sbci	r23, 0xFD	; 253
    26a6:	db 01       	movw	r26, r22
    26a8:	cd 90       	ld	r12, X+
    26aa:	dc 90       	ld	r13, X
    26ac:	4c 15       	cp	r20, r12
    26ae:	5d 05       	cpc	r21, r13
    26b0:	21 f0       	breq	.+8      	; 0x26ba <sortCheck+0x298>
    26b2:	cd 20       	and	r12, r13
    26b4:	c0 94       	com	r12
    26b6:	09 f0       	breq	.+2      	; 0x26ba <sortCheck+0x298>
    26b8:	53 c0       	rjmp	.+166    	; 0x2760 <sortCheck+0x33e>
    26ba:	6c 01       	movw	r12, r24
    26bc:	cc 0c       	add	r12, r12
    26be:	dd 1c       	adc	r13, r13
    26c0:	cc 0c       	add	r12, r12
    26c2:	dd 1c       	adc	r13, r13
    26c4:	b6 01       	movw	r22, r12
    26c6:	6f 5b       	subi	r22, 0xBF	; 191
    26c8:	7d 4f       	sbci	r23, 0xFD	; 253
    26ca:	db 01       	movw	r26, r22
    26cc:	12 96       	adiw	r26, 0x02	; 2
    26ce:	cd 90       	ld	r12, X+
    26d0:	dc 90       	ld	r13, X
    26d2:	13 97       	sbiw	r26, 0x03	; 3
    26d4:	4c 15       	cp	r20, r12
    26d6:	5d 05       	cpc	r21, r13
    26d8:	21 f0       	breq	.+8      	; 0x26e2 <sortCheck+0x2c0>
    26da:	cd 20       	and	r12, r13
    26dc:	c0 94       	com	r12
    26de:	09 f0       	breq	.+2      	; 0x26e2 <sortCheck+0x2c0>
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <sortCheck+0x33e>
		{
			if (armCount>0)
    26e2:	1e 14       	cp	r1, r14
    26e4:	1f 04       	cpc	r1, r15
    26e6:	9c f4       	brge	.+38     	; 0x270e <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    26e8:	2f 3f       	cpi	r18, 0xFF	; 255
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	81 f0       	breq	.+32     	; 0x270e <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    26ee:	31 96       	adiw	r30, 0x01	; 1
    26f0:	31 f4       	brne	.+12     	; 0x26fe <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    26f2:	6b 2d       	mov	r22, r11
    26f4:	7a 2d       	mov	r23, r10
    26f6:	ce 01       	movw	r24, r28
    26f8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pickSort>
    26fc:	08 c0       	rjmp	.+16     	; 0x270e <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    26fe:	89 20       	and	r8, r9
    2700:	80 94       	com	r8
    2702:	29 f4       	brne	.+10     	; 0x270e <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    2704:	6b 2d       	mov	r22, r11
    2706:	7a 2d       	mov	r23, r10
    2708:	c8 01       	movw	r24, r16
    270a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    270e:	80 91 3f 02 	lds	r24, 0x023F
    2712:	90 91 40 02 	lds	r25, 0x0240
    2716:	bc 01       	movw	r22, r24
    2718:	6f 5f       	subi	r22, 0xFF	; 255
    271a:	7f 4f       	sbci	r23, 0xFF	; 255
    271c:	61 70       	andi	r22, 0x01	; 1
    271e:	70 78       	andi	r23, 0x80	; 128
    2720:	77 23       	and	r23, r23
    2722:	34 f4       	brge	.+12     	; 0x2730 <sortCheck+0x30e>
    2724:	61 50       	subi	r22, 0x01	; 1
    2726:	71 09       	sbc	r23, r1
    2728:	6e 6f       	ori	r22, 0xFE	; 254
    272a:	7f 6f       	ori	r23, 0xFF	; 255
    272c:	6f 5f       	subi	r22, 0xFF	; 255
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	6c 5f       	subi	r22, 0xFC	; 252
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	90 78       	andi	r25, 0x80	; 128
    2738:	99 23       	and	r25, r25
    273a:	24 f4       	brge	.+8      	; 0x2744 <sortCheck+0x322>
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	8e 6f       	ori	r24, 0xFE	; 254
    2740:	9f 6f       	ori	r25, 0xFF	; 255
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	04 96       	adiw	r24, 0x04	; 4
    2746:	0e 94 3b 07 	call	0xe76	; 0xe76 <traverseToSort>
			newSort();
    274a:	9a dc       	rcall	.-1740   	; 0x2080 <newSort>
			if (ct == 4 || ct == 5)
    274c:	80 91 3f 02 	lds	r24, 0x023F
    2750:	90 91 40 02 	lds	r25, 0x0240
    2754:	04 97       	sbiw	r24, 0x04	; 4
    2756:	02 97       	sbiw	r24, 0x02	; 2
    2758:	08 f0       	brcs	.+2      	; 0x275c <sortCheck+0x33a>
    275a:	89 c0       	rjmp	.+274    	; 0x286e <sortCheck+0x44c>
				newSort();
    275c:	91 dc       	rcall	.-1758   	; 0x2080 <newSort>
    275e:	87 c0       	rjmp	.+270    	; 0x286e <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    2760:	90 93 40 02 	sts	0x0240, r25
    2764:	80 93 3f 02 	sts	0x023F, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2768:	71 c0       	rjmp	.+226    	; 0x284c <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    276a:	a0 91 04 02 	lds	r26, 0x0204
    276e:	b0 91 05 02 	lds	r27, 0x0205
    2772:	10 97       	sbiw	r26, 0x00	; 0
    2774:	c1 f5       	brne	.+112    	; 0x27e6 <sortCheck+0x3c4>
    2776:	dc 01       	movw	r26, r24
    2778:	aa 0f       	add	r26, r26
    277a:	bb 1f       	adc	r27, r27
    277c:	a0 5e       	subi	r26, 0xE0	; 224
    277e:	bd 4f       	sbci	r27, 0xFD	; 253
    2780:	0d 90       	ld	r0, X+
    2782:	bc 91       	ld	r27, X
    2784:	a0 2d       	mov	r26, r0
    2786:	a1 30       	cpi	r26, 0x01	; 1
    2788:	b1 05       	cpc	r27, r1
    278a:	d9 f4       	brne	.+54     	; 0x27c2 <sortCheck+0x3a0>
    278c:	dc 01       	movw	r26, r24
    278e:	aa 0f       	add	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	aa 0f       	add	r26, r26
    2794:	bb 1f       	adc	r27, r27
    2796:	af 5b       	subi	r26, 0xBF	; 191
    2798:	bd 4f       	sbci	r27, 0xFD	; 253
    279a:	0d 90       	ld	r0, X+
    279c:	bc 91       	ld	r27, X
    279e:	a0 2d       	mov	r26, r0
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <sortCheck+0x384>
    27a4:	4b c0       	rjmp	.+150    	; 0x283c <sortCheck+0x41a>
    27a6:	dc 01       	movw	r26, r24
    27a8:	aa 0f       	add	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	aa 0f       	add	r26, r26
    27ae:	bb 1f       	adc	r27, r27
    27b0:	af 5b       	subi	r26, 0xBF	; 191
    27b2:	bd 4f       	sbci	r27, 0xFD	; 253
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	8d 91       	ld	r24, X+
    27b8:	9c 91       	ld	r25, X
    27ba:	13 97       	sbiw	r26, 0x03	; 3
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	19 f4       	brne	.+6      	; 0x27c6 <sortCheck+0x3a4>
    27c0:	3d c0       	rjmp	.+122    	; 0x283c <sortCheck+0x41a>
    27c2:	ab 2b       	or	r26, r27
    27c4:	d9 f5       	brne	.+118    	; 0x283c <sortCheck+0x41a>
    27c6:	2f 3f       	cpi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	c1 f5       	brne	.+112    	; 0x283c <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    27cc:	4e 17       	cp	r20, r30
    27ce:	5f 07       	cpc	r21, r31
    27d0:	29 f4       	brne	.+10     	; 0x27dc <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    27d2:	6b 2d       	mov	r22, r11
    27d4:	7a 2d       	mov	r23, r10
    27d6:	c8 01       	movw	r24, r16
    27d8:	6e da       	rcall	.-2852   	; 0x1cb6 <sortDrop>
    27da:	30 c0       	rjmp	.+96     	; 0x283c <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    27dc:	6b 2d       	mov	r22, r11
    27de:	7a 2d       	mov	r23, r10
    27e0:	ce 01       	movw	r24, r28
    27e2:	69 da       	rcall	.-2862   	; 0x1cb6 <sortDrop>
    27e4:	2b c0       	rjmp	.+86     	; 0x283c <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    27e6:	11 97       	sbiw	r26, 0x01	; 1
    27e8:	49 f5       	brne	.+82     	; 0x283c <sortCheck+0x41a>
    27ea:	dc 01       	movw	r26, r24
    27ec:	aa 0f       	add	r26, r26
    27ee:	bb 1f       	adc	r27, r27
    27f0:	aa 0f       	add	r26, r26
    27f2:	bb 1f       	adc	r27, r27
    27f4:	af 5b       	subi	r26, 0xBF	; 191
    27f6:	bd 4f       	sbci	r27, 0xFD	; 253
    27f8:	4d 91       	ld	r20, X+
    27fa:	5c 91       	ld	r21, X
    27fc:	4f 3f       	cpi	r20, 0xFF	; 255
    27fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2800:	69 f0       	breq	.+26     	; 0x281c <sortCheck+0x3fa>
    2802:	dc 01       	movw	r26, r24
    2804:	aa 0f       	add	r26, r26
    2806:	bb 1f       	adc	r27, r27
    2808:	aa 0f       	add	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	af 5b       	subi	r26, 0xBF	; 191
    280e:	bd 4f       	sbci	r27, 0xFD	; 253
    2810:	12 96       	adiw	r26, 0x02	; 2
    2812:	8d 91       	ld	r24, X+
    2814:	9c 91       	ld	r25, X
    2816:	13 97       	sbiw	r26, 0x03	; 3
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	81 f4       	brne	.+32     	; 0x283c <sortCheck+0x41a>
    281c:	2f 3f       	cpi	r18, 0xFF	; 255
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	69 f0       	breq	.+26     	; 0x283c <sortCheck+0x41a>
			if (arm[arm0] == -1)
    2822:	31 96       	adiw	r30, 0x01	; 1
    2824:	31 f4       	brne	.+12     	; 0x2832 <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    2826:	6b 2d       	mov	r22, r11
    2828:	7a 2d       	mov	r23, r10
    282a:	ce 01       	movw	r24, r28
    282c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pickSort>
    2830:	05 c0       	rjmp	.+10     	; 0x283c <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    2832:	6b 2d       	mov	r22, r11
    2834:	7a 2d       	mov	r23, r10
    2836:	c8 01       	movw	r24, r16
    2838:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pickSort>
			ct = adj;
    283c:	80 91 63 02 	lds	r24, 0x0263
    2840:	90 91 64 02 	lds	r25, 0x0264
    2844:	90 93 40 02 	sts	0x0240, r25
    2848:	80 93 3f 02 	sts	0x023F, r24
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    284c:	80 91 3f 02 	lds	r24, 0x023F
    2850:	90 91 40 02 	lds	r25, 0x0240
    2854:	02 96       	adiw	r24, 0x02	; 2
    2856:	83 70       	andi	r24, 0x03	; 3
    2858:	90 78       	andi	r25, 0x80	; 128
    285a:	99 23       	and	r25, r25
    285c:	24 f4       	brge	.+8      	; 0x2866 <sortCheck+0x444>
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	8c 6f       	ori	r24, 0xFC	; 252
    2862:	9f 6f       	ori	r25, 0xFF	; 255
    2864:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2866:	90 93 64 02 	sts	0x0264, r25
    286a:	80 93 63 02 	sts	0x0263, r24
}
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	df 90       	pop	r13
    287c:	cf 90       	pop	r12
    287e:	bf 90       	pop	r11
    2880:	af 90       	pop	r10
    2882:	9f 90       	pop	r9
    2884:	8f 90       	pop	r8
    2886:	08 95       	ret

00002888 <setIndicatorAndColor>:
//**************END INITIALISATION*******************



void setIndicatorAndColor()
{
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	e1 e4       	ldi	r30, 0x41	; 65
    288e:	f2 e0       	ldi	r31, 0x02	; 2
    2890:	c0 e2       	ldi	r28, 0x20	; 32
    2892:	d2 e0       	ldi	r29, 0x02	; 2
    2894:	a3 e5       	ldi	r26, 0x53	; 83
    2896:	b2 e0       	ldi	r27, 0x02	; 2
	int i;
	for (i = 0; i<4; i++)
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
	{
		term[i][0] = term[i][1] = -2;
    289c:	2e ef       	ldi	r18, 0xFE	; 254
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	33 83       	std	Z+3, r19	; 0x03
    28a2:	22 83       	std	Z+2, r18	; 0x02
    28a4:	31 83       	std	Z+1, r19	; 0x01
    28a6:	20 83       	st	Z, r18
		visited[i] = 0;
    28a8:	19 92       	st	Y+, r1
    28aa:	19 92       	st	Y+, r1
		color[i]=i;
    28ac:	8d 93       	st	X+, r24
    28ae:	9d 93       	st	X+, r25


void setIndicatorAndColor()
{
	int i;
	for (i = 0; i<4; i++)
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	34 96       	adiw	r30, 0x04	; 4
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	91 05       	cpc	r25, r1
    28b8:	99 f7       	brne	.-26     	; 0x28a0 <setIndicatorAndColor+0x18>
	{
		term[i][0] = term[i][1] = -2;
		visited[i] = 0;
		color[i]=i;
	}
	color[0]=0;
    28ba:	10 92 54 02 	sts	0x0254, r1
    28be:	10 92 53 02 	sts	0x0253, r1
	color[1]=2;
    28c2:	22 e0       	ldi	r18, 0x02	; 2
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	30 93 56 02 	sts	0x0256, r19
    28ca:	20 93 55 02 	sts	0x0255, r18
	color[2]=0;
    28ce:	10 92 58 02 	sts	0x0258, r1
    28d2:	10 92 57 02 	sts	0x0257, r1
	color[3]=1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	90 93 5a 02 	sts	0x025A, r25
    28de:	80 93 59 02 	sts	0x0259, r24
	for (i = 0; i<4; i++)
		indicator[color[i]] = i;
    28e2:	f9 01       	movw	r30, r18
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	e5 5a       	subi	r30, 0xA5	; 165
    28ea:	fd 4f       	sbci	r31, 0xFD	; 253
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	30 93 5c 02 	sts	0x025C, r19
    28f4:	20 93 5b 02 	sts	0x025B, r18
    28f8:	fc 01       	movw	r30, r24
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	e5 5a       	subi	r30, 0xA5	; 165
    2900:	fd 4f       	sbci	r31, 0xFD	; 253
    2902:	83 e0       	ldi	r24, 0x03	; 3
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
	sort[0] = sort[1] = -1;
    290a:	8f ef       	ldi	r24, 0xFF	; 255
    290c:	9f ef       	ldi	r25, 0xFF	; 255
    290e:	90 93 3e 02 	sts	0x023E, r25
    2912:	80 93 3d 02 	sts	0x023D, r24
    2916:	90 93 3c 02 	sts	0x023C, r25
    291a:	80 93 3b 02 	sts	0x023B, r24
	arm[0] = arm[1] = -1;
    291e:	90 93 68 02 	sts	0x0268, r25
    2922:	80 93 67 02 	sts	0x0267, r24
    2926:	90 93 66 02 	sts	0x0266, r25
    292a:	80 93 65 02 	sts	0x0265, r24
}
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	08 95       	ret

00002934 <indicator_set>:

void indicator_set()
{
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
	forwardJaa_Indi();
    293e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <forwardJaa_Indi>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2942:	08 e2       	ldi	r16, 0x28	; 40
    2944:	11 e0       	ldi	r17, 0x01	; 1
    2946:	0f 2e       	mov	r0, r31
    2948:	f0 ef       	ldi	r31, 0xF0	; 240
    294a:	ff 2e       	mov	r15, r31
    294c:	f0 2d       	mov	r31, r0
    294e:	f8 01       	movw	r30, r16
    2950:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2952:	ca e2       	ldi	r28, 0x2A	; 42
    2954:	d1 e0       	ldi	r29, 0x01	; 1
    2956:	f8 82       	st	Y, r15
	//buzzer();
	//turn efficiency
	velocity(op_v,op_v);
	forward_mm(160);
    2958:	80 ea       	ldi	r24, 0xA0	; 160
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <forward_mm>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2960:	f8 01       	movw	r30, r16
    2962:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2964:	f8 82       	st	Y, r15
	//buzzer();
	//scan 4
	velocity(op_v,op_v);
	soft_right_2();
    2966:	0e 94 db 00 	call	0x1b6	; 0x1b6 <soft_right_2>
    296a:	ff ef       	ldi	r31, 0xFF	; 255
    296c:	2f e7       	ldi	r18, 0x7F	; 127
    296e:	8f e1       	ldi	r24, 0x1F	; 31
    2970:	f1 50       	subi	r31, 0x01	; 1
    2972:	20 40       	sbci	r18, 0x00	; 0
    2974:	80 40       	sbci	r24, 0x00	; 0
    2976:	e1 f7       	brne	.-8      	; 0x2970 <indicator_set+0x3c>
    2978:	00 c0       	rjmp	.+0      	; 0x297a <indicator_set+0x46>
    297a:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(2)<40);
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2982:	88 32       	cpi	r24, 0x28	; 40
    2984:	d8 f3       	brcs	.-10     	; 0x297c <indicator_set+0x48>
	stop();
    2986:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[3]=scan();
    298a:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    298e:	90 93 5a 02 	sts	0x025A, r25
    2992:	80 93 59 02 	sts	0x0259, r24
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	
	//back to line
	soft_left();
    2996:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <soft_left>
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	ef ef       	ldi	r30, 0xFF	; 255
    299e:	fc e2       	ldi	r31, 0x2C	; 44
    29a0:	91 50       	subi	r25, 0x01	; 1
    29a2:	e0 40       	sbci	r30, 0x00	; 0
    29a4:	f0 40       	sbci	r31, 0x00	; 0
    29a6:	e1 f7       	brne	.-8      	; 0x29a0 <indicator_set+0x6c>
    29a8:	00 c0       	rjmp	.+0      	; 0x29aa <indicator_set+0x76>
    29aa:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    29b2:	88 32       	cpi	r24, 0x28	; 40
    29b4:	d8 f3       	brcs	.-10     	; 0x29ac <indicator_set+0x78>
	stop();
    29b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//scan 3
	soft_left_2();
    29ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <soft_left_2>
    29be:	2f ef       	ldi	r18, 0xFF	; 255
    29c0:	8f e7       	ldi	r24, 0x7F	; 127
    29c2:	96 e1       	ldi	r25, 0x16	; 22
    29c4:	21 50       	subi	r18, 0x01	; 1
    29c6:	80 40       	sbci	r24, 0x00	; 0
    29c8:	90 40       	sbci	r25, 0x00	; 0
    29ca:	e1 f7       	brne	.-8      	; 0x29c4 <indicator_set+0x90>
    29cc:	00 c0       	rjmp	.+0      	; 0x29ce <indicator_set+0x9a>
    29ce:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    29d6:	88 32       	cpi	r24, 0x28	; 40
    29d8:	d8 f3       	brcs	.-10     	; 0x29d0 <indicator_set+0x9c>
		stop();
    29da:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[2]=scan();
    29de:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    29e2:	90 93 58 02 	sts	0x0258, r25
    29e6:	80 93 57 02 	sts	0x0257, r24
// 		_delay_ms(100);
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	//back to line
	soft_right();
    29ea:	0e 94 d5 00 	call	0x1aa	; 0x1aa <soft_right>
    29ee:	ef ef       	ldi	r30, 0xFF	; 255
    29f0:	ff e7       	ldi	r31, 0x7F	; 127
    29f2:	2d e0       	ldi	r18, 0x0D	; 13
    29f4:	e1 50       	subi	r30, 0x01	; 1
    29f6:	f0 40       	sbci	r31, 0x00	; 0
    29f8:	20 40       	sbci	r18, 0x00	; 0
    29fa:	e1 f7       	brne	.-8      	; 0x29f4 <indicator_set+0xc0>
    29fc:	00 c0       	rjmp	.+0      	; 0x29fe <indicator_set+0xca>
    29fe:	00 00       	nop
	_delay_ms(300);
	while(ADC_Conversion(2)<40);
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a06:	88 32       	cpi	r24, 0x28	; 40
    2a08:	d8 f3       	brcs	.-10     	; 0x2a00 <indicator_set+0xcc>
	stop();
    2a0a:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//=====
	
	forwardJaa_Indi();
    2a0e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <forwardJaa_Indi>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2a12:	80 ef       	ldi	r24, 0xF0	; 240
    2a14:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2a18:	80 93 2a 01 	sts	0x012A, r24
	velocity(op_v,op_v);
	//turn efficiency
	forward_mm(160);
    2a1c:	80 ea       	ldi	r24, 0xA0	; 160
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <forward_mm>
	//scan 4
	soft_right_2();
    2a24:	0e 94 db 00 	call	0x1b6	; 0x1b6 <soft_right_2>
    2a28:	8f ef       	ldi	r24, 0xFF	; 255
    2a2a:	9f e7       	ldi	r25, 0x7F	; 127
    2a2c:	ef e1       	ldi	r30, 0x1F	; 31
    2a2e:	81 50       	subi	r24, 0x01	; 1
    2a30:	90 40       	sbci	r25, 0x00	; 0
    2a32:	e0 40       	sbci	r30, 0x00	; 0
    2a34:	e1 f7       	brne	.-8      	; 0x2a2e <indicator_set+0xfa>
    2a36:	00 c0       	rjmp	.+0      	; 0x2a38 <indicator_set+0x104>
    2a38:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a40:	88 32       	cpi	r24, 0x28	; 40
    2a42:	d8 f3       	brcs	.-10     	; 0x2a3a <indicator_set+0x106>
	stop();
    2a44:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[1]=scan();
    2a48:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    2a4c:	90 93 56 02 	sts	0x0256, r25
    2a50:	80 93 55 02 	sts	0x0255, r24
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	
	//back to line
	soft_left();
    2a54:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <soft_left>
    2a58:	ff ef       	ldi	r31, 0xFF	; 255
    2a5a:	2f ef       	ldi	r18, 0xFF	; 255
    2a5c:	8c e2       	ldi	r24, 0x2C	; 44
    2a5e:	f1 50       	subi	r31, 0x01	; 1
    2a60:	20 40       	sbci	r18, 0x00	; 0
    2a62:	80 40       	sbci	r24, 0x00	; 0
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <indicator_set+0x12a>
    2a66:	00 c0       	rjmp	.+0      	; 0x2a68 <indicator_set+0x134>
    2a68:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a70:	88 32       	cpi	r24, 0x28	; 40
    2a72:	d8 f3       	brcs	.-10     	; 0x2a6a <indicator_set+0x136>
	stop();
    2a74:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//scan 3
	soft_left_2();
    2a78:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <soft_left_2>
    2a7c:	9f ef       	ldi	r25, 0xFF	; 255
    2a7e:	ef e7       	ldi	r30, 0x7F	; 127
    2a80:	f6 e1       	ldi	r31, 0x16	; 22
    2a82:	91 50       	subi	r25, 0x01	; 1
    2a84:	e0 40       	sbci	r30, 0x00	; 0
    2a86:	f0 40       	sbci	r31, 0x00	; 0
    2a88:	e1 f7       	brne	.-8      	; 0x2a82 <indicator_set+0x14e>
    2a8a:	00 c0       	rjmp	.+0      	; 0x2a8c <indicator_set+0x158>
    2a8c:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a94:	88 32       	cpi	r24, 0x28	; 40
    2a96:	d8 f3       	brcs	.-10     	; 0x2a8e <indicator_set+0x15a>
	stop();
    2a98:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[0]=scan();
    2a9c:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    2aa0:	90 93 54 02 	sts	0x0254, r25
    2aa4:	80 93 53 02 	sts	0x0253, r24
// 		_delay_ms(100);
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	//back to line
	soft_right();
    2aa8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <soft_right>
    2aac:	2f ef       	ldi	r18, 0xFF	; 255
    2aae:	8f e7       	ldi	r24, 0x7F	; 127
    2ab0:	96 e1       	ldi	r25, 0x16	; 22
    2ab2:	21 50       	subi	r18, 0x01	; 1
    2ab4:	80 40       	sbci	r24, 0x00	; 0
    2ab6:	90 40       	sbci	r25, 0x00	; 0
    2ab8:	e1 f7       	brne	.-8      	; 0x2ab2 <indicator_set+0x17e>
    2aba:	00 c0       	rjmp	.+0      	; 0x2abc <indicator_set+0x188>
    2abc:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2ac4:	88 32       	cpi	r24, 0x28	; 40
    2ac6:	d8 f3       	brcs	.-10     	; 0x2abe <indicator_set+0x18a>
	stop();
    2ac8:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	//lcd_print(1,1,color[0],1);
	//lcd_print(1,3,color[1],1);
	//lcd_print(1,5,color[2],1);
	//lcd_print(1,7,color[3],1);
	
	forwardJaa();
    2acc:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <forwardJaa>
	forward();
    2ad0:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2ad4:	e6 e6       	ldi	r30, 0x66	; 102
    2ad6:	f6 e2       	ldi	r31, 0x26	; 38
    2ad8:	23 e0       	ldi	r18, 0x03	; 3
    2ada:	e1 50       	subi	r30, 0x01	; 1
    2adc:	f0 40       	sbci	r31, 0x00	; 0
    2ade:	20 40       	sbci	r18, 0x00	; 0
    2ae0:	e1 f7       	brne	.-8      	; 0x2ada <indicator_set+0x1a6>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2ae2:	80 ef       	ldi	r24, 0xF0	; 240
    2ae4:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2ae8:	80 93 2a 01 	sts	0x012A, r24
	_delay_ms(70);
	velocity(op_v,op_v);
	turnRight();
    2aec:	0e 94 42 04 	call	0x884	; 0x884 <turnRight>
	forward();
    2af0:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	9f ef       	ldi	r25, 0xFF	; 255
    2af8:	e8 e0       	ldi	r30, 0x08	; 8
    2afa:	81 50       	subi	r24, 0x01	; 1
    2afc:	90 40       	sbci	r25, 0x00	; 0
    2afe:	e0 40       	sbci	r30, 0x00	; 0
    2b00:	e1 f7       	brne	.-8      	; 0x2afa <indicator_set+0x1c6>
    2b02:	00 c0       	rjmp	.+0      	; 0x2b04 <indicator_set+0x1d0>
    2b04:	00 00       	nop
	_delay_ms(200);
	forwardJaa();
    2b06:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <forwardJaa>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2b0a:	80 ef       	ldi	r24, 0xF0	; 240
    2b0c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2b10:	80 93 2a 01 	sts	0x012A, r24
	velocity(op_v,op_v);
	forward();
    2b14:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2b18:	ff ef       	ldi	r31, 0xFF	; 255
    2b1a:	2f e3       	ldi	r18, 0x3F	; 63
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	f1 50       	subi	r31, 0x01	; 1
    2b20:	20 40       	sbci	r18, 0x00	; 0
    2b22:	80 40       	sbci	r24, 0x00	; 0
    2b24:	e1 f7       	brne	.-8      	; 0x2b1e <indicator_set+0x1ea>
    2b26:	00 c0       	rjmp	.+0      	; 0x2b28 <indicator_set+0x1f4>
    2b28:	00 00       	nop
	_delay_ms(50);
	turnRight();
    2b2a:	0e 94 42 04 	call	0x884	; 0x884 <turnRight>
	while(ADC_Conversion(2)<40)
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <indicator_set+0x200>
		right();
    2b30:	0e 94 cf 00 	call	0x19e	; 0x19e <right>
	forwardJaa();
	velocity(op_v,op_v);
	forward();
	_delay_ms(50);
	turnRight();
	while(ADC_Conversion(2)<40)
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2b3a:	88 32       	cpi	r24, 0x28	; 40
    2b3c:	c8 f3       	brcs	.-14     	; 0x2b30 <indicator_set+0x1fc>
		right();
	stop();
    2b3e:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//buzzer_on();	
}
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	0f 91       	pop	r16
    2b4a:	ff 90       	pop	r15
    2b4c:	08 95       	ret

00002b4e <__init__>:

void __init__()
{
	init_devices();
    2b4e:	0e 94 0f 03 	call	0x61e	; 0x61e <init_devices>
	color_sensor_scaling();
    2b52:	0e 94 98 01 	call	0x330	; 0x330 <color_sensor_scaling>
	
	threshold=7000;
    2b56:	88 e5       	ldi	r24, 0x58	; 88
    2b58:	9b e1       	ldi	r25, 0x1B	; 27
    2b5a:	90 93 29 02 	sts	0x0229, r25
    2b5e:	80 93 28 02 	sts	0x0228, r24
{
	//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
	float PositionPanServo = 0;
	//PositionPanServo: The value to which the servo is to be positioned at
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
    2b62:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
    2b66:	8e e4       	ldi	r24, 0x4E	; 78
    2b68:	80 93 88 00 	sts	0x0088, r24
{
	//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
	float PositionTiltServo = 0;
	//PositionTiltServoServo: The value to which the servo is to be positioned at
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    2b6c:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    2b70:	83 e5       	ldi	r24, 0x53	; 83
    2b72:	80 93 8a 00 	sts	0x008A, r24
{
	//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
	float PositionServo = 0;
	//PositionServo: The value to which the servo is to be positioned at
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    2b76:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    2b7a:	83 e2       	ldi	r24, 0x23	; 35
    2b7c:	80 93 8c 00 	sts	0x008C, r24
    2b80:	2f ef       	ldi	r18, 0xFF	; 255
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	98 e0       	ldi	r25, 0x08	; 8
    2b86:	21 50       	subi	r18, 0x01	; 1
    2b88:	80 40       	sbci	r24, 0x00	; 0
    2b8a:	90 40       	sbci	r25, 0x00	; 0
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <__init__+0x38>
    2b8e:	00 c0       	rjmp	.+0      	; 0x2b90 <__init__+0x42>
    2b90:	00 00       	nop
	servo_2(90);
	servo_3(0);
	//servo_1(0);
//	servo_3(0);
	_delay_ms(200);
 	servo_3_free();
    2b92:	0e 94 ef 00 	call	0x1de	; 0x1de <servo_3_free>
 	servo_2_free();
    2b96:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servo_2_free>
 	servo_1_free();
    2b9a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <servo_1_free>
    2b9e:	2f ef       	ldi	r18, 0xFF	; 255
    2ba0:	8f ef       	ldi	r24, 0xFF	; 255
    2ba2:	98 e0       	ldi	r25, 0x08	; 8
    2ba4:	21 50       	subi	r18, 0x01	; 1
    2ba6:	80 40       	sbci	r24, 0x00	; 0
    2ba8:	90 40       	sbci	r25, 0x00	; 0
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <__init__+0x56>
    2bac:	00 c0       	rjmp	.+0      	; 0x2bae <__init__+0x60>
    2bae:	00 00       	nop
	_delay_ms(200);
	ct = 3;
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	90 93 40 02 	sts	0x0240, r25
    2bb8:	80 93 3f 02 	sts	0x023F, r24
	adj = 1;
    2bbc:	21 e0       	ldi	r18, 0x01	; 1
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	30 93 64 02 	sts	0x0264, r19
    2bc4:	20 93 63 02 	sts	0x0263, r18
	dir = 0;
    2bc8:	10 92 0b 02 	sts	0x020B, r1
    2bcc:	10 92 0a 02 	sts	0x020A, r1
	ot = 3;
    2bd0:	90 93 01 02 	sts	0x0201, r25
    2bd4:	80 93 00 02 	sts	0x0200, r24
    2bd8:	08 95       	ret

00002bda <main>:
	//buzzer();
}
int main(void)
{
	__init__();
    2bda:	b9 df       	rcall	.-142    	; 0x2b4e <__init__>
// 	buzzer();	
// turnLeft();
// while (1);
	
	forward();
    2bdc:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2be0:	2f ef       	ldi	r18, 0xFF	; 255
    2be2:	8f e7       	ldi	r24, 0x7F	; 127
    2be4:	96 e1       	ldi	r25, 0x16	; 22
    2be6:	21 50       	subi	r18, 0x01	; 1
    2be8:	80 40       	sbci	r24, 0x00	; 0
    2bea:	90 40       	sbci	r25, 0x00	; 0
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <main+0xc>
    2bee:	00 c0       	rjmp	.+0      	; 0x2bf0 <main+0x16>
    2bf0:	00 00       	nop
	_delay_ms(500);
//  	 	stop();
//  		//buzzer();
	indicator_set();
    2bf2:	a0 de       	rcall	.-704    	; 0x2934 <indicator_set>
	setIndicatorAndColor();
    2bf4:	49 de       	rcall	.-878    	; 0x2888 <setIndicatorAndColor>
// 	//	_delay_ms(500);
// 		pick(0);
// 	//	_delay_ms(500);
// 		drop(0);
// 	}
	forwardJaa();
    2bf6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <forwardJaa>
	while (sorted<total)
    2bfa:	20 91 12 02 	lds	r18, 0x0212
    2bfe:	30 91 13 02 	lds	r19, 0x0213
    2c02:	80 91 02 02 	lds	r24, 0x0202
    2c06:	90 91 03 02 	lds	r25, 0x0203
    2c0a:	28 17       	cp	r18, r24
    2c0c:	39 07       	cpc	r19, r25
    2c0e:	74 f5       	brge	.+92     	; 0x2c6c <main+0x92>
	{
		canDrop();
    2c10:	ea d8       	rcall	.-3628   	; 0x1de6 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (sorted == total)
    2c12:	20 91 12 02 	lds	r18, 0x0212
    2c16:	30 91 13 02 	lds	r19, 0x0213
    2c1a:	80 91 02 02 	lds	r24, 0x0202
    2c1e:	90 91 03 02 	lds	r25, 0x0203
    2c22:	28 17       	cp	r18, r24
    2c24:	39 07       	cpc	r19, r25
    2c26:	11 f1       	breq	.+68     	; 0x2c6c <main+0x92>
		{
			break;
		}
		
		pickup();
    2c28:	0e 94 b0 0b 	call	0x1760	; 0x1760 <pickup>

		traverseToSort(ct, ct % 2 + 4);
    2c2c:	80 91 3f 02 	lds	r24, 0x023F
    2c30:	90 91 40 02 	lds	r25, 0x0240
    2c34:	9c 01       	movw	r18, r24
    2c36:	21 70       	andi	r18, 0x01	; 1
    2c38:	30 78       	andi	r19, 0x80	; 128
    2c3a:	33 23       	and	r19, r19
    2c3c:	34 f4       	brge	.+12     	; 0x2c4a <main+0x70>
    2c3e:	21 50       	subi	r18, 0x01	; 1
    2c40:	31 09       	sbc	r19, r1
    2c42:	2e 6f       	ori	r18, 0xFE	; 254
    2c44:	3f 6f       	ori	r19, 0xFF	; 255
    2c46:	2f 5f       	subi	r18, 0xFF	; 255
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	6c 5f       	subi	r22, 0xFC	; 252
    2c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c50:	0e 94 3b 07 	call	0xe76	; 0xe76 <traverseToSort>
		sortCheck();
    2c54:	e6 db       	rcall	.-2100   	; 0x2422 <sortCheck>
// 		pick(0);
// 	//	_delay_ms(500);
// 		drop(0);
// 	}
	forwardJaa();
	while (sorted<total)
    2c56:	20 91 12 02 	lds	r18, 0x0212
    2c5a:	30 91 13 02 	lds	r19, 0x0213
    2c5e:	80 91 02 02 	lds	r24, 0x0202
    2c62:	90 91 03 02 	lds	r25, 0x0203
    2c66:	28 17       	cp	r18, r24
    2c68:	39 07       	cpc	r19, r25
    2c6a:	94 f2       	brlt	.-92     	; 0x2c10 <main+0x36>
		pickup();

		traverseToSort(ct, ct % 2 + 4);
		sortCheck();
	}
	buzzer_on();
    2c6c:	0e 94 29 01 	call	0x252	; 0x252 <buzzer_on>
    2c70:	2f ef       	ldi	r18, 0xFF	; 255
    2c72:	8f ef       	ldi	r24, 0xFF	; 255
    2c74:	90 ee       	ldi	r25, 0xE0	; 224
    2c76:	21 50       	subi	r18, 0x01	; 1
    2c78:	80 40       	sbci	r24, 0x00	; 0
    2c7a:	90 40       	sbci	r25, 0x00	; 0
    2c7c:	e1 f7       	brne	.-8      	; 0x2c76 <main+0x9c>
    2c7e:	00 c0       	rjmp	.+0      	; 0x2c80 <main+0xa6>
    2c80:	00 00       	nop
	_delay_ms(5000);
	buzzer_off();
    2c82:	0e 94 2d 01 	call	0x25a	; 0x25a <buzzer_off>
	stop();
    2c86:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
    2c8a:	ff cf       	rjmp	.-2      	; 0x2c8a <main+0xb0>

00002c8c <__divsf3>:
    2c8c:	0c d0       	rcall	.+24     	; 0x2ca6 <__divsf3x>
    2c8e:	e6 c0       	rjmp	.+460    	; 0x2e5c <__fp_round>
    2c90:	de d0       	rcall	.+444    	; 0x2e4e <__fp_pscB>
    2c92:	40 f0       	brcs	.+16     	; 0x2ca4 <__divsf3+0x18>
    2c94:	d5 d0       	rcall	.+426    	; 0x2e40 <__fp_pscA>
    2c96:	30 f0       	brcs	.+12     	; 0x2ca4 <__divsf3+0x18>
    2c98:	21 f4       	brne	.+8      	; 0x2ca2 <__divsf3+0x16>
    2c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c9c:	19 f0       	breq	.+6      	; 0x2ca4 <__divsf3+0x18>
    2c9e:	c7 c0       	rjmp	.+398    	; 0x2e2e <__fp_inf>
    2ca0:	51 11       	cpse	r21, r1
    2ca2:	10 c1       	rjmp	.+544    	; 0x2ec4 <__fp_szero>
    2ca4:	ca c0       	rjmp	.+404    	; 0x2e3a <__fp_nan>

00002ca6 <__divsf3x>:
    2ca6:	eb d0       	rcall	.+470    	; 0x2e7e <__fp_split3>
    2ca8:	98 f3       	brcs	.-26     	; 0x2c90 <__divsf3+0x4>

00002caa <__divsf3_pse>:
    2caa:	99 23       	and	r25, r25
    2cac:	c9 f3       	breq	.-14     	; 0x2ca0 <__divsf3+0x14>
    2cae:	55 23       	and	r21, r21
    2cb0:	b1 f3       	breq	.-20     	; 0x2c9e <__divsf3+0x12>
    2cb2:	95 1b       	sub	r25, r21
    2cb4:	55 0b       	sbc	r21, r21
    2cb6:	bb 27       	eor	r27, r27
    2cb8:	aa 27       	eor	r26, r26
    2cba:	62 17       	cp	r22, r18
    2cbc:	73 07       	cpc	r23, r19
    2cbe:	84 07       	cpc	r24, r20
    2cc0:	38 f0       	brcs	.+14     	; 0x2cd0 <__divsf3_pse+0x26>
    2cc2:	9f 5f       	subi	r25, 0xFF	; 255
    2cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc6:	22 0f       	add	r18, r18
    2cc8:	33 1f       	adc	r19, r19
    2cca:	44 1f       	adc	r20, r20
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	a9 f3       	breq	.-22     	; 0x2cba <__divsf3_pse+0x10>
    2cd0:	33 d0       	rcall	.+102    	; 0x2d38 <__divsf3_pse+0x8e>
    2cd2:	0e 2e       	mov	r0, r30
    2cd4:	3a f0       	brmi	.+14     	; 0x2ce4 <__divsf3_pse+0x3a>
    2cd6:	e0 e8       	ldi	r30, 0x80	; 128
    2cd8:	30 d0       	rcall	.+96     	; 0x2d3a <__divsf3_pse+0x90>
    2cda:	91 50       	subi	r25, 0x01	; 1
    2cdc:	50 40       	sbci	r21, 0x00	; 0
    2cde:	e6 95       	lsr	r30
    2ce0:	00 1c       	adc	r0, r0
    2ce2:	ca f7       	brpl	.-14     	; 0x2cd6 <__divsf3_pse+0x2c>
    2ce4:	29 d0       	rcall	.+82     	; 0x2d38 <__divsf3_pse+0x8e>
    2ce6:	fe 2f       	mov	r31, r30
    2ce8:	27 d0       	rcall	.+78     	; 0x2d38 <__divsf3_pse+0x8e>
    2cea:	66 0f       	add	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	88 1f       	adc	r24, r24
    2cf0:	bb 1f       	adc	r27, r27
    2cf2:	26 17       	cp	r18, r22
    2cf4:	37 07       	cpc	r19, r23
    2cf6:	48 07       	cpc	r20, r24
    2cf8:	ab 07       	cpc	r26, r27
    2cfa:	b0 e8       	ldi	r27, 0x80	; 128
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <__divsf3_pse+0x56>
    2cfe:	bb 0b       	sbc	r27, r27
    2d00:	80 2d       	mov	r24, r0
    2d02:	bf 01       	movw	r22, r30
    2d04:	ff 27       	eor	r31, r31
    2d06:	93 58       	subi	r25, 0x83	; 131
    2d08:	5f 4f       	sbci	r21, 0xFF	; 255
    2d0a:	2a f0       	brmi	.+10     	; 0x2d16 <__divsf3_pse+0x6c>
    2d0c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d0e:	51 05       	cpc	r21, r1
    2d10:	68 f0       	brcs	.+26     	; 0x2d2c <__divsf3_pse+0x82>
    2d12:	8d c0       	rjmp	.+282    	; 0x2e2e <__fp_inf>
    2d14:	d7 c0       	rjmp	.+430    	; 0x2ec4 <__fp_szero>
    2d16:	5f 3f       	cpi	r21, 0xFF	; 255
    2d18:	ec f3       	brlt	.-6      	; 0x2d14 <__divsf3_pse+0x6a>
    2d1a:	98 3e       	cpi	r25, 0xE8	; 232
    2d1c:	dc f3       	brlt	.-10     	; 0x2d14 <__divsf3_pse+0x6a>
    2d1e:	86 95       	lsr	r24
    2d20:	77 95       	ror	r23
    2d22:	67 95       	ror	r22
    2d24:	b7 95       	ror	r27
    2d26:	f7 95       	ror	r31
    2d28:	9f 5f       	subi	r25, 0xFF	; 255
    2d2a:	c9 f7       	brne	.-14     	; 0x2d1e <__divsf3_pse+0x74>
    2d2c:	88 0f       	add	r24, r24
    2d2e:	91 1d       	adc	r25, r1
    2d30:	96 95       	lsr	r25
    2d32:	87 95       	ror	r24
    2d34:	97 f9       	bld	r25, 7
    2d36:	08 95       	ret
    2d38:	e1 e0       	ldi	r30, 0x01	; 1
    2d3a:	66 0f       	add	r22, r22
    2d3c:	77 1f       	adc	r23, r23
    2d3e:	88 1f       	adc	r24, r24
    2d40:	bb 1f       	adc	r27, r27
    2d42:	62 17       	cp	r22, r18
    2d44:	73 07       	cpc	r23, r19
    2d46:	84 07       	cpc	r24, r20
    2d48:	ba 07       	cpc	r27, r26
    2d4a:	20 f0       	brcs	.+8      	; 0x2d54 <__divsf3_pse+0xaa>
    2d4c:	62 1b       	sub	r22, r18
    2d4e:	73 0b       	sbc	r23, r19
    2d50:	84 0b       	sbc	r24, r20
    2d52:	ba 0b       	sbc	r27, r26
    2d54:	ee 1f       	adc	r30, r30
    2d56:	88 f7       	brcc	.-30     	; 0x2d3a <__divsf3_pse+0x90>
    2d58:	e0 95       	com	r30
    2d5a:	08 95       	ret

00002d5c <__fixunssfsi>:
    2d5c:	98 d0       	rcall	.+304    	; 0x2e8e <__fp_splitA>
    2d5e:	88 f0       	brcs	.+34     	; 0x2d82 <__fixunssfsi+0x26>
    2d60:	9f 57       	subi	r25, 0x7F	; 127
    2d62:	90 f0       	brcs	.+36     	; 0x2d88 <__fixunssfsi+0x2c>
    2d64:	b9 2f       	mov	r27, r25
    2d66:	99 27       	eor	r25, r25
    2d68:	b7 51       	subi	r27, 0x17	; 23
    2d6a:	a0 f0       	brcs	.+40     	; 0x2d94 <__fixunssfsi+0x38>
    2d6c:	d1 f0       	breq	.+52     	; 0x2da2 <__fixunssfsi+0x46>
    2d6e:	66 0f       	add	r22, r22
    2d70:	77 1f       	adc	r23, r23
    2d72:	88 1f       	adc	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	1a f0       	brmi	.+6      	; 0x2d7e <__fixunssfsi+0x22>
    2d78:	ba 95       	dec	r27
    2d7a:	c9 f7       	brne	.-14     	; 0x2d6e <__fixunssfsi+0x12>
    2d7c:	12 c0       	rjmp	.+36     	; 0x2da2 <__fixunssfsi+0x46>
    2d7e:	b1 30       	cpi	r27, 0x01	; 1
    2d80:	81 f0       	breq	.+32     	; 0x2da2 <__fixunssfsi+0x46>
    2d82:	9f d0       	rcall	.+318    	; 0x2ec2 <__fp_zero>
    2d84:	b1 e0       	ldi	r27, 0x01	; 1
    2d86:	08 95       	ret
    2d88:	9c c0       	rjmp	.+312    	; 0x2ec2 <__fp_zero>
    2d8a:	67 2f       	mov	r22, r23
    2d8c:	78 2f       	mov	r23, r24
    2d8e:	88 27       	eor	r24, r24
    2d90:	b8 5f       	subi	r27, 0xF8	; 248
    2d92:	39 f0       	breq	.+14     	; 0x2da2 <__fixunssfsi+0x46>
    2d94:	b9 3f       	cpi	r27, 0xF9	; 249
    2d96:	cc f3       	brlt	.-14     	; 0x2d8a <__fixunssfsi+0x2e>
    2d98:	86 95       	lsr	r24
    2d9a:	77 95       	ror	r23
    2d9c:	67 95       	ror	r22
    2d9e:	b3 95       	inc	r27
    2da0:	d9 f7       	brne	.-10     	; 0x2d98 <__fixunssfsi+0x3c>
    2da2:	3e f4       	brtc	.+14     	; 0x2db2 <__fixunssfsi+0x56>
    2da4:	90 95       	com	r25
    2da6:	80 95       	com	r24
    2da8:	70 95       	com	r23
    2daa:	61 95       	neg	r22
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	8f 4f       	sbci	r24, 0xFF	; 255
    2db0:	9f 4f       	sbci	r25, 0xFF	; 255
    2db2:	08 95       	ret

00002db4 <__floatunsisf>:
    2db4:	e8 94       	clt
    2db6:	09 c0       	rjmp	.+18     	; 0x2dca <__floatsisf+0x12>

00002db8 <__floatsisf>:
    2db8:	97 fb       	bst	r25, 7
    2dba:	3e f4       	brtc	.+14     	; 0x2dca <__floatsisf+0x12>
    2dbc:	90 95       	com	r25
    2dbe:	80 95       	com	r24
    2dc0:	70 95       	com	r23
    2dc2:	61 95       	neg	r22
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	99 23       	and	r25, r25
    2dcc:	a9 f0       	breq	.+42     	; 0x2df8 <__floatsisf+0x40>
    2dce:	f9 2f       	mov	r31, r25
    2dd0:	96 e9       	ldi	r25, 0x96	; 150
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	93 95       	inc	r25
    2dd6:	f6 95       	lsr	r31
    2dd8:	87 95       	ror	r24
    2dda:	77 95       	ror	r23
    2ddc:	67 95       	ror	r22
    2dde:	b7 95       	ror	r27
    2de0:	f1 11       	cpse	r31, r1
    2de2:	f8 cf       	rjmp	.-16     	; 0x2dd4 <__floatsisf+0x1c>
    2de4:	fa f4       	brpl	.+62     	; 0x2e24 <__floatsisf+0x6c>
    2de6:	bb 0f       	add	r27, r27
    2de8:	11 f4       	brne	.+4      	; 0x2dee <__floatsisf+0x36>
    2dea:	60 ff       	sbrs	r22, 0
    2dec:	1b c0       	rjmp	.+54     	; 0x2e24 <__floatsisf+0x6c>
    2dee:	6f 5f       	subi	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	8f 4f       	sbci	r24, 0xFF	; 255
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	16 c0       	rjmp	.+44     	; 0x2e24 <__floatsisf+0x6c>
    2df8:	88 23       	and	r24, r24
    2dfa:	11 f0       	breq	.+4      	; 0x2e00 <__floatsisf+0x48>
    2dfc:	96 e9       	ldi	r25, 0x96	; 150
    2dfe:	11 c0       	rjmp	.+34     	; 0x2e22 <__floatsisf+0x6a>
    2e00:	77 23       	and	r23, r23
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <__floatsisf+0x54>
    2e04:	9e e8       	ldi	r25, 0x8E	; 142
    2e06:	87 2f       	mov	r24, r23
    2e08:	76 2f       	mov	r23, r22
    2e0a:	05 c0       	rjmp	.+10     	; 0x2e16 <__floatsisf+0x5e>
    2e0c:	66 23       	and	r22, r22
    2e0e:	71 f0       	breq	.+28     	; 0x2e2c <__floatsisf+0x74>
    2e10:	96 e8       	ldi	r25, 0x86	; 134
    2e12:	86 2f       	mov	r24, r22
    2e14:	70 e0       	ldi	r23, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	2a f0       	brmi	.+10     	; 0x2e24 <__floatsisf+0x6c>
    2e1a:	9a 95       	dec	r25
    2e1c:	66 0f       	add	r22, r22
    2e1e:	77 1f       	adc	r23, r23
    2e20:	88 1f       	adc	r24, r24
    2e22:	da f7       	brpl	.-10     	; 0x2e1a <__floatsisf+0x62>
    2e24:	88 0f       	add	r24, r24
    2e26:	96 95       	lsr	r25
    2e28:	87 95       	ror	r24
    2e2a:	97 f9       	bld	r25, 7
    2e2c:	08 95       	ret

00002e2e <__fp_inf>:
    2e2e:	97 f9       	bld	r25, 7
    2e30:	9f 67       	ori	r25, 0x7F	; 127
    2e32:	80 e8       	ldi	r24, 0x80	; 128
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	08 95       	ret

00002e3a <__fp_nan>:
    2e3a:	9f ef       	ldi	r25, 0xFF	; 255
    2e3c:	80 ec       	ldi	r24, 0xC0	; 192
    2e3e:	08 95       	ret

00002e40 <__fp_pscA>:
    2e40:	00 24       	eor	r0, r0
    2e42:	0a 94       	dec	r0
    2e44:	16 16       	cp	r1, r22
    2e46:	17 06       	cpc	r1, r23
    2e48:	18 06       	cpc	r1, r24
    2e4a:	09 06       	cpc	r0, r25
    2e4c:	08 95       	ret

00002e4e <__fp_pscB>:
    2e4e:	00 24       	eor	r0, r0
    2e50:	0a 94       	dec	r0
    2e52:	12 16       	cp	r1, r18
    2e54:	13 06       	cpc	r1, r19
    2e56:	14 06       	cpc	r1, r20
    2e58:	05 06       	cpc	r0, r21
    2e5a:	08 95       	ret

00002e5c <__fp_round>:
    2e5c:	09 2e       	mov	r0, r25
    2e5e:	03 94       	inc	r0
    2e60:	00 0c       	add	r0, r0
    2e62:	11 f4       	brne	.+4      	; 0x2e68 <__fp_round+0xc>
    2e64:	88 23       	and	r24, r24
    2e66:	52 f0       	brmi	.+20     	; 0x2e7c <__fp_round+0x20>
    2e68:	bb 0f       	add	r27, r27
    2e6a:	40 f4       	brcc	.+16     	; 0x2e7c <__fp_round+0x20>
    2e6c:	bf 2b       	or	r27, r31
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <__fp_round+0x18>
    2e70:	60 ff       	sbrs	r22, 0
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <__fp_round+0x20>
    2e74:	6f 5f       	subi	r22, 0xFF	; 255
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	08 95       	ret

00002e7e <__fp_split3>:
    2e7e:	57 fd       	sbrc	r21, 7
    2e80:	90 58       	subi	r25, 0x80	; 128
    2e82:	44 0f       	add	r20, r20
    2e84:	55 1f       	adc	r21, r21
    2e86:	59 f0       	breq	.+22     	; 0x2e9e <__fp_splitA+0x10>
    2e88:	5f 3f       	cpi	r21, 0xFF	; 255
    2e8a:	71 f0       	breq	.+28     	; 0x2ea8 <__fp_splitA+0x1a>
    2e8c:	47 95       	ror	r20

00002e8e <__fp_splitA>:
    2e8e:	88 0f       	add	r24, r24
    2e90:	97 fb       	bst	r25, 7
    2e92:	99 1f       	adc	r25, r25
    2e94:	61 f0       	breq	.+24     	; 0x2eae <__fp_splitA+0x20>
    2e96:	9f 3f       	cpi	r25, 0xFF	; 255
    2e98:	79 f0       	breq	.+30     	; 0x2eb8 <__fp_splitA+0x2a>
    2e9a:	87 95       	ror	r24
    2e9c:	08 95       	ret
    2e9e:	12 16       	cp	r1, r18
    2ea0:	13 06       	cpc	r1, r19
    2ea2:	14 06       	cpc	r1, r20
    2ea4:	55 1f       	adc	r21, r21
    2ea6:	f2 cf       	rjmp	.-28     	; 0x2e8c <__fp_split3+0xe>
    2ea8:	46 95       	lsr	r20
    2eaa:	f1 df       	rcall	.-30     	; 0x2e8e <__fp_splitA>
    2eac:	08 c0       	rjmp	.+16     	; 0x2ebe <__fp_splitA+0x30>
    2eae:	16 16       	cp	r1, r22
    2eb0:	17 06       	cpc	r1, r23
    2eb2:	18 06       	cpc	r1, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	f1 cf       	rjmp	.-30     	; 0x2e9a <__fp_splitA+0xc>
    2eb8:	86 95       	lsr	r24
    2eba:	71 05       	cpc	r23, r1
    2ebc:	61 05       	cpc	r22, r1
    2ebe:	08 94       	sec
    2ec0:	08 95       	ret

00002ec2 <__fp_zero>:
    2ec2:	e8 94       	clt

00002ec4 <__fp_szero>:
    2ec4:	bb 27       	eor	r27, r27
    2ec6:	66 27       	eor	r22, r22
    2ec8:	77 27       	eor	r23, r23
    2eca:	cb 01       	movw	r24, r22
    2ecc:	97 f9       	bld	r25, 7
    2ece:	08 95       	ret

00002ed0 <__divmodhi4>:
    2ed0:	97 fb       	bst	r25, 7
    2ed2:	07 2e       	mov	r0, r23
    2ed4:	16 f4       	brtc	.+4      	; 0x2eda <__divmodhi4+0xa>
    2ed6:	00 94       	com	r0
    2ed8:	06 d0       	rcall	.+12     	; 0x2ee6 <__divmodhi4_neg1>
    2eda:	77 fd       	sbrc	r23, 7
    2edc:	08 d0       	rcall	.+16     	; 0x2eee <__divmodhi4_neg2>
    2ede:	0b d0       	rcall	.+22     	; 0x2ef6 <__udivmodhi4>
    2ee0:	07 fc       	sbrc	r0, 7
    2ee2:	05 d0       	rcall	.+10     	; 0x2eee <__divmodhi4_neg2>
    2ee4:	3e f4       	brtc	.+14     	; 0x2ef4 <__divmodhi4_exit>

00002ee6 <__divmodhi4_neg1>:
    2ee6:	90 95       	com	r25
    2ee8:	81 95       	neg	r24
    2eea:	9f 4f       	sbci	r25, 0xFF	; 255
    2eec:	08 95       	ret

00002eee <__divmodhi4_neg2>:
    2eee:	70 95       	com	r23
    2ef0:	61 95       	neg	r22
    2ef2:	7f 4f       	sbci	r23, 0xFF	; 255

00002ef4 <__divmodhi4_exit>:
    2ef4:	08 95       	ret

00002ef6 <__udivmodhi4>:
    2ef6:	aa 1b       	sub	r26, r26
    2ef8:	bb 1b       	sub	r27, r27
    2efa:	51 e1       	ldi	r21, 0x11	; 17
    2efc:	07 c0       	rjmp	.+14     	; 0x2f0c <__udivmodhi4_ep>

00002efe <__udivmodhi4_loop>:
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	a6 17       	cp	r26, r22
    2f04:	b7 07       	cpc	r27, r23
    2f06:	10 f0       	brcs	.+4      	; 0x2f0c <__udivmodhi4_ep>
    2f08:	a6 1b       	sub	r26, r22
    2f0a:	b7 0b       	sbc	r27, r23

00002f0c <__udivmodhi4_ep>:
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	5a 95       	dec	r21
    2f12:	a9 f7       	brne	.-22     	; 0x2efe <__udivmodhi4_loop>
    2f14:	80 95       	com	r24
    2f16:	90 95       	com	r25
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	08 95       	ret

00002f1e <_exit>:
    2f1e:	f8 94       	cli

00002f20 <__stop_program>:
    2f20:	ff cf       	rjmp	.-2      	; 0x2f20 <__stop_program>
