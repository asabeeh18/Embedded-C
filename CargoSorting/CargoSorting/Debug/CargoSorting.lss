
CargoSorting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000329c  00003330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000329c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800208  00800208  00003338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003bc9  00000000  00000000  000036f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048a  00000000  00000000  000072c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a50  00000000  00000000  0000774b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009bc  00000000  00000000  0000a19c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008aa  00000000  00000000  0000ab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022be  00000000  00000000  0000b402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	19 c3       	rjmp	.+1586   	; 0x638 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	02 c4       	rjmp	.+2052   	; 0x81a <__vector_5>
      16:	00 00       	nop
      18:	db c3       	rjmp	.+1974   	; 0x7d0 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e9       	ldi	r30, 0x9C	; 156
      fc:	f2 e3       	ldi	r31, 0x32	; 50
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 37       	cpi	r26, 0x77	; 119
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <main>
     122:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_cursor>:
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	69 f0       	breq	.+26     	; 0x28c <lcd_cursor+0x1e>
     272:	18 f4       	brcc	.+6      	; 0x27a <lcd_cursor+0xc>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	31 f0       	breq	.+12     	; 0x284 <lcd_cursor+0x16>
     278:	08 95       	ret
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	59 f0       	breq	.+22     	; 0x294 <lcd_cursor+0x26>
     27e:	84 30       	cpi	r24, 0x04	; 4
     280:	69 f0       	breq	.+26     	; 0x29c <lcd_cursor+0x2e>
     282:	08 95       	ret
     284:	8f e7       	ldi	r24, 0x7F	; 127
     286:	86 0f       	add	r24, r22
     288:	94 cf       	rjmp	.-216    	; 0x1b2 <lcd_wr_command>
     28a:	08 95       	ret
     28c:	8f eb       	ldi	r24, 0xBF	; 191
     28e:	86 0f       	add	r24, r22
     290:	90 cf       	rjmp	.-224    	; 0x1b2 <lcd_wr_command>
     292:	08 95       	ret
     294:	83 e9       	ldi	r24, 0x93	; 147
     296:	86 0f       	add	r24, r22
     298:	8c cf       	rjmp	.-232    	; 0x1b2 <lcd_wr_command>
     29a:	08 95       	ret
     29c:	83 ed       	ldi	r24, 0xD3	; 211
     29e:	86 0f       	add	r24, r22
     2a0:	88 cf       	rjmp	.-240    	; 0x1b2 <lcd_wr_command>
     2a2:	08 95       	ret

000002a4 <lcd_print>:
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	8a 01       	movw	r16, r20
     2ae:	e9 01       	movw	r28, r18
     2b0:	88 23       	and	r24, r24
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <lcd_print+0x14>
     2b4:	61 11       	cpse	r22, r1
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <lcd_print+0x18>
     2b8:	d7 df       	rcall	.-82     	; 0x268 <lcd_home>
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <lcd_print+0x1a>
     2bc:	d8 df       	rcall	.-80     	; 0x26e <lcd_cursor>
     2be:	c5 30       	cpi	r28, 0x05	; 5
     2c0:	d1 05       	cpc	r29, r1
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <lcd_print+0x22>
     2c4:	d5 c0       	rjmp	.+426    	; 0x470 <lcd_print+0x1cc>
     2c6:	98 01       	movw	r18, r16
     2c8:	32 95       	swap	r19
     2ca:	22 95       	swap	r18
     2cc:	2f 70       	andi	r18, 0x0F	; 15
     2ce:	23 27       	eor	r18, r19
     2d0:	3f 70       	andi	r19, 0x0F	; 15
     2d2:	23 27       	eor	r18, r19
     2d4:	a7 e4       	ldi	r26, 0x47	; 71
     2d6:	b3 e0       	ldi	r27, 0x03	; 3
     2d8:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     2dc:	96 95       	lsr	r25
     2de:	87 95       	ror	r24
     2e0:	96 95       	lsr	r25
     2e2:	87 95       	ror	r24
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	c0 96       	adiw	r24, 0x30	; 48
     2ea:	90 93 31 02 	sts	0x0231, r25
     2ee:	80 93 30 02 	sts	0x0230, r24
     2f2:	95 df       	rcall	.-214    	; 0x21e <lcd_wr_char>
     2f4:	98 01       	movw	r18, r16
     2f6:	36 95       	lsr	r19
     2f8:	27 95       	ror	r18
     2fa:	36 95       	lsr	r19
     2fc:	27 95       	ror	r18
     2fe:	36 95       	lsr	r19
     300:	27 95       	ror	r18
     302:	a5 ec       	ldi	r26, 0xC5	; 197
     304:	b0 e2       	ldi	r27, 0x20	; 32
     306:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     30a:	ac 01       	movw	r20, r24
     30c:	52 95       	swap	r21
     30e:	42 95       	swap	r20
     310:	4f 70       	andi	r20, 0x0F	; 15
     312:	45 27       	eor	r20, r21
     314:	5f 70       	andi	r21, 0x0F	; 15
     316:	45 27       	eor	r20, r21
     318:	50 93 35 02 	sts	0x0235, r21
     31c:	40 93 34 02 	sts	0x0234, r20
     320:	9a 01       	movw	r18, r20
     322:	ad ec       	ldi	r26, 0xCD	; 205
     324:	bc ec       	ldi	r27, 0xCC	; 204
     326:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	9c 01       	movw	r18, r24
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	48 1b       	sub	r20, r24
     34e:	59 0b       	sbc	r21, r25
     350:	ca 01       	movw	r24, r20
     352:	c0 96       	adiw	r24, 0x30	; 48
     354:	90 93 76 02 	sts	0x0276, r25
     358:	80 93 75 02 	sts	0x0275, r24
     35c:	60 df       	rcall	.-320    	; 0x21e <lcd_wr_char>
     35e:	04 c0       	rjmp	.+8      	; 0x368 <lcd_print+0xc4>
     360:	c3 30       	cpi	r28, 0x03	; 3
     362:	d1 05       	cpc	r29, r1
     364:	09 f0       	breq	.+2      	; 0x368 <lcd_print+0xc4>
     366:	89 c0       	rjmp	.+274    	; 0x47a <lcd_print+0x1d6>
     368:	98 01       	movw	r18, r16
     36a:	36 95       	lsr	r19
     36c:	27 95       	ror	r18
     36e:	36 95       	lsr	r19
     370:	27 95       	ror	r18
     372:	ab e7       	ldi	r26, 0x7B	; 123
     374:	b4 e1       	ldi	r27, 0x14	; 20
     376:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     37a:	ac 01       	movw	r20, r24
     37c:	56 95       	lsr	r21
     37e:	47 95       	ror	r20
     380:	50 93 35 02 	sts	0x0235, r21
     384:	40 93 34 02 	sts	0x0234, r20
     388:	9a 01       	movw	r18, r20
     38a:	ad ec       	ldi	r26, 0xCD	; 205
     38c:	bc ec       	ldi	r27, 0xCC	; 204
     38e:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     392:	96 95       	lsr	r25
     394:	87 95       	ror	r24
     396:	96 95       	lsr	r25
     398:	87 95       	ror	r24
     39a:	96 95       	lsr	r25
     39c:	87 95       	ror	r24
     39e:	9c 01       	movw	r18, r24
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	82 0f       	add	r24, r18
     3b2:	93 1f       	adc	r25, r19
     3b4:	48 1b       	sub	r20, r24
     3b6:	59 0b       	sbc	r21, r25
     3b8:	ca 01       	movw	r24, r20
     3ba:	c0 96       	adiw	r24, 0x30	; 48
     3bc:	90 93 6c 02 	sts	0x026C, r25
     3c0:	80 93 6b 02 	sts	0x026B, r24
     3c4:	2c df       	rcall	.-424    	; 0x21e <lcd_wr_char>
     3c6:	98 01       	movw	r18, r16
     3c8:	ad ec       	ldi	r26, 0xCD	; 205
     3ca:	bc ec       	ldi	r27, 0xCC	; 204
     3cc:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     3d0:	ac 01       	movw	r20, r24
     3d2:	56 95       	lsr	r21
     3d4:	47 95       	ror	r20
     3d6:	56 95       	lsr	r21
     3d8:	47 95       	ror	r20
     3da:	56 95       	lsr	r21
     3dc:	47 95       	ror	r20
     3de:	50 93 35 02 	sts	0x0235, r21
     3e2:	40 93 34 02 	sts	0x0234, r20
     3e6:	9a 01       	movw	r18, r20
     3e8:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     3ec:	96 95       	lsr	r25
     3ee:	87 95       	ror	r24
     3f0:	96 95       	lsr	r25
     3f2:	87 95       	ror	r24
     3f4:	96 95       	lsr	r25
     3f6:	87 95       	ror	r24
     3f8:	9c 01       	movw	r18, r24
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	82 0f       	add	r24, r18
     40c:	93 1f       	adc	r25, r19
     40e:	48 1b       	sub	r20, r24
     410:	59 0b       	sbc	r21, r25
     412:	ca 01       	movw	r24, r20
     414:	c0 96       	adiw	r24, 0x30	; 48
     416:	90 93 46 02 	sts	0x0246, r25
     41a:	80 93 45 02 	sts	0x0245, r24
     41e:	ff de       	rcall	.-514    	; 0x21e <lcd_wr_char>
     420:	03 c0       	rjmp	.+6      	; 0x428 <lcd_print+0x184>
     422:	c1 30       	cpi	r28, 0x01	; 1
     424:	d1 05       	cpc	r29, r1
     426:	f9 f4       	brne	.+62     	; 0x466 <lcd_print+0x1c2>
     428:	98 01       	movw	r18, r16
     42a:	ad ec       	ldi	r26, 0xCD	; 205
     42c:	bc ec       	ldi	r27, 0xCC	; 204
     42e:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	96 95       	lsr	r25
     438:	87 95       	ror	r24
     43a:	96 95       	lsr	r25
     43c:	87 95       	ror	r24
     43e:	9c 01       	movw	r18, r24
     440:	22 0f       	add	r18, r18
     442:	33 1f       	adc	r19, r19
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	82 0f       	add	r24, r18
     452:	93 1f       	adc	r25, r19
     454:	08 1b       	sub	r16, r24
     456:	19 0b       	sbc	r17, r25
     458:	c8 01       	movw	r24, r16
     45a:	c0 96       	adiw	r24, 0x30	; 48
     45c:	90 93 74 02 	sts	0x0274, r25
     460:	80 93 73 02 	sts	0x0273, r24
     464:	dc de       	rcall	.-584    	; 0x21e <lcd_wr_char>
     466:	26 97       	sbiw	r28, 0x06	; 6
     468:	64 f0       	brlt	.+24     	; 0x482 <lcd_print+0x1de>
     46a:	85 e4       	ldi	r24, 0x45	; 69
     46c:	d8 de       	rcall	.-592    	; 0x21e <lcd_wr_char>
     46e:	09 c0       	rjmp	.+18     	; 0x482 <lcd_print+0x1de>
     470:	c4 30       	cpi	r28, 0x04	; 4
     472:	d1 05       	cpc	r29, r1
     474:	09 f0       	breq	.+2      	; 0x478 <lcd_print+0x1d4>
     476:	74 cf       	rjmp	.-280    	; 0x360 <lcd_print+0xbc>
     478:	3d cf       	rjmp	.-390    	; 0x2f4 <lcd_print+0x50>
     47a:	c2 30       	cpi	r28, 0x02	; 2
     47c:	d1 05       	cpc	r29, r1
     47e:	89 f6       	brne	.-94     	; 0x422 <lcd_print+0x17e>
     480:	a2 cf       	rjmp	.-188    	; 0x3c6 <lcd_print+0x122>
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <timer5_init>:
     48c:	e1 e2       	ldi	r30, 0x21	; 33
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	10 82       	st	Z, r1
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	80 93 25 01 	sts	0x0125, r24
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	90 93 24 01 	sts	0x0124, r25
     49e:	10 92 29 01 	sts	0x0129, r1
     4a2:	80 93 28 01 	sts	0x0128, r24
     4a6:	10 92 2b 01 	sts	0x012B, r1
     4aa:	80 93 2a 01 	sts	0x012A, r24
     4ae:	10 92 2d 01 	sts	0x012D, r1
     4b2:	80 93 2c 01 	sts	0x012C, r24
     4b6:	89 ea       	ldi	r24, 0xA9	; 169
     4b8:	80 93 20 01 	sts	0x0120, r24
     4bc:	8b e0       	ldi	r24, 0x0B	; 11
     4be:	80 83       	st	Z, r24
     4c0:	08 95       	ret

000004c2 <motion_pin_config>:
     4c2:	81 b1       	in	r24, 0x01	; 1
     4c4:	8f 60       	ori	r24, 0x0F	; 15
     4c6:	81 b9       	out	0x01, r24	; 1
     4c8:	82 b1       	in	r24, 0x02	; 2
     4ca:	80 7f       	andi	r24, 0xF0	; 240
     4cc:	82 b9       	out	0x02, r24	; 2
     4ce:	ea e0       	ldi	r30, 0x0A	; 10
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	80 81       	ld	r24, Z
     4d4:	88 61       	ori	r24, 0x18	; 24
     4d6:	80 83       	st	Z, r24
     4d8:	eb e0       	ldi	r30, 0x0B	; 11
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	80 81       	ld	r24, Z
     4de:	88 61       	ori	r24, 0x18	; 24
     4e0:	80 83       	st	Z, r24
     4e2:	08 95       	ret

000004e4 <motion_set>:
     4e4:	92 b1       	in	r25, 0x02	; 2
     4e6:	90 7f       	andi	r25, 0xF0	; 240
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	98 2b       	or	r25, r24
     4ec:	92 b9       	out	0x02, r25	; 2
     4ee:	08 95       	ret

000004f0 <forward>:
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	f8 cf       	rjmp	.-16     	; 0x4e4 <motion_set>
     4f4:	08 95       	ret

000004f6 <back>:
     4f6:	89 e0       	ldi	r24, 0x09	; 9
     4f8:	f5 cf       	rjmp	.-22     	; 0x4e4 <motion_set>
     4fa:	08 95       	ret

000004fc <left>:
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	f2 cf       	rjmp	.-28     	; 0x4e4 <motion_set>
     500:	08 95       	ret

00000502 <right>:
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	ef cf       	rjmp	.-34     	; 0x4e4 <motion_set>
     506:	08 95       	ret

00000508 <soft_left>:
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	ec cf       	rjmp	.-40     	; 0x4e4 <motion_set>
     50c:	08 95       	ret

0000050e <soft_right>:
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	e9 cf       	rjmp	.-46     	; 0x4e4 <motion_set>
     512:	08 95       	ret

00000514 <soft_left_2>:
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	e6 cf       	rjmp	.-52     	; 0x4e4 <motion_set>
     518:	08 95       	ret

0000051a <soft_right_2>:
     51a:	88 e0       	ldi	r24, 0x08	; 8
     51c:	e3 cf       	rjmp	.-58     	; 0x4e4 <motion_set>
     51e:	08 95       	ret

00000520 <stop>:
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	e0 cf       	rjmp	.-64     	; 0x4e4 <motion_set>
     524:	08 95       	ret

00000526 <lcd_port_config>:
     526:	87 b1       	in	r24, 0x07	; 7
     528:	87 6f       	ori	r24, 0xF7	; 247
     52a:	87 b9       	out	0x07, r24	; 7
     52c:	88 b1       	in	r24, 0x08	; 8
     52e:	80 78       	andi	r24, 0x80	; 128
     530:	88 b9       	out	0x08, r24	; 8
     532:	08 95       	ret

00000534 <color_sensor_pin_config>:
     534:	8a b1       	in	r24, 0x0a	; 10
     536:	8e 6f       	ori	r24, 0xFE	; 254
     538:	8a b9       	out	0x0a, r24	; 10
     53a:	58 9a       	sbi	0x0b, 0	; 11
     53c:	08 95       	ret

0000053e <servo_1_free>:
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	80 93 89 00 	sts	0x0089, r24
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	80 93 88 00 	sts	0x0088, r24
     54a:	08 95       	ret

0000054c <servo_2_free>:
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	80 93 8b 00 	sts	0x008B, r24
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	80 93 8a 00 	sts	0x008A, r24
     558:	08 95       	ret

0000055a <servo_3_free>:
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	80 93 8d 00 	sts	0x008D, r24
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	80 93 8c 00 	sts	0x008C, r24
     566:	08 95       	ret

00000568 <adc_pin_config>:
     568:	10 ba       	out	0x10, r1	; 16
     56a:	11 ba       	out	0x11, r1	; 17
     56c:	10 92 07 01 	sts	0x0107, r1
     570:	10 92 08 01 	sts	0x0108, r1
     574:	08 95       	ret

00000576 <servo1_pin_config>:
     576:	25 9a       	sbi	0x04, 5	; 4
     578:	2d 9a       	sbi	0x05, 5	; 5
     57a:	08 95       	ret

0000057c <servo2_pin_config>:
     57c:	26 9a       	sbi	0x04, 6	; 4
     57e:	2e 9a       	sbi	0x05, 6	; 5
     580:	08 95       	ret

00000582 <servo3_pin_config>:
     582:	27 9a       	sbi	0x04, 7	; 4
     584:	2f 9a       	sbi	0x05, 7	; 5
     586:	08 95       	ret

00000588 <timer1_init>:
     588:	e1 e8       	ldi	r30, 0x81	; 129
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	10 82       	st	Z, r1
     58e:	8c ef       	ldi	r24, 0xFC	; 252
     590:	80 93 85 00 	sts	0x0085, r24
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 84 00 	sts	0x0084, r24
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	90 93 89 00 	sts	0x0089, r25
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	80 93 88 00 	sts	0x0088, r24
     5a6:	90 93 8b 00 	sts	0x008B, r25
     5aa:	80 93 8a 00 	sts	0x008A, r24
     5ae:	90 93 8d 00 	sts	0x008D, r25
     5b2:	80 93 8c 00 	sts	0x008C, r24
     5b6:	90 93 87 00 	sts	0x0087, r25
     5ba:	80 93 86 00 	sts	0x0086, r24
     5be:	8b ea       	ldi	r24, 0xAB	; 171
     5c0:	80 93 80 00 	sts	0x0080, r24
     5c4:	10 92 82 00 	sts	0x0082, r1
     5c8:	8c e0       	ldi	r24, 0x0C	; 12
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret

000005ce <port_init>:
     5ce:	ab df       	rcall	.-170    	; 0x526 <lcd_port_config>
     5d0:	cb df       	rcall	.-106    	; 0x568 <adc_pin_config>
     5d2:	3b 9a       	sbi	0x07, 3	; 7
     5d4:	43 98       	cbi	0x08, 3	; 8
     5d6:	cf df       	rcall	.-98     	; 0x576 <servo1_pin_config>
     5d8:	d1 df       	rcall	.-94     	; 0x57c <servo2_pin_config>
     5da:	d3 df       	rcall	.-90     	; 0x582 <servo3_pin_config>
     5dc:	ab cf       	rjmp	.-170    	; 0x534 <color_sensor_pin_config>
     5de:	08 95       	ret

000005e0 <buzzer_on>:
     5e0:	86 b1       	in	r24, 0x06	; 6
     5e2:	88 60       	ori	r24, 0x08	; 8
     5e4:	88 b9       	out	0x08, r24	; 8
     5e6:	08 95       	ret

000005e8 <buzzer_off>:
     5e8:	86 b1       	in	r24, 0x06	; 6
     5ea:	87 7f       	andi	r24, 0xF7	; 247
     5ec:	88 b9       	out	0x08, r24	; 8
     5ee:	08 95       	ret

000005f0 <ADC_Conversion>:
     5f0:	88 30       	cpi	r24, 0x08	; 8
     5f2:	18 f0       	brcs	.+6      	; 0x5fa <ADC_Conversion+0xa>
     5f4:	98 e0       	ldi	r25, 0x08	; 8
     5f6:	90 93 7b 00 	sts	0x007B, r25
     5fa:	87 70       	andi	r24, 0x07	; 7
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	80 93 7c 00 	sts	0x007C, r24
     602:	ea e7       	ldi	r30, 0x7A	; 122
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	80 64       	ori	r24, 0x40	; 64
     60a:	80 83       	st	Z, r24
     60c:	80 81       	ld	r24, Z
     60e:	84 ff       	sbrs	r24, 4
     610:	fd cf       	rjmp	.-6      	; 0x60c <ADC_Conversion+0x1c>
     612:	80 91 79 00 	lds	r24, 0x0079
     616:	ea e7       	ldi	r30, 0x7A	; 122
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	90 81       	ld	r25, Z
     61c:	90 61       	ori	r25, 0x10	; 16
     61e:	90 83       	st	Z, r25
     620:	10 92 7b 00 	sts	0x007B, r1
     624:	08 95       	ret

00000626 <color_sensor_pin_interrupt_init>:
     626:	f8 94       	cli
     628:	e9 e6       	ldi	r30, 0x69	; 105
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	82 60       	ori	r24, 0x02	; 2
     630:	80 83       	st	Z, r24
     632:	e8 9a       	sbi	0x1d, 0	; 29
     634:	78 94       	sei
     636:	08 95       	ret

00000638 <__vector_1>:
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	8f 93       	push	r24
     644:	9f 93       	push	r25
     646:	af 93       	push	r26
     648:	bf 93       	push	r27
     64a:	80 91 14 02 	lds	r24, 0x0214
     64e:	90 91 15 02 	lds	r25, 0x0215
     652:	a0 91 16 02 	lds	r26, 0x0216
     656:	b0 91 17 02 	lds	r27, 0x0217
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	a1 1d       	adc	r26, r1
     65e:	b1 1d       	adc	r27, r1
     660:	80 93 14 02 	sts	0x0214, r24
     664:	90 93 15 02 	sts	0x0215, r25
     668:	a0 93 16 02 	sts	0x0216, r26
     66c:	b0 93 17 02 	sts	0x0217, r27
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	1f 90       	pop	r1
     680:	18 95       	reti

00000682 <adc_init>:
     682:	ea e7       	ldi	r30, 0x7A	; 122
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	10 82       	st	Z, r1
     688:	10 92 7b 00 	sts	0x007B, r1
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	80 93 7c 00 	sts	0x007C, r24
     692:	80 e8       	ldi	r24, 0x80	; 128
     694:	80 bf       	out	0x30, r24	; 48
     696:	86 e8       	ldi	r24, 0x86	; 134
     698:	80 83       	st	Z, r24
     69a:	08 95       	ret

0000069c <filter_red>:
     69c:	5e 98       	cbi	0x0b, 6	; 11
     69e:	5f 98       	cbi	0x0b, 7	; 11
     6a0:	08 95       	ret

000006a2 <filter_green>:
     6a2:	5e 9a       	sbi	0x0b, 6	; 11
     6a4:	5f 9a       	sbi	0x0b, 7	; 11
     6a6:	08 95       	ret

000006a8 <filter_blue>:
     6a8:	5e 98       	cbi	0x0b, 6	; 11
     6aa:	5f 9a       	sbi	0x0b, 7	; 11
     6ac:	08 95       	ret

000006ae <color_sensor_scaling>:
     6ae:	5c 9a       	sbi	0x0b, 4	; 11
     6b0:	5d 9a       	sbi	0x0b, 5	; 11
     6b2:	08 95       	ret

000006b4 <red_read>:
     6b4:	f3 df       	rcall	.-26     	; 0x69c <filter_red>
     6b6:	10 92 14 02 	sts	0x0214, r1
     6ba:	10 92 15 02 	sts	0x0215, r1
     6be:	10 92 16 02 	sts	0x0216, r1
     6c2:	10 92 17 02 	sts	0x0217, r1
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	8f e7       	ldi	r24, 0x7F	; 127
     6ca:	94 e0       	ldi	r25, 0x04	; 4
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <red_read+0x18>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <red_read+0x22>
     6d6:	00 00       	nop
     6d8:	80 91 14 02 	lds	r24, 0x0214
     6dc:	90 91 15 02 	lds	r25, 0x0215
     6e0:	a0 91 16 02 	lds	r26, 0x0216
     6e4:	b0 91 17 02 	lds	r27, 0x0217
     6e8:	80 93 3a 02 	sts	0x023A, r24
     6ec:	90 93 3b 02 	sts	0x023B, r25
     6f0:	a0 93 3c 02 	sts	0x023C, r26
     6f4:	b0 93 3d 02 	sts	0x023D, r27
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	9c e2       	ldi	r25, 0x2C	; 44
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <red_read+0x4a>
     706:	00 c0       	rjmp	.+0      	; 0x708 <red_read+0x54>
     708:	00 00       	nop
     70a:	08 95       	ret

0000070c <green_read>:
     70c:	ca df       	rcall	.-108    	; 0x6a2 <filter_green>
     70e:	10 92 14 02 	sts	0x0214, r1
     712:	10 92 15 02 	sts	0x0215, r1
     716:	10 92 16 02 	sts	0x0216, r1
     71a:	10 92 17 02 	sts	0x0217, r1
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	8f e7       	ldi	r24, 0x7F	; 127
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	21 50       	subi	r18, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <green_read+0x18>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <green_read+0x22>
     72e:	00 00       	nop
     730:	80 91 14 02 	lds	r24, 0x0214
     734:	90 91 15 02 	lds	r25, 0x0215
     738:	a0 91 16 02 	lds	r26, 0x0216
     73c:	b0 91 17 02 	lds	r27, 0x0217
     740:	80 93 36 02 	sts	0x0236, r24
     744:	90 93 37 02 	sts	0x0237, r25
     748:	a0 93 38 02 	sts	0x0238, r26
     74c:	b0 93 39 02 	sts	0x0239, r27
     750:	08 95       	ret

00000752 <blue_read>:
     752:	aa df       	rcall	.-172    	; 0x6a8 <filter_blue>
     754:	10 92 14 02 	sts	0x0214, r1
     758:	10 92 15 02 	sts	0x0215, r1
     75c:	10 92 16 02 	sts	0x0216, r1
     760:	10 92 17 02 	sts	0x0217, r1
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	8f e7       	ldi	r24, 0x7F	; 127
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <blue_read+0x18>
     772:	00 c0       	rjmp	.+0      	; 0x774 <blue_read+0x22>
     774:	00 00       	nop
     776:	80 91 14 02 	lds	r24, 0x0214
     77a:	90 91 15 02 	lds	r25, 0x0215
     77e:	a0 91 16 02 	lds	r26, 0x0216
     782:	b0 91 17 02 	lds	r27, 0x0217
     786:	80 93 2a 02 	sts	0x022A, r24
     78a:	90 93 2b 02 	sts	0x022B, r25
     78e:	a0 93 2c 02 	sts	0x022C, r26
     792:	b0 93 2d 02 	sts	0x022D, r27
     796:	08 95       	ret

00000798 <left_encoder_pin_config>:
     798:	6c 98       	cbi	0x0d, 4	; 13
     79a:	74 9a       	sbi	0x0e, 4	; 14
     79c:	08 95       	ret

0000079e <right_encoder_pin_config>:
     79e:	6d 98       	cbi	0x0d, 5	; 13
     7a0:	75 9a       	sbi	0x0e, 5	; 14
     7a2:	08 95       	ret

000007a4 <port_init_poz>:
     7a4:	8e de       	rcall	.-740    	; 0x4c2 <motion_pin_config>
     7a6:	f8 df       	rcall	.-16     	; 0x798 <left_encoder_pin_config>
     7a8:	fa cf       	rjmp	.-12     	; 0x79e <right_encoder_pin_config>
     7aa:	08 95       	ret

000007ac <left_position_encoder_interrupt_init>:
     7ac:	f8 94       	cli
     7ae:	ea e6       	ldi	r30, 0x6A	; 106
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	82 60       	ori	r24, 0x02	; 2
     7b6:	80 83       	st	Z, r24
     7b8:	ec 9a       	sbi	0x1d, 4	; 29
     7ba:	78 94       	sei
     7bc:	08 95       	ret

000007be <right_position_encoder_interrupt_init>:
     7be:	f8 94       	cli
     7c0:	ea e6       	ldi	r30, 0x6A	; 106
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	88 60       	ori	r24, 0x08	; 8
     7c8:	80 83       	st	Z, r24
     7ca:	ed 9a       	sbi	0x1d, 5	; 29
     7cc:	78 94       	sei
     7ce:	08 95       	ret

000007d0 <__vector_6>:
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	80 91 18 02 	lds	r24, 0x0218
     7e6:	90 91 19 02 	lds	r25, 0x0219
     7ea:	a0 91 1a 02 	lds	r26, 0x021A
     7ee:	b0 91 1b 02 	lds	r27, 0x021B
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	a1 1d       	adc	r26, r1
     7f6:	b1 1d       	adc	r27, r1
     7f8:	80 93 18 02 	sts	0x0218, r24
     7fc:	90 93 19 02 	sts	0x0219, r25
     800:	a0 93 1a 02 	sts	0x021A, r26
     804:	b0 93 1b 02 	sts	0x021B, r27
     808:	bf 91       	pop	r27
     80a:	af 91       	pop	r26
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_5>:
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	80 91 1c 02 	lds	r24, 0x021C
     830:	90 91 1d 02 	lds	r25, 0x021D
     834:	a0 91 1e 02 	lds	r26, 0x021E
     838:	b0 91 1f 02 	lds	r27, 0x021F
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	a1 1d       	adc	r26, r1
     840:	b1 1d       	adc	r27, r1
     842:	80 93 1c 02 	sts	0x021C, r24
     846:	90 93 1d 02 	sts	0x021D, r25
     84a:	a0 93 1e 02 	sts	0x021E, r26
     84e:	b0 93 1f 02 	sts	0x021F, r27
     852:	bf 91       	pop	r27
     854:	af 91       	pop	r26
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <angle_rotate>:
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	bc 01       	movw	r22, r24
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 88 18 	call	0x3110	; 0x3110 <__floatunsisf>
     87a:	28 e4       	ldi	r18, 0x48	; 72
     87c:	31 ee       	ldi	r19, 0xE1	; 225
     87e:	42 e8       	ldi	r20, 0x82	; 130
     880:	50 e4       	ldi	r21, 0x40	; 64
     882:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__divsf3>
     886:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__fixunssfsi>
     88a:	cb 01       	movw	r24, r22
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	10 92 18 02 	sts	0x0218, r1
     894:	10 92 19 02 	sts	0x0219, r1
     898:	10 92 1a 02 	sts	0x021A, r1
     89c:	10 92 1b 02 	sts	0x021B, r1
     8a0:	10 92 1c 02 	sts	0x021C, r1
     8a4:	10 92 1d 02 	sts	0x021D, r1
     8a8:	10 92 1e 02 	sts	0x021E, r1
     8ac:	10 92 1f 02 	sts	0x021F, r1
     8b0:	51 e0       	ldi	r21, 0x01	; 1
     8b2:	e0 e0       	ldi	r30, 0x00	; 0
     8b4:	c0 90 18 02 	lds	r12, 0x0218
     8b8:	d0 90 19 02 	lds	r13, 0x0219
     8bc:	e0 90 1a 02 	lds	r14, 0x021A
     8c0:	f0 90 1b 02 	lds	r15, 0x021B
     8c4:	00 91 1c 02 	lds	r16, 0x021C
     8c8:	10 91 1d 02 	lds	r17, 0x021D
     8cc:	20 91 1e 02 	lds	r18, 0x021E
     8d0:	30 91 1f 02 	lds	r19, 0x021F
     8d4:	45 2f       	mov	r20, r21
     8d6:	08 17       	cp	r16, r24
     8d8:	19 07       	cpc	r17, r25
     8da:	2a 07       	cpc	r18, r26
     8dc:	3b 07       	cpc	r19, r27
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <angle_rotate+0x7e>
     8e0:	4e 2f       	mov	r20, r30
     8e2:	41 11       	cpse	r20, r1
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <angle_rotate+0x94>
     8e6:	25 2f       	mov	r18, r21
     8e8:	c8 16       	cp	r12, r24
     8ea:	d9 06       	cpc	r13, r25
     8ec:	ea 06       	cpc	r14, r26
     8ee:	fb 06       	cpc	r15, r27
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <angle_rotate+0x90>
     8f2:	2e 2f       	mov	r18, r30
     8f4:	22 23       	and	r18, r18
     8f6:	f1 f2       	breq	.-68     	; 0x8b4 <angle_rotate+0x50>
     8f8:	13 de       	rcall	.-986    	; 0x520 <stop>
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <linear_distance_mm>:
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	bc 01       	movw	r22, r24
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 88 18 	call	0x3110	; 0x3110 <__floatunsisf>
     916:	25 ee       	ldi	r18, 0xE5	; 229
     918:	30 ed       	ldi	r19, 0xD0	; 208
     91a:	4a ea       	ldi	r20, 0xAA	; 170
     91c:	50 e4       	ldi	r21, 0x40	; 64
     91e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__divsf3>
     922:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__fixunssfsi>
     926:	10 92 18 02 	sts	0x0218, r1
     92a:	10 92 19 02 	sts	0x0219, r1
     92e:	10 92 1a 02 	sts	0x021A, r1
     932:	10 92 1b 02 	sts	0x021B, r1
     936:	00 91 18 02 	lds	r16, 0x0218
     93a:	10 91 19 02 	lds	r17, 0x0219
     93e:	20 91 1a 02 	lds	r18, 0x021A
     942:	30 91 1b 02 	lds	r19, 0x021B
     946:	60 17       	cp	r22, r16
     948:	71 07       	cpc	r23, r17
     94a:	82 07       	cpc	r24, r18
     94c:	93 07       	cpc	r25, r19
     94e:	98 f7       	brcc	.-26     	; 0x936 <linear_distance_mm+0x2e>
     950:	e7 dd       	rcall	.-1074   	; 0x520 <stop>
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <forward_mm>:
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	c8 dd       	rcall	.-1136   	; 0x4f0 <forward>
     960:	ce 01       	movw	r24, r28
     962:	d2 df       	rcall	.-92     	; 0x908 <linear_distance_mm>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <back_mm>:
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
     970:	c2 dd       	rcall	.-1148   	; 0x4f6 <back>
     972:	ce 01       	movw	r24, r28
     974:	c9 df       	rcall	.-110    	; 0x908 <linear_distance_mm>
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <left_degrees>:
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
     982:	bc dd       	rcall	.-1160   	; 0x4fc <left>
     984:	ce 01       	movw	r24, r28
     986:	6e df       	rcall	.-292    	; 0x864 <angle_rotate>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <right_degrees>:
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	ec 01       	movw	r28, r24
     994:	b6 dd       	rcall	.-1172   	; 0x502 <right>
     996:	ce 01       	movw	r24, r28
     998:	65 df       	rcall	.-310    	; 0x864 <angle_rotate>
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <init_devices>:
     9a0:	f8 94       	cli
     9a2:	00 df       	rcall	.-512    	; 0x7a4 <port_init_poz>
     9a4:	03 df       	rcall	.-506    	; 0x7ac <left_position_encoder_interrupt_init>
     9a6:	0b df       	rcall	.-490    	; 0x7be <right_position_encoder_interrupt_init>
     9a8:	12 de       	rcall	.-988    	; 0x5ce <port_init>
     9aa:	3d de       	rcall	.-902    	; 0x626 <color_sensor_pin_interrupt_init>
     9ac:	6a de       	rcall	.-812    	; 0x682 <adc_init>
     9ae:	89 dd       	rcall	.-1262   	; 0x4c2 <motion_pin_config>
     9b0:	6d dd       	rcall	.-1318   	; 0x48c <timer5_init>
     9b2:	ea dd       	rcall	.-1068   	; 0x588 <timer1_init>
     9b4:	78 94       	sei
     9b6:	08 95       	ret

000009b8 <set_color>:
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	1a de       	rcall	.-972    	; 0x5f0 <ADC_Conversion>
     9bc:	80 93 0b 02 	sts	0x020B, r24
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	16 de       	rcall	.-980    	; 0x5f0 <ADC_Conversion>
     9c4:	80 93 0a 02 	sts	0x020A, r24
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	12 de       	rcall	.-988    	; 0x5f0 <ADC_Conversion>
     9cc:	80 93 09 02 	sts	0x0209, r24
     9d0:	08 95       	ret

000009d2 <scan>:
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	6e de       	rcall	.-804    	; 0x6b4 <red_read>
     9d8:	bc de       	rcall	.-648    	; 0x752 <blue_read>
     9da:	98 de       	rcall	.-720    	; 0x70c <green_read>
     9dc:	8b e0       	ldi	r24, 0x0B	; 11
     9de:	08 de       	rcall	.-1008   	; 0x5f0 <ADC_Conversion>
     9e0:	88 33       	cpi	r24, 0x38	; 56
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <scan+0x14>
     9e4:	7b c0       	rjmp	.+246    	; 0xadc <scan+0x10a>
     9e6:	8b e0       	ldi	r24, 0x0B	; 11
     9e8:	03 de       	rcall	.-1018   	; 0x5f0 <ADC_Conversion>
     9ea:	84 36       	cpi	r24, 0x64	; 100
     9ec:	08 f0       	brcs	.+2      	; 0x9f0 <scan+0x1e>
     9ee:	79 c0       	rjmp	.+242    	; 0xae2 <scan+0x110>
     9f0:	80 91 28 02 	lds	r24, 0x0228
     9f4:	90 91 29 02 	lds	r25, 0x0229
     9f8:	aa 27       	eor	r26, r26
     9fa:	97 fd       	sbrc	r25, 7
     9fc:	a0 95       	com	r26
     9fe:	ba 2f       	mov	r27, r26
     a00:	40 91 3a 02 	lds	r20, 0x023A
     a04:	50 91 3b 02 	lds	r21, 0x023B
     a08:	60 91 3c 02 	lds	r22, 0x023C
     a0c:	70 91 3d 02 	lds	r23, 0x023D
     a10:	48 17       	cp	r20, r24
     a12:	59 07       	cpc	r21, r25
     a14:	6a 07       	cpc	r22, r26
     a16:	7b 07       	cpc	r23, r27
     a18:	d8 f4       	brcc	.+54     	; 0xa50 <scan+0x7e>
     a1a:	40 91 36 02 	lds	r20, 0x0236
     a1e:	50 91 37 02 	lds	r21, 0x0237
     a22:	60 91 38 02 	lds	r22, 0x0238
     a26:	70 91 39 02 	lds	r23, 0x0239
     a2a:	48 17       	cp	r20, r24
     a2c:	59 07       	cpc	r21, r25
     a2e:	6a 07       	cpc	r22, r26
     a30:	7b 07       	cpc	r23, r27
     a32:	70 f4       	brcc	.+28     	; 0xa50 <scan+0x7e>
     a34:	40 91 2a 02 	lds	r20, 0x022A
     a38:	50 91 2b 02 	lds	r21, 0x022B
     a3c:	60 91 2c 02 	lds	r22, 0x022C
     a40:	70 91 2d 02 	lds	r23, 0x022D
     a44:	48 17       	cp	r20, r24
     a46:	59 07       	cpc	r21, r25
     a48:	6a 07       	cpc	r22, r26
     a4a:	7b 07       	cpc	r23, r27
     a4c:	08 f4       	brcc	.+2      	; 0xa50 <scan+0x7e>
     a4e:	4c c0       	rjmp	.+152    	; 0xae8 <scan+0x116>
     a50:	40 91 3a 02 	lds	r20, 0x023A
     a54:	50 91 3b 02 	lds	r21, 0x023B
     a58:	60 91 3c 02 	lds	r22, 0x023C
     a5c:	70 91 3d 02 	lds	r23, 0x023D
     a60:	80 91 2a 02 	lds	r24, 0x022A
     a64:	90 91 2b 02 	lds	r25, 0x022B
     a68:	a0 91 2c 02 	lds	r26, 0x022C
     a6c:	b0 91 2d 02 	lds	r27, 0x022D
     a70:	84 17       	cp	r24, r20
     a72:	95 07       	cpc	r25, r21
     a74:	a6 07       	cpc	r26, r22
     a76:	b7 07       	cpc	r27, r23
     a78:	c8 f4       	brcc	.+50     	; 0xaac <scan+0xda>
     a7a:	00 91 3a 02 	lds	r16, 0x023A
     a7e:	10 91 3b 02 	lds	r17, 0x023B
     a82:	20 91 3c 02 	lds	r18, 0x023C
     a86:	30 91 3d 02 	lds	r19, 0x023D
     a8a:	40 91 36 02 	lds	r20, 0x0236
     a8e:	50 91 37 02 	lds	r21, 0x0237
     a92:	60 91 38 02 	lds	r22, 0x0238
     a96:	70 91 39 02 	lds	r23, 0x0239
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	40 17       	cp	r20, r16
     aa0:	51 07       	cpc	r21, r17
     aa2:	62 07       	cpc	r22, r18
     aa4:	73 07       	cpc	r23, r19
     aa6:	28 f5       	brcc	.+74     	; 0xaf2 <scan+0x120>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	23 c0       	rjmp	.+70     	; 0xaf2 <scan+0x120>
     aac:	40 91 2a 02 	lds	r20, 0x022A
     ab0:	50 91 2b 02 	lds	r21, 0x022B
     ab4:	60 91 2c 02 	lds	r22, 0x022C
     ab8:	70 91 2d 02 	lds	r23, 0x022D
     abc:	80 91 36 02 	lds	r24, 0x0236
     ac0:	90 91 37 02 	lds	r25, 0x0237
     ac4:	a0 91 38 02 	lds	r26, 0x0238
     ac8:	b0 91 39 02 	lds	r27, 0x0239
     acc:	84 17       	cp	r24, r20
     ace:	95 07       	cpc	r25, r21
     ad0:	a6 07       	cpc	r26, r22
     ad2:	b7 07       	cpc	r27, r23
     ad4:	60 f4       	brcc	.+24     	; 0xaee <scan+0x11c>
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0b c0       	rjmp	.+22     	; 0xaf2 <scan+0x120>
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	9f ef       	ldi	r25, 0xFF	; 255
     ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <scan+0x120>
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <scan+0x120>
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <scan+0x120>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <lower>:
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	31 f4       	brne	.+12     	; 0xb08 <lower+0x10>
     afc:	10 92 8b 00 	sts	0x008B, r1
     b00:	80 e4       	ldi	r24, 0x40	; 64
     b02:	80 93 8a 00 	sts	0x008A, r24
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <lower+0x1a>
     b08:	10 92 8b 00 	sts	0x008B, r1
     b0c:	83 e6       	ldi	r24, 0x63	; 99
     b0e:	80 93 8a 00 	sts	0x008A, r24
     b12:	2f ef       	ldi	r18, 0xFF	; 255
     b14:	8f e7       	ldi	r24, 0x7F	; 127
     b16:	96 e1       	ldi	r25, 0x16	; 22
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	80 40       	sbci	r24, 0x00	; 0
     b1c:	90 40       	sbci	r25, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <lower+0x20>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <lower+0x2a>
     b22:	00 00       	nop
     b24:	08 95       	ret

00000b26 <elevate>:
     b26:	10 92 8b 00 	sts	0x008B, r1
     b2a:	83 e5       	ldi	r24, 0x53	; 83
     b2c:	80 93 8a 00 	sts	0x008A, r24
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	8f e7       	ldi	r24, 0x7F	; 127
     b34:	96 e1       	ldi	r25, 0x16	; 22
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <elevate+0x10>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <elevate+0x1a>
     b40:	00 00       	nop
     b42:	04 dd       	rcall	.-1528   	; 0x54c <servo_2_free>
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	8f e7       	ldi	r24, 0x7F	; 127
     b48:	96 e1       	ldi	r25, 0x16	; 22
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	e1 f7       	brne	.-8      	; 0xb4a <elevate+0x24>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <elevate+0x2e>
     b54:	00 00       	nop
     b56:	08 95       	ret

00000b58 <open>:
     b58:	81 11       	cpse	r24, r1
     b5a:	19 c0       	rjmp	.+50     	; 0xb8e <open+0x36>
     b5c:	10 92 8d 00 	sts	0x008D, r1
     b60:	83 e5       	ldi	r24, 0x53	; 83
     b62:	80 93 8c 00 	sts	0x008C, r24
     b66:	2f ef       	ldi	r18, 0xFF	; 255
     b68:	8f e7       	ldi	r24, 0x7F	; 127
     b6a:	96 e1       	ldi	r25, 0x16	; 22
     b6c:	21 50       	subi	r18, 0x01	; 1
     b6e:	80 40       	sbci	r24, 0x00	; 0
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <open+0x14>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <open+0x1e>
     b76:	00 00       	nop
     b78:	f0 dc       	rcall	.-1568   	; 0x55a <servo_3_free>
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	8f e7       	ldi	r24, 0x7F	; 127
     b7e:	96 e1       	ldi	r25, 0x16	; 22
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	90 40       	sbci	r25, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <open+0x28>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <open+0x32>
     b8a:	00 00       	nop
     b8c:	08 95       	ret
     b8e:	10 92 89 00 	sts	0x0089, r1
     b92:	83 e2       	ldi	r24, 0x23	; 35
     b94:	80 93 88 00 	sts	0x0088, r24
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	8f e7       	ldi	r24, 0x7F	; 127
     b9c:	96 e1       	ldi	r25, 0x16	; 22
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	80 40       	sbci	r24, 0x00	; 0
     ba2:	90 40       	sbci	r25, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <open+0x46>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <open+0x50>
     ba8:	00 00       	nop
     baa:	c9 dc       	rcall	.-1646   	; 0x53e <servo_1_free>
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	8f e7       	ldi	r24, 0x7F	; 127
     bb0:	96 e1       	ldi	r25, 0x16	; 22
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	80 40       	sbci	r24, 0x00	; 0
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <open+0x5a>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <open+0x64>
     bbc:	00 00       	nop
     bbe:	08 95       	ret

00000bc0 <close>:
     bc0:	81 11       	cpse	r24, r1
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <close+0x10>
     bc4:	10 92 8d 00 	sts	0x008D, r1
     bc8:	83 e2       	ldi	r24, 0x23	; 35
     bca:	80 93 8c 00 	sts	0x008C, r24
     bce:	07 c0       	rjmp	.+14     	; 0xbde <close+0x1e>
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	29 f4       	brne	.+10     	; 0xbde <close+0x1e>
     bd4:	10 92 89 00 	sts	0x0089, r1
     bd8:	8e e4       	ldi	r24, 0x4E	; 78
     bda:	80 93 88 00 	sts	0x0088, r24
     bde:	2f ef       	ldi	r18, 0xFF	; 255
     be0:	8f e7       	ldi	r24, 0x7F	; 127
     be2:	96 e1       	ldi	r25, 0x16	; 22
     be4:	21 50       	subi	r18, 0x01	; 1
     be6:	80 40       	sbci	r24, 0x00	; 0
     be8:	90 40       	sbci	r25, 0x00	; 0
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <close+0x24>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <close+0x2e>
     bee:	00 00       	nop
     bf0:	08 95       	ret

00000bf2 <node>:
     bf2:	86 e9       	ldi	r24, 0x96	; 150
     bf4:	80 93 28 01 	sts	0x0128, r24
     bf8:	80 93 2a 01 	sts	0x012A, r24
     bfc:	86 e4       	ldi	r24, 0x46	; 70
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	ab de       	rcall	.-682    	; 0x958 <forward_mm>
     c02:	8e cc       	rjmp	.-1764   	; 0x520 <stop>
     c04:	08 95       	ret

00000c06 <turnRight>:
     c06:	80 91 0c 02 	lds	r24, 0x020C
     c0a:	90 91 0d 02 	lds	r25, 0x020D
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	91 05       	cpc	r25, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <turnRight+0x1c>
     c14:	80 91 02 02 	lds	r24, 0x0202
     c18:	90 91 03 02 	lds	r25, 0x0203
     c1c:	02 97       	sbiw	r24, 0x02	; 2
     c1e:	98 f4       	brcc	.+38     	; 0xc46 <turnRight+0x40>
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <turnRight+0x2e>
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	81 f4       	brne	.+32     	; 0xc46 <turnRight+0x40>
     c26:	80 91 02 02 	lds	r24, 0x0202
     c2a:	90 91 03 02 	lds	r25, 0x0203
     c2e:	02 97       	sbiw	r24, 0x02	; 2
     c30:	02 97       	sbiw	r24, 0x02	; 2
     c32:	48 f4       	brcc	.+18     	; 0xc46 <turnRight+0x40>
     c34:	86 e9       	ldi	r24, 0x96	; 150
     c36:	80 93 28 01 	sts	0x0128, r24
     c3a:	80 93 2a 01 	sts	0x012A, r24
     c3e:	8a e5       	ldi	r24, 0x5A	; 90
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a5 de       	rcall	.-694    	; 0x98e <right_degrees>
     c44:	0f c0       	rjmp	.+30     	; 0xc64 <turnRight+0x5e>
     c46:	86 e9       	ldi	r24, 0x96	; 150
     c48:	80 93 28 01 	sts	0x0128, r24
     c4c:	80 93 2a 01 	sts	0x012A, r24
     c50:	8e e1       	ldi	r24, 0x1E	; 30
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9c de       	rcall	.-712    	; 0x98e <right_degrees>
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <turnRight+0x54>
     c58:	54 dc       	rcall	.-1880   	; 0x502 <right>
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	c9 dc       	rcall	.-1646   	; 0x5f0 <ADC_Conversion>
     c5e:	82 33       	cpi	r24, 0x32	; 50
     c60:	d8 f3       	brcs	.-10     	; 0xc58 <turnRight+0x52>
     c62:	5e dc       	rcall	.-1860   	; 0x520 <stop>
     c64:	80 91 0c 02 	lds	r24, 0x020C
     c68:	90 91 0d 02 	lds	r25, 0x020D
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	83 70       	andi	r24, 0x03	; 3
     c70:	90 78       	andi	r25, 0x80	; 128
     c72:	99 23       	and	r25, r25
     c74:	24 f4       	brge	.+8      	; 0xc7e <turnRight+0x78>
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	8c 6f       	ori	r24, 0xFC	; 252
     c7a:	9f 6f       	ori	r25, 0xFF	; 255
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	90 93 0d 02 	sts	0x020D, r25
     c82:	80 93 0c 02 	sts	0x020C, r24
     c86:	80 91 57 02 	lds	r24, 0x0257
     c8a:	90 91 58 02 	lds	r25, 0x0258
     c8e:	86 5a       	subi	r24, 0xA6	; 166
     c90:	9f 4f       	sbci	r25, 0xFF	; 255
     c92:	90 93 58 02 	sts	0x0258, r25
     c96:	80 93 57 02 	sts	0x0257, r24
     c9a:	08 95       	ret

00000c9c <turnLeft>:
     c9c:	80 91 0c 02 	lds	r24, 0x020C
     ca0:	90 91 0d 02 	lds	r25, 0x020D
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <turnLeft+0x1c>
     caa:	80 91 02 02 	lds	r24, 0x0202
     cae:	90 91 03 02 	lds	r25, 0x0203
     cb2:	02 97       	sbiw	r24, 0x02	; 2
     cb4:	98 f4       	brcc	.+38     	; 0xcdc <turnLeft+0x40>
     cb6:	09 c0       	rjmp	.+18     	; 0xcca <turnLeft+0x2e>
     cb8:	03 97       	sbiw	r24, 0x03	; 3
     cba:	81 f4       	brne	.+32     	; 0xcdc <turnLeft+0x40>
     cbc:	80 91 02 02 	lds	r24, 0x0202
     cc0:	90 91 03 02 	lds	r25, 0x0203
     cc4:	02 97       	sbiw	r24, 0x02	; 2
     cc6:	02 97       	sbiw	r24, 0x02	; 2
     cc8:	48 f4       	brcc	.+18     	; 0xcdc <turnLeft+0x40>
     cca:	86 e9       	ldi	r24, 0x96	; 150
     ccc:	80 93 28 01 	sts	0x0128, r24
     cd0:	80 93 2a 01 	sts	0x012A, r24
     cd4:	8a e5       	ldi	r24, 0x5A	; 90
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	51 de       	rcall	.-862    	; 0x97c <left_degrees>
     cda:	18 c0       	rjmp	.+48     	; 0xd0c <turnLeft+0x70>
     cdc:	8e e1       	ldi	r24, 0x1E	; 30
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	4d de       	rcall	.-870    	; 0x97c <left_degrees>
     ce2:	86 e9       	ldi	r24, 0x96	; 150
     ce4:	80 93 28 01 	sts	0x0128, r24
     ce8:	80 93 2a 01 	sts	0x012A, r24
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <turnLeft+0x54>
     cee:	06 dc       	rcall	.-2036   	; 0x4fc <left>
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	7e dc       	rcall	.-1796   	; 0x5f0 <ADC_Conversion>
     cf4:	82 33       	cpi	r24, 0x32	; 50
     cf6:	d8 f3       	brcs	.-10     	; 0xcee <turnLeft+0x52>
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	98 e0       	ldi	r25, 0x08	; 8
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	80 40       	sbci	r24, 0x00	; 0
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <turnLeft+0x62>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <turnLeft+0x6c>
     d08:	00 00       	nop
     d0a:	0a dc       	rcall	.-2028   	; 0x520 <stop>
     d0c:	80 91 0c 02 	lds	r24, 0x020C
     d10:	90 91 0d 02 	lds	r25, 0x020D
     d14:	03 96       	adiw	r24, 0x03	; 3
     d16:	83 70       	andi	r24, 0x03	; 3
     d18:	90 78       	andi	r25, 0x80	; 128
     d1a:	99 23       	and	r25, r25
     d1c:	24 f4       	brge	.+8      	; 0xd26 <turnLeft+0x8a>
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	8c 6f       	ori	r24, 0xFC	; 252
     d22:	9f 6f       	ori	r25, 0xFF	; 255
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	90 93 0d 02 	sts	0x020D, r25
     d2a:	80 93 0c 02 	sts	0x020C, r24
     d2e:	80 91 57 02 	lds	r24, 0x0257
     d32:	90 91 58 02 	lds	r25, 0x0258
     d36:	86 5a       	subi	r24, 0xA6	; 166
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	90 93 58 02 	sts	0x0258, r25
     d3e:	80 93 57 02 	sts	0x0257, r24
     d42:	08 95       	ret

00000d44 <turn>:
     d44:	80 91 0c 02 	lds	r24, 0x020C
     d48:	90 91 0d 02 	lds	r25, 0x020D
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	81 f4       	brne	.+32     	; 0xd70 <turn+0x2c>
     d50:	80 91 02 02 	lds	r24, 0x0202
     d54:	90 91 03 02 	lds	r25, 0x0203
     d58:	02 97       	sbiw	r24, 0x02	; 2
     d5a:	02 97       	sbiw	r24, 0x02	; 2
     d5c:	d0 f4       	brcc	.+52     	; 0xd92 <turn+0x4e>
     d5e:	86 e9       	ldi	r24, 0x96	; 150
     d60:	80 93 28 01 	sts	0x0128, r24
     d64:	80 93 2a 01 	sts	0x012A, r24
     d68:	84 eb       	ldi	r24, 0xB4	; 180
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	07 de       	rcall	.-1010   	; 0x97c <left_degrees>
     d6e:	20 c0       	rjmp	.+64     	; 0xdb0 <turn+0x6c>
     d70:	02 97       	sbiw	r24, 0x02	; 2
     d72:	79 f4       	brne	.+30     	; 0xd92 <turn+0x4e>
     d74:	80 91 02 02 	lds	r24, 0x0202
     d78:	90 91 03 02 	lds	r25, 0x0203
     d7c:	02 97       	sbiw	r24, 0x02	; 2
     d7e:	48 f4       	brcc	.+18     	; 0xd92 <turn+0x4e>
     d80:	86 e9       	ldi	r24, 0x96	; 150
     d82:	80 93 28 01 	sts	0x0128, r24
     d86:	80 93 2a 01 	sts	0x012A, r24
     d8a:	84 eb       	ldi	r24, 0xB4	; 180
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	f6 dd       	rcall	.-1044   	; 0x97c <left_degrees>
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <turn+0x6c>
     d92:	86 e9       	ldi	r24, 0x96	; 150
     d94:	80 93 28 01 	sts	0x0128, r24
     d98:	80 93 2a 01 	sts	0x012A, r24
     d9c:	84 eb       	ldi	r24, 0xB4	; 180
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	ed dd       	rcall	.-1062   	; 0x97c <left_degrees>
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <turn+0x62>
     da4:	ab db       	rcall	.-2218   	; 0x4fc <left>
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	23 dc       	rcall	.-1978   	; 0x5f0 <ADC_Conversion>
     daa:	8c 33       	cpi	r24, 0x3C	; 60
     dac:	d8 f3       	brcs	.-10     	; 0xda4 <turn+0x60>
     dae:	b8 db       	rcall	.-2192   	; 0x520 <stop>
     db0:	80 91 0c 02 	lds	r24, 0x020C
     db4:	90 91 0d 02 	lds	r25, 0x020D
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	83 70       	andi	r24, 0x03	; 3
     dbc:	90 78       	andi	r25, 0x80	; 128
     dbe:	99 23       	and	r25, r25
     dc0:	24 f4       	brge	.+8      	; 0xdca <turn+0x86>
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	8c 6f       	ori	r24, 0xFC	; 252
     dc6:	9f 6f       	ori	r25, 0xFF	; 255
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	90 93 0d 02 	sts	0x020D, r25
     dce:	80 93 0c 02 	sts	0x020C, r24
     dd2:	80 91 57 02 	lds	r24, 0x0257
     dd6:	90 91 58 02 	lds	r25, 0x0258
     dda:	8c 54       	subi	r24, 0x4C	; 76
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	90 93 58 02 	sts	0x0258, r25
     de2:	80 93 57 02 	sts	0x0257, r24
     de6:	08 95       	ret

00000de8 <Delay>:
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	8c 01       	movw	r16, r24
     df2:	18 16       	cp	r1, r24
     df4:	19 06       	cpc	r1, r25
     df6:	8c f4       	brge	.+34     	; 0xe1a <Delay+0x32>
     df8:	c0 e0       	ldi	r28, 0x00	; 0
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <Delay+0x28>
     dfe:	86 e6       	ldi	r24, 0x66	; 102
     e00:	9e e0       	ldi	r25, 0x0E	; 14
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <Delay+0x1a>
     e06:	00 00       	nop
     e08:	21 96       	adiw	r28, 0x01	; 1
     e0a:	c0 17       	cp	r28, r16
     e0c:	d1 07       	cpc	r29, r17
     e0e:	39 f0       	breq	.+14     	; 0xe1e <Delay+0x36>
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	ee db       	rcall	.-2084   	; 0x5f0 <ADC_Conversion>
     e14:	88 32       	cpi	r24, 0x28	; 40
     e16:	98 f3       	brcs	.-26     	; 0xdfe <Delay+0x16>
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <Delay+0x36>
     e1a:	c0 e0       	ldi	r28, 0x00	; 0
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
     e1e:	80 db       	rcall	.-2304   	; 0x520 <stop>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	c0 17       	cp	r28, r16
     e24:	d1 07       	cpc	r29, r17
     e26:	0c f0       	brlt	.+2      	; 0xe2a <Delay+0x42>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <semiCorrect_Indi>:
     e34:	80 91 0a 02 	lds	r24, 0x020A
     e38:	89 32       	cpi	r24, 0x29	; 41
     e3a:	40 f0       	brcs	.+16     	; 0xe4c <semiCorrect_Indi+0x18>
     e3c:	90 91 0b 02 	lds	r25, 0x020B
     e40:	99 32       	cpi	r25, 0x29	; 41
     e42:	08 f5       	brcc	.+66     	; 0xe86 <semiCorrect_Indi+0x52>
     e44:	90 91 09 02 	lds	r25, 0x0209
     e48:	99 32       	cpi	r25, 0x29	; 41
     e4a:	e8 f4       	brcc	.+58     	; 0xe86 <semiCorrect_Indi+0x52>
     e4c:	88 32       	cpi	r24, 0x28	; 40
     e4e:	d8 f4       	brcc	.+54     	; 0xe86 <semiCorrect_Indi+0x52>
     e50:	80 91 0b 02 	lds	r24, 0x020B
     e54:	89 32       	cpi	r24, 0x29	; 41
     e56:	58 f0       	brcs	.+22     	; 0xe6e <semiCorrect_Indi+0x3a>
     e58:	90 91 09 02 	lds	r25, 0x0209
     e5c:	98 32       	cpi	r25, 0x28	; 40
     e5e:	38 f4       	brcc	.+14     	; 0xe6e <semiCorrect_Indi+0x3a>
     e60:	4d db       	rcall	.-2406   	; 0x4fc <left>
     e62:	aa dd       	rcall	.-1196   	; 0x9b8 <set_color>
     e64:	80 91 0a 02 	lds	r24, 0x020A
     e68:	88 32       	cpi	r24, 0x28	; 40
     e6a:	d0 f3       	brcs	.-12     	; 0xe60 <semiCorrect_Indi+0x2c>
     e6c:	08 95       	ret
     e6e:	90 91 09 02 	lds	r25, 0x0209
     e72:	99 32       	cpi	r25, 0x29	; 41
     e74:	40 f0       	brcs	.+16     	; 0xe86 <semiCorrect_Indi+0x52>
     e76:	88 32       	cpi	r24, 0x28	; 40
     e78:	30 f4       	brcc	.+12     	; 0xe86 <semiCorrect_Indi+0x52>
     e7a:	43 db       	rcall	.-2426   	; 0x502 <right>
     e7c:	9d dd       	rcall	.-1222   	; 0x9b8 <set_color>
     e7e:	80 91 0a 02 	lds	r24, 0x020A
     e82:	88 32       	cpi	r24, 0x28	; 40
     e84:	d0 f3       	brcs	.-12     	; 0xe7a <semiCorrect_Indi+0x46>
     e86:	08 95       	ret

00000e88 <correct_Indi>:
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	85 e0       	ldi	r24, 0x05	; 5
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	90 93 2f 02 	sts	0x022F, r25
     e94:	80 93 2e 02 	sts	0x022E, r24
     e98:	43 db       	rcall	.-2426   	; 0x520 <stop>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 08 02 	sts	0x0208, r24
     ea0:	c2 e3       	ldi	r28, 0x32	; 50
     ea2:	d0 e0       	ldi	r29, 0x00	; 0
     ea4:	2b db       	rcall	.-2474   	; 0x4fc <left>
     ea6:	ce 01       	movw	r24, r28
     ea8:	9f df       	rcall	.-194    	; 0xde8 <Delay>
     eaa:	81 11       	cpse	r24, r1
     eac:	24 c0       	rjmp	.+72     	; 0xef6 <correct_Indi+0x6e>
     eae:	38 db       	rcall	.-2448   	; 0x520 <stop>
     eb0:	21 e0       	ldi	r18, 0x01	; 1
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	f3 d9       	rcall	.-3098   	; 0x2a4 <lcd_print>
     ebe:	ba df       	rcall	.-140    	; 0xe34 <semiCorrect_Indi>
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	96 db       	rcall	.-2260   	; 0x5f0 <ADC_Conversion>
     ec4:	89 32       	cpi	r24, 0x29	; 41
     ec6:	b0 f4       	brcc	.+44     	; 0xef4 <correct_Indi+0x6c>
     ec8:	1c db       	rcall	.-2504   	; 0x502 <right>
     eca:	ce 01       	movw	r24, r28
     ecc:	c2 96       	adiw	r24, 0x32	; 50
     ece:	8c df       	rcall	.-232    	; 0xde8 <Delay>
     ed0:	81 11       	cpse	r24, r1
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <correct_Indi+0x6e>
     ed4:	25 db       	rcall	.-2486   	; 0x520 <stop>
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	42 e0       	ldi	r20, 0x02	; 2
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	e0 d9       	rcall	.-3136   	; 0x2a4 <lcd_print>
     ee4:	a7 df       	rcall	.-178    	; 0xe34 <semiCorrect_Indi>
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	83 db       	rcall	.-2298   	; 0x5f0 <ADC_Conversion>
     eea:	89 32       	cpi	r24, 0x29	; 41
     eec:	18 f4       	brcc	.+6      	; 0xef4 <correct_Indi+0x6c>
     eee:	cc 59       	subi	r28, 0x9C	; 156
     ef0:	df 4f       	sbci	r29, 0xFF	; 255
     ef2:	d8 cf       	rjmp	.-80     	; 0xea4 <correct_Indi+0x1c>
     ef4:	15 db       	rcall	.-2518   	; 0x520 <stop>
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <noNatak_Indi>:
     efc:	88 ec       	ldi	r24, 0xC8	; 200
     efe:	80 93 28 01 	sts	0x0128, r24
     f02:	80 93 2a 01 	sts	0x012A, r24
     f06:	80 91 0a 02 	lds	r24, 0x020A
     f0a:	88 32       	cpi	r24, 0x28	; 40
     f0c:	80 f5       	brcc	.+96     	; 0xf6e <noNatak_Indi+0x72>
     f0e:	80 91 0b 02 	lds	r24, 0x020B
     f12:	89 32       	cpi	r24, 0x29	; 41
     f14:	a0 f0       	brcs	.+40     	; 0xf3e <noNatak_Indi+0x42>
     f16:	90 91 09 02 	lds	r25, 0x0209
     f1a:	98 32       	cpi	r25, 0x28	; 40
     f1c:	80 f4       	brcc	.+32     	; 0xf3e <noNatak_Indi+0x42>
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <noNatak_Indi+0x28>
     f20:	ed da       	rcall	.-2598   	; 0x4fc <left>
     f22:	4a dd       	rcall	.-1388   	; 0x9b8 <set_color>
     f24:	80 91 0a 02 	lds	r24, 0x020A
     f28:	89 32       	cpi	r24, 0x29	; 41
     f2a:	d0 f3       	brcs	.-12     	; 0xf20 <noNatak_Indi+0x24>
     f2c:	80 91 0b 02 	lds	r24, 0x020B
     f30:	88 32       	cpi	r24, 0x28	; 40
     f32:	b0 f7       	brcc	.-20     	; 0xf20 <noNatak_Indi+0x24>
     f34:	80 91 09 02 	lds	r24, 0x0209
     f38:	88 32       	cpi	r24, 0x28	; 40
     f3a:	90 f7       	brcc	.-28     	; 0xf20 <noNatak_Indi+0x24>
     f3c:	27 c0       	rjmp	.+78     	; 0xf8c <noNatak_Indi+0x90>
     f3e:	90 91 09 02 	lds	r25, 0x0209
     f42:	99 32       	cpi	r25, 0x29	; 41
     f44:	90 f0       	brcs	.+36     	; 0xf6a <noNatak_Indi+0x6e>
     f46:	88 32       	cpi	r24, 0x28	; 40
     f48:	80 f4       	brcc	.+32     	; 0xf6a <noNatak_Indi+0x6e>
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <noNatak_Indi+0x54>
     f4c:	da da       	rcall	.-2636   	; 0x502 <right>
     f4e:	34 dd       	rcall	.-1432   	; 0x9b8 <set_color>
     f50:	80 91 0a 02 	lds	r24, 0x020A
     f54:	89 32       	cpi	r24, 0x29	; 41
     f56:	d0 f3       	brcs	.-12     	; 0xf4c <noNatak_Indi+0x50>
     f58:	80 91 0b 02 	lds	r24, 0x020B
     f5c:	88 32       	cpi	r24, 0x28	; 40
     f5e:	b0 f7       	brcc	.-20     	; 0xf4c <noNatak_Indi+0x50>
     f60:	80 91 09 02 	lds	r24, 0x0209
     f64:	88 32       	cpi	r24, 0x28	; 40
     f66:	90 f7       	brcc	.-28     	; 0xf4c <noNatak_Indi+0x50>
     f68:	11 c0       	rjmp	.+34     	; 0xf8c <noNatak_Indi+0x90>
     f6a:	8e df       	rcall	.-228    	; 0xe88 <correct_Indi>
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <noNatak_Indi+0x90>
     f6e:	80 91 0b 02 	lds	r24, 0x020B
     f72:	89 32       	cpi	r24, 0x29	; 41
     f74:	20 f0       	brcs	.+8      	; 0xf7e <noNatak_Indi+0x82>
     f76:	90 91 09 02 	lds	r25, 0x0209
     f7a:	98 32       	cpi	r25, 0x28	; 40
     f7c:	40 f0       	brcs	.+16     	; 0xf8e <noNatak_Indi+0x92>
     f7e:	88 32       	cpi	r24, 0x28	; 40
     f80:	20 f4       	brcc	.+8      	; 0xf8a <noNatak_Indi+0x8e>
     f82:	80 91 09 02 	lds	r24, 0x0209
     f86:	89 32       	cpi	r24, 0x29	; 41
     f88:	10 f4       	brcc	.+4      	; 0xf8e <noNatak_Indi+0x92>
     f8a:	7e df       	rcall	.-260    	; 0xe88 <correct_Indi>
     f8c:	c9 ca       	rjmp	.-2670   	; 0x520 <stop>
     f8e:	08 95       	ret

00000f90 <forwardJaa_Indi>:
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	08 e2       	ldi	r16, 0x28	; 40
     f9c:	11 e0       	ldi	r17, 0x01	; 1
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f0 ef       	ldi	r31, 0xF0	; 240
     fa2:	ff 2e       	mov	r15, r31
     fa4:	f0 2d       	mov	r31, r0
     fa6:	ca e2       	ldi	r28, 0x2A	; 42
     fa8:	d1 e0       	ldi	r29, 0x01	; 1
     faa:	a2 da       	rcall	.-2748   	; 0x4f0 <forward>
     fac:	05 dd       	rcall	.-1526   	; 0x9b8 <set_color>
     fae:	80 91 0a 02 	lds	r24, 0x020A
     fb2:	89 32       	cpi	r24, 0x29	; 41
     fb4:	40 f0       	brcs	.+16     	; 0xfc6 <forwardJaa_Indi+0x36>
     fb6:	80 91 0b 02 	lds	r24, 0x020B
     fba:	89 32       	cpi	r24, 0x29	; 41
     fbc:	a8 f4       	brcc	.+42     	; 0xfe8 <forwardJaa_Indi+0x58>
     fbe:	80 91 09 02 	lds	r24, 0x0209
     fc2:	89 32       	cpi	r24, 0x29	; 41
     fc4:	88 f4       	brcc	.+34     	; 0xfe8 <forwardJaa_Indi+0x58>
     fc6:	f8 01       	movw	r30, r16
     fc8:	f0 82       	st	Z, r15
     fca:	f8 82       	st	Y, r15
     fcc:	80 91 0a 02 	lds	r24, 0x020A
     fd0:	89 32       	cpi	r24, 0x29	; 41
     fd2:	40 f0       	brcs	.+16     	; 0xfe4 <forwardJaa_Indi+0x54>
     fd4:	80 91 0b 02 	lds	r24, 0x020B
     fd8:	88 32       	cpi	r24, 0x28	; 40
     fda:	20 f4       	brcc	.+8      	; 0xfe4 <forwardJaa_Indi+0x54>
     fdc:	80 91 09 02 	lds	r24, 0x0209
     fe0:	88 32       	cpi	r24, 0x28	; 40
     fe2:	18 f3       	brcs	.-58     	; 0xfaa <forwardJaa_Indi+0x1a>
     fe4:	8b df       	rcall	.-234    	; 0xefc <noNatak_Indi>
     fe6:	d4 df       	rcall	.-88     	; 0xf90 <forwardJaa_Indi>
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	08 95       	ret

00000ff4 <semiCorrect>:
     ff4:	80 91 0a 02 	lds	r24, 0x020A
     ff8:	89 32       	cpi	r24, 0x29	; 41
     ffa:	58 f0       	brcs	.+22     	; 0x1012 <semiCorrect+0x1e>
     ffc:	90 91 0b 02 	lds	r25, 0x020B
    1000:	99 32       	cpi	r25, 0x29	; 41
    1002:	20 f4       	brcc	.+8      	; 0x100c <semiCorrect+0x18>
    1004:	90 91 09 02 	lds	r25, 0x0209
    1008:	99 32       	cpi	r25, 0x29	; 41
    100a:	18 f0       	brcs	.+6      	; 0x1012 <semiCorrect+0x1e>
    100c:	f2 dd       	rcall	.-1052   	; 0xbf2 <node>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	08 95       	ret
    1012:	88 32       	cpi	r24, 0x28	; 40
    1014:	e0 f4       	brcc	.+56     	; 0x104e <semiCorrect+0x5a>
    1016:	80 91 0b 02 	lds	r24, 0x020B
    101a:	89 32       	cpi	r24, 0x29	; 41
    101c:	58 f0       	brcs	.+22     	; 0x1034 <semiCorrect+0x40>
    101e:	90 91 09 02 	lds	r25, 0x0209
    1022:	98 32       	cpi	r25, 0x28	; 40
    1024:	38 f4       	brcc	.+14     	; 0x1034 <semiCorrect+0x40>
    1026:	6a da       	rcall	.-2860   	; 0x4fc <left>
    1028:	c7 dc       	rcall	.-1650   	; 0x9b8 <set_color>
    102a:	80 91 0a 02 	lds	r24, 0x020A
    102e:	88 32       	cpi	r24, 0x28	; 40
    1030:	d0 f3       	brcs	.-12     	; 0x1026 <semiCorrect+0x32>
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <semiCorrect+0x5e>
    1034:	90 91 09 02 	lds	r25, 0x0209
    1038:	99 32       	cpi	r25, 0x29	; 41
    103a:	68 f0       	brcs	.+26     	; 0x1056 <semiCorrect+0x62>
    103c:	88 32       	cpi	r24, 0x28	; 40
    103e:	68 f4       	brcc	.+26     	; 0x105a <semiCorrect+0x66>
    1040:	60 da       	rcall	.-2880   	; 0x502 <right>
    1042:	ba dc       	rcall	.-1676   	; 0x9b8 <set_color>
    1044:	80 91 0a 02 	lds	r24, 0x020A
    1048:	88 32       	cpi	r24, 0x28	; 40
    104a:	d0 f3       	brcs	.-12     	; 0x1040 <semiCorrect+0x4c>
    104c:	08 c0       	rjmp	.+16     	; 0x105e <semiCorrect+0x6a>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	08 95       	ret

00001062 <correct>:
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	85 e0       	ldi	r24, 0x05	; 5
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 93 2f 02 	sts	0x022F, r25
    1070:	80 93 2e 02 	sts	0x022E, r24
    1074:	55 da       	rcall	.-2902   	; 0x520 <stop>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 08 02 	sts	0x0208, r24
    107c:	c2 e3       	ldi	r28, 0x32	; 50
    107e:	d0 e0       	ldi	r29, 0x00	; 0
    1080:	3d da       	rcall	.-2950   	; 0x4fc <left>
    1082:	ce 01       	movw	r24, r28
    1084:	b1 de       	rcall	.-670    	; 0xde8 <Delay>
    1086:	81 11       	cpse	r24, r1
    1088:	1c c0       	rjmp	.+56     	; 0x10c2 <correct+0x60>
    108a:	4a da       	rcall	.-2924   	; 0x520 <stop>
    108c:	b3 df       	rcall	.-154    	; 0xff4 <semiCorrect>
    108e:	18 2f       	mov	r17, r24
    1090:	81 11       	cpse	r24, r1
    1092:	19 c0       	rjmp	.+50     	; 0x10c6 <correct+0x64>
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	ac da       	rcall	.-2728   	; 0x5f0 <ADC_Conversion>
    1098:	89 32       	cpi	r24, 0x29	; 41
    109a:	88 f4       	brcc	.+34     	; 0x10be <correct+0x5c>
    109c:	32 da       	rcall	.-2972   	; 0x502 <right>
    109e:	ce 01       	movw	r24, r28
    10a0:	c2 96       	adiw	r24, 0x32	; 50
    10a2:	a2 de       	rcall	.-700    	; 0xde8 <Delay>
    10a4:	81 11       	cpse	r24, r1
    10a6:	12 c0       	rjmp	.+36     	; 0x10cc <correct+0x6a>
    10a8:	3b da       	rcall	.-2954   	; 0x520 <stop>
    10aa:	a4 df       	rcall	.-184    	; 0xff4 <semiCorrect>
    10ac:	81 11       	cpse	r24, r1
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <correct+0x68>
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	9e da       	rcall	.-2756   	; 0x5f0 <ADC_Conversion>
    10b4:	89 32       	cpi	r24, 0x29	; 41
    10b6:	18 f4       	brcc	.+6      	; 0x10be <correct+0x5c>
    10b8:	cc 59       	subi	r28, 0x9C	; 156
    10ba:	df 4f       	sbci	r29, 0xFF	; 255
    10bc:	e1 cf       	rjmp	.-62     	; 0x1080 <correct+0x1e>
    10be:	30 da       	rcall	.-2976   	; 0x520 <stop>
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <correct+0x6a>
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <correct+0x6a>
    10c6:	11 e0       	ldi	r17, 0x01	; 1
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <correct+0x6a>
    10ca:	11 e0       	ldi	r17, 0x01	; 1
    10cc:	81 2f       	mov	r24, r17
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	08 95       	ret

000010d6 <noNatak>:
    10d6:	88 ec       	ldi	r24, 0xC8	; 200
    10d8:	80 93 28 01 	sts	0x0128, r24
    10dc:	80 93 2a 01 	sts	0x012A, r24
    10e0:	80 91 0a 02 	lds	r24, 0x020A
    10e4:	88 32       	cpi	r24, 0x28	; 40
    10e6:	90 f5       	brcc	.+100    	; 0x114c <noNatak+0x76>
    10e8:	80 91 0b 02 	lds	r24, 0x020B
    10ec:	89 32       	cpi	r24, 0x29	; 41
    10ee:	a0 f0       	brcs	.+40     	; 0x1118 <noNatak+0x42>
    10f0:	90 91 09 02 	lds	r25, 0x0209
    10f4:	98 32       	cpi	r25, 0x28	; 40
    10f6:	80 f4       	brcc	.+32     	; 0x1118 <noNatak+0x42>
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <noNatak+0x28>
    10fa:	00 da       	rcall	.-3072   	; 0x4fc <left>
    10fc:	5d dc       	rcall	.-1862   	; 0x9b8 <set_color>
    10fe:	80 91 0a 02 	lds	r24, 0x020A
    1102:	89 32       	cpi	r24, 0x29	; 41
    1104:	d0 f3       	brcs	.-12     	; 0x10fa <noNatak+0x24>
    1106:	80 91 0b 02 	lds	r24, 0x020B
    110a:	88 32       	cpi	r24, 0x28	; 40
    110c:	b0 f7       	brcc	.-20     	; 0x10fa <noNatak+0x24>
    110e:	80 91 09 02 	lds	r24, 0x0209
    1112:	88 32       	cpi	r24, 0x28	; 40
    1114:	90 f7       	brcc	.-28     	; 0x10fa <noNatak+0x24>
    1116:	33 c0       	rjmp	.+102    	; 0x117e <noNatak+0xa8>
    1118:	90 91 09 02 	lds	r25, 0x0209
    111c:	99 32       	cpi	r25, 0x29	; 41
    111e:	90 f0       	brcs	.+36     	; 0x1144 <noNatak+0x6e>
    1120:	88 32       	cpi	r24, 0x28	; 40
    1122:	80 f4       	brcc	.+32     	; 0x1144 <noNatak+0x6e>
    1124:	02 c0       	rjmp	.+4      	; 0x112a <noNatak+0x54>
    1126:	ed d9       	rcall	.-3110   	; 0x502 <right>
    1128:	47 dc       	rcall	.-1906   	; 0x9b8 <set_color>
    112a:	80 91 0a 02 	lds	r24, 0x020A
    112e:	89 32       	cpi	r24, 0x29	; 41
    1130:	d0 f3       	brcs	.-12     	; 0x1126 <noNatak+0x50>
    1132:	80 91 0b 02 	lds	r24, 0x020B
    1136:	88 32       	cpi	r24, 0x28	; 40
    1138:	b0 f7       	brcc	.-20     	; 0x1126 <noNatak+0x50>
    113a:	80 91 09 02 	lds	r24, 0x0209
    113e:	88 32       	cpi	r24, 0x28	; 40
    1140:	90 f7       	brcc	.-28     	; 0x1126 <noNatak+0x50>
    1142:	1d c0       	rjmp	.+58     	; 0x117e <noNatak+0xa8>
    1144:	8e df       	rcall	.-228    	; 0x1062 <correct>
    1146:	88 23       	and	r24, r24
    1148:	d1 f0       	breq	.+52     	; 0x117e <noNatak+0xa8>
    114a:	1d c0       	rjmp	.+58     	; 0x1186 <noNatak+0xb0>
    114c:	80 91 0b 02 	lds	r24, 0x020B
    1150:	89 32       	cpi	r24, 0x29	; 41
    1152:	40 f0       	brcs	.+16     	; 0x1164 <noNatak+0x8e>
    1154:	90 91 09 02 	lds	r25, 0x0209
    1158:	98 32       	cpi	r25, 0x28	; 40
    115a:	20 f4       	brcc	.+8      	; 0x1164 <noNatak+0x8e>
    115c:	4a dd       	rcall	.-1388   	; 0xbf2 <node>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	08 95       	ret
    1164:	88 32       	cpi	r24, 0x28	; 40
    1166:	40 f4       	brcc	.+16     	; 0x1178 <noNatak+0xa2>
    1168:	80 91 09 02 	lds	r24, 0x0209
    116c:	89 32       	cpi	r24, 0x29	; 41
    116e:	20 f0       	brcs	.+8      	; 0x1178 <noNatak+0xa2>
    1170:	40 dd       	rcall	.-1408   	; 0xbf2 <node>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	08 95       	ret
    1178:	74 df       	rcall	.-280    	; 0x1062 <correct>
    117a:	81 11       	cpse	r24, r1
    117c:	07 c0       	rjmp	.+14     	; 0x118c <noNatak+0xb6>
    117e:	d0 d9       	rcall	.-3168   	; 0x520 <stop>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	08 95       	ret
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	08 95       	ret
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	08 95       	ret

00001192 <forwardJaa>:
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	08 e2       	ldi	r16, 0x28	; 40
    119e:	11 e0       	ldi	r17, 0x01	; 1
    11a0:	0f 2e       	mov	r0, r31
    11a2:	f0 ef       	ldi	r31, 0xF0	; 240
    11a4:	ff 2e       	mov	r15, r31
    11a6:	f0 2d       	mov	r31, r0
    11a8:	ca e2       	ldi	r28, 0x2A	; 42
    11aa:	d1 e0       	ldi	r29, 0x01	; 1
    11ac:	a1 d9       	rcall	.-3262   	; 0x4f0 <forward>
    11ae:	04 dc       	rcall	.-2040   	; 0x9b8 <set_color>
    11b0:	80 91 0a 02 	lds	r24, 0x020A
    11b4:	89 32       	cpi	r24, 0x29	; 41
    11b6:	50 f0       	brcs	.+20     	; 0x11cc <forwardJaa+0x3a>
    11b8:	80 91 0b 02 	lds	r24, 0x020B
    11bc:	89 32       	cpi	r24, 0x29	; 41
    11be:	20 f4       	brcc	.+8      	; 0x11c8 <forwardJaa+0x36>
    11c0:	80 91 09 02 	lds	r24, 0x0209
    11c4:	89 32       	cpi	r24, 0x29	; 41
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <forwardJaa+0x3a>
    11c8:	14 dd       	rcall	.-1496   	; 0xbf2 <node>
    11ca:	13 c0       	rjmp	.+38     	; 0x11f2 <forwardJaa+0x60>
    11cc:	f8 01       	movw	r30, r16
    11ce:	f0 82       	st	Z, r15
    11d0:	f8 82       	st	Y, r15
    11d2:	80 91 0a 02 	lds	r24, 0x020A
    11d6:	89 32       	cpi	r24, 0x29	; 41
    11d8:	40 f0       	brcs	.+16     	; 0x11ea <forwardJaa+0x58>
    11da:	80 91 0b 02 	lds	r24, 0x020B
    11de:	88 32       	cpi	r24, 0x28	; 40
    11e0:	20 f4       	brcc	.+8      	; 0x11ea <forwardJaa+0x58>
    11e2:	80 91 09 02 	lds	r24, 0x0209
    11e6:	88 32       	cpi	r24, 0x28	; 40
    11e8:	08 f3       	brcs	.-62     	; 0x11ac <forwardJaa+0x1a>
    11ea:	75 df       	rcall	.-278    	; 0x10d6 <noNatak>
    11ec:	89 2b       	or	r24, r25
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <forwardJaa+0x60>
    11f0:	d0 df       	rcall	.-96     	; 0x1192 <forwardJaa>
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	08 95       	ret

000011fe <front>:
    11fe:	c9 df       	rcall	.-110    	; 0x1192 <forwardJaa>
    1200:	80 91 32 02 	lds	r24, 0x0232
    1204:	90 91 33 02 	lds	r25, 0x0233
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	90 93 33 02 	sts	0x0233, r25
    120e:	80 93 32 02 	sts	0x0232, r24
    1212:	08 95       	ret

00001214 <traverseToSort>:
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	ec 01       	movw	r28, r24
    121a:	10 92 01 02 	sts	0x0201, r1
    121e:	10 92 00 02 	sts	0x0200, r1
    1222:	80 91 10 02 	lds	r24, 0x0210
    1226:	90 91 11 02 	lds	r25, 0x0211
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	21 f4       	brne	.+8      	; 0x1236 <traverseToSort+0x22>
    122e:	10 92 11 02 	sts	0x0211, r1
    1232:	10 92 10 02 	sts	0x0210, r1
    1236:	ce 01       	movw	r24, r28
    1238:	04 97       	sbiw	r24, 0x04	; 4
    123a:	02 97       	sbiw	r24, 0x02	; 2
    123c:	88 f5       	brcc	.+98     	; 0x12a0 <traverseToSort+0x8c>
    123e:	c4 30       	cpi	r28, 0x04	; 4
    1240:	d1 05       	cpc	r29, r1
    1242:	39 f4       	brne	.+14     	; 0x1252 <traverseToSort+0x3e>
    1244:	80 91 0c 02 	lds	r24, 0x020C
    1248:	90 91 0d 02 	lds	r25, 0x020D
    124c:	89 2b       	or	r24, r25
    124e:	51 f0       	breq	.+20     	; 0x1264 <traverseToSort+0x50>
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <traverseToSort+0x54>
    1252:	c5 30       	cpi	r28, 0x05	; 5
    1254:	d1 05       	cpc	r29, r1
    1256:	41 f4       	brne	.+16     	; 0x1268 <traverseToSort+0x54>
    1258:	80 91 0c 02 	lds	r24, 0x020C
    125c:	90 91 0d 02 	lds	r25, 0x020D
    1260:	02 97       	sbiw	r24, 0x02	; 2
    1262:	11 f4       	brne	.+4      	; 0x1268 <traverseToSort+0x54>
    1264:	d0 dc       	rcall	.-1632   	; 0xc06 <turnRight>
    1266:	01 c0       	rjmp	.+2      	; 0x126a <traverseToSort+0x56>
    1268:	19 dd       	rcall	.-1486   	; 0xc9c <turnLeft>
    126a:	c9 df       	rcall	.-110    	; 0x11fe <front>
    126c:	c8 df       	rcall	.-112    	; 0x11fe <front>
    126e:	24 97       	sbiw	r28, 0x04	; 4
    1270:	39 f4       	brne	.+14     	; 0x1280 <traverseToSort+0x6c>
    1272:	85 e0       	ldi	r24, 0x05	; 5
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	90 93 03 02 	sts	0x0203, r25
    127a:	80 93 02 02 	sts	0x0202, r24
    127e:	06 c0       	rjmp	.+12     	; 0x128c <traverseToSort+0x78>
    1280:	84 e0       	ldi	r24, 0x04	; 4
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	90 93 03 02 	sts	0x0203, r25
    1288:	80 93 02 02 	sts	0x0202, r24
    128c:	80 91 32 02 	lds	r24, 0x0232
    1290:	90 91 33 02 	lds	r25, 0x0233
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	90 93 33 02 	sts	0x0233, r25
    129a:	80 93 32 02 	sts	0x0232, r24
    129e:	45 c0       	rjmp	.+138    	; 0x132a <traverseToSort+0x116>
    12a0:	80 91 0c 02 	lds	r24, 0x020C
    12a4:	90 91 0d 02 	lds	r25, 0x020D
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	39 f4       	brne	.+14     	; 0x12bc <traverseToSort+0xa8>
    12ae:	80 91 02 02 	lds	r24, 0x0202
    12b2:	90 91 03 02 	lds	r25, 0x0203
    12b6:	02 97       	sbiw	r24, 0x02	; 2
    12b8:	78 f4       	brcc	.+30     	; 0x12d8 <traverseToSort+0xc4>
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <traverseToSort+0xba>
    12bc:	03 97       	sbiw	r24, 0x03	; 3
    12be:	99 f4       	brne	.+38     	; 0x12e6 <traverseToSort+0xd2>
    12c0:	80 91 02 02 	lds	r24, 0x0202
    12c4:	90 91 03 02 	lds	r25, 0x0203
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	91 05       	cpc	r25, r1
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <traverseToSort+0xbe>
    12ce:	9b dc       	rcall	.-1738   	; 0xc06 <turnRight>
    12d0:	0a c0       	rjmp	.+20     	; 0x12e6 <traverseToSort+0xd2>
    12d2:	02 97       	sbiw	r24, 0x02	; 2
    12d4:	40 f4       	brcc	.+16     	; 0x12e6 <traverseToSort+0xd2>
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <traverseToSort+0xd0>
    12d8:	80 91 02 02 	lds	r24, 0x0202
    12dc:	90 91 03 02 	lds	r25, 0x0203
    12e0:	02 97       	sbiw	r24, 0x02	; 2
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <traverseToSort+0xd2>
    12e4:	db dc       	rcall	.-1610   	; 0xc9c <turnLeft>
    12e6:	22 97       	sbiw	r28, 0x02	; 2
    12e8:	3c f4       	brge	.+14     	; 0x12f8 <traverseToSort+0xe4>
    12ea:	80 91 0c 02 	lds	r24, 0x020C
    12ee:	90 91 0d 02 	lds	r25, 0x020D
    12f2:	89 2b       	or	r24, r25
    12f4:	39 f0       	breq	.+14     	; 0x1304 <traverseToSort+0xf0>
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <traverseToSort+0xf2>
    12f8:	80 91 0c 02 	lds	r24, 0x020C
    12fc:	90 91 0d 02 	lds	r25, 0x020D
    1300:	02 97       	sbiw	r24, 0x02	; 2
    1302:	09 f4       	brne	.+2      	; 0x1306 <traverseToSort+0xf2>
    1304:	1f dd       	rcall	.-1474   	; 0xd44 <turn>
    1306:	7b df       	rcall	.-266    	; 0x11fe <front>
    1308:	80 91 43 02 	lds	r24, 0x0243
    130c:	90 91 44 02 	lds	r25, 0x0244
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	90 78       	andi	r25, 0x80	; 128
    1314:	99 23       	and	r25, r25
    1316:	24 f4       	brge	.+8      	; 0x1320 <traverseToSort+0x10c>
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	8e 6f       	ori	r24, 0xFE	; 254
    131c:	9f 6f       	ori	r25, 0xFF	; 255
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	04 96       	adiw	r24, 0x04	; 4
    1322:	90 93 03 02 	sts	0x0203, r25
    1326:	80 93 02 02 	sts	0x0202, r24
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <terminalCheck1>:
void terminalCheck1()
{
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1334:	86 e9       	ldi	r24, 0x96	; 150
    1336:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    133a:	80 93 2a 01 	sts	0x012A, r24
	//????
	//lcd_wr_command(0x01);
	//lcd_print(1,1,888,3);
	velocity(turn_v,turn_v);
	forward_mm(10);
    133e:	8a e0       	ldi	r24, 0x0A	; 10
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0a db       	rcall	.-2540   	; 0x958 <forward_mm>
	flag = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	90 93 11 02 	sts	0x0211, r25
    134c:	80 93 10 02 	sts	0x0210, r24
	if (ct != ot)
    1350:	80 91 02 02 	lds	r24, 0x0202
    1354:	90 91 03 02 	lds	r25, 0x0203
    1358:	20 91 43 02 	lds	r18, 0x0243
    135c:	30 91 44 02 	lds	r19, 0x0244
    1360:	28 17       	cp	r18, r24
    1362:	39 07       	cpc	r19, r25
    1364:	89 f1       	breq	.+98     	; 0x13c8 <terminalCheck1+0x98>
	{
		if (dir == 1 || dir == 3)
    1366:	20 91 0c 02 	lds	r18, 0x020C
    136a:	30 91 0d 02 	lds	r19, 0x020D
    136e:	2d 7f       	andi	r18, 0xFD	; 253
    1370:	21 30       	cpi	r18, 0x01	; 1
    1372:	31 05       	cpc	r19, r1
    1374:	41 f4       	brne	.+16     	; 0x1386 <terminalCheck1+0x56>
		{
			if (ot == 3 || ot == 0)
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	11 f0       	breq	.+4      	; 0x1380 <terminalCheck1+0x50>
    137c:	89 2b       	or	r24, r25
    137e:	11 f4       	brne	.+4      	; 0x1384 <terminalCheck1+0x54>
				turnRight();
    1380:	42 dc       	rcall	.-1916   	; 0xc06 <turnRight>
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <terminalCheck1+0x56>
			else turnLeft();
    1384:	8b dc       	rcall	.-1770   	; 0xc9c <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1386:	80 91 43 02 	lds	r24, 0x0243
    138a:	90 91 44 02 	lds	r25, 0x0244
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	91 05       	cpc	r25, r1
    1392:	38 f4       	brcc	.+14     	; 0x13a2 <terminalCheck1+0x72>
    1394:	20 91 0c 02 	lds	r18, 0x020C
    1398:	30 91 0d 02 	lds	r19, 0x020D
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	49 f0       	breq	.+18     	; 0x13b4 <terminalCheck1+0x84>
    13a2:	02 97       	sbiw	r24, 0x02	; 2
    13a4:	02 97       	sbiw	r24, 0x02	; 2
    13a6:	38 f4       	brcc	.+14     	; 0x13b6 <terminalCheck1+0x86>
    13a8:	80 91 0c 02 	lds	r24, 0x020C
    13ac:	90 91 0d 02 	lds	r25, 0x020D
    13b0:	89 2b       	or	r24, r25
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <terminalCheck1+0x86>
			turn();
    13b4:	c7 dc       	rcall	.-1650   	; 0xd44 <turn>
		front();
    13b6:	23 df       	rcall	.-442    	; 0x11fe <front>
		ot = ct;
    13b8:	80 91 43 02 	lds	r24, 0x0243
    13bc:	90 91 44 02 	lds	r25, 0x0244
    13c0:	90 93 03 02 	sts	0x0203, r25
    13c4:	80 93 02 02 	sts	0x0202, r24
	}
	//????
	right_degrees(30);
    13c8:	8e e1       	ldi	r24, 0x1E	; 30
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	e0 da       	rcall	.-2624   	; 0x98e <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13ce:	86 e9       	ldi	r24, 0x96	; 150
    13d0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    13d4:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
    13d8:	80 91 0c 02 	lds	r24, 0x020C
    13dc:	90 91 0d 02 	lds	r25, 0x020D
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	83 70       	andi	r24, 0x03	; 3
    13e4:	90 78       	andi	r25, 0x80	; 128
    13e6:	99 23       	and	r25, r25
    13e8:	24 f4       	brge	.+8      	; 0x13f2 <terminalCheck1+0xc2>
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	8c 6f       	ori	r24, 0xFC	; 252
    13ee:	9f 6f       	ori	r25, 0xFF	; 255
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	90 93 0d 02 	sts	0x020D, r25
    13f6:	80 93 0c 02 	sts	0x020C, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(2)<50)	//earlier 3
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <terminalCheck1+0xce>
		right();
    13fc:	82 d8       	rcall	.-3836   	; 0x502 <right>
	right_degrees(30);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(2)<50)	//earlier 3
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	f7 d8       	rcall	.-3602   	; 0x5f0 <ADC_Conversion>
    1402:	82 33       	cpi	r24, 0x32	; 50
    1404:	d8 f3       	brcs	.-10     	; 0x13fc <terminalCheck1+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1406:	2c ec       	ldi	r18, 0xCC	; 204
    1408:	4c e4       	ldi	r20, 0x4C	; 76
    140a:	86 e0       	ldi	r24, 0x06	; 6
    140c:	21 50       	subi	r18, 0x01	; 1
    140e:	40 40       	sbci	r20, 0x00	; 0
    1410:	80 40       	sbci	r24, 0x00	; 0
    1412:	e1 f7       	brne	.-8      	; 0x140c <terminalCheck1+0xdc>
    1414:	00 c0       	rjmp	.+0      	; 0x1416 <terminalCheck1+0xe6>
		right();
	_delay_ms(140);
	stop();
    1416:	84 d8       	rcall	.-3832   	; 0x520 <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    1418:	c0 91 43 02 	lds	r28, 0x0243
    141c:	d0 91 44 02 	lds	r29, 0x0244
    1420:	d8 da       	rcall	.-2640   	; 0x9d2 <scan>
    1422:	cc 0f       	add	r28, r28
    1424:	dd 1f       	adc	r29, r29
    1426:	cc 0f       	add	r28, r28
    1428:	dd 1f       	adc	r29, r29
    142a:	c9 5b       	subi	r28, 0xB9	; 185
    142c:	dd 4f       	sbci	r29, 0xFD	; 253
    142e:	99 83       	std	Y+1, r25	; 0x01
    1430:	88 83       	st	Y, r24
	if(term[ct][0]==color[ct])
    1432:	80 91 43 02 	lds	r24, 0x0243
    1436:	90 91 44 02 	lds	r25, 0x0244
    143a:	dc 01       	movw	r26, r24
    143c:	aa 0f       	add	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	aa 0f       	add	r26, r26
    1442:	bb 1f       	adc	r27, r27
    1444:	a9 5b       	subi	r26, 0xB9	; 185
    1446:	bd 4f       	sbci	r27, 0xFD	; 253
    1448:	fc 01       	movw	r30, r24
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	e7 5a       	subi	r30, 0xA7	; 167
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	2d 91       	ld	r18, X+
    1454:	3c 91       	ld	r19, X
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	59 f4       	brne	.+22     	; 0x1476 <terminalCheck1+0x146>
	{
		buzzer_on();
    1460:	bf d8       	rcall	.-3714   	; 0x5e0 <buzzer_on>
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	2f e7       	ldi	r18, 0x7F	; 127
    1466:	46 e1       	ldi	r20, 0x16	; 22
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	20 40       	sbci	r18, 0x00	; 0
    146c:	40 40       	sbci	r20, 0x00	; 0
    146e:	e1 f7       	brne	.-8      	; 0x1468 <terminalCheck1+0x138>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <terminalCheck1+0x142>
    1472:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
    1474:	b9 d8       	rcall	.-3726   	; 0x5e8 <buzzer_off>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	2c e2       	ldi	r18, 0x2C	; 44
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	90 40       	sbci	r25, 0x00	; 0
    1480:	20 40       	sbci	r18, 0x00	; 0
    1482:	e1 f7       	brne	.-8      	; 0x147c <terminalCheck1+0x14c>
    1484:	00 c0       	rjmp	.+0      	; 0x1486 <terminalCheck1+0x156>
    1486:	00 00       	nop

	_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1488:	20 91 43 02 	lds	r18, 0x0243
    148c:	30 91 44 02 	lds	r19, 0x0244
    1490:	f9 01       	movw	r30, r18
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	e9 5b       	subi	r30, 0xB9	; 185
    149c:	fd 4f       	sbci	r31, 0xFD	; 253
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	8f 3f       	cpi	r24, 0xFF	; 255
    14a4:	4f ef       	ldi	r20, 0xFF	; 255
    14a6:	94 07       	cpc	r25, r20
    14a8:	51 f0       	breq	.+20     	; 0x14be <terminalCheck1+0x18e>
    14aa:	f9 01       	movw	r30, r18
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	e7 5a       	subi	r30, 0xA7	; 167
    14b2:	fd 4f       	sbci	r31, 0xFD	; 253
    14b4:	20 81       	ld	r18, Z
    14b6:	31 81       	ldd	r19, Z+1	; 0x01
    14b8:	82 17       	cp	r24, r18
    14ba:	93 07       	cpc	r25, r19
    14bc:	49 f4       	brne	.+18     	; 0x14d0 <terminalCheck1+0x1a0>
		total--;
    14be:	80 91 04 02 	lds	r24, 0x0204
    14c2:	90 91 05 02 	lds	r25, 0x0205
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	90 93 05 02 	sts	0x0205, r25
    14cc:	80 93 04 02 	sts	0x0204, r24
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <terminalCheck2>:
void terminalCheck2()
{
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14da:	86 e9       	ldi	r24, 0x96	; 150
    14dc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14e0:	80 93 2a 01 	sts	0x012A, r24
			back_mm(30);
		else forward_mm(30);
		flag = 1;
	}*/

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    14e4:	80 91 43 02 	lds	r24, 0x0243
    14e8:	90 91 44 02 	lds	r25, 0x0244
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	91 05       	cpc	r25, r1
    14f0:	30 f4       	brcc	.+12     	; 0x14fe <terminalCheck2+0x28>
    14f2:	20 91 0c 02 	lds	r18, 0x020C
    14f6:	30 91 0d 02 	lds	r19, 0x020D
    14fa:	23 2b       	or	r18, r19
    14fc:	69 f0       	breq	.+26     	; 0x1518 <terminalCheck2+0x42>
    14fe:	9c 01       	movw	r18, r24
    1500:	22 50       	subi	r18, 0x02	; 2
    1502:	31 09       	sbc	r19, r1
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	50 f5       	brcc	.+84     	; 0x155e <terminalCheck2+0x88>
    150a:	40 91 0c 02 	lds	r20, 0x020C
    150e:	50 91 0d 02 	lds	r21, 0x020D
    1512:	42 30       	cpi	r20, 0x02	; 2
    1514:	51 05       	cpc	r21, r1
    1516:	19 f5       	brne	.+70     	; 0x155e <terminalCheck2+0x88>
	{
		left_degrees(30);
    1518:	8e e1       	ldi	r24, 0x1E	; 30
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	2f da       	rcall	.-2978   	; 0x97c <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    151e:	86 e9       	ldi	r24, 0x96	; 150
    1520:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1524:	80 93 2a 01 	sts	0x012A, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <terminalCheck2+0x58>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
		left();
    152a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
    152e:	83 e0       	ldi	r24, 0x03	; 3
    1530:	5f d8       	rcall	.-3906   	; 0x5f0 <ADC_Conversion>
    1532:	82 33       	cpi	r24, 0x32	; 50
    1534:	d0 f3       	brcs	.-12     	; 0x152a <terminalCheck2+0x54>
		left();
		//_delay_ms(100);
		stop();
    1536:	0e 94 90 02 	call	0x520	; 0x520 <stop>
		dir=(dir+3)%4;
    153a:	80 91 0c 02 	lds	r24, 0x020C
    153e:	90 91 0d 02 	lds	r25, 0x020D
    1542:	03 96       	adiw	r24, 0x03	; 3
    1544:	83 70       	andi	r24, 0x03	; 3
    1546:	90 78       	andi	r25, 0x80	; 128
    1548:	99 23       	and	r25, r25
    154a:	24 f4       	brge	.+8      	; 0x1554 <terminalCheck2+0x7e>
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	8c 6f       	ori	r24, 0xFC	; 252
    1550:	9f 6f       	ori	r25, 0xFF	; 255
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	90 93 0d 02 	sts	0x020D, r25
    1558:	80 93 0c 02 	sts	0x020C, r24
    155c:	56 c0       	rjmp	.+172    	; 0x160a <terminalCheck2+0x134>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    155e:	02 97       	sbiw	r24, 0x02	; 2
    1560:	30 f4       	brcc	.+12     	; 0x156e <terminalCheck2+0x98>
    1562:	80 91 0c 02 	lds	r24, 0x020C
    1566:	90 91 0d 02 	lds	r25, 0x020D
    156a:	02 97       	sbiw	r24, 0x02	; 2
    156c:	49 f0       	breq	.+18     	; 0x1580 <terminalCheck2+0xaa>
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	48 f5       	brcc	.+82     	; 0x15c6 <terminalCheck2+0xf0>
    1574:	80 91 0c 02 	lds	r24, 0x020C
    1578:	90 91 0d 02 	lds	r25, 0x020D
    157c:	89 2b       	or	r24, r25
    157e:	19 f5       	brne	.+70     	; 0x15c6 <terminalCheck2+0xf0>
		{
			right_degrees(30);
    1580:	8e e1       	ldi	r24, 0x1E	; 30
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	04 da       	rcall	.-3064   	; 0x98e <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1586:	86 e9       	ldi	r24, 0x96	; 150
    1588:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    158c:	80 93 2a 01 	sts	0x012A, r24
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <terminalCheck2+0xc0>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(3)<50)
				right();
    1592:	0e 94 81 02 	call	0x502	; 0x502 <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(3)<50)
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	2b d8       	rcall	.-4010   	; 0x5f0 <ADC_Conversion>
    159a:	82 33       	cpi	r24, 0x32	; 50
    159c:	d0 f3       	brcs	.-12     	; 0x1592 <terminalCheck2+0xbc>
				right();
			//_delay_ms(100);
			stop();	
    159e:	0e 94 90 02 	call	0x520	; 0x520 <stop>
			dir=(dir+1)%4;
    15a2:	80 91 0c 02 	lds	r24, 0x020C
    15a6:	90 91 0d 02 	lds	r25, 0x020D
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	83 70       	andi	r24, 0x03	; 3
    15ae:	90 78       	andi	r25, 0x80	; 128
    15b0:	99 23       	and	r25, r25
    15b2:	24 f4       	brge	.+8      	; 0x15bc <terminalCheck2+0xe6>
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	8c 6f       	ori	r24, 0xFC	; 252
    15b8:	9f 6f       	ori	r25, 0xFF	; 255
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	90 93 0d 02 	sts	0x020D, r25
    15c0:	80 93 0c 02 	sts	0x020C, r24
    15c4:	22 c0       	rjmp	.+68     	; 0x160a <terminalCheck2+0x134>
		}
	else {
		left_degrees(150);
    15c6:	86 e9       	ldi	r24, 0x96	; 150
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	d8 d9       	rcall	.-3152   	; 0x97c <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15cc:	86 e9       	ldi	r24, 0x96	; 150
    15ce:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    15d2:	80 93 2a 01 	sts	0x012A, r24
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <terminalCheck2+0x106>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
		left();
    15d8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	08 d8       	rcall	.-4080   	; 0x5f0 <ADC_Conversion>
    15e0:	82 33       	cpi	r24, 0x32	; 50
    15e2:	d0 f3       	brcs	.-12     	; 0x15d8 <terminalCheck2+0x102>
		left();
		//_delay_ms(50);
		stop();
    15e4:	0e 94 90 02 	call	0x520	; 0x520 <stop>
		dir=(dir+2)%4;
    15e8:	80 91 0c 02 	lds	r24, 0x020C
    15ec:	90 91 0d 02 	lds	r25, 0x020D
    15f0:	02 96       	adiw	r24, 0x02	; 2
    15f2:	83 70       	andi	r24, 0x03	; 3
    15f4:	90 78       	andi	r25, 0x80	; 128
    15f6:	99 23       	and	r25, r25
    15f8:	24 f4       	brge	.+8      	; 0x1602 <terminalCheck2+0x12c>
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	8c 6f       	ori	r24, 0xFC	; 252
    15fe:	9f 6f       	ori	r25, 0xFF	; 255
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	90 93 0d 02 	sts	0x020D, r25
    1606:	80 93 0c 02 	sts	0x020C, r24
    160a:	2f ef       	ldi	r18, 0xFF	; 255
    160c:	4f ef       	ldi	r20, 0xFF	; 255
    160e:	81 e1       	ldi	r24, 0x11	; 17
    1610:	21 50       	subi	r18, 0x01	; 1
    1612:	40 40       	sbci	r20, 0x00	; 0
    1614:	80 40       	sbci	r24, 0x00	; 0
    1616:	e1 f7       	brne	.-8      	; 0x1610 <terminalCheck2+0x13a>
    1618:	00 c0       	rjmp	.+0      	; 0x161a <terminalCheck2+0x144>
    161a:	00 00       	nop
	_delay_ms(400);
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
// 	left();
// 	_delay_ms(100);
	stop();
    161c:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	term[ct][1] = scan();
    1620:	c0 91 43 02 	lds	r28, 0x0243
    1624:	d0 91 44 02 	lds	r29, 0x0244
    1628:	d4 d9       	rcall	.-3160   	; 0x9d2 <scan>
    162a:	cc 0f       	add	r28, r28
    162c:	dd 1f       	adc	r29, r29
    162e:	cc 0f       	add	r28, r28
    1630:	dd 1f       	adc	r29, r29
    1632:	c9 5b       	subi	r28, 0xB9	; 185
    1634:	dd 4f       	sbci	r29, 0xFD	; 253
    1636:	9b 83       	std	Y+3, r25	; 0x03
    1638:	8a 83       	std	Y+2, r24	; 0x02
// 	}
// 	if(term[ct][1]==-1)
// 		buzzer();
// 	
	//_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    163a:	80 91 43 02 	lds	r24, 0x0243
    163e:	90 91 44 02 	lds	r25, 0x0244
    1642:	fc 01       	movw	r30, r24
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	e9 5b       	subi	r30, 0xB9	; 185
    164e:	fd 4f       	sbci	r31, 0xFD	; 253
    1650:	22 81       	ldd	r18, Z+2	; 0x02
    1652:	33 81       	ldd	r19, Z+3	; 0x03
    1654:	2f 3f       	cpi	r18, 0xFF	; 255
    1656:	4f ef       	ldi	r20, 0xFF	; 255
    1658:	34 07       	cpc	r19, r20
    165a:	51 f0       	breq	.+20     	; 0x1670 <terminalCheck2+0x19a>
    165c:	fc 01       	movw	r30, r24
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	e7 5a       	subi	r30, 0xA7	; 167
    1664:	fd 4f       	sbci	r31, 0xFD	; 253
    1666:	40 81       	ld	r20, Z
    1668:	51 81       	ldd	r21, Z+1	; 0x01
    166a:	24 17       	cp	r18, r20
    166c:	35 07       	cpc	r19, r21
    166e:	51 f4       	brne	.+20     	; 0x1684 <terminalCheck2+0x1ae>
		total--;
    1670:	20 91 04 02 	lds	r18, 0x0204
    1674:	30 91 05 02 	lds	r19, 0x0205
    1678:	21 50       	subi	r18, 0x01	; 1
    167a:	31 09       	sbc	r19, r1
    167c:	30 93 05 02 	sts	0x0205, r19
    1680:	20 93 04 02 	sts	0x0204, r18
	visited[ct] = 1;
    1684:	fc 01       	movw	r30, r24
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	e0 5e       	subi	r30, 0xE0	; 224
    168c:	fd 4f       	sbci	r31, 0xFD	; 253
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
	visitedCount++;
    1696:	80 91 0e 02 	lds	r24, 0x020E
    169a:	90 91 0f 02 	lds	r25, 0x020F
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	90 93 0f 02 	sts	0x020F, r25
    16a4:	80 93 0e 02 	sts	0x020E, r24
// 		
// 	left();
// 	_delay_ms(1000);
// 	stop();
// 	}
}
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <pick>:

void pick(int side)
{	
    16ae:	cf 93       	push	r28
    16b0:	c8 2f       	mov	r28, r24
	open(side);
    16b2:	52 da       	rcall	.-2908   	; 0xb58 <open>
	lower(side);
    16b4:	8c 2f       	mov	r24, r28
    16b6:	20 da       	rcall	.-3008   	; 0xaf8 <lower>
	//_delay_ms(1000);
	close(side);
    16b8:	8c 2f       	mov	r24, r28
    16ba:	82 da       	rcall	.-2812   	; 0xbc0 <close>
	//_delay_ms(3000);
	elevate();//mid
    16bc:	34 da       	rcall	.-2968   	; 0xb26 <elevate>
	///_delay_ms(1000);
	armCount--;
    16be:	80 91 06 02 	lds	r24, 0x0206
    16c2:	90 91 07 02 	lds	r25, 0x0207
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	90 93 07 02 	sts	0x0207, r25
    16cc:	80 93 06 02 	sts	0x0206, r24
    16d0:	2f ef       	ldi	r18, 0xFF	; 255
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	9c e2       	ldi	r25, 0x2C	; 44
    16d6:	21 50       	subi	r18, 0x01	; 1
    16d8:	80 40       	sbci	r24, 0x00	; 0
    16da:	90 40       	sbci	r25, 0x00	; 0
    16dc:	e1 f7       	brne	.-8      	; 0x16d6 <pick+0x28>
    16de:	00 c0       	rjmp	.+0      	; 0x16e0 <pick+0x32>
    16e0:	00 00       	nop
// 	if(armCount==0)
// 	{
// 		servo_1_free();
// 		servo_3_free();
// 	}
}
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <position>:

void position(int armNo, int side)
{
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	8c 01       	movw	r16, r24
    16f0:	eb 01       	movw	r28, r22
	int a;
	if (ct == ot)
    16f2:	20 91 43 02 	lds	r18, 0x0243
    16f6:	30 91 44 02 	lds	r19, 0x0244
    16fa:	40 91 02 02 	lds	r20, 0x0202
    16fe:	50 91 03 02 	lds	r21, 0x0203
    1702:	24 17       	cp	r18, r20
    1704:	35 07       	cpc	r19, r21
    1706:	09 f0       	breq	.+2      	; 0x170a <position+0x24>
    1708:	7d c0       	rjmp	.+250    	; 0x1804 <position+0x11e>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    170a:	c9 01       	movw	r24, r18
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	30 f4       	brcc	.+12     	; 0x171e <position+0x38>
    1712:	40 91 0c 02 	lds	r20, 0x020C
    1716:	50 91 0d 02 	lds	r21, 0x020D
    171a:	45 2b       	or	r20, r21
    171c:	61 f0       	breq	.+24     	; 0x1736 <position+0x50>
    171e:	22 50       	subi	r18, 0x02	; 2
    1720:	31 09       	sbc	r19, r1
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	68 f4       	brcc	.+26     	; 0x1742 <position+0x5c>
    1728:	40 91 0c 02 	lds	r20, 0x020C
    172c:	50 91 0d 02 	lds	r21, 0x020D
    1730:	42 30       	cpi	r20, 0x02	; 2
    1732:	51 05       	cpc	r21, r1
    1734:	31 f4       	brne	.+12     	; 0x1742 <position+0x5c>
		{
			if (armNo != side)
    1736:	0c 17       	cp	r16, r28
    1738:	1d 07       	cpc	r17, r29
    173a:	09 f4       	brne	.+2      	; 0x173e <position+0x58>
    173c:	4c c0       	rjmp	.+152    	; 0x17d6 <position+0xf0>
				turn();
    173e:	02 db       	rcall	.-2556   	; 0xd44 <turn>
    1740:	4a c0       	rjmp	.+148    	; 0x17d6 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	91 05       	cpc	r25, r1
    1746:	38 f4       	brcc	.+14     	; 0x1756 <position+0x70>
    1748:	40 91 0c 02 	lds	r20, 0x020C
    174c:	50 91 0d 02 	lds	r21, 0x020D
    1750:	42 30       	cpi	r20, 0x02	; 2
    1752:	51 05       	cpc	r21, r1
    1754:	49 f0       	breq	.+18     	; 0x1768 <position+0x82>
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	58 f4       	brcc	.+22     	; 0x1772 <position+0x8c>
    175c:	40 91 0c 02 	lds	r20, 0x020C
    1760:	50 91 0d 02 	lds	r21, 0x020D
    1764:	45 2b       	or	r20, r21
    1766:	29 f4       	brne	.+10     	; 0x1772 <position+0x8c>
		{
			if (armNo == side)
    1768:	0c 17       	cp	r16, r28
    176a:	1d 07       	cpc	r17, r29
    176c:	a1 f5       	brne	.+104    	; 0x17d6 <position+0xf0>
				turn();
    176e:	ea da       	rcall	.-2604   	; 0xd44 <turn>
    1770:	32 c0       	rjmp	.+100    	; 0x17d6 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	91 05       	cpc	r25, r1
    1776:	38 f4       	brcc	.+14     	; 0x1786 <position+0xa0>
    1778:	40 91 0c 02 	lds	r20, 0x020C
    177c:	50 91 0d 02 	lds	r21, 0x020D
    1780:	41 30       	cpi	r20, 0x01	; 1
    1782:	51 05       	cpc	r21, r1
    1784:	51 f0       	breq	.+20     	; 0x179a <position+0xb4>
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	70 f4       	brcc	.+28     	; 0x17a8 <position+0xc2>
    178c:	40 91 0c 02 	lds	r20, 0x020C
    1790:	50 91 0d 02 	lds	r21, 0x020D
    1794:	43 30       	cpi	r20, 0x03	; 3
    1796:	51 05       	cpc	r21, r1
    1798:	39 f4       	brne	.+14     	; 0x17a8 <position+0xc2>
		{
			if (armNo != side)
    179a:	0c 17       	cp	r16, r28
    179c:	1d 07       	cpc	r17, r29
    179e:	11 f0       	breq	.+4      	; 0x17a4 <position+0xbe>
			turnRight();
    17a0:	32 da       	rcall	.-2972   	; 0xc06 <turnRight>
    17a2:	19 c0       	rjmp	.+50     	; 0x17d6 <position+0xf0>
			else turnLeft();
    17a4:	7b da       	rcall	.-2826   	; 0xc9c <turnLeft>
    17a6:	17 c0       	rjmp	.+46     	; 0x17d6 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    17a8:	02 97       	sbiw	r24, 0x02	; 2
    17aa:	30 f4       	brcc	.+12     	; 0x17b8 <position+0xd2>
    17ac:	80 91 0c 02 	lds	r24, 0x020C
    17b0:	90 91 0d 02 	lds	r25, 0x020D
    17b4:	03 97       	sbiw	r24, 0x03	; 3
    17b6:	49 f0       	breq	.+18     	; 0x17ca <position+0xe4>
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	60 f4       	brcc	.+24     	; 0x17d6 <position+0xf0>
    17be:	80 91 0c 02 	lds	r24, 0x020C
    17c2:	90 91 0d 02 	lds	r25, 0x020D
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	31 f4       	brne	.+12     	; 0x17d6 <position+0xf0>
					if (armNo == side)
    17ca:	0c 17       	cp	r16, r28
    17cc:	1d 07       	cpc	r17, r29
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <position+0xee>
						turnRight();
    17d0:	1a da       	rcall	.-3020   	; 0xc06 <turnRight>
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <position+0xf0>
					else turnLeft();
    17d4:	63 da       	rcall	.-2874   	; 0xc9c <turnLeft>
		if(flag==1 && (dir==0 || dir==2))
    17d6:	80 91 10 02 	lds	r24, 0x0210
    17da:	90 91 11 02 	lds	r25, 0x0211
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <position+0xfe>
    17e2:	80 c0       	rjmp	.+256    	; 0x18e4 <position+0x1fe>
    17e4:	80 91 0c 02 	lds	r24, 0x020C
    17e8:	90 91 0d 02 	lds	r25, 0x020D
    17ec:	8d 7f       	andi	r24, 0xFD	; 253
    17ee:	89 2b       	or	r24, r25
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <position+0x10e>
    17f2:	78 c0       	rjmp	.+240    	; 0x18e4 <position+0x1fe>
		{
			back_mm(60);
    17f4:	8c e3       	ldi	r24, 0x3C	; 60
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	b8 d8       	rcall	.-3728   	; 0x96a <back_mm>
			flag=0;
    17fa:	10 92 11 02 	sts	0x0211, r1
    17fe:	10 92 10 02 	sts	0x0210, r1
    1802:	70 c0       	rjmp	.+224    	; 0x18e4 <position+0x1fe>
		}	
	}
	else
	{
		if (dir == 1 || dir == 3)
    1804:	80 91 0c 02 	lds	r24, 0x020C
    1808:	90 91 0d 02 	lds	r25, 0x020D
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	49 f4       	brne	.+18     	; 0x1824 <position+0x13e>
			if (ct == 0 || ct == 3)
    1812:	21 15       	cp	r18, r1
    1814:	31 05       	cpc	r19, r1
    1816:	19 f0       	breq	.+6      	; 0x181e <position+0x138>
    1818:	23 30       	cpi	r18, 0x03	; 3
    181a:	31 05       	cpc	r19, r1
    181c:	11 f4       	brne	.+4      	; 0x1822 <position+0x13c>
				turnRight();
    181e:	f3 d9       	rcall	.-3098   	; 0xc06 <turnRight>
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <position+0x13e>
			else turnLeft();
    1822:	3c da       	rcall	.-2952   	; 0xc9c <turnLeft>
		if (dir == 0 || dir == 2)
    1824:	80 91 0c 02 	lds	r24, 0x020C
    1828:	90 91 0d 02 	lds	r25, 0x020D
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	21 f0       	breq	.+8      	; 0x1838 <position+0x152>
    1830:	02 97       	sbiw	r24, 0x02	; 2
    1832:	09 f0       	breq	.+2      	; 0x1836 <position+0x150>
    1834:	33 c0       	rjmp	.+102    	; 0x189c <position+0x1b6>
    1836:	07 c0       	rjmp	.+14     	; 0x1846 <position+0x160>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1838:	80 91 43 02 	lds	r24, 0x0243
    183c:	90 91 44 02 	lds	r25, 0x0244
    1840:	02 97       	sbiw	r24, 0x02	; 2
    1842:	c8 f4       	brcc	.+50     	; 0x1876 <position+0x190>
    1844:	07 c0       	rjmp	.+14     	; 0x1854 <position+0x16e>
    1846:	80 91 43 02 	lds	r24, 0x0243
    184a:	90 91 44 02 	lds	r25, 0x0244
    184e:	02 97       	sbiw	r24, 0x02	; 2
    1850:	02 97       	sbiw	r24, 0x02	; 2
    1852:	88 f4       	brcc	.+34     	; 0x1876 <position+0x190>
			{
				if (ot != 4 && ot != 5)
    1854:	80 91 02 02 	lds	r24, 0x0202
    1858:	90 91 03 02 	lds	r25, 0x0203
    185c:	04 97       	sbiw	r24, 0x04	; 4
    185e:	02 97       	sbiw	r24, 0x02	; 2
    1860:	10 f0       	brcs	.+4      	; 0x1866 <position+0x180>
				{
					turnLeft();
    1862:	1c da       	rcall	.-3016   	; 0xc9c <turnLeft>
					front();
    1864:	cc dc       	rcall	.-1640   	; 0x11fe <front>
				}
				if (armNo == side)
    1866:	0c 17       	cp	r16, r28
    1868:	1d 07       	cpc	r17, r29
    186a:	11 f4       	brne	.+4      	; 0x1870 <position+0x18a>
				{
					front();
    186c:	c8 dc       	rcall	.-1648   	; 0x11fe <front>
    186e:	32 c0       	rjmp	.+100    	; 0x18d4 <position+0x1ee>
				}
				else
				{
					front();
    1870:	c6 dc       	rcall	.-1652   	; 0x11fe <front>
					turn();
    1872:	68 da       	rcall	.-2864   	; 0xd44 <turn>
    1874:	2f c0       	rjmp	.+94     	; 0x18d4 <position+0x1ee>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1876:	80 91 02 02 	lds	r24, 0x0202
    187a:	90 91 03 02 	lds	r25, 0x0203
    187e:	04 97       	sbiw	r24, 0x04	; 4
    1880:	02 97       	sbiw	r24, 0x02	; 2
    1882:	10 f0       	brcs	.+4      	; 0x1888 <position+0x1a2>
				{
					turnLeft();
    1884:	0b da       	rcall	.-3050   	; 0xc9c <turnLeft>
					front();
    1886:	bb dc       	rcall	.-1674   	; 0x11fe <front>
				}
				if (armNo == side)
    1888:	0c 17       	cp	r16, r28
    188a:	1d 07       	cpc	r17, r29
    188c:	19 f4       	brne	.+6      	; 0x1894 <position+0x1ae>
				{
					turn();
    188e:	5a da       	rcall	.-2892   	; 0xd44 <turn>
					front();
    1890:	b6 dc       	rcall	.-1684   	; 0x11fe <front>
    1892:	20 c0       	rjmp	.+64     	; 0x18d4 <position+0x1ee>
				}
				else
				{
					turn();
    1894:	57 da       	rcall	.-2898   	; 0xd44 <turn>
					front();
    1896:	b3 dc       	rcall	.-1690   	; 0x11fe <front>
					turn();
    1898:	55 da       	rcall	.-2902   	; 0xd44 <turn>
    189a:	1c c0       	rjmp	.+56     	; 0x18d4 <position+0x1ee>
				}
			}
		}
		else
		{
			if (armNo == side)
    189c:	0c 17       	cp	r16, r28
    189e:	1d 07       	cpc	r17, r29
    18a0:	69 f4       	brne	.+26     	; 0x18bc <position+0x1d6>
			{
				if (ct == 0 || ct == 3)
    18a2:	80 91 43 02 	lds	r24, 0x0243
    18a6:	90 91 44 02 	lds	r25, 0x0244
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <position+0x1cc>
    18ae:	03 97       	sbiw	r24, 0x03	; 3
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <position+0x1d0>
				turnRight();
    18b2:	a9 d9       	rcall	.-3246   	; 0xc06 <turnRight>
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <position+0x1d2>
				else turnLeft();
    18b6:	f2 d9       	rcall	.-3100   	; 0xc9c <turnLeft>
				front();
    18b8:	a2 dc       	rcall	.-1724   	; 0x11fe <front>
    18ba:	0c c0       	rjmp	.+24     	; 0x18d4 <position+0x1ee>
			}
			else
			{
				if (ct == 0 || ct == 3)
    18bc:	80 91 43 02 	lds	r24, 0x0243
    18c0:	90 91 44 02 	lds	r25, 0x0244
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	11 f0       	breq	.+4      	; 0x18cc <position+0x1e6>
    18c8:	03 97       	sbiw	r24, 0x03	; 3
    18ca:	11 f4       	brne	.+4      	; 0x18d0 <position+0x1ea>
				turnRight();
    18cc:	9c d9       	rcall	.-3272   	; 0xc06 <turnRight>
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <position+0x1ec>
				else turnLeft();
    18d0:	e5 d9       	rcall	.-3126   	; 0xc9c <turnLeft>
				front();
    18d2:	95 dc       	rcall	.-1750   	; 0x11fe <front>
			}
		}
		ot = ct;
    18d4:	80 91 43 02 	lds	r24, 0x0243
    18d8:	90 91 44 02 	lds	r25, 0x0244
    18dc:	90 93 03 02 	sts	0x0203, r25
    18e0:	80 93 02 02 	sts	0x0202, r24
	}
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret

000018ee <pickNode>:

void pickNode(int armNo, int side)
{
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	8c 01       	movw	r16, r24
    18f8:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    18fa:	fc 01       	movw	r30, r24
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	e3 59       	subi	r30, 0x93	; 147
    1902:	fd 4f       	sbci	r31, 0xFD	; 253
    1904:	a0 91 43 02 	lds	r26, 0x0243
    1908:	b0 91 44 02 	lds	r27, 0x0244
    190c:	aa 0f       	add	r26, r26
    190e:	bb 1f       	adc	r27, r27
    1910:	a6 0f       	add	r26, r22
    1912:	b7 1f       	adc	r27, r23
    1914:	aa 0f       	add	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	a9 5b       	subi	r26, 0xB9	; 185
    191a:	bd 4f       	sbci	r27, 0xFD	; 253
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
	position(armNo, side);
    1924:	c8 01       	movw	r24, r16
    1926:	df de       	rcall	.-578    	; 0x16e6 <position>
	pick(armNo);
    1928:	c8 01       	movw	r24, r16
    192a:	c1 de       	rcall	.-638    	; 0x16ae <pick>
	term[ct][side] = -1;
    192c:	80 91 43 02 	lds	r24, 0x0243
    1930:	90 91 44 02 	lds	r25, 0x0244
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	c8 0f       	add	r28, r24
    193a:	d9 1f       	adc	r29, r25
    193c:	cc 0f       	add	r28, r28
    193e:	dd 1f       	adc	r29, r29
    1940:	c9 5b       	subi	r28, 0xB9	; 185
    1942:	dd 4f       	sbci	r29, 0xFD	; 253
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	99 83       	std	Y+1, r25	; 0x01
    194a:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	ec 01       	movw	r28, r24
    1960:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    1962:	fc 01       	movw	r30, r24
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	e3 59       	subi	r30, 0x93	; 147
    196a:	fd 4f       	sbci	r31, 0xFD	; 253
    196c:	db 01       	movw	r26, r22
    196e:	aa 0f       	add	r26, r26
    1970:	bb 1f       	adc	r27, r27
    1972:	a1 5c       	subi	r26, 0xC1	; 193
    1974:	bd 4f       	sbci	r27, 0xFD	; 253
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    197e:	c6 17       	cp	r28, r22
    1980:	d7 07       	cpc	r29, r23
    1982:	39 f4       	brne	.+14     	; 0x1992 <pickSort+0x3c>
    1984:	80 91 0c 02 	lds	r24, 0x020C
    1988:	90 91 0d 02 	lds	r25, 0x020D
    198c:	89 2b       	or	r24, r25
    198e:	49 f4       	brne	.+18     	; 0x19a2 <pickSort+0x4c>
    1990:	06 c0       	rjmp	.+12     	; 0x199e <pickSort+0x48>
    1992:	80 91 0c 02 	lds	r24, 0x020C
    1996:	90 91 0d 02 	lds	r25, 0x020D
    199a:	02 97       	sbiw	r24, 0x02	; 2
    199c:	11 f4       	brne	.+4      	; 0x19a2 <pickSort+0x4c>
		turn();
    199e:	d2 d9       	rcall	.-3164   	; 0xd44 <turn>
    19a0:	0c c0       	rjmp	.+24     	; 0x19ba <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    19a2:	80 91 0c 02 	lds	r24, 0x020C
    19a6:	90 91 0d 02 	lds	r25, 0x020D
    19aa:	8d 7f       	andi	r24, 0xFD	; 253
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	29 f4       	brne	.+10     	; 0x19ba <pickSort+0x64>
			if (armNo == 0)
    19b0:	20 97       	sbiw	r28, 0x00	; 0
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <pickSort+0x62>
				turnLeft();
    19b4:	73 d9       	rcall	.-3354   	; 0xc9c <turnLeft>
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <pickSort+0x64>
			else turnRight();
    19b8:	26 d9       	rcall	.-3508   	; 0xc06 <turnRight>
	}
	back_mm(30);
    19ba:	8e e1       	ldi	r24, 0x1E	; 30
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 b5 04 	call	0x96a	; 0x96a <back_mm>
	pick(armNo);
    19c2:	ce 01       	movw	r24, r28
    19c4:	74 de       	rcall	.-792    	; 0x16ae <pick>
	sort[sortNo] = -1;
    19c6:	f8 01       	movw	r30, r16
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	e1 5c       	subi	r30, 0xC1	; 193
    19ce:	fd 4f       	sbci	r31, 0xFD	; 253
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <pickup>:
void pickup()
{
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    19ee:	20 91 43 02 	lds	r18, 0x0243
    19f2:	30 91 44 02 	lds	r19, 0x0244
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	30 f4       	brcc	.+12     	; 0x1a08 <pickup+0x26>
    19fc:	80 91 0c 02 	lds	r24, 0x020C
    1a00:	90 91 0d 02 	lds	r25, 0x020D
    1a04:	02 97       	sbiw	r24, 0x02	; 2
    1a06:	79 f0       	breq	.+30     	; 0x1a26 <pickup+0x44>
    1a08:	c9 01       	movw	r24, r18
    1a0a:	02 97       	sbiw	r24, 0x02	; 2
    1a0c:	02 97       	sbiw	r24, 0x02	; 2
    1a0e:	80 f4       	brcc	.+32     	; 0x1a30 <pickup+0x4e>
    1a10:	80 91 0c 02 	lds	r24, 0x020C
    1a14:	90 91 0d 02 	lds	r25, 0x020D
    1a18:	89 2b       	or	r24, r25
    1a1a:	79 f0       	breq	.+30     	; 0x1a3a <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1a1c:	c1 e0       	ldi	r28, 0x01	; 1
    1a1e:	d0 e0       	ldi	r29, 0x00	; 0
    1a20:	00 e0       	ldi	r16, 0x00	; 0
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	0e c0       	rjmp	.+28     	; 0x1a42 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
    1a28:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1a2a:	01 e0       	ldi	r16, 0x01	; 1
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1a30:	c1 e0       	ldi	r28, 0x01	; 1
    1a32:	d0 e0       	ldi	r29, 0x00	; 0
    1a34:	00 e0       	ldi	r16, 0x00	; 0
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1a3a:	c0 e0       	ldi	r28, 0x00	; 0
    1a3c:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1a3e:	01 e0       	ldi	r16, 0x01	; 1
    1a40:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1a42:	f9 01       	movw	r30, r18
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	e0 5e       	subi	r30, 0xE0	; 224
    1a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	89 2b       	or	r24, r25
    1a52:	79 f4       	brne	.+30     	; 0x1a72 <pickup+0x90>
		if (term[ct][0] == -2)
    1a54:	f9 01       	movw	r30, r18
    1a56:	ee 0f       	add	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	e9 5b       	subi	r30, 0xB9	; 185
    1a60:	fd 4f       	sbci	r31, 0xFD	; 253
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	02 96       	adiw	r24, 0x02	; 2
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <pickup+0x8e>
		{
			terminalCheck1();
    1a6a:	62 dc       	rcall	.-1852   	; 0x1330 <terminalCheck1>
			terminalCheck2();
    1a6c:	34 dd       	rcall	.-1432   	; 0x14d6 <terminalCheck2>
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <pickup+0x90>
		}
		else	terminalCheck2();
    1a70:	32 dd       	rcall	.-1436   	; 0x14d6 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1a72:	20 91 43 02 	lds	r18, 0x0243
    1a76:	30 91 44 02 	lds	r19, 0x0244
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	e9 5b       	subi	r30, 0xB9	; 185
    1a86:	fd 4f       	sbci	r31, 0xFD	; 253
    1a88:	40 81       	ld	r20, Z
    1a8a:	51 81       	ldd	r21, Z+1	; 0x01
    1a8c:	f9 01       	movw	r30, r18
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	e7 5a       	subi	r30, 0xA7	; 167
    1a94:	fd 4f       	sbci	r31, 0xFD	; 253
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	48 17       	cp	r20, r24
    1a9c:	59 07       	cpc	r21, r25
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <pickup+0xc6>
    1aa0:	4f 3f       	cpi	r20, 0xFF	; 255
    1aa2:	6f ef       	ldi	r22, 0xFF	; 255
    1aa4:	56 07       	cpc	r21, r22
    1aa6:	89 f4       	brne	.+34     	; 0x1aca <pickup+0xe8>
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	e9 5b       	subi	r30, 0xB9	; 185
    1ab4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab6:	62 81       	ldd	r22, Z+2	; 0x02
    1ab8:	73 81       	ldd	r23, Z+3	; 0x03
    1aba:	86 17       	cp	r24, r22
    1abc:	97 07       	cpc	r25, r23
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <pickup+0xe0>
    1ac0:	ee c1       	rjmp	.+988    	; 0x1e9e <pickup+0x4bc>
    1ac2:	6f 3f       	cpi	r22, 0xFF	; 255
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <pickup+0xe8>
    1ac8:	ea c1       	rjmp	.+980    	; 0x1e9e <pickup+0x4bc>
		{
			if (armCount == 2)
    1aca:	60 91 06 02 	lds	r22, 0x0206
    1ace:	70 91 07 02 	lds	r23, 0x0207
    1ad2:	62 30       	cpi	r22, 0x02	; 2
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <pickup+0xf8>
    1ad8:	b0 c0       	rjmp	.+352    	; 0x1c3a <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1ada:	e0 91 69 02 	lds	r30, 0x0269
    1ade:	f0 91 6a 02 	lds	r31, 0x026A
    1ae2:	df 01       	movw	r26, r30
    1ae4:	aa 0f       	add	r26, r26
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	a7 5a       	subi	r26, 0xA7	; 167
    1aea:	bd 4f       	sbci	r27, 0xFD	; 253
    1aec:	6d 91       	ld	r22, X+
    1aee:	7c 91       	ld	r23, X
    1af0:	46 17       	cp	r20, r22
    1af2:	57 07       	cpc	r21, r23
    1af4:	79 f0       	breq	.+30     	; 0x1b14 <pickup+0x132>
    1af6:	d9 01       	movw	r26, r18
    1af8:	aa 0f       	add	r26, r26
    1afa:	bb 1f       	adc	r27, r27
    1afc:	aa 0f       	add	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	a9 5b       	subi	r26, 0xB9	; 185
    1b02:	bd 4f       	sbci	r27, 0xFD	; 253
    1b04:	12 96       	adiw	r26, 0x02	; 2
    1b06:	ed 90       	ld	r14, X+
    1b08:	fc 90       	ld	r15, X
    1b0a:	13 97       	sbiw	r26, 0x03	; 3
    1b0c:	6e 15       	cp	r22, r14
    1b0e:	7f 05       	cpc	r23, r15
    1b10:	59 f4       	brne	.+22     	; 0x1b28 <pickup+0x146>
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 1);
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	c8 01       	movw	r24, r16
    1b1a:	e9 de       	rcall	.-558    	; 0x18ee <pickNode>
    1b1c:	8e c0       	rjmp	.+284    	; 0x1c3a <pickup+0x258>
					else	pickNode(arm1, 0);
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	ce 01       	movw	r24, r28
    1b24:	e4 de       	rcall	.-568    	; 0x18ee <pickNode>
    1b26:	89 c0       	rjmp	.+274    	; 0x1c3a <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1b28:	8e 15       	cp	r24, r14
    1b2a:	9f 05       	cpc	r25, r15
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <pickup+0x14e>
    1b2e:	4e c0       	rjmp	.+156    	; 0x1bcc <pickup+0x1ea>
    1b30:	ef 20       	and	r14, r15
    1b32:	e0 94       	com	r14
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <pickup+0x156>
    1b36:	4a c0       	rjmp	.+148    	; 0x1bcc <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1b38:	48 17       	cp	r20, r24
    1b3a:	59 07       	cpc	r21, r25
    1b3c:	69 f0       	breq	.+26     	; 0x1b58 <pickup+0x176>
    1b3e:	4f 3f       	cpi	r20, 0xFF	; 255
    1b40:	af ef       	ldi	r26, 0xFF	; 255
    1b42:	5a 07       	cpc	r21, r26
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <pickup+0x176>
					{
						pickNode(arm1, 0);
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	d0 de       	rcall	.-608    	; 0x18ee <pickNode>
						pickNode(arm0, 1);
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	c8 01       	movw	r24, r16
    1b54:	cc de       	rcall	.-616    	; 0x18ee <pickNode>
    1b56:	71 c0       	rjmp	.+226    	; 0x1c3a <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1b58:	21 70       	andi	r18, 0x01	; 1
    1b5a:	30 78       	andi	r19, 0x80	; 128
    1b5c:	33 23       	and	r19, r19
    1b5e:	34 f4       	brge	.+12     	; 0x1b6c <pickup+0x18a>
    1b60:	21 50       	subi	r18, 0x01	; 1
    1b62:	31 09       	sbc	r19, r1
    1b64:	2e 6f       	ori	r18, 0xFE	; 254
    1b66:	3f 6f       	ori	r19, 0xFF	; 255
    1b68:	2f 5f       	subi	r18, 0xFF	; 255
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	d9 01       	movw	r26, r18
    1b6e:	aa 0f       	add	r26, r26
    1b70:	bb 1f       	adc	r27, r27
    1b72:	a1 5c       	subi	r26, 0xC1	; 193
    1b74:	bd 4f       	sbci	r27, 0xFD	; 253
    1b76:	2d 91       	ld	r18, X+
    1b78:	3c 91       	ld	r19, X
    1b7a:	2f 3f       	cpi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	09 f1       	breq	.+66     	; 0x1bc2 <pickup+0x1e0>
    1b80:	df 01       	movw	r26, r30
    1b82:	aa 0f       	add	r26, r26
    1b84:	bb 1f       	adc	r27, r27
    1b86:	aa 0f       	add	r26, r26
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	a9 5b       	subi	r26, 0xB9	; 185
    1b8c:	bd 4f       	sbci	r27, 0xFD	; 253
    1b8e:	2d 91       	ld	r18, X+
    1b90:	3c 91       	ld	r19, X
    1b92:	62 17       	cp	r22, r18
    1b94:	73 07       	cpc	r23, r19
    1b96:	a9 f0       	breq	.+42     	; 0x1bc2 <pickup+0x1e0>
    1b98:	2f 3f       	cpi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	91 f0       	breq	.+36     	; 0x1bc2 <pickup+0x1e0>
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	e9 5b       	subi	r30, 0xB9	; 185
    1ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    1baa:	22 81       	ldd	r18, Z+2	; 0x02
    1bac:	33 81       	ldd	r19, Z+3	; 0x03
    1bae:	62 17       	cp	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <pickup+0x1e0>
    1bb4:	2f 3f       	cpi	r18, 0xFF	; 255
    1bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <pickup+0x1e0>
    1bba:	48 17       	cp	r20, r24
    1bbc:	59 07       	cpc	r21, r25
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <pickup+0x1e0>
    1bc0:	6e c1       	rjmp	.+732    	; 0x1e9e <pickup+0x4bc>
						pickNode(arm0, 1);
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	92 de       	rcall	.-732    	; 0x18ee <pickNode>
    1bca:	37 c0       	rjmp	.+110    	; 0x1c3a <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1bcc:	48 17       	cp	r20, r24
    1bce:	59 07       	cpc	r21, r25
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <pickup+0x1f2>
    1bd2:	65 c1       	rjmp	.+714    	; 0x1e9e <pickup+0x4bc>
    1bd4:	4f 3f       	cpi	r20, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <pickup+0x1fa>
    1bda:	61 c1       	rjmp	.+706    	; 0x1e9e <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1bdc:	21 70       	andi	r18, 0x01	; 1
    1bde:	30 78       	andi	r19, 0x80	; 128
    1be0:	33 23       	and	r19, r19
    1be2:	34 f4       	brge	.+12     	; 0x1bf0 <pickup+0x20e>
    1be4:	21 50       	subi	r18, 0x01	; 1
    1be6:	31 09       	sbc	r19, r1
    1be8:	2e 6f       	ori	r18, 0xFE	; 254
    1bea:	3f 6f       	ori	r19, 0xFF	; 255
    1bec:	2f 5f       	subi	r18, 0xFF	; 255
    1bee:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf0:	d9 01       	movw	r26, r18
    1bf2:	aa 0f       	add	r26, r26
    1bf4:	bb 1f       	adc	r27, r27
    1bf6:	a1 5c       	subi	r26, 0xC1	; 193
    1bf8:	bd 4f       	sbci	r27, 0xFD	; 253
    1bfa:	8d 91       	ld	r24, X+
    1bfc:	9c 91       	ld	r25, X
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	c1 f0       	breq	.+48     	; 0x1c32 <pickup+0x250>
    1c02:	df 01       	movw	r26, r30
    1c04:	aa 0f       	add	r26, r26
    1c06:	bb 1f       	adc	r27, r27
    1c08:	aa 0f       	add	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	a9 5b       	subi	r26, 0xB9	; 185
    1c0e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c10:	8d 91       	ld	r24, X+
    1c12:	9c 91       	ld	r25, X
    1c14:	11 97       	sbiw	r26, 0x01	; 1
    1c16:	68 17       	cp	r22, r24
    1c18:	79 07       	cpc	r23, r25
    1c1a:	59 f0       	breq	.+22     	; 0x1c32 <pickup+0x250>
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	49 f0       	breq	.+18     	; 0x1c32 <pickup+0x250>
    1c20:	fd 01       	movw	r30, r26
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	68 17       	cp	r22, r24
    1c28:	79 07       	cpc	r23, r25
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <pickup+0x250>
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <pickup+0x250>
    1c30:	36 c1       	rjmp	.+620    	; 0x1e9e <pickup+0x4bc>
						pickNode(arm1, 0);
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	ce 01       	movw	r24, r28
    1c38:	5a de       	rcall	.-844    	; 0x18ee <pickNode>
				}

			}
			if (armCount == 1)
    1c3a:	80 91 06 02 	lds	r24, 0x0206
    1c3e:	90 91 07 02 	lds	r25, 0x0207
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <pickup+0x266>
    1c46:	2b c1       	rjmp	.+598    	; 0x1e9e <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1c48:	f8 01       	movw	r30, r16
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	e3 59       	subi	r30, 0x93	; 147
    1c50:	fd 4f       	sbci	r31, 0xFD	; 253
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <pickup+0x27a>
					a1 = arm0;
    1c5a:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1c5c:	be 01       	movw	r22, r28
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	61 70       	andi	r22, 0x01	; 1
    1c64:	70 78       	andi	r23, 0x80	; 128
    1c66:	77 23       	and	r23, r23
    1c68:	34 f4       	brge	.+12     	; 0x1c76 <pickup+0x294>
    1c6a:	61 50       	subi	r22, 0x01	; 1
    1c6c:	71 09       	sbc	r23, r1
    1c6e:	6e 6f       	ori	r22, 0xFE	; 254
    1c70:	7f 6f       	ori	r23, 0xFF	; 255
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1c76:	80 91 43 02 	lds	r24, 0x0243
    1c7a:	90 91 44 02 	lds	r25, 0x0244
    1c7e:	9c 01       	movw	r18, r24
    1c80:	21 70       	andi	r18, 0x01	; 1
    1c82:	30 78       	andi	r19, 0x80	; 128
    1c84:	33 23       	and	r19, r19
    1c86:	34 f4       	brge	.+12     	; 0x1c94 <pickup+0x2b2>
    1c88:	21 50       	subi	r18, 0x01	; 1
    1c8a:	31 09       	sbc	r19, r1
    1c8c:	2e 6f       	ori	r18, 0xFE	; 254
    1c8e:	3f 6f       	ori	r19, 0xFF	; 255
    1c90:	2f 5f       	subi	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	f9 01       	movw	r30, r18
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	e1 5c       	subi	r30, 0xC1	; 193
    1c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9e:	20 81       	ld	r18, Z
    1ca0:	31 81       	ldd	r19, Z+1	; 0x01
    1ca2:	2f 3f       	cpi	r18, 0xFF	; 255
    1ca4:	af ef       	ldi	r26, 0xFF	; 255
    1ca6:	3a 07       	cpc	r19, r26
    1ca8:	d9 f5       	brne	.+118    	; 0x1d20 <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1caa:	fc 01       	movw	r30, r24
    1cac:	ee 0f       	add	r30, r30
    1cae:	ff 1f       	adc	r31, r31
    1cb0:	ec 0f       	add	r30, r28
    1cb2:	fd 1f       	adc	r31, r29
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	e9 5b       	subi	r30, 0xB9	; 185
    1cba:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbc:	20 81       	ld	r18, Z
    1cbe:	31 81       	ldd	r19, Z+1	; 0x01
    1cc0:	2f 3f       	cpi	r18, 0xFF	; 255
    1cc2:	ef ef       	ldi	r30, 0xFF	; 255
    1cc4:	3e 07       	cpc	r19, r30
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <pickup+0x302>
    1cc8:	fc 01       	movw	r30, r24
    1cca:	ee 0f       	add	r30, r30
    1ccc:	ff 1f       	adc	r31, r31
    1cce:	e7 5a       	subi	r30, 0xA7	; 167
    1cd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd2:	40 81       	ld	r20, Z
    1cd4:	51 81       	ldd	r21, Z+1	; 0x01
    1cd6:	24 17       	cp	r18, r20
    1cd8:	35 07       	cpc	r19, r21
    1cda:	21 f0       	breq	.+8      	; 0x1ce4 <pickup+0x302>
						pickNode(a1, a1);
    1cdc:	be 01       	movw	r22, r28
    1cde:	ce 01       	movw	r24, r28
    1ce0:	06 de       	rcall	.-1012   	; 0x18ee <pickNode>
    1ce2:	dd c0       	rjmp	.+442    	; 0x1e9e <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	ee 0f       	add	r30, r30
    1ce8:	ff 1f       	adc	r31, r31
    1cea:	e6 0f       	add	r30, r22
    1cec:	f7 1f       	adc	r31, r23
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	e9 5b       	subi	r30, 0xB9	; 185
    1cf4:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf6:	20 81       	ld	r18, Z
    1cf8:	31 81       	ldd	r19, Z+1	; 0x01
    1cfa:	2f 3f       	cpi	r18, 0xFF	; 255
    1cfc:	4f ef       	ldi	r20, 0xFF	; 255
    1cfe:	34 07       	cpc	r19, r20
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <pickup+0x322>
    1d02:	cd c0       	rjmp	.+410    	; 0x1e9e <pickup+0x4bc>
    1d04:	fc 01       	movw	r30, r24
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	e7 5a       	subi	r30, 0xA7	; 167
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	28 17       	cp	r18, r24
    1d14:	39 07       	cpc	r19, r25
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <pickup+0x338>
    1d18:	c2 c0       	rjmp	.+388    	; 0x1e9e <pickup+0x4bc>
						pickNode(a1, a2);
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	e8 dd       	rcall	.-1072   	; 0x18ee <pickNode>
    1d1e:	bf c0       	rjmp	.+382    	; 0x1e9e <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1d20:	40 91 69 02 	lds	r20, 0x0269
    1d24:	50 91 6a 02 	lds	r21, 0x026A
    1d28:	fa 01       	movw	r30, r20
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	e7 5a       	subi	r30, 0xA7	; 167
    1d30:	fd 4f       	sbci	r31, 0xFD	; 253
    1d32:	01 90       	ld	r0, Z+
    1d34:	f0 81       	ld	r31, Z
    1d36:	e0 2d       	mov	r30, r0
    1d38:	dc 01       	movw	r26, r24
    1d3a:	aa 0f       	add	r26, r26
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	aa 0f       	add	r26, r26
    1d40:	bb 1f       	adc	r27, r27
    1d42:	a9 5b       	subi	r26, 0xB9	; 185
    1d44:	bd 4f       	sbci	r27, 0xFD	; 253
    1d46:	0d 90       	ld	r0, X+
    1d48:	bc 91       	ld	r27, X
    1d4a:	a0 2d       	mov	r26, r0
    1d4c:	ae 17       	cp	r26, r30
    1d4e:	bf 07       	cpc	r27, r31
    1d50:	71 f0       	breq	.+28     	; 0x1d6e <pickup+0x38c>
    1d52:	dc 01       	movw	r26, r24
    1d54:	aa 0f       	add	r26, r26
    1d56:	bb 1f       	adc	r27, r27
    1d58:	aa 0f       	add	r26, r26
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	a9 5b       	subi	r26, 0xB9	; 185
    1d5e:	bd 4f       	sbci	r27, 0xFD	; 253
    1d60:	12 96       	adiw	r26, 0x02	; 2
    1d62:	0d 90       	ld	r0, X+
    1d64:	bc 91       	ld	r27, X
    1d66:	a0 2d       	mov	r26, r0
    1d68:	ea 17       	cp	r30, r26
    1d6a:	fb 07       	cpc	r31, r27
    1d6c:	d9 f5       	brne	.+118    	; 0x1de4 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1d6e:	da 01       	movw	r26, r20
    1d70:	aa 0f       	add	r26, r26
    1d72:	bb 1f       	adc	r27, r27
    1d74:	a0 5e       	subi	r26, 0xE0	; 224
    1d76:	bd 4f       	sbci	r27, 0xFD	; 253
    1d78:	2d 91       	ld	r18, X+
    1d7a:	3c 91       	ld	r19, X
    1d7c:	21 30       	cpi	r18, 0x01	; 1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <pickup+0x3a2>
    1d82:	8d c0       	rjmp	.+282    	; 0x1e9e <pickup+0x4bc>
    1d84:	da 01       	movw	r26, r20
    1d86:	aa 0f       	add	r26, r26
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	aa 0f       	add	r26, r26
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	a9 5b       	subi	r26, 0xB9	; 185
    1d90:	bd 4f       	sbci	r27, 0xFD	; 253
    1d92:	2d 91       	ld	r18, X+
    1d94:	3c 91       	ld	r19, X
    1d96:	2f 3f       	cpi	r18, 0xFF	; 255
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	79 f0       	breq	.+30     	; 0x1dba <pickup+0x3d8>
    1d9c:	da 01       	movw	r26, r20
    1d9e:	aa 0f       	add	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	aa 0f       	add	r26, r26
    1da4:	bb 1f       	adc	r27, r27
    1da6:	a9 5b       	subi	r26, 0xB9	; 185
    1da8:	bd 4f       	sbci	r27, 0xFD	; 253
    1daa:	12 96       	adiw	r26, 0x02	; 2
    1dac:	2d 91       	ld	r18, X+
    1dae:	3c 91       	ld	r19, X
    1db0:	13 97       	sbiw	r26, 0x03	; 3
    1db2:	2f 3f       	cpi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	09 f0       	breq	.+2      	; 0x1dba <pickup+0x3d8>
    1db8:	72 c0       	rjmp	.+228    	; 0x1e9e <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	8c 0f       	add	r24, r28
    1dc0:	9d 1f       	adc	r25, r29
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	aa 0f       	add	r26, r26
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	a9 5b       	subi	r26, 0xB9	; 185
    1dca:	bd 4f       	sbci	r27, 0xFD	; 253
    1dcc:	8d 91       	ld	r24, X+
    1dce:	9c 91       	ld	r25, X
    1dd0:	e8 17       	cp	r30, r24
    1dd2:	f9 07       	cpc	r31, r25
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <pickup+0x3fc>
								pickNode(a1, a1);
    1dd6:	be 01       	movw	r22, r28
    1dd8:	ce 01       	movw	r24, r28
    1dda:	89 dd       	rcall	.-1262   	; 0x18ee <pickNode>
    1ddc:	60 c0       	rjmp	.+192    	; 0x1e9e <pickup+0x4bc>
							else pickNode(a1, a2);
    1dde:	ce 01       	movw	r24, r28
    1de0:	86 dd       	rcall	.-1268   	; 0x18ee <pickNode>
    1de2:	5d c0       	rjmp	.+186    	; 0x1e9e <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1de4:	dc 01       	movw	r26, r24
    1de6:	aa 0f       	add	r26, r26
    1de8:	bb 1f       	adc	r27, r27
    1dea:	a7 5a       	subi	r26, 0xA7	; 167
    1dec:	bd 4f       	sbci	r27, 0xFD	; 253
    1dee:	0d 90       	ld	r0, X+
    1df0:	bc 91       	ld	r27, X
    1df2:	a0 2d       	mov	r26, r0
    1df4:	2a 17       	cp	r18, r26
    1df6:	3b 07       	cpc	r19, r27
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <pickup+0x41a>
    1dfa:	51 c0       	rjmp	.+162    	; 0x1e9e <pickup+0x4bc>
    1dfc:	2e 17       	cp	r18, r30
    1dfe:	3f 07       	cpc	r19, r31
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <pickup+0x422>
    1e02:	4d c0       	rjmp	.+154    	; 0x1e9e <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1e04:	fa 01       	movw	r30, r20
    1e06:	ee 0f       	add	r30, r30
    1e08:	ff 1f       	adc	r31, r31
    1e0a:	e0 5e       	subi	r30, 0xE0	; 224
    1e0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e0e:	20 81       	ld	r18, Z
    1e10:	31 81       	ldd	r19, Z+1	; 0x01
    1e12:	21 30       	cpi	r18, 0x01	; 1
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <pickup+0x438>
    1e18:	42 c0       	rjmp	.+132    	; 0x1e9e <pickup+0x4bc>
    1e1a:	fa 01       	movw	r30, r20
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e9 5b       	subi	r30, 0xB9	; 185
    1e26:	fd 4f       	sbci	r31, 0xFD	; 253
    1e28:	20 81       	ld	r18, Z
    1e2a:	31 81       	ldd	r19, Z+1	; 0x01
    1e2c:	a2 17       	cp	r26, r18
    1e2e:	b3 07       	cpc	r27, r19
    1e30:	b1 f1       	breq	.+108    	; 0x1e9e <pickup+0x4bc>
    1e32:	fa 01       	movw	r30, r20
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	e9 5b       	subi	r30, 0xB9	; 185
    1e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e40:	22 81       	ldd	r18, Z+2	; 0x02
    1e42:	33 81       	ldd	r19, Z+3	; 0x03
    1e44:	a2 17       	cp	r26, r18
    1e46:	b3 07       	cpc	r27, r19
    1e48:	51 f1       	breq	.+84     	; 0x1e9e <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	ec 0f       	add	r30, r28
    1e52:	fd 1f       	adc	r31, r29
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	e9 5b       	subi	r30, 0xB9	; 185
    1e5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5c:	20 81       	ld	r18, Z
    1e5e:	31 81       	ldd	r19, Z+1	; 0x01
    1e60:	2f 3f       	cpi	r18, 0xFF	; 255
    1e62:	ef ef       	ldi	r30, 0xFF	; 255
    1e64:	3e 07       	cpc	r19, r30
    1e66:	39 f0       	breq	.+14     	; 0x1e76 <pickup+0x494>
    1e68:	a2 17       	cp	r26, r18
    1e6a:	b3 07       	cpc	r27, r19
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <pickup+0x494>
									pickNode(a1, a1);
    1e6e:	be 01       	movw	r22, r28
    1e70:	ce 01       	movw	r24, r28
    1e72:	3d dd       	rcall	.-1414   	; 0x18ee <pickNode>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	86 0f       	add	r24, r22
    1e7c:	97 1f       	adc	r25, r23
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e9 5b       	subi	r30, 0xB9	; 185
    1e86:	fd 4f       	sbci	r31, 0xFD	; 253
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8e:	2f ef       	ldi	r18, 0xFF	; 255
    1e90:	92 07       	cpc	r25, r18
    1e92:	29 f0       	breq	.+10     	; 0x1e9e <pickup+0x4bc>
    1e94:	a8 17       	cp	r26, r24
    1e96:	b9 07       	cpc	r27, r25
    1e98:	11 f0       	breq	.+4      	; 0x1e9e <pickup+0x4bc>
									pickNode(a1, a2);
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	28 dd       	rcall	.-1456   	; 0x18ee <pickNode>
					}
				}
			}
		}
}
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <drop>:

void drop(int side)
{
    1eac:	cf 93       	push	r28
    1eae:	c8 2f       	mov	r28, r24
	lower(side);//lower
    1eb0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <lower>
	//_delay_ms(1000);	
	open(side);
    1eb4:	8c 2f       	mov	r24, r28
    1eb6:	0e 94 ac 05 	call	0xb58	; 0xb58 <open>
	//_delay_ms(1000);
	elevate();//mid
    1eba:	0e 94 93 05 	call	0xb26	; 0xb26 <elevate>
// 	lower(side);
// 	if(armCount==0)
// 	servo_2_free();
// 	open(side);
// 	elevate();
 	armCount++;
    1ebe:	80 91 06 02 	lds	r24, 0x0206
    1ec2:	90 91 07 02 	lds	r25, 0x0207
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	90 93 07 02 	sts	0x0207, r25
    1ecc:	80 93 06 02 	sts	0x0206, r24
}
    1ed0:	cf 91       	pop	r28
    1ed2:	08 95       	ret

00001ed4 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1ede:	e0 91 43 02 	lds	r30, 0x0243
    1ee2:	f0 91 44 02 	lds	r31, 0x0244
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	e6 0f       	add	r30, r22
    1eec:	f7 1f       	adc	r31, r23
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	e9 5b       	subi	r30, 0xB9	; 185
    1ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	00 0f       	add	r16, r16
    1efa:	11 1f       	adc	r17, r17
    1efc:	03 59       	subi	r16, 0x93	; 147
    1efe:	1d 4f       	sbci	r17, 0xFD	; 253
    1f00:	d8 01       	movw	r26, r16
    1f02:	8d 91       	ld	r24, X+
    1f04:	9c 91       	ld	r25, X
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
	position(armNo, side);
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	ec db       	rcall	.-2088   	; 0x16e6 <position>
	drop(armNo);
    1f0e:	ce 01       	movw	r24, r28
    1f10:	cd df       	rcall	.-102    	; 0x1eac <drop>
	arm[armNo] = -1;
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	f8 01       	movw	r30, r16
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1f1c:	80 91 12 02 	lds	r24, 0x0212
    1f20:	90 91 13 02 	lds	r25, 0x0213
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	90 93 13 02 	sts	0x0213, r25
    1f2a:	80 93 12 02 	sts	0x0212, r24
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1f3e:	fb 01       	movw	r30, r22
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	e1 5c       	subi	r30, 0xC1	; 193
    1f46:	fd 4f       	sbci	r31, 0xFD	; 253
    1f48:	dc 01       	movw	r26, r24
    1f4a:	aa 0f       	add	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	a3 59       	subi	r26, 0x93	; 147
    1f50:	bd 4f       	sbci	r27, 0xFD	; 253
    1f52:	8d 91       	ld	r24, X+
    1f54:	9c 91       	ld	r25, X
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1f5a:	c6 17       	cp	r28, r22
    1f5c:	d7 07       	cpc	r29, r23
    1f5e:	39 f4       	brne	.+14     	; 0x1f6e <sortDrop+0x36>
    1f60:	80 91 0c 02 	lds	r24, 0x020C
    1f64:	90 91 0d 02 	lds	r25, 0x020D
    1f68:	89 2b       	or	r24, r25
    1f6a:	51 f4       	brne	.+20     	; 0x1f80 <sortDrop+0x48>
    1f6c:	06 c0       	rjmp	.+12     	; 0x1f7a <sortDrop+0x42>
    1f6e:	80 91 0c 02 	lds	r24, 0x020C
    1f72:	90 91 0d 02 	lds	r25, 0x020D
    1f76:	02 97       	sbiw	r24, 0x02	; 2
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <sortDrop+0x48>
		turn();
    1f7a:	0e 94 a2 06 	call	0xd44	; 0xd44 <turn>
    1f7e:	0e c0       	rjmp	.+28     	; 0x1f9c <sortDrop+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1f80:	80 91 0c 02 	lds	r24, 0x020C
    1f84:	90 91 0d 02 	lds	r25, 0x020D
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	39 f4       	brne	.+14     	; 0x1f9c <sortDrop+0x64>
			if (armNo == 0)
    1f8e:	20 97       	sbiw	r28, 0x00	; 0
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <sortDrop+0x60>
				turnLeft();
    1f92:	0e 94 4e 06 	call	0xc9c	; 0xc9c <turnLeft>
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <sortDrop+0x64>
			else turnRight();
    1f98:	0e 94 03 06 	call	0xc06	; 0xc06 <turnRight>
	}
	forward_mm(25);
    1f9c:	89 e1       	ldi	r24, 0x19	; 25
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	drop(armNo);
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	82 df       	rcall	.-252    	; 0x1eac <drop>
	
	arm[armNo] = -1;
    1fa8:	cc 0f       	add	r28, r28
    1faa:	dd 1f       	adc	r29, r29
    1fac:	c3 59       	subi	r28, 0x93	; 147
    1fae:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	9f ef       	ldi	r25, 0xFF	; 255
    1fb4:	99 83       	std	Y+1, r25	; 0x01
    1fb6:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	08 95       	ret

00001fbe <dropPickup>:

void dropPickup(int a1)
{
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1fc2:	9c 01       	movw	r18, r24
    1fc4:	2f 5f       	subi	r18, 0xFF	; 255
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	21 70       	andi	r18, 0x01	; 1
    1fca:	30 78       	andi	r19, 0x80	; 128
    1fcc:	33 23       	and	r19, r19
    1fce:	34 f4       	brge	.+12     	; 0x1fdc <dropPickup+0x1e>
    1fd0:	21 50       	subi	r18, 0x01	; 1
    1fd2:	31 09       	sbc	r19, r1
    1fd4:	2e 6f       	ori	r18, 0xFE	; 254
    1fd6:	3f 6f       	ori	r19, 0xFF	; 255
    1fd8:	2f 5f       	subi	r18, 0xFF	; 255
    1fda:	3f 4f       	sbci	r19, 0xFF	; 255
    1fdc:	d2 2f       	mov	r29, r18
    1fde:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1fe0:	e0 91 43 02 	lds	r30, 0x0243
    1fe4:	f0 91 44 02 	lds	r31, 0x0244
    1fe8:	af 01       	movw	r20, r30
    1fea:	44 0f       	add	r20, r20
    1fec:	55 1f       	adc	r21, r21
    1fee:	24 0f       	add	r18, r20
    1ff0:	35 1f       	adc	r19, r21
    1ff2:	d9 01       	movw	r26, r18
    1ff4:	aa 0f       	add	r26, r26
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	a9 5b       	subi	r26, 0xB9	; 185
    1ffa:	bd 4f       	sbci	r27, 0xFD	; 253
    1ffc:	2d 91       	ld	r18, X+
    1ffe:	3c 91       	ld	r19, X
    2000:	da 01       	movw	r26, r20
    2002:	a7 5a       	subi	r26, 0xA7	; 167
    2004:	bd 4f       	sbci	r27, 0xFD	; 253
    2006:	4d 91       	ld	r20, X+
    2008:	5c 91       	ld	r21, X
    200a:	24 17       	cp	r18, r20
    200c:	35 07       	cpc	r19, r21
    200e:	69 f0       	breq	.+26     	; 0x202a <dropPickup+0x6c>
    2010:	a0 91 69 02 	lds	r26, 0x0269
    2014:	b0 91 6a 02 	lds	r27, 0x026A
    2018:	aa 0f       	add	r26, r26
    201a:	bb 1f       	adc	r27, r27
    201c:	a7 5a       	subi	r26, 0xA7	; 167
    201e:	bd 4f       	sbci	r27, 0xFD	; 253
    2020:	6d 91       	ld	r22, X+
    2022:	7c 91       	ld	r23, X
    2024:	26 17       	cp	r18, r22
    2026:	37 07       	cpc	r19, r23
    2028:	a9 f0       	breq	.+42     	; 0x2054 <dropPickup+0x96>
    202a:	ee 0f       	add	r30, r30
    202c:	ff 1f       	adc	r31, r31
    202e:	e8 0f       	add	r30, r24
    2030:	f9 1f       	adc	r31, r25
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	e9 5b       	subi	r30, 0xB9	; 185
    2038:	fd 4f       	sbci	r31, 0xFD	; 253
    203a:	01 90       	ld	r0, Z+
    203c:	f0 81       	ld	r31, Z
    203e:	e0 2d       	mov	r30, r0
    2040:	4e 17       	cp	r20, r30
    2042:	5f 07       	cpc	r21, r31
    2044:	39 f0       	breq	.+14     	; 0x2054 <dropPickup+0x96>
    2046:	31 96       	adiw	r30, 0x01	; 1
    2048:	29 f0       	breq	.+10     	; 0x2054 <dropPickup+0x96>
		pickNode(a2, a1);
    204a:	bc 01       	movw	r22, r24
    204c:	8d 2f       	mov	r24, r29
    204e:	9c 2f       	mov	r25, r28
    2050:	4e dc       	rcall	.-1892   	; 0x18ee <pickNode>
    2052:	0b c0       	rjmp	.+22     	; 0x206a <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    2054:	24 17       	cp	r18, r20
    2056:	35 07       	cpc	r19, r21
    2058:	41 f0       	breq	.+16     	; 0x206a <dropPickup+0xac>
    205a:	2f 3f       	cpi	r18, 0xFF	; 255
    205c:	3f 4f       	sbci	r19, 0xFF	; 255
    205e:	29 f0       	breq	.+10     	; 0x206a <dropPickup+0xac>
		pickNode(a2, a2);
    2060:	6d 2f       	mov	r22, r29
    2062:	7c 2f       	mov	r23, r28
    2064:	8d 2f       	mov	r24, r29
    2066:	9c 2f       	mov	r25, r28
    2068:	42 dc       	rcall	.-1916   	; 0x18ee <pickNode>
}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	08 95       	ret

00002070 <canDrop>:

void canDrop()
{
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2078:	20 91 43 02 	lds	r18, 0x0243
    207c:	30 91 44 02 	lds	r19, 0x0244
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	30 f4       	brcc	.+12     	; 0x2092 <canDrop+0x22>
    2086:	80 91 0c 02 	lds	r24, 0x020C
    208a:	90 91 0d 02 	lds	r25, 0x020D
    208e:	02 97       	sbiw	r24, 0x02	; 2
    2090:	79 f0       	breq	.+30     	; 0x20b0 <canDrop+0x40>
    2092:	c9 01       	movw	r24, r18
    2094:	02 97       	sbiw	r24, 0x02	; 2
    2096:	02 97       	sbiw	r24, 0x02	; 2
    2098:	80 f4       	brcc	.+32     	; 0x20ba <canDrop+0x4a>
    209a:	80 91 0c 02 	lds	r24, 0x020C
    209e:	90 91 0d 02 	lds	r25, 0x020D
    20a2:	89 2b       	or	r24, r25
    20a4:	79 f0       	breq	.+30     	; 0x20c4 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    20a6:	01 e0       	ldi	r16, 0x01	; 1
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	c0 e0       	ldi	r28, 0x00	; 0
    20ac:	d0 e0       	ldi	r29, 0x00	; 0
    20ae:	0e c0       	rjmp	.+28     	; 0x20cc <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    20b0:	00 e0       	ldi	r16, 0x00	; 0
    20b2:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    20b4:	c1 e0       	ldi	r28, 0x01	; 1
    20b6:	d0 e0       	ldi	r29, 0x00	; 0
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    20ba:	01 e0       	ldi	r16, 0x01	; 1
    20bc:	10 e0       	ldi	r17, 0x00	; 0
    20be:	c0 e0       	ldi	r28, 0x00	; 0
    20c0:	d0 e0       	ldi	r29, 0x00	; 0
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    20c4:	00 e0       	ldi	r16, 0x00	; 0
    20c6:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    20c8:	c1 e0       	ldi	r28, 0x01	; 1
    20ca:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    20cc:	40 91 06 02 	lds	r20, 0x0206
    20d0:	50 91 07 02 	lds	r21, 0x0207
    20d4:	42 30       	cpi	r20, 0x02	; 2
    20d6:	51 05       	cpc	r21, r1
    20d8:	09 f4       	brne	.+2      	; 0x20dc <canDrop+0x6c>
    20da:	3c c1       	rjmp	.+632    	; 0x2354 <__stack+0x155>
    20dc:	f9 01       	movw	r30, r18
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	e7 5a       	subi	r30, 0xA7	; 167
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
    20e6:	40 81       	ld	r20, Z
    20e8:	51 81       	ldd	r21, Z+1	; 0x01
    20ea:	80 91 6d 02 	lds	r24, 0x026D
    20ee:	90 91 6e 02 	lds	r25, 0x026E
    20f2:	84 17       	cp	r24, r20
    20f4:	95 07       	cpc	r25, r21
    20f6:	41 f0       	breq	.+16     	; 0x2108 <canDrop+0x98>
    20f8:	80 91 6f 02 	lds	r24, 0x026F
    20fc:	90 91 70 02 	lds	r25, 0x0270
    2100:	48 17       	cp	r20, r24
    2102:	59 07       	cpc	r21, r25
    2104:	09 f0       	breq	.+2      	; 0x2108 <canDrop+0x98>
    2106:	26 c1       	rjmp	.+588    	; 0x2354 <__stack+0x155>
		return;
	else
	{
		if (visited[ct] == 0)
    2108:	f9 01       	movw	r30, r18
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e0 5e       	subi	r30, 0xE0	; 224
    2110:	fd 4f       	sbci	r31, 0xFD	; 253
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	89 2b       	or	r24, r25
    2118:	11 f4       	brne	.+4      	; 0x211e <canDrop+0xae>
		{
			terminalCheck1();
    211a:	0a d9       	rcall	.-3564   	; 0x1330 <terminalCheck1>
			terminalCheck2();
    211c:	dc d9       	rcall	.-3144   	; 0x14d6 <terminalCheck2>
		}
		if (armCount == 0)
    211e:	80 91 06 02 	lds	r24, 0x0206
    2122:	90 91 07 02 	lds	r25, 0x0207
    2126:	89 2b       	or	r24, r25
    2128:	09 f0       	breq	.+2      	; 0x212c <canDrop+0xbc>
    212a:	48 c0       	rjmp	.+144    	; 0x21bc <canDrop+0x14c>
		{
			if (arm[arm0] == color[ct])
    212c:	20 91 43 02 	lds	r18, 0x0243
    2130:	30 91 44 02 	lds	r19, 0x0244
    2134:	f9 01       	movw	r30, r18
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	e7 5a       	subi	r30, 0xA7	; 167
    213c:	fd 4f       	sbci	r31, 0xFD	; 253
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	fe 01       	movw	r30, r28
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	e3 59       	subi	r30, 0x93	; 147
    214a:	fd 4f       	sbci	r31, 0xFD	; 253
    214c:	40 81       	ld	r20, Z
    214e:	51 81       	ldd	r21, Z+1	; 0x01
    2150:	48 17       	cp	r20, r24
    2152:	59 07       	cpc	r21, r25
    2154:	a9 f4       	brne	.+42     	; 0x2180 <canDrop+0x110>
				if (term[ct][0] == -1)
    2156:	f9 01       	movw	r30, r18
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	ee 0f       	add	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	e9 5b       	subi	r30, 0xB9	; 185
    2162:	fd 4f       	sbci	r31, 0xFD	; 253
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	29 f4       	brne	.+10     	; 0x2176 <canDrop+0x106>
					nodeDrop(arm0, 0);
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	ce 01       	movw	r24, r28
    2172:	b0 de       	rcall	.-672    	; 0x1ed4 <nodeDrop>
    2174:	23 c0       	rjmp	.+70     	; 0x21bc <canDrop+0x14c>
				else nodeDrop(arm0, 1);
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	ce 01       	movw	r24, r28
    217c:	ab de       	rcall	.-682    	; 0x1ed4 <nodeDrop>
    217e:	1e c0       	rjmp	.+60     	; 0x21bc <canDrop+0x14c>
			else if (arm[arm1] == color[ct])
    2180:	f8 01       	movw	r30, r16
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	e3 59       	subi	r30, 0x93	; 147
    2188:	fd 4f       	sbci	r31, 0xFD	; 253
    218a:	40 81       	ld	r20, Z
    218c:	51 81       	ldd	r21, Z+1	; 0x01
    218e:	84 17       	cp	r24, r20
    2190:	95 07       	cpc	r25, r21
    2192:	a1 f4       	brne	.+40     	; 0x21bc <canDrop+0x14c>
				if (term[ct][0] != -1)
    2194:	f9 01       	movw	r30, r18
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	e9 5b       	subi	r30, 0xB9	; 185
    21a0:	fd 4f       	sbci	r31, 0xFD	; 253
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	29 f0       	breq	.+10     	; 0x21b4 <canDrop+0x144>
					nodeDrop(arm1, 1);
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	c8 01       	movw	r24, r16
    21b0:	91 de       	rcall	.-734    	; 0x1ed4 <nodeDrop>
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <canDrop+0x14c>
				else nodeDrop(arm1, 0);
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	c8 01       	movw	r24, r16
    21ba:	8c de       	rcall	.-744    	; 0x1ed4 <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    21bc:	20 91 43 02 	lds	r18, 0x0243
    21c0:	30 91 44 02 	lds	r19, 0x0244
    21c4:	f9 01       	movw	r30, r18
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	e7 5a       	subi	r30, 0xA7	; 167
    21cc:	fd 4f       	sbci	r31, 0xFD	; 253
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	40 91 6d 02 	lds	r20, 0x026D
    21d6:	50 91 6e 02 	lds	r21, 0x026E
    21da:	48 17       	cp	r20, r24
    21dc:	59 07       	cpc	r21, r25
    21de:	41 f0       	breq	.+16     	; 0x21f0 <canDrop+0x180>
    21e0:	40 91 6f 02 	lds	r20, 0x026F
    21e4:	50 91 70 02 	lds	r21, 0x0270
    21e8:	84 17       	cp	r24, r20
    21ea:	95 07       	cpc	r25, r21
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <canDrop+0x180>
    21ee:	b2 c0       	rjmp	.+356    	; 0x2354 <__stack+0x155>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    21f0:	f9 01       	movw	r30, r18
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e9 5b       	subi	r30, 0xB9	; 185
    21fc:	fd 4f       	sbci	r31, 0xFD	; 253
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	09 f4       	brne	.+2      	; 0x2208 <__stack+0x9>
    2206:	45 c0       	rjmp	.+138    	; 0x2292 <__stack+0x93>
    2208:	f9 01       	movw	r30, r18
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	e9 5b       	subi	r30, 0xB9	; 185
    2214:	fd 4f       	sbci	r31, 0xFD	; 253
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	c9 f0       	breq	.+50     	; 0x2250 <__stack+0x51>
				if (visited[ct] == 0)
    221e:	f9 01       	movw	r30, r18
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	e0 5e       	subi	r30, 0xE0	; 224
    2226:	fd 4f       	sbci	r31, 0xFD	; 253
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	89 2b       	or	r24, r25
    222e:	81 f4       	brne	.+32     	; 0x2250 <__stack+0x51>
					terminalCheck2();
    2230:	52 d9       	rcall	.-3420   	; 0x14d6 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2232:	20 91 43 02 	lds	r18, 0x0243
    2236:	30 91 44 02 	lds	r19, 0x0244
    223a:	f9 01       	movw	r30, r18
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	e9 5b       	subi	r30, 0xB9	; 185
    2246:	fd 4f       	sbci	r31, 0xFD	; 253
    2248:	80 81       	ld	r24, Z
    224a:	91 81       	ldd	r25, Z+1	; 0x01
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	09 f1       	breq	.+66     	; 0x2292 <__stack+0x93>
    2250:	f9 01       	movw	r30, r18
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	e9 5b       	subi	r30, 0xB9	; 185
    225c:	fd 4f       	sbci	r31, 0xFD	; 253
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	b1 f0       	breq	.+44     	; 0x2292 <__stack+0x93>
			{
				if (arm[arm0] == color[ct])
    2266:	de 01       	movw	r26, r28
    2268:	aa 0f       	add	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	a3 59       	subi	r26, 0x93	; 147
    226e:	bd 4f       	sbci	r27, 0xFD	; 253
    2270:	f9 01       	movw	r30, r18
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	e7 5a       	subi	r30, 0xA7	; 167
    2278:	fd 4f       	sbci	r31, 0xFD	; 253
    227a:	4d 91       	ld	r20, X+
    227c:	5c 91       	ld	r21, X
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	48 17       	cp	r20, r24
    2284:	59 07       	cpc	r21, r25
    2286:	19 f4       	brne	.+6      	; 0x228e <__stack+0x8f>
					dropPickup(arm0);
    2288:	ce 01       	movw	r24, r28
    228a:	99 de       	rcall	.-718    	; 0x1fbe <dropPickup>
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__stack+0x93>
				else dropPickup(arm1);
    228e:	c8 01       	movw	r24, r16
    2290:	96 de       	rcall	.-724    	; 0x1fbe <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    2292:	80 91 43 02 	lds	r24, 0x0243
    2296:	90 91 44 02 	lds	r25, 0x0244
    229a:	fc 01       	movw	r30, r24
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	e7 5a       	subi	r30, 0xA7	; 167
    22a2:	fd 4f       	sbci	r31, 0xFD	; 253
    22a4:	20 81       	ld	r18, Z
    22a6:	31 81       	ldd	r19, Z+1	; 0x01
    22a8:	fe 01       	movw	r30, r28
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	e3 59       	subi	r30, 0x93	; 147
    22b0:	fd 4f       	sbci	r31, 0xFD	; 253
    22b2:	40 81       	ld	r20, Z
    22b4:	51 81       	ldd	r21, Z+1	; 0x01
    22b6:	42 17       	cp	r20, r18
    22b8:	53 07       	cpc	r21, r19
    22ba:	11 f5       	brne	.+68     	; 0x2300 <__stack+0x101>
    22bc:	fc 01       	movw	r30, r24
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	e9 5b       	subi	r30, 0xB9	; 185
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	40 81       	ld	r20, Z
    22cc:	51 81       	ldd	r21, Z+1	; 0x01
    22ce:	4f 3f       	cpi	r20, 0xFF	; 255
    22d0:	5f 4f       	sbci	r21, 0xFF	; 255
    22d2:	29 f4       	brne	.+10     	; 0x22de <__stack+0xdf>
				nodeDrop(arm0, 0);
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	ce 01       	movw	r24, r28
    22da:	fc dd       	rcall	.-1032   	; 0x1ed4 <nodeDrop>
    22dc:	3b c0       	rjmp	.+118    	; 0x2354 <__stack+0x155>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    22de:	fc 01       	movw	r30, r24
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	e9 5b       	subi	r30, 0xB9	; 185
    22ea:	fd 4f       	sbci	r31, 0xFD	; 253
    22ec:	42 81       	ldd	r20, Z+2	; 0x02
    22ee:	53 81       	ldd	r21, Z+3	; 0x03
    22f0:	4f 3f       	cpi	r20, 0xFF	; 255
    22f2:	5f 4f       	sbci	r21, 0xFF	; 255
    22f4:	29 f4       	brne	.+10     	; 0x2300 <__stack+0x101>
				nodeDrop(arm0, 1);
    22f6:	61 e0       	ldi	r22, 0x01	; 1
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	ce 01       	movw	r24, r28
    22fc:	eb dd       	rcall	.-1066   	; 0x1ed4 <nodeDrop>
    22fe:	2a c0       	rjmp	.+84     	; 0x2354 <__stack+0x155>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2300:	f8 01       	movw	r30, r16
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	e3 59       	subi	r30, 0x93	; 147
    2308:	fd 4f       	sbci	r31, 0xFD	; 253
    230a:	40 81       	ld	r20, Z
    230c:	51 81       	ldd	r21, Z+1	; 0x01
    230e:	24 17       	cp	r18, r20
    2310:	35 07       	cpc	r19, r21
    2312:	01 f5       	brne	.+64     	; 0x2354 <__stack+0x155>
    2314:	fc 01       	movw	r30, r24
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	e9 5b       	subi	r30, 0xB9	; 185
    2320:	fd 4f       	sbci	r31, 0xFD	; 253
    2322:	20 81       	ld	r18, Z
    2324:	31 81       	ldd	r19, Z+1	; 0x01
    2326:	2f 3f       	cpi	r18, 0xFF	; 255
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	29 f4       	brne	.+10     	; 0x2336 <__stack+0x137>
				nodeDrop(arm1, 0);
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	c8 01       	movw	r24, r16
    2332:	d0 dd       	rcall	.-1120   	; 0x1ed4 <nodeDrop>
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <__stack+0x155>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    2336:	fc 01       	movw	r30, r24
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	e9 5b       	subi	r30, 0xB9	; 185
    2342:	fd 4f       	sbci	r31, 0xFD	; 253
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	21 f4       	brne	.+8      	; 0x2354 <__stack+0x155>
				nodeDrop(arm1, 1);
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	c8 01       	movw	r24, r16
    2352:	c0 dd       	rcall	.-1152   	; 0x1ed4 <nodeDrop>

		}
	}
}
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <newSort>:

void newSort()
{
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
	int t1, t2, a2 = -2, a1 = -2;
	if (arm[1] != -1)
    2366:	20 91 6f 02 	lds	r18, 0x026F
    236a:	30 91 70 02 	lds	r19, 0x0270
    236e:	2f 3f       	cpi	r18, 0xFF	; 255
    2370:	1f ef       	ldi	r17, 0xFF	; 255
    2372:	31 07       	cpc	r19, r17
    2374:	41 f0       	breq	.+16     	; 0x2386 <newSort+0x28>
	a2 = indicator[arm[1]];
    2376:	f9 01       	movw	r30, r18
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	ef 59       	subi	r30, 0x9F	; 159
    237e:	fd 4f       	sbci	r31, 0xFD	; 253
    2380:	c0 81       	ld	r28, Z
    2382:	d1 81       	ldd	r29, Z+1	; 0x01
    2384:	02 c0       	rjmp	.+4      	; 0x238a <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    2386:	ce ef       	ldi	r28, 0xFE	; 254
    2388:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
    238a:	e0 91 6d 02 	lds	r30, 0x026D
    238e:	f0 91 6e 02 	lds	r31, 0x026E
    2392:	ef 3f       	cpi	r30, 0xFF	; 255
    2394:	4f ef       	ldi	r20, 0xFF	; 255
    2396:	f4 07       	cpc	r31, r20
    2398:	09 f4       	brne	.+2      	; 0x239c <newSort+0x3e>
    239a:	7f c1       	rjmp	.+766    	; 0x269a <newSort+0x33c>
	a1 = indicator[arm[0]];
    239c:	df 01       	movw	r26, r30
    239e:	aa 0f       	add	r26, r26
    23a0:	bb 1f       	adc	r27, r27
    23a2:	af 59       	subi	r26, 0x9F	; 159
    23a4:	bd 4f       	sbci	r27, 0xFD	; 253
    23a6:	4d 91       	ld	r20, X+
    23a8:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    23aa:	80 91 43 02 	lds	r24, 0x0243
    23ae:	90 91 44 02 	lds	r25, 0x0244
    23b2:	01 96       	adiw	r24, 0x01	; 1
    23b4:	81 70       	andi	r24, 0x01	; 1
    23b6:	90 78       	andi	r25, 0x80	; 128
    23b8:	99 23       	and	r25, r25
    23ba:	24 f4       	brge	.+8      	; 0x23c4 <newSort+0x66>
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	8e 6f       	ori	r24, 0xFE	; 254
    23c0:	9f 6f       	ori	r25, 0xFF	; 255
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    23c6:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    23c8:	d0 93 44 02 	sts	0x0244, r29
    23cc:	c0 93 43 02 	sts	0x0243, r28
		if (arm[1] == arm[0] && (visited[a2] == 0 || (term[a2][0] != -1 && term[a2][1] != -1)))
    23d0:	2e 17       	cp	r18, r30
    23d2:	3f 07       	cpc	r19, r31
    23d4:	61 f5       	brne	.+88     	; 0x242e <newSort+0xd0>
    23d6:	de 01       	movw	r26, r28
    23d8:	aa 0f       	add	r26, r26
    23da:	bb 1f       	adc	r27, r27
    23dc:	a0 5e       	subi	r26, 0xE0	; 224
    23de:	bd 4f       	sbci	r27, 0xFD	; 253
    23e0:	0d 90       	ld	r0, X+
    23e2:	bc 91       	ld	r27, X
    23e4:	a0 2d       	mov	r26, r0
    23e6:	ab 2b       	or	r26, r27
    23e8:	c9 f0       	breq	.+50     	; 0x241c <newSort+0xbe>
    23ea:	de 01       	movw	r26, r28
    23ec:	aa 0f       	add	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	aa 0f       	add	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	a9 5b       	subi	r26, 0xB9	; 185
    23f6:	bd 4f       	sbci	r27, 0xFD	; 253
    23f8:	0d 90       	ld	r0, X+
    23fa:	bc 91       	ld	r27, X
    23fc:	a0 2d       	mov	r26, r0
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	b1 f0       	breq	.+44     	; 0x242e <newSort+0xd0>
    2402:	de 01       	movw	r26, r28
    2404:	aa 0f       	add	r26, r26
    2406:	bb 1f       	adc	r27, r27
    2408:	aa 0f       	add	r26, r26
    240a:	bb 1f       	adc	r27, r27
    240c:	a9 5b       	subi	r26, 0xB9	; 185
    240e:	bd 4f       	sbci	r27, 0xFD	; 253
    2410:	12 96       	adiw	r26, 0x02	; 2
    2412:	0d 90       	ld	r0, X+
    2414:	bc 91       	ld	r27, X
    2416:	a0 2d       	mov	r26, r0
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	49 f0       	breq	.+18     	; 0x242e <newSort+0xd0>
		{
			if (a2 == 0 || a2 == 3)
    241c:	20 97       	sbiw	r28, 0x00	; 0
    241e:	19 f0       	breq	.+6      	; 0x2426 <newSort+0xc8>
    2420:	23 97       	sbiw	r28, 0x03	; 3
    2422:	09 f0       	breq	.+2      	; 0x2426 <newSort+0xc8>
    2424:	28 c1       	rjmp	.+592    	; 0x2676 <newSort+0x318>
			sortDrop(0, t1);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	86 dd       	rcall	.-1268   	; 0x1f38 <sortDrop>
    242c:	24 c1       	rjmp	.+584    	; 0x2676 <newSort+0x318>
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    242e:	2f 3f       	cpi	r18, 0xFF	; 255
    2430:	af ef       	ldi	r26, 0xFF	; 255
    2432:	3a 07       	cpc	r19, r26
    2434:	c1 f1       	breq	.+112    	; 0x24a6 <newSort+0x148>
    2436:	de 01       	movw	r26, r28
    2438:	aa 0f       	add	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	aa 0f       	add	r26, r26
    243e:	bb 1f       	adc	r27, r27
    2440:	a9 5b       	subi	r26, 0xB9	; 185
    2442:	bd 4f       	sbci	r27, 0xFD	; 253
    2444:	0d 90       	ld	r0, X+
    2446:	bc 91       	ld	r27, X
    2448:	a0 2d       	mov	r26, r0
    244a:	11 96       	adiw	r26, 0x01	; 1
    244c:	51 f0       	breq	.+20     	; 0x2462 <newSort+0x104>
    244e:	cc 0f       	add	r28, r28
    2450:	dd 1f       	adc	r29, r29
    2452:	cc 0f       	add	r28, r28
    2454:	dd 1f       	adc	r29, r29
    2456:	c9 5b       	subi	r28, 0xB9	; 185
    2458:	dd 4f       	sbci	r29, 0xFD	; 253
    245a:	aa 81       	ldd	r26, Y+2	; 0x02
    245c:	bb 81       	ldd	r27, Y+3	; 0x03
    245e:	11 96       	adiw	r26, 0x01	; 1
    2460:	11 f5       	brne	.+68     	; 0x24a6 <newSort+0x148>
		{
			if (arm[0] == -1)
    2462:	31 96       	adiw	r30, 0x01	; 1
    2464:	09 f0       	breq	.+2      	; 0x2468 <newSort+0x10a>
    2466:	07 c1       	rjmp	.+526    	; 0x2676 <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2468:	9b 01       	movw	r18, r22
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	f9 01       	movw	r30, r18
    2470:	e1 5c       	subi	r30, 0xC1	; 193
    2472:	fd 4f       	sbci	r31, 0xFD	; 253
    2474:	40 81       	ld	r20, Z
    2476:	51 81       	ldd	r21, Z+1	; 0x01
    2478:	f9 01       	movw	r30, r18
    247a:	e7 5a       	subi	r30, 0xA7	; 167
    247c:	fd 4f       	sbci	r31, 0xFD	; 253
    247e:	20 81       	ld	r18, Z
    2480:	31 81       	ldd	r19, Z+1	; 0x01
    2482:	42 17       	cp	r20, r18
    2484:	53 07       	cpc	r21, r19
    2486:	59 f0       	breq	.+22     	; 0x249e <newSort+0x140>
    2488:	fc 01       	movw	r30, r24
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	e7 5a       	subi	r30, 0xA7	; 167
    2490:	fd 4f       	sbci	r31, 0xFD	; 253
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	48 17       	cp	r20, r24
    2498:	59 07       	cpc	r21, r25
    249a:	09 f0       	breq	.+2      	; 0x249e <newSort+0x140>
    249c:	ec c0       	rjmp	.+472    	; 0x2676 <newSort+0x318>
				pickSort(0, t1);
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	59 da       	rcall	.-2894   	; 0x1956 <pickSort>
    24a4:	e8 c0       	rjmp	.+464    	; 0x2676 <newSort+0x318>
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    24a6:	ef 3f       	cpi	r30, 0xFF	; 255
    24a8:	af ef       	ldi	r26, 0xFF	; 255
    24aa:	fa 07       	cpc	r31, r26
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <newSort+0x152>
    24ae:	51 c0       	rjmp	.+162    	; 0x2552 <newSort+0x1f4>
    24b0:	da 01       	movw	r26, r20
    24b2:	aa 0f       	add	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	aa 0f       	add	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	a9 5b       	subi	r26, 0xB9	; 185
    24bc:	bd 4f       	sbci	r27, 0xFD	; 253
    24be:	0d 90       	ld	r0, X+
    24c0:	bc 91       	ld	r27, X
    24c2:	a0 2d       	mov	r26, r0
    24c4:	11 96       	adiw	r26, 0x01	; 1
    24c6:	09 f4       	brne	.+2      	; 0x24ca <newSort+0x16c>
    24c8:	0a c1       	rjmp	.+532    	; 0x26de <newSort+0x380>
    24ca:	da 01       	movw	r26, r20
    24cc:	aa 0f       	add	r26, r26
    24ce:	bb 1f       	adc	r27, r27
    24d0:	aa 0f       	add	r26, r26
    24d2:	bb 1f       	adc	r27, r27
    24d4:	a9 5b       	subi	r26, 0xB9	; 185
    24d6:	bd 4f       	sbci	r27, 0xFD	; 253
    24d8:	12 96       	adiw	r26, 0x02	; 2
    24da:	0d 90       	ld	r0, X+
    24dc:	bc 91       	ld	r27, X
    24de:	a0 2d       	mov	r26, r0
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	b9 f5       	brne	.+110    	; 0x2552 <newSort+0x1f4>
    24e4:	ea c0       	rjmp	.+468    	; 0x26ba <newSort+0x35c>
		{
			ct = a1;
			if (term[a1][0] == -1 || term[a1][1] == -1)
			{
				if (arm[1] == -1)
    24e6:	2f 3f       	cpi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	09 f0       	breq	.+2      	; 0x24ee <newSort+0x190>
    24ec:	c4 c0       	rjmp	.+392    	; 0x2676 <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    24ee:	9b 01       	movw	r18, r22
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	f9 01       	movw	r30, r18
    24f6:	e1 5c       	subi	r30, 0xC1	; 193
    24f8:	fd 4f       	sbci	r31, 0xFD	; 253
    24fa:	40 81       	ld	r20, Z
    24fc:	51 81       	ldd	r21, Z+1	; 0x01
    24fe:	f9 01       	movw	r30, r18
    2500:	e7 5a       	subi	r30, 0xA7	; 167
    2502:	fd 4f       	sbci	r31, 0xFD	; 253
    2504:	20 81       	ld	r18, Z
    2506:	31 81       	ldd	r19, Z+1	; 0x01
    2508:	42 17       	cp	r20, r18
    250a:	53 07       	cpc	r21, r19
    250c:	09 f0       	breq	.+2      	; 0x2510 <newSort+0x1b2>
    250e:	b3 c0       	rjmp	.+358    	; 0x2676 <newSort+0x318>
    2510:	fc 01       	movw	r30, r24
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	e7 5a       	subi	r30, 0xA7	; 167
    2518:	fd 4f       	sbci	r31, 0xFD	; 253
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	48 17       	cp	r20, r24
    2520:	59 07       	cpc	r21, r25
    2522:	09 f0       	breq	.+2      	; 0x2526 <newSort+0x1c8>
    2524:	a8 c0       	rjmp	.+336    	; 0x2676 <newSort+0x318>
					pickSort(0, t1);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	15 da       	rcall	.-3030   	; 0x1956 <pickSort>
    252c:	a4 c0       	rjmp	.+328    	; 0x2676 <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[1] != -1)
    252e:	fb 01       	movw	r30, r22
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	e1 5c       	subi	r30, 0xC1	; 193
    2536:	fd 4f       	sbci	r31, 0xFD	; 253
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	09 f0       	breq	.+2      	; 0x2542 <newSort+0x1e4>
    2540:	9a c0       	rjmp	.+308    	; 0x2676 <newSort+0x318>
    2542:	2f 3f       	cpi	r18, 0xFF	; 255
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	09 f4       	brne	.+2      	; 0x254a <newSort+0x1ec>
    2548:	96 c0       	rjmp	.+300    	; 0x2676 <newSort+0x318>
			sortDrop(0, t1);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	f4 dc       	rcall	.-1560   	; 0x1f38 <sortDrop>
    2550:	92 c0       	rjmp	.+292    	; 0x2676 <newSort+0x318>
		}
		else	if (arm[1] != -1 && (sort[t1] == -1 && arm[0] != -1))
    2552:	2f 3f       	cpi	r18, 0xFF	; 255
    2554:	1f ef       	ldi	r17, 0xFF	; 255
    2556:	31 07       	cpc	r19, r17
    2558:	a1 f0       	breq	.+40     	; 0x2582 <newSort+0x224>
    255a:	db 01       	movw	r26, r22
    255c:	aa 0f       	add	r26, r26
    255e:	bb 1f       	adc	r27, r27
    2560:	a1 5c       	subi	r26, 0xC1	; 193
    2562:	bd 4f       	sbci	r27, 0xFD	; 253
    2564:	8d 91       	ld	r24, X+
    2566:	9c 91       	ld	r25, X
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	31 f4       	brne	.+12     	; 0x2578 <newSort+0x21a>
    256c:	31 96       	adiw	r30, 0x01	; 1
    256e:	21 f0       	breq	.+8      	; 0x2578 <newSort+0x21a>
		sortDrop(0, t1);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	e1 dc       	rcall	.-1598   	; 0x1f38 <sortDrop>
    2576:	7f c0       	rjmp	.+254    	; 0x2676 <newSort+0x318>
		else if (arm[1] != -1)
		ct = arm[1];
    2578:	30 93 44 02 	sts	0x0244, r19
    257c:	20 93 43 02 	sts	0x0243, r18
    2580:	7a c0       	rjmp	.+244    	; 0x2676 <newSort+0x318>
		else ct = arm[0];
    2582:	f0 93 44 02 	sts	0x0244, r31
    2586:	e0 93 43 02 	sts	0x0243, r30
    258a:	75 c0       	rjmp	.+234    	; 0x2676 <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    258c:	a8 01       	movw	r20, r16
    258e:	44 0f       	add	r20, r20
    2590:	55 1f       	adc	r21, r21
    2592:	fa 01       	movw	r30, r20
    2594:	e1 5c       	subi	r30, 0xC1	; 193
    2596:	fd 4f       	sbci	r31, 0xFD	; 253
    2598:	20 81       	ld	r18, Z
    259a:	31 81       	ldd	r19, Z+1	; 0x01
    259c:	fa 01       	movw	r30, r20
    259e:	e7 5a       	subi	r30, 0xA7	; 167
    25a0:	fd 4f       	sbci	r31, 0xFD	; 253
    25a2:	40 81       	ld	r20, Z
    25a4:	51 81       	ldd	r21, Z+1	; 0x01
    25a6:	24 17       	cp	r18, r20
    25a8:	35 07       	cpc	r19, r21
    25aa:	51 f0       	breq	.+20     	; 0x25c0 <newSort+0x262>
    25ac:	fc 01       	movw	r30, r24
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	e7 5a       	subi	r30, 0xA7	; 167
    25b4:	fd 4f       	sbci	r31, 0xFD	; 253
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	26 17       	cp	r18, r22
    25bc:	37 07       	cpc	r19, r23
    25be:	81 f4       	brne	.+32     	; 0x25e0 <newSort+0x282>
    25c0:	2f 3f       	cpi	r18, 0xFF	; 255
    25c2:	af ef       	ldi	r26, 0xFF	; 255
    25c4:	3a 07       	cpc	r19, r26
    25c6:	31 f1       	breq	.+76     	; 0x2614 <newSort+0x2b6>
		ct = indicator[sort[t1]];
    25c8:	f9 01       	movw	r30, r18
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ef 59       	subi	r30, 0x9F	; 159
    25d0:	fd 4f       	sbci	r31, 0xFD	; 253
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	90 93 44 02 	sts	0x0244, r25
    25da:	80 93 43 02 	sts	0x0243, r24
    25de:	4b c0       	rjmp	.+150    	; 0x2676 <newSort+0x318>
		else if (sort[t1] != -1)
    25e0:	2f 3f       	cpi	r18, 0xFF	; 255
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	b9 f0       	breq	.+46     	; 0x2614 <newSort+0x2b6>
		{
			pickSort(1, t1);
    25e6:	b8 01       	movw	r22, r16
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	b4 d9       	rcall	.-3224   	; 0x1956 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    25ee:	0f 5f       	subi	r16, 0xFF	; 255
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	01 70       	andi	r16, 0x01	; 1
    25f4:	10 78       	andi	r17, 0x80	; 128
    25f6:	11 23       	and	r17, r17
    25f8:	34 f4       	brge	.+12     	; 0x2606 <newSort+0x2a8>
    25fa:	01 50       	subi	r16, 0x01	; 1
    25fc:	11 09       	sbc	r17, r1
    25fe:	0e 6f       	ori	r16, 0xFE	; 254
    2600:	1f 6f       	ori	r17, 0xFF	; 255
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	0c 5f       	subi	r16, 0xFC	; 252
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	10 93 44 02 	sts	0x0244, r17
    260e:	00 93 43 02 	sts	0x0243, r16
    2612:	31 c0       	rjmp	.+98     	; 0x2676 <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    2614:	f8 01       	movw	r30, r16
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	e0 5e       	subi	r30, 0xE0	; 224
    261c:	fd 4f       	sbci	r31, 0xFD	; 253
    261e:	20 81       	ld	r18, Z
    2620:	31 81       	ldd	r19, Z+1	; 0x01
    2622:	21 30       	cpi	r18, 0x01	; 1
    2624:	31 05       	cpc	r19, r1
    2626:	19 f5       	brne	.+70     	; 0x266e <newSort+0x310>
    2628:	f8 01       	movw	r30, r16
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	e9 5b       	subi	r30, 0xB9	; 185
    2634:	fd 4f       	sbci	r31, 0xFD	; 253
    2636:	20 81       	ld	r18, Z
    2638:	31 81       	ldd	r19, Z+1	; 0x01
    263a:	42 17       	cp	r20, r18
    263c:	53 07       	cpc	r21, r19
    263e:	19 f0       	breq	.+6      	; 0x2646 <newSort+0x2e8>
    2640:	2f 3f       	cpi	r18, 0xFF	; 255
    2642:	3f 4f       	sbci	r19, 0xFF	; 255
    2644:	a1 f4       	brne	.+40     	; 0x266e <newSort+0x310>
    2646:	f8 01       	movw	r30, r16
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	e9 5b       	subi	r30, 0xB9	; 185
    2652:	fd 4f       	sbci	r31, 0xFD	; 253
    2654:	22 81       	ldd	r18, Z+2	; 0x02
    2656:	33 81       	ldd	r19, Z+3	; 0x03
    2658:	42 17       	cp	r20, r18
    265a:	53 07       	cpc	r21, r19
    265c:	19 f0       	breq	.+6      	; 0x2664 <newSort+0x306>
    265e:	2f 3f       	cpi	r18, 0xFF	; 255
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	29 f4       	brne	.+10     	; 0x266e <newSort+0x310>
		ct = t2;
    2664:	90 93 44 02 	sts	0x0244, r25
    2668:	80 93 43 02 	sts	0x0243, r24
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <newSort+0x318>
		else ct = t1;
    266e:	10 93 44 02 	sts	0x0244, r17
    2672:	00 93 43 02 	sts	0x0243, r16
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    2676:	80 91 43 02 	lds	r24, 0x0243
    267a:	90 91 44 02 	lds	r25, 0x0244
    267e:	02 96       	adiw	r24, 0x02	; 2
    2680:	83 70       	andi	r24, 0x03	; 3
    2682:	90 78       	andi	r25, 0x80	; 128
    2684:	99 23       	and	r25, r25
    2686:	24 f4       	brge	.+8      	; 0x2690 <newSort+0x332>
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	8c 6f       	ori	r24, 0xFC	; 252
    268c:	9f 6f       	ori	r25, 0xFF	; 255
    268e:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2690:	90 93 6a 02 	sts	0x026A, r25
    2694:	80 93 69 02 	sts	0x0269, r24
    2698:	2e c0       	rjmp	.+92     	; 0x26f6 <newSort+0x398>
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
	a1 = indicator[arm[0]];

	t1 = (ct + 1) % 2;
    269a:	80 91 43 02 	lds	r24, 0x0243
    269e:	90 91 44 02 	lds	r25, 0x0244
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	62 e0       	ldi	r22, 0x02	; 2
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	c1 d5       	rcall	.+2946   	; 0x322c <__divmodhi4>
    26aa:	8c 01       	movw	r16, r24
    26ac:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    26ae:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
    26b0:	2f 3f       	cpi	r18, 0xFF	; 255
    26b2:	af ef       	ldi	r26, 0xFF	; 255
    26b4:	3a 07       	cpc	r19, r26
    26b6:	c1 f4       	brne	.+48     	; 0x26e8 <newSort+0x38a>
    26b8:	69 cf       	rjmp	.-302    	; 0x258c <newSort+0x22e>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    26ba:	50 93 44 02 	sts	0x0244, r21
    26be:	40 93 43 02 	sts	0x0243, r20
			if (term[a1][0] == -1 || term[a1][1] == -1)
    26c2:	fa 01       	movw	r30, r20
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ee 0f       	add	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	e9 5b       	subi	r30, 0xB9	; 185
    26ce:	fd 4f       	sbci	r31, 0xFD	; 253
    26d0:	42 81       	ldd	r20, Z+2	; 0x02
    26d2:	53 81       	ldd	r21, Z+3	; 0x03
    26d4:	4f 3f       	cpi	r20, 0xFF	; 255
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	09 f0       	breq	.+2      	; 0x26dc <newSort+0x37e>
    26da:	29 cf       	rjmp	.-430    	; 0x252e <newSort+0x1d0>
    26dc:	04 cf       	rjmp	.-504    	; 0x24e6 <newSort+0x188>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    26de:	50 93 44 02 	sts	0x0244, r21
    26e2:	40 93 43 02 	sts	0x0243, r20
    26e6:	ff ce       	rjmp	.-514    	; 0x24e6 <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    26e8:	d0 93 44 02 	sts	0x0244, r29
    26ec:	c0 93 43 02 	sts	0x0243, r28
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    26f0:	4e ef       	ldi	r20, 0xFE	; 254
    26f2:	5f ef       	ldi	r21, 0xFF	; 255
    26f4:	9c ce       	rjmp	.-712    	; 0x242e <newSort+0xd0>
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	08 95       	ret

00002700 <sortCheck>:
void sortCheck()
{
    2700:	8f 92       	push	r8
    2702:	9f 92       	push	r9
    2704:	af 92       	push	r10
    2706:	bf 92       	push	r11
    2708:	cf 92       	push	r12
    270a:	df 92       	push	r13
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2718:	40 91 43 02 	lds	r20, 0x0243
    271c:	50 91 44 02 	lds	r21, 0x0244
    2720:	42 30       	cpi	r20, 0x02	; 2
    2722:	51 05       	cpc	r21, r1
    2724:	30 f4       	brcc	.+12     	; 0x2732 <sortCheck+0x32>
    2726:	80 91 0c 02 	lds	r24, 0x020C
    272a:	90 91 0d 02 	lds	r25, 0x020D
    272e:	02 97       	sbiw	r24, 0x02	; 2
    2730:	79 f0       	breq	.+30     	; 0x2750 <sortCheck+0x50>
    2732:	ca 01       	movw	r24, r20
    2734:	02 97       	sbiw	r24, 0x02	; 2
    2736:	02 97       	sbiw	r24, 0x02	; 2
    2738:	80 f4       	brcc	.+32     	; 0x275a <sortCheck+0x5a>
    273a:	80 91 0c 02 	lds	r24, 0x020C
    273e:	90 91 0d 02 	lds	r25, 0x020D
    2742:	89 2b       	or	r24, r25
    2744:	79 f0       	breq	.+30     	; 0x2764 <sortCheck+0x64>
}
void sortCheck()
{
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2746:	01 e0       	ldi	r16, 0x01	; 1
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	c0 e0       	ldi	r28, 0x00	; 0
    274c:	d0 e0       	ldi	r29, 0x00	; 0
    274e:	0e c0       	rjmp	.+28     	; 0x276c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2750:	00 e0       	ldi	r16, 0x00	; 0
    2752:	10 e0       	ldi	r17, 0x00	; 0
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2754:	c1 e0       	ldi	r28, 0x01	; 1
    2756:	d0 e0       	ldi	r29, 0x00	; 0
    2758:	09 c0       	rjmp	.+18     	; 0x276c <sortCheck+0x6c>
}
void sortCheck()
{
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    275a:	01 e0       	ldi	r16, 0x01	; 1
    275c:	10 e0       	ldi	r17, 0x00	; 0
    275e:	c0 e0       	ldi	r28, 0x00	; 0
    2760:	d0 e0       	ldi	r29, 0x00	; 0
    2762:	04 c0       	rjmp	.+8      	; 0x276c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2764:	00 e0       	ldi	r16, 0x00	; 0
    2766:	10 e0       	ldi	r17, 0x00	; 0
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2768:	c1 e0       	ldi	r28, 0x01	; 1
    276a:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    276c:	9a 01       	movw	r18, r20
    276e:	21 70       	andi	r18, 0x01	; 1
    2770:	30 78       	andi	r19, 0x80	; 128
    2772:	33 23       	and	r19, r19
    2774:	34 f4       	brge	.+12     	; 0x2782 <sortCheck+0x82>
    2776:	21 50       	subi	r18, 0x01	; 1
    2778:	31 09       	sbc	r19, r1
    277a:	2e 6f       	ori	r18, 0xFE	; 254
    277c:	3f 6f       	ori	r19, 0xFF	; 255
    277e:	2f 5f       	subi	r18, 0xFF	; 255
    2780:	3f 4f       	sbci	r19, 0xFF	; 255
    2782:	b2 2e       	mov	r11, r18
    2784:	a3 2e       	mov	r10, r19
    2786:	f9 01       	movw	r30, r18
    2788:	ee 0f       	add	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	e1 5c       	subi	r30, 0xC1	; 193
    278e:	fd 4f       	sbci	r31, 0xFD	; 253
    2790:	20 81       	ld	r18, Z
    2792:	31 81       	ldd	r19, Z+1	; 0x01
    2794:	fa 01       	movw	r30, r20
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	e7 5a       	subi	r30, 0xA7	; 167
    279c:	fd 4f       	sbci	r31, 0xFD	; 253
    279e:	80 81       	ld	r24, Z
    27a0:	91 81       	ldd	r25, Z+1	; 0x01
    27a2:	28 17       	cp	r18, r24
    27a4:	39 07       	cpc	r19, r25
    27a6:	79 f0       	breq	.+30     	; 0x27c6 <sortCheck+0xc6>
    27a8:	80 91 69 02 	lds	r24, 0x0269
    27ac:	90 91 6a 02 	lds	r25, 0x026A
    27b0:	fc 01       	movw	r30, r24
    27b2:	ee 0f       	add	r30, r30
    27b4:	ff 1f       	adc	r31, r31
    27b6:	e7 5a       	subi	r30, 0xA7	; 167
    27b8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ba:	40 81       	ld	r20, Z
    27bc:	51 81       	ldd	r21, Z+1	; 0x01
    27be:	24 17       	cp	r18, r20
    27c0:	35 07       	cpc	r19, r21
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <sortCheck+0xc6>
    27c4:	a6 c0       	rjmp	.+332    	; 0x2912 <sortCheck+0x212>
	{
		if (armCount>0)
    27c6:	80 91 06 02 	lds	r24, 0x0206
    27ca:	90 91 07 02 	lds	r25, 0x0207
    27ce:	18 16       	cp	r1, r24
    27d0:	19 06       	cpc	r1, r25
    27d2:	0c f0       	brlt	.+2      	; 0x27d6 <sortCheck+0xd6>
    27d4:	95 c0       	rjmp	.+298    	; 0x2900 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    27d6:	f9 01       	movw	r30, r18
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	ef 59       	subi	r30, 0x9F	; 159
    27de:	fd 4f       	sbci	r31, 0xFD	; 253
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	70 93 44 02 	sts	0x0244, r23
    27e8:	60 93 43 02 	sts	0x0243, r22
			if (arm[arm0] == -1)
    27ec:	fe 01       	movw	r30, r28
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	e3 59       	subi	r30, 0x93	; 147
    27f4:	fd 4f       	sbci	r31, 0xFD	; 253
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	69 f4       	brne	.+26     	; 0x2818 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    27fe:	61 70       	andi	r22, 0x01	; 1
    2800:	70 78       	andi	r23, 0x80	; 128
    2802:	77 23       	and	r23, r23
    2804:	34 f4       	brge	.+12     	; 0x2812 <sortCheck+0x112>
    2806:	61 50       	subi	r22, 0x01	; 1
    2808:	71 09       	sbc	r23, r1
    280a:	6e 6f       	ori	r22, 0xFE	; 254
    280c:	7f 6f       	ori	r23, 0xFF	; 255
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	ce 01       	movw	r24, r28
    2814:	a0 d8       	rcall	.-3776   	; 0x1956 <pickSort>
    2816:	15 c0       	rjmp	.+42     	; 0x2842 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    2818:	f8 01       	movw	r30, r16
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	e3 59       	subi	r30, 0x93	; 147
    2820:	fd 4f       	sbci	r31, 0xFD	; 253
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	61 f4       	brne	.+24     	; 0x2842 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    282a:	61 70       	andi	r22, 0x01	; 1
    282c:	70 78       	andi	r23, 0x80	; 128
    282e:	77 23       	and	r23, r23
    2830:	34 f4       	brge	.+12     	; 0x283e <sortCheck+0x13e>
    2832:	61 50       	subi	r22, 0x01	; 1
    2834:	71 09       	sbc	r23, r1
    2836:	6e 6f       	ori	r22, 0xFE	; 254
    2838:	7f 6f       	ori	r23, 0xFF	; 255
    283a:	6f 5f       	subi	r22, 0xFF	; 255
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	c8 01       	movw	r24, r16
    2840:	8a d8       	rcall	.-3820   	; 0x1956 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    2842:	80 91 06 02 	lds	r24, 0x0206
    2846:	90 91 07 02 	lds	r25, 0x0207
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	09 f4       	brne	.+2      	; 0x2850 <sortCheck+0x150>
    284e:	6d c1       	rjmp	.+730    	; 0x2b2a <sortCheck+0x42a>
    2850:	80 91 43 02 	lds	r24, 0x0243
    2854:	90 91 44 02 	lds	r25, 0x0244
    2858:	fc 01       	movw	r30, r24
    285a:	ee 0f       	add	r30, r30
    285c:	ff 1f       	adc	r31, r31
    285e:	ee 0f       	add	r30, r30
    2860:	ff 1f       	adc	r31, r31
    2862:	e9 5b       	subi	r30, 0xB9	; 185
    2864:	fd 4f       	sbci	r31, 0xFD	; 253
    2866:	20 81       	ld	r18, Z
    2868:	31 81       	ldd	r19, Z+1	; 0x01
    286a:	2f 3f       	cpi	r18, 0xFF	; 255
    286c:	3f 4f       	sbci	r19, 0xFF	; 255
    286e:	09 f4       	brne	.+2      	; 0x2872 <sortCheck+0x172>
    2870:	5c c1       	rjmp	.+696    	; 0x2b2a <sortCheck+0x42a>
    2872:	fc 01       	movw	r30, r24
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	e9 5b       	subi	r30, 0xB9	; 185
    287e:	fd 4f       	sbci	r31, 0xFD	; 253
    2880:	22 81       	ldd	r18, Z+2	; 0x02
    2882:	33 81       	ldd	r19, Z+3	; 0x03
    2884:	2f 3f       	cpi	r18, 0xFF	; 255
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	09 f4       	brne	.+2      	; 0x288c <sortCheck+0x18c>
    288a:	4f c1       	rjmp	.+670    	; 0x2b2a <sortCheck+0x42a>
    288c:	9c 01       	movw	r18, r24
    288e:	21 70       	andi	r18, 0x01	; 1
    2890:	30 78       	andi	r19, 0x80	; 128
    2892:	33 23       	and	r19, r19
    2894:	34 f4       	brge	.+12     	; 0x28a2 <sortCheck+0x1a2>
    2896:	21 50       	subi	r18, 0x01	; 1
    2898:	31 09       	sbc	r19, r1
    289a:	2e 6f       	ori	r18, 0xFE	; 254
    289c:	3f 6f       	ori	r19, 0xFF	; 255
    289e:	2f 5f       	subi	r18, 0xFF	; 255
    28a0:	3f 4f       	sbci	r19, 0xFF	; 255
    28a2:	62 2f       	mov	r22, r18
    28a4:	73 2f       	mov	r23, r19
    28a6:	f9 01       	movw	r30, r18
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	e1 5c       	subi	r30, 0xC1	; 193
    28ae:	fd 4f       	sbci	r31, 0xFD	; 253
    28b0:	20 81       	ld	r18, Z
    28b2:	31 81       	ldd	r19, Z+1	; 0x01
    28b4:	2f 3f       	cpi	r18, 0xFF	; 255
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	09 f0       	breq	.+2      	; 0x28bc <sortCheck+0x1bc>
    28ba:	37 c1       	rjmp	.+622    	; 0x2b2a <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    28bc:	fc 01       	movw	r30, r24
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	e7 5a       	subi	r30, 0xA7	; 167
    28c4:	fd 4f       	sbci	r31, 0xFD	; 253
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	fe 01       	movw	r30, r28
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	e3 59       	subi	r30, 0x93	; 147
    28d2:	fd 4f       	sbci	r31, 0xFD	; 253
    28d4:	20 81       	ld	r18, Z
    28d6:	31 81       	ldd	r19, Z+1	; 0x01
    28d8:	28 17       	cp	r18, r24
    28da:	39 07       	cpc	r19, r25
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    28de:	c8 01       	movw	r24, r16
    28e0:	2b db       	rcall	.-2474   	; 0x1f38 <sortDrop>
    28e2:	23 c1       	rjmp	.+582    	; 0x2b2a <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    28e4:	f8 01       	movw	r30, r16
    28e6:	ee 0f       	add	r30, r30
    28e8:	ff 1f       	adc	r31, r31
    28ea:	e3 59       	subi	r30, 0x93	; 147
    28ec:	fd 4f       	sbci	r31, 0xFD	; 253
    28ee:	20 81       	ld	r18, Z
    28f0:	31 81       	ldd	r19, Z+1	; 0x01
    28f2:	82 17       	cp	r24, r18
    28f4:	93 07       	cpc	r25, r19
    28f6:	09 f0       	breq	.+2      	; 0x28fa <sortCheck+0x1fa>
    28f8:	18 c1       	rjmp	.+560    	; 0x2b2a <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    28fa:	ce 01       	movw	r24, r28
    28fc:	1d db       	rcall	.-2502   	; 0x1f38 <sortDrop>
    28fe:	15 c1       	rjmp	.+554    	; 0x2b2a <sortCheck+0x42a>
			}
		}
		else ct = adj;
    2900:	80 91 69 02 	lds	r24, 0x0269
    2904:	90 91 6a 02 	lds	r25, 0x026A
    2908:	90 93 44 02 	sts	0x0244, r25
    290c:	80 93 43 02 	sts	0x0243, r24
    2910:	0c c1       	rjmp	.+536    	; 0x2b2a <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    2912:	fe 01       	movw	r30, r28
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	e3 59       	subi	r30, 0x93	; 147
    291a:	fd 4f       	sbci	r31, 0xFD	; 253
    291c:	01 90       	ld	r0, Z+
    291e:	f0 81       	ld	r31, Z
    2920:	e0 2d       	mov	r30, r0
    2922:	4e 17       	cp	r20, r30
    2924:	5f 07       	cpc	r21, r31
    2926:	09 f4       	brne	.+2      	; 0x292a <sortCheck+0x22a>
    2928:	8f c0       	rjmp	.+286    	; 0x2a48 <sortCheck+0x348>
    292a:	d8 01       	movw	r26, r16
    292c:	aa 0f       	add	r26, r26
    292e:	bb 1f       	adc	r27, r27
    2930:	a3 59       	subi	r26, 0x93	; 147
    2932:	bd 4f       	sbci	r27, 0xFD	; 253
    2934:	8d 90       	ld	r8, X+
    2936:	9c 90       	ld	r9, X
    2938:	48 15       	cp	r20, r8
    293a:	59 05       	cpc	r21, r9
    293c:	09 f4       	brne	.+2      	; 0x2940 <sortCheck+0x240>
    293e:	84 c0       	rjmp	.+264    	; 0x2a48 <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2940:	e0 90 06 02 	lds	r14, 0x0206
    2944:	f0 90 07 02 	lds	r15, 0x0207
    2948:	e1 14       	cp	r14, r1
    294a:	f1 04       	cpc	r15, r1
    294c:	09 f4       	brne	.+2      	; 0x2950 <sortCheck+0x250>
    294e:	4e c0       	rjmp	.+156    	; 0x29ec <sortCheck+0x2ec>
    2950:	b1 e0       	ldi	r27, 0x01	; 1
    2952:	eb 16       	cp	r14, r27
    2954:	f1 04       	cpc	r15, r1
    2956:	29 f4       	brne	.+10     	; 0x2962 <sortCheck+0x262>
    2958:	2f 3f       	cpi	r18, 0xFF	; 255
    295a:	6f ef       	ldi	r22, 0xFF	; 255
    295c:	36 07       	cpc	r19, r22
    295e:	b1 f5       	brne	.+108    	; 0x29cc <sortCheck+0x2cc>
    2960:	09 c0       	rjmp	.+18     	; 0x2974 <sortCheck+0x274>
    2962:	67 01       	movw	r12, r14
    2964:	71 e0       	ldi	r23, 0x01	; 1
    2966:	c7 1a       	sub	r12, r23
    2968:	d1 08       	sbc	r13, r1
    296a:	a2 e0       	ldi	r26, 0x02	; 2
    296c:	ca 16       	cp	r12, r26
    296e:	d1 04       	cpc	r13, r1
    2970:	08 f0       	brcs	.+2      	; 0x2974 <sortCheck+0x274>
    2972:	65 c0       	rjmp	.+202    	; 0x2a3e <sortCheck+0x33e>
    2974:	6c 01       	movw	r12, r24
    2976:	cc 0c       	add	r12, r12
    2978:	dd 1c       	adc	r13, r13
    297a:	cc 0c       	add	r12, r12
    297c:	dd 1c       	adc	r13, r13
    297e:	b6 01       	movw	r22, r12
    2980:	69 5b       	subi	r22, 0xB9	; 185
    2982:	7d 4f       	sbci	r23, 0xFD	; 253
    2984:	db 01       	movw	r26, r22
    2986:	cd 90       	ld	r12, X+
    2988:	dc 90       	ld	r13, X
    298a:	4c 15       	cp	r20, r12
    298c:	5d 05       	cpc	r21, r13
    298e:	21 f0       	breq	.+8      	; 0x2998 <sortCheck+0x298>
    2990:	cd 20       	and	r12, r13
    2992:	c0 94       	com	r12
    2994:	09 f0       	breq	.+2      	; 0x2998 <sortCheck+0x298>
    2996:	53 c0       	rjmp	.+166    	; 0x2a3e <sortCheck+0x33e>
    2998:	6c 01       	movw	r12, r24
    299a:	cc 0c       	add	r12, r12
    299c:	dd 1c       	adc	r13, r13
    299e:	cc 0c       	add	r12, r12
    29a0:	dd 1c       	adc	r13, r13
    29a2:	b6 01       	movw	r22, r12
    29a4:	69 5b       	subi	r22, 0xB9	; 185
    29a6:	7d 4f       	sbci	r23, 0xFD	; 253
    29a8:	db 01       	movw	r26, r22
    29aa:	12 96       	adiw	r26, 0x02	; 2
    29ac:	cd 90       	ld	r12, X+
    29ae:	dc 90       	ld	r13, X
    29b0:	13 97       	sbiw	r26, 0x03	; 3
    29b2:	4c 15       	cp	r20, r12
    29b4:	5d 05       	cpc	r21, r13
    29b6:	21 f0       	breq	.+8      	; 0x29c0 <sortCheck+0x2c0>
    29b8:	cd 20       	and	r12, r13
    29ba:	c0 94       	com	r12
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <sortCheck+0x2c0>
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <sortCheck+0x33e>
		{
			if (armCount>0)
    29c0:	1e 14       	cp	r1, r14
    29c2:	1f 04       	cpc	r1, r15
    29c4:	9c f4       	brge	.+38     	; 0x29ec <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    29c6:	2f 3f       	cpi	r18, 0xFF	; 255
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	81 f0       	breq	.+32     	; 0x29ec <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    29cc:	31 96       	adiw	r30, 0x01	; 1
    29ce:	31 f4       	brne	.+12     	; 0x29dc <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    29d0:	6b 2d       	mov	r22, r11
    29d2:	7a 2d       	mov	r23, r10
    29d4:	ce 01       	movw	r24, r28
    29d6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <pickSort>
    29da:	08 c0       	rjmp	.+16     	; 0x29ec <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    29dc:	89 20       	and	r8, r9
    29de:	80 94       	com	r8
    29e0:	29 f4       	brne	.+10     	; 0x29ec <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    29e2:	6b 2d       	mov	r22, r11
    29e4:	7a 2d       	mov	r23, r10
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 ab 0c 	call	0x1956	; 0x1956 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    29ec:	80 91 43 02 	lds	r24, 0x0243
    29f0:	90 91 44 02 	lds	r25, 0x0244
    29f4:	bc 01       	movw	r22, r24
    29f6:	6f 5f       	subi	r22, 0xFF	; 255
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	61 70       	andi	r22, 0x01	; 1
    29fc:	70 78       	andi	r23, 0x80	; 128
    29fe:	77 23       	and	r23, r23
    2a00:	34 f4       	brge	.+12     	; 0x2a0e <sortCheck+0x30e>
    2a02:	61 50       	subi	r22, 0x01	; 1
    2a04:	71 09       	sbc	r23, r1
    2a06:	6e 6f       	ori	r22, 0xFE	; 254
    2a08:	7f 6f       	ori	r23, 0xFF	; 255
    2a0a:	6f 5f       	subi	r22, 0xFF	; 255
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	6c 5f       	subi	r22, 0xFC	; 252
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	81 70       	andi	r24, 0x01	; 1
    2a14:	90 78       	andi	r25, 0x80	; 128
    2a16:	99 23       	and	r25, r25
    2a18:	24 f4       	brge	.+8      	; 0x2a22 <sortCheck+0x322>
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	8e 6f       	ori	r24, 0xFE	; 254
    2a1e:	9f 6f       	ori	r25, 0xFF	; 255
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	04 96       	adiw	r24, 0x04	; 4
    2a24:	0e 94 0a 09 	call	0x1214	; 0x1214 <traverseToSort>
			newSort();
    2a28:	9a dc       	rcall	.-1740   	; 0x235e <newSort>
			if (ct == 4 || ct == 5)
    2a2a:	80 91 43 02 	lds	r24, 0x0243
    2a2e:	90 91 44 02 	lds	r25, 0x0244
    2a32:	04 97       	sbiw	r24, 0x04	; 4
    2a34:	02 97       	sbiw	r24, 0x02	; 2
    2a36:	08 f0       	brcs	.+2      	; 0x2a3a <sortCheck+0x33a>
    2a38:	89 c0       	rjmp	.+274    	; 0x2b4c <sortCheck+0x44c>
				newSort();
    2a3a:	91 dc       	rcall	.-1758   	; 0x235e <newSort>
    2a3c:	87 c0       	rjmp	.+270    	; 0x2b4c <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    2a3e:	90 93 44 02 	sts	0x0244, r25
    2a42:	80 93 43 02 	sts	0x0243, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2a46:	71 c0       	rjmp	.+226    	; 0x2b2a <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2a48:	a0 91 06 02 	lds	r26, 0x0206
    2a4c:	b0 91 07 02 	lds	r27, 0x0207
    2a50:	10 97       	sbiw	r26, 0x00	; 0
    2a52:	c1 f5       	brne	.+112    	; 0x2ac4 <sortCheck+0x3c4>
    2a54:	dc 01       	movw	r26, r24
    2a56:	aa 0f       	add	r26, r26
    2a58:	bb 1f       	adc	r27, r27
    2a5a:	a0 5e       	subi	r26, 0xE0	; 224
    2a5c:	bd 4f       	sbci	r27, 0xFD	; 253
    2a5e:	0d 90       	ld	r0, X+
    2a60:	bc 91       	ld	r27, X
    2a62:	a0 2d       	mov	r26, r0
    2a64:	a1 30       	cpi	r26, 0x01	; 1
    2a66:	b1 05       	cpc	r27, r1
    2a68:	d9 f4       	brne	.+54     	; 0x2aa0 <sortCheck+0x3a0>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	aa 0f       	add	r26, r26
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	aa 0f       	add	r26, r26
    2a72:	bb 1f       	adc	r27, r27
    2a74:	a9 5b       	subi	r26, 0xB9	; 185
    2a76:	bd 4f       	sbci	r27, 0xFD	; 253
    2a78:	0d 90       	ld	r0, X+
    2a7a:	bc 91       	ld	r27, X
    2a7c:	a0 2d       	mov	r26, r0
    2a7e:	11 96       	adiw	r26, 0x01	; 1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <sortCheck+0x384>
    2a82:	4b c0       	rjmp	.+150    	; 0x2b1a <sortCheck+0x41a>
    2a84:	dc 01       	movw	r26, r24
    2a86:	aa 0f       	add	r26, r26
    2a88:	bb 1f       	adc	r27, r27
    2a8a:	aa 0f       	add	r26, r26
    2a8c:	bb 1f       	adc	r27, r27
    2a8e:	a9 5b       	subi	r26, 0xB9	; 185
    2a90:	bd 4f       	sbci	r27, 0xFD	; 253
    2a92:	12 96       	adiw	r26, 0x02	; 2
    2a94:	8d 91       	ld	r24, X+
    2a96:	9c 91       	ld	r25, X
    2a98:	13 97       	sbiw	r26, 0x03	; 3
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	19 f4       	brne	.+6      	; 0x2aa4 <sortCheck+0x3a4>
    2a9e:	3d c0       	rjmp	.+122    	; 0x2b1a <sortCheck+0x41a>
    2aa0:	ab 2b       	or	r26, r27
    2aa2:	d9 f5       	brne	.+118    	; 0x2b1a <sortCheck+0x41a>
    2aa4:	2f 3f       	cpi	r18, 0xFF	; 255
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	c1 f5       	brne	.+112    	; 0x2b1a <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    2aaa:	4e 17       	cp	r20, r30
    2aac:	5f 07       	cpc	r21, r31
    2aae:	29 f4       	brne	.+10     	; 0x2aba <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    2ab0:	6b 2d       	mov	r22, r11
    2ab2:	7a 2d       	mov	r23, r10
    2ab4:	c8 01       	movw	r24, r16
    2ab6:	40 da       	rcall	.-2944   	; 0x1f38 <sortDrop>
    2ab8:	30 c0       	rjmp	.+96     	; 0x2b1a <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    2aba:	6b 2d       	mov	r22, r11
    2abc:	7a 2d       	mov	r23, r10
    2abe:	ce 01       	movw	r24, r28
    2ac0:	3b da       	rcall	.-2954   	; 0x1f38 <sortDrop>
    2ac2:	2b c0       	rjmp	.+86     	; 0x2b1a <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2ac4:	11 97       	sbiw	r26, 0x01	; 1
    2ac6:	49 f5       	brne	.+82     	; 0x2b1a <sortCheck+0x41a>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	aa 0f       	add	r26, r26
    2acc:	bb 1f       	adc	r27, r27
    2ace:	aa 0f       	add	r26, r26
    2ad0:	bb 1f       	adc	r27, r27
    2ad2:	a9 5b       	subi	r26, 0xB9	; 185
    2ad4:	bd 4f       	sbci	r27, 0xFD	; 253
    2ad6:	4d 91       	ld	r20, X+
    2ad8:	5c 91       	ld	r21, X
    2ada:	4f 3f       	cpi	r20, 0xFF	; 255
    2adc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ade:	69 f0       	breq	.+26     	; 0x2afa <sortCheck+0x3fa>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	aa 0f       	add	r26, r26
    2ae4:	bb 1f       	adc	r27, r27
    2ae6:	aa 0f       	add	r26, r26
    2ae8:	bb 1f       	adc	r27, r27
    2aea:	a9 5b       	subi	r26, 0xB9	; 185
    2aec:	bd 4f       	sbci	r27, 0xFD	; 253
    2aee:	12 96       	adiw	r26, 0x02	; 2
    2af0:	8d 91       	ld	r24, X+
    2af2:	9c 91       	ld	r25, X
    2af4:	13 97       	sbiw	r26, 0x03	; 3
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	81 f4       	brne	.+32     	; 0x2b1a <sortCheck+0x41a>
    2afa:	2f 3f       	cpi	r18, 0xFF	; 255
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	69 f0       	breq	.+26     	; 0x2b1a <sortCheck+0x41a>
			if (arm[arm0] == -1)
    2b00:	31 96       	adiw	r30, 0x01	; 1
    2b02:	31 f4       	brne	.+12     	; 0x2b10 <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    2b04:	6b 2d       	mov	r22, r11
    2b06:	7a 2d       	mov	r23, r10
    2b08:	ce 01       	movw	r24, r28
    2b0a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <pickSort>
    2b0e:	05 c0       	rjmp	.+10     	; 0x2b1a <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    2b10:	6b 2d       	mov	r22, r11
    2b12:	7a 2d       	mov	r23, r10
    2b14:	c8 01       	movw	r24, r16
    2b16:	0e 94 ab 0c 	call	0x1956	; 0x1956 <pickSort>
			ct = adj;
    2b1a:	80 91 69 02 	lds	r24, 0x0269
    2b1e:	90 91 6a 02 	lds	r25, 0x026A
    2b22:	90 93 44 02 	sts	0x0244, r25
    2b26:	80 93 43 02 	sts	0x0243, r24
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    2b2a:	80 91 43 02 	lds	r24, 0x0243
    2b2e:	90 91 44 02 	lds	r25, 0x0244
    2b32:	02 96       	adiw	r24, 0x02	; 2
    2b34:	83 70       	andi	r24, 0x03	; 3
    2b36:	90 78       	andi	r25, 0x80	; 128
    2b38:	99 23       	and	r25, r25
    2b3a:	24 f4       	brge	.+8      	; 0x2b44 <sortCheck+0x444>
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	8c 6f       	ori	r24, 0xFC	; 252
    2b40:	9f 6f       	ori	r25, 0xFF	; 255
    2b42:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2b44:	90 93 6a 02 	sts	0x026A, r25
    2b48:	80 93 69 02 	sts	0x0269, r24
}
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	bf 90       	pop	r11
    2b5e:	af 90       	pop	r10
    2b60:	9f 90       	pop	r9
    2b62:	8f 90       	pop	r8
    2b64:	08 95       	ret

00002b66 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2b66:	80 91 47 02 	lds	r24, 0x0247
    2b6a:	90 91 48 02 	lds	r25, 0x0248
    2b6e:	20 91 59 02 	lds	r18, 0x0259
    2b72:	30 91 5a 02 	lds	r19, 0x025A
    2b76:	82 17       	cp	r24, r18
    2b78:	93 07       	cpc	r25, r19
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <predict+0x18>
    2b7c:	5f c0       	rjmp	.+190    	; 0x2c3c <predict+0xd6>
    2b7e:	20 91 49 02 	lds	r18, 0x0249
    2b82:	30 91 4a 02 	lds	r19, 0x024A
    2b86:	82 17       	cp	r24, r18
    2b88:	93 07       	cpc	r25, r19
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <predict+0x28>
    2b8c:	57 c0       	rjmp	.+174    	; 0x2c3c <predict+0xd6>
    2b8e:	80 91 4b 02 	lds	r24, 0x024B
    2b92:	90 91 4c 02 	lds	r25, 0x024C
    2b96:	20 91 5b 02 	lds	r18, 0x025B
    2b9a:	30 91 5c 02 	lds	r19, 0x025C
    2b9e:	82 17       	cp	r24, r18
    2ba0:	93 07       	cpc	r25, r19
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <predict+0x40>
    2ba4:	4b c0       	rjmp	.+150    	; 0x2c3c <predict+0xd6>
    2ba6:	20 91 4d 02 	lds	r18, 0x024D
    2baa:	30 91 4e 02 	lds	r19, 0x024E
    2bae:	82 17       	cp	r24, r18
    2bb0:	93 07       	cpc	r25, r19
    2bb2:	09 f0       	breq	.+2      	; 0x2bb6 <predict+0x50>
    2bb4:	43 c0       	rjmp	.+134    	; 0x2c3c <predict+0xd6>
    2bb6:	80 91 43 02 	lds	r24, 0x0243
    2bba:	90 91 44 02 	lds	r25, 0x0244
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	ee 0f       	add	r30, r30
    2bc2:	ff 1f       	adc	r31, r31
    2bc4:	ee 0f       	add	r30, r30
    2bc6:	ff 1f       	adc	r31, r31
    2bc8:	e9 5b       	subi	r30, 0xB9	; 185
    2bca:	fd 4f       	sbci	r31, 0xFD	; 253
    2bcc:	20 81       	ld	r18, Z
    2bce:	31 81       	ldd	r19, Z+1	; 0x01
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	ee 0f       	add	r30, r30
    2bd4:	ff 1f       	adc	r31, r31
    2bd6:	e7 5a       	subi	r30, 0xA7	; 167
    2bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bda:	40 81       	ld	r20, Z
    2bdc:	51 81       	ldd	r21, Z+1	; 0x01
    2bde:	24 17       	cp	r18, r20
    2be0:	35 07       	cpc	r19, r21
    2be2:	61 f5       	brne	.+88     	; 0x2c3c <predict+0xd6>
    2be4:	fc 01       	movw	r30, r24
    2be6:	ee 0f       	add	r30, r30
    2be8:	ff 1f       	adc	r31, r31
    2bea:	ee 0f       	add	r30, r30
    2bec:	ff 1f       	adc	r31, r31
    2bee:	e9 5b       	subi	r30, 0xB9	; 185
    2bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	28 17       	cp	r18, r24
    2bf8:	39 07       	cpc	r19, r25
    2bfa:	01 f5       	brne	.+64     	; 0x2c3c <predict+0xd6>
    2bfc:	80 91 3f 02 	lds	r24, 0x023F
    2c00:	90 91 40 02 	lds	r25, 0x0240
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	d1 f4       	brne	.+52     	; 0x2c3c <predict+0xd6>
    2c08:	80 91 41 02 	lds	r24, 0x0241
    2c0c:	90 91 42 02 	lds	r25, 0x0242
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	a1 f4       	brne	.+40     	; 0x2c3c <predict+0xd6>
    2c14:	80 91 6d 02 	lds	r24, 0x026D
    2c18:	90 91 6e 02 	lds	r25, 0x026E
    2c1c:	01 96       	adiw	r24, 0x01	; 1
    2c1e:	71 f4       	brne	.+28     	; 0x2c3c <predict+0xd6>
    2c20:	80 91 6f 02 	lds	r24, 0x026F
    2c24:	90 91 70 02 	lds	r25, 0x0270
    2c28:	01 96       	adiw	r24, 0x01	; 1
    2c2a:	41 f4       	brne	.+16     	; 0x2c3c <predict+0xd6>
		sorted = total;
    2c2c:	80 91 04 02 	lds	r24, 0x0204
    2c30:	90 91 05 02 	lds	r25, 0x0205
    2c34:	90 93 13 02 	sts	0x0213, r25
    2c38:	80 93 12 02 	sts	0x0212, r24
    2c3c:	08 95       	ret

00002c3e <setIndicatorAndColor>:
//**************END INITIALISATION*******************



void setIndicatorAndColor()
{
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	e7 e4       	ldi	r30, 0x47	; 71
    2c44:	f2 e0       	ldi	r31, 0x02	; 2
    2c46:	c0 e2       	ldi	r28, 0x20	; 32
    2c48:	d2 e0       	ldi	r29, 0x02	; 2
    2c4a:	a9 e5       	ldi	r26, 0x59	; 89
    2c4c:	b2 e0       	ldi	r27, 0x02	; 2
	int i;
	for (i = 0; i<4; i++)
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
	{
		term[i][0] = term[i][1] = -2;
    2c52:	2e ef       	ldi	r18, 0xFE	; 254
    2c54:	3f ef       	ldi	r19, 0xFF	; 255
    2c56:	33 83       	std	Z+3, r19	; 0x03
    2c58:	22 83       	std	Z+2, r18	; 0x02
    2c5a:	31 83       	std	Z+1, r19	; 0x01
    2c5c:	20 83       	st	Z, r18
		visited[i] = 0;
    2c5e:	19 92       	st	Y+, r1
    2c60:	19 92       	st	Y+, r1
		color[i]=i;
    2c62:	8d 93       	st	X+, r24
    2c64:	9d 93       	st	X+, r25


void setIndicatorAndColor()
{
	int i;
	for (i = 0; i<4; i++)
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	34 96       	adiw	r30, 0x04	; 4
    2c6a:	84 30       	cpi	r24, 0x04	; 4
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	99 f7       	brne	.-26     	; 0x2c56 <setIndicatorAndColor+0x18>
		term[i][0] = term[i][1] = -2;
		visited[i] = 0;
		color[i]=i;
	}
	for (i = 0; i<4; i++)
		indicator[color[i]] = i;
    2c70:	e0 91 59 02 	lds	r30, 0x0259
    2c74:	f0 91 5a 02 	lds	r31, 0x025A
    2c78:	ee 0f       	add	r30, r30
    2c7a:	ff 1f       	adc	r31, r31
    2c7c:	ef 59       	subi	r30, 0x9F	; 159
    2c7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c80:	11 82       	std	Z+1, r1	; 0x01
    2c82:	10 82       	st	Z, r1
    2c84:	e0 91 5b 02 	lds	r30, 0x025B
    2c88:	f0 91 5c 02 	lds	r31, 0x025C
    2c8c:	ee 0f       	add	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	ef 59       	subi	r30, 0x9F	; 159
    2c92:	fd 4f       	sbci	r31, 0xFD	; 253
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	e0 91 5d 02 	lds	r30, 0x025D
    2ca0:	f0 91 5e 02 	lds	r31, 0x025E
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	ef 59       	subi	r30, 0x9F	; 159
    2caa:	fd 4f       	sbci	r31, 0xFD	; 253
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	e0 91 5f 02 	lds	r30, 0x025F
    2cb8:	f0 91 60 02 	lds	r31, 0x0260
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	ef 59       	subi	r30, 0x9F	; 159
    2cc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
	sort[0] = sort[1] = -1;
    2ccc:	8f ef       	ldi	r24, 0xFF	; 255
    2cce:	9f ef       	ldi	r25, 0xFF	; 255
    2cd0:	90 93 42 02 	sts	0x0242, r25
    2cd4:	80 93 41 02 	sts	0x0241, r24
    2cd8:	90 93 40 02 	sts	0x0240, r25
    2cdc:	80 93 3f 02 	sts	0x023F, r24
	arm[0] = arm[1] = -1;
    2ce0:	90 93 70 02 	sts	0x0270, r25
    2ce4:	80 93 6f 02 	sts	0x026F, r24
    2ce8:	90 93 6e 02 	sts	0x026E, r25
    2cec:	80 93 6d 02 	sts	0x026D, r24
}
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	08 95       	ret

00002cf6 <indicator_set>:

void indicator_set()
{
	forwardJaa_Indi();
    2cf6:	0e 94 c8 07 	call	0xf90	; 0xf90 <forwardJaa_Indi>
	//buzzer();
	//turn efficiency
	forward_mm(160);
    2cfa:	80 ea       	ldi	r24, 0xA0	; 160
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	//buzzer();
	//scan 4
	soft_right_2();
    2d02:	0e 94 8d 02 	call	0x51a	; 0x51a <soft_right_2>
    2d06:	2f ef       	ldi	r18, 0xFF	; 255
    2d08:	8f e7       	ldi	r24, 0x7F	; 127
    2d0a:	9f e1       	ldi	r25, 0x1F	; 31
    2d0c:	21 50       	subi	r18, 0x01	; 1
    2d0e:	80 40       	sbci	r24, 0x00	; 0
    2d10:	90 40       	sbci	r25, 0x00	; 0
    2d12:	e1 f7       	brne	.-8      	; 0x2d0c <indicator_set+0x16>
    2d14:	00 c0       	rjmp	.+0      	; 0x2d16 <indicator_set+0x20>
    2d16:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(2)<40);
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2d1e:	88 32       	cpi	r24, 0x28	; 40
    2d20:	d8 f3       	brcs	.-10     	; 0x2d18 <indicator_set+0x22>
	stop();
    2d22:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[3]=scan();
    2d26:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <scan>
    2d2a:	90 93 60 02 	sts	0x0260, r25
    2d2e:	80 93 5f 02 	sts	0x025F, r24
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	
	//back to line
	soft_left();
    2d32:	0e 94 84 02 	call	0x508	; 0x508 <soft_left>
    2d36:	2f ef       	ldi	r18, 0xFF	; 255
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	9c e2       	ldi	r25, 0x2C	; 44
    2d3c:	21 50       	subi	r18, 0x01	; 1
    2d3e:	80 40       	sbci	r24, 0x00	; 0
    2d40:	90 40       	sbci	r25, 0x00	; 0
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <indicator_set+0x46>
    2d44:	00 c0       	rjmp	.+0      	; 0x2d46 <indicator_set+0x50>
    2d46:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2d4e:	88 32       	cpi	r24, 0x28	; 40
    2d50:	d8 f3       	brcs	.-10     	; 0x2d48 <indicator_set+0x52>
	stop();
    2d52:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	
	//scan 3
	soft_left_2();
    2d56:	0e 94 8a 02 	call	0x514	; 0x514 <soft_left_2>
    2d5a:	2f ef       	ldi	r18, 0xFF	; 255
    2d5c:	8f e7       	ldi	r24, 0x7F	; 127
    2d5e:	96 e1       	ldi	r25, 0x16	; 22
    2d60:	21 50       	subi	r18, 0x01	; 1
    2d62:	80 40       	sbci	r24, 0x00	; 0
    2d64:	90 40       	sbci	r25, 0x00	; 0
    2d66:	e1 f7       	brne	.-8      	; 0x2d60 <indicator_set+0x6a>
    2d68:	00 c0       	rjmp	.+0      	; 0x2d6a <indicator_set+0x74>
    2d6a:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2d72:	88 32       	cpi	r24, 0x28	; 40
    2d74:	d8 f3       	brcs	.-10     	; 0x2d6c <indicator_set+0x76>
	stop();
    2d76:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[2]=scan();
    2d7a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <scan>
    2d7e:	90 93 5e 02 	sts	0x025E, r25
    2d82:	80 93 5d 02 	sts	0x025D, r24
// 		_delay_ms(100);
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	//back to line
	soft_right();
    2d86:	0e 94 87 02 	call	0x50e	; 0x50e <soft_right>
    2d8a:	2f ef       	ldi	r18, 0xFF	; 255
    2d8c:	8f e7       	ldi	r24, 0x7F	; 127
    2d8e:	96 e1       	ldi	r25, 0x16	; 22
    2d90:	21 50       	subi	r18, 0x01	; 1
    2d92:	80 40       	sbci	r24, 0x00	; 0
    2d94:	90 40       	sbci	r25, 0x00	; 0
    2d96:	e1 f7       	brne	.-8      	; 0x2d90 <indicator_set+0x9a>
    2d98:	00 c0       	rjmp	.+0      	; 0x2d9a <indicator_set+0xa4>
    2d9a:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2da2:	88 32       	cpi	r24, 0x28	; 40
    2da4:	d8 f3       	brcs	.-10     	; 0x2d9c <indicator_set+0xa6>
	stop();
    2da6:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	
	//=====
	
	forwardJaa_Indi();
    2daa:	0e 94 c8 07 	call	0xf90	; 0xf90 <forwardJaa_Indi>
	
	//turn efficiency
	forward_mm(160);
    2dae:	80 ea       	ldi	r24, 0xA0	; 160
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	//scan 4
	soft_right_2();
    2db6:	0e 94 8d 02 	call	0x51a	; 0x51a <soft_right_2>
    2dba:	2f ef       	ldi	r18, 0xFF	; 255
    2dbc:	8f e7       	ldi	r24, 0x7F	; 127
    2dbe:	9f e1       	ldi	r25, 0x1F	; 31
    2dc0:	21 50       	subi	r18, 0x01	; 1
    2dc2:	80 40       	sbci	r24, 0x00	; 0
    2dc4:	90 40       	sbci	r25, 0x00	; 0
    2dc6:	e1 f7       	brne	.-8      	; 0x2dc0 <indicator_set+0xca>
    2dc8:	00 c0       	rjmp	.+0      	; 0x2dca <indicator_set+0xd4>
    2dca:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
    2dcc:	83 e0       	ldi	r24, 0x03	; 3
    2dce:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2dd2:	88 32       	cpi	r24, 0x28	; 40
    2dd4:	d8 f3       	brcs	.-10     	; 0x2dcc <indicator_set+0xd6>
	stop();
    2dd6:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[1]=scan();
    2dda:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <scan>
    2dde:	90 93 5c 02 	sts	0x025C, r25
    2de2:	80 93 5b 02 	sts	0x025B, r24
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	
	//back to line
	soft_left();
    2de6:	0e 94 84 02 	call	0x508	; 0x508 <soft_left>
    2dea:	2f ef       	ldi	r18, 0xFF	; 255
    2dec:	8f ef       	ldi	r24, 0xFF	; 255
    2dee:	9c e2       	ldi	r25, 0x2C	; 44
    2df0:	21 50       	subi	r18, 0x01	; 1
    2df2:	80 40       	sbci	r24, 0x00	; 0
    2df4:	90 40       	sbci	r25, 0x00	; 0
    2df6:	e1 f7       	brne	.-8      	; 0x2df0 <indicator_set+0xfa>
    2df8:	00 c0       	rjmp	.+0      	; 0x2dfa <indicator_set+0x104>
    2dfa:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2e02:	88 32       	cpi	r24, 0x28	; 40
    2e04:	d8 f3       	brcs	.-10     	; 0x2dfc <indicator_set+0x106>
	stop();
    2e06:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	
	//scan 3
	soft_left_2();
    2e0a:	0e 94 8a 02 	call	0x514	; 0x514 <soft_left_2>
    2e0e:	2f ef       	ldi	r18, 0xFF	; 255
    2e10:	8f e7       	ldi	r24, 0x7F	; 127
    2e12:	96 e1       	ldi	r25, 0x16	; 22
    2e14:	21 50       	subi	r18, 0x01	; 1
    2e16:	80 40       	sbci	r24, 0x00	; 0
    2e18:	90 40       	sbci	r25, 0x00	; 0
    2e1a:	e1 f7       	brne	.-8      	; 0x2e14 <indicator_set+0x11e>
    2e1c:	00 c0       	rjmp	.+0      	; 0x2e1e <indicator_set+0x128>
    2e1e:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2e26:	88 32       	cpi	r24, 0x28	; 40
    2e28:	d8 f3       	brcs	.-10     	; 0x2e20 <indicator_set+0x12a>
	stop();
    2e2a:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[0]=scan();
    2e2e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <scan>
    2e32:	90 93 5a 02 	sts	0x025A, r25
    2e36:	80 93 59 02 	sts	0x0259, r24
// 		_delay_ms(100);
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	//back to line
	soft_right();
    2e3a:	0e 94 87 02 	call	0x50e	; 0x50e <soft_right>
    2e3e:	2f ef       	ldi	r18, 0xFF	; 255
    2e40:	8f e7       	ldi	r24, 0x7F	; 127
    2e42:	96 e1       	ldi	r25, 0x16	; 22
    2e44:	21 50       	subi	r18, 0x01	; 1
    2e46:	80 40       	sbci	r24, 0x00	; 0
    2e48:	90 40       	sbci	r25, 0x00	; 0
    2e4a:	e1 f7       	brne	.-8      	; 0x2e44 <indicator_set+0x14e>
    2e4c:	00 c0       	rjmp	.+0      	; 0x2e4e <indicator_set+0x158>
    2e4e:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2e56:	88 32       	cpi	r24, 0x28	; 40
    2e58:	d8 f3       	brcs	.-10     	; 0x2e50 <indicator_set+0x15a>
	stop();
    2e5a:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	//lcd_print(1,1,color[0],1);
	//lcd_print(1,3,color[1],1);
	//lcd_print(1,5,color[2],1);
	//lcd_print(1,7,color[3],1);
	
	forwardJaa();
    2e5e:	0e 94 c9 08 	call	0x1192	; 0x1192 <forwardJaa>
	turnRight();
    2e62:	0e 94 03 06 	call	0xc06	; 0xc06 <turnRight>
	forward();
    2e66:	0e 94 78 02 	call	0x4f0	; 0x4f0 <forward>
    2e6a:	2f ef       	ldi	r18, 0xFF	; 255
    2e6c:	8f e7       	ldi	r24, 0x7F	; 127
    2e6e:	96 e1       	ldi	r25, 0x16	; 22
    2e70:	21 50       	subi	r18, 0x01	; 1
    2e72:	80 40       	sbci	r24, 0x00	; 0
    2e74:	90 40       	sbci	r25, 0x00	; 0
    2e76:	e1 f7       	brne	.-8      	; 0x2e70 <indicator_set+0x17a>
    2e78:	00 c0       	rjmp	.+0      	; 0x2e7a <indicator_set+0x184>
    2e7a:	00 00       	nop
	_delay_ms(500);
	forwardJaa();
    2e7c:	0e 94 c9 08 	call	0x1192	; 0x1192 <forwardJaa>
	turnRight();
    2e80:	0c 94 03 06 	jmp	0xc06	; 0xc06 <turnRight>
    2e84:	08 95       	ret

00002e86 <__init__>:
	//buzzer_on();	
}

void __init__()
{
	init_devices();
    2e86:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <init_devices>
	lcd_set_4bit();
    2e8a:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2e8e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2e92:	0e 94 57 03 	call	0x6ae	; 0x6ae <color_sensor_scaling>
	
	threshold=6000;
    2e96:	80 e7       	ldi	r24, 0x70	; 112
    2e98:	97 e1       	ldi	r25, 0x17	; 23
    2e9a:	90 93 29 02 	sts	0x0229, r25
    2e9e:	80 93 28 02 	sts	0x0228, r24
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
    2ea2:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
    2ea6:	8e e4       	ldi	r24, 0x4E	; 78
    2ea8:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    2eac:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    2eb0:	83 e5       	ldi	r24, 0x53	; 83
    2eb2:	80 93 8a 00 	sts	0x008A, r24
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    2eb6:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    2eba:	83 e2       	ldi	r24, 0x23	; 35
    2ebc:	80 93 8c 00 	sts	0x008C, r24
    2ec0:	2f ef       	ldi	r18, 0xFF	; 255
    2ec2:	8f ef       	ldi	r24, 0xFF	; 255
    2ec4:	98 e0       	ldi	r25, 0x08	; 8
    2ec6:	21 50       	subi	r18, 0x01	; 1
    2ec8:	80 40       	sbci	r24, 0x00	; 0
    2eca:	90 40       	sbci	r25, 0x00	; 0
    2ecc:	e1 f7       	brne	.-8      	; 0x2ec6 <__init__+0x40>
    2ece:	00 c0       	rjmp	.+0      	; 0x2ed0 <__init__+0x4a>
    2ed0:	00 00       	nop
	servo_2(90);
	servo_3(0);
	//servo_1(0);
//	servo_3(0);
	_delay_ms(200);
 	servo_3_free();_delay_ms(500);
    2ed2:	0e 94 ad 02 	call	0x55a	; 0x55a <servo_3_free>
    2ed6:	2f ef       	ldi	r18, 0xFF	; 255
    2ed8:	8f e7       	ldi	r24, 0x7F	; 127
    2eda:	96 e1       	ldi	r25, 0x16	; 22
    2edc:	21 50       	subi	r18, 0x01	; 1
    2ede:	80 40       	sbci	r24, 0x00	; 0
    2ee0:	90 40       	sbci	r25, 0x00	; 0
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <__init__+0x56>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <__init__+0x60>
    2ee6:	00 00       	nop
 	servo_2_free();_delay_ms(500);
    2ee8:	0e 94 a6 02 	call	0x54c	; 0x54c <servo_2_free>
    2eec:	2f ef       	ldi	r18, 0xFF	; 255
    2eee:	8f e7       	ldi	r24, 0x7F	; 127
    2ef0:	96 e1       	ldi	r25, 0x16	; 22
    2ef2:	21 50       	subi	r18, 0x01	; 1
    2ef4:	80 40       	sbci	r24, 0x00	; 0
    2ef6:	90 40       	sbci	r25, 0x00	; 0
    2ef8:	e1 f7       	brne	.-8      	; 0x2ef2 <__init__+0x6c>
    2efa:	00 c0       	rjmp	.+0      	; 0x2efc <__init__+0x76>
    2efc:	00 00       	nop
 	servo_1_free();_delay_ms(500);
    2efe:	0e 94 9f 02 	call	0x53e	; 0x53e <servo_1_free>
    2f02:	2f ef       	ldi	r18, 0xFF	; 255
    2f04:	8f e7       	ldi	r24, 0x7F	; 127
    2f06:	96 e1       	ldi	r25, 0x16	; 22
    2f08:	21 50       	subi	r18, 0x01	; 1
    2f0a:	80 40       	sbci	r24, 0x00	; 0
    2f0c:	90 40       	sbci	r25, 0x00	; 0
    2f0e:	e1 f7       	brne	.-8      	; 0x2f08 <__init__+0x82>
    2f10:	00 c0       	rjmp	.+0      	; 0x2f12 <__init__+0x8c>
    2f12:	00 00       	nop
	ct = 3;
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	90 93 44 02 	sts	0x0244, r25
    2f1c:	80 93 43 02 	sts	0x0243, r24
	adj = 1;
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	30 93 6a 02 	sts	0x026A, r19
    2f28:	20 93 69 02 	sts	0x0269, r18
	dir = 0;
    2f2c:	10 92 0d 02 	sts	0x020D, r1
    2f30:	10 92 0c 02 	sts	0x020C, r1
	ot = 3;
    2f34:	90 93 03 02 	sts	0x0203, r25
    2f38:	80 93 02 02 	sts	0x0202, r24
    2f3c:	08 95       	ret

00002f3e <main>:
	//buzzer();
}
int main(void)
{
	__init__();
    2f3e:	a3 df       	rcall	.-186    	; 0x2e86 <__init__>
	//buzzer();
 	forward();
    2f40:	0e 94 78 02 	call	0x4f0	; 0x4f0 <forward>
    2f44:	2f ef       	ldi	r18, 0xFF	; 255
    2f46:	8f e7       	ldi	r24, 0x7F	; 127
    2f48:	96 e1       	ldi	r25, 0x16	; 22
    2f4a:	21 50       	subi	r18, 0x01	; 1
    2f4c:	80 40       	sbci	r24, 0x00	; 0
    2f4e:	90 40       	sbci	r25, 0x00	; 0
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <main+0xc>
    2f52:	00 c0       	rjmp	.+0      	; 0x2f54 <main+0x16>
    2f54:	00 00       	nop
 	_delay_ms(500);
 	stop();
    2f56:	0e 94 90 02 	call	0x520	; 0x520 <stop>
// 	//buzzer();
 	indicator_set();
    2f5a:	cd de       	rcall	.-614    	; 0x2cf6 <indicator_set>
	setIndicatorAndColor();
    2f5c:	70 de       	rcall	.-800    	; 0x2c3e <setIndicatorAndColor>
// 	//	_delay_ms(500);
// 		pick(0);
// 	//	_delay_ms(500);
// 		drop(0);
// 	}
	forwardJaa();
    2f5e:	0e 94 c9 08 	call	0x1192	; 0x1192 <forwardJaa>
	while (sorted<total)
    2f62:	20 91 12 02 	lds	r18, 0x0212
    2f66:	30 91 13 02 	lds	r19, 0x0213
    2f6a:	80 91 04 02 	lds	r24, 0x0204
    2f6e:	90 91 05 02 	lds	r25, 0x0205
    2f72:	28 17       	cp	r18, r24
    2f74:	39 07       	cpc	r19, r25
    2f76:	ac f5       	brge	.+106    	; 0x2fe2 <main+0xa4>
	{
		canDrop();
    2f78:	7b d8       	rcall	.-3850   	; 0x2070 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2f7a:	80 91 0e 02 	lds	r24, 0x020E
    2f7e:	90 91 0f 02 	lds	r25, 0x020F
    2f82:	03 97       	sbiw	r24, 0x03	; 3
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <main+0x4a>
			predict();
    2f86:	ef dd       	rcall	.-1058   	; 0x2b66 <predict>
		if (sorted == total)
    2f88:	20 91 12 02 	lds	r18, 0x0212
    2f8c:	30 91 13 02 	lds	r19, 0x0213
    2f90:	80 91 04 02 	lds	r24, 0x0204
    2f94:	90 91 05 02 	lds	r25, 0x0205
    2f98:	28 17       	cp	r18, r24
    2f9a:	39 07       	cpc	r19, r25
    2f9c:	11 f1       	breq	.+68     	; 0x2fe2 <main+0xa4>
			break;
		pickup();
    2f9e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2fa2:	80 91 43 02 	lds	r24, 0x0243
    2fa6:	90 91 44 02 	lds	r25, 0x0244
    2faa:	9c 01       	movw	r18, r24
    2fac:	21 70       	andi	r18, 0x01	; 1
    2fae:	30 78       	andi	r19, 0x80	; 128
    2fb0:	33 23       	and	r19, r19
    2fb2:	34 f4       	brge	.+12     	; 0x2fc0 <main+0x82>
    2fb4:	21 50       	subi	r18, 0x01	; 1
    2fb6:	31 09       	sbc	r19, r1
    2fb8:	2e 6f       	ori	r18, 0xFE	; 254
    2fba:	3f 6f       	ori	r19, 0xFF	; 255
    2fbc:	2f 5f       	subi	r18, 0xFF	; 255
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	b9 01       	movw	r22, r18
    2fc2:	6c 5f       	subi	r22, 0xFC	; 252
    2fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc6:	0e 94 0a 09 	call	0x1214	; 0x1214 <traverseToSort>
		sortCheck();
    2fca:	9a db       	rcall	.-2252   	; 0x2700 <sortCheck>
// 		pick(0);
// 	//	_delay_ms(500);
// 		drop(0);
// 	}
	forwardJaa();
	while (sorted<total)
    2fcc:	20 91 12 02 	lds	r18, 0x0212
    2fd0:	30 91 13 02 	lds	r19, 0x0213
    2fd4:	80 91 04 02 	lds	r24, 0x0204
    2fd8:	90 91 05 02 	lds	r25, 0x0205
    2fdc:	28 17       	cp	r18, r24
    2fde:	39 07       	cpc	r19, r25
    2fe0:	5c f2       	brlt	.-106    	; 0x2f78 <main+0x3a>
			break;
		pickup();
		traverseToSort(ct, ct % 2 + 4);
		sortCheck();
	}
	buzzer_on();
    2fe2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <buzzer_on>
    2fe6:	ff cf       	rjmp	.-2      	; 0x2fe6 <main+0xa8>

00002fe8 <__divsf3>:
    2fe8:	0c d0       	rcall	.+24     	; 0x3002 <__divsf3x>
    2fea:	e6 c0       	rjmp	.+460    	; 0x31b8 <__fp_round>
    2fec:	de d0       	rcall	.+444    	; 0x31aa <__fp_pscB>
    2fee:	40 f0       	brcs	.+16     	; 0x3000 <__divsf3+0x18>
    2ff0:	d5 d0       	rcall	.+426    	; 0x319c <__fp_pscA>
    2ff2:	30 f0       	brcs	.+12     	; 0x3000 <__divsf3+0x18>
    2ff4:	21 f4       	brne	.+8      	; 0x2ffe <__divsf3+0x16>
    2ff6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ff8:	19 f0       	breq	.+6      	; 0x3000 <__divsf3+0x18>
    2ffa:	c7 c0       	rjmp	.+398    	; 0x318a <__fp_inf>
    2ffc:	51 11       	cpse	r21, r1
    2ffe:	10 c1       	rjmp	.+544    	; 0x3220 <__fp_szero>
    3000:	ca c0       	rjmp	.+404    	; 0x3196 <__fp_nan>

00003002 <__divsf3x>:
    3002:	eb d0       	rcall	.+470    	; 0x31da <__fp_split3>
    3004:	98 f3       	brcs	.-26     	; 0x2fec <__divsf3+0x4>

00003006 <__divsf3_pse>:
    3006:	99 23       	and	r25, r25
    3008:	c9 f3       	breq	.-14     	; 0x2ffc <__divsf3+0x14>
    300a:	55 23       	and	r21, r21
    300c:	b1 f3       	breq	.-20     	; 0x2ffa <__divsf3+0x12>
    300e:	95 1b       	sub	r25, r21
    3010:	55 0b       	sbc	r21, r21
    3012:	bb 27       	eor	r27, r27
    3014:	aa 27       	eor	r26, r26
    3016:	62 17       	cp	r22, r18
    3018:	73 07       	cpc	r23, r19
    301a:	84 07       	cpc	r24, r20
    301c:	38 f0       	brcs	.+14     	; 0x302c <__divsf3_pse+0x26>
    301e:	9f 5f       	subi	r25, 0xFF	; 255
    3020:	5f 4f       	sbci	r21, 0xFF	; 255
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	44 1f       	adc	r20, r20
    3028:	aa 1f       	adc	r26, r26
    302a:	a9 f3       	breq	.-22     	; 0x3016 <__divsf3_pse+0x10>
    302c:	33 d0       	rcall	.+102    	; 0x3094 <__divsf3_pse+0x8e>
    302e:	0e 2e       	mov	r0, r30
    3030:	3a f0       	brmi	.+14     	; 0x3040 <__divsf3_pse+0x3a>
    3032:	e0 e8       	ldi	r30, 0x80	; 128
    3034:	30 d0       	rcall	.+96     	; 0x3096 <__divsf3_pse+0x90>
    3036:	91 50       	subi	r25, 0x01	; 1
    3038:	50 40       	sbci	r21, 0x00	; 0
    303a:	e6 95       	lsr	r30
    303c:	00 1c       	adc	r0, r0
    303e:	ca f7       	brpl	.-14     	; 0x3032 <__divsf3_pse+0x2c>
    3040:	29 d0       	rcall	.+82     	; 0x3094 <__divsf3_pse+0x8e>
    3042:	fe 2f       	mov	r31, r30
    3044:	27 d0       	rcall	.+78     	; 0x3094 <__divsf3_pse+0x8e>
    3046:	66 0f       	add	r22, r22
    3048:	77 1f       	adc	r23, r23
    304a:	88 1f       	adc	r24, r24
    304c:	bb 1f       	adc	r27, r27
    304e:	26 17       	cp	r18, r22
    3050:	37 07       	cpc	r19, r23
    3052:	48 07       	cpc	r20, r24
    3054:	ab 07       	cpc	r26, r27
    3056:	b0 e8       	ldi	r27, 0x80	; 128
    3058:	09 f0       	breq	.+2      	; 0x305c <__divsf3_pse+0x56>
    305a:	bb 0b       	sbc	r27, r27
    305c:	80 2d       	mov	r24, r0
    305e:	bf 01       	movw	r22, r30
    3060:	ff 27       	eor	r31, r31
    3062:	93 58       	subi	r25, 0x83	; 131
    3064:	5f 4f       	sbci	r21, 0xFF	; 255
    3066:	2a f0       	brmi	.+10     	; 0x3072 <__divsf3_pse+0x6c>
    3068:	9e 3f       	cpi	r25, 0xFE	; 254
    306a:	51 05       	cpc	r21, r1
    306c:	68 f0       	brcs	.+26     	; 0x3088 <__divsf3_pse+0x82>
    306e:	8d c0       	rjmp	.+282    	; 0x318a <__fp_inf>
    3070:	d7 c0       	rjmp	.+430    	; 0x3220 <__fp_szero>
    3072:	5f 3f       	cpi	r21, 0xFF	; 255
    3074:	ec f3       	brlt	.-6      	; 0x3070 <__divsf3_pse+0x6a>
    3076:	98 3e       	cpi	r25, 0xE8	; 232
    3078:	dc f3       	brlt	.-10     	; 0x3070 <__divsf3_pse+0x6a>
    307a:	86 95       	lsr	r24
    307c:	77 95       	ror	r23
    307e:	67 95       	ror	r22
    3080:	b7 95       	ror	r27
    3082:	f7 95       	ror	r31
    3084:	9f 5f       	subi	r25, 0xFF	; 255
    3086:	c9 f7       	brne	.-14     	; 0x307a <__divsf3_pse+0x74>
    3088:	88 0f       	add	r24, r24
    308a:	91 1d       	adc	r25, r1
    308c:	96 95       	lsr	r25
    308e:	87 95       	ror	r24
    3090:	97 f9       	bld	r25, 7
    3092:	08 95       	ret
    3094:	e1 e0       	ldi	r30, 0x01	; 1
    3096:	66 0f       	add	r22, r22
    3098:	77 1f       	adc	r23, r23
    309a:	88 1f       	adc	r24, r24
    309c:	bb 1f       	adc	r27, r27
    309e:	62 17       	cp	r22, r18
    30a0:	73 07       	cpc	r23, r19
    30a2:	84 07       	cpc	r24, r20
    30a4:	ba 07       	cpc	r27, r26
    30a6:	20 f0       	brcs	.+8      	; 0x30b0 <__divsf3_pse+0xaa>
    30a8:	62 1b       	sub	r22, r18
    30aa:	73 0b       	sbc	r23, r19
    30ac:	84 0b       	sbc	r24, r20
    30ae:	ba 0b       	sbc	r27, r26
    30b0:	ee 1f       	adc	r30, r30
    30b2:	88 f7       	brcc	.-30     	; 0x3096 <__divsf3_pse+0x90>
    30b4:	e0 95       	com	r30
    30b6:	08 95       	ret

000030b8 <__fixunssfsi>:
    30b8:	98 d0       	rcall	.+304    	; 0x31ea <__fp_splitA>
    30ba:	88 f0       	brcs	.+34     	; 0x30de <__fixunssfsi+0x26>
    30bc:	9f 57       	subi	r25, 0x7F	; 127
    30be:	90 f0       	brcs	.+36     	; 0x30e4 <__fixunssfsi+0x2c>
    30c0:	b9 2f       	mov	r27, r25
    30c2:	99 27       	eor	r25, r25
    30c4:	b7 51       	subi	r27, 0x17	; 23
    30c6:	a0 f0       	brcs	.+40     	; 0x30f0 <__fixunssfsi+0x38>
    30c8:	d1 f0       	breq	.+52     	; 0x30fe <__fixunssfsi+0x46>
    30ca:	66 0f       	add	r22, r22
    30cc:	77 1f       	adc	r23, r23
    30ce:	88 1f       	adc	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	1a f0       	brmi	.+6      	; 0x30da <__fixunssfsi+0x22>
    30d4:	ba 95       	dec	r27
    30d6:	c9 f7       	brne	.-14     	; 0x30ca <__fixunssfsi+0x12>
    30d8:	12 c0       	rjmp	.+36     	; 0x30fe <__fixunssfsi+0x46>
    30da:	b1 30       	cpi	r27, 0x01	; 1
    30dc:	81 f0       	breq	.+32     	; 0x30fe <__fixunssfsi+0x46>
    30de:	9f d0       	rcall	.+318    	; 0x321e <__fp_zero>
    30e0:	b1 e0       	ldi	r27, 0x01	; 1
    30e2:	08 95       	ret
    30e4:	9c c0       	rjmp	.+312    	; 0x321e <__fp_zero>
    30e6:	67 2f       	mov	r22, r23
    30e8:	78 2f       	mov	r23, r24
    30ea:	88 27       	eor	r24, r24
    30ec:	b8 5f       	subi	r27, 0xF8	; 248
    30ee:	39 f0       	breq	.+14     	; 0x30fe <__fixunssfsi+0x46>
    30f0:	b9 3f       	cpi	r27, 0xF9	; 249
    30f2:	cc f3       	brlt	.-14     	; 0x30e6 <__fixunssfsi+0x2e>
    30f4:	86 95       	lsr	r24
    30f6:	77 95       	ror	r23
    30f8:	67 95       	ror	r22
    30fa:	b3 95       	inc	r27
    30fc:	d9 f7       	brne	.-10     	; 0x30f4 <__fixunssfsi+0x3c>
    30fe:	3e f4       	brtc	.+14     	; 0x310e <__fixunssfsi+0x56>
    3100:	90 95       	com	r25
    3102:	80 95       	com	r24
    3104:	70 95       	com	r23
    3106:	61 95       	neg	r22
    3108:	7f 4f       	sbci	r23, 0xFF	; 255
    310a:	8f 4f       	sbci	r24, 0xFF	; 255
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	08 95       	ret

00003110 <__floatunsisf>:
    3110:	e8 94       	clt
    3112:	09 c0       	rjmp	.+18     	; 0x3126 <__floatsisf+0x12>

00003114 <__floatsisf>:
    3114:	97 fb       	bst	r25, 7
    3116:	3e f4       	brtc	.+14     	; 0x3126 <__floatsisf+0x12>
    3118:	90 95       	com	r25
    311a:	80 95       	com	r24
    311c:	70 95       	com	r23
    311e:	61 95       	neg	r22
    3120:	7f 4f       	sbci	r23, 0xFF	; 255
    3122:	8f 4f       	sbci	r24, 0xFF	; 255
    3124:	9f 4f       	sbci	r25, 0xFF	; 255
    3126:	99 23       	and	r25, r25
    3128:	a9 f0       	breq	.+42     	; 0x3154 <__floatsisf+0x40>
    312a:	f9 2f       	mov	r31, r25
    312c:	96 e9       	ldi	r25, 0x96	; 150
    312e:	bb 27       	eor	r27, r27
    3130:	93 95       	inc	r25
    3132:	f6 95       	lsr	r31
    3134:	87 95       	ror	r24
    3136:	77 95       	ror	r23
    3138:	67 95       	ror	r22
    313a:	b7 95       	ror	r27
    313c:	f1 11       	cpse	r31, r1
    313e:	f8 cf       	rjmp	.-16     	; 0x3130 <__floatsisf+0x1c>
    3140:	fa f4       	brpl	.+62     	; 0x3180 <__floatsisf+0x6c>
    3142:	bb 0f       	add	r27, r27
    3144:	11 f4       	brne	.+4      	; 0x314a <__floatsisf+0x36>
    3146:	60 ff       	sbrs	r22, 0
    3148:	1b c0       	rjmp	.+54     	; 0x3180 <__floatsisf+0x6c>
    314a:	6f 5f       	subi	r22, 0xFF	; 255
    314c:	7f 4f       	sbci	r23, 0xFF	; 255
    314e:	8f 4f       	sbci	r24, 0xFF	; 255
    3150:	9f 4f       	sbci	r25, 0xFF	; 255
    3152:	16 c0       	rjmp	.+44     	; 0x3180 <__floatsisf+0x6c>
    3154:	88 23       	and	r24, r24
    3156:	11 f0       	breq	.+4      	; 0x315c <__floatsisf+0x48>
    3158:	96 e9       	ldi	r25, 0x96	; 150
    315a:	11 c0       	rjmp	.+34     	; 0x317e <__floatsisf+0x6a>
    315c:	77 23       	and	r23, r23
    315e:	21 f0       	breq	.+8      	; 0x3168 <__floatsisf+0x54>
    3160:	9e e8       	ldi	r25, 0x8E	; 142
    3162:	87 2f       	mov	r24, r23
    3164:	76 2f       	mov	r23, r22
    3166:	05 c0       	rjmp	.+10     	; 0x3172 <__floatsisf+0x5e>
    3168:	66 23       	and	r22, r22
    316a:	71 f0       	breq	.+28     	; 0x3188 <__floatsisf+0x74>
    316c:	96 e8       	ldi	r25, 0x86	; 134
    316e:	86 2f       	mov	r24, r22
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	2a f0       	brmi	.+10     	; 0x3180 <__floatsisf+0x6c>
    3176:	9a 95       	dec	r25
    3178:	66 0f       	add	r22, r22
    317a:	77 1f       	adc	r23, r23
    317c:	88 1f       	adc	r24, r24
    317e:	da f7       	brpl	.-10     	; 0x3176 <__floatsisf+0x62>
    3180:	88 0f       	add	r24, r24
    3182:	96 95       	lsr	r25
    3184:	87 95       	ror	r24
    3186:	97 f9       	bld	r25, 7
    3188:	08 95       	ret

0000318a <__fp_inf>:
    318a:	97 f9       	bld	r25, 7
    318c:	9f 67       	ori	r25, 0x7F	; 127
    318e:	80 e8       	ldi	r24, 0x80	; 128
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	08 95       	ret

00003196 <__fp_nan>:
    3196:	9f ef       	ldi	r25, 0xFF	; 255
    3198:	80 ec       	ldi	r24, 0xC0	; 192
    319a:	08 95       	ret

0000319c <__fp_pscA>:
    319c:	00 24       	eor	r0, r0
    319e:	0a 94       	dec	r0
    31a0:	16 16       	cp	r1, r22
    31a2:	17 06       	cpc	r1, r23
    31a4:	18 06       	cpc	r1, r24
    31a6:	09 06       	cpc	r0, r25
    31a8:	08 95       	ret

000031aa <__fp_pscB>:
    31aa:	00 24       	eor	r0, r0
    31ac:	0a 94       	dec	r0
    31ae:	12 16       	cp	r1, r18
    31b0:	13 06       	cpc	r1, r19
    31b2:	14 06       	cpc	r1, r20
    31b4:	05 06       	cpc	r0, r21
    31b6:	08 95       	ret

000031b8 <__fp_round>:
    31b8:	09 2e       	mov	r0, r25
    31ba:	03 94       	inc	r0
    31bc:	00 0c       	add	r0, r0
    31be:	11 f4       	brne	.+4      	; 0x31c4 <__fp_round+0xc>
    31c0:	88 23       	and	r24, r24
    31c2:	52 f0       	brmi	.+20     	; 0x31d8 <__fp_round+0x20>
    31c4:	bb 0f       	add	r27, r27
    31c6:	40 f4       	brcc	.+16     	; 0x31d8 <__fp_round+0x20>
    31c8:	bf 2b       	or	r27, r31
    31ca:	11 f4       	brne	.+4      	; 0x31d0 <__fp_round+0x18>
    31cc:	60 ff       	sbrs	r22, 0
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <__fp_round+0x20>
    31d0:	6f 5f       	subi	r22, 0xFF	; 255
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	8f 4f       	sbci	r24, 0xFF	; 255
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	08 95       	ret

000031da <__fp_split3>:
    31da:	57 fd       	sbrc	r21, 7
    31dc:	90 58       	subi	r25, 0x80	; 128
    31de:	44 0f       	add	r20, r20
    31e0:	55 1f       	adc	r21, r21
    31e2:	59 f0       	breq	.+22     	; 0x31fa <__fp_splitA+0x10>
    31e4:	5f 3f       	cpi	r21, 0xFF	; 255
    31e6:	71 f0       	breq	.+28     	; 0x3204 <__fp_splitA+0x1a>
    31e8:	47 95       	ror	r20

000031ea <__fp_splitA>:
    31ea:	88 0f       	add	r24, r24
    31ec:	97 fb       	bst	r25, 7
    31ee:	99 1f       	adc	r25, r25
    31f0:	61 f0       	breq	.+24     	; 0x320a <__fp_splitA+0x20>
    31f2:	9f 3f       	cpi	r25, 0xFF	; 255
    31f4:	79 f0       	breq	.+30     	; 0x3214 <__fp_splitA+0x2a>
    31f6:	87 95       	ror	r24
    31f8:	08 95       	ret
    31fa:	12 16       	cp	r1, r18
    31fc:	13 06       	cpc	r1, r19
    31fe:	14 06       	cpc	r1, r20
    3200:	55 1f       	adc	r21, r21
    3202:	f2 cf       	rjmp	.-28     	; 0x31e8 <__fp_split3+0xe>
    3204:	46 95       	lsr	r20
    3206:	f1 df       	rcall	.-30     	; 0x31ea <__fp_splitA>
    3208:	08 c0       	rjmp	.+16     	; 0x321a <__fp_splitA+0x30>
    320a:	16 16       	cp	r1, r22
    320c:	17 06       	cpc	r1, r23
    320e:	18 06       	cpc	r1, r24
    3210:	99 1f       	adc	r25, r25
    3212:	f1 cf       	rjmp	.-30     	; 0x31f6 <__fp_splitA+0xc>
    3214:	86 95       	lsr	r24
    3216:	71 05       	cpc	r23, r1
    3218:	61 05       	cpc	r22, r1
    321a:	08 94       	sec
    321c:	08 95       	ret

0000321e <__fp_zero>:
    321e:	e8 94       	clt

00003220 <__fp_szero>:
    3220:	bb 27       	eor	r27, r27
    3222:	66 27       	eor	r22, r22
    3224:	77 27       	eor	r23, r23
    3226:	cb 01       	movw	r24, r22
    3228:	97 f9       	bld	r25, 7
    322a:	08 95       	ret

0000322c <__divmodhi4>:
    322c:	97 fb       	bst	r25, 7
    322e:	07 2e       	mov	r0, r23
    3230:	16 f4       	brtc	.+4      	; 0x3236 <__divmodhi4+0xa>
    3232:	00 94       	com	r0
    3234:	06 d0       	rcall	.+12     	; 0x3242 <__divmodhi4_neg1>
    3236:	77 fd       	sbrc	r23, 7
    3238:	08 d0       	rcall	.+16     	; 0x324a <__divmodhi4_neg2>
    323a:	1a d0       	rcall	.+52     	; 0x3270 <__udivmodhi4>
    323c:	07 fc       	sbrc	r0, 7
    323e:	05 d0       	rcall	.+10     	; 0x324a <__divmodhi4_neg2>
    3240:	3e f4       	brtc	.+14     	; 0x3250 <__divmodhi4_exit>

00003242 <__divmodhi4_neg1>:
    3242:	90 95       	com	r25
    3244:	81 95       	neg	r24
    3246:	9f 4f       	sbci	r25, 0xFF	; 255
    3248:	08 95       	ret

0000324a <__divmodhi4_neg2>:
    324a:	70 95       	com	r23
    324c:	61 95       	neg	r22
    324e:	7f 4f       	sbci	r23, 0xFF	; 255

00003250 <__divmodhi4_exit>:
    3250:	08 95       	ret

00003252 <__umulhisi3>:
    3252:	a2 9f       	mul	r26, r18
    3254:	b0 01       	movw	r22, r0
    3256:	b3 9f       	mul	r27, r19
    3258:	c0 01       	movw	r24, r0
    325a:	a3 9f       	mul	r26, r19
    325c:	70 0d       	add	r23, r0
    325e:	81 1d       	adc	r24, r1
    3260:	11 24       	eor	r1, r1
    3262:	91 1d       	adc	r25, r1
    3264:	b2 9f       	mul	r27, r18
    3266:	70 0d       	add	r23, r0
    3268:	81 1d       	adc	r24, r1
    326a:	11 24       	eor	r1, r1
    326c:	91 1d       	adc	r25, r1
    326e:	08 95       	ret

00003270 <__udivmodhi4>:
    3270:	aa 1b       	sub	r26, r26
    3272:	bb 1b       	sub	r27, r27
    3274:	51 e1       	ldi	r21, 0x11	; 17
    3276:	07 c0       	rjmp	.+14     	; 0x3286 <__udivmodhi4_ep>

00003278 <__udivmodhi4_loop>:
    3278:	aa 1f       	adc	r26, r26
    327a:	bb 1f       	adc	r27, r27
    327c:	a6 17       	cp	r26, r22
    327e:	b7 07       	cpc	r27, r23
    3280:	10 f0       	brcs	.+4      	; 0x3286 <__udivmodhi4_ep>
    3282:	a6 1b       	sub	r26, r22
    3284:	b7 0b       	sbc	r27, r23

00003286 <__udivmodhi4_ep>:
    3286:	88 1f       	adc	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	5a 95       	dec	r21
    328c:	a9 f7       	brne	.-22     	; 0x3278 <__udivmodhi4_loop>
    328e:	80 95       	com	r24
    3290:	90 95       	com	r25
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	08 95       	ret

00003298 <_exit>:
    3298:	f8 94       	cli

0000329a <__stop_program>:
    329a:	ff cf       	rjmp	.-2      	; 0x329a <__stop_program>
