
CargoSorting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00002eb6  00002f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800206  00800206  00002f50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031dc  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000439  00000000  00000000  0000648c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002570  00000000  00000000  000068c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008ec  00000000  00000000  00008e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007dd  00000000  00000000  00009724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f44  00000000  00000000  00009f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000350  00000000  00000000  0000be45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	59 c1       	rjmp	.+690    	; 0x2b8 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__vector_5>
      16:	00 00       	nop
      18:	13 c2       	rjmp	.+1062   	; 0x440 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 eb       	ldi	r30, 0xB6	; 182
      fc:	fe e2       	ldi	r31, 0x2E	; 46
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 30       	cpi	r26, 0x06	; 6
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a6 e0       	ldi	r26, 0x06	; 6
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 36       	cpi	r26, 0x6A	; 106
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <main>
     122:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <timer5_init>:
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	e1 e2       	ldi	r30, 0x21	; 33
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	10 82       	st	Z, r1
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	80 93 25 01 	sts	0x0125, r24
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	90 93 24 01 	sts	0x0124, r25
     13a:	10 92 29 01 	sts	0x0129, r1
     13e:	80 93 28 01 	sts	0x0128, r24
     142:	10 92 2b 01 	sts	0x012B, r1
     146:	80 93 2a 01 	sts	0x012A, r24
     14a:	10 92 2d 01 	sts	0x012D, r1
     14e:	80 93 2c 01 	sts	0x012C, r24
     152:	89 ea       	ldi	r24, 0xA9	; 169
     154:	80 93 20 01 	sts	0x0120, r24
     158:	8b e0       	ldi	r24, 0x0B	; 11
     15a:	80 83       	st	Z, r24
     15c:	08 95       	ret

0000015e <motion_pin_config>:
     15e:	81 b1       	in	r24, 0x01	; 1
     160:	8f 60       	ori	r24, 0x0F	; 15
     162:	81 b9       	out	0x01, r24	; 1
     164:	82 b1       	in	r24, 0x02	; 2
     166:	80 7f       	andi	r24, 0xF0	; 240
     168:	82 b9       	out	0x02, r24	; 2
     16a:	ea e0       	ldi	r30, 0x0A	; 10
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	80 81       	ld	r24, Z
     170:	88 61       	ori	r24, 0x18	; 24
     172:	80 83       	st	Z, r24
     174:	eb e0       	ldi	r30, 0x0B	; 11
     176:	f1 e0       	ldi	r31, 0x01	; 1
     178:	80 81       	ld	r24, Z
     17a:	88 61       	ori	r24, 0x18	; 24
     17c:	80 83       	st	Z, r24
     17e:	08 95       	ret

00000180 <motion_set>:
     180:	92 b1       	in	r25, 0x02	; 2
     182:	90 7f       	andi	r25, 0xF0	; 240
     184:	8f 70       	andi	r24, 0x0F	; 15
     186:	98 2b       	or	r25, r24
     188:	92 b9       	out	0x02, r25	; 2
     18a:	08 95       	ret

0000018c <forward>:
     18c:	86 e0       	ldi	r24, 0x06	; 6
     18e:	f8 cf       	rjmp	.-16     	; 0x180 <motion_set>
     190:	08 95       	ret

00000192 <back>:
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	f5 cf       	rjmp	.-22     	; 0x180 <motion_set>
     196:	08 95       	ret

00000198 <left>:
     198:	85 e0       	ldi	r24, 0x05	; 5
     19a:	f2 cf       	rjmp	.-28     	; 0x180 <motion_set>
     19c:	08 95       	ret

0000019e <right>:
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	ef cf       	rjmp	.-34     	; 0x180 <motion_set>
     1a2:	08 95       	ret

000001a4 <soft_left>:
     1a4:	84 e0       	ldi	r24, 0x04	; 4
     1a6:	ec cf       	rjmp	.-40     	; 0x180 <motion_set>
     1a8:	08 95       	ret

000001aa <soft_right>:
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	e9 cf       	rjmp	.-46     	; 0x180 <motion_set>
     1ae:	08 95       	ret

000001b0 <soft_left_2>:
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	e6 cf       	rjmp	.-52     	; 0x180 <motion_set>
     1b4:	08 95       	ret

000001b6 <soft_right_2>:
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	e3 cf       	rjmp	.-58     	; 0x180 <motion_set>
     1ba:	08 95       	ret

000001bc <stop>:
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	e0 cf       	rjmp	.-64     	; 0x180 <motion_set>
     1c0:	08 95       	ret

000001c2 <servo_1_free>:
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	80 93 89 00 	sts	0x0089, r24
     1c8:	8f ef       	ldi	r24, 0xFF	; 255
     1ca:	80 93 88 00 	sts	0x0088, r24
     1ce:	08 95       	ret

000001d0 <servo_2_free>:
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	80 93 8b 00 	sts	0x008B, r24
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 93 8a 00 	sts	0x008A, r24
     1dc:	08 95       	ret

000001de <servo_3_free>:
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	80 93 8d 00 	sts	0x008D, r24
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	80 93 8c 00 	sts	0x008C, r24
     1ea:	08 95       	ret

000001ec <servo1_pin_config>:
     1ec:	25 9a       	sbi	0x04, 5	; 4
     1ee:	2d 9a       	sbi	0x05, 5	; 5
     1f0:	08 95       	ret

000001f2 <servo2_pin_config>:
     1f2:	26 9a       	sbi	0x04, 6	; 4
     1f4:	2e 9a       	sbi	0x05, 6	; 5
     1f6:	08 95       	ret

000001f8 <servo3_pin_config>:
     1f8:	27 9a       	sbi	0x04, 7	; 4
     1fa:	2f 9a       	sbi	0x05, 7	; 5
     1fc:	08 95       	ret

000001fe <timer1_init>:
     1fe:	e1 e8       	ldi	r30, 0x81	; 129
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	10 82       	st	Z, r1
     204:	8c ef       	ldi	r24, 0xFC	; 252
     206:	80 93 85 00 	sts	0x0085, r24
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 84 00 	sts	0x0084, r24
     210:	93 e0       	ldi	r25, 0x03	; 3
     212:	90 93 89 00 	sts	0x0089, r25
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	80 93 88 00 	sts	0x0088, r24
     21c:	90 93 8b 00 	sts	0x008B, r25
     220:	80 93 8a 00 	sts	0x008A, r24
     224:	90 93 8d 00 	sts	0x008D, r25
     228:	80 93 8c 00 	sts	0x008C, r24
     22c:	90 93 87 00 	sts	0x0087, r25
     230:	80 93 86 00 	sts	0x0086, r24
     234:	8b ea       	ldi	r24, 0xAB	; 171
     236:	80 93 80 00 	sts	0x0080, r24
     23a:	10 92 82 00 	sts	0x0082, r1
     23e:	8c e0       	ldi	r24, 0x0C	; 12
     240:	80 83       	st	Z, r24
     242:	08 95       	ret

00000244 <adc_pin_config>:
     244:	10 ba       	out	0x10, r1	; 16
     246:	11 ba       	out	0x11, r1	; 17
     248:	10 92 07 01 	sts	0x0107, r1
     24c:	10 92 08 01 	sts	0x0108, r1
     250:	08 95       	ret

00000252 <buzzer_on>:
     252:	86 b1       	in	r24, 0x06	; 6
     254:	88 60       	ori	r24, 0x08	; 8
     256:	88 b9       	out	0x08, r24	; 8
     258:	08 95       	ret

0000025a <buzzer_off>:
     25a:	86 b1       	in	r24, 0x06	; 6
     25c:	87 7f       	andi	r24, 0xF7	; 247
     25e:	88 b9       	out	0x08, r24	; 8
     260:	08 95       	ret

00000262 <buzzer_init>:
     262:	3b 9a       	sbi	0x07, 3	; 7
     264:	43 98       	cbi	0x08, 3	; 8
     266:	08 95       	ret

00000268 <ADC_Conversion>:
     268:	88 30       	cpi	r24, 0x08	; 8
     26a:	18 f0       	brcs	.+6      	; 0x272 <ADC_Conversion+0xa>
     26c:	98 e0       	ldi	r25, 0x08	; 8
     26e:	90 93 7b 00 	sts	0x007B, r25
     272:	87 70       	andi	r24, 0x07	; 7
     274:	80 62       	ori	r24, 0x20	; 32
     276:	80 93 7c 00 	sts	0x007C, r24
     27a:	ea e7       	ldi	r30, 0x7A	; 122
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	80 64       	ori	r24, 0x40	; 64
     282:	80 83       	st	Z, r24
     284:	80 81       	ld	r24, Z
     286:	84 ff       	sbrs	r24, 4
     288:	fd cf       	rjmp	.-6      	; 0x284 <ADC_Conversion+0x1c>
     28a:	80 91 79 00 	lds	r24, 0x0079
     28e:	ea e7       	ldi	r30, 0x7A	; 122
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	90 81       	ld	r25, Z
     294:	90 61       	ori	r25, 0x10	; 16
     296:	90 83       	st	Z, r25
     298:	10 92 7b 00 	sts	0x007B, r1
     29c:	08 95       	ret

0000029e <adc_init>:
     29e:	ea e7       	ldi	r30, 0x7A	; 122
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	10 82       	st	Z, r1
     2a4:	10 92 7b 00 	sts	0x007B, r1
     2a8:	80 e2       	ldi	r24, 0x20	; 32
     2aa:	80 93 7c 00 	sts	0x007C, r24
     2ae:	80 e8       	ldi	r24, 0x80	; 128
     2b0:	80 bf       	out	0x30, r24	; 48
     2b2:	86 e8       	ldi	r24, 0x86	; 134
     2b4:	80 83       	st	Z, r24
     2b6:	08 95       	ret

000002b8 <__vector_1>:
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	80 91 13 02 	lds	r24, 0x0213
     2ce:	90 91 14 02 	lds	r25, 0x0214
     2d2:	a0 91 15 02 	lds	r26, 0x0215
     2d6:	b0 91 16 02 	lds	r27, 0x0216
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
     2e0:	80 93 13 02 	sts	0x0213, r24
     2e4:	90 93 14 02 	sts	0x0214, r25
     2e8:	a0 93 15 02 	sts	0x0215, r26
     2ec:	b0 93 16 02 	sts	0x0216, r27
     2f0:	bf 91       	pop	r27
     2f2:	af 91       	pop	r26
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <color_sensor_pin_config>:
     302:	8a b1       	in	r24, 0x0a	; 10
     304:	8e 6f       	ori	r24, 0xFE	; 254
     306:	8a b9       	out	0x0a, r24	; 10
     308:	58 9a       	sbi	0x0b, 0	; 11
     30a:	08 95       	ret

0000030c <color_sensor_pin_interrupt_init>:
     30c:	f8 94       	cli
     30e:	e9 e6       	ldi	r30, 0x69	; 105
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	82 60       	ori	r24, 0x02	; 2
     316:	80 83       	st	Z, r24
     318:	e8 9a       	sbi	0x1d, 0	; 29
     31a:	78 94       	sei
     31c:	08 95       	ret

0000031e <filter_red>:
     31e:	5e 98       	cbi	0x0b, 6	; 11
     320:	5f 98       	cbi	0x0b, 7	; 11
     322:	08 95       	ret

00000324 <filter_green>:
     324:	5e 9a       	sbi	0x0b, 6	; 11
     326:	5f 9a       	sbi	0x0b, 7	; 11
     328:	08 95       	ret

0000032a <filter_blue>:
     32a:	5e 98       	cbi	0x0b, 6	; 11
     32c:	5f 9a       	sbi	0x0b, 7	; 11
     32e:	08 95       	ret

00000330 <color_sensor_scaling>:
     330:	5c 9a       	sbi	0x0b, 4	; 11
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	08 95       	ret

00000336 <red_read>:
     336:	f3 df       	rcall	.-26     	; 0x31e <filter_red>
     338:	10 92 13 02 	sts	0x0213, r1
     33c:	10 92 14 02 	sts	0x0214, r1
     340:	10 92 15 02 	sts	0x0215, r1
     344:	10 92 16 02 	sts	0x0216, r1
     348:	2f ef       	ldi	r18, 0xFF	; 255
     34a:	8f e7       	ldi	r24, 0x7F	; 127
     34c:	94 e0       	ldi	r25, 0x04	; 4
     34e:	21 50       	subi	r18, 0x01	; 1
     350:	80 40       	sbci	r24, 0x00	; 0
     352:	90 40       	sbci	r25, 0x00	; 0
     354:	e1 f7       	brne	.-8      	; 0x34e <red_read+0x18>
     356:	00 c0       	rjmp	.+0      	; 0x358 <red_read+0x22>
     358:	00 00       	nop
     35a:	80 91 13 02 	lds	r24, 0x0213
     35e:	90 91 14 02 	lds	r25, 0x0214
     362:	a0 91 15 02 	lds	r26, 0x0215
     366:	b0 91 16 02 	lds	r27, 0x0216
     36a:	80 93 35 02 	sts	0x0235, r24
     36e:	90 93 36 02 	sts	0x0236, r25
     372:	a0 93 37 02 	sts	0x0237, r26
     376:	b0 93 38 02 	sts	0x0238, r27
     37a:	08 95       	ret

0000037c <green_read>:
     37c:	d3 df       	rcall	.-90     	; 0x324 <filter_green>
     37e:	10 92 13 02 	sts	0x0213, r1
     382:	10 92 14 02 	sts	0x0214, r1
     386:	10 92 15 02 	sts	0x0215, r1
     38a:	10 92 16 02 	sts	0x0216, r1
     38e:	2f ef       	ldi	r18, 0xFF	; 255
     390:	8f e7       	ldi	r24, 0x7F	; 127
     392:	94 e0       	ldi	r25, 0x04	; 4
     394:	21 50       	subi	r18, 0x01	; 1
     396:	80 40       	sbci	r24, 0x00	; 0
     398:	90 40       	sbci	r25, 0x00	; 0
     39a:	e1 f7       	brne	.-8      	; 0x394 <green_read+0x18>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <green_read+0x22>
     39e:	00 00       	nop
     3a0:	80 91 13 02 	lds	r24, 0x0213
     3a4:	90 91 14 02 	lds	r25, 0x0214
     3a8:	a0 91 15 02 	lds	r26, 0x0215
     3ac:	b0 91 16 02 	lds	r27, 0x0216
     3b0:	80 93 31 02 	sts	0x0231, r24
     3b4:	90 93 32 02 	sts	0x0232, r25
     3b8:	a0 93 33 02 	sts	0x0233, r26
     3bc:	b0 93 34 02 	sts	0x0234, r27
     3c0:	08 95       	ret

000003c2 <blue_read>:
     3c2:	b3 df       	rcall	.-154    	; 0x32a <filter_blue>
     3c4:	10 92 13 02 	sts	0x0213, r1
     3c8:	10 92 14 02 	sts	0x0214, r1
     3cc:	10 92 15 02 	sts	0x0215, r1
     3d0:	10 92 16 02 	sts	0x0216, r1
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	8f e7       	ldi	r24, 0x7F	; 127
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	90 40       	sbci	r25, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <blue_read+0x18>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <blue_read+0x22>
     3e4:	00 00       	nop
     3e6:	80 91 13 02 	lds	r24, 0x0213
     3ea:	90 91 14 02 	lds	r25, 0x0214
     3ee:	a0 91 15 02 	lds	r26, 0x0215
     3f2:	b0 91 16 02 	lds	r27, 0x0216
     3f6:	80 93 29 02 	sts	0x0229, r24
     3fa:	90 93 2a 02 	sts	0x022A, r25
     3fe:	a0 93 2b 02 	sts	0x022B, r26
     402:	b0 93 2c 02 	sts	0x022C, r27
     406:	08 95       	ret

00000408 <left_encoder_pin_config>:
     408:	6c 98       	cbi	0x0d, 4	; 13
     40a:	74 9a       	sbi	0x0e, 4	; 14
     40c:	08 95       	ret

0000040e <right_encoder_pin_config>:
     40e:	6d 98       	cbi	0x0d, 5	; 13
     410:	75 9a       	sbi	0x0e, 5	; 14
     412:	08 95       	ret

00000414 <port_init_poz>:
     414:	a4 de       	rcall	.-696    	; 0x15e <motion_pin_config>
     416:	f8 df       	rcall	.-16     	; 0x408 <left_encoder_pin_config>
     418:	fa cf       	rjmp	.-12     	; 0x40e <right_encoder_pin_config>
     41a:	08 95       	ret

0000041c <left_position_encoder_interrupt_init>:
     41c:	f8 94       	cli
     41e:	ea e6       	ldi	r30, 0x6A	; 106
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	82 60       	ori	r24, 0x02	; 2
     426:	80 83       	st	Z, r24
     428:	ec 9a       	sbi	0x1d, 4	; 29
     42a:	78 94       	sei
     42c:	08 95       	ret

0000042e <right_position_encoder_interrupt_init>:
     42e:	f8 94       	cli
     430:	ea e6       	ldi	r30, 0x6A	; 106
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	88 60       	ori	r24, 0x08	; 8
     438:	80 83       	st	Z, r24
     43a:	ed 9a       	sbi	0x1d, 5	; 29
     43c:	78 94       	sei
     43e:	08 95       	ret

00000440 <__vector_6>:
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	80 91 17 02 	lds	r24, 0x0217
     456:	90 91 18 02 	lds	r25, 0x0218
     45a:	a0 91 19 02 	lds	r26, 0x0219
     45e:	b0 91 1a 02 	lds	r27, 0x021A
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	a1 1d       	adc	r26, r1
     466:	b1 1d       	adc	r27, r1
     468:	80 93 17 02 	sts	0x0217, r24
     46c:	90 93 18 02 	sts	0x0218, r25
     470:	a0 93 19 02 	sts	0x0219, r26
     474:	b0 93 1a 02 	sts	0x021A, r27
     478:	bf 91       	pop	r27
     47a:	af 91       	pop	r26
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <__vector_5>:
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	80 91 1b 02 	lds	r24, 0x021B
     4a0:	90 91 1c 02 	lds	r25, 0x021C
     4a4:	a0 91 1d 02 	lds	r26, 0x021D
     4a8:	b0 91 1e 02 	lds	r27, 0x021E
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 1b 02 	sts	0x021B, r24
     4b6:	90 93 1c 02 	sts	0x021C, r25
     4ba:	a0 93 1d 02 	sts	0x021D, r26
     4be:	b0 93 1e 02 	sts	0x021E, r27
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <angle_rotate>:
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	bc 01       	movw	r22, r24
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__floatunsisf>
     4ea:	28 e4       	ldi	r18, 0x48	; 72
     4ec:	31 ee       	ldi	r19, 0xE1	; 225
     4ee:	42 e8       	ldi	r20, 0x82	; 130
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__divsf3>
     4f6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
     4fa:	cb 01       	movw	r24, r22
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	10 92 17 02 	sts	0x0217, r1
     504:	10 92 18 02 	sts	0x0218, r1
     508:	10 92 19 02 	sts	0x0219, r1
     50c:	10 92 1a 02 	sts	0x021A, r1
     510:	10 92 1b 02 	sts	0x021B, r1
     514:	10 92 1c 02 	sts	0x021C, r1
     518:	10 92 1d 02 	sts	0x021D, r1
     51c:	10 92 1e 02 	sts	0x021E, r1
     520:	51 e0       	ldi	r21, 0x01	; 1
     522:	e0 e0       	ldi	r30, 0x00	; 0
     524:	c0 90 17 02 	lds	r12, 0x0217
     528:	d0 90 18 02 	lds	r13, 0x0218
     52c:	e0 90 19 02 	lds	r14, 0x0219
     530:	f0 90 1a 02 	lds	r15, 0x021A
     534:	00 91 1b 02 	lds	r16, 0x021B
     538:	10 91 1c 02 	lds	r17, 0x021C
     53c:	20 91 1d 02 	lds	r18, 0x021D
     540:	30 91 1e 02 	lds	r19, 0x021E
     544:	45 2f       	mov	r20, r21
     546:	08 17       	cp	r16, r24
     548:	19 07       	cpc	r17, r25
     54a:	2a 07       	cpc	r18, r26
     54c:	3b 07       	cpc	r19, r27
     54e:	08 f4       	brcc	.+2      	; 0x552 <angle_rotate+0x7e>
     550:	4e 2f       	mov	r20, r30
     552:	41 11       	cpse	r20, r1
     554:	09 c0       	rjmp	.+18     	; 0x568 <angle_rotate+0x94>
     556:	25 2f       	mov	r18, r21
     558:	c8 16       	cp	r12, r24
     55a:	d9 06       	cpc	r13, r25
     55c:	ea 06       	cpc	r14, r26
     55e:	fb 06       	cpc	r15, r27
     560:	08 f4       	brcc	.+2      	; 0x564 <angle_rotate+0x90>
     562:	2e 2f       	mov	r18, r30
     564:	22 23       	and	r18, r18
     566:	f1 f2       	breq	.-68     	; 0x524 <angle_rotate+0x50>
     568:	29 de       	rcall	.-942    	; 0x1bc <stop>
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	08 95       	ret

00000578 <linear_distance_mm>:
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	bc 01       	movw	r22, r24
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__floatunsisf>
     586:	25 ee       	ldi	r18, 0xE5	; 229
     588:	30 ed       	ldi	r19, 0xD0	; 208
     58a:	4a ea       	ldi	r20, 0xAA	; 170
     58c:	50 e4       	ldi	r21, 0x40	; 64
     58e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__divsf3>
     592:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
     596:	10 92 17 02 	sts	0x0217, r1
     59a:	10 92 18 02 	sts	0x0218, r1
     59e:	10 92 19 02 	sts	0x0219, r1
     5a2:	10 92 1a 02 	sts	0x021A, r1
     5a6:	00 91 17 02 	lds	r16, 0x0217
     5aa:	10 91 18 02 	lds	r17, 0x0218
     5ae:	20 91 19 02 	lds	r18, 0x0219
     5b2:	30 91 1a 02 	lds	r19, 0x021A
     5b6:	60 17       	cp	r22, r16
     5b8:	71 07       	cpc	r23, r17
     5ba:	82 07       	cpc	r24, r18
     5bc:	93 07       	cpc	r25, r19
     5be:	98 f7       	brcc	.-26     	; 0x5a6 <linear_distance_mm+0x2e>
     5c0:	fd dd       	rcall	.-1030   	; 0x1bc <stop>
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <forward_mm>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ec 01       	movw	r28, r24
     5ce:	de dd       	rcall	.-1092   	; 0x18c <forward>
     5d0:	ce 01       	movw	r24, r28
     5d2:	d2 df       	rcall	.-92     	; 0x578 <linear_distance_mm>
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <back_mm>:
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	d8 dd       	rcall	.-1104   	; 0x192 <back>
     5e2:	ce 01       	movw	r24, r28
     5e4:	c9 df       	rcall	.-110    	; 0x578 <linear_distance_mm>
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <left_degrees>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	d2 dd       	rcall	.-1116   	; 0x198 <left>
     5f4:	ce 01       	movw	r24, r28
     5f6:	6e df       	rcall	.-292    	; 0x4d4 <angle_rotate>
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <right_degrees>:
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
     604:	cc dd       	rcall	.-1128   	; 0x19e <right>
     606:	ce 01       	movw	r24, r28
     608:	65 df       	rcall	.-310    	; 0x4d4 <angle_rotate>
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <port_init>:
     610:	19 de       	rcall	.-974    	; 0x244 <adc_pin_config>
     612:	27 de       	rcall	.-946    	; 0x262 <buzzer_init>
     614:	eb dd       	rcall	.-1066   	; 0x1ec <servo1_pin_config>
     616:	ed dd       	rcall	.-1062   	; 0x1f2 <servo2_pin_config>
     618:	ef dd       	rcall	.-1058   	; 0x1f8 <servo3_pin_config>
     61a:	73 ce       	rjmp	.-794    	; 0x302 <color_sensor_pin_config>
     61c:	08 95       	ret

0000061e <init_devices>:
     61e:	f8 94       	cli
     620:	f9 de       	rcall	.-526    	; 0x414 <port_init_poz>
     622:	fc de       	rcall	.-520    	; 0x41c <left_position_encoder_interrupt_init>
     624:	04 df       	rcall	.-504    	; 0x42e <right_position_encoder_interrupt_init>
     626:	f4 df       	rcall	.-24     	; 0x610 <port_init>
     628:	71 de       	rcall	.-798    	; 0x30c <color_sensor_pin_interrupt_init>
     62a:	39 de       	rcall	.-910    	; 0x29e <adc_init>
     62c:	98 dd       	rcall	.-1232   	; 0x15e <motion_pin_config>
     62e:	7c dd       	rcall	.-1288   	; 0x128 <timer5_init>
     630:	e6 dd       	rcall	.-1076   	; 0x1fe <timer1_init>
     632:	78 94       	sei
     634:	08 95       	ret

00000636 <set_color>:
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	17 de       	rcall	.-978    	; 0x268 <ADC_Conversion>
     63a:	80 93 08 02 	sts	0x0208, r24
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	13 de       	rcall	.-986    	; 0x268 <ADC_Conversion>
     642:	80 93 07 02 	sts	0x0207, r24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0f de       	rcall	.-994    	; 0x268 <ADC_Conversion>
     64a:	80 93 06 02 	sts	0x0206, r24
     64e:	08 95       	ret

00000650 <scan>:
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	70 de       	rcall	.-800    	; 0x336 <red_read>
     656:	b5 de       	rcall	.-662    	; 0x3c2 <blue_read>
     658:	91 de       	rcall	.-734    	; 0x37c <green_read>
     65a:	8b e0       	ldi	r24, 0x0B	; 11
     65c:	05 de       	rcall	.-1014   	; 0x268 <ADC_Conversion>
     65e:	88 33       	cpi	r24, 0x38	; 56
     660:	08 f4       	brcc	.+2      	; 0x664 <scan+0x14>
     662:	7b c0       	rjmp	.+246    	; 0x75a <scan+0x10a>
     664:	8b e0       	ldi	r24, 0x0B	; 11
     666:	00 de       	rcall	.-1024   	; 0x268 <ADC_Conversion>
     668:	84 36       	cpi	r24, 0x64	; 100
     66a:	08 f0       	brcs	.+2      	; 0x66e <scan+0x1e>
     66c:	79 c0       	rjmp	.+242    	; 0x760 <scan+0x110>
     66e:	80 91 27 02 	lds	r24, 0x0227
     672:	90 91 28 02 	lds	r25, 0x0228
     676:	aa 27       	eor	r26, r26
     678:	97 fd       	sbrc	r25, 7
     67a:	a0 95       	com	r26
     67c:	ba 2f       	mov	r27, r26
     67e:	40 91 35 02 	lds	r20, 0x0235
     682:	50 91 36 02 	lds	r21, 0x0236
     686:	60 91 37 02 	lds	r22, 0x0237
     68a:	70 91 38 02 	lds	r23, 0x0238
     68e:	48 17       	cp	r20, r24
     690:	59 07       	cpc	r21, r25
     692:	6a 07       	cpc	r22, r26
     694:	7b 07       	cpc	r23, r27
     696:	d8 f4       	brcc	.+54     	; 0x6ce <scan+0x7e>
     698:	40 91 31 02 	lds	r20, 0x0231
     69c:	50 91 32 02 	lds	r21, 0x0232
     6a0:	60 91 33 02 	lds	r22, 0x0233
     6a4:	70 91 34 02 	lds	r23, 0x0234
     6a8:	48 17       	cp	r20, r24
     6aa:	59 07       	cpc	r21, r25
     6ac:	6a 07       	cpc	r22, r26
     6ae:	7b 07       	cpc	r23, r27
     6b0:	70 f4       	brcc	.+28     	; 0x6ce <scan+0x7e>
     6b2:	40 91 29 02 	lds	r20, 0x0229
     6b6:	50 91 2a 02 	lds	r21, 0x022A
     6ba:	60 91 2b 02 	lds	r22, 0x022B
     6be:	70 91 2c 02 	lds	r23, 0x022C
     6c2:	48 17       	cp	r20, r24
     6c4:	59 07       	cpc	r21, r25
     6c6:	6a 07       	cpc	r22, r26
     6c8:	7b 07       	cpc	r23, r27
     6ca:	08 f4       	brcc	.+2      	; 0x6ce <scan+0x7e>
     6cc:	4c c0       	rjmp	.+152    	; 0x766 <scan+0x116>
     6ce:	40 91 35 02 	lds	r20, 0x0235
     6d2:	50 91 36 02 	lds	r21, 0x0236
     6d6:	60 91 37 02 	lds	r22, 0x0237
     6da:	70 91 38 02 	lds	r23, 0x0238
     6de:	80 91 29 02 	lds	r24, 0x0229
     6e2:	90 91 2a 02 	lds	r25, 0x022A
     6e6:	a0 91 2b 02 	lds	r26, 0x022B
     6ea:	b0 91 2c 02 	lds	r27, 0x022C
     6ee:	84 17       	cp	r24, r20
     6f0:	95 07       	cpc	r25, r21
     6f2:	a6 07       	cpc	r26, r22
     6f4:	b7 07       	cpc	r27, r23
     6f6:	c8 f4       	brcc	.+50     	; 0x72a <scan+0xda>
     6f8:	00 91 35 02 	lds	r16, 0x0235
     6fc:	10 91 36 02 	lds	r17, 0x0236
     700:	20 91 37 02 	lds	r18, 0x0237
     704:	30 91 38 02 	lds	r19, 0x0238
     708:	40 91 31 02 	lds	r20, 0x0231
     70c:	50 91 32 02 	lds	r21, 0x0232
     710:	60 91 33 02 	lds	r22, 0x0233
     714:	70 91 34 02 	lds	r23, 0x0234
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	40 17       	cp	r20, r16
     71e:	51 07       	cpc	r21, r17
     720:	62 07       	cpc	r22, r18
     722:	73 07       	cpc	r23, r19
     724:	28 f5       	brcc	.+74     	; 0x770 <scan+0x120>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	23 c0       	rjmp	.+70     	; 0x770 <scan+0x120>
     72a:	40 91 29 02 	lds	r20, 0x0229
     72e:	50 91 2a 02 	lds	r21, 0x022A
     732:	60 91 2b 02 	lds	r22, 0x022B
     736:	70 91 2c 02 	lds	r23, 0x022C
     73a:	80 91 31 02 	lds	r24, 0x0231
     73e:	90 91 32 02 	lds	r25, 0x0232
     742:	a0 91 33 02 	lds	r26, 0x0233
     746:	b0 91 34 02 	lds	r27, 0x0234
     74a:	84 17       	cp	r24, r20
     74c:	95 07       	cpc	r25, r21
     74e:	a6 07       	cpc	r26, r22
     750:	b7 07       	cpc	r27, r23
     752:	60 f4       	brcc	.+24     	; 0x76c <scan+0x11c>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0b c0       	rjmp	.+22     	; 0x770 <scan+0x120>
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	9f ef       	ldi	r25, 0xFF	; 255
     75e:	08 c0       	rjmp	.+16     	; 0x770 <scan+0x120>
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	05 c0       	rjmp	.+10     	; 0x770 <scan+0x120>
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	02 c0       	rjmp	.+4      	; 0x770 <scan+0x120>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <lower>:
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	31 f4       	brne	.+12     	; 0x786 <lower+0x10>
     77a:	10 92 8b 00 	sts	0x008B, r1
     77e:	80 e4       	ldi	r24, 0x40	; 64
     780:	80 93 8a 00 	sts	0x008A, r24
     784:	05 c0       	rjmp	.+10     	; 0x790 <lower+0x1a>
     786:	10 92 8b 00 	sts	0x008B, r1
     78a:	83 e6       	ldi	r24, 0x63	; 99
     78c:	80 93 8a 00 	sts	0x008A, r24
     790:	2f ef       	ldi	r18, 0xFF	; 255
     792:	8f e7       	ldi	r24, 0x7F	; 127
     794:	96 e1       	ldi	r25, 0x16	; 22
     796:	21 50       	subi	r18, 0x01	; 1
     798:	80 40       	sbci	r24, 0x00	; 0
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <lower+0x20>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <lower+0x2a>
     7a0:	00 00       	nop
     7a2:	08 95       	ret

000007a4 <elevate>:
     7a4:	10 92 8b 00 	sts	0x008B, r1
     7a8:	83 e5       	ldi	r24, 0x53	; 83
     7aa:	80 93 8a 00 	sts	0x008A, r24
     7ae:	2f ef       	ldi	r18, 0xFF	; 255
     7b0:	8f e7       	ldi	r24, 0x7F	; 127
     7b2:	96 e1       	ldi	r25, 0x16	; 22
     7b4:	21 50       	subi	r18, 0x01	; 1
     7b6:	80 40       	sbci	r24, 0x00	; 0
     7b8:	90 40       	sbci	r25, 0x00	; 0
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <elevate+0x10>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <elevate+0x1a>
     7be:	00 00       	nop
     7c0:	07 dd       	rcall	.-1522   	; 0x1d0 <servo_2_free>
     7c2:	2f ef       	ldi	r18, 0xFF	; 255
     7c4:	8f e7       	ldi	r24, 0x7F	; 127
     7c6:	96 e1       	ldi	r25, 0x16	; 22
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	90 40       	sbci	r25, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <elevate+0x24>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <elevate+0x2e>
     7d2:	00 00       	nop
     7d4:	08 95       	ret

000007d6 <open>:
     7d6:	81 11       	cpse	r24, r1
     7d8:	19 c0       	rjmp	.+50     	; 0x80c <open+0x36>
     7da:	10 92 8d 00 	sts	0x008D, r1
     7de:	83 e5       	ldi	r24, 0x53	; 83
     7e0:	80 93 8c 00 	sts	0x008C, r24
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	8f e7       	ldi	r24, 0x7F	; 127
     7e8:	96 e1       	ldi	r25, 0x16	; 22
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	80 40       	sbci	r24, 0x00	; 0
     7ee:	90 40       	sbci	r25, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <open+0x14>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <open+0x1e>
     7f4:	00 00       	nop
     7f6:	f3 dc       	rcall	.-1562   	; 0x1de <servo_3_free>
     7f8:	2f ef       	ldi	r18, 0xFF	; 255
     7fa:	8f e7       	ldi	r24, 0x7F	; 127
     7fc:	96 e1       	ldi	r25, 0x16	; 22
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	80 40       	sbci	r24, 0x00	; 0
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <open+0x28>
     806:	00 c0       	rjmp	.+0      	; 0x808 <open+0x32>
     808:	00 00       	nop
     80a:	08 95       	ret
     80c:	10 92 89 00 	sts	0x0089, r1
     810:	83 e2       	ldi	r24, 0x23	; 35
     812:	80 93 88 00 	sts	0x0088, r24
     816:	2f ef       	ldi	r18, 0xFF	; 255
     818:	8f e7       	ldi	r24, 0x7F	; 127
     81a:	96 e1       	ldi	r25, 0x16	; 22
     81c:	21 50       	subi	r18, 0x01	; 1
     81e:	80 40       	sbci	r24, 0x00	; 0
     820:	90 40       	sbci	r25, 0x00	; 0
     822:	e1 f7       	brne	.-8      	; 0x81c <open+0x46>
     824:	00 c0       	rjmp	.+0      	; 0x826 <open+0x50>
     826:	00 00       	nop
     828:	cc dc       	rcall	.-1640   	; 0x1c2 <servo_1_free>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	8f e7       	ldi	r24, 0x7F	; 127
     82e:	96 e1       	ldi	r25, 0x16	; 22
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <open+0x5a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <open+0x64>
     83a:	00 00       	nop
     83c:	08 95       	ret

0000083e <close>:
     83e:	81 11       	cpse	r24, r1
     840:	06 c0       	rjmp	.+12     	; 0x84e <close+0x10>
     842:	10 92 8d 00 	sts	0x008D, r1
     846:	83 e2       	ldi	r24, 0x23	; 35
     848:	80 93 8c 00 	sts	0x008C, r24
     84c:	07 c0       	rjmp	.+14     	; 0x85c <close+0x1e>
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	29 f4       	brne	.+10     	; 0x85c <close+0x1e>
     852:	10 92 89 00 	sts	0x0089, r1
     856:	8e e4       	ldi	r24, 0x4E	; 78
     858:	80 93 88 00 	sts	0x0088, r24
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	8f e7       	ldi	r24, 0x7F	; 127
     860:	96 e1       	ldi	r25, 0x16	; 22
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <close+0x24>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <close+0x2e>
     86c:	00 00       	nop
     86e:	08 95       	ret

00000870 <node>:
     870:	88 ec       	ldi	r24, 0xC8	; 200
     872:	80 93 28 01 	sts	0x0128, r24
     876:	80 93 2a 01 	sts	0x012A, r24
     87a:	86 e4       	ldi	r24, 0x46	; 70
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a4 de       	rcall	.-696    	; 0x5c8 <forward_mm>
     880:	9d cc       	rjmp	.-1734   	; 0x1bc <stop>
     882:	08 95       	ret

00000884 <turnRight>:
     884:	80 91 09 02 	lds	r24, 0x0209
     888:	90 91 0a 02 	lds	r25, 0x020A
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	91 05       	cpc	r25, r1
     890:	39 f4       	brne	.+14     	; 0x8a0 <turnRight+0x1c>
     892:	80 91 00 02 	lds	r24, 0x0200
     896:	90 91 01 02 	lds	r25, 0x0201
     89a:	02 97       	sbiw	r24, 0x02	; 2
     89c:	98 f4       	brcc	.+38     	; 0x8c4 <turnRight+0x40>
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <turnRight+0x2e>
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	81 f4       	brne	.+32     	; 0x8c4 <turnRight+0x40>
     8a4:	80 91 00 02 	lds	r24, 0x0200
     8a8:	90 91 01 02 	lds	r25, 0x0201
     8ac:	02 97       	sbiw	r24, 0x02	; 2
     8ae:	02 97       	sbiw	r24, 0x02	; 2
     8b0:	48 f4       	brcc	.+18     	; 0x8c4 <turnRight+0x40>
     8b2:	88 ec       	ldi	r24, 0xC8	; 200
     8b4:	80 93 28 01 	sts	0x0128, r24
     8b8:	80 93 2a 01 	sts	0x012A, r24
     8bc:	8a e5       	ldi	r24, 0x5A	; 90
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	9e de       	rcall	.-708    	; 0x5fe <right_degrees>
     8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <turnRight+0x5e>
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	80 93 28 01 	sts	0x0128, r24
     8ca:	80 93 2a 01 	sts	0x012A, r24
     8ce:	8e e1       	ldi	r24, 0x1E	; 30
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	95 de       	rcall	.-726    	; 0x5fe <right_degrees>
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <turnRight+0x54>
     8d6:	63 dc       	rcall	.-1850   	; 0x19e <right>
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	c6 dc       	rcall	.-1652   	; 0x268 <ADC_Conversion>
     8dc:	82 33       	cpi	r24, 0x32	; 50
     8de:	d8 f3       	brcs	.-10     	; 0x8d6 <turnRight+0x52>
     8e0:	6d dc       	rcall	.-1830   	; 0x1bc <stop>
     8e2:	80 91 09 02 	lds	r24, 0x0209
     8e6:	90 91 0a 02 	lds	r25, 0x020A
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	83 70       	andi	r24, 0x03	; 3
     8ee:	90 78       	andi	r25, 0x80	; 128
     8f0:	99 23       	and	r25, r25
     8f2:	24 f4       	brge	.+8      	; 0x8fc <turnRight+0x78>
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	8c 6f       	ori	r24, 0xFC	; 252
     8f8:	9f 6f       	ori	r25, 0xFF	; 255
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	90 93 0a 02 	sts	0x020A, r25
     900:	80 93 09 02 	sts	0x0209, r24
     904:	08 95       	ret

00000906 <turnLeft>:
     906:	80 91 09 02 	lds	r24, 0x0209
     90a:	90 91 0a 02 	lds	r25, 0x020A
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	91 05       	cpc	r25, r1
     912:	39 f4       	brne	.+14     	; 0x922 <turnLeft+0x1c>
     914:	80 91 00 02 	lds	r24, 0x0200
     918:	90 91 01 02 	lds	r25, 0x0201
     91c:	02 97       	sbiw	r24, 0x02	; 2
     91e:	98 f4       	brcc	.+38     	; 0x946 <turnLeft+0x40>
     920:	09 c0       	rjmp	.+18     	; 0x934 <turnLeft+0x2e>
     922:	03 97       	sbiw	r24, 0x03	; 3
     924:	81 f4       	brne	.+32     	; 0x946 <turnLeft+0x40>
     926:	80 91 00 02 	lds	r24, 0x0200
     92a:	90 91 01 02 	lds	r25, 0x0201
     92e:	02 97       	sbiw	r24, 0x02	; 2
     930:	02 97       	sbiw	r24, 0x02	; 2
     932:	48 f4       	brcc	.+18     	; 0x946 <turnLeft+0x40>
     934:	88 ec       	ldi	r24, 0xC8	; 200
     936:	80 93 28 01 	sts	0x0128, r24
     93a:	80 93 2a 01 	sts	0x012A, r24
     93e:	8a e5       	ldi	r24, 0x5A	; 90
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	54 de       	rcall	.-856    	; 0x5ec <left_degrees>
     944:	0f c0       	rjmp	.+30     	; 0x964 <turnLeft+0x5e>
     946:	8e e1       	ldi	r24, 0x1E	; 30
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	50 de       	rcall	.-864    	; 0x5ec <left_degrees>
     94c:	88 ec       	ldi	r24, 0xC8	; 200
     94e:	80 93 28 01 	sts	0x0128, r24
     952:	80 93 2a 01 	sts	0x012A, r24
     956:	01 c0       	rjmp	.+2      	; 0x95a <turnLeft+0x54>
     958:	1f dc       	rcall	.-1986   	; 0x198 <left>
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	85 dc       	rcall	.-1782   	; 0x268 <ADC_Conversion>
     95e:	88 32       	cpi	r24, 0x28	; 40
     960:	d8 f3       	brcs	.-10     	; 0x958 <turnLeft+0x52>
     962:	2c dc       	rcall	.-1960   	; 0x1bc <stop>
     964:	80 91 09 02 	lds	r24, 0x0209
     968:	90 91 0a 02 	lds	r25, 0x020A
     96c:	03 96       	adiw	r24, 0x03	; 3
     96e:	83 70       	andi	r24, 0x03	; 3
     970:	90 78       	andi	r25, 0x80	; 128
     972:	99 23       	and	r25, r25
     974:	24 f4       	brge	.+8      	; 0x97e <turnLeft+0x78>
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	8c 6f       	ori	r24, 0xFC	; 252
     97a:	9f 6f       	ori	r25, 0xFF	; 255
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	90 93 0a 02 	sts	0x020A, r25
     982:	80 93 09 02 	sts	0x0209, r24
     986:	08 95       	ret

00000988 <turn>:
     988:	80 91 09 02 	lds	r24, 0x0209
     98c:	90 91 0a 02 	lds	r25, 0x020A
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	81 f4       	brne	.+32     	; 0x9b4 <turn+0x2c>
     994:	80 91 00 02 	lds	r24, 0x0200
     998:	90 91 01 02 	lds	r25, 0x0201
     99c:	02 97       	sbiw	r24, 0x02	; 2
     99e:	02 97       	sbiw	r24, 0x02	; 2
     9a0:	d0 f4       	brcc	.+52     	; 0x9d6 <turn+0x4e>
     9a2:	88 ec       	ldi	r24, 0xC8	; 200
     9a4:	80 93 28 01 	sts	0x0128, r24
     9a8:	80 93 2a 01 	sts	0x012A, r24
     9ac:	8e eb       	ldi	r24, 0xBE	; 190
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	1d de       	rcall	.-966    	; 0x5ec <left_degrees>
     9b2:	29 c0       	rjmp	.+82     	; 0xa06 <turn+0x7e>
     9b4:	02 97       	sbiw	r24, 0x02	; 2
     9b6:	79 f4       	brne	.+30     	; 0x9d6 <turn+0x4e>
     9b8:	80 91 00 02 	lds	r24, 0x0200
     9bc:	90 91 01 02 	lds	r25, 0x0201
     9c0:	02 97       	sbiw	r24, 0x02	; 2
     9c2:	48 f4       	brcc	.+18     	; 0x9d6 <turn+0x4e>
     9c4:	88 ec       	ldi	r24, 0xC8	; 200
     9c6:	80 93 28 01 	sts	0x0128, r24
     9ca:	80 93 2a 01 	sts	0x012A, r24
     9ce:	8e eb       	ldi	r24, 0xBE	; 190
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0c de       	rcall	.-1000   	; 0x5ec <left_degrees>
     9d4:	18 c0       	rjmp	.+48     	; 0xa06 <turn+0x7e>
     9d6:	88 ec       	ldi	r24, 0xC8	; 200
     9d8:	80 93 28 01 	sts	0x0128, r24
     9dc:	80 93 2a 01 	sts	0x012A, r24
     9e0:	80 ea       	ldi	r24, 0xA0	; 160
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	03 de       	rcall	.-1018   	; 0x5ec <left_degrees>
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <turn+0x62>
     9e8:	d7 db       	rcall	.-2130   	; 0x198 <left>
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	3d dc       	rcall	.-1926   	; 0x268 <ADC_Conversion>
     9ee:	8f 32       	cpi	r24, 0x2F	; 47
     9f0:	d8 f3       	brcs	.-10     	; 0x9e8 <turn+0x60>
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	8f e3       	ldi	r24, 0x3F	; 63
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	21 50       	subi	r18, 0x01	; 1
     9fa:	80 40       	sbci	r24, 0x00	; 0
     9fc:	90 40       	sbci	r25, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <turn+0x70>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <turn+0x7a>
     a02:	00 00       	nop
     a04:	db db       	rcall	.-2122   	; 0x1bc <stop>
     a06:	80 91 09 02 	lds	r24, 0x0209
     a0a:	90 91 0a 02 	lds	r25, 0x020A
     a0e:	02 96       	adiw	r24, 0x02	; 2
     a10:	83 70       	andi	r24, 0x03	; 3
     a12:	90 78       	andi	r25, 0x80	; 128
     a14:	99 23       	and	r25, r25
     a16:	24 f4       	brge	.+8      	; 0xa20 <turn+0x98>
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	8c 6f       	ori	r24, 0xFC	; 252
     a1c:	9f 6f       	ori	r25, 0xFF	; 255
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	90 93 0a 02 	sts	0x020A, r25
     a24:	80 93 09 02 	sts	0x0209, r24
     a28:	10 92 0e 02 	sts	0x020E, r1
     a2c:	10 92 0d 02 	sts	0x020D, r1
     a30:	08 95       	ret

00000a32 <Delay>:
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	8c 01       	movw	r16, r24
     a3c:	18 16       	cp	r1, r24
     a3e:	19 06       	cpc	r1, r25
     a40:	8c f4       	brge	.+34     	; 0xa64 <Delay+0x32>
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
     a46:	09 c0       	rjmp	.+18     	; 0xa5a <Delay+0x28>
     a48:	86 e6       	ldi	r24, 0x66	; 102
     a4a:	9e e0       	ldi	r25, 0x0E	; 14
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <Delay+0x1a>
     a50:	00 00       	nop
     a52:	21 96       	adiw	r28, 0x01	; 1
     a54:	c0 17       	cp	r28, r16
     a56:	d1 07       	cpc	r29, r17
     a58:	39 f0       	breq	.+14     	; 0xa68 <Delay+0x36>
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	05 dc       	rcall	.-2038   	; 0x268 <ADC_Conversion>
     a5e:	88 32       	cpi	r24, 0x28	; 40
     a60:	98 f3       	brcs	.-26     	; 0xa48 <Delay+0x16>
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <Delay+0x36>
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	a9 db       	rcall	.-2222   	; 0x1bc <stop>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	c0 17       	cp	r28, r16
     a6e:	d1 07       	cpc	r29, r17
     a70:	0c f0       	brlt	.+2      	; 0xa74 <Delay+0x42>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <semiCorrect_Indi>:
     a7e:	80 91 07 02 	lds	r24, 0x0207
     a82:	89 32       	cpi	r24, 0x29	; 41
     a84:	40 f0       	brcs	.+16     	; 0xa96 <semiCorrect_Indi+0x18>
     a86:	90 91 08 02 	lds	r25, 0x0208
     a8a:	99 32       	cpi	r25, 0x29	; 41
     a8c:	08 f5       	brcc	.+66     	; 0xad0 <semiCorrect_Indi+0x52>
     a8e:	90 91 06 02 	lds	r25, 0x0206
     a92:	99 32       	cpi	r25, 0x29	; 41
     a94:	e8 f4       	brcc	.+58     	; 0xad0 <semiCorrect_Indi+0x52>
     a96:	88 32       	cpi	r24, 0x28	; 40
     a98:	d8 f4       	brcc	.+54     	; 0xad0 <semiCorrect_Indi+0x52>
     a9a:	80 91 08 02 	lds	r24, 0x0208
     a9e:	89 32       	cpi	r24, 0x29	; 41
     aa0:	58 f0       	brcs	.+22     	; 0xab8 <semiCorrect_Indi+0x3a>
     aa2:	90 91 06 02 	lds	r25, 0x0206
     aa6:	98 32       	cpi	r25, 0x28	; 40
     aa8:	38 f4       	brcc	.+14     	; 0xab8 <semiCorrect_Indi+0x3a>
     aaa:	76 db       	rcall	.-2324   	; 0x198 <left>
     aac:	c4 dd       	rcall	.-1144   	; 0x636 <set_color>
     aae:	80 91 07 02 	lds	r24, 0x0207
     ab2:	88 32       	cpi	r24, 0x28	; 40
     ab4:	d0 f3       	brcs	.-12     	; 0xaaa <semiCorrect_Indi+0x2c>
     ab6:	08 95       	ret
     ab8:	90 91 06 02 	lds	r25, 0x0206
     abc:	99 32       	cpi	r25, 0x29	; 41
     abe:	40 f0       	brcs	.+16     	; 0xad0 <semiCorrect_Indi+0x52>
     ac0:	88 32       	cpi	r24, 0x28	; 40
     ac2:	30 f4       	brcc	.+12     	; 0xad0 <semiCorrect_Indi+0x52>
     ac4:	6c db       	rcall	.-2344   	; 0x19e <right>
     ac6:	b7 dd       	rcall	.-1170   	; 0x636 <set_color>
     ac8:	80 91 07 02 	lds	r24, 0x0207
     acc:	88 32       	cpi	r24, 0x28	; 40
     ace:	d0 f3       	brcs	.-12     	; 0xac4 <semiCorrect_Indi+0x46>
     ad0:	08 95       	ret

00000ad2 <correct_Indi>:
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	72 db       	rcall	.-2332   	; 0x1bc <stop>
     ad8:	c2 e3       	ldi	r28, 0x32	; 50
     ada:	d0 e0       	ldi	r29, 0x00	; 0
     adc:	5d db       	rcall	.-2374   	; 0x198 <left>
     ade:	ce 01       	movw	r24, r28
     ae0:	a8 df       	rcall	.-176    	; 0xa32 <Delay>
     ae2:	81 11       	cpse	r24, r1
     ae4:	16 c0       	rjmp	.+44     	; 0xb12 <correct_Indi+0x40>
     ae6:	6a db       	rcall	.-2348   	; 0x1bc <stop>
     ae8:	ca df       	rcall	.-108    	; 0xa7e <semiCorrect_Indi>
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	bd db       	rcall	.-2182   	; 0x268 <ADC_Conversion>
     aee:	89 32       	cpi	r24, 0x29	; 41
     af0:	78 f4       	brcc	.+30     	; 0xb10 <correct_Indi+0x3e>
     af2:	55 db       	rcall	.-2390   	; 0x19e <right>
     af4:	ce 01       	movw	r24, r28
     af6:	c2 96       	adiw	r24, 0x32	; 50
     af8:	9c df       	rcall	.-200    	; 0xa32 <Delay>
     afa:	81 11       	cpse	r24, r1
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <correct_Indi+0x40>
     afe:	5e db       	rcall	.-2372   	; 0x1bc <stop>
     b00:	be df       	rcall	.-132    	; 0xa7e <semiCorrect_Indi>
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	b1 db       	rcall	.-2206   	; 0x268 <ADC_Conversion>
     b06:	89 32       	cpi	r24, 0x29	; 41
     b08:	18 f4       	brcc	.+6      	; 0xb10 <correct_Indi+0x3e>
     b0a:	cc 59       	subi	r28, 0x9C	; 156
     b0c:	df 4f       	sbci	r29, 0xFF	; 255
     b0e:	e6 cf       	rjmp	.-52     	; 0xadc <correct_Indi+0xa>
     b10:	55 db       	rcall	.-2390   	; 0x1bc <stop>
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <lineFix_Indi>:
     b18:	88 ec       	ldi	r24, 0xC8	; 200
     b1a:	80 93 28 01 	sts	0x0128, r24
     b1e:	80 93 2a 01 	sts	0x012A, r24
     b22:	80 91 07 02 	lds	r24, 0x0207
     b26:	88 32       	cpi	r24, 0x28	; 40
     b28:	80 f5       	brcc	.+96     	; 0xb8a <lineFix_Indi+0x72>
     b2a:	80 91 08 02 	lds	r24, 0x0208
     b2e:	89 32       	cpi	r24, 0x29	; 41
     b30:	a0 f0       	brcs	.+40     	; 0xb5a <lineFix_Indi+0x42>
     b32:	90 91 06 02 	lds	r25, 0x0206
     b36:	98 32       	cpi	r25, 0x28	; 40
     b38:	80 f4       	brcc	.+32     	; 0xb5a <lineFix_Indi+0x42>
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <lineFix_Indi+0x28>
     b3c:	2d db       	rcall	.-2470   	; 0x198 <left>
     b3e:	7b dd       	rcall	.-1290   	; 0x636 <set_color>
     b40:	80 91 07 02 	lds	r24, 0x0207
     b44:	89 32       	cpi	r24, 0x29	; 41
     b46:	d0 f3       	brcs	.-12     	; 0xb3c <lineFix_Indi+0x24>
     b48:	80 91 08 02 	lds	r24, 0x0208
     b4c:	88 32       	cpi	r24, 0x28	; 40
     b4e:	b0 f7       	brcc	.-20     	; 0xb3c <lineFix_Indi+0x24>
     b50:	80 91 06 02 	lds	r24, 0x0206
     b54:	88 32       	cpi	r24, 0x28	; 40
     b56:	90 f7       	brcc	.-28     	; 0xb3c <lineFix_Indi+0x24>
     b58:	2d c0       	rjmp	.+90     	; 0xbb4 <lineFix_Indi+0x9c>
     b5a:	90 91 06 02 	lds	r25, 0x0206
     b5e:	99 32       	cpi	r25, 0x29	; 41
     b60:	90 f0       	brcs	.+36     	; 0xb86 <lineFix_Indi+0x6e>
     b62:	88 32       	cpi	r24, 0x28	; 40
     b64:	80 f4       	brcc	.+32     	; 0xb86 <lineFix_Indi+0x6e>
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <lineFix_Indi+0x54>
     b68:	1a db       	rcall	.-2508   	; 0x19e <right>
     b6a:	65 dd       	rcall	.-1334   	; 0x636 <set_color>
     b6c:	80 91 07 02 	lds	r24, 0x0207
     b70:	89 32       	cpi	r24, 0x29	; 41
     b72:	d0 f3       	brcs	.-12     	; 0xb68 <lineFix_Indi+0x50>
     b74:	80 91 08 02 	lds	r24, 0x0208
     b78:	88 32       	cpi	r24, 0x28	; 40
     b7a:	b0 f7       	brcc	.-20     	; 0xb68 <lineFix_Indi+0x50>
     b7c:	80 91 06 02 	lds	r24, 0x0206
     b80:	88 32       	cpi	r24, 0x28	; 40
     b82:	90 f7       	brcc	.-28     	; 0xb68 <lineFix_Indi+0x50>
     b84:	17 c0       	rjmp	.+46     	; 0xbb4 <lineFix_Indi+0x9c>
     b86:	a5 df       	rcall	.-182    	; 0xad2 <correct_Indi>
     b88:	15 c0       	rjmp	.+42     	; 0xbb4 <lineFix_Indi+0x9c>
     b8a:	80 91 08 02 	lds	r24, 0x0208
     b8e:	89 32       	cpi	r24, 0x29	; 41
     b90:	20 f0       	brcs	.+8      	; 0xb9a <lineFix_Indi+0x82>
     b92:	90 91 06 02 	lds	r25, 0x0206
     b96:	98 32       	cpi	r25, 0x28	; 40
     b98:	70 f0       	brcs	.+28     	; 0xbb6 <lineFix_Indi+0x9e>
     b9a:	88 32       	cpi	r24, 0x28	; 40
     b9c:	20 f4       	brcc	.+8      	; 0xba6 <lineFix_Indi+0x8e>
     b9e:	90 91 06 02 	lds	r25, 0x0206
     ba2:	99 32       	cpi	r25, 0x29	; 41
     ba4:	40 f4       	brcc	.+16     	; 0xbb6 <lineFix_Indi+0x9e>
     ba6:	89 32       	cpi	r24, 0x29	; 41
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <lineFix_Indi+0x9a>
     baa:	80 91 06 02 	lds	r24, 0x0206
     bae:	89 32       	cpi	r24, 0x29	; 41
     bb0:	10 f4       	brcc	.+4      	; 0xbb6 <lineFix_Indi+0x9e>
     bb2:	8f df       	rcall	.-226    	; 0xad2 <correct_Indi>
     bb4:	03 cb       	rjmp	.-2554   	; 0x1bc <stop>
     bb6:	08 95       	ret

00000bb8 <keepMoving_Indi>:
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	08 e2       	ldi	r16, 0x28	; 40
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	ff 24       	eor	r15, r15
     bc8:	fa 94       	dec	r15
     bca:	ca e2       	ldi	r28, 0x2A	; 42
     bcc:	d1 e0       	ldi	r29, 0x01	; 1
     bce:	de da       	rcall	.-2628   	; 0x18c <forward>
     bd0:	32 dd       	rcall	.-1436   	; 0x636 <set_color>
     bd2:	80 91 07 02 	lds	r24, 0x0207
     bd6:	89 32       	cpi	r24, 0x29	; 41
     bd8:	40 f0       	brcs	.+16     	; 0xbea <keepMoving_Indi+0x32>
     bda:	80 91 08 02 	lds	r24, 0x0208
     bde:	89 32       	cpi	r24, 0x29	; 41
     be0:	a8 f4       	brcc	.+42     	; 0xc0c <keepMoving_Indi+0x54>
     be2:	80 91 06 02 	lds	r24, 0x0206
     be6:	89 32       	cpi	r24, 0x29	; 41
     be8:	88 f4       	brcc	.+34     	; 0xc0c <keepMoving_Indi+0x54>
     bea:	f8 01       	movw	r30, r16
     bec:	f0 82       	st	Z, r15
     bee:	f8 82       	st	Y, r15
     bf0:	80 91 07 02 	lds	r24, 0x0207
     bf4:	89 32       	cpi	r24, 0x29	; 41
     bf6:	40 f0       	brcs	.+16     	; 0xc08 <keepMoving_Indi+0x50>
     bf8:	80 91 08 02 	lds	r24, 0x0208
     bfc:	88 32       	cpi	r24, 0x28	; 40
     bfe:	20 f4       	brcc	.+8      	; 0xc08 <keepMoving_Indi+0x50>
     c00:	80 91 06 02 	lds	r24, 0x0206
     c04:	88 32       	cpi	r24, 0x28	; 40
     c06:	18 f3       	brcs	.-58     	; 0xbce <keepMoving_Indi+0x16>
     c08:	87 df       	rcall	.-242    	; 0xb18 <lineFix_Indi>
     c0a:	d6 df       	rcall	.-84     	; 0xbb8 <keepMoving_Indi>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	08 95       	ret

00000c18 <semiCorrect>:
     c18:	80 91 07 02 	lds	r24, 0x0207
     c1c:	89 32       	cpi	r24, 0x29	; 41
     c1e:	58 f0       	brcs	.+22     	; 0xc36 <semiCorrect+0x1e>
     c20:	90 91 08 02 	lds	r25, 0x0208
     c24:	99 32       	cpi	r25, 0x29	; 41
     c26:	20 f4       	brcc	.+8      	; 0xc30 <semiCorrect+0x18>
     c28:	90 91 06 02 	lds	r25, 0x0206
     c2c:	99 32       	cpi	r25, 0x29	; 41
     c2e:	18 f0       	brcs	.+6      	; 0xc36 <semiCorrect+0x1e>
     c30:	1f de       	rcall	.-962    	; 0x870 <node>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret
     c36:	88 32       	cpi	r24, 0x28	; 40
     c38:	e0 f4       	brcc	.+56     	; 0xc72 <semiCorrect+0x5a>
     c3a:	80 91 08 02 	lds	r24, 0x0208
     c3e:	89 32       	cpi	r24, 0x29	; 41
     c40:	58 f0       	brcs	.+22     	; 0xc58 <semiCorrect+0x40>
     c42:	90 91 06 02 	lds	r25, 0x0206
     c46:	98 32       	cpi	r25, 0x28	; 40
     c48:	38 f4       	brcc	.+14     	; 0xc58 <semiCorrect+0x40>
     c4a:	a6 da       	rcall	.-2740   	; 0x198 <left>
     c4c:	f4 dc       	rcall	.-1560   	; 0x636 <set_color>
     c4e:	80 91 07 02 	lds	r24, 0x0207
     c52:	88 32       	cpi	r24, 0x28	; 40
     c54:	d0 f3       	brcs	.-12     	; 0xc4a <semiCorrect+0x32>
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <semiCorrect+0x5e>
     c58:	90 91 06 02 	lds	r25, 0x0206
     c5c:	99 32       	cpi	r25, 0x29	; 41
     c5e:	68 f0       	brcs	.+26     	; 0xc7a <semiCorrect+0x62>
     c60:	88 32       	cpi	r24, 0x28	; 40
     c62:	68 f4       	brcc	.+26     	; 0xc7e <semiCorrect+0x66>
     c64:	9c da       	rcall	.-2760   	; 0x19e <right>
     c66:	e7 dc       	rcall	.-1586   	; 0x636 <set_color>
     c68:	80 91 07 02 	lds	r24, 0x0207
     c6c:	88 32       	cpi	r24, 0x28	; 40
     c6e:	d0 f3       	brcs	.-12     	; 0xc64 <semiCorrect+0x4c>
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <semiCorrect+0x6a>
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	08 95       	ret
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	08 95       	ret
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	08 95       	ret
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	08 95       	ret

00000c86 <correct>:
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	97 da       	rcall	.-2770   	; 0x1bc <stop>
     c8e:	c2 e3       	ldi	r28, 0x32	; 50
     c90:	d0 e0       	ldi	r29, 0x00	; 0
     c92:	82 da       	rcall	.-2812   	; 0x198 <left>
     c94:	ce 01       	movw	r24, r28
     c96:	cd de       	rcall	.-614    	; 0xa32 <Delay>
     c98:	81 11       	cpse	r24, r1
     c9a:	1c c0       	rjmp	.+56     	; 0xcd4 <correct+0x4e>
     c9c:	8f da       	rcall	.-2786   	; 0x1bc <stop>
     c9e:	bc df       	rcall	.-136    	; 0xc18 <semiCorrect>
     ca0:	18 2f       	mov	r17, r24
     ca2:	81 11       	cpse	r24, r1
     ca4:	19 c0       	rjmp	.+50     	; 0xcd8 <correct+0x52>
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	df da       	rcall	.-2626   	; 0x268 <ADC_Conversion>
     caa:	89 32       	cpi	r24, 0x29	; 41
     cac:	88 f4       	brcc	.+34     	; 0xcd0 <correct+0x4a>
     cae:	77 da       	rcall	.-2834   	; 0x19e <right>
     cb0:	ce 01       	movw	r24, r28
     cb2:	c2 96       	adiw	r24, 0x32	; 50
     cb4:	be de       	rcall	.-644    	; 0xa32 <Delay>
     cb6:	81 11       	cpse	r24, r1
     cb8:	12 c0       	rjmp	.+36     	; 0xcde <correct+0x58>
     cba:	80 da       	rcall	.-2816   	; 0x1bc <stop>
     cbc:	ad df       	rcall	.-166    	; 0xc18 <semiCorrect>
     cbe:	81 11       	cpse	r24, r1
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <correct+0x56>
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	d1 da       	rcall	.-2654   	; 0x268 <ADC_Conversion>
     cc6:	89 32       	cpi	r24, 0x29	; 41
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <correct+0x4a>
     cca:	cc 59       	subi	r28, 0x9C	; 156
     ccc:	df 4f       	sbci	r29, 0xFF	; 255
     cce:	e1 cf       	rjmp	.-62     	; 0xc92 <correct+0xc>
     cd0:	75 da       	rcall	.-2838   	; 0x1bc <stop>
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <correct+0x58>
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <correct+0x58>
     cd8:	11 e0       	ldi	r17, 0x01	; 1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <correct+0x58>
     cdc:	11 e0       	ldi	r17, 0x01	; 1
     cde:	81 2f       	mov	r24, r17
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	08 95       	ret

00000ce8 <lineFix>:
     ce8:	88 ec       	ldi	r24, 0xC8	; 200
     cea:	80 93 28 01 	sts	0x0128, r24
     cee:	80 93 2a 01 	sts	0x012A, r24
     cf2:	80 91 07 02 	lds	r24, 0x0207
     cf6:	88 32       	cpi	r24, 0x28	; 40
     cf8:	90 f5       	brcc	.+100    	; 0xd5e <lineFix+0x76>
     cfa:	80 91 08 02 	lds	r24, 0x0208
     cfe:	89 32       	cpi	r24, 0x29	; 41
     d00:	a0 f0       	brcs	.+40     	; 0xd2a <lineFix+0x42>
     d02:	90 91 06 02 	lds	r25, 0x0206
     d06:	98 32       	cpi	r25, 0x28	; 40
     d08:	80 f4       	brcc	.+32     	; 0xd2a <lineFix+0x42>
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <lineFix+0x28>
     d0c:	45 da       	rcall	.-2934   	; 0x198 <left>
     d0e:	93 dc       	rcall	.-1754   	; 0x636 <set_color>
     d10:	80 91 07 02 	lds	r24, 0x0207
     d14:	89 32       	cpi	r24, 0x29	; 41
     d16:	d0 f3       	brcs	.-12     	; 0xd0c <lineFix+0x24>
     d18:	80 91 08 02 	lds	r24, 0x0208
     d1c:	88 32       	cpi	r24, 0x28	; 40
     d1e:	b0 f7       	brcc	.-20     	; 0xd0c <lineFix+0x24>
     d20:	80 91 06 02 	lds	r24, 0x0206
     d24:	88 32       	cpi	r24, 0x28	; 40
     d26:	90 f7       	brcc	.-28     	; 0xd0c <lineFix+0x24>
     d28:	33 c0       	rjmp	.+102    	; 0xd90 <lineFix+0xa8>
     d2a:	90 91 06 02 	lds	r25, 0x0206
     d2e:	99 32       	cpi	r25, 0x29	; 41
     d30:	90 f0       	brcs	.+36     	; 0xd56 <lineFix+0x6e>
     d32:	88 32       	cpi	r24, 0x28	; 40
     d34:	80 f4       	brcc	.+32     	; 0xd56 <lineFix+0x6e>
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <lineFix+0x54>
     d38:	32 da       	rcall	.-2972   	; 0x19e <right>
     d3a:	7d dc       	rcall	.-1798   	; 0x636 <set_color>
     d3c:	80 91 07 02 	lds	r24, 0x0207
     d40:	89 32       	cpi	r24, 0x29	; 41
     d42:	d0 f3       	brcs	.-12     	; 0xd38 <lineFix+0x50>
     d44:	80 91 08 02 	lds	r24, 0x0208
     d48:	88 32       	cpi	r24, 0x28	; 40
     d4a:	b0 f7       	brcc	.-20     	; 0xd38 <lineFix+0x50>
     d4c:	80 91 06 02 	lds	r24, 0x0206
     d50:	88 32       	cpi	r24, 0x28	; 40
     d52:	90 f7       	brcc	.-28     	; 0xd38 <lineFix+0x50>
     d54:	1d c0       	rjmp	.+58     	; 0xd90 <lineFix+0xa8>
     d56:	97 df       	rcall	.-210    	; 0xc86 <correct>
     d58:	88 23       	and	r24, r24
     d5a:	d1 f0       	breq	.+52     	; 0xd90 <lineFix+0xa8>
     d5c:	1d c0       	rjmp	.+58     	; 0xd98 <lineFix+0xb0>
     d5e:	80 91 08 02 	lds	r24, 0x0208
     d62:	89 32       	cpi	r24, 0x29	; 41
     d64:	40 f0       	brcs	.+16     	; 0xd76 <lineFix+0x8e>
     d66:	90 91 06 02 	lds	r25, 0x0206
     d6a:	98 32       	cpi	r25, 0x28	; 40
     d6c:	20 f4       	brcc	.+8      	; 0xd76 <lineFix+0x8e>
     d6e:	80 dd       	rcall	.-1280   	; 0x870 <node>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	08 95       	ret
     d76:	88 32       	cpi	r24, 0x28	; 40
     d78:	40 f4       	brcc	.+16     	; 0xd8a <lineFix+0xa2>
     d7a:	80 91 06 02 	lds	r24, 0x0206
     d7e:	89 32       	cpi	r24, 0x29	; 41
     d80:	20 f0       	brcs	.+8      	; 0xd8a <lineFix+0xa2>
     d82:	76 dd       	rcall	.-1300   	; 0x870 <node>
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	08 95       	ret
     d8a:	7d df       	rcall	.-262    	; 0xc86 <correct>
     d8c:	81 11       	cpse	r24, r1
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <lineFix+0xb6>
     d90:	15 da       	rcall	.-3030   	; 0x1bc <stop>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	08 95       	ret
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	08 95       	ret

00000da4 <keepMoving>:
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	08 e2       	ldi	r16, 0x28	; 40
     db0:	11 e0       	ldi	r17, 0x01	; 1
     db2:	ff 24       	eor	r15, r15
     db4:	fa 94       	dec	r15
     db6:	ca e2       	ldi	r28, 0x2A	; 42
     db8:	d1 e0       	ldi	r29, 0x01	; 1
     dba:	e8 d9       	rcall	.-3120   	; 0x18c <forward>
     dbc:	3c dc       	rcall	.-1928   	; 0x636 <set_color>
     dbe:	80 91 07 02 	lds	r24, 0x0207
     dc2:	89 32       	cpi	r24, 0x29	; 41
     dc4:	50 f0       	brcs	.+20     	; 0xdda <keepMoving+0x36>
     dc6:	80 91 08 02 	lds	r24, 0x0208
     dca:	89 32       	cpi	r24, 0x29	; 41
     dcc:	20 f4       	brcc	.+8      	; 0xdd6 <keepMoving+0x32>
     dce:	80 91 06 02 	lds	r24, 0x0206
     dd2:	89 32       	cpi	r24, 0x29	; 41
     dd4:	10 f0       	brcs	.+4      	; 0xdda <keepMoving+0x36>
     dd6:	4c dd       	rcall	.-1384   	; 0x870 <node>
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <keepMoving+0x5c>
     dda:	f8 01       	movw	r30, r16
     ddc:	f0 82       	st	Z, r15
     dde:	f8 82       	st	Y, r15
     de0:	80 91 07 02 	lds	r24, 0x0207
     de4:	89 32       	cpi	r24, 0x29	; 41
     de6:	40 f0       	brcs	.+16     	; 0xdf8 <keepMoving+0x54>
     de8:	80 91 08 02 	lds	r24, 0x0208
     dec:	88 32       	cpi	r24, 0x28	; 40
     dee:	20 f4       	brcc	.+8      	; 0xdf8 <keepMoving+0x54>
     df0:	80 91 06 02 	lds	r24, 0x0206
     df4:	88 32       	cpi	r24, 0x28	; 40
     df6:	08 f3       	brcs	.-62     	; 0xdba <keepMoving+0x16>
     df8:	77 df       	rcall	.-274    	; 0xce8 <lineFix>
     dfa:	89 2b       	or	r24, r25
     dfc:	09 f4       	brne	.+2      	; 0xe00 <keepMoving+0x5c>
     dfe:	d2 df       	rcall	.-92     	; 0xda4 <keepMoving>
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	08 95       	ret

00000e0c <front>:
     e0c:	cb df       	rcall	.-106    	; 0xda4 <keepMoving>
     e0e:	80 91 2f 02 	lds	r24, 0x022F
     e12:	90 91 30 02 	lds	r25, 0x0230
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	90 93 30 02 	sts	0x0230, r25
     e1c:	80 93 2f 02 	sts	0x022F, r24
     e20:	08 95       	ret

00000e22 <traverseToSort>:
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	80 91 0f 02 	lds	r24, 0x020F
     e2c:	90 91 10 02 	lds	r25, 0x0210
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	21 f4       	brne	.+8      	; 0xe3c <traverseToSort+0x1a>
     e34:	10 92 10 02 	sts	0x0210, r1
     e38:	10 92 0f 02 	sts	0x020F, r1
     e3c:	80 91 0d 02 	lds	r24, 0x020D
     e40:	90 91 0e 02 	lds	r25, 0x020E
     e44:	89 2b       	or	r24, r25
     e46:	31 f4       	brne	.+12     	; 0xe54 <traverseToSort+0x32>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 10 02 	sts	0x0210, r25
     e50:	80 93 0f 02 	sts	0x020F, r24
     e54:	ce 01       	movw	r24, r28
     e56:	04 97       	sbiw	r24, 0x04	; 4
     e58:	02 97       	sbiw	r24, 0x02	; 2
     e5a:	88 f5       	brcc	.+98     	; 0xebe <traverseToSort+0x9c>
     e5c:	c4 30       	cpi	r28, 0x04	; 4
     e5e:	d1 05       	cpc	r29, r1
     e60:	39 f4       	brne	.+14     	; 0xe70 <traverseToSort+0x4e>
     e62:	80 91 09 02 	lds	r24, 0x0209
     e66:	90 91 0a 02 	lds	r25, 0x020A
     e6a:	89 2b       	or	r24, r25
     e6c:	51 f0       	breq	.+20     	; 0xe82 <traverseToSort+0x60>
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <traverseToSort+0x64>
     e70:	c5 30       	cpi	r28, 0x05	; 5
     e72:	d1 05       	cpc	r29, r1
     e74:	41 f4       	brne	.+16     	; 0xe86 <traverseToSort+0x64>
     e76:	80 91 09 02 	lds	r24, 0x0209
     e7a:	90 91 0a 02 	lds	r25, 0x020A
     e7e:	02 97       	sbiw	r24, 0x02	; 2
     e80:	11 f4       	brne	.+4      	; 0xe86 <traverseToSort+0x64>
     e82:	00 dd       	rcall	.-1536   	; 0x884 <turnRight>
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <traverseToSort+0x66>
     e86:	3f dd       	rcall	.-1410   	; 0x906 <turnLeft>
     e88:	c1 df       	rcall	.-126    	; 0xe0c <front>
     e8a:	c0 df       	rcall	.-128    	; 0xe0c <front>
     e8c:	24 97       	sbiw	r28, 0x04	; 4
     e8e:	39 f4       	brne	.+14     	; 0xe9e <traverseToSort+0x7c>
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	90 93 01 02 	sts	0x0201, r25
     e98:	80 93 00 02 	sts	0x0200, r24
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <traverseToSort+0x88>
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 01 02 	sts	0x0201, r25
     ea6:	80 93 00 02 	sts	0x0200, r24
     eaa:	80 91 2f 02 	lds	r24, 0x022F
     eae:	90 91 30 02 	lds	r25, 0x0230
     eb2:	02 96       	adiw	r24, 0x02	; 2
     eb4:	90 93 30 02 	sts	0x0230, r25
     eb8:	80 93 2f 02 	sts	0x022F, r24
     ebc:	49 c0       	rjmp	.+146    	; 0xf50 <traverseToSort+0x12e>
     ebe:	80 91 09 02 	lds	r24, 0x0209
     ec2:	90 91 0a 02 	lds	r25, 0x020A
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	39 f4       	brne	.+14     	; 0xeda <traverseToSort+0xb8>
     ecc:	80 91 00 02 	lds	r24, 0x0200
     ed0:	90 91 01 02 	lds	r25, 0x0201
     ed4:	02 97       	sbiw	r24, 0x02	; 2
     ed6:	90 f4       	brcc	.+36     	; 0xefc <traverseToSort+0xda>
     ed8:	0c c0       	rjmp	.+24     	; 0xef2 <traverseToSort+0xd0>
     eda:	03 97       	sbiw	r24, 0x03	; 3
     edc:	b9 f4       	brne	.+46     	; 0xf0c <traverseToSort+0xea>
     ede:	80 91 00 02 	lds	r24, 0x0200
     ee2:	90 91 01 02 	lds	r25, 0x0201
     ee6:	9c 01       	movw	r18, r24
     ee8:	22 50       	subi	r18, 0x02	; 2
     eea:	31 09       	sbc	r19, r1
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	10 f4       	brcc	.+4      	; 0xef6 <traverseToSort+0xd4>
     ef2:	c8 dc       	rcall	.-1648   	; 0x884 <turnRight>
     ef4:	0b c0       	rjmp	.+22     	; 0xf0c <traverseToSort+0xea>
     ef6:	02 97       	sbiw	r24, 0x02	; 2
     ef8:	48 f4       	brcc	.+18     	; 0xf0c <traverseToSort+0xea>
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <traverseToSort+0xe8>
     efc:	80 91 00 02 	lds	r24, 0x0200
     f00:	90 91 01 02 	lds	r25, 0x0201
     f04:	02 97       	sbiw	r24, 0x02	; 2
     f06:	02 97       	sbiw	r24, 0x02	; 2
     f08:	08 f4       	brcc	.+2      	; 0xf0c <traverseToSort+0xea>
     f0a:	fd dc       	rcall	.-1542   	; 0x906 <turnLeft>
     f0c:	22 97       	sbiw	r28, 0x02	; 2
     f0e:	3c f4       	brge	.+14     	; 0xf1e <traverseToSort+0xfc>
     f10:	80 91 09 02 	lds	r24, 0x0209
     f14:	90 91 0a 02 	lds	r25, 0x020A
     f18:	89 2b       	or	r24, r25
     f1a:	39 f0       	breq	.+14     	; 0xf2a <traverseToSort+0x108>
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <traverseToSort+0x10a>
     f1e:	80 91 09 02 	lds	r24, 0x0209
     f22:	90 91 0a 02 	lds	r25, 0x020A
     f26:	02 97       	sbiw	r24, 0x02	; 2
     f28:	09 f4       	brne	.+2      	; 0xf2c <traverseToSort+0x10a>
     f2a:	2e dd       	rcall	.-1444   	; 0x988 <turn>
     f2c:	6f df       	rcall	.-290    	; 0xe0c <front>
     f2e:	80 91 3e 02 	lds	r24, 0x023E
     f32:	90 91 3f 02 	lds	r25, 0x023F
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 78       	andi	r25, 0x80	; 128
     f3a:	99 23       	and	r25, r25
     f3c:	24 f4       	brge	.+8      	; 0xf46 <traverseToSort+0x124>
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	8e 6f       	ori	r24, 0xFE	; 254
     f42:	9f 6f       	ori	r25, 0xFF	; 255
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	04 96       	adiw	r24, 0x04	; 4
     f48:	90 93 01 02 	sts	0x0201, r25
     f4c:	80 93 00 02 	sts	0x0200, r24
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <terminalCheck1>:
void terminalCheck1()
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
     f5a:	88 ec       	ldi	r24, 0xC8	; 200
     f5c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
     f60:	80 93 2a 01 	sts	0x012A, r24
	//????
	//lcd_wr_command(0x01);
	//lcd_print(1,1,888,3);
	
	velocity(turn_v,turn_v);
	forward_mm(10);
     f64:	8a e0       	ldi	r24, 0x0A	; 10
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	2f db       	rcall	.-2466   	; 0x5c8 <forward_mm>
	flag = 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	90 93 10 02 	sts	0x0210, r25
     f72:	80 93 0f 02 	sts	0x020F, r24
	if (ct != ot)
     f76:	80 91 3e 02 	lds	r24, 0x023E
     f7a:	90 91 3f 02 	lds	r25, 0x023F
     f7e:	20 91 00 02 	lds	r18, 0x0200
     f82:	30 91 01 02 	lds	r19, 0x0201
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	89 f1       	breq	.+98     	; 0xfee <terminalCheck1+0x98>
	{
		if (dir == 1 || dir == 3)
     f8c:	20 91 09 02 	lds	r18, 0x0209
     f90:	30 91 0a 02 	lds	r19, 0x020A
     f94:	2d 7f       	andi	r18, 0xFD	; 253
     f96:	21 30       	cpi	r18, 0x01	; 1
     f98:	31 05       	cpc	r19, r1
     f9a:	41 f4       	brne	.+16     	; 0xfac <terminalCheck1+0x56>
		{
			if (ct == 3 || ct == 0)
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <terminalCheck1+0x50>
     fa2:	89 2b       	or	r24, r25
     fa4:	11 f4       	brne	.+4      	; 0xfaa <terminalCheck1+0x54>
				turnRight();
     fa6:	6e dc       	rcall	.-1828   	; 0x884 <turnRight>
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <terminalCheck1+0x56>
			else turnLeft();
     faa:	ad dc       	rcall	.-1702   	; 0x906 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     fac:	80 91 3e 02 	lds	r24, 0x023E
     fb0:	90 91 3f 02 	lds	r25, 0x023F
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	91 05       	cpc	r25, r1
     fb8:	38 f4       	brcc	.+14     	; 0xfc8 <terminalCheck1+0x72>
     fba:	20 91 09 02 	lds	r18, 0x0209
     fbe:	30 91 0a 02 	lds	r19, 0x020A
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	49 f0       	breq	.+18     	; 0xfda <terminalCheck1+0x84>
     fc8:	02 97       	sbiw	r24, 0x02	; 2
     fca:	02 97       	sbiw	r24, 0x02	; 2
     fcc:	38 f4       	brcc	.+14     	; 0xfdc <terminalCheck1+0x86>
     fce:	80 91 09 02 	lds	r24, 0x0209
     fd2:	90 91 0a 02 	lds	r25, 0x020A
     fd6:	89 2b       	or	r24, r25
     fd8:	09 f4       	brne	.+2      	; 0xfdc <terminalCheck1+0x86>
			turn();
     fda:	d6 dc       	rcall	.-1620   	; 0x988 <turn>
		front();
     fdc:	17 df       	rcall	.-466    	; 0xe0c <front>
		ot = ct;
     fde:	80 91 3e 02 	lds	r24, 0x023E
     fe2:	90 91 3f 02 	lds	r25, 0x023F
     fe6:	90 93 01 02 	sts	0x0201, r25
     fea:	80 93 00 02 	sts	0x0200, r24
	}
	//????
	right_degrees(30);
     fee:	8e e1       	ldi	r24, 0x1E	; 30
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	05 db       	rcall	.-2550   	; 0x5fe <right_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
     ff4:	88 ec       	ldi	r24, 0xC8	; 200
     ff6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
     ffa:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
     ffe:	80 91 09 02 	lds	r24, 0x0209
    1002:	90 91 0a 02 	lds	r25, 0x020A
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	83 70       	andi	r24, 0x03	; 3
    100a:	90 78       	andi	r25, 0x80	; 128
    100c:	99 23       	and	r25, r25
    100e:	24 f4       	brge	.+8      	; 0x1018 <terminalCheck1+0xc2>
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	8c 6f       	ori	r24, 0xFC	; 252
    1014:	9f 6f       	ori	r25, 0xFF	; 255
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	90 93 0a 02 	sts	0x020A, r25
    101c:	80 93 09 02 	sts	0x0209, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(2)<50)	//earlier 3
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <terminalCheck1+0xce>
		right();
    1022:	bd d8       	rcall	.-3718   	; 0x19e <right>
	right_degrees(30);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(2)<50)	//earlier 3
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	20 d9       	rcall	.-3520   	; 0x268 <ADC_Conversion>
    1028:	82 33       	cpi	r24, 0x32	; 50
    102a:	d8 f3       	brcs	.-10     	; 0x1022 <terminalCheck1+0xcc>
		right();
	//_delay_ms(100);
	stop();
    102c:	c7 d8       	rcall	.-3698   	; 0x1bc <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    102e:	c0 91 3e 02 	lds	r28, 0x023E
    1032:	d0 91 3f 02 	lds	r29, 0x023F
    1036:	0c db       	rcall	.-2536   	; 0x650 <scan>
    1038:	cc 0f       	add	r28, r28
    103a:	dd 1f       	adc	r29, r29
    103c:	cc 0f       	add	r28, r28
    103e:	dd 1f       	adc	r29, r29
    1040:	c0 5c       	subi	r28, 0xC0	; 192
    1042:	dd 4f       	sbci	r29, 0xFD	; 253
    1044:	99 83       	std	Y+1, r25	; 0x01
    1046:	88 83       	st	Y, r24
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}
*/	
	if(ct==0)
    1048:	80 91 3e 02 	lds	r24, 0x023E
    104c:	90 91 3f 02 	lds	r25, 0x023F
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	39 f4       	brne	.+14     	; 0x1062 <terminalCheck1+0x10c>
		term[ct][0]=1;
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	30 93 41 02 	sts	0x0241, r19
    105c:	20 93 40 02 	sts	0x0240, r18
    1060:	14 c0       	rjmp	.+40     	; 0x108a <terminalCheck1+0x134>
	if(ct==1)
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	39 f4       	brne	.+14     	; 0x1076 <terminalCheck1+0x120>
		term[ct][0]=2;
    1068:	22 e0       	ldi	r18, 0x02	; 2
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	30 93 45 02 	sts	0x0245, r19
    1070:	20 93 44 02 	sts	0x0244, r18
    1074:	13 c0       	rjmp	.+38     	; 0x109c <terminalCheck1+0x146>
	if(ct==3)
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	39 f4       	brne	.+14     	; 0x108a <terminalCheck1+0x134>
		term[ct][0]=-1;
    107c:	2f ef       	ldi	r18, 0xFF	; 255
    107e:	3f ef       	ldi	r19, 0xFF	; 255
    1080:	30 93 4d 02 	sts	0x024D, r19
    1084:	20 93 4c 02 	sts	0x024C, r18
    1088:	09 c0       	rjmp	.+18     	; 0x109c <terminalCheck1+0x146>
	if(ct==2)
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	91 05       	cpc	r25, r1
    108e:	31 f4       	brne	.+12     	; 0x109c <terminalCheck1+0x146>
		term[ct][0]=2;
    1090:	22 e0       	ldi	r18, 0x02	; 2
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	30 93 49 02 	sts	0x0249, r19
    1098:	20 93 48 02 	sts	0x0248, r18
	if(term[ct][0]==color[ct])
    109c:	dc 01       	movw	r26, r24
    109e:	aa 0f       	add	r26, r26
    10a0:	bb 1f       	adc	r27, r27
    10a2:	aa 0f       	add	r26, r26
    10a4:	bb 1f       	adc	r27, r27
    10a6:	a0 5c       	subi	r26, 0xC0	; 192
    10a8:	bd 4f       	sbci	r27, 0xFD	; 253
    10aa:	fc 01       	movw	r30, r24
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	ee 5a       	subi	r30, 0xAE	; 174
    10b2:	fd 4f       	sbci	r31, 0xFD	; 253
    10b4:	2d 91       	ld	r18, X+
    10b6:	3c 91       	ld	r19, X
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	59 f4       	brne	.+22     	; 0x10d8 <terminalCheck1+0x182>
 	{
 		buzzer_on();
    10c2:	c7 d8       	rcall	.-3698   	; 0x252 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	2f ef       	ldi	r18, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	86 e1       	ldi	r24, 0x16	; 22
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	40 40       	sbci	r20, 0x00	; 0
    10ce:	80 40       	sbci	r24, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <terminalCheck1+0x174>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <terminalCheck1+0x17e>
    10d4:	00 00       	nop
 		_delay_ms(500);
 		buzzer_off();
    10d6:	c1 d8       	rcall	.-3710   	; 0x25a <buzzer_off>
 	}
	 if (term[ct][0] == -1 || term[ct][0] == color[ct])
    10d8:	20 91 3e 02 	lds	r18, 0x023E
    10dc:	30 91 3f 02 	lds	r19, 0x023F
    10e0:	f9 01       	movw	r30, r18
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	e0 5c       	subi	r30, 0xC0	; 192
    10ec:	fd 4f       	sbci	r31, 0xFD	; 253
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	4f ef       	ldi	r20, 0xFF	; 255
    10f6:	94 07       	cpc	r25, r20
    10f8:	51 f0       	breq	.+20     	; 0x110e <terminalCheck1+0x1b8>
    10fa:	f9 01       	movw	r30, r18
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	ee 5a       	subi	r30, 0xAE	; 174
    1102:	fd 4f       	sbci	r31, 0xFD	; 253
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	82 17       	cp	r24, r18
    110a:	93 07       	cpc	r25, r19
    110c:	49 f4       	brne	.+18     	; 0x1120 <terminalCheck1+0x1ca>
	 total--;
    110e:	80 91 02 02 	lds	r24, 0x0202
    1112:	90 91 03 02 	lds	r25, 0x0203
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	90 93 03 02 	sts	0x0203, r25
    111c:	80 93 02 02 	sts	0x0202, r24
	//_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <terminalCheck2>:
void terminalCheck2()
{
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    112a:	88 ec       	ldi	r24, 0xC8	; 200
    112c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    1130:	80 93 2a 01 	sts	0x012A, r24
			back_mm(30);
		else forward_mm(30);
		flag = 1;
	}*/

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1134:	80 91 3e 02 	lds	r24, 0x023E
    1138:	90 91 3f 02 	lds	r25, 0x023F
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	30 f4       	brcc	.+12     	; 0x114e <terminalCheck2+0x28>
    1142:	20 91 09 02 	lds	r18, 0x0209
    1146:	30 91 0a 02 	lds	r19, 0x020A
    114a:	23 2b       	or	r18, r19
    114c:	69 f0       	breq	.+26     	; 0x1168 <terminalCheck2+0x42>
    114e:	9c 01       	movw	r18, r24
    1150:	22 50       	subi	r18, 0x02	; 2
    1152:	31 09       	sbc	r19, r1
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	80 f5       	brcc	.+96     	; 0x11ba <terminalCheck2+0x94>
    115a:	40 91 09 02 	lds	r20, 0x0209
    115e:	50 91 0a 02 	lds	r21, 0x020A
    1162:	42 30       	cpi	r20, 0x02	; 2
    1164:	51 05       	cpc	r21, r1
    1166:	49 f5       	brne	.+82     	; 0x11ba <terminalCheck2+0x94>
	{
		left_degrees(30);
    1168:	8e e1       	ldi	r24, 0x1E	; 30
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	3f da       	rcall	.-2946   	; 0x5ec <left_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    116e:	88 ec       	ldi	r24, 0xC8	; 200
    1170:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    1174:	80 93 2a 01 	sts	0x012A, r24
    1178:	01 c0       	rjmp	.+2      	; 0x117c <terminalCheck2+0x56>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
		left();
    117a:	0e d8       	rcall	.-4068   	; 0x198 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	74 d8       	rcall	.-3864   	; 0x268 <ADC_Conversion>
    1180:	82 33       	cpi	r24, 0x32	; 50
    1182:	d8 f3       	brcs	.-10     	; 0x117a <terminalCheck2+0x54>
    1184:	2c ec       	ldi	r18, 0xCC	; 204
    1186:	4c e4       	ldi	r20, 0x4C	; 76
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	40 40       	sbci	r20, 0x00	; 0
    118e:	80 40       	sbci	r24, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <terminalCheck2+0x64>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <terminalCheck2+0x6e>
		left();
		_delay_ms(140);
		stop();
    1194:	13 d8       	rcall	.-4058   	; 0x1bc <stop>
		dir=(dir+3)%4;
    1196:	80 91 09 02 	lds	r24, 0x0209
    119a:	90 91 0a 02 	lds	r25, 0x020A
    119e:	03 96       	adiw	r24, 0x03	; 3
    11a0:	83 70       	andi	r24, 0x03	; 3
    11a2:	90 78       	andi	r25, 0x80	; 128
    11a4:	99 23       	and	r25, r25
    11a6:	24 f4       	brge	.+8      	; 0x11b0 <terminalCheck2+0x8a>
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	8c 6f       	ori	r24, 0xFC	; 252
    11ac:	9f 6f       	ori	r25, 0xFF	; 255
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	90 93 0a 02 	sts	0x020A, r25
    11b4:	80 93 09 02 	sts	0x0209, r24
    11b8:	56 c0       	rjmp	.+172    	; 0x1266 <terminalCheck2+0x140>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    11ba:	02 97       	sbiw	r24, 0x02	; 2
    11bc:	30 f4       	brcc	.+12     	; 0x11ca <terminalCheck2+0xa4>
    11be:	80 91 09 02 	lds	r24, 0x0209
    11c2:	90 91 0a 02 	lds	r25, 0x020A
    11c6:	02 97       	sbiw	r24, 0x02	; 2
    11c8:	49 f0       	breq	.+18     	; 0x11dc <terminalCheck2+0xb6>
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	48 f5       	brcc	.+82     	; 0x1222 <terminalCheck2+0xfc>
    11d0:	80 91 09 02 	lds	r24, 0x0209
    11d4:	90 91 0a 02 	lds	r25, 0x020A
    11d8:	89 2b       	or	r24, r25
    11da:	19 f5       	brne	.+70     	; 0x1222 <terminalCheck2+0xfc>
		{
			right_degrees(30);
    11dc:	8e e1       	ldi	r24, 0x1E	; 30
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e da       	rcall	.-3044   	; 0x5fe <right_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    11e2:	88 ec       	ldi	r24, 0xC8	; 200
    11e4:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    11e8:	80 93 2a 01 	sts	0x012A, r24
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <terminalCheck2+0xcc>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(2)<50)
				right();
    11ee:	0e 94 cf 00 	call	0x19e	; 0x19e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(2)<50)
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	39 d8       	rcall	.-3982   	; 0x268 <ADC_Conversion>
    11f6:	82 33       	cpi	r24, 0x32	; 50
    11f8:	d0 f3       	brcs	.-12     	; 0x11ee <terminalCheck2+0xc8>
				right();
			//_delay_ms(100);
			stop();	
    11fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
			dir=(dir+1)%4;
    11fe:	80 91 09 02 	lds	r24, 0x0209
    1202:	90 91 0a 02 	lds	r25, 0x020A
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	83 70       	andi	r24, 0x03	; 3
    120a:	90 78       	andi	r25, 0x80	; 128
    120c:	99 23       	and	r25, r25
    120e:	24 f4       	brge	.+8      	; 0x1218 <terminalCheck2+0xf2>
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	8c 6f       	ori	r24, 0xFC	; 252
    1214:	9f 6f       	ori	r25, 0xFF	; 255
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	90 93 0a 02 	sts	0x020A, r25
    121c:	80 93 09 02 	sts	0x0209, r24
    1220:	22 c0       	rjmp	.+68     	; 0x1266 <terminalCheck2+0x140>
		}
	else {
		left_degrees(150);
    1222:	86 e9       	ldi	r24, 0x96	; 150
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	e2 d9       	rcall	.-3132   	; 0x5ec <left_degrees>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    1228:	88 ec       	ldi	r24, 0xC8	; 200
    122a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    122e:	80 93 2a 01 	sts	0x012A, r24
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <terminalCheck2+0x112>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
			left();
    1234:	0e 94 cc 00 	call	0x198	; 0x198 <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(3)<50)
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	16 d8       	rcall	.-4052   	; 0x268 <ADC_Conversion>
    123c:	82 33       	cpi	r24, 0x32	; 50
    123e:	d0 f3       	brcs	.-12     	; 0x1234 <terminalCheck2+0x10e>
			left();
		//_delay_ms(100);
		stop();
    1240:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
		dir=(dir+2)%4;
    1244:	80 91 09 02 	lds	r24, 0x0209
    1248:	90 91 0a 02 	lds	r25, 0x020A
    124c:	02 96       	adiw	r24, 0x02	; 2
    124e:	83 70       	andi	r24, 0x03	; 3
    1250:	90 78       	andi	r25, 0x80	; 128
    1252:	99 23       	and	r25, r25
    1254:	24 f4       	brge	.+8      	; 0x125e <terminalCheck2+0x138>
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	8c 6f       	ori	r24, 0xFC	; 252
    125a:	9f 6f       	ori	r25, 0xFF	; 255
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	90 93 0a 02 	sts	0x020A, r25
    1262:	80 93 09 02 	sts	0x0209, r24
	//_delay_ms(400);
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
// 	left();
// 	_delay_ms(100);
	stop();
    1266:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	term[ct][1] = scan();
    126a:	c0 91 3e 02 	lds	r28, 0x023E
    126e:	d0 91 3f 02 	lds	r29, 0x023F
    1272:	ee d9       	rcall	.-3108   	; 0x650 <scan>
    1274:	cc 0f       	add	r28, r28
    1276:	dd 1f       	adc	r29, r29
    1278:	cc 0f       	add	r28, r28
    127a:	dd 1f       	adc	r29, r29
    127c:	c0 5c       	subi	r28, 0xC0	; 192
    127e:	dd 4f       	sbci	r29, 0xFD	; 253
    1280:	9b 83       	std	Y+3, r25	; 0x03
    1282:	8a 83       	std	Y+2, r24	; 0x02
	if(ct==0)
    1284:	80 91 3e 02 	lds	r24, 0x023E
    1288:	90 91 3f 02 	lds	r25, 0x023F
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	39 f4       	brne	.+14     	; 0x129e <terminalCheck2+0x178>
		term[ct][1]=1;
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	30 93 43 02 	sts	0x0243, r19
    1298:	20 93 42 02 	sts	0x0242, r18
    129c:	12 c0       	rjmp	.+36     	; 0x12c2 <terminalCheck2+0x19c>
	if(ct==1)
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	29 f4       	brne	.+10     	; 0x12ae <terminalCheck2+0x188>
		term[ct][1]=0;
    12a4:	10 92 47 02 	sts	0x0247, r1
    12a8:	10 92 46 02 	sts	0x0246, r1
    12ac:	11 c0       	rjmp	.+34     	; 0x12d0 <terminalCheck2+0x1aa>
	if(ct==3)
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	39 f4       	brne	.+14     	; 0x12c2 <terminalCheck2+0x19c>
		term[ct][1]=-1;
    12b4:	2f ef       	ldi	r18, 0xFF	; 255
    12b6:	3f ef       	ldi	r19, 0xFF	; 255
    12b8:	30 93 4f 02 	sts	0x024F, r19
    12bc:	20 93 4e 02 	sts	0x024E, r18
    12c0:	07 c0       	rjmp	.+14     	; 0x12d0 <terminalCheck2+0x1aa>
	if(ct==2)
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	91 05       	cpc	r25, r1
    12c6:	21 f4       	brne	.+8      	; 0x12d0 <terminalCheck2+0x1aa>
		term[ct][1]=0;
    12c8:	10 92 4b 02 	sts	0x024B, r1
    12cc:	10 92 4a 02 	sts	0x024A, r1
		buzzer_on();
		_delay_ms(100);
		buzzer_off();
		_delay_ms(500);
	}*/
 	if(term[ct][1]==color[ct])
    12d0:	dc 01       	movw	r26, r24
    12d2:	aa 0f       	add	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	aa 0f       	add	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	a0 5c       	subi	r26, 0xC0	; 192
    12dc:	bd 4f       	sbci	r27, 0xFD	; 253
    12de:	fc 01       	movw	r30, r24
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	ee 5a       	subi	r30, 0xAE	; 174
    12e6:	fd 4f       	sbci	r31, 0xFD	; 253
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	2d 91       	ld	r18, X+
    12ec:	3c 91       	ld	r19, X
    12ee:	13 97       	sbiw	r26, 0x03	; 3
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	69 f4       	brne	.+26     	; 0x1314 <terminalCheck2+0x1ee>
 	{
		buzzer_on();
    12fa:	0e 94 29 01 	call	0x252	; 0x252 <buzzer_on>
    12fe:	9f ef       	ldi	r25, 0xFF	; 255
    1300:	2f e7       	ldi	r18, 0x7F	; 127
    1302:	46 e1       	ldi	r20, 0x16	; 22
    1304:	91 50       	subi	r25, 0x01	; 1
    1306:	20 40       	sbci	r18, 0x00	; 0
    1308:	40 40       	sbci	r20, 0x00	; 0
    130a:	e1 f7       	brne	.-8      	; 0x1304 <terminalCheck2+0x1de>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <terminalCheck2+0x1e8>
    130e:	00 00       	nop
		_delay_ms(500);
 		buzzer_off();
    1310:	0e 94 2d 01 	call	0x25a	; 0x25a <buzzer_off>
	}
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1314:	80 91 3e 02 	lds	r24, 0x023E
    1318:	90 91 3f 02 	lds	r25, 0x023F
    131c:	fc 01       	movw	r30, r24
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	e0 5c       	subi	r30, 0xC0	; 192
    1328:	fd 4f       	sbci	r31, 0xFD	; 253
    132a:	22 81       	ldd	r18, Z+2	; 0x02
    132c:	33 81       	ldd	r19, Z+3	; 0x03
    132e:	2f 3f       	cpi	r18, 0xFF	; 255
    1330:	4f ef       	ldi	r20, 0xFF	; 255
    1332:	34 07       	cpc	r19, r20
    1334:	51 f0       	breq	.+20     	; 0x134a <terminalCheck2+0x224>
    1336:	fc 01       	movw	r30, r24
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	ee 5a       	subi	r30, 0xAE	; 174
    133e:	fd 4f       	sbci	r31, 0xFD	; 253
    1340:	40 81       	ld	r20, Z
    1342:	51 81       	ldd	r21, Z+1	; 0x01
    1344:	24 17       	cp	r18, r20
    1346:	35 07       	cpc	r19, r21
    1348:	51 f4       	brne	.+20     	; 0x135e <terminalCheck2+0x238>
		total--;
    134a:	20 91 02 02 	lds	r18, 0x0202
    134e:	30 91 03 02 	lds	r19, 0x0203
    1352:	21 50       	subi	r18, 0x01	; 1
    1354:	31 09       	sbc	r19, r1
    1356:	30 93 03 02 	sts	0x0203, r19
    135a:	20 93 02 02 	sts	0x0202, r18
	//_delay_ms(1000);
	
	visited[ct] = 1;
    135e:	fc 01       	movw	r30, r24
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	e1 5e       	subi	r30, 0xE1	; 225
    1366:	fd 4f       	sbci	r31, 0xFD	; 253
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
	visitedCount++;
    1370:	80 91 0b 02 	lds	r24, 0x020B
    1374:	90 91 0c 02 	lds	r25, 0x020C
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	90 93 0c 02 	sts	0x020C, r25
    137e:	80 93 0b 02 	sts	0x020B, r24
// 		
// 	left();
// 	_delay_ms(1000);
// 	stop();
// 	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <pick>:

void pick(int side)
{	
    1388:	cf 93       	push	r28
    138a:	c8 2f       	mov	r28, r24
	open(side);
    138c:	24 da       	rcall	.-3000   	; 0x7d6 <open>
	lower(side);
    138e:	8c 2f       	mov	r24, r28
    1390:	f2 d9       	rcall	.-3100   	; 0x776 <lower>
	//_delay_ms(1000);
	close(side);
    1392:	8c 2f       	mov	r24, r28
    1394:	54 da       	rcall	.-2904   	; 0x83e <close>
	//_delay_ms(3000);
	elevate();//mid
    1396:	06 da       	rcall	.-3060   	; 0x7a4 <elevate>
	///_delay_ms(1000);
	armCount--;
    1398:	80 91 04 02 	lds	r24, 0x0204
    139c:	90 91 05 02 	lds	r25, 0x0205
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	90 93 05 02 	sts	0x0205, r25
    13a6:	80 93 04 02 	sts	0x0204, r24
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	9c e2       	ldi	r25, 0x2C	; 44
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	80 40       	sbci	r24, 0x00	; 0
    13b4:	90 40       	sbci	r25, 0x00	; 0
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <pick+0x28>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <pick+0x32>
    13ba:	00 00       	nop
// 	if(armCount==0)
// 	{
// 		servo_1_free();
// 		servo_3_free();
// 	}
}
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <position>:

void position(int armNo, int side)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	8c 01       	movw	r16, r24
    13ca:	eb 01       	movw	r28, r22
	if (ct == ot)
    13cc:	20 91 3e 02 	lds	r18, 0x023E
    13d0:	30 91 3f 02 	lds	r19, 0x023F
    13d4:	40 91 00 02 	lds	r20, 0x0200
    13d8:	50 91 01 02 	lds	r21, 0x0201
    13dc:	24 17       	cp	r18, r20
    13de:	35 07       	cpc	r19, r21
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <position+0x24>
    13e2:	9e c0       	rjmp	.+316    	; 0x1520 <position+0x160>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    13e4:	c9 01       	movw	r24, r18
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	30 f4       	brcc	.+12     	; 0x13f8 <position+0x38>
    13ec:	40 91 09 02 	lds	r20, 0x0209
    13f0:	50 91 0a 02 	lds	r21, 0x020A
    13f4:	45 2b       	or	r20, r21
    13f6:	61 f0       	breq	.+24     	; 0x1410 <position+0x50>
    13f8:	22 50       	subi	r18, 0x02	; 2
    13fa:	31 09       	sbc	r19, r1
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	68 f4       	brcc	.+26     	; 0x141c <position+0x5c>
    1402:	40 91 09 02 	lds	r20, 0x0209
    1406:	50 91 0a 02 	lds	r21, 0x020A
    140a:	42 30       	cpi	r20, 0x02	; 2
    140c:	51 05       	cpc	r21, r1
    140e:	31 f4       	brne	.+12     	; 0x141c <position+0x5c>
		{
			if (armNo != side)
    1410:	0c 17       	cp	r16, r28
    1412:	1d 07       	cpc	r17, r29
    1414:	09 f4       	brne	.+2      	; 0x1418 <position+0x58>
    1416:	4c c0       	rjmp	.+152    	; 0x14b0 <position+0xf0>
				turn();
    1418:	b7 da       	rcall	.-2706   	; 0x988 <turn>
    141a:	4a c0       	rjmp	.+148    	; 0x14b0 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	38 f4       	brcc	.+14     	; 0x1430 <position+0x70>
    1422:	40 91 09 02 	lds	r20, 0x0209
    1426:	50 91 0a 02 	lds	r21, 0x020A
    142a:	42 30       	cpi	r20, 0x02	; 2
    142c:	51 05       	cpc	r21, r1
    142e:	49 f0       	breq	.+18     	; 0x1442 <position+0x82>
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	58 f4       	brcc	.+22     	; 0x144c <position+0x8c>
    1436:	40 91 09 02 	lds	r20, 0x0209
    143a:	50 91 0a 02 	lds	r21, 0x020A
    143e:	45 2b       	or	r20, r21
    1440:	29 f4       	brne	.+10     	; 0x144c <position+0x8c>
		{
			if (armNo == side)
    1442:	0c 17       	cp	r16, r28
    1444:	1d 07       	cpc	r17, r29
    1446:	a1 f5       	brne	.+104    	; 0x14b0 <position+0xf0>
				turn();
    1448:	9f da       	rcall	.-2754   	; 0x988 <turn>
    144a:	32 c0       	rjmp	.+100    	; 0x14b0 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	38 f4       	brcc	.+14     	; 0x1460 <position+0xa0>
    1452:	40 91 09 02 	lds	r20, 0x0209
    1456:	50 91 0a 02 	lds	r21, 0x020A
    145a:	41 30       	cpi	r20, 0x01	; 1
    145c:	51 05       	cpc	r21, r1
    145e:	51 f0       	breq	.+20     	; 0x1474 <position+0xb4>
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	70 f4       	brcc	.+28     	; 0x1482 <position+0xc2>
    1466:	40 91 09 02 	lds	r20, 0x0209
    146a:	50 91 0a 02 	lds	r21, 0x020A
    146e:	43 30       	cpi	r20, 0x03	; 3
    1470:	51 05       	cpc	r21, r1
    1472:	39 f4       	brne	.+14     	; 0x1482 <position+0xc2>
		{
			if (armNo != side)
    1474:	0c 17       	cp	r16, r28
    1476:	1d 07       	cpc	r17, r29
    1478:	11 f0       	breq	.+4      	; 0x147e <position+0xbe>
			turnRight();
    147a:	04 da       	rcall	.-3064   	; 0x884 <turnRight>
    147c:	19 c0       	rjmp	.+50     	; 0x14b0 <position+0xf0>
			else turnLeft();
    147e:	43 da       	rcall	.-2938   	; 0x906 <turnLeft>
    1480:	17 c0       	rjmp	.+46     	; 0x14b0 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1482:	02 97       	sbiw	r24, 0x02	; 2
    1484:	30 f4       	brcc	.+12     	; 0x1492 <position+0xd2>
    1486:	80 91 09 02 	lds	r24, 0x0209
    148a:	90 91 0a 02 	lds	r25, 0x020A
    148e:	03 97       	sbiw	r24, 0x03	; 3
    1490:	49 f0       	breq	.+18     	; 0x14a4 <position+0xe4>
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	60 f4       	brcc	.+24     	; 0x14b0 <position+0xf0>
    1498:	80 91 09 02 	lds	r24, 0x0209
    149c:	90 91 0a 02 	lds	r25, 0x020A
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	31 f4       	brne	.+12     	; 0x14b0 <position+0xf0>
					if (armNo == side)
    14a4:	0c 17       	cp	r16, r28
    14a6:	1d 07       	cpc	r17, r29
    14a8:	11 f4       	brne	.+4      	; 0x14ae <position+0xee>
						turnRight();
    14aa:	ec d9       	rcall	.-3112   	; 0x884 <turnRight>
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <position+0xf0>
					else turnLeft();
    14ae:	2b da       	rcall	.-2986   	; 0x906 <turnLeft>
		if(flag==1 && (dir==0 || dir==2))
    14b0:	80 91 0f 02 	lds	r24, 0x020F
    14b4:	90 91 10 02 	lds	r25, 0x0210
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	a9 f4       	brne	.+42     	; 0x14e6 <position+0x126>
    14bc:	80 91 09 02 	lds	r24, 0x0209
    14c0:	90 91 0a 02 	lds	r25, 0x020A
    14c4:	8d 7f       	andi	r24, 0xFD	; 253
    14c6:	89 2b       	or	r24, r25
    14c8:	71 f4       	brne	.+28     	; 0x14e6 <position+0x126>
		{
			back_mm(65);
    14ca:	81 e4       	ldi	r24, 0x41	; 65
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	85 d8       	rcall	.-3830   	; 0x5da <back_mm>
			flag=0;
    14d0:	10 92 10 02 	sts	0x0210, r1
    14d4:	10 92 0f 02 	sts	0x020F, r1
			flag1=1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 0e 02 	sts	0x020E, r25
    14e0:	80 93 0d 02 	sts	0x020D, r24
    14e4:	8d c0       	rjmp	.+282    	; 0x1600 <position+0x240>
		}	
		if(flag1==0 && (dir==0 || dir==2))
    14e6:	80 91 0d 02 	lds	r24, 0x020D
    14ea:	90 91 0e 02 	lds	r25, 0x020E
    14ee:	89 2b       	or	r24, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <position+0x134>
    14f2:	86 c0       	rjmp	.+268    	; 0x1600 <position+0x240>
    14f4:	80 91 09 02 	lds	r24, 0x0209
    14f8:	90 91 0a 02 	lds	r25, 0x020A
    14fc:	8d 7f       	andi	r24, 0xFD	; 253
    14fe:	89 2b       	or	r24, r25
    1500:	09 f0       	breq	.+2      	; 0x1504 <position+0x144>
    1502:	7e c0       	rjmp	.+252    	; 0x1600 <position+0x240>
		{
			back_mm(90);
    1504:	8a e5       	ldi	r24, 0x5A	; 90
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	68 d8       	rcall	.-3888   	; 0x5da <back_mm>
			flag=0;
    150a:	10 92 10 02 	sts	0x0210, r1
    150e:	10 92 0f 02 	sts	0x020F, r1
			flag1=1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	90 93 0e 02 	sts	0x020E, r25
    151a:	80 93 0d 02 	sts	0x020D, r24
    151e:	70 c0       	rjmp	.+224    	; 0x1600 <position+0x240>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    1520:	80 91 09 02 	lds	r24, 0x0209
    1524:	90 91 0a 02 	lds	r25, 0x020A
    1528:	8d 7f       	andi	r24, 0xFD	; 253
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	49 f4       	brne	.+18     	; 0x1540 <position+0x180>
			if (ct == 0 || ct == 3)
    152e:	21 15       	cp	r18, r1
    1530:	31 05       	cpc	r19, r1
    1532:	19 f0       	breq	.+6      	; 0x153a <position+0x17a>
    1534:	23 30       	cpi	r18, 0x03	; 3
    1536:	31 05       	cpc	r19, r1
    1538:	11 f4       	brne	.+4      	; 0x153e <position+0x17e>
				turnRight();
    153a:	a4 d9       	rcall	.-3256   	; 0x884 <turnRight>
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <position+0x180>
			else turnLeft();
    153e:	e3 d9       	rcall	.-3130   	; 0x906 <turnLeft>
		if (dir == 0 || dir == 2)
    1540:	80 91 09 02 	lds	r24, 0x0209
    1544:	90 91 0a 02 	lds	r25, 0x020A
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	21 f0       	breq	.+8      	; 0x1554 <position+0x194>
    154c:	02 97       	sbiw	r24, 0x02	; 2
    154e:	09 f0       	breq	.+2      	; 0x1552 <position+0x192>
    1550:	33 c0       	rjmp	.+102    	; 0x15b8 <position+0x1f8>
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <position+0x1a2>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1554:	80 91 3e 02 	lds	r24, 0x023E
    1558:	90 91 3f 02 	lds	r25, 0x023F
    155c:	02 97       	sbiw	r24, 0x02	; 2
    155e:	c8 f4       	brcc	.+50     	; 0x1592 <position+0x1d2>
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <position+0x1b0>
    1562:	80 91 3e 02 	lds	r24, 0x023E
    1566:	90 91 3f 02 	lds	r25, 0x023F
    156a:	02 97       	sbiw	r24, 0x02	; 2
    156c:	02 97       	sbiw	r24, 0x02	; 2
    156e:	88 f4       	brcc	.+34     	; 0x1592 <position+0x1d2>
			{
				if (ot != 4 && ot != 5)
    1570:	80 91 00 02 	lds	r24, 0x0200
    1574:	90 91 01 02 	lds	r25, 0x0201
    1578:	04 97       	sbiw	r24, 0x04	; 4
    157a:	02 97       	sbiw	r24, 0x02	; 2
    157c:	10 f0       	brcs	.+4      	; 0x1582 <position+0x1c2>
				{
					turnLeft();
    157e:	c3 d9       	rcall	.-3194   	; 0x906 <turnLeft>
					front();
    1580:	45 dc       	rcall	.-1910   	; 0xe0c <front>
				}
				if (armNo == side)
    1582:	0c 17       	cp	r16, r28
    1584:	1d 07       	cpc	r17, r29
    1586:	11 f4       	brne	.+4      	; 0x158c <position+0x1cc>
				{
					front();
    1588:	41 dc       	rcall	.-1918   	; 0xe0c <front>
    158a:	32 c0       	rjmp	.+100    	; 0x15f0 <position+0x230>
				}
				else
				{
					front();
    158c:	3f dc       	rcall	.-1922   	; 0xe0c <front>
					turn();
    158e:	fc d9       	rcall	.-3080   	; 0x988 <turn>
    1590:	2f c0       	rjmp	.+94     	; 0x15f0 <position+0x230>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1592:	80 91 00 02 	lds	r24, 0x0200
    1596:	90 91 01 02 	lds	r25, 0x0201
    159a:	04 97       	sbiw	r24, 0x04	; 4
    159c:	02 97       	sbiw	r24, 0x02	; 2
    159e:	10 f0       	brcs	.+4      	; 0x15a4 <position+0x1e4>
				{
					turnLeft();
    15a0:	b2 d9       	rcall	.-3228   	; 0x906 <turnLeft>
					front();
    15a2:	34 dc       	rcall	.-1944   	; 0xe0c <front>
				}
				if (armNo == side)
    15a4:	0c 17       	cp	r16, r28
    15a6:	1d 07       	cpc	r17, r29
    15a8:	19 f4       	brne	.+6      	; 0x15b0 <position+0x1f0>
				{
					turn();
    15aa:	ee d9       	rcall	.-3108   	; 0x988 <turn>
					front();
    15ac:	2f dc       	rcall	.-1954   	; 0xe0c <front>
    15ae:	20 c0       	rjmp	.+64     	; 0x15f0 <position+0x230>
				}
				else
				{
					turn();
    15b0:	eb d9       	rcall	.-3114   	; 0x988 <turn>
					front();
    15b2:	2c dc       	rcall	.-1960   	; 0xe0c <front>
					turn();
    15b4:	e9 d9       	rcall	.-3118   	; 0x988 <turn>
    15b6:	1c c0       	rjmp	.+56     	; 0x15f0 <position+0x230>
				}
			}
		}
		else
		{
			if (armNo == side)
    15b8:	0c 17       	cp	r16, r28
    15ba:	1d 07       	cpc	r17, r29
    15bc:	69 f4       	brne	.+26     	; 0x15d8 <position+0x218>
			{
				if (ct == 0 || ct == 3)
    15be:	80 91 3e 02 	lds	r24, 0x023E
    15c2:	90 91 3f 02 	lds	r25, 0x023F
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	11 f0       	breq	.+4      	; 0x15ce <position+0x20e>
    15ca:	03 97       	sbiw	r24, 0x03	; 3
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <position+0x212>
				turnRight();
    15ce:	5a d9       	rcall	.-3404   	; 0x884 <turnRight>
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <position+0x214>
				else turnLeft();
    15d2:	99 d9       	rcall	.-3278   	; 0x906 <turnLeft>
				front();
    15d4:	1b dc       	rcall	.-1994   	; 0xe0c <front>
    15d6:	0c c0       	rjmp	.+24     	; 0x15f0 <position+0x230>
			}
			else
			{
				if (ct == 0 || ct == 3)
    15d8:	80 91 3e 02 	lds	r24, 0x023E
    15dc:	90 91 3f 02 	lds	r25, 0x023F
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <position+0x228>
    15e4:	03 97       	sbiw	r24, 0x03	; 3
    15e6:	11 f4       	brne	.+4      	; 0x15ec <position+0x22c>
				turnRight();
    15e8:	4d d9       	rcall	.-3430   	; 0x884 <turnRight>
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <position+0x22e>
				else turnLeft();
    15ec:	8c d9       	rcall	.-3304   	; 0x906 <turnLeft>
				front();
    15ee:	0e dc       	rcall	.-2020   	; 0xe0c <front>
			}
		}
		ot = ct;
    15f0:	80 91 3e 02 	lds	r24, 0x023E
    15f4:	90 91 3f 02 	lds	r25, 0x023F
    15f8:	90 93 01 02 	sts	0x0201, r25
    15fc:	80 93 00 02 	sts	0x0200, r24
	}
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <pickNode>:

void pickNode(int armNo, int side)
{
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	8c 01       	movw	r16, r24
    1614:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    1616:	fc 01       	movw	r30, r24
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	ec 59       	subi	r30, 0x9C	; 156
    161e:	fd 4f       	sbci	r31, 0xFD	; 253
    1620:	a0 91 3e 02 	lds	r26, 0x023E
    1624:	b0 91 3f 02 	lds	r27, 0x023F
    1628:	aa 0f       	add	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	a6 0f       	add	r26, r22
    162e:	b7 1f       	adc	r27, r23
    1630:	aa 0f       	add	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	a0 5c       	subi	r26, 0xC0	; 192
    1636:	bd 4f       	sbci	r27, 0xFD	; 253
    1638:	8d 91       	ld	r24, X+
    163a:	9c 91       	ld	r25, X
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
	position(armNo, side);
    1640:	c8 01       	movw	r24, r16
    1642:	be de       	rcall	.-644    	; 0x13c0 <position>
	pick(armNo);
    1644:	c8 01       	movw	r24, r16
    1646:	a0 de       	rcall	.-704    	; 0x1388 <pick>
	term[ct][side] = -1;
    1648:	80 91 3e 02 	lds	r24, 0x023E
    164c:	90 91 3f 02 	lds	r25, 0x023F
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	c8 0f       	add	r28, r24
    1656:	d9 1f       	adc	r29, r25
    1658:	cc 0f       	add	r28, r28
    165a:	dd 1f       	adc	r29, r29
    165c:	c0 5c       	subi	r28, 0xC0	; 192
    165e:	dd 4f       	sbci	r29, 0xFD	; 253
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	99 83       	std	Y+1, r25	; 0x01
    1666:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	08 95       	ret

00001672 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
    167c:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    167e:	fc 01       	movw	r30, r24
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ec 59       	subi	r30, 0x9C	; 156
    1686:	fd 4f       	sbci	r31, 0xFD	; 253
    1688:	db 01       	movw	r26, r22
    168a:	aa 0f       	add	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	a6 5c       	subi	r26, 0xC6	; 198
    1690:	bd 4f       	sbci	r27, 0xFD	; 253
    1692:	8d 91       	ld	r24, X+
    1694:	9c 91       	ld	r25, X
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    169a:	c6 17       	cp	r28, r22
    169c:	d7 07       	cpc	r29, r23
    169e:	39 f4       	brne	.+14     	; 0x16ae <pickSort+0x3c>
    16a0:	80 91 09 02 	lds	r24, 0x0209
    16a4:	90 91 0a 02 	lds	r25, 0x020A
    16a8:	89 2b       	or	r24, r25
    16aa:	49 f4       	brne	.+18     	; 0x16be <pickSort+0x4c>
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <pickSort+0x48>
    16ae:	80 91 09 02 	lds	r24, 0x0209
    16b2:	90 91 0a 02 	lds	r25, 0x020A
    16b6:	02 97       	sbiw	r24, 0x02	; 2
    16b8:	11 f4       	brne	.+4      	; 0x16be <pickSort+0x4c>
		turn();
    16ba:	66 d9       	rcall	.-3380   	; 0x988 <turn>
    16bc:	0c c0       	rjmp	.+24     	; 0x16d6 <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    16be:	80 91 09 02 	lds	r24, 0x0209
    16c2:	90 91 0a 02 	lds	r25, 0x020A
    16c6:	8d 7f       	andi	r24, 0xFD	; 253
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <pickSort+0x64>
			if (armNo == 0)
    16cc:	20 97       	sbiw	r28, 0x00	; 0
    16ce:	11 f4       	brne	.+4      	; 0x16d4 <pickSort+0x62>
				turnLeft();
    16d0:	1a d9       	rcall	.-3532   	; 0x906 <turnLeft>
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <pickSort+0x64>
			else turnRight();
    16d4:	d7 d8       	rcall	.-3666   	; 0x884 <turnRight>
	}
	back_mm(30);
    16d6:	8e e1       	ldi	r24, 0x1E	; 30
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 ed 02 	call	0x5da	; 0x5da <back_mm>
	pick(armNo);
    16de:	ce 01       	movw	r24, r28
    16e0:	53 de       	rcall	.-858    	; 0x1388 <pick>
	forward_mm(30);
    16e2:	8e e1       	ldi	r24, 0x1E	; 30
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <forward_mm>
	sort[sortNo] = -1;
    16ea:	f8 01       	movw	r30, r16
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	e6 5c       	subi	r30, 0xC6	; 198
    16f2:	fd 4f       	sbci	r31, 0xFD	; 253
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	9f ef       	ldi	r25, 0xFF	; 255
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <pickup>:
void pickup()
{
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1712:	20 91 3e 02 	lds	r18, 0x023E
    1716:	30 91 3f 02 	lds	r19, 0x023F
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	30 f4       	brcc	.+12     	; 0x172c <pickup+0x26>
    1720:	80 91 09 02 	lds	r24, 0x0209
    1724:	90 91 0a 02 	lds	r25, 0x020A
    1728:	02 97       	sbiw	r24, 0x02	; 2
    172a:	79 f0       	breq	.+30     	; 0x174a <pickup+0x44>
    172c:	c9 01       	movw	r24, r18
    172e:	02 97       	sbiw	r24, 0x02	; 2
    1730:	02 97       	sbiw	r24, 0x02	; 2
    1732:	80 f4       	brcc	.+32     	; 0x1754 <pickup+0x4e>
    1734:	80 91 09 02 	lds	r24, 0x0209
    1738:	90 91 0a 02 	lds	r25, 0x020A
    173c:	89 2b       	or	r24, r25
    173e:	79 f0       	breq	.+30     	; 0x175e <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1740:	c1 e0       	ldi	r28, 0x01	; 1
    1742:	d0 e0       	ldi	r29, 0x00	; 0
    1744:	00 e0       	ldi	r16, 0x00	; 0
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	0e c0       	rjmp	.+28     	; 0x1766 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    174a:	c0 e0       	ldi	r28, 0x00	; 0
    174c:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    174e:	01 e0       	ldi	r16, 0x01	; 1
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1754:	c1 e0       	ldi	r28, 0x01	; 1
    1756:	d0 e0       	ldi	r29, 0x00	; 0
    1758:	00 e0       	ldi	r16, 0x00	; 0
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    175e:	c0 e0       	ldi	r28, 0x00	; 0
    1760:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1762:	01 e0       	ldi	r16, 0x01	; 1
    1764:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1766:	f9 01       	movw	r30, r18
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e1 5e       	subi	r30, 0xE1	; 225
    176e:	fd 4f       	sbci	r31, 0xFD	; 253
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	89 2b       	or	r24, r25
    1776:	79 f4       	brne	.+30     	; 0x1796 <pickup+0x90>
		if (term[ct][0] == -2)
    1778:	f9 01       	movw	r30, r18
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	e0 5c       	subi	r30, 0xC0	; 192
    1784:	fd 4f       	sbci	r31, 0xFD	; 253
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	02 96       	adiw	r24, 0x02	; 2
    178c:	19 f4       	brne	.+6      	; 0x1794 <pickup+0x8e>
		{
			terminalCheck1();
    178e:	e3 db       	rcall	.-2106   	; 0xf56 <terminalCheck1>
			terminalCheck2();
    1790:	ca dc       	rcall	.-1644   	; 0x1126 <terminalCheck2>
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <pickup+0x90>
		}
		else	terminalCheck2();
    1794:	c8 dc       	rcall	.-1648   	; 0x1126 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1796:	20 91 3e 02 	lds	r18, 0x023E
    179a:	30 91 3f 02 	lds	r19, 0x023F
    179e:	f9 01       	movw	r30, r18
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	e0 5c       	subi	r30, 0xC0	; 192
    17aa:	fd 4f       	sbci	r31, 0xFD	; 253
    17ac:	40 81       	ld	r20, Z
    17ae:	51 81       	ldd	r21, Z+1	; 0x01
    17b0:	f9 01       	movw	r30, r18
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	ee 5a       	subi	r30, 0xAE	; 174
    17b8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	48 17       	cp	r20, r24
    17c0:	59 07       	cpc	r21, r25
    17c2:	21 f0       	breq	.+8      	; 0x17cc <pickup+0xc6>
    17c4:	4f 3f       	cpi	r20, 0xFF	; 255
    17c6:	6f ef       	ldi	r22, 0xFF	; 255
    17c8:	56 07       	cpc	r21, r22
    17ca:	89 f4       	brne	.+34     	; 0x17ee <pickup+0xe8>
    17cc:	f9 01       	movw	r30, r18
    17ce:	ee 0f       	add	r30, r30
    17d0:	ff 1f       	adc	r31, r31
    17d2:	ee 0f       	add	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	e0 5c       	subi	r30, 0xC0	; 192
    17d8:	fd 4f       	sbci	r31, 0xFD	; 253
    17da:	62 81       	ldd	r22, Z+2	; 0x02
    17dc:	73 81       	ldd	r23, Z+3	; 0x03
    17de:	86 17       	cp	r24, r22
    17e0:	97 07       	cpc	r25, r23
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <pickup+0xe0>
    17e4:	ee c1       	rjmp	.+988    	; 0x1bc2 <pickup+0x4bc>
    17e6:	6f 3f       	cpi	r22, 0xFF	; 255
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	09 f4       	brne	.+2      	; 0x17ee <pickup+0xe8>
    17ec:	ea c1       	rjmp	.+980    	; 0x1bc2 <pickup+0x4bc>
		{
			if (armCount == 2)
    17ee:	60 91 04 02 	lds	r22, 0x0204
    17f2:	70 91 05 02 	lds	r23, 0x0205
    17f6:	62 30       	cpi	r22, 0x02	; 2
    17f8:	71 05       	cpc	r23, r1
    17fa:	09 f0       	breq	.+2      	; 0x17fe <pickup+0xf8>
    17fc:	b0 c0       	rjmp	.+352    	; 0x195e <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    17fe:	e0 91 62 02 	lds	r30, 0x0262
    1802:	f0 91 63 02 	lds	r31, 0x0263
    1806:	df 01       	movw	r26, r30
    1808:	aa 0f       	add	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	ae 5a       	subi	r26, 0xAE	; 174
    180e:	bd 4f       	sbci	r27, 0xFD	; 253
    1810:	6d 91       	ld	r22, X+
    1812:	7c 91       	ld	r23, X
    1814:	46 17       	cp	r20, r22
    1816:	57 07       	cpc	r21, r23
    1818:	79 f0       	breq	.+30     	; 0x1838 <pickup+0x132>
    181a:	d9 01       	movw	r26, r18
    181c:	aa 0f       	add	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	aa 0f       	add	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	a0 5c       	subi	r26, 0xC0	; 192
    1826:	bd 4f       	sbci	r27, 0xFD	; 253
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	ed 90       	ld	r14, X+
    182c:	fc 90       	ld	r15, X
    182e:	13 97       	sbiw	r26, 0x03	; 3
    1830:	6e 15       	cp	r22, r14
    1832:	7f 05       	cpc	r23, r15
    1834:	59 f4       	brne	.+22     	; 0x184c <pickup+0x146>
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 1);
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	c8 01       	movw	r24, r16
    183e:	e5 de       	rcall	.-566    	; 0x160a <pickNode>
    1840:	8e c0       	rjmp	.+284    	; 0x195e <pickup+0x258>
					else	pickNode(arm1, 0);
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	ce 01       	movw	r24, r28
    1848:	e0 de       	rcall	.-576    	; 0x160a <pickNode>
    184a:	89 c0       	rjmp	.+274    	; 0x195e <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    184c:	8e 15       	cp	r24, r14
    184e:	9f 05       	cpc	r25, r15
    1850:	09 f4       	brne	.+2      	; 0x1854 <pickup+0x14e>
    1852:	4e c0       	rjmp	.+156    	; 0x18f0 <pickup+0x1ea>
    1854:	ef 20       	and	r14, r15
    1856:	e0 94       	com	r14
    1858:	09 f4       	brne	.+2      	; 0x185c <pickup+0x156>
    185a:	4a c0       	rjmp	.+148    	; 0x18f0 <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    185c:	48 17       	cp	r20, r24
    185e:	59 07       	cpc	r21, r25
    1860:	69 f0       	breq	.+26     	; 0x187c <pickup+0x176>
    1862:	4f 3f       	cpi	r20, 0xFF	; 255
    1864:	af ef       	ldi	r26, 0xFF	; 255
    1866:	5a 07       	cpc	r21, r26
    1868:	49 f0       	breq	.+18     	; 0x187c <pickup+0x176>
					{
						pickNode(arm1, 0);
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	ce 01       	movw	r24, r28
    1870:	cc de       	rcall	.-616    	; 0x160a <pickNode>
						pickNode(arm0, 1);
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	c8 01       	movw	r24, r16
    1878:	c8 de       	rcall	.-624    	; 0x160a <pickNode>
    187a:	71 c0       	rjmp	.+226    	; 0x195e <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    187c:	21 70       	andi	r18, 0x01	; 1
    187e:	30 78       	andi	r19, 0x80	; 128
    1880:	33 23       	and	r19, r19
    1882:	34 f4       	brge	.+12     	; 0x1890 <pickup+0x18a>
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	31 09       	sbc	r19, r1
    1888:	2e 6f       	ori	r18, 0xFE	; 254
    188a:	3f 6f       	ori	r19, 0xFF	; 255
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	d9 01       	movw	r26, r18
    1892:	aa 0f       	add	r26, r26
    1894:	bb 1f       	adc	r27, r27
    1896:	a6 5c       	subi	r26, 0xC6	; 198
    1898:	bd 4f       	sbci	r27, 0xFD	; 253
    189a:	2d 91       	ld	r18, X+
    189c:	3c 91       	ld	r19, X
    189e:	2f 3f       	cpi	r18, 0xFF	; 255
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	09 f1       	breq	.+66     	; 0x18e6 <pickup+0x1e0>
    18a4:	df 01       	movw	r26, r30
    18a6:	aa 0f       	add	r26, r26
    18a8:	bb 1f       	adc	r27, r27
    18aa:	aa 0f       	add	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	a0 5c       	subi	r26, 0xC0	; 192
    18b0:	bd 4f       	sbci	r27, 0xFD	; 253
    18b2:	2d 91       	ld	r18, X+
    18b4:	3c 91       	ld	r19, X
    18b6:	62 17       	cp	r22, r18
    18b8:	73 07       	cpc	r23, r19
    18ba:	a9 f0       	breq	.+42     	; 0x18e6 <pickup+0x1e0>
    18bc:	2f 3f       	cpi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	91 f0       	breq	.+36     	; 0x18e6 <pickup+0x1e0>
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	e0 5c       	subi	r30, 0xC0	; 192
    18cc:	fd 4f       	sbci	r31, 0xFD	; 253
    18ce:	22 81       	ldd	r18, Z+2	; 0x02
    18d0:	33 81       	ldd	r19, Z+3	; 0x03
    18d2:	62 17       	cp	r22, r18
    18d4:	73 07       	cpc	r23, r19
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <pickup+0x1e0>
    18d8:	2f 3f       	cpi	r18, 0xFF	; 255
    18da:	3f 4f       	sbci	r19, 0xFF	; 255
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <pickup+0x1e0>
    18de:	48 17       	cp	r20, r24
    18e0:	59 07       	cpc	r21, r25
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <pickup+0x1e0>
    18e4:	6e c1       	rjmp	.+732    	; 0x1bc2 <pickup+0x4bc>
						pickNode(arm0, 1);
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	c8 01       	movw	r24, r16
    18ec:	8e de       	rcall	.-740    	; 0x160a <pickNode>
    18ee:	37 c0       	rjmp	.+110    	; 0x195e <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    18f0:	48 17       	cp	r20, r24
    18f2:	59 07       	cpc	r21, r25
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <pickup+0x1f2>
    18f6:	65 c1       	rjmp	.+714    	; 0x1bc2 <pickup+0x4bc>
    18f8:	4f 3f       	cpi	r20, 0xFF	; 255
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	09 f4       	brne	.+2      	; 0x1900 <pickup+0x1fa>
    18fe:	61 c1       	rjmp	.+706    	; 0x1bc2 <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1900:	21 70       	andi	r18, 0x01	; 1
    1902:	30 78       	andi	r19, 0x80	; 128
    1904:	33 23       	and	r19, r19
    1906:	34 f4       	brge	.+12     	; 0x1914 <pickup+0x20e>
    1908:	21 50       	subi	r18, 0x01	; 1
    190a:	31 09       	sbc	r19, r1
    190c:	2e 6f       	ori	r18, 0xFE	; 254
    190e:	3f 6f       	ori	r19, 0xFF	; 255
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	d9 01       	movw	r26, r18
    1916:	aa 0f       	add	r26, r26
    1918:	bb 1f       	adc	r27, r27
    191a:	a6 5c       	subi	r26, 0xC6	; 198
    191c:	bd 4f       	sbci	r27, 0xFD	; 253
    191e:	8d 91       	ld	r24, X+
    1920:	9c 91       	ld	r25, X
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	c1 f0       	breq	.+48     	; 0x1956 <pickup+0x250>
    1926:	df 01       	movw	r26, r30
    1928:	aa 0f       	add	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	aa 0f       	add	r26, r26
    192e:	bb 1f       	adc	r27, r27
    1930:	a0 5c       	subi	r26, 0xC0	; 192
    1932:	bd 4f       	sbci	r27, 0xFD	; 253
    1934:	8d 91       	ld	r24, X+
    1936:	9c 91       	ld	r25, X
    1938:	11 97       	sbiw	r26, 0x01	; 1
    193a:	68 17       	cp	r22, r24
    193c:	79 07       	cpc	r23, r25
    193e:	59 f0       	breq	.+22     	; 0x1956 <pickup+0x250>
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	49 f0       	breq	.+18     	; 0x1956 <pickup+0x250>
    1944:	fd 01       	movw	r30, r26
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	68 17       	cp	r22, r24
    194c:	79 07       	cpc	r23, r25
    194e:	19 f0       	breq	.+6      	; 0x1956 <pickup+0x250>
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	09 f0       	breq	.+2      	; 0x1956 <pickup+0x250>
    1954:	36 c1       	rjmp	.+620    	; 0x1bc2 <pickup+0x4bc>
						pickNode(arm1, 0);
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	ce 01       	movw	r24, r28
    195c:	56 de       	rcall	.-852    	; 0x160a <pickNode>
				}

			}
			if (armCount == 1)
    195e:	80 91 04 02 	lds	r24, 0x0204
    1962:	90 91 05 02 	lds	r25, 0x0205
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	09 f0       	breq	.+2      	; 0x196c <pickup+0x266>
    196a:	2b c1       	rjmp	.+598    	; 0x1bc2 <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    196c:	f8 01       	movw	r30, r16
    196e:	ee 0f       	add	r30, r30
    1970:	ff 1f       	adc	r31, r31
    1972:	ec 59       	subi	r30, 0x9C	; 156
    1974:	fd 4f       	sbci	r31, 0xFD	; 253
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	09 f4       	brne	.+2      	; 0x1980 <pickup+0x27a>
					a1 = arm0;
    197e:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1980:	be 01       	movw	r22, r28
    1982:	6f 5f       	subi	r22, 0xFF	; 255
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	61 70       	andi	r22, 0x01	; 1
    1988:	70 78       	andi	r23, 0x80	; 128
    198a:	77 23       	and	r23, r23
    198c:	34 f4       	brge	.+12     	; 0x199a <pickup+0x294>
    198e:	61 50       	subi	r22, 0x01	; 1
    1990:	71 09       	sbc	r23, r1
    1992:	6e 6f       	ori	r22, 0xFE	; 254
    1994:	7f 6f       	ori	r23, 0xFF	; 255
    1996:	6f 5f       	subi	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    199a:	80 91 3e 02 	lds	r24, 0x023E
    199e:	90 91 3f 02 	lds	r25, 0x023F
    19a2:	9c 01       	movw	r18, r24
    19a4:	21 70       	andi	r18, 0x01	; 1
    19a6:	30 78       	andi	r19, 0x80	; 128
    19a8:	33 23       	and	r19, r19
    19aa:	34 f4       	brge	.+12     	; 0x19b8 <pickup+0x2b2>
    19ac:	21 50       	subi	r18, 0x01	; 1
    19ae:	31 09       	sbc	r19, r1
    19b0:	2e 6f       	ori	r18, 0xFE	; 254
    19b2:	3f 6f       	ori	r19, 0xFF	; 255
    19b4:	2f 5f       	subi	r18, 0xFF	; 255
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	f9 01       	movw	r30, r18
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	e6 5c       	subi	r30, 0xC6	; 198
    19c0:	fd 4f       	sbci	r31, 0xFD	; 253
    19c2:	20 81       	ld	r18, Z
    19c4:	31 81       	ldd	r19, Z+1	; 0x01
    19c6:	2f 3f       	cpi	r18, 0xFF	; 255
    19c8:	af ef       	ldi	r26, 0xFF	; 255
    19ca:	3a 07       	cpc	r19, r26
    19cc:	d9 f5       	brne	.+118    	; 0x1a44 <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    19ce:	fc 01       	movw	r30, r24
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	ec 0f       	add	r30, r28
    19d6:	fd 1f       	adc	r31, r29
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	e0 5c       	subi	r30, 0xC0	; 192
    19de:	fd 4f       	sbci	r31, 0xFD	; 253
    19e0:	20 81       	ld	r18, Z
    19e2:	31 81       	ldd	r19, Z+1	; 0x01
    19e4:	2f 3f       	cpi	r18, 0xFF	; 255
    19e6:	ef ef       	ldi	r30, 0xFF	; 255
    19e8:	3e 07       	cpc	r19, r30
    19ea:	71 f0       	breq	.+28     	; 0x1a08 <pickup+0x302>
    19ec:	fc 01       	movw	r30, r24
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	ee 5a       	subi	r30, 0xAE	; 174
    19f4:	fd 4f       	sbci	r31, 0xFD	; 253
    19f6:	40 81       	ld	r20, Z
    19f8:	51 81       	ldd	r21, Z+1	; 0x01
    19fa:	24 17       	cp	r18, r20
    19fc:	35 07       	cpc	r19, r21
    19fe:	21 f0       	breq	.+8      	; 0x1a08 <pickup+0x302>
						pickNode(a1, a1);
    1a00:	be 01       	movw	r22, r28
    1a02:	ce 01       	movw	r24, r28
    1a04:	02 de       	rcall	.-1020   	; 0x160a <pickNode>
    1a06:	dd c0       	rjmp	.+442    	; 0x1bc2 <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1a08:	fc 01       	movw	r30, r24
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	e6 0f       	add	r30, r22
    1a10:	f7 1f       	adc	r31, r23
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	e0 5c       	subi	r30, 0xC0	; 192
    1a18:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1a:	20 81       	ld	r18, Z
    1a1c:	31 81       	ldd	r19, Z+1	; 0x01
    1a1e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a20:	4f ef       	ldi	r20, 0xFF	; 255
    1a22:	34 07       	cpc	r19, r20
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <pickup+0x322>
    1a26:	cd c0       	rjmp	.+410    	; 0x1bc2 <pickup+0x4bc>
    1a28:	fc 01       	movw	r30, r24
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	ee 5a       	subi	r30, 0xAE	; 174
    1a30:	fd 4f       	sbci	r31, 0xFD	; 253
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	28 17       	cp	r18, r24
    1a38:	39 07       	cpc	r19, r25
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <pickup+0x338>
    1a3c:	c2 c0       	rjmp	.+388    	; 0x1bc2 <pickup+0x4bc>
						pickNode(a1, a2);
    1a3e:	ce 01       	movw	r24, r28
    1a40:	e4 dd       	rcall	.-1080   	; 0x160a <pickNode>
    1a42:	bf c0       	rjmp	.+382    	; 0x1bc2 <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1a44:	40 91 62 02 	lds	r20, 0x0262
    1a48:	50 91 63 02 	lds	r21, 0x0263
    1a4c:	fa 01       	movw	r30, r20
    1a4e:	ee 0f       	add	r30, r30
    1a50:	ff 1f       	adc	r31, r31
    1a52:	ee 5a       	subi	r30, 0xAE	; 174
    1a54:	fd 4f       	sbci	r31, 0xFD	; 253
    1a56:	01 90       	ld	r0, Z+
    1a58:	f0 81       	ld	r31, Z
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	aa 0f       	add	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	aa 0f       	add	r26, r26
    1a64:	bb 1f       	adc	r27, r27
    1a66:	a0 5c       	subi	r26, 0xC0	; 192
    1a68:	bd 4f       	sbci	r27, 0xFD	; 253
    1a6a:	0d 90       	ld	r0, X+
    1a6c:	bc 91       	ld	r27, X
    1a6e:	a0 2d       	mov	r26, r0
    1a70:	ae 17       	cp	r26, r30
    1a72:	bf 07       	cpc	r27, r31
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <pickup+0x38c>
    1a76:	dc 01       	movw	r26, r24
    1a78:	aa 0f       	add	r26, r26
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	aa 0f       	add	r26, r26
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	a0 5c       	subi	r26, 0xC0	; 192
    1a82:	bd 4f       	sbci	r27, 0xFD	; 253
    1a84:	12 96       	adiw	r26, 0x02	; 2
    1a86:	0d 90       	ld	r0, X+
    1a88:	bc 91       	ld	r27, X
    1a8a:	a0 2d       	mov	r26, r0
    1a8c:	ea 17       	cp	r30, r26
    1a8e:	fb 07       	cpc	r31, r27
    1a90:	d9 f5       	brne	.+118    	; 0x1b08 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1a92:	da 01       	movw	r26, r20
    1a94:	aa 0f       	add	r26, r26
    1a96:	bb 1f       	adc	r27, r27
    1a98:	a1 5e       	subi	r26, 0xE1	; 225
    1a9a:	bd 4f       	sbci	r27, 0xFD	; 253
    1a9c:	2d 91       	ld	r18, X+
    1a9e:	3c 91       	ld	r19, X
    1aa0:	21 30       	cpi	r18, 0x01	; 1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <pickup+0x3a2>
    1aa6:	8d c0       	rjmp	.+282    	; 0x1bc2 <pickup+0x4bc>
    1aa8:	da 01       	movw	r26, r20
    1aaa:	aa 0f       	add	r26, r26
    1aac:	bb 1f       	adc	r27, r27
    1aae:	aa 0f       	add	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	a0 5c       	subi	r26, 0xC0	; 192
    1ab4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ab6:	2d 91       	ld	r18, X+
    1ab8:	3c 91       	ld	r19, X
    1aba:	2f 3f       	cpi	r18, 0xFF	; 255
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	79 f0       	breq	.+30     	; 0x1ade <pickup+0x3d8>
    1ac0:	da 01       	movw	r26, r20
    1ac2:	aa 0f       	add	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	aa 0f       	add	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	a0 5c       	subi	r26, 0xC0	; 192
    1acc:	bd 4f       	sbci	r27, 0xFD	; 253
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	2d 91       	ld	r18, X+
    1ad2:	3c 91       	ld	r19, X
    1ad4:	13 97       	sbiw	r26, 0x03	; 3
    1ad6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	09 f0       	breq	.+2      	; 0x1ade <pickup+0x3d8>
    1adc:	72 c0       	rjmp	.+228    	; 0x1bc2 <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	8c 0f       	add	r24, r28
    1ae4:	9d 1f       	adc	r25, r29
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	aa 0f       	add	r26, r26
    1aea:	bb 1f       	adc	r27, r27
    1aec:	a0 5c       	subi	r26, 0xC0	; 192
    1aee:	bd 4f       	sbci	r27, 0xFD	; 253
    1af0:	8d 91       	ld	r24, X+
    1af2:	9c 91       	ld	r25, X
    1af4:	e8 17       	cp	r30, r24
    1af6:	f9 07       	cpc	r31, r25
    1af8:	21 f4       	brne	.+8      	; 0x1b02 <pickup+0x3fc>
								pickNode(a1, a1);
    1afa:	be 01       	movw	r22, r28
    1afc:	ce 01       	movw	r24, r28
    1afe:	85 dd       	rcall	.-1270   	; 0x160a <pickNode>
    1b00:	60 c0       	rjmp	.+192    	; 0x1bc2 <pickup+0x4bc>
							else pickNode(a1, a2);
    1b02:	ce 01       	movw	r24, r28
    1b04:	82 dd       	rcall	.-1276   	; 0x160a <pickNode>
    1b06:	5d c0       	rjmp	.+186    	; 0x1bc2 <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1b08:	dc 01       	movw	r26, r24
    1b0a:	aa 0f       	add	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	ae 5a       	subi	r26, 0xAE	; 174
    1b10:	bd 4f       	sbci	r27, 0xFD	; 253
    1b12:	0d 90       	ld	r0, X+
    1b14:	bc 91       	ld	r27, X
    1b16:	a0 2d       	mov	r26, r0
    1b18:	2a 17       	cp	r18, r26
    1b1a:	3b 07       	cpc	r19, r27
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <pickup+0x41a>
    1b1e:	51 c0       	rjmp	.+162    	; 0x1bc2 <pickup+0x4bc>
    1b20:	2e 17       	cp	r18, r30
    1b22:	3f 07       	cpc	r19, r31
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <pickup+0x422>
    1b26:	4d c0       	rjmp	.+154    	; 0x1bc2 <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1b28:	fa 01       	movw	r30, r20
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	e1 5e       	subi	r30, 0xE1	; 225
    1b30:	fd 4f       	sbci	r31, 0xFD	; 253
    1b32:	20 81       	ld	r18, Z
    1b34:	31 81       	ldd	r19, Z+1	; 0x01
    1b36:	21 30       	cpi	r18, 0x01	; 1
    1b38:	31 05       	cpc	r19, r1
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <pickup+0x438>
    1b3c:	42 c0       	rjmp	.+132    	; 0x1bc2 <pickup+0x4bc>
    1b3e:	fa 01       	movw	r30, r20
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	e0 5c       	subi	r30, 0xC0	; 192
    1b4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b4c:	20 81       	ld	r18, Z
    1b4e:	31 81       	ldd	r19, Z+1	; 0x01
    1b50:	a2 17       	cp	r26, r18
    1b52:	b3 07       	cpc	r27, r19
    1b54:	b1 f1       	breq	.+108    	; 0x1bc2 <pickup+0x4bc>
    1b56:	fa 01       	movw	r30, r20
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	e0 5c       	subi	r30, 0xC0	; 192
    1b62:	fd 4f       	sbci	r31, 0xFD	; 253
    1b64:	22 81       	ldd	r18, Z+2	; 0x02
    1b66:	33 81       	ldd	r19, Z+3	; 0x03
    1b68:	a2 17       	cp	r26, r18
    1b6a:	b3 07       	cpc	r27, r19
    1b6c:	51 f1       	breq	.+84     	; 0x1bc2 <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	ec 0f       	add	r30, r28
    1b76:	fd 1f       	adc	r31, r29
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	e0 5c       	subi	r30, 0xC0	; 192
    1b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b80:	20 81       	ld	r18, Z
    1b82:	31 81       	ldd	r19, Z+1	; 0x01
    1b84:	2f 3f       	cpi	r18, 0xFF	; 255
    1b86:	ef ef       	ldi	r30, 0xFF	; 255
    1b88:	3e 07       	cpc	r19, r30
    1b8a:	39 f0       	breq	.+14     	; 0x1b9a <pickup+0x494>
    1b8c:	a2 17       	cp	r26, r18
    1b8e:	b3 07       	cpc	r27, r19
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <pickup+0x494>
									pickNode(a1, a1);
    1b92:	be 01       	movw	r22, r28
    1b94:	ce 01       	movw	r24, r28
    1b96:	39 dd       	rcall	.-1422   	; 0x160a <pickNode>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	86 0f       	add	r24, r22
    1ba0:	97 1f       	adc	r25, r23
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	e0 5c       	subi	r30, 0xC0	; 192
    1baa:	fd 4f       	sbci	r31, 0xFD	; 253
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb2:	2f ef       	ldi	r18, 0xFF	; 255
    1bb4:	92 07       	cpc	r25, r18
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <pickup+0x4bc>
    1bb8:	a8 17       	cp	r26, r24
    1bba:	b9 07       	cpc	r27, r25
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <pickup+0x4bc>
									pickNode(a1, a2);
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	24 dd       	rcall	.-1464   	; 0x160a <pickNode>
					}
				}
			}
		}
}
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	08 95       	ret

00001bd0 <drop>:

void drop(int side)
{
    1bd0:	cf 93       	push	r28
    1bd2:	c8 2f       	mov	r28, r24
	lower(side);//lower
    1bd4:	0e 94 bb 03 	call	0x776	; 0x776 <lower>
	//_delay_ms(1000);	
	open(side);
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <open>
	//_delay_ms(1000);
	elevate();//mid
    1bde:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <elevate>
	//_delay_ms(1000);
 	armCount++;
    1be2:	80 91 04 02 	lds	r24, 0x0204
    1be6:	90 91 05 02 	lds	r25, 0x0205
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	90 93 05 02 	sts	0x0205, r25
    1bf0:	80 93 04 02 	sts	0x0204, r24
}
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1c02:	e0 91 3e 02 	lds	r30, 0x023E
    1c06:	f0 91 3f 02 	lds	r31, 0x023F
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	e6 0f       	add	r30, r22
    1c10:	f7 1f       	adc	r31, r23
    1c12:	ee 0f       	add	r30, r30
    1c14:	ff 1f       	adc	r31, r31
    1c16:	e0 5c       	subi	r30, 0xC0	; 192
    1c18:	fd 4f       	sbci	r31, 0xFD	; 253
    1c1a:	8c 01       	movw	r16, r24
    1c1c:	00 0f       	add	r16, r16
    1c1e:	11 1f       	adc	r17, r17
    1c20:	0c 59       	subi	r16, 0x9C	; 156
    1c22:	1d 4f       	sbci	r17, 0xFD	; 253
    1c24:	d8 01       	movw	r26, r16
    1c26:	8d 91       	ld	r24, X+
    1c28:	9c 91       	ld	r25, X
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
	position(armNo, side);
    1c2e:	ce 01       	movw	r24, r28
    1c30:	c7 db       	rcall	.-2162   	; 0x13c0 <position>
	drop(armNo);
    1c32:	ce 01       	movw	r24, r28
    1c34:	cd df       	rcall	.-102    	; 0x1bd0 <drop>
	arm[armNo] = -1;
    1c36:	8f ef       	ldi	r24, 0xFF	; 255
    1c38:	9f ef       	ldi	r25, 0xFF	; 255
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	80 83       	st	Z, r24
	sorted++;
    1c40:	80 91 11 02 	lds	r24, 0x0211
    1c44:	90 91 12 02 	lds	r25, 0x0212
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	90 93 12 02 	sts	0x0212, r25
    1c4e:	80 93 11 02 	sts	0x0211, r24
	
}
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1c62:	fb 01       	movw	r30, r22
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	e6 5c       	subi	r30, 0xC6	; 198
    1c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	aa 0f       	add	r26, r26
    1c70:	bb 1f       	adc	r27, r27
    1c72:	ac 59       	subi	r26, 0x9C	; 156
    1c74:	bd 4f       	sbci	r27, 0xFD	; 253
    1c76:	8d 91       	ld	r24, X+
    1c78:	9c 91       	ld	r25, X
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1c7e:	c6 17       	cp	r28, r22
    1c80:	d7 07       	cpc	r29, r23
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <sortDrop+0x36>
    1c84:	80 91 09 02 	lds	r24, 0x0209
    1c88:	90 91 0a 02 	lds	r25, 0x020A
    1c8c:	89 2b       	or	r24, r25
    1c8e:	51 f4       	brne	.+20     	; 0x1ca4 <sortDrop+0x48>
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <sortDrop+0x42>
    1c92:	80 91 09 02 	lds	r24, 0x0209
    1c96:	90 91 0a 02 	lds	r25, 0x020A
    1c9a:	02 97       	sbiw	r24, 0x02	; 2
    1c9c:	19 f4       	brne	.+6      	; 0x1ca4 <sortDrop+0x48>
		turn();
    1c9e:	0e 94 c4 04 	call	0x988	; 0x988 <turn>
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <sortDrop+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1ca4:	80 91 09 02 	lds	r24, 0x0209
    1ca8:	90 91 0a 02 	lds	r25, 0x020A
    1cac:	8d 7f       	andi	r24, 0xFD	; 253
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	39 f4       	brne	.+14     	; 0x1cc0 <sortDrop+0x64>
			if (armNo == 0)
    1cb2:	20 97       	sbiw	r28, 0x00	; 0
    1cb4:	19 f4       	brne	.+6      	; 0x1cbc <sortDrop+0x60>
				turnLeft();
    1cb6:	0e 94 83 04 	call	0x906	; 0x906 <turnLeft>
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <sortDrop+0x64>
			else turnRight();
    1cbc:	0e 94 42 04 	call	0x884	; 0x884 <turnRight>
	}
	drop(armNo);
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	86 df       	rcall	.-244    	; 0x1bd0 <drop>
	arm[armNo] = -1;
    1cc4:	cc 0f       	add	r28, r28
    1cc6:	dd 1f       	adc	r29, r29
    1cc8:	cc 59       	subi	r28, 0x9C	; 156
    1cca:	dd 4f       	sbci	r29, 0xFD	; 253
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	99 83       	std	Y+1, r25	; 0x01
    1cd2:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <dropPickup>:

void dropPickup(int a1)
{
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1cde:	9c 01       	movw	r18, r24
    1ce0:	2f 5f       	subi	r18, 0xFF	; 255
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	21 70       	andi	r18, 0x01	; 1
    1ce6:	30 78       	andi	r19, 0x80	; 128
    1ce8:	33 23       	and	r19, r19
    1cea:	34 f4       	brge	.+12     	; 0x1cf8 <dropPickup+0x1e>
    1cec:	21 50       	subi	r18, 0x01	; 1
    1cee:	31 09       	sbc	r19, r1
    1cf0:	2e 6f       	ori	r18, 0xFE	; 254
    1cf2:	3f 6f       	ori	r19, 0xFF	; 255
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	d2 2f       	mov	r29, r18
    1cfa:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1cfc:	e0 91 3e 02 	lds	r30, 0x023E
    1d00:	f0 91 3f 02 	lds	r31, 0x023F
    1d04:	af 01       	movw	r20, r30
    1d06:	44 0f       	add	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	24 0f       	add	r18, r20
    1d0c:	35 1f       	adc	r19, r21
    1d0e:	d9 01       	movw	r26, r18
    1d10:	aa 0f       	add	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	a0 5c       	subi	r26, 0xC0	; 192
    1d16:	bd 4f       	sbci	r27, 0xFD	; 253
    1d18:	2d 91       	ld	r18, X+
    1d1a:	3c 91       	ld	r19, X
    1d1c:	da 01       	movw	r26, r20
    1d1e:	ae 5a       	subi	r26, 0xAE	; 174
    1d20:	bd 4f       	sbci	r27, 0xFD	; 253
    1d22:	4d 91       	ld	r20, X+
    1d24:	5c 91       	ld	r21, X
    1d26:	24 17       	cp	r18, r20
    1d28:	35 07       	cpc	r19, r21
    1d2a:	69 f0       	breq	.+26     	; 0x1d46 <dropPickup+0x6c>
    1d2c:	a0 91 62 02 	lds	r26, 0x0262
    1d30:	b0 91 63 02 	lds	r27, 0x0263
    1d34:	aa 0f       	add	r26, r26
    1d36:	bb 1f       	adc	r27, r27
    1d38:	ae 5a       	subi	r26, 0xAE	; 174
    1d3a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d3c:	6d 91       	ld	r22, X+
    1d3e:	7c 91       	ld	r23, X
    1d40:	26 17       	cp	r18, r22
    1d42:	37 07       	cpc	r19, r23
    1d44:	a9 f0       	breq	.+42     	; 0x1d70 <dropPickup+0x96>
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	e8 0f       	add	r30, r24
    1d4c:	f9 1f       	adc	r31, r25
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	e0 5c       	subi	r30, 0xC0	; 192
    1d54:	fd 4f       	sbci	r31, 0xFD	; 253
    1d56:	01 90       	ld	r0, Z+
    1d58:	f0 81       	ld	r31, Z
    1d5a:	e0 2d       	mov	r30, r0
    1d5c:	4e 17       	cp	r20, r30
    1d5e:	5f 07       	cpc	r21, r31
    1d60:	39 f0       	breq	.+14     	; 0x1d70 <dropPickup+0x96>
    1d62:	31 96       	adiw	r30, 0x01	; 1
    1d64:	29 f0       	breq	.+10     	; 0x1d70 <dropPickup+0x96>
		pickNode(a2, a1);
    1d66:	bc 01       	movw	r22, r24
    1d68:	8d 2f       	mov	r24, r29
    1d6a:	9c 2f       	mov	r25, r28
    1d6c:	4e dc       	rcall	.-1892   	; 0x160a <pickNode>
    1d6e:	0b c0       	rjmp	.+22     	; 0x1d86 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1d70:	24 17       	cp	r18, r20
    1d72:	35 07       	cpc	r19, r21
    1d74:	41 f0       	breq	.+16     	; 0x1d86 <dropPickup+0xac>
    1d76:	2f 3f       	cpi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <dropPickup+0xac>
		pickNode(a2, a2);
    1d7c:	6d 2f       	mov	r22, r29
    1d7e:	7c 2f       	mov	r23, r28
    1d80:	8d 2f       	mov	r24, r29
    1d82:	9c 2f       	mov	r25, r28
    1d84:	42 dc       	rcall	.-1916   	; 0x160a <pickNode>
}
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <canDrop>:

void canDrop()
{
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1d94:	20 91 3e 02 	lds	r18, 0x023E
    1d98:	30 91 3f 02 	lds	r19, 0x023F
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	30 f4       	brcc	.+12     	; 0x1dae <canDrop+0x22>
    1da2:	80 91 09 02 	lds	r24, 0x0209
    1da6:	90 91 0a 02 	lds	r25, 0x020A
    1daa:	02 97       	sbiw	r24, 0x02	; 2
    1dac:	79 f0       	breq	.+30     	; 0x1dcc <canDrop+0x40>
    1dae:	c9 01       	movw	r24, r18
    1db0:	02 97       	sbiw	r24, 0x02	; 2
    1db2:	02 97       	sbiw	r24, 0x02	; 2
    1db4:	80 f4       	brcc	.+32     	; 0x1dd6 <canDrop+0x4a>
    1db6:	80 91 09 02 	lds	r24, 0x0209
    1dba:	90 91 0a 02 	lds	r25, 0x020A
    1dbe:	89 2b       	or	r24, r25
    1dc0:	79 f0       	breq	.+30     	; 0x1de0 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1dc2:	01 e0       	ldi	r16, 0x01	; 1
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	c0 e0       	ldi	r28, 0x00	; 0
    1dc8:	d0 e0       	ldi	r29, 0x00	; 0
    1dca:	0e c0       	rjmp	.+28     	; 0x1de8 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1dcc:	00 e0       	ldi	r16, 0x00	; 0
    1dce:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1dd0:	c1 e0       	ldi	r28, 0x01	; 1
    1dd2:	d0 e0       	ldi	r29, 0x00	; 0
    1dd4:	09 c0       	rjmp	.+18     	; 0x1de8 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1dd6:	01 e0       	ldi	r16, 0x01	; 1
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	c0 e0       	ldi	r28, 0x00	; 0
    1ddc:	d0 e0       	ldi	r29, 0x00	; 0
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1de4:	c1 e0       	ldi	r28, 0x01	; 1
    1de6:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    1de8:	40 91 04 02 	lds	r20, 0x0204
    1dec:	50 91 05 02 	lds	r21, 0x0205
    1df0:	42 30       	cpi	r20, 0x02	; 2
    1df2:	51 05       	cpc	r21, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <canDrop+0x6c>
    1df6:	12 c1       	rjmp	.+548    	; 0x201c <canDrop+0x290>
    1df8:	f9 01       	movw	r30, r18
    1dfa:	ee 0f       	add	r30, r30
    1dfc:	ff 1f       	adc	r31, r31
    1dfe:	ee 5a       	subi	r30, 0xAE	; 174
    1e00:	fd 4f       	sbci	r31, 0xFD	; 253
    1e02:	40 81       	ld	r20, Z
    1e04:	51 81       	ldd	r21, Z+1	; 0x01
    1e06:	60 91 64 02 	lds	r22, 0x0264
    1e0a:	70 91 65 02 	lds	r23, 0x0265
    1e0e:	64 17       	cp	r22, r20
    1e10:	75 07       	cpc	r23, r21
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <canDrop+0x98>
    1e14:	80 91 66 02 	lds	r24, 0x0266
    1e18:	90 91 67 02 	lds	r25, 0x0267
    1e1c:	48 17       	cp	r20, r24
    1e1e:	59 07       	cpc	r21, r25
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <canDrop+0x98>
    1e22:	fc c0       	rjmp	.+504    	; 0x201c <canDrop+0x290>
		return;
	else
	{
		if (visited[ct] == 0)
    1e24:	f9 01       	movw	r30, r18
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	e1 5e       	subi	r30, 0xE1	; 225
    1e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	89 2b       	or	r24, r25
    1e34:	11 f4       	brne	.+4      	; 0x1e3a <canDrop+0xae>
		{
			terminalCheck1();
    1e36:	8f d8       	rcall	.-3810   	; 0xf56 <terminalCheck1>
			terminalCheck2();
    1e38:	76 d9       	rcall	.-3348   	; 0x1126 <terminalCheck2>
		}
		if (armCount == 0)
    1e3a:	80 91 04 02 	lds	r24, 0x0204
    1e3e:	90 91 05 02 	lds	r25, 0x0205
    1e42:	89 2b       	or	r24, r25
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <canDrop+0xbc>
    1e46:	48 c0       	rjmp	.+144    	; 0x1ed8 <canDrop+0x14c>
		{
			if (arm[arm0] == color[ct])
    1e48:	20 91 3e 02 	lds	r18, 0x023E
    1e4c:	30 91 3f 02 	lds	r19, 0x023F
    1e50:	f9 01       	movw	r30, r18
    1e52:	ee 0f       	add	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	ee 5a       	subi	r30, 0xAE	; 174
    1e58:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	ec 59       	subi	r30, 0x9C	; 156
    1e66:	fd 4f       	sbci	r31, 0xFD	; 253
    1e68:	40 81       	ld	r20, Z
    1e6a:	51 81       	ldd	r21, Z+1	; 0x01
    1e6c:	48 17       	cp	r20, r24
    1e6e:	59 07       	cpc	r21, r25
    1e70:	a9 f4       	brne	.+42     	; 0x1e9c <canDrop+0x110>
				if (term[ct][0] == -1)
    1e72:	f9 01       	movw	r30, r18
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	e0 5c       	subi	r30, 0xC0	; 192
    1e7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	29 f4       	brne	.+10     	; 0x1e92 <canDrop+0x106>
					nodeDrop(arm0, 0);
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	b4 de       	rcall	.-664    	; 0x1bf8 <nodeDrop>
    1e90:	23 c0       	rjmp	.+70     	; 0x1ed8 <canDrop+0x14c>
				else nodeDrop(arm0, 1);
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	ce 01       	movw	r24, r28
    1e98:	af de       	rcall	.-674    	; 0x1bf8 <nodeDrop>
    1e9a:	1e c0       	rjmp	.+60     	; 0x1ed8 <canDrop+0x14c>
			else if (arm[arm1] == color[ct])
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	ec 59       	subi	r30, 0x9C	; 156
    1ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea6:	40 81       	ld	r20, Z
    1ea8:	51 81       	ldd	r21, Z+1	; 0x01
    1eaa:	84 17       	cp	r24, r20
    1eac:	95 07       	cpc	r25, r21
    1eae:	a1 f4       	brne	.+40     	; 0x1ed8 <canDrop+0x14c>
				if (term[ct][0] != -1)
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e0 5c       	subi	r30, 0xC0	; 192
    1ebc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	29 f0       	breq	.+10     	; 0x1ed0 <canDrop+0x144>
					nodeDrop(arm1, 1);
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	c8 01       	movw	r24, r16
    1ecc:	95 de       	rcall	.-726    	; 0x1bf8 <nodeDrop>
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <canDrop+0x14c>
				else nodeDrop(arm1, 0);
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	90 de       	rcall	.-736    	; 0x1bf8 <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    1ed8:	20 91 3e 02 	lds	r18, 0x023E
    1edc:	30 91 3f 02 	lds	r19, 0x023F
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 5a       	subi	r30, 0xAE	; 174
    1ee8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	40 91 64 02 	lds	r20, 0x0264
    1ef2:	50 91 65 02 	lds	r21, 0x0265
    1ef6:	48 17       	cp	r20, r24
    1ef8:	59 07       	cpc	r21, r25
    1efa:	41 f0       	breq	.+16     	; 0x1f0c <canDrop+0x180>
    1efc:	40 91 66 02 	lds	r20, 0x0266
    1f00:	50 91 67 02 	lds	r21, 0x0267
    1f04:	84 17       	cp	r24, r20
    1f06:	95 07       	cpc	r25, r21
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <canDrop+0x180>
    1f0a:	88 c0       	rjmp	.+272    	; 0x201c <canDrop+0x290>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	ee 0f       	add	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	e0 5c       	subi	r30, 0xC0	; 192
    1f18:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	4f 3f       	cpi	r20, 0xFF	; 255
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	d9 f0       	breq	.+54     	; 0x1f5a <canDrop+0x1ce>
    1f24:	f9 01       	movw	r30, r18
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	e0 5c       	subi	r30, 0xC0	; 192
    1f30:	fd 4f       	sbci	r31, 0xFD	; 253
    1f32:	22 81       	ldd	r18, Z+2	; 0x02
    1f34:	33 81       	ldd	r19, Z+3	; 0x03
    1f36:	2f 3f       	cpi	r18, 0xFF	; 255
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	79 f0       	breq	.+30     	; 0x1f5a <canDrop+0x1ce>
			{
				if (arm[arm0] == color[ct])
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	ec 59       	subi	r30, 0x9C	; 156
    1f44:	fd 4f       	sbci	r31, 0xFD	; 253
    1f46:	20 81       	ld	r18, Z
    1f48:	31 81       	ldd	r19, Z+1	; 0x01
    1f4a:	82 17       	cp	r24, r18
    1f4c:	93 07       	cpc	r25, r19
    1f4e:	19 f4       	brne	.+6      	; 0x1f56 <canDrop+0x1ca>
					dropPickup(arm0);
    1f50:	ce 01       	movw	r24, r28
    1f52:	c3 de       	rcall	.-634    	; 0x1cda <dropPickup>
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <canDrop+0x1ce>
				else dropPickup(arm1);
    1f56:	c8 01       	movw	r24, r16
    1f58:	c0 de       	rcall	.-640    	; 0x1cda <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    1f5a:	80 91 3e 02 	lds	r24, 0x023E
    1f5e:	90 91 3f 02 	lds	r25, 0x023F
    1f62:	fc 01       	movw	r30, r24
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	ee 5a       	subi	r30, 0xAE	; 174
    1f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f6c:	20 81       	ld	r18, Z
    1f6e:	31 81       	ldd	r19, Z+1	; 0x01
    1f70:	fe 01       	movw	r30, r28
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	ec 59       	subi	r30, 0x9C	; 156
    1f78:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7a:	40 81       	ld	r20, Z
    1f7c:	51 81       	ldd	r21, Z+1	; 0x01
    1f7e:	42 17       	cp	r20, r18
    1f80:	53 07       	cpc	r21, r19
    1f82:	11 f5       	brne	.+68     	; 0x1fc8 <canDrop+0x23c>
    1f84:	fc 01       	movw	r30, r24
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	e0 5c       	subi	r30, 0xC0	; 192
    1f90:	fd 4f       	sbci	r31, 0xFD	; 253
    1f92:	40 81       	ld	r20, Z
    1f94:	51 81       	ldd	r21, Z+1	; 0x01
    1f96:	4f 3f       	cpi	r20, 0xFF	; 255
    1f98:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <canDrop+0x21a>
				nodeDrop(arm0, 0);
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	2a de       	rcall	.-940    	; 0x1bf8 <nodeDrop>
    1fa4:	3b c0       	rjmp	.+118    	; 0x201c <canDrop+0x290>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	e0 5c       	subi	r30, 0xC0	; 192
    1fb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb4:	42 81       	ldd	r20, Z+2	; 0x02
    1fb6:	53 81       	ldd	r21, Z+3	; 0x03
    1fb8:	4f 3f       	cpi	r20, 0xFF	; 255
    1fba:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbc:	29 f4       	brne	.+10     	; 0x1fc8 <canDrop+0x23c>
				nodeDrop(arm0, 1);
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	19 de       	rcall	.-974    	; 0x1bf8 <nodeDrop>
    1fc6:	2a c0       	rjmp	.+84     	; 0x201c <canDrop+0x290>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    1fc8:	f8 01       	movw	r30, r16
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ec 59       	subi	r30, 0x9C	; 156
    1fd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fd2:	40 81       	ld	r20, Z
    1fd4:	51 81       	ldd	r21, Z+1	; 0x01
    1fd6:	24 17       	cp	r18, r20
    1fd8:	35 07       	cpc	r19, r21
    1fda:	01 f5       	brne	.+64     	; 0x201c <canDrop+0x290>
    1fdc:	fc 01       	movw	r30, r24
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	e0 5c       	subi	r30, 0xC0	; 192
    1fe8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fea:	20 81       	ld	r18, Z
    1fec:	31 81       	ldd	r19, Z+1	; 0x01
    1fee:	2f 3f       	cpi	r18, 0xFF	; 255
    1ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff2:	29 f4       	brne	.+10     	; 0x1ffe <canDrop+0x272>
				nodeDrop(arm1, 0);
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	fe dd       	rcall	.-1028   	; 0x1bf8 <nodeDrop>
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <canDrop+0x290>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    1ffe:	fc 01       	movw	r30, r24
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	e0 5c       	subi	r30, 0xC0	; 192
    200a:	fd 4f       	sbci	r31, 0xFD	; 253
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	21 f4       	brne	.+8      	; 0x201c <canDrop+0x290>
				nodeDrop(arm1, 1);
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	c8 01       	movw	r24, r16
    201a:	ee dd       	rcall	.-1060   	; 0x1bf8 <nodeDrop>

		}
	}
}
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	08 95       	ret

00002026 <newSort>:

void newSort()
{
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
	int t1, t2, a2 = -2, a1 = -2;
	if (arm[1] != -1)
    202e:	20 91 66 02 	lds	r18, 0x0266
    2032:	30 91 67 02 	lds	r19, 0x0267
    2036:	2f 3f       	cpi	r18, 0xFF	; 255
    2038:	1f ef       	ldi	r17, 0xFF	; 255
    203a:	31 07       	cpc	r19, r17
    203c:	41 f0       	breq	.+16     	; 0x204e <newSort+0x28>
	a2 = indicator[arm[1]];
    203e:	f9 01       	movw	r30, r18
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	e6 5a       	subi	r30, 0xA6	; 166
    2046:	fd 4f       	sbci	r31, 0xFD	; 253
    2048:	c0 81       	ld	r28, Z
    204a:	d1 81       	ldd	r29, Z+1	; 0x01
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    204e:	ce ef       	ldi	r28, 0xFE	; 254
    2050:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
    2052:	e0 91 64 02 	lds	r30, 0x0264
    2056:	f0 91 65 02 	lds	r31, 0x0265
    205a:	ef 3f       	cpi	r30, 0xFF	; 255
    205c:	4f ef       	ldi	r20, 0xFF	; 255
    205e:	f4 07       	cpc	r31, r20
    2060:	09 f4       	brne	.+2      	; 0x2064 <newSort+0x3e>
    2062:	7f c1       	rjmp	.+766    	; 0x2362 <__stack+0x163>
	a1 = indicator[arm[0]];
    2064:	df 01       	movw	r26, r30
    2066:	aa 0f       	add	r26, r26
    2068:	bb 1f       	adc	r27, r27
    206a:	a6 5a       	subi	r26, 0xA6	; 166
    206c:	bd 4f       	sbci	r27, 0xFD	; 253
    206e:	4d 91       	ld	r20, X+
    2070:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    2072:	80 91 3e 02 	lds	r24, 0x023E
    2076:	90 91 3f 02 	lds	r25, 0x023F
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	81 70       	andi	r24, 0x01	; 1
    207e:	90 78       	andi	r25, 0x80	; 128
    2080:	99 23       	and	r25, r25
    2082:	24 f4       	brge	.+8      	; 0x208c <newSort+0x66>
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	8e 6f       	ori	r24, 0xFE	; 254
    2088:	9f 6f       	ori	r25, 0xFF	; 255
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    208e:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    2090:	d0 93 3f 02 	sts	0x023F, r29
    2094:	c0 93 3e 02 	sts	0x023E, r28
		if (arm[1] == arm[0] && (visited[a2] == 0 || (term[a2][0] != -1 && term[a2][1] != -1)))
    2098:	2e 17       	cp	r18, r30
    209a:	3f 07       	cpc	r19, r31
    209c:	61 f5       	brne	.+88     	; 0x20f6 <newSort+0xd0>
    209e:	de 01       	movw	r26, r28
    20a0:	aa 0f       	add	r26, r26
    20a2:	bb 1f       	adc	r27, r27
    20a4:	a1 5e       	subi	r26, 0xE1	; 225
    20a6:	bd 4f       	sbci	r27, 0xFD	; 253
    20a8:	0d 90       	ld	r0, X+
    20aa:	bc 91       	ld	r27, X
    20ac:	a0 2d       	mov	r26, r0
    20ae:	ab 2b       	or	r26, r27
    20b0:	c9 f0       	breq	.+50     	; 0x20e4 <newSort+0xbe>
    20b2:	de 01       	movw	r26, r28
    20b4:	aa 0f       	add	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	aa 0f       	add	r26, r26
    20ba:	bb 1f       	adc	r27, r27
    20bc:	a0 5c       	subi	r26, 0xC0	; 192
    20be:	bd 4f       	sbci	r27, 0xFD	; 253
    20c0:	0d 90       	ld	r0, X+
    20c2:	bc 91       	ld	r27, X
    20c4:	a0 2d       	mov	r26, r0
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	b1 f0       	breq	.+44     	; 0x20f6 <newSort+0xd0>
    20ca:	de 01       	movw	r26, r28
    20cc:	aa 0f       	add	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	aa 0f       	add	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	a0 5c       	subi	r26, 0xC0	; 192
    20d6:	bd 4f       	sbci	r27, 0xFD	; 253
    20d8:	12 96       	adiw	r26, 0x02	; 2
    20da:	0d 90       	ld	r0, X+
    20dc:	bc 91       	ld	r27, X
    20de:	a0 2d       	mov	r26, r0
    20e0:	11 96       	adiw	r26, 0x01	; 1
    20e2:	49 f0       	breq	.+18     	; 0x20f6 <newSort+0xd0>
		{
			if (a2 == 0 || a2 == 3)
    20e4:	20 97       	sbiw	r28, 0x00	; 0
    20e6:	19 f0       	breq	.+6      	; 0x20ee <newSort+0xc8>
    20e8:	23 97       	sbiw	r28, 0x03	; 3
    20ea:	09 f0       	breq	.+2      	; 0x20ee <newSort+0xc8>
    20ec:	28 c1       	rjmp	.+592    	; 0x233e <__stack+0x13f>
			sortDrop(0, t1);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	b4 dd       	rcall	.-1176   	; 0x1c5c <sortDrop>
    20f4:	24 c1       	rjmp	.+584    	; 0x233e <__stack+0x13f>
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    20f6:	2f 3f       	cpi	r18, 0xFF	; 255
    20f8:	af ef       	ldi	r26, 0xFF	; 255
    20fa:	3a 07       	cpc	r19, r26
    20fc:	c1 f1       	breq	.+112    	; 0x216e <newSort+0x148>
    20fe:	de 01       	movw	r26, r28
    2100:	aa 0f       	add	r26, r26
    2102:	bb 1f       	adc	r27, r27
    2104:	aa 0f       	add	r26, r26
    2106:	bb 1f       	adc	r27, r27
    2108:	a0 5c       	subi	r26, 0xC0	; 192
    210a:	bd 4f       	sbci	r27, 0xFD	; 253
    210c:	0d 90       	ld	r0, X+
    210e:	bc 91       	ld	r27, X
    2110:	a0 2d       	mov	r26, r0
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	51 f0       	breq	.+20     	; 0x212a <newSort+0x104>
    2116:	cc 0f       	add	r28, r28
    2118:	dd 1f       	adc	r29, r29
    211a:	cc 0f       	add	r28, r28
    211c:	dd 1f       	adc	r29, r29
    211e:	c0 5c       	subi	r28, 0xC0	; 192
    2120:	dd 4f       	sbci	r29, 0xFD	; 253
    2122:	aa 81       	ldd	r26, Y+2	; 0x02
    2124:	bb 81       	ldd	r27, Y+3	; 0x03
    2126:	11 96       	adiw	r26, 0x01	; 1
    2128:	11 f5       	brne	.+68     	; 0x216e <newSort+0x148>
		{
			if (arm[0] == -1)
    212a:	31 96       	adiw	r30, 0x01	; 1
    212c:	09 f0       	breq	.+2      	; 0x2130 <newSort+0x10a>
    212e:	07 c1       	rjmp	.+526    	; 0x233e <__stack+0x13f>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2130:	9b 01       	movw	r18, r22
    2132:	22 0f       	add	r18, r18
    2134:	33 1f       	adc	r19, r19
    2136:	f9 01       	movw	r30, r18
    2138:	e6 5c       	subi	r30, 0xC6	; 198
    213a:	fd 4f       	sbci	r31, 0xFD	; 253
    213c:	40 81       	ld	r20, Z
    213e:	51 81       	ldd	r21, Z+1	; 0x01
    2140:	f9 01       	movw	r30, r18
    2142:	ee 5a       	subi	r30, 0xAE	; 174
    2144:	fd 4f       	sbci	r31, 0xFD	; 253
    2146:	20 81       	ld	r18, Z
    2148:	31 81       	ldd	r19, Z+1	; 0x01
    214a:	42 17       	cp	r20, r18
    214c:	53 07       	cpc	r21, r19
    214e:	59 f0       	breq	.+22     	; 0x2166 <newSort+0x140>
    2150:	fc 01       	movw	r30, r24
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 5a       	subi	r30, 0xAE	; 174
    2158:	fd 4f       	sbci	r31, 0xFD	; 253
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	48 17       	cp	r20, r24
    2160:	59 07       	cpc	r21, r25
    2162:	09 f0       	breq	.+2      	; 0x2166 <newSort+0x140>
    2164:	ec c0       	rjmp	.+472    	; 0x233e <__stack+0x13f>
				pickSort(0, t1);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	83 da       	rcall	.-2810   	; 0x1672 <pickSort>
    216c:	e8 c0       	rjmp	.+464    	; 0x233e <__stack+0x13f>
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    216e:	ef 3f       	cpi	r30, 0xFF	; 255
    2170:	af ef       	ldi	r26, 0xFF	; 255
    2172:	fa 07       	cpc	r31, r26
    2174:	09 f4       	brne	.+2      	; 0x2178 <newSort+0x152>
    2176:	51 c0       	rjmp	.+162    	; 0x221a <__stack+0x1b>
    2178:	da 01       	movw	r26, r20
    217a:	aa 0f       	add	r26, r26
    217c:	bb 1f       	adc	r27, r27
    217e:	aa 0f       	add	r26, r26
    2180:	bb 1f       	adc	r27, r27
    2182:	a0 5c       	subi	r26, 0xC0	; 192
    2184:	bd 4f       	sbci	r27, 0xFD	; 253
    2186:	0d 90       	ld	r0, X+
    2188:	bc 91       	ld	r27, X
    218a:	a0 2d       	mov	r26, r0
    218c:	11 96       	adiw	r26, 0x01	; 1
    218e:	09 f4       	brne	.+2      	; 0x2192 <newSort+0x16c>
    2190:	0a c1       	rjmp	.+532    	; 0x23a6 <__stack+0x1a7>
    2192:	da 01       	movw	r26, r20
    2194:	aa 0f       	add	r26, r26
    2196:	bb 1f       	adc	r27, r27
    2198:	aa 0f       	add	r26, r26
    219a:	bb 1f       	adc	r27, r27
    219c:	a0 5c       	subi	r26, 0xC0	; 192
    219e:	bd 4f       	sbci	r27, 0xFD	; 253
    21a0:	12 96       	adiw	r26, 0x02	; 2
    21a2:	0d 90       	ld	r0, X+
    21a4:	bc 91       	ld	r27, X
    21a6:	a0 2d       	mov	r26, r0
    21a8:	11 96       	adiw	r26, 0x01	; 1
    21aa:	b9 f5       	brne	.+110    	; 0x221a <__stack+0x1b>
    21ac:	ea c0       	rjmp	.+468    	; 0x2382 <__stack+0x183>
		{
			ct = a1;
			if (term[a1][0] == -1 || term[a1][1] == -1)
			{
				if (arm[1] == -1)
    21ae:	2f 3f       	cpi	r18, 0xFF	; 255
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <newSort+0x190>
    21b4:	c4 c0       	rjmp	.+392    	; 0x233e <__stack+0x13f>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    21b6:	9b 01       	movw	r18, r22
    21b8:	22 0f       	add	r18, r18
    21ba:	33 1f       	adc	r19, r19
    21bc:	f9 01       	movw	r30, r18
    21be:	e6 5c       	subi	r30, 0xC6	; 198
    21c0:	fd 4f       	sbci	r31, 0xFD	; 253
    21c2:	40 81       	ld	r20, Z
    21c4:	51 81       	ldd	r21, Z+1	; 0x01
    21c6:	f9 01       	movw	r30, r18
    21c8:	ee 5a       	subi	r30, 0xAE	; 174
    21ca:	fd 4f       	sbci	r31, 0xFD	; 253
    21cc:	20 81       	ld	r18, Z
    21ce:	31 81       	ldd	r19, Z+1	; 0x01
    21d0:	42 17       	cp	r20, r18
    21d2:	53 07       	cpc	r21, r19
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <newSort+0x1b2>
    21d6:	b3 c0       	rjmp	.+358    	; 0x233e <__stack+0x13f>
    21d8:	fc 01       	movw	r30, r24
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ee 5a       	subi	r30, 0xAE	; 174
    21e0:	fd 4f       	sbci	r31, 0xFD	; 253
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	48 17       	cp	r20, r24
    21e8:	59 07       	cpc	r21, r25
    21ea:	09 f0       	breq	.+2      	; 0x21ee <newSort+0x1c8>
    21ec:	a8 c0       	rjmp	.+336    	; 0x233e <__stack+0x13f>
					pickSort(0, t1);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	3f da       	rcall	.-2946   	; 0x1672 <pickSort>
    21f4:	a4 c0       	rjmp	.+328    	; 0x233e <__stack+0x13f>
				}
			}
			else	if (sort[t1] == -1 && arm[1] != -1)
    21f6:	fb 01       	movw	r30, r22
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	e6 5c       	subi	r30, 0xC6	; 198
    21fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	09 f0       	breq	.+2      	; 0x220a <__stack+0xb>
    2208:	9a c0       	rjmp	.+308    	; 0x233e <__stack+0x13f>
    220a:	2f 3f       	cpi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	09 f4       	brne	.+2      	; 0x2212 <__stack+0x13>
    2210:	96 c0       	rjmp	.+300    	; 0x233e <__stack+0x13f>
			sortDrop(0, t1);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	22 dd       	rcall	.-1468   	; 0x1c5c <sortDrop>
    2218:	92 c0       	rjmp	.+292    	; 0x233e <__stack+0x13f>
		}
		else	if (arm[1] != -1 && (sort[t1] == -1 && arm[0] != -1))
    221a:	2f 3f       	cpi	r18, 0xFF	; 255
    221c:	1f ef       	ldi	r17, 0xFF	; 255
    221e:	31 07       	cpc	r19, r17
    2220:	a1 f0       	breq	.+40     	; 0x224a <__stack+0x4b>
    2222:	db 01       	movw	r26, r22
    2224:	aa 0f       	add	r26, r26
    2226:	bb 1f       	adc	r27, r27
    2228:	a6 5c       	subi	r26, 0xC6	; 198
    222a:	bd 4f       	sbci	r27, 0xFD	; 253
    222c:	8d 91       	ld	r24, X+
    222e:	9c 91       	ld	r25, X
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	31 f4       	brne	.+12     	; 0x2240 <__stack+0x41>
    2234:	31 96       	adiw	r30, 0x01	; 1
    2236:	21 f0       	breq	.+8      	; 0x2240 <__stack+0x41>
		sortDrop(0, t1);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	0f dd       	rcall	.-1506   	; 0x1c5c <sortDrop>
    223e:	7f c0       	rjmp	.+254    	; 0x233e <__stack+0x13f>
		else if (arm[1] != -1)
		ct = arm[1];
    2240:	30 93 3f 02 	sts	0x023F, r19
    2244:	20 93 3e 02 	sts	0x023E, r18
    2248:	7a c0       	rjmp	.+244    	; 0x233e <__stack+0x13f>
		else ct = arm[0];
    224a:	f0 93 3f 02 	sts	0x023F, r31
    224e:	e0 93 3e 02 	sts	0x023E, r30
    2252:	75 c0       	rjmp	.+234    	; 0x233e <__stack+0x13f>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    2254:	a8 01       	movw	r20, r16
    2256:	44 0f       	add	r20, r20
    2258:	55 1f       	adc	r21, r21
    225a:	fa 01       	movw	r30, r20
    225c:	e6 5c       	subi	r30, 0xC6	; 198
    225e:	fd 4f       	sbci	r31, 0xFD	; 253
    2260:	20 81       	ld	r18, Z
    2262:	31 81       	ldd	r19, Z+1	; 0x01
    2264:	fa 01       	movw	r30, r20
    2266:	ee 5a       	subi	r30, 0xAE	; 174
    2268:	fd 4f       	sbci	r31, 0xFD	; 253
    226a:	40 81       	ld	r20, Z
    226c:	51 81       	ldd	r21, Z+1	; 0x01
    226e:	24 17       	cp	r18, r20
    2270:	35 07       	cpc	r19, r21
    2272:	51 f0       	breq	.+20     	; 0x2288 <__stack+0x89>
    2274:	fc 01       	movw	r30, r24
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	ee 5a       	subi	r30, 0xAE	; 174
    227c:	fd 4f       	sbci	r31, 0xFD	; 253
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	26 17       	cp	r18, r22
    2284:	37 07       	cpc	r19, r23
    2286:	81 f4       	brne	.+32     	; 0x22a8 <__stack+0xa9>
    2288:	2f 3f       	cpi	r18, 0xFF	; 255
    228a:	af ef       	ldi	r26, 0xFF	; 255
    228c:	3a 07       	cpc	r19, r26
    228e:	31 f1       	breq	.+76     	; 0x22dc <__stack+0xdd>
		ct = indicator[sort[t1]];
    2290:	f9 01       	movw	r30, r18
    2292:	ee 0f       	add	r30, r30
    2294:	ff 1f       	adc	r31, r31
    2296:	e6 5a       	subi	r30, 0xA6	; 166
    2298:	fd 4f       	sbci	r31, 0xFD	; 253
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	90 93 3f 02 	sts	0x023F, r25
    22a2:	80 93 3e 02 	sts	0x023E, r24
    22a6:	4b c0       	rjmp	.+150    	; 0x233e <__stack+0x13f>
		else if (sort[t1] != -1)
    22a8:	2f 3f       	cpi	r18, 0xFF	; 255
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	b9 f0       	breq	.+46     	; 0x22dc <__stack+0xdd>
		{
			pickSort(1, t1);
    22ae:	b8 01       	movw	r22, r16
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	de d9       	rcall	.-3140   	; 0x1672 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    22b6:	0f 5f       	subi	r16, 0xFF	; 255
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	01 70       	andi	r16, 0x01	; 1
    22bc:	10 78       	andi	r17, 0x80	; 128
    22be:	11 23       	and	r17, r17
    22c0:	34 f4       	brge	.+12     	; 0x22ce <__stack+0xcf>
    22c2:	01 50       	subi	r16, 0x01	; 1
    22c4:	11 09       	sbc	r17, r1
    22c6:	0e 6f       	ori	r16, 0xFE	; 254
    22c8:	1f 6f       	ori	r17, 0xFF	; 255
    22ca:	0f 5f       	subi	r16, 0xFF	; 255
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	0c 5f       	subi	r16, 0xFC	; 252
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	10 93 3f 02 	sts	0x023F, r17
    22d6:	00 93 3e 02 	sts	0x023E, r16
    22da:	31 c0       	rjmp	.+98     	; 0x233e <__stack+0x13f>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    22dc:	f8 01       	movw	r30, r16
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	e1 5e       	subi	r30, 0xE1	; 225
    22e4:	fd 4f       	sbci	r31, 0xFD	; 253
    22e6:	20 81       	ld	r18, Z
    22e8:	31 81       	ldd	r19, Z+1	; 0x01
    22ea:	21 30       	cpi	r18, 0x01	; 1
    22ec:	31 05       	cpc	r19, r1
    22ee:	19 f5       	brne	.+70     	; 0x2336 <__stack+0x137>
    22f0:	f8 01       	movw	r30, r16
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	e0 5c       	subi	r30, 0xC0	; 192
    22fc:	fd 4f       	sbci	r31, 0xFD	; 253
    22fe:	20 81       	ld	r18, Z
    2300:	31 81       	ldd	r19, Z+1	; 0x01
    2302:	42 17       	cp	r20, r18
    2304:	53 07       	cpc	r21, r19
    2306:	19 f0       	breq	.+6      	; 0x230e <__stack+0x10f>
    2308:	2f 3f       	cpi	r18, 0xFF	; 255
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	a1 f4       	brne	.+40     	; 0x2336 <__stack+0x137>
    230e:	f8 01       	movw	r30, r16
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e0 5c       	subi	r30, 0xC0	; 192
    231a:	fd 4f       	sbci	r31, 0xFD	; 253
    231c:	22 81       	ldd	r18, Z+2	; 0x02
    231e:	33 81       	ldd	r19, Z+3	; 0x03
    2320:	42 17       	cp	r20, r18
    2322:	53 07       	cpc	r21, r19
    2324:	19 f0       	breq	.+6      	; 0x232c <__stack+0x12d>
    2326:	2f 3f       	cpi	r18, 0xFF	; 255
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	29 f4       	brne	.+10     	; 0x2336 <__stack+0x137>
		ct = t2;
    232c:	90 93 3f 02 	sts	0x023F, r25
    2330:	80 93 3e 02 	sts	0x023E, r24
    2334:	04 c0       	rjmp	.+8      	; 0x233e <__stack+0x13f>
		else ct = t1;
    2336:	10 93 3f 02 	sts	0x023F, r17
    233a:	00 93 3e 02 	sts	0x023E, r16
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    233e:	80 91 3e 02 	lds	r24, 0x023E
    2342:	90 91 3f 02 	lds	r25, 0x023F
    2346:	02 96       	adiw	r24, 0x02	; 2
    2348:	83 70       	andi	r24, 0x03	; 3
    234a:	90 78       	andi	r25, 0x80	; 128
    234c:	99 23       	and	r25, r25
    234e:	24 f4       	brge	.+8      	; 0x2358 <__stack+0x159>
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	8c 6f       	ori	r24, 0xFC	; 252
    2354:	9f 6f       	ori	r25, 0xFF	; 255
    2356:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2358:	90 93 63 02 	sts	0x0263, r25
    235c:	80 93 62 02 	sts	0x0262, r24
    2360:	2e c0       	rjmp	.+92     	; 0x23be <__stack+0x1bf>
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
	a1 = indicator[arm[0]];

	t1 = (ct + 1) % 2;
    2362:	80 91 3e 02 	lds	r24, 0x023E
    2366:	90 91 3f 02 	lds	r25, 0x023F
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	62 e0       	ldi	r22, 0x02	; 2
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	79 d5       	rcall	.+2802   	; 0x2e64 <__divmodhi4>
    2372:	8c 01       	movw	r16, r24
    2374:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2376:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
    2378:	2f 3f       	cpi	r18, 0xFF	; 255
    237a:	af ef       	ldi	r26, 0xFF	; 255
    237c:	3a 07       	cpc	r19, r26
    237e:	c1 f4       	brne	.+48     	; 0x23b0 <__stack+0x1b1>
    2380:	69 cf       	rjmp	.-302    	; 0x2254 <__stack+0x55>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    2382:	50 93 3f 02 	sts	0x023F, r21
    2386:	40 93 3e 02 	sts	0x023E, r20
			if (term[a1][0] == -1 || term[a1][1] == -1)
    238a:	fa 01       	movw	r30, r20
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	e0 5c       	subi	r30, 0xC0	; 192
    2396:	fd 4f       	sbci	r31, 0xFD	; 253
    2398:	42 81       	ldd	r20, Z+2	; 0x02
    239a:	53 81       	ldd	r21, Z+3	; 0x03
    239c:	4f 3f       	cpi	r20, 0xFF	; 255
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <__stack+0x1a5>
    23a2:	29 cf       	rjmp	.-430    	; 0x21f6 <newSort+0x1d0>
    23a4:	04 cf       	rjmp	.-504    	; 0x21ae <newSort+0x188>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    23a6:	50 93 3f 02 	sts	0x023F, r21
    23aa:	40 93 3e 02 	sts	0x023E, r20
    23ae:	ff ce       	rjmp	.-514    	; 0x21ae <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    23b0:	d0 93 3f 02 	sts	0x023F, r29
    23b4:	c0 93 3e 02 	sts	0x023E, r28
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    23b8:	4e ef       	ldi	r20, 0xFE	; 254
    23ba:	5f ef       	ldi	r21, 0xFF	; 255
    23bc:	9c ce       	rjmp	.-712    	; 0x20f6 <newSort+0xd0>
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	08 95       	ret

000023c8 <sortCheck>:
void sortCheck()
{
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    23e0:	40 91 3e 02 	lds	r20, 0x023E
    23e4:	50 91 3f 02 	lds	r21, 0x023F
    23e8:	42 30       	cpi	r20, 0x02	; 2
    23ea:	51 05       	cpc	r21, r1
    23ec:	30 f4       	brcc	.+12     	; 0x23fa <sortCheck+0x32>
    23ee:	80 91 09 02 	lds	r24, 0x0209
    23f2:	90 91 0a 02 	lds	r25, 0x020A
    23f6:	02 97       	sbiw	r24, 0x02	; 2
    23f8:	79 f0       	breq	.+30     	; 0x2418 <sortCheck+0x50>
    23fa:	ca 01       	movw	r24, r20
    23fc:	02 97       	sbiw	r24, 0x02	; 2
    23fe:	02 97       	sbiw	r24, 0x02	; 2
    2400:	80 f4       	brcc	.+32     	; 0x2422 <sortCheck+0x5a>
    2402:	80 91 09 02 	lds	r24, 0x0209
    2406:	90 91 0a 02 	lds	r25, 0x020A
    240a:	89 2b       	or	r24, r25
    240c:	79 f0       	breq	.+30     	; 0x242c <sortCheck+0x64>
}
void sortCheck()
{
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    240e:	01 e0       	ldi	r16, 0x01	; 1
    2410:	10 e0       	ldi	r17, 0x00	; 0
    2412:	c0 e0       	ldi	r28, 0x00	; 0
    2414:	d0 e0       	ldi	r29, 0x00	; 0
    2416:	0e c0       	rjmp	.+28     	; 0x2434 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2418:	00 e0       	ldi	r16, 0x00	; 0
    241a:	10 e0       	ldi	r17, 0x00	; 0
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    241c:	c1 e0       	ldi	r28, 0x01	; 1
    241e:	d0 e0       	ldi	r29, 0x00	; 0
    2420:	09 c0       	rjmp	.+18     	; 0x2434 <sortCheck+0x6c>
}
void sortCheck()
{
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2422:	01 e0       	ldi	r16, 0x01	; 1
    2424:	10 e0       	ldi	r17, 0x00	; 0
    2426:	c0 e0       	ldi	r28, 0x00	; 0
    2428:	d0 e0       	ldi	r29, 0x00	; 0
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    242c:	00 e0       	ldi	r16, 0x00	; 0
    242e:	10 e0       	ldi	r17, 0x00	; 0
	//forward_mm(70);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2430:	c1 e0       	ldi	r28, 0x01	; 1
    2432:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    2434:	9a 01       	movw	r18, r20
    2436:	21 70       	andi	r18, 0x01	; 1
    2438:	30 78       	andi	r19, 0x80	; 128
    243a:	33 23       	and	r19, r19
    243c:	34 f4       	brge	.+12     	; 0x244a <sortCheck+0x82>
    243e:	21 50       	subi	r18, 0x01	; 1
    2440:	31 09       	sbc	r19, r1
    2442:	2e 6f       	ori	r18, 0xFE	; 254
    2444:	3f 6f       	ori	r19, 0xFF	; 255
    2446:	2f 5f       	subi	r18, 0xFF	; 255
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	b2 2e       	mov	r11, r18
    244c:	a3 2e       	mov	r10, r19
    244e:	f9 01       	movw	r30, r18
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	e6 5c       	subi	r30, 0xC6	; 198
    2456:	fd 4f       	sbci	r31, 0xFD	; 253
    2458:	20 81       	ld	r18, Z
    245a:	31 81       	ldd	r19, Z+1	; 0x01
    245c:	fa 01       	movw	r30, r20
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	ee 5a       	subi	r30, 0xAE	; 174
    2464:	fd 4f       	sbci	r31, 0xFD	; 253
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	28 17       	cp	r18, r24
    246c:	39 07       	cpc	r19, r25
    246e:	79 f0       	breq	.+30     	; 0x248e <sortCheck+0xc6>
    2470:	80 91 62 02 	lds	r24, 0x0262
    2474:	90 91 63 02 	lds	r25, 0x0263
    2478:	fc 01       	movw	r30, r24
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 5a       	subi	r30, 0xAE	; 174
    2480:	fd 4f       	sbci	r31, 0xFD	; 253
    2482:	40 81       	ld	r20, Z
    2484:	51 81       	ldd	r21, Z+1	; 0x01
    2486:	24 17       	cp	r18, r20
    2488:	35 07       	cpc	r19, r21
    248a:	09 f0       	breq	.+2      	; 0x248e <sortCheck+0xc6>
    248c:	a6 c0       	rjmp	.+332    	; 0x25da <sortCheck+0x212>
	{
		if (armCount>0)
    248e:	80 91 04 02 	lds	r24, 0x0204
    2492:	90 91 05 02 	lds	r25, 0x0205
    2496:	18 16       	cp	r1, r24
    2498:	19 06       	cpc	r1, r25
    249a:	0c f0       	brlt	.+2      	; 0x249e <sortCheck+0xd6>
    249c:	95 c0       	rjmp	.+298    	; 0x25c8 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    249e:	f9 01       	movw	r30, r18
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	e6 5a       	subi	r30, 0xA6	; 166
    24a6:	fd 4f       	sbci	r31, 0xFD	; 253
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	70 93 3f 02 	sts	0x023F, r23
    24b0:	60 93 3e 02 	sts	0x023E, r22
			if (arm[arm0] == -1)
    24b4:	fe 01       	movw	r30, r28
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	ec 59       	subi	r30, 0x9C	; 156
    24bc:	fd 4f       	sbci	r31, 0xFD	; 253
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	69 f4       	brne	.+26     	; 0x24e0 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    24c6:	61 70       	andi	r22, 0x01	; 1
    24c8:	70 78       	andi	r23, 0x80	; 128
    24ca:	77 23       	and	r23, r23
    24cc:	34 f4       	brge	.+12     	; 0x24da <sortCheck+0x112>
    24ce:	61 50       	subi	r22, 0x01	; 1
    24d0:	71 09       	sbc	r23, r1
    24d2:	6e 6f       	ori	r22, 0xFE	; 254
    24d4:	7f 6f       	ori	r23, 0xFF	; 255
    24d6:	6f 5f       	subi	r22, 0xFF	; 255
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	ce 01       	movw	r24, r28
    24dc:	ca d8       	rcall	.-3692   	; 0x1672 <pickSort>
    24de:	15 c0       	rjmp	.+42     	; 0x250a <sortCheck+0x142>
			else if (arm[arm1] == -1)
    24e0:	f8 01       	movw	r30, r16
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	ec 59       	subi	r30, 0x9C	; 156
    24e8:	fd 4f       	sbci	r31, 0xFD	; 253
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	61 f4       	brne	.+24     	; 0x250a <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    24f2:	61 70       	andi	r22, 0x01	; 1
    24f4:	70 78       	andi	r23, 0x80	; 128
    24f6:	77 23       	and	r23, r23
    24f8:	34 f4       	brge	.+12     	; 0x2506 <sortCheck+0x13e>
    24fa:	61 50       	subi	r22, 0x01	; 1
    24fc:	71 09       	sbc	r23, r1
    24fe:	6e 6f       	ori	r22, 0xFE	; 254
    2500:	7f 6f       	ori	r23, 0xFF	; 255
    2502:	6f 5f       	subi	r22, 0xFF	; 255
    2504:	7f 4f       	sbci	r23, 0xFF	; 255
    2506:	c8 01       	movw	r24, r16
    2508:	b4 d8       	rcall	.-3736   	; 0x1672 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    250a:	80 91 04 02 	lds	r24, 0x0204
    250e:	90 91 05 02 	lds	r25, 0x0205
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	09 f4       	brne	.+2      	; 0x2518 <sortCheck+0x150>
    2516:	6d c1       	rjmp	.+730    	; 0x27f2 <sortCheck+0x42a>
    2518:	80 91 3e 02 	lds	r24, 0x023E
    251c:	90 91 3f 02 	lds	r25, 0x023F
    2520:	fc 01       	movw	r30, r24
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	e0 5c       	subi	r30, 0xC0	; 192
    252c:	fd 4f       	sbci	r31, 0xFD	; 253
    252e:	20 81       	ld	r18, Z
    2530:	31 81       	ldd	r19, Z+1	; 0x01
    2532:	2f 3f       	cpi	r18, 0xFF	; 255
    2534:	3f 4f       	sbci	r19, 0xFF	; 255
    2536:	09 f4       	brne	.+2      	; 0x253a <sortCheck+0x172>
    2538:	5c c1       	rjmp	.+696    	; 0x27f2 <sortCheck+0x42a>
    253a:	fc 01       	movw	r30, r24
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	e0 5c       	subi	r30, 0xC0	; 192
    2546:	fd 4f       	sbci	r31, 0xFD	; 253
    2548:	22 81       	ldd	r18, Z+2	; 0x02
    254a:	33 81       	ldd	r19, Z+3	; 0x03
    254c:	2f 3f       	cpi	r18, 0xFF	; 255
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	09 f4       	brne	.+2      	; 0x2554 <sortCheck+0x18c>
    2552:	4f c1       	rjmp	.+670    	; 0x27f2 <sortCheck+0x42a>
    2554:	9c 01       	movw	r18, r24
    2556:	21 70       	andi	r18, 0x01	; 1
    2558:	30 78       	andi	r19, 0x80	; 128
    255a:	33 23       	and	r19, r19
    255c:	34 f4       	brge	.+12     	; 0x256a <sortCheck+0x1a2>
    255e:	21 50       	subi	r18, 0x01	; 1
    2560:	31 09       	sbc	r19, r1
    2562:	2e 6f       	ori	r18, 0xFE	; 254
    2564:	3f 6f       	ori	r19, 0xFF	; 255
    2566:	2f 5f       	subi	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	62 2f       	mov	r22, r18
    256c:	73 2f       	mov	r23, r19
    256e:	f9 01       	movw	r30, r18
    2570:	ee 0f       	add	r30, r30
    2572:	ff 1f       	adc	r31, r31
    2574:	e6 5c       	subi	r30, 0xC6	; 198
    2576:	fd 4f       	sbci	r31, 0xFD	; 253
    2578:	20 81       	ld	r18, Z
    257a:	31 81       	ldd	r19, Z+1	; 0x01
    257c:	2f 3f       	cpi	r18, 0xFF	; 255
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	09 f0       	breq	.+2      	; 0x2584 <sortCheck+0x1bc>
    2582:	37 c1       	rjmp	.+622    	; 0x27f2 <sortCheck+0x42a>
			{
				if (arm[arm0] == color[ct])
    2584:	fc 01       	movw	r30, r24
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	ee 5a       	subi	r30, 0xAE	; 174
    258c:	fd 4f       	sbci	r31, 0xFD	; 253
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	fe 01       	movw	r30, r28
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	ec 59       	subi	r30, 0x9C	; 156
    259a:	fd 4f       	sbci	r31, 0xFD	; 253
    259c:	20 81       	ld	r18, Z
    259e:	31 81       	ldd	r19, Z+1	; 0x01
    25a0:	28 17       	cp	r18, r24
    25a2:	39 07       	cpc	r19, r25
    25a4:	19 f4       	brne	.+6      	; 0x25ac <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    25a6:	c8 01       	movw	r24, r16
    25a8:	59 db       	rcall	.-2382   	; 0x1c5c <sortDrop>
    25aa:	23 c1       	rjmp	.+582    	; 0x27f2 <sortCheck+0x42a>
				else if (arm[arm1] == color[ct])
    25ac:	f8 01       	movw	r30, r16
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	ec 59       	subi	r30, 0x9C	; 156
    25b4:	fd 4f       	sbci	r31, 0xFD	; 253
    25b6:	20 81       	ld	r18, Z
    25b8:	31 81       	ldd	r19, Z+1	; 0x01
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	09 f0       	breq	.+2      	; 0x25c2 <sortCheck+0x1fa>
    25c0:	18 c1       	rjmp	.+560    	; 0x27f2 <sortCheck+0x42a>
					sortDrop(arm0, ct % 2);
    25c2:	ce 01       	movw	r24, r28
    25c4:	4b db       	rcall	.-2410   	; 0x1c5c <sortDrop>
    25c6:	15 c1       	rjmp	.+554    	; 0x27f2 <sortCheck+0x42a>
			}
		}
		else ct = adj;
    25c8:	80 91 62 02 	lds	r24, 0x0262
    25cc:	90 91 63 02 	lds	r25, 0x0263
    25d0:	90 93 3f 02 	sts	0x023F, r25
    25d4:	80 93 3e 02 	sts	0x023E, r24
    25d8:	0c c1       	rjmp	.+536    	; 0x27f2 <sortCheck+0x42a>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    25da:	fe 01       	movw	r30, r28
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	ec 59       	subi	r30, 0x9C	; 156
    25e2:	fd 4f       	sbci	r31, 0xFD	; 253
    25e4:	01 90       	ld	r0, Z+
    25e6:	f0 81       	ld	r31, Z
    25e8:	e0 2d       	mov	r30, r0
    25ea:	4e 17       	cp	r20, r30
    25ec:	5f 07       	cpc	r21, r31
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <sortCheck+0x22a>
    25f0:	8f c0       	rjmp	.+286    	; 0x2710 <sortCheck+0x348>
    25f2:	d8 01       	movw	r26, r16
    25f4:	aa 0f       	add	r26, r26
    25f6:	bb 1f       	adc	r27, r27
    25f8:	ac 59       	subi	r26, 0x9C	; 156
    25fa:	bd 4f       	sbci	r27, 0xFD	; 253
    25fc:	8d 90       	ld	r8, X+
    25fe:	9c 90       	ld	r9, X
    2600:	48 15       	cp	r20, r8
    2602:	59 05       	cpc	r21, r9
    2604:	09 f4       	brne	.+2      	; 0x2608 <sortCheck+0x240>
    2606:	84 c0       	rjmp	.+264    	; 0x2710 <sortCheck+0x348>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2608:	e0 90 04 02 	lds	r14, 0x0204
    260c:	f0 90 05 02 	lds	r15, 0x0205
    2610:	e1 14       	cp	r14, r1
    2612:	f1 04       	cpc	r15, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <sortCheck+0x250>
    2616:	4e c0       	rjmp	.+156    	; 0x26b4 <sortCheck+0x2ec>
    2618:	b1 e0       	ldi	r27, 0x01	; 1
    261a:	eb 16       	cp	r14, r27
    261c:	f1 04       	cpc	r15, r1
    261e:	29 f4       	brne	.+10     	; 0x262a <sortCheck+0x262>
    2620:	2f 3f       	cpi	r18, 0xFF	; 255
    2622:	6f ef       	ldi	r22, 0xFF	; 255
    2624:	36 07       	cpc	r19, r22
    2626:	b1 f5       	brne	.+108    	; 0x2694 <sortCheck+0x2cc>
    2628:	09 c0       	rjmp	.+18     	; 0x263c <sortCheck+0x274>
    262a:	67 01       	movw	r12, r14
    262c:	71 e0       	ldi	r23, 0x01	; 1
    262e:	c7 1a       	sub	r12, r23
    2630:	d1 08       	sbc	r13, r1
    2632:	a2 e0       	ldi	r26, 0x02	; 2
    2634:	ca 16       	cp	r12, r26
    2636:	d1 04       	cpc	r13, r1
    2638:	08 f0       	brcs	.+2      	; 0x263c <sortCheck+0x274>
    263a:	65 c0       	rjmp	.+202    	; 0x2706 <sortCheck+0x33e>
    263c:	6c 01       	movw	r12, r24
    263e:	cc 0c       	add	r12, r12
    2640:	dd 1c       	adc	r13, r13
    2642:	cc 0c       	add	r12, r12
    2644:	dd 1c       	adc	r13, r13
    2646:	b6 01       	movw	r22, r12
    2648:	60 5c       	subi	r22, 0xC0	; 192
    264a:	7d 4f       	sbci	r23, 0xFD	; 253
    264c:	db 01       	movw	r26, r22
    264e:	cd 90       	ld	r12, X+
    2650:	dc 90       	ld	r13, X
    2652:	4c 15       	cp	r20, r12
    2654:	5d 05       	cpc	r21, r13
    2656:	21 f0       	breq	.+8      	; 0x2660 <sortCheck+0x298>
    2658:	cd 20       	and	r12, r13
    265a:	c0 94       	com	r12
    265c:	09 f0       	breq	.+2      	; 0x2660 <sortCheck+0x298>
    265e:	53 c0       	rjmp	.+166    	; 0x2706 <sortCheck+0x33e>
    2660:	6c 01       	movw	r12, r24
    2662:	cc 0c       	add	r12, r12
    2664:	dd 1c       	adc	r13, r13
    2666:	cc 0c       	add	r12, r12
    2668:	dd 1c       	adc	r13, r13
    266a:	b6 01       	movw	r22, r12
    266c:	60 5c       	subi	r22, 0xC0	; 192
    266e:	7d 4f       	sbci	r23, 0xFD	; 253
    2670:	db 01       	movw	r26, r22
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	cd 90       	ld	r12, X+
    2676:	dc 90       	ld	r13, X
    2678:	13 97       	sbiw	r26, 0x03	; 3
    267a:	4c 15       	cp	r20, r12
    267c:	5d 05       	cpc	r21, r13
    267e:	21 f0       	breq	.+8      	; 0x2688 <sortCheck+0x2c0>
    2680:	cd 20       	and	r12, r13
    2682:	c0 94       	com	r12
    2684:	09 f0       	breq	.+2      	; 0x2688 <sortCheck+0x2c0>
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <sortCheck+0x33e>
		{
			if (armCount>0)
    2688:	1e 14       	cp	r1, r14
    268a:	1f 04       	cpc	r1, r15
    268c:	9c f4       	brge	.+38     	; 0x26b4 <sortCheck+0x2ec>
			{
				if (sort[ct % 2] != -1)
    268e:	2f 3f       	cpi	r18, 0xFF	; 255
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	81 f0       	breq	.+32     	; 0x26b4 <sortCheck+0x2ec>
					if (arm[arm0] == -1)
    2694:	31 96       	adiw	r30, 0x01	; 1
    2696:	31 f4       	brne	.+12     	; 0x26a4 <sortCheck+0x2dc>
						pickSort(arm0, ct % 2);
    2698:	6b 2d       	mov	r22, r11
    269a:	7a 2d       	mov	r23, r10
    269c:	ce 01       	movw	r24, r28
    269e:	0e 94 39 0b 	call	0x1672	; 0x1672 <pickSort>
    26a2:	08 c0       	rjmp	.+16     	; 0x26b4 <sortCheck+0x2ec>
					else if (arm[arm1] == -1)
    26a4:	89 20       	and	r8, r9
    26a6:	80 94       	com	r8
    26a8:	29 f4       	brne	.+10     	; 0x26b4 <sortCheck+0x2ec>
						pickSort(arm1, ct % 2);
    26aa:	6b 2d       	mov	r22, r11
    26ac:	7a 2d       	mov	r23, r10
    26ae:	c8 01       	movw	r24, r16
    26b0:	0e 94 39 0b 	call	0x1672	; 0x1672 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    26b4:	80 91 3e 02 	lds	r24, 0x023E
    26b8:	90 91 3f 02 	lds	r25, 0x023F
    26bc:	bc 01       	movw	r22, r24
    26be:	6f 5f       	subi	r22, 0xFF	; 255
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	61 70       	andi	r22, 0x01	; 1
    26c4:	70 78       	andi	r23, 0x80	; 128
    26c6:	77 23       	and	r23, r23
    26c8:	34 f4       	brge	.+12     	; 0x26d6 <sortCheck+0x30e>
    26ca:	61 50       	subi	r22, 0x01	; 1
    26cc:	71 09       	sbc	r23, r1
    26ce:	6e 6f       	ori	r22, 0xFE	; 254
    26d0:	7f 6f       	ori	r23, 0xFF	; 255
    26d2:	6f 5f       	subi	r22, 0xFF	; 255
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	6c 5f       	subi	r22, 0xFC	; 252
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255
    26da:	81 70       	andi	r24, 0x01	; 1
    26dc:	90 78       	andi	r25, 0x80	; 128
    26de:	99 23       	and	r25, r25
    26e0:	24 f4       	brge	.+8      	; 0x26ea <sortCheck+0x322>
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	8e 6f       	ori	r24, 0xFE	; 254
    26e6:	9f 6f       	ori	r25, 0xFF	; 255
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	04 96       	adiw	r24, 0x04	; 4
    26ec:	0e 94 11 07 	call	0xe22	; 0xe22 <traverseToSort>
			newSort();
    26f0:	9a dc       	rcall	.-1740   	; 0x2026 <newSort>
			if (ct == 4 || ct == 5)
    26f2:	80 91 3e 02 	lds	r24, 0x023E
    26f6:	90 91 3f 02 	lds	r25, 0x023F
    26fa:	04 97       	sbiw	r24, 0x04	; 4
    26fc:	02 97       	sbiw	r24, 0x02	; 2
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <sortCheck+0x33a>
    2700:	89 c0       	rjmp	.+274    	; 0x2814 <sortCheck+0x44c>
				newSort();
    2702:	91 dc       	rcall	.-1758   	; 0x2026 <newSort>
    2704:	87 c0       	rjmp	.+270    	; 0x2814 <sortCheck+0x44c>
			return;
		}
		else ct = adj;
    2706:	90 93 3f 02 	sts	0x023F, r25
    270a:	80 93 3e 02 	sts	0x023E, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    270e:	71 c0       	rjmp	.+226    	; 0x27f2 <sortCheck+0x42a>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2710:	a0 91 04 02 	lds	r26, 0x0204
    2714:	b0 91 05 02 	lds	r27, 0x0205
    2718:	10 97       	sbiw	r26, 0x00	; 0
    271a:	c1 f5       	brne	.+112    	; 0x278c <sortCheck+0x3c4>
    271c:	dc 01       	movw	r26, r24
    271e:	aa 0f       	add	r26, r26
    2720:	bb 1f       	adc	r27, r27
    2722:	a1 5e       	subi	r26, 0xE1	; 225
    2724:	bd 4f       	sbci	r27, 0xFD	; 253
    2726:	0d 90       	ld	r0, X+
    2728:	bc 91       	ld	r27, X
    272a:	a0 2d       	mov	r26, r0
    272c:	a1 30       	cpi	r26, 0x01	; 1
    272e:	b1 05       	cpc	r27, r1
    2730:	d9 f4       	brne	.+54     	; 0x2768 <sortCheck+0x3a0>
    2732:	dc 01       	movw	r26, r24
    2734:	aa 0f       	add	r26, r26
    2736:	bb 1f       	adc	r27, r27
    2738:	aa 0f       	add	r26, r26
    273a:	bb 1f       	adc	r27, r27
    273c:	a0 5c       	subi	r26, 0xC0	; 192
    273e:	bd 4f       	sbci	r27, 0xFD	; 253
    2740:	0d 90       	ld	r0, X+
    2742:	bc 91       	ld	r27, X
    2744:	a0 2d       	mov	r26, r0
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	09 f4       	brne	.+2      	; 0x274c <sortCheck+0x384>
    274a:	4b c0       	rjmp	.+150    	; 0x27e2 <sortCheck+0x41a>
    274c:	dc 01       	movw	r26, r24
    274e:	aa 0f       	add	r26, r26
    2750:	bb 1f       	adc	r27, r27
    2752:	aa 0f       	add	r26, r26
    2754:	bb 1f       	adc	r27, r27
    2756:	a0 5c       	subi	r26, 0xC0	; 192
    2758:	bd 4f       	sbci	r27, 0xFD	; 253
    275a:	12 96       	adiw	r26, 0x02	; 2
    275c:	8d 91       	ld	r24, X+
    275e:	9c 91       	ld	r25, X
    2760:	13 97       	sbiw	r26, 0x03	; 3
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	19 f4       	brne	.+6      	; 0x276c <sortCheck+0x3a4>
    2766:	3d c0       	rjmp	.+122    	; 0x27e2 <sortCheck+0x41a>
    2768:	ab 2b       	or	r26, r27
    276a:	d9 f5       	brne	.+118    	; 0x27e2 <sortCheck+0x41a>
    276c:	2f 3f       	cpi	r18, 0xFF	; 255
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	c1 f5       	brne	.+112    	; 0x27e2 <sortCheck+0x41a>
			if (arm[arm0] == color[adj])
    2772:	4e 17       	cp	r20, r30
    2774:	5f 07       	cpc	r21, r31
    2776:	29 f4       	brne	.+10     	; 0x2782 <sortCheck+0x3ba>
				sortDrop(arm1, ct % 2);
    2778:	6b 2d       	mov	r22, r11
    277a:	7a 2d       	mov	r23, r10
    277c:	c8 01       	movw	r24, r16
    277e:	6e da       	rcall	.-2852   	; 0x1c5c <sortDrop>
    2780:	30 c0       	rjmp	.+96     	; 0x27e2 <sortCheck+0x41a>
			else sortDrop(arm0, ct % 2);
    2782:	6b 2d       	mov	r22, r11
    2784:	7a 2d       	mov	r23, r10
    2786:	ce 01       	movw	r24, r28
    2788:	69 da       	rcall	.-2862   	; 0x1c5c <sortDrop>
    278a:	2b c0       	rjmp	.+86     	; 0x27e2 <sortCheck+0x41a>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    278c:	11 97       	sbiw	r26, 0x01	; 1
    278e:	49 f5       	brne	.+82     	; 0x27e2 <sortCheck+0x41a>
    2790:	dc 01       	movw	r26, r24
    2792:	aa 0f       	add	r26, r26
    2794:	bb 1f       	adc	r27, r27
    2796:	aa 0f       	add	r26, r26
    2798:	bb 1f       	adc	r27, r27
    279a:	a0 5c       	subi	r26, 0xC0	; 192
    279c:	bd 4f       	sbci	r27, 0xFD	; 253
    279e:	4d 91       	ld	r20, X+
    27a0:	5c 91       	ld	r21, X
    27a2:	4f 3f       	cpi	r20, 0xFF	; 255
    27a4:	5f 4f       	sbci	r21, 0xFF	; 255
    27a6:	69 f0       	breq	.+26     	; 0x27c2 <sortCheck+0x3fa>
    27a8:	dc 01       	movw	r26, r24
    27aa:	aa 0f       	add	r26, r26
    27ac:	bb 1f       	adc	r27, r27
    27ae:	aa 0f       	add	r26, r26
    27b0:	bb 1f       	adc	r27, r27
    27b2:	a0 5c       	subi	r26, 0xC0	; 192
    27b4:	bd 4f       	sbci	r27, 0xFD	; 253
    27b6:	12 96       	adiw	r26, 0x02	; 2
    27b8:	8d 91       	ld	r24, X+
    27ba:	9c 91       	ld	r25, X
    27bc:	13 97       	sbiw	r26, 0x03	; 3
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	81 f4       	brne	.+32     	; 0x27e2 <sortCheck+0x41a>
    27c2:	2f 3f       	cpi	r18, 0xFF	; 255
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	69 f0       	breq	.+26     	; 0x27e2 <sortCheck+0x41a>
			if (arm[arm0] == -1)
    27c8:	31 96       	adiw	r30, 0x01	; 1
    27ca:	31 f4       	brne	.+12     	; 0x27d8 <sortCheck+0x410>
				pickSort(arm0, ct % 2);
    27cc:	6b 2d       	mov	r22, r11
    27ce:	7a 2d       	mov	r23, r10
    27d0:	ce 01       	movw	r24, r28
    27d2:	0e 94 39 0b 	call	0x1672	; 0x1672 <pickSort>
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <sortCheck+0x41a>
			else	pickSort(arm1, ct % 2);
    27d8:	6b 2d       	mov	r22, r11
    27da:	7a 2d       	mov	r23, r10
    27dc:	c8 01       	movw	r24, r16
    27de:	0e 94 39 0b 	call	0x1672	; 0x1672 <pickSort>
			ct = adj;
    27e2:	80 91 62 02 	lds	r24, 0x0262
    27e6:	90 91 63 02 	lds	r25, 0x0263
    27ea:	90 93 3f 02 	sts	0x023F, r25
    27ee:	80 93 3e 02 	sts	0x023E, r24
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    27f2:	80 91 3e 02 	lds	r24, 0x023E
    27f6:	90 91 3f 02 	lds	r25, 0x023F
    27fa:	02 96       	adiw	r24, 0x02	; 2
    27fc:	83 70       	andi	r24, 0x03	; 3
    27fe:	90 78       	andi	r25, 0x80	; 128
    2800:	99 23       	and	r25, r25
    2802:	24 f4       	brge	.+8      	; 0x280c <sortCheck+0x444>
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	8c 6f       	ori	r24, 0xFC	; 252
    2808:	9f 6f       	ori	r25, 0xFF	; 255
    280a:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    280c:	90 93 63 02 	sts	0x0263, r25
    2810:	80 93 62 02 	sts	0x0262, r24
}
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	df 90       	pop	r13
    2822:	cf 90       	pop	r12
    2824:	bf 90       	pop	r11
    2826:	af 90       	pop	r10
    2828:	9f 90       	pop	r9
    282a:	8f 90       	pop	r8
    282c:	08 95       	ret

0000282e <__init__>:
					
*
*/
void __init__()
{
	init_devices();
    282e:	0e 94 0f 03 	call	0x61e	; 0x61e <init_devices>
	color_sensor_scaling();
    2832:	0e 94 98 01 	call	0x330	; 0x330 <color_sensor_scaling>
	
	threshold=7000;
    2836:	88 e5       	ldi	r24, 0x58	; 88
    2838:	9b e1       	ldi	r25, 0x1B	; 27
    283a:	90 93 28 02 	sts	0x0228, r25
    283e:	80 93 27 02 	sts	0x0227, r24
{
	//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
	float PositionPanServo = 0;
	//PositionPanServo: The value to which the servo is to be positioned at
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
    2842:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
    2846:	8e e4       	ldi	r24, 0x4E	; 78
    2848:	80 93 88 00 	sts	0x0088, r24
{
	//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
	float PositionTiltServo = 0;
	//PositionTiltServoServo: The value to which the servo is to be positioned at
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    284c:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    2850:	83 e5       	ldi	r24, 0x53	; 83
    2852:	80 93 8a 00 	sts	0x008A, r24
{
	//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
	float PositionServo = 0;
	//PositionServo: The value to which the servo is to be positioned at
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    2856:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    285a:	83 e2       	ldi	r24, 0x23	; 35
    285c:	80 93 8c 00 	sts	0x008C, r24
    2860:	2f ef       	ldi	r18, 0xFF	; 255
    2862:	8f ef       	ldi	r24, 0xFF	; 255
    2864:	98 e0       	ldi	r25, 0x08	; 8
    2866:	21 50       	subi	r18, 0x01	; 1
    2868:	80 40       	sbci	r24, 0x00	; 0
    286a:	90 40       	sbci	r25, 0x00	; 0
    286c:	e1 f7       	brne	.-8      	; 0x2866 <__init__+0x38>
    286e:	00 c0       	rjmp	.+0      	; 0x2870 <__init__+0x42>
    2870:	00 00       	nop
	servo_1(80);
	servo_2(90);
	servo_3(0);
	_delay_ms(200);
	//Free Servo to save Battery Power
 	servo_3_free();
    2872:	0e 94 ef 00 	call	0x1de	; 0x1de <servo_3_free>
 	servo_2_free();
    2876:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servo_2_free>
 	servo_1_free();
    287a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <servo_1_free>
	//Set the current terminal adjacent terminal direction and other terminal respectively
	ct = 3;
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	90 93 3f 02 	sts	0x023F, r25
    2886:	80 93 3e 02 	sts	0x023E, r24
	adj = 1;
    288a:	21 e0       	ldi	r18, 0x01	; 1
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	30 93 63 02 	sts	0x0263, r19
    2892:	20 93 62 02 	sts	0x0262, r18
	dir = 0;
    2896:	10 92 0a 02 	sts	0x020A, r1
    289a:	10 92 09 02 	sts	0x0209, r1
	ot = 3;
    289e:	90 93 01 02 	sts	0x0201, r25
    28a2:	80 93 00 02 	sts	0x0200, r24
    28a6:	08 95       	ret

000028a8 <setIndicatorAndColor>:
//**************END INITIALISATION*******************



void setIndicatorAndColor()
{
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	e0 e4       	ldi	r30, 0x40	; 64
    28ae:	f2 e0       	ldi	r31, 0x02	; 2
    28b0:	cf e1       	ldi	r28, 0x1F	; 31
    28b2:	d2 e0       	ldi	r29, 0x02	; 2
    28b4:	a2 e5       	ldi	r26, 0x52	; 82
    28b6:	b2 e0       	ldi	r27, 0x02	; 2
	int i;
	for (i = 0; i<4; i++)
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		term[i][0] = term[i][1] = -2;
    28bc:	2e ef       	ldi	r18, 0xFE	; 254
    28be:	3f ef       	ldi	r19, 0xFF	; 255
    28c0:	33 83       	std	Z+3, r19	; 0x03
    28c2:	22 83       	std	Z+2, r18	; 0x02
    28c4:	31 83       	std	Z+1, r19	; 0x01
    28c6:	20 83       	st	Z, r18
		visited[i] = 0;
    28c8:	19 92       	st	Y+, r1
    28ca:	19 92       	st	Y+, r1
		color[i]=i;
    28cc:	8d 93       	st	X+, r24
    28ce:	9d 93       	st	X+, r25


void setIndicatorAndColor()
{
	int i;
	for (i = 0; i<4; i++)
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	34 96       	adiw	r30, 0x04	; 4
    28d4:	84 30       	cpi	r24, 0x04	; 4
    28d6:	91 05       	cpc	r25, r1
    28d8:	99 f7       	brne	.-26     	; 0x28c0 <setIndicatorAndColor+0x18>
	{
		term[i][0] = term[i][1] = -2;
		visited[i] = 0;
		color[i]=i;
	}
	color[0]=0;
    28da:	10 92 53 02 	sts	0x0253, r1
    28de:	10 92 52 02 	sts	0x0252, r1
	color[1]=2;
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	30 93 55 02 	sts	0x0255, r19
    28ea:	20 93 54 02 	sts	0x0254, r18
	color[2]=0;
    28ee:	10 92 57 02 	sts	0x0257, r1
    28f2:	10 92 56 02 	sts	0x0256, r1
	color[3]=1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	90 93 59 02 	sts	0x0259, r25
    28fe:	80 93 58 02 	sts	0x0258, r24
	for (i = 0; i<4; i++)
		indicator[color[i]] = i;
    2902:	f9 01       	movw	r30, r18
    2904:	ee 0f       	add	r30, r30
    2906:	ff 1f       	adc	r31, r31
    2908:	e6 5a       	subi	r30, 0xA6	; 166
    290a:	fd 4f       	sbci	r31, 0xFD	; 253
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	30 93 5b 02 	sts	0x025B, r19
    2914:	20 93 5a 02 	sts	0x025A, r18
    2918:	fc 01       	movw	r30, r24
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	e6 5a       	subi	r30, 0xA6	; 166
    2920:	fd 4f       	sbci	r31, 0xFD	; 253
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
	sort[0] = sort[1] = -1;
    292a:	8f ef       	ldi	r24, 0xFF	; 255
    292c:	9f ef       	ldi	r25, 0xFF	; 255
    292e:	90 93 3d 02 	sts	0x023D, r25
    2932:	80 93 3c 02 	sts	0x023C, r24
    2936:	90 93 3b 02 	sts	0x023B, r25
    293a:	80 93 3a 02 	sts	0x023A, r24
	arm[0] = arm[1] = -1;
    293e:	90 93 67 02 	sts	0x0267, r25
    2942:	80 93 66 02 	sts	0x0266, r24
    2946:	90 93 65 02 	sts	0x0265, r25
    294a:	80 93 64 02 	sts	0x0264, r24
}
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <indicator_set>:
* Example Call:		indicator_set()
					
*
*/
void indicator_set()
{
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
	keepMoving_Indi();
    295e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <keepMoving_Indi>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2962:	08 e2       	ldi	r16, 0x28	; 40
    2964:	11 e0       	ldi	r17, 0x01	; 1
    2966:	0f 2e       	mov	r0, r31
    2968:	f0 ef       	ldi	r31, 0xF0	; 240
    296a:	ff 2e       	mov	r15, r31
    296c:	f0 2d       	mov	r31, r0
    296e:	f8 01       	movw	r30, r16
    2970:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2972:	ca e2       	ldi	r28, 0x2A	; 42
    2974:	d1 e0       	ldi	r29, 0x01	; 1
    2976:	f8 82       	st	Y, r15

	//turn efficiency
	//move forward for a proper turn
	velocity(op_v,op_v);
	forward_mm(160);
    2978:	80 ea       	ldi	r24, 0xA0	; 160
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <forward_mm>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2980:	f8 01       	movw	r30, r16
    2982:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2984:	f8 82       	st	Y, r15
	
	//scan 4
	//turn and scan the indicator block and store its value
	velocity(op_v,op_v);
	soft_right_2();
    2986:	0e 94 db 00 	call	0x1b6	; 0x1b6 <soft_right_2>
    298a:	ff ef       	ldi	r31, 0xFF	; 255
    298c:	2f e7       	ldi	r18, 0x7F	; 127
    298e:	8f e1       	ldi	r24, 0x1F	; 31
    2990:	f1 50       	subi	r31, 0x01	; 1
    2992:	20 40       	sbci	r18, 0x00	; 0
    2994:	80 40       	sbci	r24, 0x00	; 0
    2996:	e1 f7       	brne	.-8      	; 0x2990 <indicator_set+0x3c>
    2998:	00 c0       	rjmp	.+0      	; 0x299a <indicator_set+0x46>
    299a:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(2)<40);
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    29a2:	88 32       	cpi	r24, 0x28	; 40
    29a4:	d8 f3       	brcs	.-10     	; 0x299c <indicator_set+0x48>
	stop();
    29a6:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[3]=scan();
    29aa:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    29ae:	90 93 59 02 	sts	0x0259, r25
    29b2:	80 93 58 02 	sts	0x0258, r24
	
	//back to line
	soft_left();
    29b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <soft_left>
    29ba:	9f ef       	ldi	r25, 0xFF	; 255
    29bc:	ef ef       	ldi	r30, 0xFF	; 255
    29be:	fc e2       	ldi	r31, 0x2C	; 44
    29c0:	91 50       	subi	r25, 0x01	; 1
    29c2:	e0 40       	sbci	r30, 0x00	; 0
    29c4:	f0 40       	sbci	r31, 0x00	; 0
    29c6:	e1 f7       	brne	.-8      	; 0x29c0 <indicator_set+0x6c>
    29c8:	00 c0       	rjmp	.+0      	; 0x29ca <indicator_set+0x76>
    29ca:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    29d2:	88 32       	cpi	r24, 0x28	; 40
    29d4:	d8 f3       	brcs	.-10     	; 0x29cc <indicator_set+0x78>
	stop();
    29d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//scan 3
	//turn and scan the indicator block and store its value
	soft_left_2();
    29da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <soft_left_2>
    29de:	2f ef       	ldi	r18, 0xFF	; 255
    29e0:	8f e7       	ldi	r24, 0x7F	; 127
    29e2:	96 e1       	ldi	r25, 0x16	; 22
    29e4:	21 50       	subi	r18, 0x01	; 1
    29e6:	80 40       	sbci	r24, 0x00	; 0
    29e8:	90 40       	sbci	r25, 0x00	; 0
    29ea:	e1 f7       	brne	.-8      	; 0x29e4 <indicator_set+0x90>
    29ec:	00 c0       	rjmp	.+0      	; 0x29ee <indicator_set+0x9a>
    29ee:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    29f6:	88 32       	cpi	r24, 0x28	; 40
    29f8:	d8 f3       	brcs	.-10     	; 0x29f0 <indicator_set+0x9c>
		stop();
    29fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[2]=scan();
    29fe:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    2a02:	90 93 57 02 	sts	0x0257, r25
    2a06:	80 93 56 02 	sts	0x0256, r24
	
	//back to line
	soft_right();
    2a0a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <soft_right>
    2a0e:	ef ef       	ldi	r30, 0xFF	; 255
    2a10:	ff e7       	ldi	r31, 0x7F	; 127
    2a12:	2d e0       	ldi	r18, 0x0D	; 13
    2a14:	e1 50       	subi	r30, 0x01	; 1
    2a16:	f0 40       	sbci	r31, 0x00	; 0
    2a18:	20 40       	sbci	r18, 0x00	; 0
    2a1a:	e1 f7       	brne	.-8      	; 0x2a14 <indicator_set+0xc0>
    2a1c:	00 c0       	rjmp	.+0      	; 0x2a1e <indicator_set+0xca>
    2a1e:	00 00       	nop
	_delay_ms(300);
	while(ADC_Conversion(2)<40);
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a26:	88 32       	cpi	r24, 0x28	; 40
    2a28:	d8 f3       	brcs	.-10     	; 0x2a20 <indicator_set+0xcc>
	stop();
    2a2a:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//=====
	
	keepMoving_Indi();
    2a2e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <keepMoving_Indi>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2a32:	80 ef       	ldi	r24, 0xF0	; 240
    2a34:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2a38:	80 93 2a 01 	sts	0x012A, r24
	velocity(op_v,op_v);
	//turn efficiency
	//move forward for a proper turn
	forward_mm(160);
    2a3c:	80 ea       	ldi	r24, 0xA0	; 160
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <forward_mm>
	
	//scan 2
	//turn and scan the indicator block and store its value
	//turn and scan the indicator block and store its value
	soft_right_2();
    2a44:	0e 94 db 00 	call	0x1b6	; 0x1b6 <soft_right_2>
    2a48:	8f ef       	ldi	r24, 0xFF	; 255
    2a4a:	9f e7       	ldi	r25, 0x7F	; 127
    2a4c:	ef e1       	ldi	r30, 0x1F	; 31
    2a4e:	81 50       	subi	r24, 0x01	; 1
    2a50:	90 40       	sbci	r25, 0x00	; 0
    2a52:	e0 40       	sbci	r30, 0x00	; 0
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <indicator_set+0xfa>
    2a56:	00 c0       	rjmp	.+0      	; 0x2a58 <indicator_set+0x104>
    2a58:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a60:	88 32       	cpi	r24, 0x28	; 40
    2a62:	d8 f3       	brcs	.-10     	; 0x2a5a <indicator_set+0x106>
	stop();
    2a64:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[1]=scan();
    2a68:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    2a6c:	90 93 55 02 	sts	0x0255, r25
    2a70:	80 93 54 02 	sts	0x0254, r24
	
	//back to line
	soft_left();
    2a74:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <soft_left>
    2a78:	ff ef       	ldi	r31, 0xFF	; 255
    2a7a:	2f ef       	ldi	r18, 0xFF	; 255
    2a7c:	8c e2       	ldi	r24, 0x2C	; 44
    2a7e:	f1 50       	subi	r31, 0x01	; 1
    2a80:	20 40       	sbci	r18, 0x00	; 0
    2a82:	80 40       	sbci	r24, 0x00	; 0
    2a84:	e1 f7       	brne	.-8      	; 0x2a7e <indicator_set+0x12a>
    2a86:	00 c0       	rjmp	.+0      	; 0x2a88 <indicator_set+0x134>
    2a88:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2a90:	88 32       	cpi	r24, 0x28	; 40
    2a92:	d8 f3       	brcs	.-10     	; 0x2a8a <indicator_set+0x136>
	stop();
    2a94:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//scan 1
	//turn and scan the indicator block and store its value
	soft_left_2();
    2a98:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <soft_left_2>
    2a9c:	9f ef       	ldi	r25, 0xFF	; 255
    2a9e:	ef e7       	ldi	r30, 0x7F	; 127
    2aa0:	f6 e1       	ldi	r31, 0x16	; 22
    2aa2:	91 50       	subi	r25, 0x01	; 1
    2aa4:	e0 40       	sbci	r30, 0x00	; 0
    2aa6:	f0 40       	sbci	r31, 0x00	; 0
    2aa8:	e1 f7       	brne	.-8      	; 0x2aa2 <indicator_set+0x14e>
    2aaa:	00 c0       	rjmp	.+0      	; 0x2aac <indicator_set+0x158>
    2aac:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2ab4:	88 32       	cpi	r24, 0x28	; 40
    2ab6:	d8 f3       	brcs	.-10     	; 0x2aae <indicator_set+0x15a>
	stop();
    2ab8:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	color[0]=scan();
    2abc:	0e 94 28 03 	call	0x650	; 0x650 <scan>
    2ac0:	90 93 53 02 	sts	0x0253, r25
    2ac4:	80 93 52 02 	sts	0x0252, r24
	
	//back to line
	soft_right();
    2ac8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <soft_right>
    2acc:	2f ef       	ldi	r18, 0xFF	; 255
    2ace:	8f e7       	ldi	r24, 0x7F	; 127
    2ad0:	96 e1       	ldi	r25, 0x16	; 22
    2ad2:	21 50       	subi	r18, 0x01	; 1
    2ad4:	80 40       	sbci	r24, 0x00	; 0
    2ad6:	90 40       	sbci	r25, 0x00	; 0
    2ad8:	e1 f7       	brne	.-8      	; 0x2ad2 <indicator_set+0x17e>
    2ada:	00 c0       	rjmp	.+0      	; 0x2adc <indicator_set+0x188>
    2adc:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2ae4:	88 32       	cpi	r24, 0x28	; 40
    2ae6:	d8 f3       	brcs	.-10     	; 0x2ade <indicator_set+0x18a>
	stop();
    2ae8:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	//All indicaor blocks scanned go to initial terminal
	keepMoving();
    2aec:	0e 94 d2 06 	call	0xda4	; 0xda4 <keepMoving>
	forward();
    2af0:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2af4:	e6 e6       	ldi	r30, 0x66	; 102
    2af6:	f6 e2       	ldi	r31, 0x26	; 38
    2af8:	23 e0       	ldi	r18, 0x03	; 3
    2afa:	e1 50       	subi	r30, 0x01	; 1
    2afc:	f0 40       	sbci	r31, 0x00	; 0
    2afe:	20 40       	sbci	r18, 0x00	; 0
    2b00:	e1 f7       	brne	.-8      	; 0x2afa <indicator_set+0x1a6>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2b02:	80 ef       	ldi	r24, 0xF0	; 240
    2b04:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2b08:	80 93 2a 01 	sts	0x012A, r24
	_delay_ms(70);
	velocity(op_v,op_v);
	turnRight();
    2b0c:	0e 94 42 04 	call	0x884	; 0x884 <turnRight>
	forward();
    2b10:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
    2b16:	9f ef       	ldi	r25, 0xFF	; 255
    2b18:	e8 e0       	ldi	r30, 0x08	; 8
    2b1a:	81 50       	subi	r24, 0x01	; 1
    2b1c:	90 40       	sbci	r25, 0x00	; 0
    2b1e:	e0 40       	sbci	r30, 0x00	; 0
    2b20:	e1 f7       	brne	.-8      	; 0x2b1a <indicator_set+0x1c6>
    2b22:	00 c0       	rjmp	.+0      	; 0x2b24 <indicator_set+0x1d0>
    2b24:	00 00       	nop
	_delay_ms(200);
	keepMoving();
    2b26:	0e 94 d2 06 	call	0xda4	; 0xda4 <keepMoving>
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//Robot velocity control 
	OCR5AL = (unsigned char)left_motor; //OCR5AL (PortL3) is connected to Left Motor
    2b2a:	80 ef       	ldi	r24, 0xF0	; 240
    2b2c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor; //OCR5BL (PortL4) connected to Right Motor
    2b30:	80 93 2a 01 	sts	0x012A, r24
	velocity(op_v,op_v);
	forward();
    2b34:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2b38:	ff ef       	ldi	r31, 0xFF	; 255
    2b3a:	2f e3       	ldi	r18, 0x3F	; 63
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	f1 50       	subi	r31, 0x01	; 1
    2b40:	20 40       	sbci	r18, 0x00	; 0
    2b42:	80 40       	sbci	r24, 0x00	; 0
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <indicator_set+0x1ea>
    2b46:	00 c0       	rjmp	.+0      	; 0x2b48 <indicator_set+0x1f4>
    2b48:	00 00       	nop
	_delay_ms(50);
	turnRight();
    2b4a:	0e 94 42 04 	call	0x884	; 0x884 <turnRight>
	while(ADC_Conversion(2)<40)
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <indicator_set+0x200>
		right();
    2b50:	0e 94 cf 00 	call	0x19e	; 0x19e <right>
	keepMoving();
	velocity(op_v,op_v);
	forward();
	_delay_ms(50);
	turnRight();
	while(ADC_Conversion(2)<40)
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Conversion>
    2b5a:	88 32       	cpi	r24, 0x28	; 40
    2b5c:	c8 f3       	brcs	.-14     	; 0x2b50 <indicator_set+0x1fc>
		right();
	stop();
    2b5e:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
	
	
}
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	ff 90       	pop	r15
    2b6c:	08 95       	ret

00002b6e <main>:


int main(void)
{
	//intialise EVERYTHING
	__init__();
    2b6e:	5f de       	rcall	.-834    	; 0x282e <__init__>
	
	//move forward a little to escape the big start box
	forward();
    2b70:	0e 94 c6 00 	call	0x18c	; 0x18c <forward>
    2b74:	2f ef       	ldi	r18, 0xFF	; 255
    2b76:	8f e7       	ldi	r24, 0x7F	; 127
    2b78:	96 e1       	ldi	r25, 0x16	; 22
    2b7a:	21 50       	subi	r18, 0x01	; 1
    2b7c:	80 40       	sbci	r24, 0x00	; 0
    2b7e:	90 40       	sbci	r25, 0x00	; 0
    2b80:	e1 f7       	brne	.-8      	; 0x2b7a <main+0xc>
    2b82:	00 c0       	rjmp	.+0      	; 0x2b84 <main+0x16>
    2b84:	00 00       	nop
	_delay_ms(500);
	//call indicator_set to initialise indicator values and reach the intial terminal
	indicator_set();
    2b86:	e6 de       	rcall	.-564    	; 0x2954 <indicator_set>
	//initialise terminals 
	setIndicatorAndColor();
    2b88:	8f de       	rcall	.-738    	; 0x28a8 <setIndicatorAndColor>
	keepMoving();
    2b8a:	0e 94 d2 06 	call	0xda4	; 0xda4 <keepMoving>
	//reached the target terminal
	while (sorted<total)
    2b8e:	20 91 11 02 	lds	r18, 0x0211
    2b92:	30 91 12 02 	lds	r19, 0x0212
    2b96:	80 91 02 02 	lds	r24, 0x0202
    2b9a:	90 91 03 02 	lds	r25, 0x0203
    2b9e:	28 17       	cp	r18, r24
    2ba0:	39 07       	cpc	r19, r25
    2ba2:	74 f5       	brge	.+92     	; 0x2c00 <main+0x92>
	{
		canDrop();
    2ba4:	f3 d8       	rcall	.-3610   	; 0x1d8c <canDrop>
		if (sorted == total)
    2ba6:	20 91 11 02 	lds	r18, 0x0211
    2baa:	30 91 12 02 	lds	r19, 0x0212
    2bae:	80 91 02 02 	lds	r24, 0x0202
    2bb2:	90 91 03 02 	lds	r25, 0x0203
    2bb6:	28 17       	cp	r18, r24
    2bb8:	39 07       	cpc	r19, r25
    2bba:	11 f1       	breq	.+68     	; 0x2c00 <main+0x92>
		{
			break;
		}
		
		pickup();
    2bbc:	0e 94 83 0b 	call	0x1706	; 0x1706 <pickup>

		traverseToSort(ct, ct % 2 + 4);
    2bc0:	80 91 3e 02 	lds	r24, 0x023E
    2bc4:	90 91 3f 02 	lds	r25, 0x023F
    2bc8:	9c 01       	movw	r18, r24
    2bca:	21 70       	andi	r18, 0x01	; 1
    2bcc:	30 78       	andi	r19, 0x80	; 128
    2bce:	33 23       	and	r19, r19
    2bd0:	34 f4       	brge	.+12     	; 0x2bde <main+0x70>
    2bd2:	21 50       	subi	r18, 0x01	; 1
    2bd4:	31 09       	sbc	r19, r1
    2bd6:	2e 6f       	ori	r18, 0xFE	; 254
    2bd8:	3f 6f       	ori	r19, 0xFF	; 255
    2bda:	2f 5f       	subi	r18, 0xFF	; 255
    2bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bde:	b9 01       	movw	r22, r18
    2be0:	6c 5f       	subi	r22, 0xFC	; 252
    2be2:	7f 4f       	sbci	r23, 0xFF	; 255
    2be4:	0e 94 11 07 	call	0xe22	; 0xe22 <traverseToSort>
		sortCheck();
    2be8:	ef db       	rcall	.-2082   	; 0x23c8 <sortCheck>
	indicator_set();
	//initialise terminals 
	setIndicatorAndColor();
	keepMoving();
	//reached the target terminal
	while (sorted<total)
    2bea:	20 91 11 02 	lds	r18, 0x0211
    2bee:	30 91 12 02 	lds	r19, 0x0212
    2bf2:	80 91 02 02 	lds	r24, 0x0202
    2bf6:	90 91 03 02 	lds	r25, 0x0203
    2bfa:	28 17       	cp	r18, r24
    2bfc:	39 07       	cpc	r19, r25
    2bfe:	94 f2       	brlt	.-92     	; 0x2ba4 <main+0x36>

		traverseToSort(ct, ct % 2 + 4);
		sortCheck();
	}
	//Task completed
	buzzer_on();
    2c00:	0e 94 29 01 	call	0x252	; 0x252 <buzzer_on>
    2c04:	2f ef       	ldi	r18, 0xFF	; 255
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	90 ee       	ldi	r25, 0xE0	; 224
    2c0a:	21 50       	subi	r18, 0x01	; 1
    2c0c:	80 40       	sbci	r24, 0x00	; 0
    2c0e:	90 40       	sbci	r25, 0x00	; 0
    2c10:	e1 f7       	brne	.-8      	; 0x2c0a <main+0x9c>
    2c12:	00 c0       	rjmp	.+0      	; 0x2c14 <main+0xa6>
    2c14:	00 00       	nop
	_delay_ms(5000);
	buzzer_off();
    2c16:	0e 94 2d 01 	call	0x25a	; 0x25a <buzzer_off>
	stop();
    2c1a:	0e 94 de 00 	call	0x1bc	; 0x1bc <stop>
    2c1e:	ff cf       	rjmp	.-2      	; 0x2c1e <main+0xb0>

00002c20 <__divsf3>:
    2c20:	0c d0       	rcall	.+24     	; 0x2c3a <__divsf3x>
    2c22:	e6 c0       	rjmp	.+460    	; 0x2df0 <__fp_round>
    2c24:	de d0       	rcall	.+444    	; 0x2de2 <__fp_pscB>
    2c26:	40 f0       	brcs	.+16     	; 0x2c38 <__divsf3+0x18>
    2c28:	d5 d0       	rcall	.+426    	; 0x2dd4 <__fp_pscA>
    2c2a:	30 f0       	brcs	.+12     	; 0x2c38 <__divsf3+0x18>
    2c2c:	21 f4       	brne	.+8      	; 0x2c36 <__divsf3+0x16>
    2c2e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <__divsf3+0x18>
    2c32:	c7 c0       	rjmp	.+398    	; 0x2dc2 <__fp_inf>
    2c34:	51 11       	cpse	r21, r1
    2c36:	10 c1       	rjmp	.+544    	; 0x2e58 <__fp_szero>
    2c38:	ca c0       	rjmp	.+404    	; 0x2dce <__fp_nan>

00002c3a <__divsf3x>:
    2c3a:	eb d0       	rcall	.+470    	; 0x2e12 <__fp_split3>
    2c3c:	98 f3       	brcs	.-26     	; 0x2c24 <__divsf3+0x4>

00002c3e <__divsf3_pse>:
    2c3e:	99 23       	and	r25, r25
    2c40:	c9 f3       	breq	.-14     	; 0x2c34 <__divsf3+0x14>
    2c42:	55 23       	and	r21, r21
    2c44:	b1 f3       	breq	.-20     	; 0x2c32 <__divsf3+0x12>
    2c46:	95 1b       	sub	r25, r21
    2c48:	55 0b       	sbc	r21, r21
    2c4a:	bb 27       	eor	r27, r27
    2c4c:	aa 27       	eor	r26, r26
    2c4e:	62 17       	cp	r22, r18
    2c50:	73 07       	cpc	r23, r19
    2c52:	84 07       	cpc	r24, r20
    2c54:	38 f0       	brcs	.+14     	; 0x2c64 <__divsf3_pse+0x26>
    2c56:	9f 5f       	subi	r25, 0xFF	; 255
    2c58:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5a:	22 0f       	add	r18, r18
    2c5c:	33 1f       	adc	r19, r19
    2c5e:	44 1f       	adc	r20, r20
    2c60:	aa 1f       	adc	r26, r26
    2c62:	a9 f3       	breq	.-22     	; 0x2c4e <__divsf3_pse+0x10>
    2c64:	33 d0       	rcall	.+102    	; 0x2ccc <__divsf3_pse+0x8e>
    2c66:	0e 2e       	mov	r0, r30
    2c68:	3a f0       	brmi	.+14     	; 0x2c78 <__divsf3_pse+0x3a>
    2c6a:	e0 e8       	ldi	r30, 0x80	; 128
    2c6c:	30 d0       	rcall	.+96     	; 0x2cce <__divsf3_pse+0x90>
    2c6e:	91 50       	subi	r25, 0x01	; 1
    2c70:	50 40       	sbci	r21, 0x00	; 0
    2c72:	e6 95       	lsr	r30
    2c74:	00 1c       	adc	r0, r0
    2c76:	ca f7       	brpl	.-14     	; 0x2c6a <__divsf3_pse+0x2c>
    2c78:	29 d0       	rcall	.+82     	; 0x2ccc <__divsf3_pse+0x8e>
    2c7a:	fe 2f       	mov	r31, r30
    2c7c:	27 d0       	rcall	.+78     	; 0x2ccc <__divsf3_pse+0x8e>
    2c7e:	66 0f       	add	r22, r22
    2c80:	77 1f       	adc	r23, r23
    2c82:	88 1f       	adc	r24, r24
    2c84:	bb 1f       	adc	r27, r27
    2c86:	26 17       	cp	r18, r22
    2c88:	37 07       	cpc	r19, r23
    2c8a:	48 07       	cpc	r20, r24
    2c8c:	ab 07       	cpc	r26, r27
    2c8e:	b0 e8       	ldi	r27, 0x80	; 128
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <__divsf3_pse+0x56>
    2c92:	bb 0b       	sbc	r27, r27
    2c94:	80 2d       	mov	r24, r0
    2c96:	bf 01       	movw	r22, r30
    2c98:	ff 27       	eor	r31, r31
    2c9a:	93 58       	subi	r25, 0x83	; 131
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	2a f0       	brmi	.+10     	; 0x2caa <__divsf3_pse+0x6c>
    2ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    2ca2:	51 05       	cpc	r21, r1
    2ca4:	68 f0       	brcs	.+26     	; 0x2cc0 <__divsf3_pse+0x82>
    2ca6:	8d c0       	rjmp	.+282    	; 0x2dc2 <__fp_inf>
    2ca8:	d7 c0       	rjmp	.+430    	; 0x2e58 <__fp_szero>
    2caa:	5f 3f       	cpi	r21, 0xFF	; 255
    2cac:	ec f3       	brlt	.-6      	; 0x2ca8 <__divsf3_pse+0x6a>
    2cae:	98 3e       	cpi	r25, 0xE8	; 232
    2cb0:	dc f3       	brlt	.-10     	; 0x2ca8 <__divsf3_pse+0x6a>
    2cb2:	86 95       	lsr	r24
    2cb4:	77 95       	ror	r23
    2cb6:	67 95       	ror	r22
    2cb8:	b7 95       	ror	r27
    2cba:	f7 95       	ror	r31
    2cbc:	9f 5f       	subi	r25, 0xFF	; 255
    2cbe:	c9 f7       	brne	.-14     	; 0x2cb2 <__divsf3_pse+0x74>
    2cc0:	88 0f       	add	r24, r24
    2cc2:	91 1d       	adc	r25, r1
    2cc4:	96 95       	lsr	r25
    2cc6:	87 95       	ror	r24
    2cc8:	97 f9       	bld	r25, 7
    2cca:	08 95       	ret
    2ccc:	e1 e0       	ldi	r30, 0x01	; 1
    2cce:	66 0f       	add	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	62 17       	cp	r22, r18
    2cd8:	73 07       	cpc	r23, r19
    2cda:	84 07       	cpc	r24, r20
    2cdc:	ba 07       	cpc	r27, r26
    2cde:	20 f0       	brcs	.+8      	; 0x2ce8 <__divsf3_pse+0xaa>
    2ce0:	62 1b       	sub	r22, r18
    2ce2:	73 0b       	sbc	r23, r19
    2ce4:	84 0b       	sbc	r24, r20
    2ce6:	ba 0b       	sbc	r27, r26
    2ce8:	ee 1f       	adc	r30, r30
    2cea:	88 f7       	brcc	.-30     	; 0x2cce <__divsf3_pse+0x90>
    2cec:	e0 95       	com	r30
    2cee:	08 95       	ret

00002cf0 <__fixunssfsi>:
    2cf0:	98 d0       	rcall	.+304    	; 0x2e22 <__fp_splitA>
    2cf2:	88 f0       	brcs	.+34     	; 0x2d16 <__fixunssfsi+0x26>
    2cf4:	9f 57       	subi	r25, 0x7F	; 127
    2cf6:	90 f0       	brcs	.+36     	; 0x2d1c <__fixunssfsi+0x2c>
    2cf8:	b9 2f       	mov	r27, r25
    2cfa:	99 27       	eor	r25, r25
    2cfc:	b7 51       	subi	r27, 0x17	; 23
    2cfe:	a0 f0       	brcs	.+40     	; 0x2d28 <__fixunssfsi+0x38>
    2d00:	d1 f0       	breq	.+52     	; 0x2d36 <__fixunssfsi+0x46>
    2d02:	66 0f       	add	r22, r22
    2d04:	77 1f       	adc	r23, r23
    2d06:	88 1f       	adc	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	1a f0       	brmi	.+6      	; 0x2d12 <__fixunssfsi+0x22>
    2d0c:	ba 95       	dec	r27
    2d0e:	c9 f7       	brne	.-14     	; 0x2d02 <__fixunssfsi+0x12>
    2d10:	12 c0       	rjmp	.+36     	; 0x2d36 <__fixunssfsi+0x46>
    2d12:	b1 30       	cpi	r27, 0x01	; 1
    2d14:	81 f0       	breq	.+32     	; 0x2d36 <__fixunssfsi+0x46>
    2d16:	9f d0       	rcall	.+318    	; 0x2e56 <__fp_zero>
    2d18:	b1 e0       	ldi	r27, 0x01	; 1
    2d1a:	08 95       	ret
    2d1c:	9c c0       	rjmp	.+312    	; 0x2e56 <__fp_zero>
    2d1e:	67 2f       	mov	r22, r23
    2d20:	78 2f       	mov	r23, r24
    2d22:	88 27       	eor	r24, r24
    2d24:	b8 5f       	subi	r27, 0xF8	; 248
    2d26:	39 f0       	breq	.+14     	; 0x2d36 <__fixunssfsi+0x46>
    2d28:	b9 3f       	cpi	r27, 0xF9	; 249
    2d2a:	cc f3       	brlt	.-14     	; 0x2d1e <__fixunssfsi+0x2e>
    2d2c:	86 95       	lsr	r24
    2d2e:	77 95       	ror	r23
    2d30:	67 95       	ror	r22
    2d32:	b3 95       	inc	r27
    2d34:	d9 f7       	brne	.-10     	; 0x2d2c <__fixunssfsi+0x3c>
    2d36:	3e f4       	brtc	.+14     	; 0x2d46 <__fixunssfsi+0x56>
    2d38:	90 95       	com	r25
    2d3a:	80 95       	com	r24
    2d3c:	70 95       	com	r23
    2d3e:	61 95       	neg	r22
    2d40:	7f 4f       	sbci	r23, 0xFF	; 255
    2d42:	8f 4f       	sbci	r24, 0xFF	; 255
    2d44:	9f 4f       	sbci	r25, 0xFF	; 255
    2d46:	08 95       	ret

00002d48 <__floatunsisf>:
    2d48:	e8 94       	clt
    2d4a:	09 c0       	rjmp	.+18     	; 0x2d5e <__floatsisf+0x12>

00002d4c <__floatsisf>:
    2d4c:	97 fb       	bst	r25, 7
    2d4e:	3e f4       	brtc	.+14     	; 0x2d5e <__floatsisf+0x12>
    2d50:	90 95       	com	r25
    2d52:	80 95       	com	r24
    2d54:	70 95       	com	r23
    2d56:	61 95       	neg	r22
    2d58:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5e:	99 23       	and	r25, r25
    2d60:	a9 f0       	breq	.+42     	; 0x2d8c <__floatsisf+0x40>
    2d62:	f9 2f       	mov	r31, r25
    2d64:	96 e9       	ldi	r25, 0x96	; 150
    2d66:	bb 27       	eor	r27, r27
    2d68:	93 95       	inc	r25
    2d6a:	f6 95       	lsr	r31
    2d6c:	87 95       	ror	r24
    2d6e:	77 95       	ror	r23
    2d70:	67 95       	ror	r22
    2d72:	b7 95       	ror	r27
    2d74:	f1 11       	cpse	r31, r1
    2d76:	f8 cf       	rjmp	.-16     	; 0x2d68 <__floatsisf+0x1c>
    2d78:	fa f4       	brpl	.+62     	; 0x2db8 <__floatsisf+0x6c>
    2d7a:	bb 0f       	add	r27, r27
    2d7c:	11 f4       	brne	.+4      	; 0x2d82 <__floatsisf+0x36>
    2d7e:	60 ff       	sbrs	r22, 0
    2d80:	1b c0       	rjmp	.+54     	; 0x2db8 <__floatsisf+0x6c>
    2d82:	6f 5f       	subi	r22, 0xFF	; 255
    2d84:	7f 4f       	sbci	r23, 0xFF	; 255
    2d86:	8f 4f       	sbci	r24, 0xFF	; 255
    2d88:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8a:	16 c0       	rjmp	.+44     	; 0x2db8 <__floatsisf+0x6c>
    2d8c:	88 23       	and	r24, r24
    2d8e:	11 f0       	breq	.+4      	; 0x2d94 <__floatsisf+0x48>
    2d90:	96 e9       	ldi	r25, 0x96	; 150
    2d92:	11 c0       	rjmp	.+34     	; 0x2db6 <__floatsisf+0x6a>
    2d94:	77 23       	and	r23, r23
    2d96:	21 f0       	breq	.+8      	; 0x2da0 <__floatsisf+0x54>
    2d98:	9e e8       	ldi	r25, 0x8E	; 142
    2d9a:	87 2f       	mov	r24, r23
    2d9c:	76 2f       	mov	r23, r22
    2d9e:	05 c0       	rjmp	.+10     	; 0x2daa <__floatsisf+0x5e>
    2da0:	66 23       	and	r22, r22
    2da2:	71 f0       	breq	.+28     	; 0x2dc0 <__floatsisf+0x74>
    2da4:	96 e8       	ldi	r25, 0x86	; 134
    2da6:	86 2f       	mov	r24, r22
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	2a f0       	brmi	.+10     	; 0x2db8 <__floatsisf+0x6c>
    2dae:	9a 95       	dec	r25
    2db0:	66 0f       	add	r22, r22
    2db2:	77 1f       	adc	r23, r23
    2db4:	88 1f       	adc	r24, r24
    2db6:	da f7       	brpl	.-10     	; 0x2dae <__floatsisf+0x62>
    2db8:	88 0f       	add	r24, r24
    2dba:	96 95       	lsr	r25
    2dbc:	87 95       	ror	r24
    2dbe:	97 f9       	bld	r25, 7
    2dc0:	08 95       	ret

00002dc2 <__fp_inf>:
    2dc2:	97 f9       	bld	r25, 7
    2dc4:	9f 67       	ori	r25, 0x7F	; 127
    2dc6:	80 e8       	ldi	r24, 0x80	; 128
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	08 95       	ret

00002dce <__fp_nan>:
    2dce:	9f ef       	ldi	r25, 0xFF	; 255
    2dd0:	80 ec       	ldi	r24, 0xC0	; 192
    2dd2:	08 95       	ret

00002dd4 <__fp_pscA>:
    2dd4:	00 24       	eor	r0, r0
    2dd6:	0a 94       	dec	r0
    2dd8:	16 16       	cp	r1, r22
    2dda:	17 06       	cpc	r1, r23
    2ddc:	18 06       	cpc	r1, r24
    2dde:	09 06       	cpc	r0, r25
    2de0:	08 95       	ret

00002de2 <__fp_pscB>:
    2de2:	00 24       	eor	r0, r0
    2de4:	0a 94       	dec	r0
    2de6:	12 16       	cp	r1, r18
    2de8:	13 06       	cpc	r1, r19
    2dea:	14 06       	cpc	r1, r20
    2dec:	05 06       	cpc	r0, r21
    2dee:	08 95       	ret

00002df0 <__fp_round>:
    2df0:	09 2e       	mov	r0, r25
    2df2:	03 94       	inc	r0
    2df4:	00 0c       	add	r0, r0
    2df6:	11 f4       	brne	.+4      	; 0x2dfc <__fp_round+0xc>
    2df8:	88 23       	and	r24, r24
    2dfa:	52 f0       	brmi	.+20     	; 0x2e10 <__fp_round+0x20>
    2dfc:	bb 0f       	add	r27, r27
    2dfe:	40 f4       	brcc	.+16     	; 0x2e10 <__fp_round+0x20>
    2e00:	bf 2b       	or	r27, r31
    2e02:	11 f4       	brne	.+4      	; 0x2e08 <__fp_round+0x18>
    2e04:	60 ff       	sbrs	r22, 0
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <__fp_round+0x20>
    2e08:	6f 5f       	subi	r22, 0xFF	; 255
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	08 95       	ret

00002e12 <__fp_split3>:
    2e12:	57 fd       	sbrc	r21, 7
    2e14:	90 58       	subi	r25, 0x80	; 128
    2e16:	44 0f       	add	r20, r20
    2e18:	55 1f       	adc	r21, r21
    2e1a:	59 f0       	breq	.+22     	; 0x2e32 <__fp_splitA+0x10>
    2e1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e1e:	71 f0       	breq	.+28     	; 0x2e3c <__fp_splitA+0x1a>
    2e20:	47 95       	ror	r20

00002e22 <__fp_splitA>:
    2e22:	88 0f       	add	r24, r24
    2e24:	97 fb       	bst	r25, 7
    2e26:	99 1f       	adc	r25, r25
    2e28:	61 f0       	breq	.+24     	; 0x2e42 <__fp_splitA+0x20>
    2e2a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e2c:	79 f0       	breq	.+30     	; 0x2e4c <__fp_splitA+0x2a>
    2e2e:	87 95       	ror	r24
    2e30:	08 95       	ret
    2e32:	12 16       	cp	r1, r18
    2e34:	13 06       	cpc	r1, r19
    2e36:	14 06       	cpc	r1, r20
    2e38:	55 1f       	adc	r21, r21
    2e3a:	f2 cf       	rjmp	.-28     	; 0x2e20 <__fp_split3+0xe>
    2e3c:	46 95       	lsr	r20
    2e3e:	f1 df       	rcall	.-30     	; 0x2e22 <__fp_splitA>
    2e40:	08 c0       	rjmp	.+16     	; 0x2e52 <__fp_splitA+0x30>
    2e42:	16 16       	cp	r1, r22
    2e44:	17 06       	cpc	r1, r23
    2e46:	18 06       	cpc	r1, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	f1 cf       	rjmp	.-30     	; 0x2e2e <__fp_splitA+0xc>
    2e4c:	86 95       	lsr	r24
    2e4e:	71 05       	cpc	r23, r1
    2e50:	61 05       	cpc	r22, r1
    2e52:	08 94       	sec
    2e54:	08 95       	ret

00002e56 <__fp_zero>:
    2e56:	e8 94       	clt

00002e58 <__fp_szero>:
    2e58:	bb 27       	eor	r27, r27
    2e5a:	66 27       	eor	r22, r22
    2e5c:	77 27       	eor	r23, r23
    2e5e:	cb 01       	movw	r24, r22
    2e60:	97 f9       	bld	r25, 7
    2e62:	08 95       	ret

00002e64 <__divmodhi4>:
    2e64:	97 fb       	bst	r25, 7
    2e66:	07 2e       	mov	r0, r23
    2e68:	16 f4       	brtc	.+4      	; 0x2e6e <__divmodhi4+0xa>
    2e6a:	00 94       	com	r0
    2e6c:	06 d0       	rcall	.+12     	; 0x2e7a <__divmodhi4_neg1>
    2e6e:	77 fd       	sbrc	r23, 7
    2e70:	08 d0       	rcall	.+16     	; 0x2e82 <__divmodhi4_neg2>
    2e72:	0b d0       	rcall	.+22     	; 0x2e8a <__udivmodhi4>
    2e74:	07 fc       	sbrc	r0, 7
    2e76:	05 d0       	rcall	.+10     	; 0x2e82 <__divmodhi4_neg2>
    2e78:	3e f4       	brtc	.+14     	; 0x2e88 <__divmodhi4_exit>

00002e7a <__divmodhi4_neg1>:
    2e7a:	90 95       	com	r25
    2e7c:	81 95       	neg	r24
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	08 95       	ret

00002e82 <__divmodhi4_neg2>:
    2e82:	70 95       	com	r23
    2e84:	61 95       	neg	r22
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255

00002e88 <__divmodhi4_exit>:
    2e88:	08 95       	ret

00002e8a <__udivmodhi4>:
    2e8a:	aa 1b       	sub	r26, r26
    2e8c:	bb 1b       	sub	r27, r27
    2e8e:	51 e1       	ldi	r21, 0x11	; 17
    2e90:	07 c0       	rjmp	.+14     	; 0x2ea0 <__udivmodhi4_ep>

00002e92 <__udivmodhi4_loop>:
    2e92:	aa 1f       	adc	r26, r26
    2e94:	bb 1f       	adc	r27, r27
    2e96:	a6 17       	cp	r26, r22
    2e98:	b7 07       	cpc	r27, r23
    2e9a:	10 f0       	brcs	.+4      	; 0x2ea0 <__udivmodhi4_ep>
    2e9c:	a6 1b       	sub	r26, r22
    2e9e:	b7 0b       	sbc	r27, r23

00002ea0 <__udivmodhi4_ep>:
    2ea0:	88 1f       	adc	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	5a 95       	dec	r21
    2ea6:	a9 f7       	brne	.-22     	; 0x2e92 <__udivmodhi4_loop>
    2ea8:	80 95       	com	r24
    2eaa:	90 95       	com	r25
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	08 95       	ret

00002eb2 <_exit>:
    2eb2:	f8 94       	cli

00002eb4 <__stop_program>:
    2eb4:	ff cf       	rjmp	.-2      	; 0x2eb4 <__stop_program>
