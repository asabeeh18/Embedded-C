
Cargo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000032f2  00003386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  00800208  00800208  0000338e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000338e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  000033be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b4f  00000000  00000000  0000374e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000047b  00000000  00000000  0000729d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a79  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009bc  00000000  00000000  0000a194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000895  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000224a  00000000  00000000  0000b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000d62f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	19 c3       	rjmp	.+1586   	; 0x638 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	02 c4       	rjmp	.+2052   	; 0x81a <__vector_5>
      16:	00 00       	nop
      18:	db c3       	rjmp	.+1974   	; 0x7d0 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f2 e3       	ldi	r31, 0x32	; 50
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 37       	cpi	r26, 0x75	; 117
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <main>
     122:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_cursor>:
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	69 f0       	breq	.+26     	; 0x28c <lcd_cursor+0x1e>
     272:	18 f4       	brcc	.+6      	; 0x27a <lcd_cursor+0xc>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	31 f0       	breq	.+12     	; 0x284 <lcd_cursor+0x16>
     278:	08 95       	ret
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	59 f0       	breq	.+22     	; 0x294 <lcd_cursor+0x26>
     27e:	84 30       	cpi	r24, 0x04	; 4
     280:	69 f0       	breq	.+26     	; 0x29c <lcd_cursor+0x2e>
     282:	08 95       	ret
     284:	8f e7       	ldi	r24, 0x7F	; 127
     286:	86 0f       	add	r24, r22
     288:	94 cf       	rjmp	.-216    	; 0x1b2 <lcd_wr_command>
     28a:	08 95       	ret
     28c:	8f eb       	ldi	r24, 0xBF	; 191
     28e:	86 0f       	add	r24, r22
     290:	90 cf       	rjmp	.-224    	; 0x1b2 <lcd_wr_command>
     292:	08 95       	ret
     294:	83 e9       	ldi	r24, 0x93	; 147
     296:	86 0f       	add	r24, r22
     298:	8c cf       	rjmp	.-232    	; 0x1b2 <lcd_wr_command>
     29a:	08 95       	ret
     29c:	83 ed       	ldi	r24, 0xD3	; 211
     29e:	86 0f       	add	r24, r22
     2a0:	88 cf       	rjmp	.-240    	; 0x1b2 <lcd_wr_command>
     2a2:	08 95       	ret

000002a4 <lcd_print>:
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	8a 01       	movw	r16, r20
     2ae:	e9 01       	movw	r28, r18
     2b0:	88 23       	and	r24, r24
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <lcd_print+0x14>
     2b4:	61 11       	cpse	r22, r1
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <lcd_print+0x18>
     2b8:	d7 df       	rcall	.-82     	; 0x268 <lcd_home>
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <lcd_print+0x1a>
     2bc:	d8 df       	rcall	.-80     	; 0x26e <lcd_cursor>
     2be:	c5 30       	cpi	r28, 0x05	; 5
     2c0:	d1 05       	cpc	r29, r1
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <lcd_print+0x22>
     2c4:	d5 c0       	rjmp	.+426    	; 0x470 <lcd_print+0x1cc>
     2c6:	98 01       	movw	r18, r16
     2c8:	32 95       	swap	r19
     2ca:	22 95       	swap	r18
     2cc:	2f 70       	andi	r18, 0x0F	; 15
     2ce:	23 27       	eor	r18, r19
     2d0:	3f 70       	andi	r19, 0x0F	; 15
     2d2:	23 27       	eor	r18, r19
     2d4:	a7 e4       	ldi	r26, 0x47	; 71
     2d6:	b3 e0       	ldi	r27, 0x03	; 3
     2d8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     2dc:	96 95       	lsr	r25
     2de:	87 95       	ror	r24
     2e0:	96 95       	lsr	r25
     2e2:	87 95       	ror	r24
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	c0 96       	adiw	r24, 0x30	; 48
     2ea:	90 93 2f 02 	sts	0x022F, r25
     2ee:	80 93 2e 02 	sts	0x022E, r24
     2f2:	95 df       	rcall	.-214    	; 0x21e <lcd_wr_char>
     2f4:	98 01       	movw	r18, r16
     2f6:	36 95       	lsr	r19
     2f8:	27 95       	ror	r18
     2fa:	36 95       	lsr	r19
     2fc:	27 95       	ror	r18
     2fe:	36 95       	lsr	r19
     300:	27 95       	ror	r18
     302:	a5 ec       	ldi	r26, 0xC5	; 197
     304:	b0 e2       	ldi	r27, 0x20	; 32
     306:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     30a:	ac 01       	movw	r20, r24
     30c:	52 95       	swap	r21
     30e:	42 95       	swap	r20
     310:	4f 70       	andi	r20, 0x0F	; 15
     312:	45 27       	eor	r20, r21
     314:	5f 70       	andi	r21, 0x0F	; 15
     316:	45 27       	eor	r20, r21
     318:	50 93 33 02 	sts	0x0233, r21
     31c:	40 93 32 02 	sts	0x0232, r20
     320:	9a 01       	movw	r18, r20
     322:	ad ec       	ldi	r26, 0xCD	; 205
     324:	bc ec       	ldi	r27, 0xCC	; 204
     326:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	9c 01       	movw	r18, r24
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	48 1b       	sub	r20, r24
     34e:	59 0b       	sbc	r21, r25
     350:	ca 01       	movw	r24, r20
     352:	c0 96       	adiw	r24, 0x30	; 48
     354:	90 93 74 02 	sts	0x0274, r25
     358:	80 93 73 02 	sts	0x0273, r24
     35c:	60 df       	rcall	.-320    	; 0x21e <lcd_wr_char>
     35e:	04 c0       	rjmp	.+8      	; 0x368 <lcd_print+0xc4>
     360:	c3 30       	cpi	r28, 0x03	; 3
     362:	d1 05       	cpc	r29, r1
     364:	09 f0       	breq	.+2      	; 0x368 <lcd_print+0xc4>
     366:	89 c0       	rjmp	.+274    	; 0x47a <lcd_print+0x1d6>
     368:	98 01       	movw	r18, r16
     36a:	36 95       	lsr	r19
     36c:	27 95       	ror	r18
     36e:	36 95       	lsr	r19
     370:	27 95       	ror	r18
     372:	ab e7       	ldi	r26, 0x7B	; 123
     374:	b4 e1       	ldi	r27, 0x14	; 20
     376:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     37a:	ac 01       	movw	r20, r24
     37c:	56 95       	lsr	r21
     37e:	47 95       	ror	r20
     380:	50 93 33 02 	sts	0x0233, r21
     384:	40 93 32 02 	sts	0x0232, r20
     388:	9a 01       	movw	r18, r20
     38a:	ad ec       	ldi	r26, 0xCD	; 205
     38c:	bc ec       	ldi	r27, 0xCC	; 204
     38e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     392:	96 95       	lsr	r25
     394:	87 95       	ror	r24
     396:	96 95       	lsr	r25
     398:	87 95       	ror	r24
     39a:	96 95       	lsr	r25
     39c:	87 95       	ror	r24
     39e:	9c 01       	movw	r18, r24
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	82 0f       	add	r24, r18
     3b2:	93 1f       	adc	r25, r19
     3b4:	48 1b       	sub	r20, r24
     3b6:	59 0b       	sbc	r21, r25
     3b8:	ca 01       	movw	r24, r20
     3ba:	c0 96       	adiw	r24, 0x30	; 48
     3bc:	90 93 6a 02 	sts	0x026A, r25
     3c0:	80 93 69 02 	sts	0x0269, r24
     3c4:	2c df       	rcall	.-424    	; 0x21e <lcd_wr_char>
     3c6:	98 01       	movw	r18, r16
     3c8:	ad ec       	ldi	r26, 0xCD	; 205
     3ca:	bc ec       	ldi	r27, 0xCC	; 204
     3cc:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     3d0:	ac 01       	movw	r20, r24
     3d2:	56 95       	lsr	r21
     3d4:	47 95       	ror	r20
     3d6:	56 95       	lsr	r21
     3d8:	47 95       	ror	r20
     3da:	56 95       	lsr	r21
     3dc:	47 95       	ror	r20
     3de:	50 93 33 02 	sts	0x0233, r21
     3e2:	40 93 32 02 	sts	0x0232, r20
     3e6:	9a 01       	movw	r18, r20
     3e8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     3ec:	96 95       	lsr	r25
     3ee:	87 95       	ror	r24
     3f0:	96 95       	lsr	r25
     3f2:	87 95       	ror	r24
     3f4:	96 95       	lsr	r25
     3f6:	87 95       	ror	r24
     3f8:	9c 01       	movw	r18, r24
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	82 0f       	add	r24, r18
     40c:	93 1f       	adc	r25, r19
     40e:	48 1b       	sub	r20, r24
     410:	59 0b       	sbc	r21, r25
     412:	ca 01       	movw	r24, r20
     414:	c0 96       	adiw	r24, 0x30	; 48
     416:	90 93 44 02 	sts	0x0244, r25
     41a:	80 93 43 02 	sts	0x0243, r24
     41e:	ff de       	rcall	.-514    	; 0x21e <lcd_wr_char>
     420:	03 c0       	rjmp	.+6      	; 0x428 <lcd_print+0x184>
     422:	c1 30       	cpi	r28, 0x01	; 1
     424:	d1 05       	cpc	r29, r1
     426:	f9 f4       	brne	.+62     	; 0x466 <lcd_print+0x1c2>
     428:	98 01       	movw	r18, r16
     42a:	ad ec       	ldi	r26, 0xCD	; 205
     42c:	bc ec       	ldi	r27, 0xCC	; 204
     42e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__umulhisi3>
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	96 95       	lsr	r25
     438:	87 95       	ror	r24
     43a:	96 95       	lsr	r25
     43c:	87 95       	ror	r24
     43e:	9c 01       	movw	r18, r24
     440:	22 0f       	add	r18, r18
     442:	33 1f       	adc	r19, r19
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	82 0f       	add	r24, r18
     452:	93 1f       	adc	r25, r19
     454:	08 1b       	sub	r16, r24
     456:	19 0b       	sbc	r17, r25
     458:	c8 01       	movw	r24, r16
     45a:	c0 96       	adiw	r24, 0x30	; 48
     45c:	90 93 72 02 	sts	0x0272, r25
     460:	80 93 71 02 	sts	0x0271, r24
     464:	dc de       	rcall	.-584    	; 0x21e <lcd_wr_char>
     466:	26 97       	sbiw	r28, 0x06	; 6
     468:	64 f0       	brlt	.+24     	; 0x482 <lcd_print+0x1de>
     46a:	85 e4       	ldi	r24, 0x45	; 69
     46c:	d8 de       	rcall	.-592    	; 0x21e <lcd_wr_char>
     46e:	09 c0       	rjmp	.+18     	; 0x482 <lcd_print+0x1de>
     470:	c4 30       	cpi	r28, 0x04	; 4
     472:	d1 05       	cpc	r29, r1
     474:	09 f0       	breq	.+2      	; 0x478 <lcd_print+0x1d4>
     476:	74 cf       	rjmp	.-280    	; 0x360 <lcd_print+0xbc>
     478:	3d cf       	rjmp	.-390    	; 0x2f4 <lcd_print+0x50>
     47a:	c2 30       	cpi	r28, 0x02	; 2
     47c:	d1 05       	cpc	r29, r1
     47e:	89 f6       	brne	.-94     	; 0x422 <lcd_print+0x17e>
     480:	a2 cf       	rjmp	.-188    	; 0x3c6 <lcd_print+0x122>
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <timer5_init>:
     48c:	e1 e2       	ldi	r30, 0x21	; 33
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	10 82       	st	Z, r1
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	80 93 25 01 	sts	0x0125, r24
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	90 93 24 01 	sts	0x0124, r25
     49e:	10 92 29 01 	sts	0x0129, r1
     4a2:	80 93 28 01 	sts	0x0128, r24
     4a6:	10 92 2b 01 	sts	0x012B, r1
     4aa:	80 93 2a 01 	sts	0x012A, r24
     4ae:	10 92 2d 01 	sts	0x012D, r1
     4b2:	80 93 2c 01 	sts	0x012C, r24
     4b6:	89 ea       	ldi	r24, 0xA9	; 169
     4b8:	80 93 20 01 	sts	0x0120, r24
     4bc:	8b e0       	ldi	r24, 0x0B	; 11
     4be:	80 83       	st	Z, r24
     4c0:	08 95       	ret

000004c2 <motion_pin_config>:
     4c2:	81 b1       	in	r24, 0x01	; 1
     4c4:	8f 60       	ori	r24, 0x0F	; 15
     4c6:	81 b9       	out	0x01, r24	; 1
     4c8:	82 b1       	in	r24, 0x02	; 2
     4ca:	80 7f       	andi	r24, 0xF0	; 240
     4cc:	82 b9       	out	0x02, r24	; 2
     4ce:	ea e0       	ldi	r30, 0x0A	; 10
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	80 81       	ld	r24, Z
     4d4:	88 61       	ori	r24, 0x18	; 24
     4d6:	80 83       	st	Z, r24
     4d8:	eb e0       	ldi	r30, 0x0B	; 11
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	80 81       	ld	r24, Z
     4de:	88 61       	ori	r24, 0x18	; 24
     4e0:	80 83       	st	Z, r24
     4e2:	08 95       	ret

000004e4 <motion_set>:
     4e4:	92 b1       	in	r25, 0x02	; 2
     4e6:	90 7f       	andi	r25, 0xF0	; 240
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	98 2b       	or	r25, r24
     4ec:	92 b9       	out	0x02, r25	; 2
     4ee:	08 95       	ret

000004f0 <forward>:
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	f8 cf       	rjmp	.-16     	; 0x4e4 <motion_set>
     4f4:	08 95       	ret

000004f6 <back>:
     4f6:	89 e0       	ldi	r24, 0x09	; 9
     4f8:	f5 cf       	rjmp	.-22     	; 0x4e4 <motion_set>
     4fa:	08 95       	ret

000004fc <left>:
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	f2 cf       	rjmp	.-28     	; 0x4e4 <motion_set>
     500:	08 95       	ret

00000502 <right>:
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	ef cf       	rjmp	.-34     	; 0x4e4 <motion_set>
     506:	08 95       	ret

00000508 <soft_left>:
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	ec cf       	rjmp	.-40     	; 0x4e4 <motion_set>
     50c:	08 95       	ret

0000050e <soft_right>:
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	e9 cf       	rjmp	.-46     	; 0x4e4 <motion_set>
     512:	08 95       	ret

00000514 <soft_left_2>:
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	e6 cf       	rjmp	.-52     	; 0x4e4 <motion_set>
     518:	08 95       	ret

0000051a <soft_right_2>:
     51a:	88 e0       	ldi	r24, 0x08	; 8
     51c:	e3 cf       	rjmp	.-58     	; 0x4e4 <motion_set>
     51e:	08 95       	ret

00000520 <stop>:
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	e0 cf       	rjmp	.-64     	; 0x4e4 <motion_set>
     524:	08 95       	ret

00000526 <lcd_port_config>:
     526:	87 b1       	in	r24, 0x07	; 7
     528:	87 6f       	ori	r24, 0xF7	; 247
     52a:	87 b9       	out	0x07, r24	; 7
     52c:	88 b1       	in	r24, 0x08	; 8
     52e:	80 78       	andi	r24, 0x80	; 128
     530:	88 b9       	out	0x08, r24	; 8
     532:	08 95       	ret

00000534 <color_sensor_pin_config>:
     534:	8a b1       	in	r24, 0x0a	; 10
     536:	8e 6f       	ori	r24, 0xFE	; 254
     538:	8a b9       	out	0x0a, r24	; 10
     53a:	58 9a       	sbi	0x0b, 0	; 11
     53c:	08 95       	ret

0000053e <servo_1_free>:
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	80 93 89 00 	sts	0x0089, r24
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	80 93 88 00 	sts	0x0088, r24
     54a:	08 95       	ret

0000054c <servo_2_free>:
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	80 93 8b 00 	sts	0x008B, r24
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	80 93 8a 00 	sts	0x008A, r24
     558:	08 95       	ret

0000055a <servo_3_free>:
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	80 93 8d 00 	sts	0x008D, r24
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	80 93 8c 00 	sts	0x008C, r24
     566:	08 95       	ret

00000568 <adc_pin_config>:
     568:	10 ba       	out	0x10, r1	; 16
     56a:	11 ba       	out	0x11, r1	; 17
     56c:	10 92 07 01 	sts	0x0107, r1
     570:	10 92 08 01 	sts	0x0108, r1
     574:	08 95       	ret

00000576 <servo1_pin_config>:
     576:	25 9a       	sbi	0x04, 5	; 4
     578:	2d 9a       	sbi	0x05, 5	; 5
     57a:	08 95       	ret

0000057c <servo2_pin_config>:
     57c:	26 9a       	sbi	0x04, 6	; 4
     57e:	2e 9a       	sbi	0x05, 6	; 5
     580:	08 95       	ret

00000582 <servo3_pin_config>:
     582:	27 9a       	sbi	0x04, 7	; 4
     584:	2f 9a       	sbi	0x05, 7	; 5
     586:	08 95       	ret

00000588 <timer1_init>:
     588:	e1 e8       	ldi	r30, 0x81	; 129
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	10 82       	st	Z, r1
     58e:	8c ef       	ldi	r24, 0xFC	; 252
     590:	80 93 85 00 	sts	0x0085, r24
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 84 00 	sts	0x0084, r24
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	90 93 89 00 	sts	0x0089, r25
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	80 93 88 00 	sts	0x0088, r24
     5a6:	90 93 8b 00 	sts	0x008B, r25
     5aa:	80 93 8a 00 	sts	0x008A, r24
     5ae:	90 93 8d 00 	sts	0x008D, r25
     5b2:	80 93 8c 00 	sts	0x008C, r24
     5b6:	90 93 87 00 	sts	0x0087, r25
     5ba:	80 93 86 00 	sts	0x0086, r24
     5be:	8b ea       	ldi	r24, 0xAB	; 171
     5c0:	80 93 80 00 	sts	0x0080, r24
     5c4:	10 92 82 00 	sts	0x0082, r1
     5c8:	8c e0       	ldi	r24, 0x0C	; 12
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret

000005ce <port_init>:
     5ce:	ab df       	rcall	.-170    	; 0x526 <lcd_port_config>
     5d0:	cb df       	rcall	.-106    	; 0x568 <adc_pin_config>
     5d2:	3b 9a       	sbi	0x07, 3	; 7
     5d4:	43 98       	cbi	0x08, 3	; 8
     5d6:	cf df       	rcall	.-98     	; 0x576 <servo1_pin_config>
     5d8:	d1 df       	rcall	.-94     	; 0x57c <servo2_pin_config>
     5da:	d3 df       	rcall	.-90     	; 0x582 <servo3_pin_config>
     5dc:	ab cf       	rjmp	.-170    	; 0x534 <color_sensor_pin_config>
     5de:	08 95       	ret

000005e0 <buzzer_on>:
     5e0:	86 b1       	in	r24, 0x06	; 6
     5e2:	88 60       	ori	r24, 0x08	; 8
     5e4:	88 b9       	out	0x08, r24	; 8
     5e6:	08 95       	ret

000005e8 <buzzer_off>:
     5e8:	86 b1       	in	r24, 0x06	; 6
     5ea:	87 7f       	andi	r24, 0xF7	; 247
     5ec:	88 b9       	out	0x08, r24	; 8
     5ee:	08 95       	ret

000005f0 <ADC_Conversion>:
     5f0:	88 30       	cpi	r24, 0x08	; 8
     5f2:	18 f0       	brcs	.+6      	; 0x5fa <ADC_Conversion+0xa>
     5f4:	98 e0       	ldi	r25, 0x08	; 8
     5f6:	90 93 7b 00 	sts	0x007B, r25
     5fa:	87 70       	andi	r24, 0x07	; 7
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	80 93 7c 00 	sts	0x007C, r24
     602:	ea e7       	ldi	r30, 0x7A	; 122
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	80 64       	ori	r24, 0x40	; 64
     60a:	80 83       	st	Z, r24
     60c:	80 81       	ld	r24, Z
     60e:	84 ff       	sbrs	r24, 4
     610:	fd cf       	rjmp	.-6      	; 0x60c <ADC_Conversion+0x1c>
     612:	80 91 79 00 	lds	r24, 0x0079
     616:	ea e7       	ldi	r30, 0x7A	; 122
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	90 81       	ld	r25, Z
     61c:	90 61       	ori	r25, 0x10	; 16
     61e:	90 83       	st	Z, r25
     620:	10 92 7b 00 	sts	0x007B, r1
     624:	08 95       	ret

00000626 <color_sensor_pin_interrupt_init>:
     626:	f8 94       	cli
     628:	e9 e6       	ldi	r30, 0x69	; 105
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	82 60       	ori	r24, 0x02	; 2
     630:	80 83       	st	Z, r24
     632:	e8 9a       	sbi	0x1d, 0	; 29
     634:	78 94       	sei
     636:	08 95       	ret

00000638 <__vector_1>:
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	8f 93       	push	r24
     644:	9f 93       	push	r25
     646:	af 93       	push	r26
     648:	bf 93       	push	r27
     64a:	80 91 12 02 	lds	r24, 0x0212
     64e:	90 91 13 02 	lds	r25, 0x0213
     652:	a0 91 14 02 	lds	r26, 0x0214
     656:	b0 91 15 02 	lds	r27, 0x0215
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	a1 1d       	adc	r26, r1
     65e:	b1 1d       	adc	r27, r1
     660:	80 93 12 02 	sts	0x0212, r24
     664:	90 93 13 02 	sts	0x0213, r25
     668:	a0 93 14 02 	sts	0x0214, r26
     66c:	b0 93 15 02 	sts	0x0215, r27
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	1f 90       	pop	r1
     680:	18 95       	reti

00000682 <adc_init>:
     682:	ea e7       	ldi	r30, 0x7A	; 122
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	10 82       	st	Z, r1
     688:	10 92 7b 00 	sts	0x007B, r1
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	80 93 7c 00 	sts	0x007C, r24
     692:	80 e8       	ldi	r24, 0x80	; 128
     694:	80 bf       	out	0x30, r24	; 48
     696:	86 e8       	ldi	r24, 0x86	; 134
     698:	80 83       	st	Z, r24
     69a:	08 95       	ret

0000069c <filter_red>:
     69c:	5e 98       	cbi	0x0b, 6	; 11
     69e:	5f 98       	cbi	0x0b, 7	; 11
     6a0:	08 95       	ret

000006a2 <filter_green>:
     6a2:	5e 9a       	sbi	0x0b, 6	; 11
     6a4:	5f 9a       	sbi	0x0b, 7	; 11
     6a6:	08 95       	ret

000006a8 <filter_blue>:
     6a8:	5e 98       	cbi	0x0b, 6	; 11
     6aa:	5f 9a       	sbi	0x0b, 7	; 11
     6ac:	08 95       	ret

000006ae <color_sensor_scaling>:
     6ae:	5c 9a       	sbi	0x0b, 4	; 11
     6b0:	5d 9a       	sbi	0x0b, 5	; 11
     6b2:	08 95       	ret

000006b4 <red_read>:
     6b4:	f3 df       	rcall	.-26     	; 0x69c <filter_red>
     6b6:	10 92 12 02 	sts	0x0212, r1
     6ba:	10 92 13 02 	sts	0x0213, r1
     6be:	10 92 14 02 	sts	0x0214, r1
     6c2:	10 92 15 02 	sts	0x0215, r1
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	8f e7       	ldi	r24, 0x7F	; 127
     6ca:	94 e0       	ldi	r25, 0x04	; 4
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <red_read+0x18>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <red_read+0x22>
     6d6:	00 00       	nop
     6d8:	80 91 12 02 	lds	r24, 0x0212
     6dc:	90 91 13 02 	lds	r25, 0x0213
     6e0:	a0 91 14 02 	lds	r26, 0x0214
     6e4:	b0 91 15 02 	lds	r27, 0x0215
     6e8:	80 93 38 02 	sts	0x0238, r24
     6ec:	90 93 39 02 	sts	0x0239, r25
     6f0:	a0 93 3a 02 	sts	0x023A, r26
     6f4:	b0 93 3b 02 	sts	0x023B, r27
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	9c e2       	ldi	r25, 0x2C	; 44
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <red_read+0x4a>
     706:	00 c0       	rjmp	.+0      	; 0x708 <red_read+0x54>
     708:	00 00       	nop
     70a:	08 95       	ret

0000070c <green_read>:
     70c:	ca df       	rcall	.-108    	; 0x6a2 <filter_green>
     70e:	10 92 12 02 	sts	0x0212, r1
     712:	10 92 13 02 	sts	0x0213, r1
     716:	10 92 14 02 	sts	0x0214, r1
     71a:	10 92 15 02 	sts	0x0215, r1
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	8f e7       	ldi	r24, 0x7F	; 127
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	21 50       	subi	r18, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <green_read+0x18>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <green_read+0x22>
     72e:	00 00       	nop
     730:	80 91 12 02 	lds	r24, 0x0212
     734:	90 91 13 02 	lds	r25, 0x0213
     738:	a0 91 14 02 	lds	r26, 0x0214
     73c:	b0 91 15 02 	lds	r27, 0x0215
     740:	80 93 34 02 	sts	0x0234, r24
     744:	90 93 35 02 	sts	0x0235, r25
     748:	a0 93 36 02 	sts	0x0236, r26
     74c:	b0 93 37 02 	sts	0x0237, r27
     750:	08 95       	ret

00000752 <blue_read>:
     752:	aa df       	rcall	.-172    	; 0x6a8 <filter_blue>
     754:	10 92 12 02 	sts	0x0212, r1
     758:	10 92 13 02 	sts	0x0213, r1
     75c:	10 92 14 02 	sts	0x0214, r1
     760:	10 92 15 02 	sts	0x0215, r1
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	8f e7       	ldi	r24, 0x7F	; 127
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <blue_read+0x18>
     772:	00 c0       	rjmp	.+0      	; 0x774 <blue_read+0x22>
     774:	00 00       	nop
     776:	80 91 12 02 	lds	r24, 0x0212
     77a:	90 91 13 02 	lds	r25, 0x0213
     77e:	a0 91 14 02 	lds	r26, 0x0214
     782:	b0 91 15 02 	lds	r27, 0x0215
     786:	80 93 28 02 	sts	0x0228, r24
     78a:	90 93 29 02 	sts	0x0229, r25
     78e:	a0 93 2a 02 	sts	0x022A, r26
     792:	b0 93 2b 02 	sts	0x022B, r27
     796:	08 95       	ret

00000798 <left_encoder_pin_config>:
     798:	6c 98       	cbi	0x0d, 4	; 13
     79a:	74 9a       	sbi	0x0e, 4	; 14
     79c:	08 95       	ret

0000079e <right_encoder_pin_config>:
     79e:	6d 98       	cbi	0x0d, 5	; 13
     7a0:	75 9a       	sbi	0x0e, 5	; 14
     7a2:	08 95       	ret

000007a4 <port_init_poz>:
     7a4:	8e de       	rcall	.-740    	; 0x4c2 <motion_pin_config>
     7a6:	f8 df       	rcall	.-16     	; 0x798 <left_encoder_pin_config>
     7a8:	fa cf       	rjmp	.-12     	; 0x79e <right_encoder_pin_config>
     7aa:	08 95       	ret

000007ac <left_position_encoder_interrupt_init>:
     7ac:	f8 94       	cli
     7ae:	ea e6       	ldi	r30, 0x6A	; 106
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	82 60       	ori	r24, 0x02	; 2
     7b6:	80 83       	st	Z, r24
     7b8:	ec 9a       	sbi	0x1d, 4	; 29
     7ba:	78 94       	sei
     7bc:	08 95       	ret

000007be <right_position_encoder_interrupt_init>:
     7be:	f8 94       	cli
     7c0:	ea e6       	ldi	r30, 0x6A	; 106
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	88 60       	ori	r24, 0x08	; 8
     7c8:	80 83       	st	Z, r24
     7ca:	ed 9a       	sbi	0x1d, 5	; 29
     7cc:	78 94       	sei
     7ce:	08 95       	ret

000007d0 <__vector_6>:
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	80 91 16 02 	lds	r24, 0x0216
     7e6:	90 91 17 02 	lds	r25, 0x0217
     7ea:	a0 91 18 02 	lds	r26, 0x0218
     7ee:	b0 91 19 02 	lds	r27, 0x0219
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	a1 1d       	adc	r26, r1
     7f6:	b1 1d       	adc	r27, r1
     7f8:	80 93 16 02 	sts	0x0216, r24
     7fc:	90 93 17 02 	sts	0x0217, r25
     800:	a0 93 18 02 	sts	0x0218, r26
     804:	b0 93 19 02 	sts	0x0219, r27
     808:	bf 91       	pop	r27
     80a:	af 91       	pop	r26
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_5>:
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	80 91 1a 02 	lds	r24, 0x021A
     830:	90 91 1b 02 	lds	r25, 0x021B
     834:	a0 91 1c 02 	lds	r26, 0x021C
     838:	b0 91 1d 02 	lds	r27, 0x021D
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	a1 1d       	adc	r26, r1
     840:	b1 1d       	adc	r27, r1
     842:	80 93 1a 02 	sts	0x021A, r24
     846:	90 93 1b 02 	sts	0x021B, r25
     84a:	a0 93 1c 02 	sts	0x021C, r26
     84e:	b0 93 1d 02 	sts	0x021D, r27
     852:	bf 91       	pop	r27
     854:	af 91       	pop	r26
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <angle_rotate>:
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	bc 01       	movw	r22, r24
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 b3 18 	call	0x3166	; 0x3166 <__floatunsisf>
     87a:	28 e4       	ldi	r18, 0x48	; 72
     87c:	31 ee       	ldi	r19, 0xE1	; 225
     87e:	42 e8       	ldi	r20, 0x82	; 130
     880:	50 e4       	ldi	r21, 0x40	; 64
     882:	0e 94 1f 18 	call	0x303e	; 0x303e <__divsf3>
     886:	0e 94 87 18 	call	0x310e	; 0x310e <__fixunssfsi>
     88a:	cb 01       	movw	r24, r22
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	10 92 16 02 	sts	0x0216, r1
     894:	10 92 17 02 	sts	0x0217, r1
     898:	10 92 18 02 	sts	0x0218, r1
     89c:	10 92 19 02 	sts	0x0219, r1
     8a0:	10 92 1a 02 	sts	0x021A, r1
     8a4:	10 92 1b 02 	sts	0x021B, r1
     8a8:	10 92 1c 02 	sts	0x021C, r1
     8ac:	10 92 1d 02 	sts	0x021D, r1
     8b0:	51 e0       	ldi	r21, 0x01	; 1
     8b2:	e0 e0       	ldi	r30, 0x00	; 0
     8b4:	c0 90 16 02 	lds	r12, 0x0216
     8b8:	d0 90 17 02 	lds	r13, 0x0217
     8bc:	e0 90 18 02 	lds	r14, 0x0218
     8c0:	f0 90 19 02 	lds	r15, 0x0219
     8c4:	00 91 1a 02 	lds	r16, 0x021A
     8c8:	10 91 1b 02 	lds	r17, 0x021B
     8cc:	20 91 1c 02 	lds	r18, 0x021C
     8d0:	30 91 1d 02 	lds	r19, 0x021D
     8d4:	45 2f       	mov	r20, r21
     8d6:	08 17       	cp	r16, r24
     8d8:	19 07       	cpc	r17, r25
     8da:	2a 07       	cpc	r18, r26
     8dc:	3b 07       	cpc	r19, r27
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <angle_rotate+0x7e>
     8e0:	4e 2f       	mov	r20, r30
     8e2:	41 11       	cpse	r20, r1
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <angle_rotate+0x94>
     8e6:	25 2f       	mov	r18, r21
     8e8:	c8 16       	cp	r12, r24
     8ea:	d9 06       	cpc	r13, r25
     8ec:	ea 06       	cpc	r14, r26
     8ee:	fb 06       	cpc	r15, r27
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <angle_rotate+0x90>
     8f2:	2e 2f       	mov	r18, r30
     8f4:	22 23       	and	r18, r18
     8f6:	f1 f2       	breq	.-68     	; 0x8b4 <angle_rotate+0x50>
     8f8:	13 de       	rcall	.-986    	; 0x520 <stop>
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <linear_distance_mm>:
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	bc 01       	movw	r22, r24
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 b3 18 	call	0x3166	; 0x3166 <__floatunsisf>
     916:	25 ee       	ldi	r18, 0xE5	; 229
     918:	30 ed       	ldi	r19, 0xD0	; 208
     91a:	4a ea       	ldi	r20, 0xAA	; 170
     91c:	50 e4       	ldi	r21, 0x40	; 64
     91e:	0e 94 1f 18 	call	0x303e	; 0x303e <__divsf3>
     922:	0e 94 87 18 	call	0x310e	; 0x310e <__fixunssfsi>
     926:	10 92 16 02 	sts	0x0216, r1
     92a:	10 92 17 02 	sts	0x0217, r1
     92e:	10 92 18 02 	sts	0x0218, r1
     932:	10 92 19 02 	sts	0x0219, r1
     936:	00 91 16 02 	lds	r16, 0x0216
     93a:	10 91 17 02 	lds	r17, 0x0217
     93e:	20 91 18 02 	lds	r18, 0x0218
     942:	30 91 19 02 	lds	r19, 0x0219
     946:	60 17       	cp	r22, r16
     948:	71 07       	cpc	r23, r17
     94a:	82 07       	cpc	r24, r18
     94c:	93 07       	cpc	r25, r19
     94e:	98 f7       	brcc	.-26     	; 0x936 <linear_distance_mm+0x2e>
     950:	e7 dd       	rcall	.-1074   	; 0x520 <stop>
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <forward_mm>:
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	c8 dd       	rcall	.-1136   	; 0x4f0 <forward>
     960:	ce 01       	movw	r24, r28
     962:	d2 df       	rcall	.-92     	; 0x908 <linear_distance_mm>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <back_mm>:
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
     970:	c2 dd       	rcall	.-1148   	; 0x4f6 <back>
     972:	ce 01       	movw	r24, r28
     974:	c9 df       	rcall	.-110    	; 0x908 <linear_distance_mm>
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <left_degrees>:
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
     982:	bc dd       	rcall	.-1160   	; 0x4fc <left>
     984:	ce 01       	movw	r24, r28
     986:	6e df       	rcall	.-292    	; 0x864 <angle_rotate>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <right_degrees>:
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	ec 01       	movw	r28, r24
     994:	b6 dd       	rcall	.-1172   	; 0x502 <right>
     996:	ce 01       	movw	r24, r28
     998:	65 df       	rcall	.-310    	; 0x864 <angle_rotate>
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <init_devices>:
     9a0:	f8 94       	cli
     9a2:	00 df       	rcall	.-512    	; 0x7a4 <port_init_poz>
     9a4:	03 df       	rcall	.-506    	; 0x7ac <left_position_encoder_interrupt_init>
     9a6:	0b df       	rcall	.-490    	; 0x7be <right_position_encoder_interrupt_init>
     9a8:	12 de       	rcall	.-988    	; 0x5ce <port_init>
     9aa:	3d de       	rcall	.-902    	; 0x626 <color_sensor_pin_interrupt_init>
     9ac:	6a de       	rcall	.-812    	; 0x682 <adc_init>
     9ae:	89 dd       	rcall	.-1262   	; 0x4c2 <motion_pin_config>
     9b0:	6d dd       	rcall	.-1318   	; 0x48c <timer5_init>
     9b2:	ea dd       	rcall	.-1068   	; 0x588 <timer1_init>
     9b4:	78 94       	sei
     9b6:	08 95       	ret

000009b8 <buzzer>:
     9b8:	13 de       	rcall	.-986    	; 0x5e0 <buzzer_on>
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	8f e7       	ldi	r24, 0x7F	; 127
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	80 40       	sbci	r24, 0x00	; 0
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <buzzer+0x8>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <buzzer+0x12>
     9ca:	00 00       	nop
     9cc:	0d ce       	rjmp	.-998    	; 0x5e8 <buzzer_off>
     9ce:	08 95       	ret

000009d0 <set_color>:
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	0e de       	rcall	.-996    	; 0x5f0 <ADC_Conversion>
     9d4:	80 93 0b 02 	sts	0x020B, r24
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	0a de       	rcall	.-1004   	; 0x5f0 <ADC_Conversion>
     9dc:	80 93 0a 02 	sts	0x020A, r24
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	06 de       	rcall	.-1012   	; 0x5f0 <ADC_Conversion>
     9e4:	80 93 09 02 	sts	0x0209, r24
     9e8:	08 95       	ret

000009ea <scan>:
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	62 de       	rcall	.-828    	; 0x6b4 <red_read>
     9f0:	b0 de       	rcall	.-672    	; 0x752 <blue_read>
     9f2:	8c de       	rcall	.-744    	; 0x70c <green_read>
     9f4:	8b e0       	ldi	r24, 0x0B	; 11
     9f6:	fc dd       	rcall	.-1032   	; 0x5f0 <ADC_Conversion>
     9f8:	88 33       	cpi	r24, 0x38	; 56
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <scan+0x14>
     9fc:	7b c0       	rjmp	.+246    	; 0xaf4 <scan+0x10a>
     9fe:	8b e0       	ldi	r24, 0x0B	; 11
     a00:	f7 dd       	rcall	.-1042   	; 0x5f0 <ADC_Conversion>
     a02:	84 36       	cpi	r24, 0x64	; 100
     a04:	08 f0       	brcs	.+2      	; 0xa08 <scan+0x1e>
     a06:	79 c0       	rjmp	.+242    	; 0xafa <scan+0x110>
     a08:	80 91 26 02 	lds	r24, 0x0226
     a0c:	90 91 27 02 	lds	r25, 0x0227
     a10:	aa 27       	eor	r26, r26
     a12:	97 fd       	sbrc	r25, 7
     a14:	a0 95       	com	r26
     a16:	ba 2f       	mov	r27, r26
     a18:	40 91 38 02 	lds	r20, 0x0238
     a1c:	50 91 39 02 	lds	r21, 0x0239
     a20:	60 91 3a 02 	lds	r22, 0x023A
     a24:	70 91 3b 02 	lds	r23, 0x023B
     a28:	48 17       	cp	r20, r24
     a2a:	59 07       	cpc	r21, r25
     a2c:	6a 07       	cpc	r22, r26
     a2e:	7b 07       	cpc	r23, r27
     a30:	d8 f4       	brcc	.+54     	; 0xa68 <scan+0x7e>
     a32:	40 91 34 02 	lds	r20, 0x0234
     a36:	50 91 35 02 	lds	r21, 0x0235
     a3a:	60 91 36 02 	lds	r22, 0x0236
     a3e:	70 91 37 02 	lds	r23, 0x0237
     a42:	48 17       	cp	r20, r24
     a44:	59 07       	cpc	r21, r25
     a46:	6a 07       	cpc	r22, r26
     a48:	7b 07       	cpc	r23, r27
     a4a:	70 f4       	brcc	.+28     	; 0xa68 <scan+0x7e>
     a4c:	40 91 28 02 	lds	r20, 0x0228
     a50:	50 91 29 02 	lds	r21, 0x0229
     a54:	60 91 2a 02 	lds	r22, 0x022A
     a58:	70 91 2b 02 	lds	r23, 0x022B
     a5c:	48 17       	cp	r20, r24
     a5e:	59 07       	cpc	r21, r25
     a60:	6a 07       	cpc	r22, r26
     a62:	7b 07       	cpc	r23, r27
     a64:	08 f4       	brcc	.+2      	; 0xa68 <scan+0x7e>
     a66:	4c c0       	rjmp	.+152    	; 0xb00 <scan+0x116>
     a68:	40 91 38 02 	lds	r20, 0x0238
     a6c:	50 91 39 02 	lds	r21, 0x0239
     a70:	60 91 3a 02 	lds	r22, 0x023A
     a74:	70 91 3b 02 	lds	r23, 0x023B
     a78:	80 91 28 02 	lds	r24, 0x0228
     a7c:	90 91 29 02 	lds	r25, 0x0229
     a80:	a0 91 2a 02 	lds	r26, 0x022A
     a84:	b0 91 2b 02 	lds	r27, 0x022B
     a88:	84 17       	cp	r24, r20
     a8a:	95 07       	cpc	r25, r21
     a8c:	a6 07       	cpc	r26, r22
     a8e:	b7 07       	cpc	r27, r23
     a90:	c8 f4       	brcc	.+50     	; 0xac4 <scan+0xda>
     a92:	00 91 38 02 	lds	r16, 0x0238
     a96:	10 91 39 02 	lds	r17, 0x0239
     a9a:	20 91 3a 02 	lds	r18, 0x023A
     a9e:	30 91 3b 02 	lds	r19, 0x023B
     aa2:	40 91 34 02 	lds	r20, 0x0234
     aa6:	50 91 35 02 	lds	r21, 0x0235
     aaa:	60 91 36 02 	lds	r22, 0x0236
     aae:	70 91 37 02 	lds	r23, 0x0237
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	40 17       	cp	r20, r16
     ab8:	51 07       	cpc	r21, r17
     aba:	62 07       	cpc	r22, r18
     abc:	73 07       	cpc	r23, r19
     abe:	28 f5       	brcc	.+74     	; 0xb0a <scan+0x120>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	23 c0       	rjmp	.+70     	; 0xb0a <scan+0x120>
     ac4:	40 91 28 02 	lds	r20, 0x0228
     ac8:	50 91 29 02 	lds	r21, 0x0229
     acc:	60 91 2a 02 	lds	r22, 0x022A
     ad0:	70 91 2b 02 	lds	r23, 0x022B
     ad4:	80 91 34 02 	lds	r24, 0x0234
     ad8:	90 91 35 02 	lds	r25, 0x0235
     adc:	a0 91 36 02 	lds	r26, 0x0236
     ae0:	b0 91 37 02 	lds	r27, 0x0237
     ae4:	84 17       	cp	r24, r20
     ae6:	95 07       	cpc	r25, r21
     ae8:	a6 07       	cpc	r26, r22
     aea:	b7 07       	cpc	r27, r23
     aec:	60 f4       	brcc	.+24     	; 0xb06 <scan+0x11c>
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0b c0       	rjmp	.+22     	; 0xb0a <scan+0x120>
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	9f ef       	ldi	r25, 0xFF	; 255
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <scan+0x120>
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <scan+0x120>
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <scan+0x120>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	08 95       	ret

00000b10 <lower>:
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	31 f4       	brne	.+12     	; 0xb20 <lower+0x10>
     b14:	10 92 8b 00 	sts	0x008B, r1
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	80 93 8a 00 	sts	0x008A, r24
     b1e:	08 95       	ret
     b20:	10 92 8b 00 	sts	0x008B, r1
     b24:	82 e6       	ldi	r24, 0x62	; 98
     b26:	80 93 8a 00 	sts	0x008A, r24
     b2a:	08 95       	ret

00000b2c <elevate>:
     b2c:	10 92 8b 00 	sts	0x008B, r1
     b30:	83 e5       	ldi	r24, 0x53	; 83
     b32:	80 93 8a 00 	sts	0x008A, r24
     b36:	2f ef       	ldi	r18, 0xFF	; 255
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	9a e1       	ldi	r25, 0x1A	; 26
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	80 40       	sbci	r24, 0x00	; 0
     b40:	90 40       	sbci	r25, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <elevate+0x10>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <elevate+0x1a>
     b46:	00 00       	nop
     b48:	01 cd       	rjmp	.-1534   	; 0x54c <servo_2_free>
     b4a:	08 95       	ret

00000b4c <open>:
     b4c:	81 11       	cpse	r24, r1
     b4e:	10 c0       	rjmp	.+32     	; 0xb70 <open+0x24>
     b50:	10 92 8d 00 	sts	0x008D, r1
     b54:	83 e2       	ldi	r24, 0x23	; 35
     b56:	80 93 8c 00 	sts	0x008C, r24
     b5a:	2f ef       	ldi	r18, 0xFF	; 255
     b5c:	8f e7       	ldi	r24, 0x7F	; 127
     b5e:	96 e1       	ldi	r25, 0x16	; 22
     b60:	21 50       	subi	r18, 0x01	; 1
     b62:	80 40       	sbci	r24, 0x00	; 0
     b64:	90 40       	sbci	r25, 0x00	; 0
     b66:	e1 f7       	brne	.-8      	; 0xb60 <open+0x14>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <open+0x1e>
     b6a:	00 00       	nop
     b6c:	f6 cc       	rjmp	.-1556   	; 0x55a <servo_3_free>
     b6e:	08 95       	ret
     b70:	10 92 89 00 	sts	0x0089, r1
     b74:	83 e2       	ldi	r24, 0x23	; 35
     b76:	80 93 88 00 	sts	0x0088, r24
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	8f e7       	ldi	r24, 0x7F	; 127
     b7e:	96 e1       	ldi	r25, 0x16	; 22
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	90 40       	sbci	r25, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <open+0x34>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <open+0x3e>
     b8a:	00 00       	nop
     b8c:	d8 cc       	rjmp	.-1616   	; 0x53e <servo_1_free>
     b8e:	08 95       	ret

00000b90 <close>:
     b90:	81 11       	cpse	r24, r1
     b92:	06 c0       	rjmp	.+12     	; 0xba0 <close+0x10>
     b94:	10 92 8d 00 	sts	0x008D, r1
     b98:	88 e4       	ldi	r24, 0x48	; 72
     b9a:	80 93 8c 00 	sts	0x008C, r24
     b9e:	08 95       	ret
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	29 f4       	brne	.+10     	; 0xbae <close+0x1e>
     ba4:	10 92 89 00 	sts	0x0089, r1
     ba8:	88 e4       	ldi	r24, 0x48	; 72
     baa:	80 93 88 00 	sts	0x0088, r24
     bae:	08 95       	ret

00000bb0 <node>:
     bb0:	86 e9       	ldi	r24, 0x96	; 150
     bb2:	80 93 28 01 	sts	0x0128, r24
     bb6:	80 93 2a 01 	sts	0x012A, r24
     bba:	8c e3       	ldi	r24, 0x3C	; 60
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	cc de       	rcall	.-616    	; 0x958 <forward_mm>
     bc0:	af cc       	rjmp	.-1698   	; 0x520 <stop>
     bc2:	08 95       	ret

00000bc4 <turnRight>:
     bc4:	80 91 00 02 	lds	r24, 0x0200
     bc8:	90 91 01 02 	lds	r25, 0x0201
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	91 05       	cpc	r25, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <turnRight+0x1c>
     bd2:	80 91 02 02 	lds	r24, 0x0202
     bd6:	90 91 03 02 	lds	r25, 0x0203
     bda:	02 97       	sbiw	r24, 0x02	; 2
     bdc:	98 f4       	brcc	.+38     	; 0xc04 <turnRight+0x40>
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <turnRight+0x2e>
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	81 f4       	brne	.+32     	; 0xc04 <turnRight+0x40>
     be4:	80 91 02 02 	lds	r24, 0x0202
     be8:	90 91 03 02 	lds	r25, 0x0203
     bec:	02 97       	sbiw	r24, 0x02	; 2
     bee:	02 97       	sbiw	r24, 0x02	; 2
     bf0:	48 f4       	brcc	.+18     	; 0xc04 <turnRight+0x40>
     bf2:	86 e9       	ldi	r24, 0x96	; 150
     bf4:	80 93 28 01 	sts	0x0128, r24
     bf8:	80 93 2a 01 	sts	0x012A, r24
     bfc:	8a e5       	ldi	r24, 0x5A	; 90
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	c6 de       	rcall	.-628    	; 0x98e <right_degrees>
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <turnRight+0x5e>
     c04:	86 e9       	ldi	r24, 0x96	; 150
     c06:	80 93 28 01 	sts	0x0128, r24
     c0a:	80 93 2a 01 	sts	0x012A, r24
     c0e:	8e e1       	ldi	r24, 0x1E	; 30
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	bd de       	rcall	.-646    	; 0x98e <right_degrees>
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <turnRight+0x54>
     c16:	75 dc       	rcall	.-1814   	; 0x502 <right>
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	ea dc       	rcall	.-1580   	; 0x5f0 <ADC_Conversion>
     c1c:	82 33       	cpi	r24, 0x32	; 50
     c1e:	d8 f3       	brcs	.-10     	; 0xc16 <turnRight+0x52>
     c20:	7f dc       	rcall	.-1794   	; 0x520 <stop>
     c22:	80 91 00 02 	lds	r24, 0x0200
     c26:	90 91 01 02 	lds	r25, 0x0201
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	83 70       	andi	r24, 0x03	; 3
     c2e:	90 78       	andi	r25, 0x80	; 128
     c30:	99 23       	and	r25, r25
     c32:	24 f4       	brge	.+8      	; 0xc3c <turnRight+0x78>
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	8c 6f       	ori	r24, 0xFC	; 252
     c38:	9f 6f       	ori	r25, 0xFF	; 255
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	90 93 01 02 	sts	0x0201, r25
     c40:	80 93 00 02 	sts	0x0200, r24
     c44:	80 91 55 02 	lds	r24, 0x0255
     c48:	90 91 56 02 	lds	r25, 0x0256
     c4c:	86 5a       	subi	r24, 0xA6	; 166
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	90 93 56 02 	sts	0x0256, r25
     c54:	80 93 55 02 	sts	0x0255, r24
     c58:	08 95       	ret

00000c5a <turnLeft>:
     c5a:	80 91 00 02 	lds	r24, 0x0200
     c5e:	90 91 01 02 	lds	r25, 0x0201
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	91 05       	cpc	r25, r1
     c66:	39 f4       	brne	.+14     	; 0xc76 <turnLeft+0x1c>
     c68:	80 91 02 02 	lds	r24, 0x0202
     c6c:	90 91 03 02 	lds	r25, 0x0203
     c70:	02 97       	sbiw	r24, 0x02	; 2
     c72:	98 f4       	brcc	.+38     	; 0xc9a <turnLeft+0x40>
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <turnLeft+0x2e>
     c76:	03 97       	sbiw	r24, 0x03	; 3
     c78:	81 f4       	brne	.+32     	; 0xc9a <turnLeft+0x40>
     c7a:	80 91 02 02 	lds	r24, 0x0202
     c7e:	90 91 03 02 	lds	r25, 0x0203
     c82:	02 97       	sbiw	r24, 0x02	; 2
     c84:	02 97       	sbiw	r24, 0x02	; 2
     c86:	48 f4       	brcc	.+18     	; 0xc9a <turnLeft+0x40>
     c88:	86 e9       	ldi	r24, 0x96	; 150
     c8a:	80 93 28 01 	sts	0x0128, r24
     c8e:	80 93 2a 01 	sts	0x012A, r24
     c92:	8a e5       	ldi	r24, 0x5A	; 90
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	72 de       	rcall	.-796    	; 0x97c <left_degrees>
     c98:	0f c0       	rjmp	.+30     	; 0xcb8 <turnLeft+0x5e>
     c9a:	8e e1       	ldi	r24, 0x1E	; 30
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	6e de       	rcall	.-804    	; 0x97c <left_degrees>
     ca0:	86 e9       	ldi	r24, 0x96	; 150
     ca2:	80 93 28 01 	sts	0x0128, r24
     ca6:	80 93 2a 01 	sts	0x012A, r24
     caa:	01 c0       	rjmp	.+2      	; 0xcae <turnLeft+0x54>
     cac:	27 dc       	rcall	.-1970   	; 0x4fc <left>
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	9f dc       	rcall	.-1730   	; 0x5f0 <ADC_Conversion>
     cb2:	82 33       	cpi	r24, 0x32	; 50
     cb4:	d8 f3       	brcs	.-10     	; 0xcac <turnLeft+0x52>
     cb6:	34 dc       	rcall	.-1944   	; 0x520 <stop>
     cb8:	80 91 00 02 	lds	r24, 0x0200
     cbc:	90 91 01 02 	lds	r25, 0x0201
     cc0:	03 96       	adiw	r24, 0x03	; 3
     cc2:	83 70       	andi	r24, 0x03	; 3
     cc4:	90 78       	andi	r25, 0x80	; 128
     cc6:	99 23       	and	r25, r25
     cc8:	24 f4       	brge	.+8      	; 0xcd2 <turnLeft+0x78>
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	8c 6f       	ori	r24, 0xFC	; 252
     cce:	9f 6f       	ori	r25, 0xFF	; 255
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 01 02 	sts	0x0201, r25
     cd6:	80 93 00 02 	sts	0x0200, r24
     cda:	80 91 55 02 	lds	r24, 0x0255
     cde:	90 91 56 02 	lds	r25, 0x0256
     ce2:	86 5a       	subi	r24, 0xA6	; 166
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	90 93 56 02 	sts	0x0256, r25
     cea:	80 93 55 02 	sts	0x0255, r24
     cee:	64 ce       	rjmp	.-824    	; 0x9b8 <buzzer>
     cf0:	08 95       	ret

00000cf2 <turn>:
     cf2:	80 91 00 02 	lds	r24, 0x0200
     cf6:	90 91 01 02 	lds	r25, 0x0201
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	81 f4       	brne	.+32     	; 0xd1e <turn+0x2c>
     cfe:	80 91 02 02 	lds	r24, 0x0202
     d02:	90 91 03 02 	lds	r25, 0x0203
     d06:	02 97       	sbiw	r24, 0x02	; 2
     d08:	02 97       	sbiw	r24, 0x02	; 2
     d0a:	d0 f4       	brcc	.+52     	; 0xd40 <turn+0x4e>
     d0c:	86 e9       	ldi	r24, 0x96	; 150
     d0e:	80 93 28 01 	sts	0x0128, r24
     d12:	80 93 2a 01 	sts	0x012A, r24
     d16:	84 eb       	ldi	r24, 0xB4	; 180
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	30 de       	rcall	.-928    	; 0x97c <left_degrees>
     d1c:	20 c0       	rjmp	.+64     	; 0xd5e <turn+0x6c>
     d1e:	02 97       	sbiw	r24, 0x02	; 2
     d20:	79 f4       	brne	.+30     	; 0xd40 <turn+0x4e>
     d22:	80 91 02 02 	lds	r24, 0x0202
     d26:	90 91 03 02 	lds	r25, 0x0203
     d2a:	02 97       	sbiw	r24, 0x02	; 2
     d2c:	48 f4       	brcc	.+18     	; 0xd40 <turn+0x4e>
     d2e:	86 e9       	ldi	r24, 0x96	; 150
     d30:	80 93 28 01 	sts	0x0128, r24
     d34:	80 93 2a 01 	sts	0x012A, r24
     d38:	84 eb       	ldi	r24, 0xB4	; 180
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	1f de       	rcall	.-962    	; 0x97c <left_degrees>
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <turn+0x6c>
     d40:	86 e9       	ldi	r24, 0x96	; 150
     d42:	80 93 28 01 	sts	0x0128, r24
     d46:	80 93 2a 01 	sts	0x012A, r24
     d4a:	86 e9       	ldi	r24, 0x96	; 150
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	16 de       	rcall	.-980    	; 0x97c <left_degrees>
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <turn+0x62>
     d52:	d4 db       	rcall	.-2136   	; 0x4fc <left>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	4c dc       	rcall	.-1896   	; 0x5f0 <ADC_Conversion>
     d58:	8c 33       	cpi	r24, 0x3C	; 60
     d5a:	d8 f3       	brcs	.-10     	; 0xd52 <turn+0x60>
     d5c:	e1 db       	rcall	.-2110   	; 0x520 <stop>
     d5e:	80 91 00 02 	lds	r24, 0x0200
     d62:	90 91 01 02 	lds	r25, 0x0201
     d66:	02 96       	adiw	r24, 0x02	; 2
     d68:	83 70       	andi	r24, 0x03	; 3
     d6a:	90 78       	andi	r25, 0x80	; 128
     d6c:	99 23       	and	r25, r25
     d6e:	24 f4       	brge	.+8      	; 0xd78 <turn+0x86>
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	8c 6f       	ori	r24, 0xFC	; 252
     d74:	9f 6f       	ori	r25, 0xFF	; 255
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	90 93 01 02 	sts	0x0201, r25
     d7c:	80 93 00 02 	sts	0x0200, r24
     d80:	80 91 55 02 	lds	r24, 0x0255
     d84:	90 91 56 02 	lds	r25, 0x0256
     d88:	8c 54       	subi	r24, 0x4C	; 76
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	90 93 56 02 	sts	0x0256, r25
     d90:	80 93 55 02 	sts	0x0255, r24
     d94:	08 95       	ret

00000d96 <Delay>:
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	8c 01       	movw	r16, r24
     da0:	18 16       	cp	r1, r24
     da2:	19 06       	cpc	r1, r25
     da4:	8c f4       	brge	.+34     	; 0xdc8 <Delay+0x32>
     da6:	c0 e0       	ldi	r28, 0x00	; 0
     da8:	d0 e0       	ldi	r29, 0x00	; 0
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <Delay+0x28>
     dac:	86 e6       	ldi	r24, 0x66	; 102
     dae:	9e e0       	ldi	r25, 0x0E	; 14
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <Delay+0x1a>
     db4:	00 00       	nop
     db6:	21 96       	adiw	r28, 0x01	; 1
     db8:	c0 17       	cp	r28, r16
     dba:	d1 07       	cpc	r29, r17
     dbc:	39 f0       	breq	.+14     	; 0xdcc <Delay+0x36>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	17 dc       	rcall	.-2002   	; 0x5f0 <ADC_Conversion>
     dc2:	88 32       	cpi	r24, 0x28	; 40
     dc4:	98 f3       	brcs	.-26     	; 0xdac <Delay+0x16>
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <Delay+0x36>
     dc8:	c0 e0       	ldi	r28, 0x00	; 0
     dca:	d0 e0       	ldi	r29, 0x00	; 0
     dcc:	a9 db       	rcall	.-2222   	; 0x520 <stop>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	c0 17       	cp	r28, r16
     dd2:	d1 07       	cpc	r29, r17
     dd4:	0c f0       	brlt	.+2      	; 0xdd8 <Delay+0x42>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <semiCorrect_Indi>:
     de2:	80 91 0a 02 	lds	r24, 0x020A
     de6:	89 32       	cpi	r24, 0x29	; 41
     de8:	40 f0       	brcs	.+16     	; 0xdfa <semiCorrect_Indi+0x18>
     dea:	90 91 0b 02 	lds	r25, 0x020B
     dee:	99 32       	cpi	r25, 0x29	; 41
     df0:	08 f5       	brcc	.+66     	; 0xe34 <semiCorrect_Indi+0x52>
     df2:	90 91 09 02 	lds	r25, 0x0209
     df6:	99 32       	cpi	r25, 0x29	; 41
     df8:	e8 f4       	brcc	.+58     	; 0xe34 <semiCorrect_Indi+0x52>
     dfa:	88 32       	cpi	r24, 0x28	; 40
     dfc:	d8 f4       	brcc	.+54     	; 0xe34 <semiCorrect_Indi+0x52>
     dfe:	80 91 0b 02 	lds	r24, 0x020B
     e02:	89 32       	cpi	r24, 0x29	; 41
     e04:	58 f0       	brcs	.+22     	; 0xe1c <semiCorrect_Indi+0x3a>
     e06:	90 91 09 02 	lds	r25, 0x0209
     e0a:	98 32       	cpi	r25, 0x28	; 40
     e0c:	38 f4       	brcc	.+14     	; 0xe1c <semiCorrect_Indi+0x3a>
     e0e:	76 db       	rcall	.-2324   	; 0x4fc <left>
     e10:	df dd       	rcall	.-1090   	; 0x9d0 <set_color>
     e12:	80 91 0a 02 	lds	r24, 0x020A
     e16:	88 32       	cpi	r24, 0x28	; 40
     e18:	d0 f3       	brcs	.-12     	; 0xe0e <semiCorrect_Indi+0x2c>
     e1a:	08 95       	ret
     e1c:	90 91 09 02 	lds	r25, 0x0209
     e20:	99 32       	cpi	r25, 0x29	; 41
     e22:	40 f0       	brcs	.+16     	; 0xe34 <semiCorrect_Indi+0x52>
     e24:	88 32       	cpi	r24, 0x28	; 40
     e26:	30 f4       	brcc	.+12     	; 0xe34 <semiCorrect_Indi+0x52>
     e28:	6c db       	rcall	.-2344   	; 0x502 <right>
     e2a:	d2 dd       	rcall	.-1116   	; 0x9d0 <set_color>
     e2c:	80 91 0a 02 	lds	r24, 0x020A
     e30:	88 32       	cpi	r24, 0x28	; 40
     e32:	d0 f3       	brcs	.-12     	; 0xe28 <semiCorrect_Indi+0x46>
     e34:	08 95       	ret

00000e36 <correct_Indi>:
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	90 93 2d 02 	sts	0x022D, r25
     e42:	80 93 2c 02 	sts	0x022C, r24
     e46:	6c db       	rcall	.-2344   	; 0x520 <stop>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 08 02 	sts	0x0208, r24
     e4e:	c2 e3       	ldi	r28, 0x32	; 50
     e50:	d0 e0       	ldi	r29, 0x00	; 0
     e52:	54 db       	rcall	.-2392   	; 0x4fc <left>
     e54:	ce 01       	movw	r24, r28
     e56:	9f df       	rcall	.-194    	; 0xd96 <Delay>
     e58:	81 11       	cpse	r24, r1
     e5a:	24 c0       	rjmp	.+72     	; 0xea4 <correct_Indi+0x6e>
     e5c:	61 db       	rcall	.-2366   	; 0x520 <stop>
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	1c da       	rcall	.-3016   	; 0x2a4 <lcd_print>
     e6c:	ba df       	rcall	.-140    	; 0xde2 <semiCorrect_Indi>
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	bf db       	rcall	.-2178   	; 0x5f0 <ADC_Conversion>
     e72:	89 32       	cpi	r24, 0x29	; 41
     e74:	b0 f4       	brcc	.+44     	; 0xea2 <correct_Indi+0x6c>
     e76:	45 db       	rcall	.-2422   	; 0x502 <right>
     e78:	ce 01       	movw	r24, r28
     e7a:	c2 96       	adiw	r24, 0x32	; 50
     e7c:	8c df       	rcall	.-232    	; 0xd96 <Delay>
     e7e:	81 11       	cpse	r24, r1
     e80:	11 c0       	rjmp	.+34     	; 0xea4 <correct_Indi+0x6e>
     e82:	4e db       	rcall	.-2404   	; 0x520 <stop>
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	42 e0       	ldi	r20, 0x02	; 2
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	09 da       	rcall	.-3054   	; 0x2a4 <lcd_print>
     e92:	a7 df       	rcall	.-178    	; 0xde2 <semiCorrect_Indi>
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	ac db       	rcall	.-2216   	; 0x5f0 <ADC_Conversion>
     e98:	89 32       	cpi	r24, 0x29	; 41
     e9a:	18 f4       	brcc	.+6      	; 0xea2 <correct_Indi+0x6c>
     e9c:	cc 59       	subi	r28, 0x9C	; 156
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	d8 cf       	rjmp	.-80     	; 0xe52 <correct_Indi+0x1c>
     ea2:	3e db       	rcall	.-2436   	; 0x520 <stop>
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <noNatak_Indi>:
     eaa:	88 ec       	ldi	r24, 0xC8	; 200
     eac:	80 93 28 01 	sts	0x0128, r24
     eb0:	80 93 2a 01 	sts	0x012A, r24
     eb4:	80 91 0a 02 	lds	r24, 0x020A
     eb8:	88 32       	cpi	r24, 0x28	; 40
     eba:	80 f5       	brcc	.+96     	; 0xf1c <noNatak_Indi+0x72>
     ebc:	80 91 0b 02 	lds	r24, 0x020B
     ec0:	89 32       	cpi	r24, 0x29	; 41
     ec2:	a0 f0       	brcs	.+40     	; 0xeec <noNatak_Indi+0x42>
     ec4:	90 91 09 02 	lds	r25, 0x0209
     ec8:	98 32       	cpi	r25, 0x28	; 40
     eca:	80 f4       	brcc	.+32     	; 0xeec <noNatak_Indi+0x42>
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <noNatak_Indi+0x28>
     ece:	16 db       	rcall	.-2516   	; 0x4fc <left>
     ed0:	7f dd       	rcall	.-1282   	; 0x9d0 <set_color>
     ed2:	80 91 0a 02 	lds	r24, 0x020A
     ed6:	89 32       	cpi	r24, 0x29	; 41
     ed8:	d0 f3       	brcs	.-12     	; 0xece <noNatak_Indi+0x24>
     eda:	80 91 0b 02 	lds	r24, 0x020B
     ede:	88 32       	cpi	r24, 0x28	; 40
     ee0:	b0 f7       	brcc	.-20     	; 0xece <noNatak_Indi+0x24>
     ee2:	80 91 09 02 	lds	r24, 0x0209
     ee6:	88 32       	cpi	r24, 0x28	; 40
     ee8:	90 f7       	brcc	.-28     	; 0xece <noNatak_Indi+0x24>
     eea:	27 c0       	rjmp	.+78     	; 0xf3a <noNatak_Indi+0x90>
     eec:	90 91 09 02 	lds	r25, 0x0209
     ef0:	99 32       	cpi	r25, 0x29	; 41
     ef2:	90 f0       	brcs	.+36     	; 0xf18 <noNatak_Indi+0x6e>
     ef4:	88 32       	cpi	r24, 0x28	; 40
     ef6:	80 f4       	brcc	.+32     	; 0xf18 <noNatak_Indi+0x6e>
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <noNatak_Indi+0x54>
     efa:	03 db       	rcall	.-2554   	; 0x502 <right>
     efc:	69 dd       	rcall	.-1326   	; 0x9d0 <set_color>
     efe:	80 91 0a 02 	lds	r24, 0x020A
     f02:	89 32       	cpi	r24, 0x29	; 41
     f04:	d0 f3       	brcs	.-12     	; 0xefa <noNatak_Indi+0x50>
     f06:	80 91 0b 02 	lds	r24, 0x020B
     f0a:	88 32       	cpi	r24, 0x28	; 40
     f0c:	b0 f7       	brcc	.-20     	; 0xefa <noNatak_Indi+0x50>
     f0e:	80 91 09 02 	lds	r24, 0x0209
     f12:	88 32       	cpi	r24, 0x28	; 40
     f14:	90 f7       	brcc	.-28     	; 0xefa <noNatak_Indi+0x50>
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <noNatak_Indi+0x90>
     f18:	8e df       	rcall	.-228    	; 0xe36 <correct_Indi>
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <noNatak_Indi+0x90>
     f1c:	80 91 0b 02 	lds	r24, 0x020B
     f20:	89 32       	cpi	r24, 0x29	; 41
     f22:	20 f0       	brcs	.+8      	; 0xf2c <noNatak_Indi+0x82>
     f24:	90 91 09 02 	lds	r25, 0x0209
     f28:	98 32       	cpi	r25, 0x28	; 40
     f2a:	40 f0       	brcs	.+16     	; 0xf3c <noNatak_Indi+0x92>
     f2c:	88 32       	cpi	r24, 0x28	; 40
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <noNatak_Indi+0x8e>
     f30:	80 91 09 02 	lds	r24, 0x0209
     f34:	89 32       	cpi	r24, 0x29	; 41
     f36:	10 f4       	brcc	.+4      	; 0xf3c <noNatak_Indi+0x92>
     f38:	7e df       	rcall	.-260    	; 0xe36 <correct_Indi>
     f3a:	f2 ca       	rjmp	.-2588   	; 0x520 <stop>
     f3c:	08 95       	ret

00000f3e <forwardJaa_Indi>:
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	08 e2       	ldi	r16, 0x28	; 40
     f4a:	11 e0       	ldi	r17, 0x01	; 1
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f0 ef       	ldi	r31, 0xF0	; 240
     f50:	ff 2e       	mov	r15, r31
     f52:	f0 2d       	mov	r31, r0
     f54:	ca e2       	ldi	r28, 0x2A	; 42
     f56:	d1 e0       	ldi	r29, 0x01	; 1
     f58:	cb da       	rcall	.-2666   	; 0x4f0 <forward>
     f5a:	3a dd       	rcall	.-1420   	; 0x9d0 <set_color>
     f5c:	80 91 0a 02 	lds	r24, 0x020A
     f60:	89 32       	cpi	r24, 0x29	; 41
     f62:	40 f0       	brcs	.+16     	; 0xf74 <forwardJaa_Indi+0x36>
     f64:	80 91 0b 02 	lds	r24, 0x020B
     f68:	89 32       	cpi	r24, 0x29	; 41
     f6a:	a8 f4       	brcc	.+42     	; 0xf96 <forwardJaa_Indi+0x58>
     f6c:	80 91 09 02 	lds	r24, 0x0209
     f70:	89 32       	cpi	r24, 0x29	; 41
     f72:	88 f4       	brcc	.+34     	; 0xf96 <forwardJaa_Indi+0x58>
     f74:	f8 01       	movw	r30, r16
     f76:	f0 82       	st	Z, r15
     f78:	f8 82       	st	Y, r15
     f7a:	80 91 0a 02 	lds	r24, 0x020A
     f7e:	89 32       	cpi	r24, 0x29	; 41
     f80:	40 f0       	brcs	.+16     	; 0xf92 <forwardJaa_Indi+0x54>
     f82:	80 91 0b 02 	lds	r24, 0x020B
     f86:	88 32       	cpi	r24, 0x28	; 40
     f88:	20 f4       	brcc	.+8      	; 0xf92 <forwardJaa_Indi+0x54>
     f8a:	80 91 09 02 	lds	r24, 0x0209
     f8e:	88 32       	cpi	r24, 0x28	; 40
     f90:	18 f3       	brcs	.-58     	; 0xf58 <forwardJaa_Indi+0x1a>
     f92:	8b df       	rcall	.-234    	; 0xeaa <noNatak_Indi>
     f94:	d4 df       	rcall	.-88     	; 0xf3e <forwardJaa_Indi>
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	08 95       	ret

00000fa2 <semiCorrect>:
     fa2:	80 91 0a 02 	lds	r24, 0x020A
     fa6:	89 32       	cpi	r24, 0x29	; 41
     fa8:	58 f0       	brcs	.+22     	; 0xfc0 <semiCorrect+0x1e>
     faa:	90 91 0b 02 	lds	r25, 0x020B
     fae:	99 32       	cpi	r25, 0x29	; 41
     fb0:	20 f4       	brcc	.+8      	; 0xfba <semiCorrect+0x18>
     fb2:	90 91 09 02 	lds	r25, 0x0209
     fb6:	99 32       	cpi	r25, 0x29	; 41
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <semiCorrect+0x1e>
     fba:	fa dd       	rcall	.-1036   	; 0xbb0 <node>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	08 95       	ret
     fc0:	88 32       	cpi	r24, 0x28	; 40
     fc2:	e0 f4       	brcc	.+56     	; 0xffc <semiCorrect+0x5a>
     fc4:	80 91 0b 02 	lds	r24, 0x020B
     fc8:	89 32       	cpi	r24, 0x29	; 41
     fca:	58 f0       	brcs	.+22     	; 0xfe2 <semiCorrect+0x40>
     fcc:	90 91 09 02 	lds	r25, 0x0209
     fd0:	98 32       	cpi	r25, 0x28	; 40
     fd2:	38 f4       	brcc	.+14     	; 0xfe2 <semiCorrect+0x40>
     fd4:	93 da       	rcall	.-2778   	; 0x4fc <left>
     fd6:	fc dc       	rcall	.-1544   	; 0x9d0 <set_color>
     fd8:	80 91 0a 02 	lds	r24, 0x020A
     fdc:	88 32       	cpi	r24, 0x28	; 40
     fde:	d0 f3       	brcs	.-12     	; 0xfd4 <semiCorrect+0x32>
     fe0:	0f c0       	rjmp	.+30     	; 0x1000 <semiCorrect+0x5e>
     fe2:	90 91 09 02 	lds	r25, 0x0209
     fe6:	99 32       	cpi	r25, 0x29	; 41
     fe8:	68 f0       	brcs	.+26     	; 0x1004 <semiCorrect+0x62>
     fea:	88 32       	cpi	r24, 0x28	; 40
     fec:	68 f4       	brcc	.+26     	; 0x1008 <semiCorrect+0x66>
     fee:	89 da       	rcall	.-2798   	; 0x502 <right>
     ff0:	ef dc       	rcall	.-1570   	; 0x9d0 <set_color>
     ff2:	80 91 0a 02 	lds	r24, 0x020A
     ff6:	88 32       	cpi	r24, 0x28	; 40
     ff8:	d0 f3       	brcs	.-12     	; 0xfee <semiCorrect+0x4c>
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <semiCorrect+0x6a>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	08 95       	ret
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	08 95       	ret
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret

00001010 <correct>:
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	85 e0       	ldi	r24, 0x05	; 5
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	90 93 2d 02 	sts	0x022D, r25
    101e:	80 93 2c 02 	sts	0x022C, r24
    1022:	7e da       	rcall	.-2820   	; 0x520 <stop>
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 08 02 	sts	0x0208, r24
    102a:	c2 e3       	ldi	r28, 0x32	; 50
    102c:	d0 e0       	ldi	r29, 0x00	; 0
    102e:	66 da       	rcall	.-2868   	; 0x4fc <left>
    1030:	ce 01       	movw	r24, r28
    1032:	b1 de       	rcall	.-670    	; 0xd96 <Delay>
    1034:	81 11       	cpse	r24, r1
    1036:	1c c0       	rjmp	.+56     	; 0x1070 <correct+0x60>
    1038:	73 da       	rcall	.-2842   	; 0x520 <stop>
    103a:	b3 df       	rcall	.-154    	; 0xfa2 <semiCorrect>
    103c:	18 2f       	mov	r17, r24
    103e:	81 11       	cpse	r24, r1
    1040:	19 c0       	rjmp	.+50     	; 0x1074 <correct+0x64>
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	d5 da       	rcall	.-2646   	; 0x5f0 <ADC_Conversion>
    1046:	89 32       	cpi	r24, 0x29	; 41
    1048:	88 f4       	brcc	.+34     	; 0x106c <correct+0x5c>
    104a:	5b da       	rcall	.-2890   	; 0x502 <right>
    104c:	ce 01       	movw	r24, r28
    104e:	c2 96       	adiw	r24, 0x32	; 50
    1050:	a2 de       	rcall	.-700    	; 0xd96 <Delay>
    1052:	81 11       	cpse	r24, r1
    1054:	12 c0       	rjmp	.+36     	; 0x107a <correct+0x6a>
    1056:	64 da       	rcall	.-2872   	; 0x520 <stop>
    1058:	a4 df       	rcall	.-184    	; 0xfa2 <semiCorrect>
    105a:	81 11       	cpse	r24, r1
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <correct+0x68>
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	c7 da       	rcall	.-2674   	; 0x5f0 <ADC_Conversion>
    1062:	89 32       	cpi	r24, 0x29	; 41
    1064:	18 f4       	brcc	.+6      	; 0x106c <correct+0x5c>
    1066:	cc 59       	subi	r28, 0x9C	; 156
    1068:	df 4f       	sbci	r29, 0xFF	; 255
    106a:	e1 cf       	rjmp	.-62     	; 0x102e <correct+0x1e>
    106c:	59 da       	rcall	.-2894   	; 0x520 <stop>
    106e:	05 c0       	rjmp	.+10     	; 0x107a <correct+0x6a>
    1070:	10 e0       	ldi	r17, 0x00	; 0
    1072:	03 c0       	rjmp	.+6      	; 0x107a <correct+0x6a>
    1074:	11 e0       	ldi	r17, 0x01	; 1
    1076:	01 c0       	rjmp	.+2      	; 0x107a <correct+0x6a>
    1078:	11 e0       	ldi	r17, 0x01	; 1
    107a:	81 2f       	mov	r24, r17
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	08 95       	ret

00001084 <noNatak>:
    1084:	88 ec       	ldi	r24, 0xC8	; 200
    1086:	80 93 28 01 	sts	0x0128, r24
    108a:	80 93 2a 01 	sts	0x012A, r24
    108e:	80 91 0a 02 	lds	r24, 0x020A
    1092:	88 32       	cpi	r24, 0x28	; 40
    1094:	90 f5       	brcc	.+100    	; 0x10fa <noNatak+0x76>
    1096:	80 91 0b 02 	lds	r24, 0x020B
    109a:	89 32       	cpi	r24, 0x29	; 41
    109c:	a0 f0       	brcs	.+40     	; 0x10c6 <noNatak+0x42>
    109e:	90 91 09 02 	lds	r25, 0x0209
    10a2:	98 32       	cpi	r25, 0x28	; 40
    10a4:	80 f4       	brcc	.+32     	; 0x10c6 <noNatak+0x42>
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <noNatak+0x28>
    10a8:	29 da       	rcall	.-2990   	; 0x4fc <left>
    10aa:	92 dc       	rcall	.-1756   	; 0x9d0 <set_color>
    10ac:	80 91 0a 02 	lds	r24, 0x020A
    10b0:	89 32       	cpi	r24, 0x29	; 41
    10b2:	d0 f3       	brcs	.-12     	; 0x10a8 <noNatak+0x24>
    10b4:	80 91 0b 02 	lds	r24, 0x020B
    10b8:	88 32       	cpi	r24, 0x28	; 40
    10ba:	b0 f7       	brcc	.-20     	; 0x10a8 <noNatak+0x24>
    10bc:	80 91 09 02 	lds	r24, 0x0209
    10c0:	88 32       	cpi	r24, 0x28	; 40
    10c2:	90 f7       	brcc	.-28     	; 0x10a8 <noNatak+0x24>
    10c4:	33 c0       	rjmp	.+102    	; 0x112c <noNatak+0xa8>
    10c6:	90 91 09 02 	lds	r25, 0x0209
    10ca:	99 32       	cpi	r25, 0x29	; 41
    10cc:	90 f0       	brcs	.+36     	; 0x10f2 <noNatak+0x6e>
    10ce:	88 32       	cpi	r24, 0x28	; 40
    10d0:	80 f4       	brcc	.+32     	; 0x10f2 <noNatak+0x6e>
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <noNatak+0x54>
    10d4:	16 da       	rcall	.-3028   	; 0x502 <right>
    10d6:	7c dc       	rcall	.-1800   	; 0x9d0 <set_color>
    10d8:	80 91 0a 02 	lds	r24, 0x020A
    10dc:	89 32       	cpi	r24, 0x29	; 41
    10de:	d0 f3       	brcs	.-12     	; 0x10d4 <noNatak+0x50>
    10e0:	80 91 0b 02 	lds	r24, 0x020B
    10e4:	88 32       	cpi	r24, 0x28	; 40
    10e6:	b0 f7       	brcc	.-20     	; 0x10d4 <noNatak+0x50>
    10e8:	80 91 09 02 	lds	r24, 0x0209
    10ec:	88 32       	cpi	r24, 0x28	; 40
    10ee:	90 f7       	brcc	.-28     	; 0x10d4 <noNatak+0x50>
    10f0:	1d c0       	rjmp	.+58     	; 0x112c <noNatak+0xa8>
    10f2:	8e df       	rcall	.-228    	; 0x1010 <correct>
    10f4:	88 23       	and	r24, r24
    10f6:	d1 f0       	breq	.+52     	; 0x112c <noNatak+0xa8>
    10f8:	1d c0       	rjmp	.+58     	; 0x1134 <noNatak+0xb0>
    10fa:	80 91 0b 02 	lds	r24, 0x020B
    10fe:	89 32       	cpi	r24, 0x29	; 41
    1100:	40 f0       	brcs	.+16     	; 0x1112 <noNatak+0x8e>
    1102:	90 91 09 02 	lds	r25, 0x0209
    1106:	98 32       	cpi	r25, 0x28	; 40
    1108:	20 f4       	brcc	.+8      	; 0x1112 <noNatak+0x8e>
    110a:	52 dd       	rcall	.-1372   	; 0xbb0 <node>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	08 95       	ret
    1112:	88 32       	cpi	r24, 0x28	; 40
    1114:	40 f4       	brcc	.+16     	; 0x1126 <noNatak+0xa2>
    1116:	80 91 09 02 	lds	r24, 0x0209
    111a:	89 32       	cpi	r24, 0x29	; 41
    111c:	20 f0       	brcs	.+8      	; 0x1126 <noNatak+0xa2>
    111e:	48 dd       	rcall	.-1392   	; 0xbb0 <node>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	08 95       	ret
    1126:	74 df       	rcall	.-280    	; 0x1010 <correct>
    1128:	81 11       	cpse	r24, r1
    112a:	07 c0       	rjmp	.+14     	; 0x113a <noNatak+0xb6>
    112c:	f9 d9       	rcall	.-3086   	; 0x520 <stop>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	08 95       	ret
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	08 95       	ret
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	08 95       	ret

00001140 <forwardJaa>:
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	90 93 0f 02 	sts	0x020F, r25
    1152:	80 93 0e 02 	sts	0x020E, r24
    1156:	08 e2       	ldi	r16, 0x28	; 40
    1158:	11 e0       	ldi	r17, 0x01	; 1
    115a:	0f 2e       	mov	r0, r31
    115c:	f0 ef       	ldi	r31, 0xF0	; 240
    115e:	ff 2e       	mov	r15, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	ca e2       	ldi	r28, 0x2A	; 42
    1164:	d1 e0       	ldi	r29, 0x01	; 1
    1166:	c4 d9       	rcall	.-3192   	; 0x4f0 <forward>
    1168:	33 dc       	rcall	.-1946   	; 0x9d0 <set_color>
    116a:	80 91 0a 02 	lds	r24, 0x020A
    116e:	89 32       	cpi	r24, 0x29	; 41
    1170:	50 f0       	brcs	.+20     	; 0x1186 <forwardJaa+0x46>
    1172:	80 91 0b 02 	lds	r24, 0x020B
    1176:	89 32       	cpi	r24, 0x29	; 41
    1178:	20 f4       	brcc	.+8      	; 0x1182 <forwardJaa+0x42>
    117a:	80 91 09 02 	lds	r24, 0x0209
    117e:	89 32       	cpi	r24, 0x29	; 41
    1180:	10 f0       	brcs	.+4      	; 0x1186 <forwardJaa+0x46>
    1182:	16 dd       	rcall	.-1492   	; 0xbb0 <node>
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <forwardJaa+0x6c>
    1186:	f8 01       	movw	r30, r16
    1188:	f0 82       	st	Z, r15
    118a:	f8 82       	st	Y, r15
    118c:	80 91 0a 02 	lds	r24, 0x020A
    1190:	89 32       	cpi	r24, 0x29	; 41
    1192:	40 f0       	brcs	.+16     	; 0x11a4 <forwardJaa+0x64>
    1194:	80 91 0b 02 	lds	r24, 0x020B
    1198:	88 32       	cpi	r24, 0x28	; 40
    119a:	20 f4       	brcc	.+8      	; 0x11a4 <forwardJaa+0x64>
    119c:	80 91 09 02 	lds	r24, 0x0209
    11a0:	88 32       	cpi	r24, 0x28	; 40
    11a2:	08 f3       	brcs	.-62     	; 0x1166 <forwardJaa+0x26>
    11a4:	6f df       	rcall	.-290    	; 0x1084 <noNatak>
    11a6:	89 2b       	or	r24, r25
    11a8:	09 f4       	brne	.+2      	; 0x11ac <forwardJaa+0x6c>
    11aa:	ca df       	rcall	.-108    	; 0x1140 <forwardJaa>
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	08 95       	ret

000011b8 <front>:
    11b8:	c3 df       	rcall	.-122    	; 0x1140 <forwardJaa>
    11ba:	80 91 30 02 	lds	r24, 0x0230
    11be:	90 91 31 02 	lds	r25, 0x0231
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	90 93 31 02 	sts	0x0231, r25
    11c8:	80 93 30 02 	sts	0x0230, r24
    11cc:	08 95       	ret

000011ce <traverseToSort>:
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
    11d4:	80 91 0e 02 	lds	r24, 0x020E
    11d8:	90 91 0f 02 	lds	r25, 0x020F
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	21 f4       	brne	.+8      	; 0x11e8 <traverseToSort+0x1a>
    11e0:	10 92 0f 02 	sts	0x020F, r1
    11e4:	10 92 0e 02 	sts	0x020E, r1
    11e8:	ce 01       	movw	r24, r28
    11ea:	04 97       	sbiw	r24, 0x04	; 4
    11ec:	02 97       	sbiw	r24, 0x02	; 2
    11ee:	88 f5       	brcc	.+98     	; 0x1252 <traverseToSort+0x84>
    11f0:	c4 30       	cpi	r28, 0x04	; 4
    11f2:	d1 05       	cpc	r29, r1
    11f4:	39 f4       	brne	.+14     	; 0x1204 <traverseToSort+0x36>
    11f6:	80 91 00 02 	lds	r24, 0x0200
    11fa:	90 91 01 02 	lds	r25, 0x0201
    11fe:	89 2b       	or	r24, r25
    1200:	51 f0       	breq	.+20     	; 0x1216 <traverseToSort+0x48>
    1202:	0b c0       	rjmp	.+22     	; 0x121a <traverseToSort+0x4c>
    1204:	c5 30       	cpi	r28, 0x05	; 5
    1206:	d1 05       	cpc	r29, r1
    1208:	41 f4       	brne	.+16     	; 0x121a <traverseToSort+0x4c>
    120a:	80 91 00 02 	lds	r24, 0x0200
    120e:	90 91 01 02 	lds	r25, 0x0201
    1212:	02 97       	sbiw	r24, 0x02	; 2
    1214:	11 f4       	brne	.+4      	; 0x121a <traverseToSort+0x4c>
    1216:	d6 dc       	rcall	.-1620   	; 0xbc4 <turnRight>
    1218:	01 c0       	rjmp	.+2      	; 0x121c <traverseToSort+0x4e>
    121a:	1f dd       	rcall	.-1474   	; 0xc5a <turnLeft>
    121c:	cd df       	rcall	.-102    	; 0x11b8 <front>
    121e:	cc df       	rcall	.-104    	; 0x11b8 <front>
    1220:	24 97       	sbiw	r28, 0x04	; 4
    1222:	39 f4       	brne	.+14     	; 0x1232 <traverseToSort+0x64>
    1224:	85 e0       	ldi	r24, 0x05	; 5
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	90 93 03 02 	sts	0x0203, r25
    122c:	80 93 02 02 	sts	0x0202, r24
    1230:	06 c0       	rjmp	.+12     	; 0x123e <traverseToSort+0x70>
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 03 02 	sts	0x0203, r25
    123a:	80 93 02 02 	sts	0x0202, r24
    123e:	80 91 30 02 	lds	r24, 0x0230
    1242:	90 91 31 02 	lds	r25, 0x0231
    1246:	02 96       	adiw	r24, 0x02	; 2
    1248:	90 93 31 02 	sts	0x0231, r25
    124c:	80 93 30 02 	sts	0x0230, r24
    1250:	45 c0       	rjmp	.+138    	; 0x12dc <traverseToSort+0x10e>
    1252:	80 91 00 02 	lds	r24, 0x0200
    1256:	90 91 01 02 	lds	r25, 0x0201
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <traverseToSort+0xa0>
    1260:	80 91 02 02 	lds	r24, 0x0202
    1264:	90 91 03 02 	lds	r25, 0x0203
    1268:	02 97       	sbiw	r24, 0x02	; 2
    126a:	78 f4       	brcc	.+30     	; 0x128a <traverseToSort+0xbc>
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <traverseToSort+0xb2>
    126e:	03 97       	sbiw	r24, 0x03	; 3
    1270:	99 f4       	brne	.+38     	; 0x1298 <traverseToSort+0xca>
    1272:	80 91 02 02 	lds	r24, 0x0202
    1276:	90 91 03 02 	lds	r25, 0x0203
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	11 f4       	brne	.+4      	; 0x1284 <traverseToSort+0xb6>
    1280:	a1 dc       	rcall	.-1726   	; 0xbc4 <turnRight>
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <traverseToSort+0xca>
    1284:	02 97       	sbiw	r24, 0x02	; 2
    1286:	40 f4       	brcc	.+16     	; 0x1298 <traverseToSort+0xca>
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <traverseToSort+0xc8>
    128a:	80 91 02 02 	lds	r24, 0x0202
    128e:	90 91 03 02 	lds	r25, 0x0203
    1292:	02 97       	sbiw	r24, 0x02	; 2
    1294:	09 f4       	brne	.+2      	; 0x1298 <traverseToSort+0xca>
    1296:	e1 dc       	rcall	.-1598   	; 0xc5a <turnLeft>
    1298:	22 97       	sbiw	r28, 0x02	; 2
    129a:	3c f4       	brge	.+14     	; 0x12aa <traverseToSort+0xdc>
    129c:	80 91 00 02 	lds	r24, 0x0200
    12a0:	90 91 01 02 	lds	r25, 0x0201
    12a4:	89 2b       	or	r24, r25
    12a6:	39 f0       	breq	.+14     	; 0x12b6 <traverseToSort+0xe8>
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <traverseToSort+0xea>
    12aa:	80 91 00 02 	lds	r24, 0x0200
    12ae:	90 91 01 02 	lds	r25, 0x0201
    12b2:	02 97       	sbiw	r24, 0x02	; 2
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <traverseToSort+0xea>
    12b6:	1d dd       	rcall	.-1478   	; 0xcf2 <turn>
    12b8:	7f df       	rcall	.-258    	; 0x11b8 <front>
    12ba:	80 91 41 02 	lds	r24, 0x0241
    12be:	90 91 42 02 	lds	r25, 0x0242
    12c2:	81 70       	andi	r24, 0x01	; 1
    12c4:	90 78       	andi	r25, 0x80	; 128
    12c6:	99 23       	and	r25, r25
    12c8:	24 f4       	brge	.+8      	; 0x12d2 <traverseToSort+0x104>
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	8e 6f       	ori	r24, 0xFE	; 254
    12ce:	9f 6f       	ori	r25, 0xFF	; 255
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	04 96       	adiw	r24, 0x04	; 4
    12d4:	90 93 03 02 	sts	0x0203, r25
    12d8:	80 93 02 02 	sts	0x0202, r24
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <terminalCheck1>:
void terminalCheck1()
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12e6:	86 e9       	ldi	r24, 0x96	; 150
    12e8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    12ec:	80 93 2a 01 	sts	0x012A, r24
	//????
	//lcd_wr_command(0x01);
	//lcd_print(1,1,888,3);
	velocity(turn_v,turn_v);
//	forward_mm(20);
	flag = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	90 93 0f 02 	sts	0x020F, r25
    12f8:	80 93 0e 02 	sts	0x020E, r24
	if (ct != ot)
    12fc:	80 91 02 02 	lds	r24, 0x0202
    1300:	90 91 03 02 	lds	r25, 0x0203
    1304:	20 91 41 02 	lds	r18, 0x0241
    1308:	30 91 42 02 	lds	r19, 0x0242
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	89 f1       	breq	.+98     	; 0x1374 <terminalCheck1+0x92>
	{
		if (dir == 1 || dir == 3)
    1312:	20 91 00 02 	lds	r18, 0x0200
    1316:	30 91 01 02 	lds	r19, 0x0201
    131a:	2d 7f       	andi	r18, 0xFD	; 253
    131c:	21 30       	cpi	r18, 0x01	; 1
    131e:	31 05       	cpc	r19, r1
    1320:	41 f4       	brne	.+16     	; 0x1332 <terminalCheck1+0x50>
		{
			if (ot == 3 || ot == 0)
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	11 f0       	breq	.+4      	; 0x132c <terminalCheck1+0x4a>
    1328:	89 2b       	or	r24, r25
    132a:	11 f4       	brne	.+4      	; 0x1330 <terminalCheck1+0x4e>
				turnRight();
    132c:	4b dc       	rcall	.-1898   	; 0xbc4 <turnRight>
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <terminalCheck1+0x50>
			else turnLeft();
    1330:	94 dc       	rcall	.-1752   	; 0xc5a <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1332:	80 91 41 02 	lds	r24, 0x0241
    1336:	90 91 42 02 	lds	r25, 0x0242
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	91 05       	cpc	r25, r1
    133e:	38 f4       	brcc	.+14     	; 0x134e <terminalCheck1+0x6c>
    1340:	20 91 00 02 	lds	r18, 0x0200
    1344:	30 91 01 02 	lds	r19, 0x0201
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	49 f0       	breq	.+18     	; 0x1360 <terminalCheck1+0x7e>
    134e:	02 97       	sbiw	r24, 0x02	; 2
    1350:	02 97       	sbiw	r24, 0x02	; 2
    1352:	38 f4       	brcc	.+14     	; 0x1362 <terminalCheck1+0x80>
    1354:	80 91 00 02 	lds	r24, 0x0200
    1358:	90 91 01 02 	lds	r25, 0x0201
    135c:	89 2b       	or	r24, r25
    135e:	09 f4       	brne	.+2      	; 0x1362 <terminalCheck1+0x80>
			turn();
    1360:	c8 dc       	rcall	.-1648   	; 0xcf2 <turn>
		front();
    1362:	2a df       	rcall	.-428    	; 0x11b8 <front>
		ot = ct;
    1364:	80 91 41 02 	lds	r24, 0x0241
    1368:	90 91 42 02 	lds	r25, 0x0242
    136c:	90 93 03 02 	sts	0x0203, r25
    1370:	80 93 02 02 	sts	0x0202, r24
	}
	//????
	right_degrees(30);
    1374:	8e e1       	ldi	r24, 0x1E	; 30
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0a db       	rcall	.-2540   	; 0x98e <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    137a:	86 e9       	ldi	r24, 0x96	; 150
    137c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1380:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
    1384:	80 91 00 02 	lds	r24, 0x0200
    1388:	90 91 01 02 	lds	r25, 0x0201
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	83 70       	andi	r24, 0x03	; 3
    1390:	90 78       	andi	r25, 0x80	; 128
    1392:	99 23       	and	r25, r25
    1394:	24 f4       	brge	.+8      	; 0x139e <terminalCheck1+0xbc>
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	8c 6f       	ori	r24, 0xFC	; 252
    139a:	9f 6f       	ori	r25, 0xFF	; 255
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	90 93 01 02 	sts	0x0201, r25
    13a2:	80 93 00 02 	sts	0x0200, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<50)	//earlier 3
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <terminalCheck1+0xc8>
		right();
    13a8:	ac d8       	rcall	.-3752   	; 0x502 <right>
	right_degrees(30);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<50)	//earlier 3
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	21 d9       	rcall	.-3518   	; 0x5f0 <ADC_Conversion>
    13ae:	82 33       	cpi	r24, 0x32	; 50
    13b0:	d8 f3       	brcs	.-10     	; 0x13a8 <terminalCheck1+0xc6>
		right();
	//_delay_ms(140);
	stop();
    13b2:	b6 d8       	rcall	.-3732   	; 0x520 <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    13b4:	c0 91 41 02 	lds	r28, 0x0241
    13b8:	d0 91 42 02 	lds	r29, 0x0242
    13bc:	16 db       	rcall	.-2516   	; 0x9ea <scan>
    13be:	cc 0f       	add	r28, r28
    13c0:	dd 1f       	adc	r29, r29
    13c2:	cc 0f       	add	r28, r28
    13c4:	dd 1f       	adc	r29, r29
    13c6:	cb 5b       	subi	r28, 0xBB	; 187
    13c8:	dd 4f       	sbci	r29, 0xFD	; 253
    13ca:	99 83       	std	Y+1, r25	; 0x01
    13cc:	88 83       	st	Y, r24
	if(term[ct][0]==color[ct])
    13ce:	80 91 41 02 	lds	r24, 0x0241
    13d2:	90 91 42 02 	lds	r25, 0x0242
    13d6:	dc 01       	movw	r26, r24
    13d8:	aa 0f       	add	r26, r26
    13da:	bb 1f       	adc	r27, r27
    13dc:	aa 0f       	add	r26, r26
    13de:	bb 1f       	adc	r27, r27
    13e0:	ab 5b       	subi	r26, 0xBB	; 187
    13e2:	bd 4f       	sbci	r27, 0xFD	; 253
    13e4:	fc 01       	movw	r30, r24
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	e9 5a       	subi	r30, 0xA9	; 169
    13ec:	fd 4f       	sbci	r31, 0xFD	; 253
    13ee:	2d 91       	ld	r18, X+
    13f0:	3c 91       	ld	r19, X
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	28 17       	cp	r18, r24
    13f8:	39 07       	cpc	r19, r25
    13fa:	59 f4       	brne	.+22     	; 0x1412 <terminalCheck1+0x130>
	{
		buzzer_on();
    13fc:	f1 d8       	rcall	.-3614   	; 0x5e0 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	4f e7       	ldi	r20, 0x7F	; 127
    1402:	86 e1       	ldi	r24, 0x16	; 22
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	40 40       	sbci	r20, 0x00	; 0
    1408:	80 40       	sbci	r24, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <terminalCheck1+0x122>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <terminalCheck1+0x12c>
    140e:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
    1410:	eb d8       	rcall	.-3626   	; 0x5e8 <buzzer_off>
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	2f ef       	ldi	r18, 0xFF	; 255
    1416:	4c e2       	ldi	r20, 0x2C	; 44
    1418:	91 50       	subi	r25, 0x01	; 1
    141a:	20 40       	sbci	r18, 0x00	; 0
    141c:	40 40       	sbci	r20, 0x00	; 0
    141e:	e1 f7       	brne	.-8      	; 0x1418 <terminalCheck1+0x136>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <terminalCheck1+0x140>
    1422:	00 00       	nop

	_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1424:	20 91 41 02 	lds	r18, 0x0241
    1428:	30 91 42 02 	lds	r19, 0x0242
    142c:	f9 01       	movw	r30, r18
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	eb 5b       	subi	r30, 0xBB	; 187
    1438:	fd 4f       	sbci	r31, 0xFD	; 253
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	8f 3f       	cpi	r24, 0xFF	; 255
    1440:	4f ef       	ldi	r20, 0xFF	; 255
    1442:	94 07       	cpc	r25, r20
    1444:	51 f0       	breq	.+20     	; 0x145a <terminalCheck1+0x178>
    1446:	f9 01       	movw	r30, r18
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	e9 5a       	subi	r30, 0xA9	; 169
    144e:	fd 4f       	sbci	r31, 0xFD	; 253
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	82 17       	cp	r24, r18
    1456:	93 07       	cpc	r25, r19
    1458:	49 f4       	brne	.+18     	; 0x146c <terminalCheck1+0x18a>
		total--;
    145a:	80 91 04 02 	lds	r24, 0x0204
    145e:	90 91 05 02 	lds	r25, 0x0205
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	90 93 05 02 	sts	0x0205, r25
    1468:	80 93 04 02 	sts	0x0204, r24
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <terminalCheck2>:
void terminalCheck2()
{
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1476:	86 e9       	ldi	r24, 0x96	; 150
    1478:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    147c:	80 93 2a 01 	sts	0x012A, r24
			back_mm(30);
		else forward_mm(30);
		flag = 1;
	}*/

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1480:	80 91 41 02 	lds	r24, 0x0241
    1484:	90 91 42 02 	lds	r25, 0x0242
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	91 05       	cpc	r25, r1
    148c:	30 f4       	brcc	.+12     	; 0x149a <terminalCheck2+0x28>
    148e:	20 91 00 02 	lds	r18, 0x0200
    1492:	30 91 01 02 	lds	r19, 0x0201
    1496:	23 2b       	or	r18, r19
    1498:	69 f0       	breq	.+26     	; 0x14b4 <terminalCheck2+0x42>
    149a:	9c 01       	movw	r18, r24
    149c:	22 50       	subi	r18, 0x02	; 2
    149e:	31 09       	sbc	r19, r1
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	40 f5       	brcc	.+80     	; 0x14f6 <terminalCheck2+0x84>
    14a6:	40 91 00 02 	lds	r20, 0x0200
    14aa:	50 91 01 02 	lds	r21, 0x0201
    14ae:	42 30       	cpi	r20, 0x02	; 2
    14b0:	51 05       	cpc	r21, r1
    14b2:	09 f5       	brne	.+66     	; 0x14f6 <terminalCheck2+0x84>
	{
		left_degrees(30);
    14b4:	8e e1       	ldi	r24, 0x1E	; 30
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	61 da       	rcall	.-2878   	; 0x97c <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14ba:	86 e9       	ldi	r24, 0x96	; 150
    14bc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14c0:	80 93 2a 01 	sts	0x012A, r24
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <terminalCheck2+0x56>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
		left();
    14c6:	1a d8       	rcall	.-4044   	; 0x4fc <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	92 d8       	rcall	.-3804   	; 0x5f0 <ADC_Conversion>
    14cc:	82 33       	cpi	r24, 0x32	; 50
    14ce:	d8 f3       	brcs	.-10     	; 0x14c6 <terminalCheck2+0x54>
		left();
		//_delay_ms(100);
		stop();
    14d0:	27 d8       	rcall	.-4018   	; 0x520 <stop>
		dir=(dir+3)%4;
    14d2:	80 91 00 02 	lds	r24, 0x0200
    14d6:	90 91 01 02 	lds	r25, 0x0201
    14da:	03 96       	adiw	r24, 0x03	; 3
    14dc:	83 70       	andi	r24, 0x03	; 3
    14de:	90 78       	andi	r25, 0x80	; 128
    14e0:	99 23       	and	r25, r25
    14e2:	24 f4       	brge	.+8      	; 0x14ec <terminalCheck2+0x7a>
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	8c 6f       	ori	r24, 0xFC	; 252
    14e8:	9f 6f       	ori	r25, 0xFF	; 255
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	90 93 01 02 	sts	0x0201, r25
    14f0:	80 93 00 02 	sts	0x0200, r24
    14f4:	56 c0       	rjmp	.+172    	; 0x15a2 <terminalCheck2+0x130>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    14f6:	02 97       	sbiw	r24, 0x02	; 2
    14f8:	30 f4       	brcc	.+12     	; 0x1506 <terminalCheck2+0x94>
    14fa:	80 91 00 02 	lds	r24, 0x0200
    14fe:	90 91 01 02 	lds	r25, 0x0201
    1502:	02 97       	sbiw	r24, 0x02	; 2
    1504:	49 f0       	breq	.+18     	; 0x1518 <terminalCheck2+0xa6>
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	48 f5       	brcc	.+82     	; 0x155e <terminalCheck2+0xec>
    150c:	80 91 00 02 	lds	r24, 0x0200
    1510:	90 91 01 02 	lds	r25, 0x0201
    1514:	89 2b       	or	r24, r25
    1516:	19 f5       	brne	.+70     	; 0x155e <terminalCheck2+0xec>
		{
			right_degrees(30);
    1518:	8e e1       	ldi	r24, 0x1E	; 30
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	38 da       	rcall	.-2960   	; 0x98e <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    151e:	86 e9       	ldi	r24, 0x96	; 150
    1520:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1524:	80 93 2a 01 	sts	0x012A, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <terminalCheck2+0xbc>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(2)<50)
				right();
    152a:	0e 94 81 02 	call	0x502	; 0x502 <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(2)<50)
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	5f d8       	rcall	.-3906   	; 0x5f0 <ADC_Conversion>
    1532:	82 33       	cpi	r24, 0x32	; 50
    1534:	d0 f3       	brcs	.-12     	; 0x152a <terminalCheck2+0xb8>
				right();
			//_delay_ms(100);
			stop();	
    1536:	0e 94 90 02 	call	0x520	; 0x520 <stop>
			dir=(dir+1)%4;
    153a:	80 91 00 02 	lds	r24, 0x0200
    153e:	90 91 01 02 	lds	r25, 0x0201
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	83 70       	andi	r24, 0x03	; 3
    1546:	90 78       	andi	r25, 0x80	; 128
    1548:	99 23       	and	r25, r25
    154a:	24 f4       	brge	.+8      	; 0x1554 <terminalCheck2+0xe2>
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	8c 6f       	ori	r24, 0xFC	; 252
    1550:	9f 6f       	ori	r25, 0xFF	; 255
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	90 93 01 02 	sts	0x0201, r25
    1558:	80 93 00 02 	sts	0x0200, r24
    155c:	22 c0       	rjmp	.+68     	; 0x15a2 <terminalCheck2+0x130>
		}
	else {
		left_degrees(150);
    155e:	86 e9       	ldi	r24, 0x96	; 150
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0c da       	rcall	.-3048   	; 0x97c <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1564:	86 e9       	ldi	r24, 0x96	; 150
    1566:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    156a:	80 93 2a 01 	sts	0x012A, r24
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <terminalCheck2+0x102>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
		left();
    1570:	0e 94 7e 02 	call	0x4fc	; 0x4fc <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<50)
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	3c d8       	rcall	.-3976   	; 0x5f0 <ADC_Conversion>
    1578:	82 33       	cpi	r24, 0x32	; 50
    157a:	d0 f3       	brcs	.-12     	; 0x1570 <terminalCheck2+0xfe>
		left();
		//_delay_ms(50);
		stop();
    157c:	0e 94 90 02 	call	0x520	; 0x520 <stop>
		dir=(dir+2)%4;
    1580:	80 91 00 02 	lds	r24, 0x0200
    1584:	90 91 01 02 	lds	r25, 0x0201
    1588:	02 96       	adiw	r24, 0x02	; 2
    158a:	83 70       	andi	r24, 0x03	; 3
    158c:	90 78       	andi	r25, 0x80	; 128
    158e:	99 23       	and	r25, r25
    1590:	24 f4       	brge	.+8      	; 0x159a <terminalCheck2+0x128>
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	8c 6f       	ori	r24, 0xFC	; 252
    1596:	9f 6f       	ori	r25, 0xFF	; 255
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	90 93 01 02 	sts	0x0201, r25
    159e:	80 93 00 02 	sts	0x0200, r24
		//lcd((char *)dir);
		}
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	left();
    15a2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <left>
    15a6:	2f ef       	ldi	r18, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	21 50       	subi	r18, 0x01	; 1
    15ae:	40 40       	sbci	r20, 0x00	; 0
    15b0:	80 40       	sbci	r24, 0x00	; 0
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <terminalCheck2+0x13a>
    15b4:	00 c0       	rjmp	.+0      	; 0x15b6 <terminalCheck2+0x144>
    15b6:	00 00       	nop
	_delay_ms(100);
	stop();
    15b8:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	term[ct][1] = scan();
    15bc:	c0 91 41 02 	lds	r28, 0x0241
    15c0:	d0 91 42 02 	lds	r29, 0x0242
    15c4:	12 da       	rcall	.-3036   	; 0x9ea <scan>
    15c6:	cc 0f       	add	r28, r28
    15c8:	dd 1f       	adc	r29, r29
    15ca:	cc 0f       	add	r28, r28
    15cc:	dd 1f       	adc	r29, r29
    15ce:	cb 5b       	subi	r28, 0xBB	; 187
    15d0:	dd 4f       	sbci	r29, 0xFD	; 253
    15d2:	9b 83       	std	Y+3, r25	; 0x03
    15d4:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==color[ct])
    15d6:	80 91 41 02 	lds	r24, 0x0241
    15da:	90 91 42 02 	lds	r25, 0x0242
    15de:	dc 01       	movw	r26, r24
    15e0:	aa 0f       	add	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	aa 0f       	add	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	ab 5b       	subi	r26, 0xBB	; 187
    15ea:	bd 4f       	sbci	r27, 0xFD	; 253
    15ec:	fc 01       	movw	r30, r24
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	e9 5a       	subi	r30, 0xA9	; 169
    15f4:	fd 4f       	sbci	r31, 0xFD	; 253
    15f6:	12 96       	adiw	r26, 0x02	; 2
    15f8:	2d 91       	ld	r18, X+
    15fa:	3c 91       	ld	r19, X
    15fc:	13 97       	sbiw	r26, 0x03	; 3
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	28 17       	cp	r18, r24
    1604:	39 07       	cpc	r19, r25
    1606:	69 f4       	brne	.+26     	; 0x1622 <terminalCheck2+0x1b0>
	{
		buzzer_on();
    1608:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <buzzer_on>
    160c:	9f ef       	ldi	r25, 0xFF	; 255
    160e:	2f e7       	ldi	r18, 0x7F	; 127
    1610:	46 e1       	ldi	r20, 0x16	; 22
    1612:	91 50       	subi	r25, 0x01	; 1
    1614:	20 40       	sbci	r18, 0x00	; 0
    1616:	40 40       	sbci	r20, 0x00	; 0
    1618:	e1 f7       	brne	.-8      	; 0x1612 <terminalCheck2+0x1a0>
    161a:	00 c0       	rjmp	.+0      	; 0x161c <terminalCheck2+0x1aa>
    161c:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
    161e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <buzzer_off>
	}
// 	if(term[ct][1]==-1)
// 		buzzer();
// 	
	//_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1622:	80 91 41 02 	lds	r24, 0x0241
    1626:	90 91 42 02 	lds	r25, 0x0242
    162a:	fc 01       	movw	r30, r24
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	eb 5b       	subi	r30, 0xBB	; 187
    1636:	fd 4f       	sbci	r31, 0xFD	; 253
    1638:	22 81       	ldd	r18, Z+2	; 0x02
    163a:	33 81       	ldd	r19, Z+3	; 0x03
    163c:	2f 3f       	cpi	r18, 0xFF	; 255
    163e:	4f ef       	ldi	r20, 0xFF	; 255
    1640:	34 07       	cpc	r19, r20
    1642:	51 f0       	breq	.+20     	; 0x1658 <terminalCheck2+0x1e6>
    1644:	fc 01       	movw	r30, r24
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	e9 5a       	subi	r30, 0xA9	; 169
    164c:	fd 4f       	sbci	r31, 0xFD	; 253
    164e:	40 81       	ld	r20, Z
    1650:	51 81       	ldd	r21, Z+1	; 0x01
    1652:	24 17       	cp	r18, r20
    1654:	35 07       	cpc	r19, r21
    1656:	51 f4       	brne	.+20     	; 0x166c <terminalCheck2+0x1fa>
		total--;
    1658:	20 91 04 02 	lds	r18, 0x0204
    165c:	30 91 05 02 	lds	r19, 0x0205
    1660:	21 50       	subi	r18, 0x01	; 1
    1662:	31 09       	sbc	r19, r1
    1664:	30 93 05 02 	sts	0x0205, r19
    1668:	20 93 04 02 	sts	0x0204, r18
	visited[ct] = 1;
    166c:	fc 01       	movw	r30, r24
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	e2 5e       	subi	r30, 0xE2	; 226
    1674:	fd 4f       	sbci	r31, 0xFD	; 253
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	80 83       	st	Z, r24
	visitedCount++;
    167e:	80 91 0c 02 	lds	r24, 0x020C
    1682:	90 91 0d 02 	lds	r25, 0x020D
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	90 93 0d 02 	sts	0x020D, r25
    168c:	80 93 0c 02 	sts	0x020C, r24
	//lcd_print(2,15,dir,1);
	//_delay_ms(1000);
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <pick>:

void pick(int side)
{	
    1696:	cf 93       	push	r28
    1698:	c8 2f       	mov	r28, r24
	lower(side);
    169a:	3a da       	rcall	.-2956   	; 0xb10 <lower>
    169c:	2f ef       	ldi	r18, 0xFF	; 255
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	9c e2       	ldi	r25, 0x2C	; 44
    16a2:	21 50       	subi	r18, 0x01	; 1
    16a4:	80 40       	sbci	r24, 0x00	; 0
    16a6:	90 40       	sbci	r25, 0x00	; 0
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <pick+0xc>
    16aa:	00 c0       	rjmp	.+0      	; 0x16ac <pick+0x16>
    16ac:	00 00       	nop
	_delay_ms(1000);
	close(side);
    16ae:	8c 2f       	mov	r24, r28
    16b0:	6f da       	rcall	.-2850   	; 0xb90 <close>
    16b2:	2f ef       	ldi	r18, 0xFF	; 255
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
    16b6:	96 e8       	ldi	r25, 0x86	; 134
    16b8:	21 50       	subi	r18, 0x01	; 1
    16ba:	80 40       	sbci	r24, 0x00	; 0
    16bc:	90 40       	sbci	r25, 0x00	; 0
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <pick+0x22>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <pick+0x2c>
    16c2:	00 00       	nop
	_delay_ms(3000);
	elevate();//mid
    16c4:	33 da       	rcall	.-2970   	; 0xb2c <elevate>
    16c6:	2f ef       	ldi	r18, 0xFF	; 255
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9c e2       	ldi	r25, 0x2C	; 44
    16cc:	21 50       	subi	r18, 0x01	; 1
    16ce:	80 40       	sbci	r24, 0x00	; 0
    16d0:	90 40       	sbci	r25, 0x00	; 0
    16d2:	e1 f7       	brne	.-8      	; 0x16cc <pick+0x36>
    16d4:	00 c0       	rjmp	.+0      	; 0x16d6 <pick+0x40>
    16d6:	00 00       	nop
	_delay_ms(1000);
	armCount--;
    16d8:	80 91 06 02 	lds	r24, 0x0206
    16dc:	90 91 07 02 	lds	r25, 0x0207
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	90 93 07 02 	sts	0x0207, r25
    16e6:	80 93 06 02 	sts	0x0206, r24
    16ea:	2f ef       	ldi	r18, 0xFF	; 255
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	9c e2       	ldi	r25, 0x2C	; 44
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	80 40       	sbci	r24, 0x00	; 0
    16f4:	90 40       	sbci	r25, 0x00	; 0
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <pick+0x5a>
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <pick+0x64>
    16fa:	00 00       	nop
	_delay_ms(1000);
}
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <position>:

void position(int armNo, int side)
{
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	8c 01       	movw	r16, r24
    170a:	eb 01       	movw	r28, r22
	int a;
	if (ct == ot)
    170c:	20 91 41 02 	lds	r18, 0x0241
    1710:	30 91 42 02 	lds	r19, 0x0242
    1714:	40 91 02 02 	lds	r20, 0x0202
    1718:	50 91 03 02 	lds	r21, 0x0203
    171c:	24 17       	cp	r18, r20
    171e:	35 07       	cpc	r19, r21
    1720:	09 f0       	breq	.+2      	; 0x1724 <position+0x24>
    1722:	8e c0       	rjmp	.+284    	; 0x1840 <position+0x140>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1724:	c9 01       	movw	r24, r18
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	30 f4       	brcc	.+12     	; 0x1738 <position+0x38>
    172c:	40 91 00 02 	lds	r20, 0x0200
    1730:	50 91 01 02 	lds	r21, 0x0201
    1734:	45 2b       	or	r20, r21
    1736:	61 f0       	breq	.+24     	; 0x1750 <position+0x50>
    1738:	22 50       	subi	r18, 0x02	; 2
    173a:	31 09       	sbc	r19, r1
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	68 f4       	brcc	.+26     	; 0x175c <position+0x5c>
    1742:	40 91 00 02 	lds	r20, 0x0200
    1746:	50 91 01 02 	lds	r21, 0x0201
    174a:	42 30       	cpi	r20, 0x02	; 2
    174c:	51 05       	cpc	r21, r1
    174e:	31 f4       	brne	.+12     	; 0x175c <position+0x5c>
		{
			if (armNo != side)
    1750:	0c 17       	cp	r16, r28
    1752:	1d 07       	cpc	r17, r29
    1754:	09 f4       	brne	.+2      	; 0x1758 <position+0x58>
    1756:	4c c0       	rjmp	.+152    	; 0x17f0 <position+0xf0>
				turn();
    1758:	cc da       	rcall	.-2664   	; 0xcf2 <turn>
    175a:	4a c0       	rjmp	.+148    	; 0x17f0 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    175c:	82 30       	cpi	r24, 0x02	; 2
    175e:	91 05       	cpc	r25, r1
    1760:	38 f4       	brcc	.+14     	; 0x1770 <position+0x70>
    1762:	40 91 00 02 	lds	r20, 0x0200
    1766:	50 91 01 02 	lds	r21, 0x0201
    176a:	42 30       	cpi	r20, 0x02	; 2
    176c:	51 05       	cpc	r21, r1
    176e:	49 f0       	breq	.+18     	; 0x1782 <position+0x82>
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	58 f4       	brcc	.+22     	; 0x178c <position+0x8c>
    1776:	40 91 00 02 	lds	r20, 0x0200
    177a:	50 91 01 02 	lds	r21, 0x0201
    177e:	45 2b       	or	r20, r21
    1780:	29 f4       	brne	.+10     	; 0x178c <position+0x8c>
		{
			if (armNo == side)
    1782:	0c 17       	cp	r16, r28
    1784:	1d 07       	cpc	r17, r29
    1786:	a1 f5       	brne	.+104    	; 0x17f0 <position+0xf0>
				turn();
    1788:	b4 da       	rcall	.-2712   	; 0xcf2 <turn>
    178a:	32 c0       	rjmp	.+100    	; 0x17f0 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	91 05       	cpc	r25, r1
    1790:	38 f4       	brcc	.+14     	; 0x17a0 <position+0xa0>
    1792:	40 91 00 02 	lds	r20, 0x0200
    1796:	50 91 01 02 	lds	r21, 0x0201
    179a:	41 30       	cpi	r20, 0x01	; 1
    179c:	51 05       	cpc	r21, r1
    179e:	51 f0       	breq	.+20     	; 0x17b4 <position+0xb4>
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	70 f4       	brcc	.+28     	; 0x17c2 <position+0xc2>
    17a6:	40 91 00 02 	lds	r20, 0x0200
    17aa:	50 91 01 02 	lds	r21, 0x0201
    17ae:	43 30       	cpi	r20, 0x03	; 3
    17b0:	51 05       	cpc	r21, r1
    17b2:	39 f4       	brne	.+14     	; 0x17c2 <position+0xc2>
		{
			if (armNo != side)
    17b4:	0c 17       	cp	r16, r28
    17b6:	1d 07       	cpc	r17, r29
    17b8:	11 f0       	breq	.+4      	; 0x17be <position+0xbe>
			turnRight();
    17ba:	04 da       	rcall	.-3064   	; 0xbc4 <turnRight>
    17bc:	19 c0       	rjmp	.+50     	; 0x17f0 <position+0xf0>
			else turnLeft();
    17be:	4d da       	rcall	.-2918   	; 0xc5a <turnLeft>
    17c0:	17 c0       	rjmp	.+46     	; 0x17f0 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    17c2:	02 97       	sbiw	r24, 0x02	; 2
    17c4:	30 f4       	brcc	.+12     	; 0x17d2 <position+0xd2>
    17c6:	80 91 00 02 	lds	r24, 0x0200
    17ca:	90 91 01 02 	lds	r25, 0x0201
    17ce:	03 97       	sbiw	r24, 0x03	; 3
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <position+0xe4>
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	60 f4       	brcc	.+24     	; 0x17f0 <position+0xf0>
    17d8:	80 91 00 02 	lds	r24, 0x0200
    17dc:	90 91 01 02 	lds	r25, 0x0201
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	31 f4       	brne	.+12     	; 0x17f0 <position+0xf0>
					if (armNo == side)
    17e4:	0c 17       	cp	r16, r28
    17e6:	1d 07       	cpc	r17, r29
    17e8:	11 f4       	brne	.+4      	; 0x17ee <position+0xee>
						turnRight();
    17ea:	ec d9       	rcall	.-3112   	; 0xbc4 <turnRight>
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <position+0xf0>
					else turnLeft();
    17ee:	35 da       	rcall	.-2966   	; 0xc5a <turnLeft>
		if((dir==0 && (ct==2 || ct==3)) || (dir==2 && (ct==0 || ct==1)))
    17f0:	80 91 00 02 	lds	r24, 0x0200
    17f4:	90 91 01 02 	lds	r25, 0x0201
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	49 f4       	brne	.+18     	; 0x180e <position+0x10e>
    17fc:	80 91 41 02 	lds	r24, 0x0241
    1800:	90 91 42 02 	lds	r25, 0x0242
    1804:	02 97       	sbiw	r24, 0x02	; 2
    1806:	02 97       	sbiw	r24, 0x02	; 2
    1808:	08 f0       	brcs	.+2      	; 0x180c <position+0x10c>
    180a:	8a c0       	rjmp	.+276    	; 0x1920 <position+0x220>
    180c:	0a c0       	rjmp	.+20     	; 0x1822 <position+0x122>
    180e:	02 97       	sbiw	r24, 0x02	; 2
    1810:	09 f0       	breq	.+2      	; 0x1814 <position+0x114>
    1812:	86 c0       	rjmp	.+268    	; 0x1920 <position+0x220>
    1814:	80 91 41 02 	lds	r24, 0x0241
    1818:	90 91 42 02 	lds	r25, 0x0242
    181c:	02 97       	sbiw	r24, 0x02	; 2
    181e:	08 f0       	brcs	.+2      	; 0x1822 <position+0x122>
    1820:	7f c0       	rjmp	.+254    	; 0x1920 <position+0x220>
		{
			if(flag==1)
    1822:	80 91 0e 02 	lds	r24, 0x020E
    1826:	90 91 0f 02 	lds	r25, 0x020F
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	09 f0       	breq	.+2      	; 0x1830 <position+0x130>
    182e:	78 c0       	rjmp	.+240    	; 0x1920 <position+0x220>
			{
				back_mm(60);
    1830:	8c e3       	ldi	r24, 0x3C	; 60
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9a d8       	rcall	.-3788   	; 0x96a <back_mm>
				flag=0;
    1836:	10 92 0f 02 	sts	0x020F, r1
    183a:	10 92 0e 02 	sts	0x020E, r1
    183e:	70 c0       	rjmp	.+224    	; 0x1920 <position+0x220>
	
		
	}
	else
	{
		if (dir == 1 || dir == 3)
    1840:	80 91 00 02 	lds	r24, 0x0200
    1844:	90 91 01 02 	lds	r25, 0x0201
    1848:	8d 7f       	andi	r24, 0xFD	; 253
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	49 f4       	brne	.+18     	; 0x1860 <position+0x160>
			if (ct == 0 || ct == 3)
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	19 f0       	breq	.+6      	; 0x185a <position+0x15a>
    1854:	23 30       	cpi	r18, 0x03	; 3
    1856:	31 05       	cpc	r19, r1
    1858:	11 f4       	brne	.+4      	; 0x185e <position+0x15e>
				turnRight();
    185a:	b4 d9       	rcall	.-3224   	; 0xbc4 <turnRight>
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <position+0x160>
			else turnLeft();
    185e:	fd d9       	rcall	.-3078   	; 0xc5a <turnLeft>
		if (dir == 0 || dir == 2)
    1860:	80 91 00 02 	lds	r24, 0x0200
    1864:	90 91 01 02 	lds	r25, 0x0201
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	21 f0       	breq	.+8      	; 0x1874 <position+0x174>
    186c:	02 97       	sbiw	r24, 0x02	; 2
    186e:	09 f0       	breq	.+2      	; 0x1872 <position+0x172>
    1870:	33 c0       	rjmp	.+102    	; 0x18d8 <position+0x1d8>
    1872:	07 c0       	rjmp	.+14     	; 0x1882 <position+0x182>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1874:	80 91 41 02 	lds	r24, 0x0241
    1878:	90 91 42 02 	lds	r25, 0x0242
    187c:	02 97       	sbiw	r24, 0x02	; 2
    187e:	c8 f4       	brcc	.+50     	; 0x18b2 <position+0x1b2>
    1880:	07 c0       	rjmp	.+14     	; 0x1890 <position+0x190>
    1882:	80 91 41 02 	lds	r24, 0x0241
    1886:	90 91 42 02 	lds	r25, 0x0242
    188a:	02 97       	sbiw	r24, 0x02	; 2
    188c:	02 97       	sbiw	r24, 0x02	; 2
    188e:	88 f4       	brcc	.+34     	; 0x18b2 <position+0x1b2>
			{
				if (ot != 4 && ot != 5)
    1890:	80 91 02 02 	lds	r24, 0x0202
    1894:	90 91 03 02 	lds	r25, 0x0203
    1898:	04 97       	sbiw	r24, 0x04	; 4
    189a:	02 97       	sbiw	r24, 0x02	; 2
    189c:	10 f0       	brcs	.+4      	; 0x18a2 <position+0x1a2>
				{
					turnLeft();
    189e:	dd d9       	rcall	.-3142   	; 0xc5a <turnLeft>
					front();
    18a0:	8b dc       	rcall	.-1770   	; 0x11b8 <front>
				}
				if (armNo == side)
    18a2:	0c 17       	cp	r16, r28
    18a4:	1d 07       	cpc	r17, r29
    18a6:	11 f4       	brne	.+4      	; 0x18ac <position+0x1ac>
				{
					front();
    18a8:	87 dc       	rcall	.-1778   	; 0x11b8 <front>
    18aa:	32 c0       	rjmp	.+100    	; 0x1910 <position+0x210>
				}
				else
				{
					front();
    18ac:	85 dc       	rcall	.-1782   	; 0x11b8 <front>
					turn();
    18ae:	21 da       	rcall	.-3006   	; 0xcf2 <turn>
    18b0:	2f c0       	rjmp	.+94     	; 0x1910 <position+0x210>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    18b2:	80 91 02 02 	lds	r24, 0x0202
    18b6:	90 91 03 02 	lds	r25, 0x0203
    18ba:	04 97       	sbiw	r24, 0x04	; 4
    18bc:	02 97       	sbiw	r24, 0x02	; 2
    18be:	10 f0       	brcs	.+4      	; 0x18c4 <position+0x1c4>
				{
					turnLeft();
    18c0:	cc d9       	rcall	.-3176   	; 0xc5a <turnLeft>
					front();
    18c2:	7a dc       	rcall	.-1804   	; 0x11b8 <front>
				}
				if (armNo == side)
    18c4:	0c 17       	cp	r16, r28
    18c6:	1d 07       	cpc	r17, r29
    18c8:	19 f4       	brne	.+6      	; 0x18d0 <position+0x1d0>
				{
					turn();
    18ca:	13 da       	rcall	.-3034   	; 0xcf2 <turn>
					front();
    18cc:	75 dc       	rcall	.-1814   	; 0x11b8 <front>
    18ce:	20 c0       	rjmp	.+64     	; 0x1910 <position+0x210>
				}
				else
				{
					turn();
    18d0:	10 da       	rcall	.-3040   	; 0xcf2 <turn>
					front();
    18d2:	72 dc       	rcall	.-1820   	; 0x11b8 <front>
					turn();
    18d4:	0e da       	rcall	.-3044   	; 0xcf2 <turn>
    18d6:	1c c0       	rjmp	.+56     	; 0x1910 <position+0x210>
				}
			}
		}
		else
		{
			if (armNo == side)
    18d8:	0c 17       	cp	r16, r28
    18da:	1d 07       	cpc	r17, r29
    18dc:	69 f4       	brne	.+26     	; 0x18f8 <position+0x1f8>
			{
				if (ct == 0 || ct == 3)
    18de:	80 91 41 02 	lds	r24, 0x0241
    18e2:	90 91 42 02 	lds	r25, 0x0242
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	11 f0       	breq	.+4      	; 0x18ee <position+0x1ee>
    18ea:	03 97       	sbiw	r24, 0x03	; 3
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <position+0x1f2>
				turnRight();
    18ee:	6a d9       	rcall	.-3372   	; 0xbc4 <turnRight>
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <position+0x1f4>
				else turnLeft();
    18f2:	b3 d9       	rcall	.-3226   	; 0xc5a <turnLeft>
				front();
    18f4:	61 dc       	rcall	.-1854   	; 0x11b8 <front>
    18f6:	0c c0       	rjmp	.+24     	; 0x1910 <position+0x210>
			}
			else
			{
				if (ct == 0 || ct == 3)
    18f8:	80 91 41 02 	lds	r24, 0x0241
    18fc:	90 91 42 02 	lds	r25, 0x0242
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	11 f0       	breq	.+4      	; 0x1908 <position+0x208>
    1904:	03 97       	sbiw	r24, 0x03	; 3
    1906:	11 f4       	brne	.+4      	; 0x190c <position+0x20c>
				turnRight();
    1908:	5d d9       	rcall	.-3398   	; 0xbc4 <turnRight>
    190a:	01 c0       	rjmp	.+2      	; 0x190e <position+0x20e>
				else turnLeft();
    190c:	a6 d9       	rcall	.-3252   	; 0xc5a <turnLeft>
				front();
    190e:	54 dc       	rcall	.-1880   	; 0x11b8 <front>
			}
		}
		ot = ct;
    1910:	80 91 41 02 	lds	r24, 0x0241
    1914:	90 91 42 02 	lds	r25, 0x0242
    1918:	90 93 03 02 	sts	0x0203, r25
    191c:	80 93 02 02 	sts	0x0202, r24
	}
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <pickNode>:

void pickNode(int armNo, int side)
{
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	8c 01       	movw	r16, r24
    1934:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    1936:	fc 01       	movw	r30, r24
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	e5 59       	subi	r30, 0x95	; 149
    193e:	fd 4f       	sbci	r31, 0xFD	; 253
    1940:	a0 91 41 02 	lds	r26, 0x0241
    1944:	b0 91 42 02 	lds	r27, 0x0242
    1948:	aa 0f       	add	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	a6 0f       	add	r26, r22
    194e:	b7 1f       	adc	r27, r23
    1950:	aa 0f       	add	r26, r26
    1952:	bb 1f       	adc	r27, r27
    1954:	ab 5b       	subi	r26, 0xBB	; 187
    1956:	bd 4f       	sbci	r27, 0xFD	; 253
    1958:	8d 91       	ld	r24, X+
    195a:	9c 91       	ld	r25, X
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
	position(armNo, side);
    1960:	c8 01       	movw	r24, r16
    1962:	ce de       	rcall	.-612    	; 0x1700 <position>
	pick(armNo);
    1964:	c8 01       	movw	r24, r16
    1966:	97 de       	rcall	.-722    	; 0x1696 <pick>
	term[ct][side] = -1;
    1968:	80 91 41 02 	lds	r24, 0x0241
    196c:	90 91 42 02 	lds	r25, 0x0242
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	c8 0f       	add	r28, r24
    1976:	d9 1f       	adc	r29, r25
    1978:	cc 0f       	add	r28, r28
    197a:	dd 1f       	adc	r29, r29
    197c:	cb 5b       	subi	r28, 0xBB	; 187
    197e:	dd 4f       	sbci	r29, 0xFD	; 253
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f ef       	ldi	r25, 0xFF	; 255
    1984:	99 83       	std	Y+1, r25	; 0x01
    1986:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <pickSort>:

void pickSort(int armNo, int sortNo)
{
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
    199c:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    199e:	fc 01       	movw	r30, r24
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	e5 59       	subi	r30, 0x95	; 149
    19a6:	fd 4f       	sbci	r31, 0xFD	; 253
    19a8:	db 01       	movw	r26, r22
    19aa:	aa 0f       	add	r26, r26
    19ac:	bb 1f       	adc	r27, r27
    19ae:	a3 5c       	subi	r26, 0xC3	; 195
    19b0:	bd 4f       	sbci	r27, 0xFD	; 253
    19b2:	8d 91       	ld	r24, X+
    19b4:	9c 91       	ld	r25, X
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    19ba:	c6 17       	cp	r28, r22
    19bc:	d7 07       	cpc	r29, r23
    19be:	39 f4       	brne	.+14     	; 0x19ce <pickSort+0x3c>
    19c0:	80 91 00 02 	lds	r24, 0x0200
    19c4:	90 91 01 02 	lds	r25, 0x0201
    19c8:	89 2b       	or	r24, r25
    19ca:	49 f4       	brne	.+18     	; 0x19de <pickSort+0x4c>
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <pickSort+0x48>
    19ce:	80 91 00 02 	lds	r24, 0x0200
    19d2:	90 91 01 02 	lds	r25, 0x0201
    19d6:	02 97       	sbiw	r24, 0x02	; 2
    19d8:	11 f4       	brne	.+4      	; 0x19de <pickSort+0x4c>
		turn();
    19da:	8b d9       	rcall	.-3306   	; 0xcf2 <turn>
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    19de:	80 91 00 02 	lds	r24, 0x0200
    19e2:	90 91 01 02 	lds	r25, 0x0201
    19e6:	8d 7f       	andi	r24, 0xFD	; 253
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	29 f4       	brne	.+10     	; 0x19f6 <pickSort+0x64>
			if (armNo == 0)
    19ec:	20 97       	sbiw	r28, 0x00	; 0
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <pickSort+0x62>
				turnLeft();
    19f0:	34 d9       	rcall	.-3480   	; 0xc5a <turnLeft>
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <pickSort+0x64>
			else turnRight();
    19f4:	e7 d8       	rcall	.-3634   	; 0xbc4 <turnRight>
	}
	back_mm(30);
    19f6:	8e e1       	ldi	r24, 0x1E	; 30
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 b5 04 	call	0x96a	; 0x96a <back_mm>
	pick(armNo);
    19fe:	ce 01       	movw	r24, r28
    1a00:	4a de       	rcall	.-876    	; 0x1696 <pick>
	forward_mm(30);
    1a02:	8e e1       	ldi	r24, 0x1E	; 30
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	sort[sortNo] = -1;
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	e3 5c       	subi	r30, 0xC3	; 195
    1a12:	fd 4f       	sbci	r31, 0xFD	; 253
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	08 95       	ret

00001a26 <pickup>:
void pickup()
{
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1a32:	20 91 41 02 	lds	r18, 0x0241
    1a36:	30 91 42 02 	lds	r19, 0x0242
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	30 f4       	brcc	.+12     	; 0x1a4c <pickup+0x26>
    1a40:	80 91 00 02 	lds	r24, 0x0200
    1a44:	90 91 01 02 	lds	r25, 0x0201
    1a48:	02 97       	sbiw	r24, 0x02	; 2
    1a4a:	79 f0       	breq	.+30     	; 0x1a6a <pickup+0x44>
    1a4c:	c9 01       	movw	r24, r18
    1a4e:	02 97       	sbiw	r24, 0x02	; 2
    1a50:	02 97       	sbiw	r24, 0x02	; 2
    1a52:	80 f4       	brcc	.+32     	; 0x1a74 <pickup+0x4e>
    1a54:	80 91 00 02 	lds	r24, 0x0200
    1a58:	90 91 01 02 	lds	r25, 0x0201
    1a5c:	89 2b       	or	r24, r25
    1a5e:	79 f0       	breq	.+30     	; 0x1a7e <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1a60:	c1 e0       	ldi	r28, 0x01	; 1
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
    1a64:	00 e0       	ldi	r16, 0x00	; 0
    1a66:	10 e0       	ldi	r17, 0x00	; 0
    1a68:	0e c0       	rjmp	.+28     	; 0x1a86 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1a6a:	c0 e0       	ldi	r28, 0x00	; 0
    1a6c:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	10 e0       	ldi	r17, 0x00	; 0
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1a74:	c1 e0       	ldi	r28, 0x01	; 1
    1a76:	d0 e0       	ldi	r29, 0x00	; 0
    1a78:	00 e0       	ldi	r16, 0x00	; 0
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
    1a7c:	04 c0       	rjmp	.+8      	; 0x1a86 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1a7e:	c0 e0       	ldi	r28, 0x00	; 0
    1a80:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1a82:	01 e0       	ldi	r16, 0x01	; 1
    1a84:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1a86:	f9 01       	movw	r30, r18
    1a88:	ee 0f       	add	r30, r30
    1a8a:	ff 1f       	adc	r31, r31
    1a8c:	e2 5e       	subi	r30, 0xE2	; 226
    1a8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	89 2b       	or	r24, r25
    1a96:	79 f4       	brne	.+30     	; 0x1ab6 <pickup+0x90>
		if (term[ct][0] == -2)
    1a98:	f9 01       	movw	r30, r18
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	eb 5b       	subi	r30, 0xBB	; 187
    1aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	02 96       	adiw	r24, 0x02	; 2
    1aac:	19 f4       	brne	.+6      	; 0x1ab4 <pickup+0x8e>
		{
			terminalCheck1();
    1aae:	19 dc       	rcall	.-1998   	; 0x12e2 <terminalCheck1>
			terminalCheck2();
    1ab0:	e0 dc       	rcall	.-1600   	; 0x1472 <terminalCheck2>
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <pickup+0x90>
		}
		else	terminalCheck2();
    1ab4:	de dc       	rcall	.-1604   	; 0x1472 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1ab6:	20 91 41 02 	lds	r18, 0x0241
    1aba:	30 91 42 02 	lds	r19, 0x0242
    1abe:	f9 01       	movw	r30, r18
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	eb 5b       	subi	r30, 0xBB	; 187
    1aca:	fd 4f       	sbci	r31, 0xFD	; 253
    1acc:	40 81       	ld	r20, Z
    1ace:	51 81       	ldd	r21, Z+1	; 0x01
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	e9 5a       	subi	r30, 0xA9	; 169
    1ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	48 17       	cp	r20, r24
    1ae0:	59 07       	cpc	r21, r25
    1ae2:	21 f0       	breq	.+8      	; 0x1aec <pickup+0xc6>
    1ae4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ae6:	6f ef       	ldi	r22, 0xFF	; 255
    1ae8:	56 07       	cpc	r21, r22
    1aea:	89 f4       	brne	.+34     	; 0x1b0e <pickup+0xe8>
    1aec:	f9 01       	movw	r30, r18
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	ee 0f       	add	r30, r30
    1af4:	ff 1f       	adc	r31, r31
    1af6:	eb 5b       	subi	r30, 0xBB	; 187
    1af8:	fd 4f       	sbci	r31, 0xFD	; 253
    1afa:	62 81       	ldd	r22, Z+2	; 0x02
    1afc:	73 81       	ldd	r23, Z+3	; 0x03
    1afe:	86 17       	cp	r24, r22
    1b00:	97 07       	cpc	r25, r23
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <pickup+0xe0>
    1b04:	ee c1       	rjmp	.+988    	; 0x1ee2 <pickup+0x4bc>
    1b06:	6f 3f       	cpi	r22, 0xFF	; 255
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <pickup+0xe8>
    1b0c:	ea c1       	rjmp	.+980    	; 0x1ee2 <pickup+0x4bc>
		{
			if (armCount == 2)
    1b0e:	60 91 06 02 	lds	r22, 0x0206
    1b12:	70 91 07 02 	lds	r23, 0x0207
    1b16:	62 30       	cpi	r22, 0x02	; 2
    1b18:	71 05       	cpc	r23, r1
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <pickup+0xf8>
    1b1c:	b0 c0       	rjmp	.+352    	; 0x1c7e <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1b1e:	e0 91 67 02 	lds	r30, 0x0267
    1b22:	f0 91 68 02 	lds	r31, 0x0268
    1b26:	df 01       	movw	r26, r30
    1b28:	aa 0f       	add	r26, r26
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	a9 5a       	subi	r26, 0xA9	; 169
    1b2e:	bd 4f       	sbci	r27, 0xFD	; 253
    1b30:	6d 91       	ld	r22, X+
    1b32:	7c 91       	ld	r23, X
    1b34:	46 17       	cp	r20, r22
    1b36:	57 07       	cpc	r21, r23
    1b38:	79 f0       	breq	.+30     	; 0x1b58 <pickup+0x132>
    1b3a:	d9 01       	movw	r26, r18
    1b3c:	aa 0f       	add	r26, r26
    1b3e:	bb 1f       	adc	r27, r27
    1b40:	aa 0f       	add	r26, r26
    1b42:	bb 1f       	adc	r27, r27
    1b44:	ab 5b       	subi	r26, 0xBB	; 187
    1b46:	bd 4f       	sbci	r27, 0xFD	; 253
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	ed 90       	ld	r14, X+
    1b4c:	fc 90       	ld	r15, X
    1b4e:	13 97       	sbiw	r26, 0x03	; 3
    1b50:	6e 15       	cp	r22, r14
    1b52:	7f 05       	cpc	r23, r15
    1b54:	59 f4       	brne	.+22     	; 0x1b6c <pickup+0x146>
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 1);
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	e5 de       	rcall	.-566    	; 0x192a <pickNode>
    1b60:	8e c0       	rjmp	.+284    	; 0x1c7e <pickup+0x258>
					else	pickNode(arm1, 0);
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	ce 01       	movw	r24, r28
    1b68:	e0 de       	rcall	.-576    	; 0x192a <pickNode>
    1b6a:	89 c0       	rjmp	.+274    	; 0x1c7e <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1b6c:	8e 15       	cp	r24, r14
    1b6e:	9f 05       	cpc	r25, r15
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <pickup+0x14e>
    1b72:	4e c0       	rjmp	.+156    	; 0x1c10 <pickup+0x1ea>
    1b74:	ef 20       	and	r14, r15
    1b76:	e0 94       	com	r14
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <pickup+0x156>
    1b7a:	4a c0       	rjmp	.+148    	; 0x1c10 <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1b7c:	48 17       	cp	r20, r24
    1b7e:	59 07       	cpc	r21, r25
    1b80:	69 f0       	breq	.+26     	; 0x1b9c <pickup+0x176>
    1b82:	4f 3f       	cpi	r20, 0xFF	; 255
    1b84:	af ef       	ldi	r26, 0xFF	; 255
    1b86:	5a 07       	cpc	r21, r26
    1b88:	49 f0       	breq	.+18     	; 0x1b9c <pickup+0x176>
					{
						pickNode(arm1, 0);
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	ce 01       	movw	r24, r28
    1b90:	cc de       	rcall	.-616    	; 0x192a <pickNode>
						pickNode(arm0, 1);
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	c8 01       	movw	r24, r16
    1b98:	c8 de       	rcall	.-624    	; 0x192a <pickNode>
    1b9a:	71 c0       	rjmp	.+226    	; 0x1c7e <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1b9c:	21 70       	andi	r18, 0x01	; 1
    1b9e:	30 78       	andi	r19, 0x80	; 128
    1ba0:	33 23       	and	r19, r19
    1ba2:	34 f4       	brge	.+12     	; 0x1bb0 <pickup+0x18a>
    1ba4:	21 50       	subi	r18, 0x01	; 1
    1ba6:	31 09       	sbc	r19, r1
    1ba8:	2e 6f       	ori	r18, 0xFE	; 254
    1baa:	3f 6f       	ori	r19, 0xFF	; 255
    1bac:	2f 5f       	subi	r18, 0xFF	; 255
    1bae:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb0:	d9 01       	movw	r26, r18
    1bb2:	aa 0f       	add	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	a3 5c       	subi	r26, 0xC3	; 195
    1bb8:	bd 4f       	sbci	r27, 0xFD	; 253
    1bba:	2d 91       	ld	r18, X+
    1bbc:	3c 91       	ld	r19, X
    1bbe:	2f 3f       	cpi	r18, 0xFF	; 255
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	09 f1       	breq	.+66     	; 0x1c06 <pickup+0x1e0>
    1bc4:	df 01       	movw	r26, r30
    1bc6:	aa 0f       	add	r26, r26
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	aa 0f       	add	r26, r26
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	ab 5b       	subi	r26, 0xBB	; 187
    1bd0:	bd 4f       	sbci	r27, 0xFD	; 253
    1bd2:	2d 91       	ld	r18, X+
    1bd4:	3c 91       	ld	r19, X
    1bd6:	62 17       	cp	r22, r18
    1bd8:	73 07       	cpc	r23, r19
    1bda:	a9 f0       	breq	.+42     	; 0x1c06 <pickup+0x1e0>
    1bdc:	2f 3f       	cpi	r18, 0xFF	; 255
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	91 f0       	breq	.+36     	; 0x1c06 <pickup+0x1e0>
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	ee 0f       	add	r30, r30
    1be8:	ff 1f       	adc	r31, r31
    1bea:	eb 5b       	subi	r30, 0xBB	; 187
    1bec:	fd 4f       	sbci	r31, 0xFD	; 253
    1bee:	22 81       	ldd	r18, Z+2	; 0x02
    1bf0:	33 81       	ldd	r19, Z+3	; 0x03
    1bf2:	62 17       	cp	r22, r18
    1bf4:	73 07       	cpc	r23, r19
    1bf6:	39 f0       	breq	.+14     	; 0x1c06 <pickup+0x1e0>
    1bf8:	2f 3f       	cpi	r18, 0xFF	; 255
    1bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfc:	21 f0       	breq	.+8      	; 0x1c06 <pickup+0x1e0>
    1bfe:	48 17       	cp	r20, r24
    1c00:	59 07       	cpc	r21, r25
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <pickup+0x1e0>
    1c04:	6e c1       	rjmp	.+732    	; 0x1ee2 <pickup+0x4bc>
						pickNode(arm0, 1);
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	8e de       	rcall	.-740    	; 0x192a <pickNode>
    1c0e:	37 c0       	rjmp	.+110    	; 0x1c7e <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1c10:	48 17       	cp	r20, r24
    1c12:	59 07       	cpc	r21, r25
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <pickup+0x1f2>
    1c16:	65 c1       	rjmp	.+714    	; 0x1ee2 <pickup+0x4bc>
    1c18:	4f 3f       	cpi	r20, 0xFF	; 255
    1c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <pickup+0x1fa>
    1c1e:	61 c1       	rjmp	.+706    	; 0x1ee2 <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1c20:	21 70       	andi	r18, 0x01	; 1
    1c22:	30 78       	andi	r19, 0x80	; 128
    1c24:	33 23       	and	r19, r19
    1c26:	34 f4       	brge	.+12     	; 0x1c34 <pickup+0x20e>
    1c28:	21 50       	subi	r18, 0x01	; 1
    1c2a:	31 09       	sbc	r19, r1
    1c2c:	2e 6f       	ori	r18, 0xFE	; 254
    1c2e:	3f 6f       	ori	r19, 0xFF	; 255
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	d9 01       	movw	r26, r18
    1c36:	aa 0f       	add	r26, r26
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	a3 5c       	subi	r26, 0xC3	; 195
    1c3c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c3e:	8d 91       	ld	r24, X+
    1c40:	9c 91       	ld	r25, X
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	c1 f0       	breq	.+48     	; 0x1c76 <pickup+0x250>
    1c46:	df 01       	movw	r26, r30
    1c48:	aa 0f       	add	r26, r26
    1c4a:	bb 1f       	adc	r27, r27
    1c4c:	aa 0f       	add	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	ab 5b       	subi	r26, 0xBB	; 187
    1c52:	bd 4f       	sbci	r27, 0xFD	; 253
    1c54:	8d 91       	ld	r24, X+
    1c56:	9c 91       	ld	r25, X
    1c58:	11 97       	sbiw	r26, 0x01	; 1
    1c5a:	68 17       	cp	r22, r24
    1c5c:	79 07       	cpc	r23, r25
    1c5e:	59 f0       	breq	.+22     	; 0x1c76 <pickup+0x250>
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	49 f0       	breq	.+18     	; 0x1c76 <pickup+0x250>
    1c64:	fd 01       	movw	r30, r26
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	68 17       	cp	r22, r24
    1c6c:	79 07       	cpc	r23, r25
    1c6e:	19 f0       	breq	.+6      	; 0x1c76 <pickup+0x250>
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <pickup+0x250>
    1c74:	36 c1       	rjmp	.+620    	; 0x1ee2 <pickup+0x4bc>
						pickNode(arm1, 0);
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	56 de       	rcall	.-852    	; 0x192a <pickNode>
				}

			}
			if (armCount == 1)
    1c7e:	80 91 06 02 	lds	r24, 0x0206
    1c82:	90 91 07 02 	lds	r25, 0x0207
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <pickup+0x266>
    1c8a:	2b c1       	rjmp	.+598    	; 0x1ee2 <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	e5 59       	subi	r30, 0x95	; 149
    1c94:	fd 4f       	sbci	r31, 0xFD	; 253
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <pickup+0x27a>
					a1 = arm0;
    1c9e:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1ca0:	be 01       	movw	r22, r28
    1ca2:	6f 5f       	subi	r22, 0xFF	; 255
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	61 70       	andi	r22, 0x01	; 1
    1ca8:	70 78       	andi	r23, 0x80	; 128
    1caa:	77 23       	and	r23, r23
    1cac:	34 f4       	brge	.+12     	; 0x1cba <pickup+0x294>
    1cae:	61 50       	subi	r22, 0x01	; 1
    1cb0:	71 09       	sbc	r23, r1
    1cb2:	6e 6f       	ori	r22, 0xFE	; 254
    1cb4:	7f 6f       	ori	r23, 0xFF	; 255
    1cb6:	6f 5f       	subi	r22, 0xFF	; 255
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1cba:	80 91 41 02 	lds	r24, 0x0241
    1cbe:	90 91 42 02 	lds	r25, 0x0242
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	21 70       	andi	r18, 0x01	; 1
    1cc6:	30 78       	andi	r19, 0x80	; 128
    1cc8:	33 23       	and	r19, r19
    1cca:	34 f4       	brge	.+12     	; 0x1cd8 <pickup+0x2b2>
    1ccc:	21 50       	subi	r18, 0x01	; 1
    1cce:	31 09       	sbc	r19, r1
    1cd0:	2e 6f       	ori	r18, 0xFE	; 254
    1cd2:	3f 6f       	ori	r19, 0xFF	; 255
    1cd4:	2f 5f       	subi	r18, 0xFF	; 255
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	f9 01       	movw	r30, r18
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	e3 5c       	subi	r30, 0xC3	; 195
    1ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce2:	20 81       	ld	r18, Z
    1ce4:	31 81       	ldd	r19, Z+1	; 0x01
    1ce6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ce8:	af ef       	ldi	r26, 0xFF	; 255
    1cea:	3a 07       	cpc	r19, r26
    1cec:	d9 f5       	brne	.+118    	; 0x1d64 <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1cee:	fc 01       	movw	r30, r24
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	ff 1f       	adc	r31, r31
    1cf4:	ec 0f       	add	r30, r28
    1cf6:	fd 1f       	adc	r31, r29
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	eb 5b       	subi	r30, 0xBB	; 187
    1cfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1d00:	20 81       	ld	r18, Z
    1d02:	31 81       	ldd	r19, Z+1	; 0x01
    1d04:	2f 3f       	cpi	r18, 0xFF	; 255
    1d06:	ef ef       	ldi	r30, 0xFF	; 255
    1d08:	3e 07       	cpc	r19, r30
    1d0a:	71 f0       	breq	.+28     	; 0x1d28 <pickup+0x302>
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	ee 0f       	add	r30, r30
    1d10:	ff 1f       	adc	r31, r31
    1d12:	e9 5a       	subi	r30, 0xA9	; 169
    1d14:	fd 4f       	sbci	r31, 0xFD	; 253
    1d16:	40 81       	ld	r20, Z
    1d18:	51 81       	ldd	r21, Z+1	; 0x01
    1d1a:	24 17       	cp	r18, r20
    1d1c:	35 07       	cpc	r19, r21
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <pickup+0x302>
						pickNode(a1, a1);
    1d20:	be 01       	movw	r22, r28
    1d22:	ce 01       	movw	r24, r28
    1d24:	02 de       	rcall	.-1020   	; 0x192a <pickNode>
    1d26:	dd c0       	rjmp	.+442    	; 0x1ee2 <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1d28:	fc 01       	movw	r30, r24
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	e6 0f       	add	r30, r22
    1d30:	f7 1f       	adc	r31, r23
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	eb 5b       	subi	r30, 0xBB	; 187
    1d38:	fd 4f       	sbci	r31, 0xFD	; 253
    1d3a:	20 81       	ld	r18, Z
    1d3c:	31 81       	ldd	r19, Z+1	; 0x01
    1d3e:	2f 3f       	cpi	r18, 0xFF	; 255
    1d40:	4f ef       	ldi	r20, 0xFF	; 255
    1d42:	34 07       	cpc	r19, r20
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <pickup+0x322>
    1d46:	cd c0       	rjmp	.+410    	; 0x1ee2 <pickup+0x4bc>
    1d48:	fc 01       	movw	r30, r24
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e9 5a       	subi	r30, 0xA9	; 169
    1d50:	fd 4f       	sbci	r31, 0xFD	; 253
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	28 17       	cp	r18, r24
    1d58:	39 07       	cpc	r19, r25
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <pickup+0x338>
    1d5c:	c2 c0       	rjmp	.+388    	; 0x1ee2 <pickup+0x4bc>
						pickNode(a1, a2);
    1d5e:	ce 01       	movw	r24, r28
    1d60:	e4 dd       	rcall	.-1080   	; 0x192a <pickNode>
    1d62:	bf c0       	rjmp	.+382    	; 0x1ee2 <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1d64:	40 91 67 02 	lds	r20, 0x0267
    1d68:	50 91 68 02 	lds	r21, 0x0268
    1d6c:	fa 01       	movw	r30, r20
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	e9 5a       	subi	r30, 0xA9	; 169
    1d74:	fd 4f       	sbci	r31, 0xFD	; 253
    1d76:	01 90       	ld	r0, Z+
    1d78:	f0 81       	ld	r31, Z
    1d7a:	e0 2d       	mov	r30, r0
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	aa 0f       	add	r26, r26
    1d80:	bb 1f       	adc	r27, r27
    1d82:	aa 0f       	add	r26, r26
    1d84:	bb 1f       	adc	r27, r27
    1d86:	ab 5b       	subi	r26, 0xBB	; 187
    1d88:	bd 4f       	sbci	r27, 0xFD	; 253
    1d8a:	0d 90       	ld	r0, X+
    1d8c:	bc 91       	ld	r27, X
    1d8e:	a0 2d       	mov	r26, r0
    1d90:	ae 17       	cp	r26, r30
    1d92:	bf 07       	cpc	r27, r31
    1d94:	71 f0       	breq	.+28     	; 0x1db2 <pickup+0x38c>
    1d96:	dc 01       	movw	r26, r24
    1d98:	aa 0f       	add	r26, r26
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	aa 0f       	add	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	ab 5b       	subi	r26, 0xBB	; 187
    1da2:	bd 4f       	sbci	r27, 0xFD	; 253
    1da4:	12 96       	adiw	r26, 0x02	; 2
    1da6:	0d 90       	ld	r0, X+
    1da8:	bc 91       	ld	r27, X
    1daa:	a0 2d       	mov	r26, r0
    1dac:	ea 17       	cp	r30, r26
    1dae:	fb 07       	cpc	r31, r27
    1db0:	d9 f5       	brne	.+118    	; 0x1e28 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1db2:	da 01       	movw	r26, r20
    1db4:	aa 0f       	add	r26, r26
    1db6:	bb 1f       	adc	r27, r27
    1db8:	a2 5e       	subi	r26, 0xE2	; 226
    1dba:	bd 4f       	sbci	r27, 0xFD	; 253
    1dbc:	2d 91       	ld	r18, X+
    1dbe:	3c 91       	ld	r19, X
    1dc0:	21 30       	cpi	r18, 0x01	; 1
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <pickup+0x3a2>
    1dc6:	8d c0       	rjmp	.+282    	; 0x1ee2 <pickup+0x4bc>
    1dc8:	da 01       	movw	r26, r20
    1dca:	aa 0f       	add	r26, r26
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	aa 0f       	add	r26, r26
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	ab 5b       	subi	r26, 0xBB	; 187
    1dd4:	bd 4f       	sbci	r27, 0xFD	; 253
    1dd6:	2d 91       	ld	r18, X+
    1dd8:	3c 91       	ld	r19, X
    1dda:	2f 3f       	cpi	r18, 0xFF	; 255
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	79 f0       	breq	.+30     	; 0x1dfe <pickup+0x3d8>
    1de0:	da 01       	movw	r26, r20
    1de2:	aa 0f       	add	r26, r26
    1de4:	bb 1f       	adc	r27, r27
    1de6:	aa 0f       	add	r26, r26
    1de8:	bb 1f       	adc	r27, r27
    1dea:	ab 5b       	subi	r26, 0xBB	; 187
    1dec:	bd 4f       	sbci	r27, 0xFD	; 253
    1dee:	12 96       	adiw	r26, 0x02	; 2
    1df0:	2d 91       	ld	r18, X+
    1df2:	3c 91       	ld	r19, X
    1df4:	13 97       	sbiw	r26, 0x03	; 3
    1df6:	2f 3f       	cpi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <pickup+0x3d8>
    1dfc:	72 c0       	rjmp	.+228    	; 0x1ee2 <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	8c 0f       	add	r24, r28
    1e04:	9d 1f       	adc	r25, r29
    1e06:	dc 01       	movw	r26, r24
    1e08:	aa 0f       	add	r26, r26
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	ab 5b       	subi	r26, 0xBB	; 187
    1e0e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e10:	8d 91       	ld	r24, X+
    1e12:	9c 91       	ld	r25, X
    1e14:	e8 17       	cp	r30, r24
    1e16:	f9 07       	cpc	r31, r25
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <pickup+0x3fc>
								pickNode(a1, a1);
    1e1a:	be 01       	movw	r22, r28
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	85 dd       	rcall	.-1270   	; 0x192a <pickNode>
    1e20:	60 c0       	rjmp	.+192    	; 0x1ee2 <pickup+0x4bc>
							else pickNode(a1, a2);
    1e22:	ce 01       	movw	r24, r28
    1e24:	82 dd       	rcall	.-1276   	; 0x192a <pickNode>
    1e26:	5d c0       	rjmp	.+186    	; 0x1ee2 <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1e28:	dc 01       	movw	r26, r24
    1e2a:	aa 0f       	add	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	a9 5a       	subi	r26, 0xA9	; 169
    1e30:	bd 4f       	sbci	r27, 0xFD	; 253
    1e32:	0d 90       	ld	r0, X+
    1e34:	bc 91       	ld	r27, X
    1e36:	a0 2d       	mov	r26, r0
    1e38:	2a 17       	cp	r18, r26
    1e3a:	3b 07       	cpc	r19, r27
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <pickup+0x41a>
    1e3e:	51 c0       	rjmp	.+162    	; 0x1ee2 <pickup+0x4bc>
    1e40:	2e 17       	cp	r18, r30
    1e42:	3f 07       	cpc	r19, r31
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <pickup+0x422>
    1e46:	4d c0       	rjmp	.+154    	; 0x1ee2 <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1e48:	fa 01       	movw	r30, r20
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	e2 5e       	subi	r30, 0xE2	; 226
    1e50:	fd 4f       	sbci	r31, 0xFD	; 253
    1e52:	20 81       	ld	r18, Z
    1e54:	31 81       	ldd	r19, Z+1	; 0x01
    1e56:	21 30       	cpi	r18, 0x01	; 1
    1e58:	31 05       	cpc	r19, r1
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <pickup+0x438>
    1e5c:	42 c0       	rjmp	.+132    	; 0x1ee2 <pickup+0x4bc>
    1e5e:	fa 01       	movw	r30, r20
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	eb 5b       	subi	r30, 0xBB	; 187
    1e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e6c:	20 81       	ld	r18, Z
    1e6e:	31 81       	ldd	r19, Z+1	; 0x01
    1e70:	a2 17       	cp	r26, r18
    1e72:	b3 07       	cpc	r27, r19
    1e74:	b1 f1       	breq	.+108    	; 0x1ee2 <pickup+0x4bc>
    1e76:	fa 01       	movw	r30, r20
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	eb 5b       	subi	r30, 0xBB	; 187
    1e82:	fd 4f       	sbci	r31, 0xFD	; 253
    1e84:	22 81       	ldd	r18, Z+2	; 0x02
    1e86:	33 81       	ldd	r19, Z+3	; 0x03
    1e88:	a2 17       	cp	r26, r18
    1e8a:	b3 07       	cpc	r27, r19
    1e8c:	51 f1       	breq	.+84     	; 0x1ee2 <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1e8e:	fc 01       	movw	r30, r24
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	ec 0f       	add	r30, r28
    1e96:	fd 1f       	adc	r31, r29
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	eb 5b       	subi	r30, 0xBB	; 187
    1e9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea0:	20 81       	ld	r18, Z
    1ea2:	31 81       	ldd	r19, Z+1	; 0x01
    1ea4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ea6:	ef ef       	ldi	r30, 0xFF	; 255
    1ea8:	3e 07       	cpc	r19, r30
    1eaa:	39 f0       	breq	.+14     	; 0x1eba <pickup+0x494>
    1eac:	a2 17       	cp	r26, r18
    1eae:	b3 07       	cpc	r27, r19
    1eb0:	21 f0       	breq	.+8      	; 0x1eba <pickup+0x494>
									pickNode(a1, a1);
    1eb2:	be 01       	movw	r22, r28
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	39 dd       	rcall	.-1422   	; 0x192a <pickNode>
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	86 0f       	add	r24, r22
    1ec0:	97 1f       	adc	r25, r23
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	eb 5b       	subi	r30, 0xBB	; 187
    1eca:	fd 4f       	sbci	r31, 0xFD	; 253
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed2:	2f ef       	ldi	r18, 0xFF	; 255
    1ed4:	92 07       	cpc	r25, r18
    1ed6:	29 f0       	breq	.+10     	; 0x1ee2 <pickup+0x4bc>
    1ed8:	a8 17       	cp	r26, r24
    1eda:	b9 07       	cpc	r27, r25
    1edc:	11 f0       	breq	.+4      	; 0x1ee2 <pickup+0x4bc>
									pickNode(a1, a2);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	24 dd       	rcall	.-1464   	; 0x192a <pickNode>
					}
				}
			}
		}
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	08 95       	ret

00001ef0 <drop>:

void drop(int side)
{
    1ef0:	cf 93       	push	r28
    1ef2:	c8 2f       	mov	r28, r24
	lower(side);//lower
    1ef4:	0e 94 88 05 	call	0xb10	; 0xb10 <lower>
    1ef8:	2f ef       	ldi	r18, 0xFF	; 255
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	9c e2       	ldi	r25, 0x2C	; 44
    1efe:	21 50       	subi	r18, 0x01	; 1
    1f00:	80 40       	sbci	r24, 0x00	; 0
    1f02:	90 40       	sbci	r25, 0x00	; 0
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <drop+0xe>
    1f06:	00 c0       	rjmp	.+0      	; 0x1f08 <drop+0x18>
    1f08:	00 00       	nop
	_delay_ms(1000);	
	open(side);
    1f0a:	8c 2f       	mov	r24, r28
    1f0c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <open>
    1f10:	2f ef       	ldi	r18, 0xFF	; 255
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	9c e2       	ldi	r25, 0x2C	; 44
    1f16:	21 50       	subi	r18, 0x01	; 1
    1f18:	80 40       	sbci	r24, 0x00	; 0
    1f1a:	90 40       	sbci	r25, 0x00	; 0
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <drop+0x26>
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <drop+0x30>
    1f20:	00 00       	nop
	_delay_ms(1000);
	elevate();//mid
    1f22:	0e 94 96 05 	call	0xb2c	; 0xb2c <elevate>
    1f26:	2f ef       	ldi	r18, 0xFF	; 255
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	9c e2       	ldi	r25, 0x2C	; 44
    1f2c:	21 50       	subi	r18, 0x01	; 1
    1f2e:	80 40       	sbci	r24, 0x00	; 0
    1f30:	90 40       	sbci	r25, 0x00	; 0
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <drop+0x3c>
    1f34:	00 c0       	rjmp	.+0      	; 0x1f36 <drop+0x46>
    1f36:	00 00       	nop
	_delay_ms(1000);
	
	armCount++;
    1f38:	80 91 06 02 	lds	r24, 0x0206
    1f3c:	90 91 07 02 	lds	r25, 0x0207
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	90 93 07 02 	sts	0x0207, r25
    1f46:	80 93 06 02 	sts	0x0206, r24
}
    1f4a:	cf 91       	pop	r28
    1f4c:	08 95       	ret

00001f4e <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1f58:	e0 91 41 02 	lds	r30, 0x0241
    1f5c:	f0 91 42 02 	lds	r31, 0x0242
    1f60:	ee 0f       	add	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	e6 0f       	add	r30, r22
    1f66:	f7 1f       	adc	r31, r23
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	eb 5b       	subi	r30, 0xBB	; 187
    1f6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f70:	8c 01       	movw	r16, r24
    1f72:	00 0f       	add	r16, r16
    1f74:	11 1f       	adc	r17, r17
    1f76:	05 59       	subi	r16, 0x95	; 149
    1f78:	1d 4f       	sbci	r17, 0xFD	; 253
    1f7a:	d8 01       	movw	r26, r16
    1f7c:	8d 91       	ld	r24, X+
    1f7e:	9c 91       	ld	r25, X
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
	position(armNo, side);
    1f84:	ce 01       	movw	r24, r28
    1f86:	bc db       	rcall	.-2184   	; 0x1700 <position>
	drop(armNo);
    1f88:	ce 01       	movw	r24, r28
    1f8a:	b2 df       	rcall	.-156    	; 0x1ef0 <drop>
	arm[armNo] = -1;
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	9f ef       	ldi	r25, 0xFF	; 255
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1f96:	80 91 10 02 	lds	r24, 0x0210
    1f9a:	90 91 11 02 	lds	r25, 0x0211
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	90 93 11 02 	sts	0x0211, r25
    1fa4:	80 93 10 02 	sts	0x0210, r24
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	08 95       	ret

00001fb2 <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1fb8:	fb 01       	movw	r30, r22
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e3 5c       	subi	r30, 0xC3	; 195
    1fc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	aa 0f       	add	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	a5 59       	subi	r26, 0x95	; 149
    1fca:	bd 4f       	sbci	r27, 0xFD	; 253
    1fcc:	8d 91       	ld	r24, X+
    1fce:	9c 91       	ld	r25, X
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1fd4:	c6 17       	cp	r28, r22
    1fd6:	d7 07       	cpc	r29, r23
    1fd8:	39 f4       	brne	.+14     	; 0x1fe8 <sortDrop+0x36>
    1fda:	80 91 00 02 	lds	r24, 0x0200
    1fde:	90 91 01 02 	lds	r25, 0x0201
    1fe2:	89 2b       	or	r24, r25
    1fe4:	51 f4       	brne	.+20     	; 0x1ffa <sortDrop+0x48>
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <sortDrop+0x42>
    1fe8:	80 91 00 02 	lds	r24, 0x0200
    1fec:	90 91 01 02 	lds	r25, 0x0201
    1ff0:	02 97       	sbiw	r24, 0x02	; 2
    1ff2:	19 f4       	brne	.+6      	; 0x1ffa <sortDrop+0x48>
		turn();
    1ff4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <turn>
    1ff8:	0e c0       	rjmp	.+28     	; 0x2016 <sortDrop+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    1ffa:	80 91 00 02 	lds	r24, 0x0200
    1ffe:	90 91 01 02 	lds	r25, 0x0201
    2002:	8d 7f       	andi	r24, 0xFD	; 253
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	39 f4       	brne	.+14     	; 0x2016 <sortDrop+0x64>
			if (armNo == 0)
    2008:	20 97       	sbiw	r28, 0x00	; 0
    200a:	19 f4       	brne	.+6      	; 0x2012 <sortDrop+0x60>
				turnLeft();
    200c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <turnLeft>
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <sortDrop+0x64>
			else turnRight();
    2012:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <turnRight>
	}
	back_mm(30);
    2016:	8e e1       	ldi	r24, 0x1E	; 30
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 b5 04 	call	0x96a	; 0x96a <back_mm>
	drop(armNo);
    201e:	ce 01       	movw	r24, r28
    2020:	67 df       	rcall	.-306    	; 0x1ef0 <drop>
	forward_mm(30);
    2022:	8e e1       	ldi	r24, 0x1E	; 30
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	arm[armNo] = -1;
    202a:	cc 0f       	add	r28, r28
    202c:	dd 1f       	adc	r29, r29
    202e:	c5 59       	subi	r28, 0x95	; 149
    2030:	dd 4f       	sbci	r29, 0xFD	; 253
    2032:	8f ef       	ldi	r24, 0xFF	; 255
    2034:	9f ef       	ldi	r25, 0xFF	; 255
    2036:	99 83       	std	Y+1, r25	; 0x01
    2038:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <dropPickup>:

void dropPickup(int a1)
{
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    2044:	9c 01       	movw	r18, r24
    2046:	2f 5f       	subi	r18, 0xFF	; 255
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	21 70       	andi	r18, 0x01	; 1
    204c:	30 78       	andi	r19, 0x80	; 128
    204e:	33 23       	and	r19, r19
    2050:	34 f4       	brge	.+12     	; 0x205e <dropPickup+0x1e>
    2052:	21 50       	subi	r18, 0x01	; 1
    2054:	31 09       	sbc	r19, r1
    2056:	2e 6f       	ori	r18, 0xFE	; 254
    2058:	3f 6f       	ori	r19, 0xFF	; 255
    205a:	2f 5f       	subi	r18, 0xFF	; 255
    205c:	3f 4f       	sbci	r19, 0xFF	; 255
    205e:	d2 2f       	mov	r29, r18
    2060:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    2062:	e0 91 41 02 	lds	r30, 0x0241
    2066:	f0 91 42 02 	lds	r31, 0x0242
    206a:	af 01       	movw	r20, r30
    206c:	44 0f       	add	r20, r20
    206e:	55 1f       	adc	r21, r21
    2070:	24 0f       	add	r18, r20
    2072:	35 1f       	adc	r19, r21
    2074:	d9 01       	movw	r26, r18
    2076:	aa 0f       	add	r26, r26
    2078:	bb 1f       	adc	r27, r27
    207a:	ab 5b       	subi	r26, 0xBB	; 187
    207c:	bd 4f       	sbci	r27, 0xFD	; 253
    207e:	2d 91       	ld	r18, X+
    2080:	3c 91       	ld	r19, X
    2082:	da 01       	movw	r26, r20
    2084:	a9 5a       	subi	r26, 0xA9	; 169
    2086:	bd 4f       	sbci	r27, 0xFD	; 253
    2088:	4d 91       	ld	r20, X+
    208a:	5c 91       	ld	r21, X
    208c:	24 17       	cp	r18, r20
    208e:	35 07       	cpc	r19, r21
    2090:	69 f0       	breq	.+26     	; 0x20ac <dropPickup+0x6c>
    2092:	a0 91 67 02 	lds	r26, 0x0267
    2096:	b0 91 68 02 	lds	r27, 0x0268
    209a:	aa 0f       	add	r26, r26
    209c:	bb 1f       	adc	r27, r27
    209e:	a9 5a       	subi	r26, 0xA9	; 169
    20a0:	bd 4f       	sbci	r27, 0xFD	; 253
    20a2:	6d 91       	ld	r22, X+
    20a4:	7c 91       	ld	r23, X
    20a6:	26 17       	cp	r18, r22
    20a8:	37 07       	cpc	r19, r23
    20aa:	a9 f0       	breq	.+42     	; 0x20d6 <dropPickup+0x96>
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	e8 0f       	add	r30, r24
    20b2:	f9 1f       	adc	r31, r25
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	eb 5b       	subi	r30, 0xBB	; 187
    20ba:	fd 4f       	sbci	r31, 0xFD	; 253
    20bc:	01 90       	ld	r0, Z+
    20be:	f0 81       	ld	r31, Z
    20c0:	e0 2d       	mov	r30, r0
    20c2:	4e 17       	cp	r20, r30
    20c4:	5f 07       	cpc	r21, r31
    20c6:	39 f0       	breq	.+14     	; 0x20d6 <dropPickup+0x96>
    20c8:	31 96       	adiw	r30, 0x01	; 1
    20ca:	29 f0       	breq	.+10     	; 0x20d6 <dropPickup+0x96>
		pickNode(a2, a1);
    20cc:	bc 01       	movw	r22, r24
    20ce:	8d 2f       	mov	r24, r29
    20d0:	9c 2f       	mov	r25, r28
    20d2:	2b dc       	rcall	.-1962   	; 0x192a <pickNode>
    20d4:	0b c0       	rjmp	.+22     	; 0x20ec <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    20d6:	24 17       	cp	r18, r20
    20d8:	35 07       	cpc	r19, r21
    20da:	41 f0       	breq	.+16     	; 0x20ec <dropPickup+0xac>
    20dc:	2f 3f       	cpi	r18, 0xFF	; 255
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	29 f0       	breq	.+10     	; 0x20ec <dropPickup+0xac>
		pickNode(a2, a2);
    20e2:	6d 2f       	mov	r22, r29
    20e4:	7c 2f       	mov	r23, r28
    20e6:	8d 2f       	mov	r24, r29
    20e8:	9c 2f       	mov	r25, r28
    20ea:	1f dc       	rcall	.-1986   	; 0x192a <pickNode>
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <canDrop>:

void canDrop()
{
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    20fa:	20 91 41 02 	lds	r18, 0x0241
    20fe:	30 91 42 02 	lds	r19, 0x0242
    2102:	22 30       	cpi	r18, 0x02	; 2
    2104:	31 05       	cpc	r19, r1
    2106:	30 f4       	brcc	.+12     	; 0x2114 <canDrop+0x22>
    2108:	80 91 00 02 	lds	r24, 0x0200
    210c:	90 91 01 02 	lds	r25, 0x0201
    2110:	02 97       	sbiw	r24, 0x02	; 2
    2112:	79 f0       	breq	.+30     	; 0x2132 <canDrop+0x40>
    2114:	c9 01       	movw	r24, r18
    2116:	02 97       	sbiw	r24, 0x02	; 2
    2118:	02 97       	sbiw	r24, 0x02	; 2
    211a:	80 f4       	brcc	.+32     	; 0x213c <canDrop+0x4a>
    211c:	80 91 00 02 	lds	r24, 0x0200
    2120:	90 91 01 02 	lds	r25, 0x0201
    2124:	89 2b       	or	r24, r25
    2126:	79 f0       	breq	.+30     	; 0x2146 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    2128:	01 e0       	ldi	r16, 0x01	; 1
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	c0 e0       	ldi	r28, 0x00	; 0
    212e:	d0 e0       	ldi	r29, 0x00	; 0
    2130:	0e c0       	rjmp	.+28     	; 0x214e <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2132:	00 e0       	ldi	r16, 0x00	; 0
    2134:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2136:	c1 e0       	ldi	r28, 0x01	; 1
    2138:	d0 e0       	ldi	r29, 0x00	; 0
    213a:	09 c0       	rjmp	.+18     	; 0x214e <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    213c:	01 e0       	ldi	r16, 0x01	; 1
    213e:	10 e0       	ldi	r17, 0x00	; 0
    2140:	c0 e0       	ldi	r28, 0x00	; 0
    2142:	d0 e0       	ldi	r29, 0x00	; 0
    2144:	04 c0       	rjmp	.+8      	; 0x214e <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2146:	00 e0       	ldi	r16, 0x00	; 0
    2148:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    214a:	c1 e0       	ldi	r28, 0x01	; 1
    214c:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    214e:	40 91 06 02 	lds	r20, 0x0206
    2152:	50 91 07 02 	lds	r21, 0x0207
    2156:	42 30       	cpi	r20, 0x02	; 2
    2158:	51 05       	cpc	r21, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <canDrop+0x6c>
    215c:	3c c1       	rjmp	.+632    	; 0x23d6 <__stack+0x1d7>
    215e:	f9 01       	movw	r30, r18
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	e9 5a       	subi	r30, 0xA9	; 169
    2166:	fd 4f       	sbci	r31, 0xFD	; 253
    2168:	40 81       	ld	r20, Z
    216a:	51 81       	ldd	r21, Z+1	; 0x01
    216c:	80 91 6b 02 	lds	r24, 0x026B
    2170:	90 91 6c 02 	lds	r25, 0x026C
    2174:	84 17       	cp	r24, r20
    2176:	95 07       	cpc	r25, r21
    2178:	41 f0       	breq	.+16     	; 0x218a <canDrop+0x98>
    217a:	80 91 6d 02 	lds	r24, 0x026D
    217e:	90 91 6e 02 	lds	r25, 0x026E
    2182:	48 17       	cp	r20, r24
    2184:	59 07       	cpc	r21, r25
    2186:	09 f0       	breq	.+2      	; 0x218a <canDrop+0x98>
    2188:	26 c1       	rjmp	.+588    	; 0x23d6 <__stack+0x1d7>
		return;
	else
	{
		if (visited[ct] == 0)
    218a:	f9 01       	movw	r30, r18
    218c:	ee 0f       	add	r30, r30
    218e:	ff 1f       	adc	r31, r31
    2190:	e2 5e       	subi	r30, 0xE2	; 226
    2192:	fd 4f       	sbci	r31, 0xFD	; 253
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	89 2b       	or	r24, r25
    219a:	11 f4       	brne	.+4      	; 0x21a0 <canDrop+0xae>
		{
			terminalCheck1();
    219c:	a2 d8       	rcall	.-3772   	; 0x12e2 <terminalCheck1>
			terminalCheck2();
    219e:	69 d9       	rcall	.-3374   	; 0x1472 <terminalCheck2>
		}
		if (armCount == 0)
    21a0:	80 91 06 02 	lds	r24, 0x0206
    21a4:	90 91 07 02 	lds	r25, 0x0207
    21a8:	89 2b       	or	r24, r25
    21aa:	09 f0       	breq	.+2      	; 0x21ae <canDrop+0xbc>
    21ac:	48 c0       	rjmp	.+144    	; 0x223e <__stack+0x3f>
		{
			if (arm[arm0] == color[ct])
    21ae:	20 91 41 02 	lds	r18, 0x0241
    21b2:	30 91 42 02 	lds	r19, 0x0242
    21b6:	f9 01       	movw	r30, r18
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	e9 5a       	subi	r30, 0xA9	; 169
    21be:	fd 4f       	sbci	r31, 0xFD	; 253
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	e5 59       	subi	r30, 0x95	; 149
    21cc:	fd 4f       	sbci	r31, 0xFD	; 253
    21ce:	40 81       	ld	r20, Z
    21d0:	51 81       	ldd	r21, Z+1	; 0x01
    21d2:	48 17       	cp	r20, r24
    21d4:	59 07       	cpc	r21, r25
    21d6:	a9 f4       	brne	.+42     	; 0x2202 <__stack+0x3>
				if (term[ct][0] == -1)
    21d8:	f9 01       	movw	r30, r18
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	eb 5b       	subi	r30, 0xBB	; 187
    21e4:	fd 4f       	sbci	r31, 0xFD	; 253
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	29 f4       	brne	.+10     	; 0x21f8 <canDrop+0x106>
					nodeDrop(arm0, 0);
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	ce 01       	movw	r24, r28
    21f4:	ac de       	rcall	.-680    	; 0x1f4e <nodeDrop>
    21f6:	23 c0       	rjmp	.+70     	; 0x223e <__stack+0x3f>
				else nodeDrop(arm0, 1);
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	ce 01       	movw	r24, r28
    21fe:	a7 de       	rcall	.-690    	; 0x1f4e <nodeDrop>
    2200:	1e c0       	rjmp	.+60     	; 0x223e <__stack+0x3f>
			else if (arm[arm1] == color[ct])
    2202:	f8 01       	movw	r30, r16
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	e5 59       	subi	r30, 0x95	; 149
    220a:	fd 4f       	sbci	r31, 0xFD	; 253
    220c:	40 81       	ld	r20, Z
    220e:	51 81       	ldd	r21, Z+1	; 0x01
    2210:	84 17       	cp	r24, r20
    2212:	95 07       	cpc	r25, r21
    2214:	a1 f4       	brne	.+40     	; 0x223e <__stack+0x3f>
				if (term[ct][0] != -1)
    2216:	f9 01       	movw	r30, r18
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	eb 5b       	subi	r30, 0xBB	; 187
    2222:	fd 4f       	sbci	r31, 0xFD	; 253
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	29 f0       	breq	.+10     	; 0x2236 <__stack+0x37>
					nodeDrop(arm1, 1);
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	c8 01       	movw	r24, r16
    2232:	8d de       	rcall	.-742    	; 0x1f4e <nodeDrop>
    2234:	04 c0       	rjmp	.+8      	; 0x223e <__stack+0x3f>
				else nodeDrop(arm1, 0);
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	c8 01       	movw	r24, r16
    223c:	88 de       	rcall	.-752    	; 0x1f4e <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    223e:	20 91 41 02 	lds	r18, 0x0241
    2242:	30 91 42 02 	lds	r19, 0x0242
    2246:	f9 01       	movw	r30, r18
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	e9 5a       	subi	r30, 0xA9	; 169
    224e:	fd 4f       	sbci	r31, 0xFD	; 253
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	40 91 6b 02 	lds	r20, 0x026B
    2258:	50 91 6c 02 	lds	r21, 0x026C
    225c:	48 17       	cp	r20, r24
    225e:	59 07       	cpc	r21, r25
    2260:	41 f0       	breq	.+16     	; 0x2272 <__stack+0x73>
    2262:	40 91 6d 02 	lds	r20, 0x026D
    2266:	50 91 6e 02 	lds	r21, 0x026E
    226a:	84 17       	cp	r24, r20
    226c:	95 07       	cpc	r25, r21
    226e:	09 f0       	breq	.+2      	; 0x2272 <__stack+0x73>
    2270:	b2 c0       	rjmp	.+356    	; 0x23d6 <__stack+0x1d7>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2272:	f9 01       	movw	r30, r18
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	eb 5b       	subi	r30, 0xBB	; 187
    227e:	fd 4f       	sbci	r31, 0xFD	; 253
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	09 f4       	brne	.+2      	; 0x228a <__stack+0x8b>
    2288:	45 c0       	rjmp	.+138    	; 0x2314 <__stack+0x115>
    228a:	f9 01       	movw	r30, r18
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	eb 5b       	subi	r30, 0xBB	; 187
    2296:	fd 4f       	sbci	r31, 0xFD	; 253
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	c9 f0       	breq	.+50     	; 0x22d2 <__stack+0xd3>
				if (visited[ct] == 0)
    22a0:	f9 01       	movw	r30, r18
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	e2 5e       	subi	r30, 0xE2	; 226
    22a8:	fd 4f       	sbci	r31, 0xFD	; 253
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	89 2b       	or	r24, r25
    22b0:	81 f4       	brne	.+32     	; 0x22d2 <__stack+0xd3>
					terminalCheck2();
    22b2:	df d8       	rcall	.-3650   	; 0x1472 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    22b4:	20 91 41 02 	lds	r18, 0x0241
    22b8:	30 91 42 02 	lds	r19, 0x0242
    22bc:	f9 01       	movw	r30, r18
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	eb 5b       	subi	r30, 0xBB	; 187
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	09 f1       	breq	.+66     	; 0x2314 <__stack+0x115>
    22d2:	f9 01       	movw	r30, r18
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	eb 5b       	subi	r30, 0xBB	; 187
    22de:	fd 4f       	sbci	r31, 0xFD	; 253
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	b1 f0       	breq	.+44     	; 0x2314 <__stack+0x115>
			{
				if (arm[arm0] == color[ct])
    22e8:	de 01       	movw	r26, r28
    22ea:	aa 0f       	add	r26, r26
    22ec:	bb 1f       	adc	r27, r27
    22ee:	a5 59       	subi	r26, 0x95	; 149
    22f0:	bd 4f       	sbci	r27, 0xFD	; 253
    22f2:	f9 01       	movw	r30, r18
    22f4:	ee 0f       	add	r30, r30
    22f6:	ff 1f       	adc	r31, r31
    22f8:	e9 5a       	subi	r30, 0xA9	; 169
    22fa:	fd 4f       	sbci	r31, 0xFD	; 253
    22fc:	4d 91       	ld	r20, X+
    22fe:	5c 91       	ld	r21, X
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	48 17       	cp	r20, r24
    2306:	59 07       	cpc	r21, r25
    2308:	19 f4       	brne	.+6      	; 0x2310 <__stack+0x111>
					dropPickup(arm0);
    230a:	ce 01       	movw	r24, r28
    230c:	99 de       	rcall	.-718    	; 0x2040 <dropPickup>
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <__stack+0x115>
				else dropPickup(arm1);
    2310:	c8 01       	movw	r24, r16
    2312:	96 de       	rcall	.-724    	; 0x2040 <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    2314:	80 91 41 02 	lds	r24, 0x0241
    2318:	90 91 42 02 	lds	r25, 0x0242
    231c:	fc 01       	movw	r30, r24
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	e9 5a       	subi	r30, 0xA9	; 169
    2324:	fd 4f       	sbci	r31, 0xFD	; 253
    2326:	20 81       	ld	r18, Z
    2328:	31 81       	ldd	r19, Z+1	; 0x01
    232a:	fe 01       	movw	r30, r28
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	e5 59       	subi	r30, 0x95	; 149
    2332:	fd 4f       	sbci	r31, 0xFD	; 253
    2334:	40 81       	ld	r20, Z
    2336:	51 81       	ldd	r21, Z+1	; 0x01
    2338:	42 17       	cp	r20, r18
    233a:	53 07       	cpc	r21, r19
    233c:	11 f5       	brne	.+68     	; 0x2382 <__stack+0x183>
    233e:	fc 01       	movw	r30, r24
    2340:	ee 0f       	add	r30, r30
    2342:	ff 1f       	adc	r31, r31
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	eb 5b       	subi	r30, 0xBB	; 187
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	40 81       	ld	r20, Z
    234e:	51 81       	ldd	r21, Z+1	; 0x01
    2350:	4f 3f       	cpi	r20, 0xFF	; 255
    2352:	5f 4f       	sbci	r21, 0xFF	; 255
    2354:	29 f4       	brne	.+10     	; 0x2360 <__stack+0x161>
				nodeDrop(arm0, 0);
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	ce 01       	movw	r24, r28
    235c:	f8 dd       	rcall	.-1040   	; 0x1f4e <nodeDrop>
    235e:	3b c0       	rjmp	.+118    	; 0x23d6 <__stack+0x1d7>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    2360:	fc 01       	movw	r30, r24
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	eb 5b       	subi	r30, 0xBB	; 187
    236c:	fd 4f       	sbci	r31, 0xFD	; 253
    236e:	42 81       	ldd	r20, Z+2	; 0x02
    2370:	53 81       	ldd	r21, Z+3	; 0x03
    2372:	4f 3f       	cpi	r20, 0xFF	; 255
    2374:	5f 4f       	sbci	r21, 0xFF	; 255
    2376:	29 f4       	brne	.+10     	; 0x2382 <__stack+0x183>
				nodeDrop(arm0, 1);
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	ce 01       	movw	r24, r28
    237e:	e7 dd       	rcall	.-1074   	; 0x1f4e <nodeDrop>
    2380:	2a c0       	rjmp	.+84     	; 0x23d6 <__stack+0x1d7>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2382:	f8 01       	movw	r30, r16
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	e5 59       	subi	r30, 0x95	; 149
    238a:	fd 4f       	sbci	r31, 0xFD	; 253
    238c:	40 81       	ld	r20, Z
    238e:	51 81       	ldd	r21, Z+1	; 0x01
    2390:	24 17       	cp	r18, r20
    2392:	35 07       	cpc	r19, r21
    2394:	01 f5       	brne	.+64     	; 0x23d6 <__stack+0x1d7>
    2396:	fc 01       	movw	r30, r24
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	eb 5b       	subi	r30, 0xBB	; 187
    23a2:	fd 4f       	sbci	r31, 0xFD	; 253
    23a4:	20 81       	ld	r18, Z
    23a6:	31 81       	ldd	r19, Z+1	; 0x01
    23a8:	2f 3f       	cpi	r18, 0xFF	; 255
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	29 f4       	brne	.+10     	; 0x23b8 <__stack+0x1b9>
				nodeDrop(arm1, 0);
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	c8 01       	movw	r24, r16
    23b4:	cc dd       	rcall	.-1128   	; 0x1f4e <nodeDrop>
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <__stack+0x1d7>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    23b8:	fc 01       	movw	r30, r24
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	eb 5b       	subi	r30, 0xBB	; 187
    23c4:	fd 4f       	sbci	r31, 0xFD	; 253
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	21 f4       	brne	.+8      	; 0x23d6 <__stack+0x1d7>
				nodeDrop(arm1, 1);
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	c8 01       	movw	r24, r16
    23d4:	bc dd       	rcall	.-1160   	; 0x1f4e <nodeDrop>

		}
	}
}
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <newSort>:

void newSort()
{
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
	int t1, t2, a2 = -2, a1 = -2;
	if (arm[1] != -1)
    23e8:	20 91 6d 02 	lds	r18, 0x026D
    23ec:	30 91 6e 02 	lds	r19, 0x026E
    23f0:	2f 3f       	cpi	r18, 0xFF	; 255
    23f2:	1f ef       	ldi	r17, 0xFF	; 255
    23f4:	31 07       	cpc	r19, r17
    23f6:	41 f0       	breq	.+16     	; 0x2408 <newSort+0x28>
	a2 = indicator[arm[1]];
    23f8:	f9 01       	movw	r30, r18
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	e1 5a       	subi	r30, 0xA1	; 161
    2400:	fd 4f       	sbci	r31, 0xFD	; 253
    2402:	c0 81       	ld	r28, Z
    2404:	d1 81       	ldd	r29, Z+1	; 0x01
    2406:	02 c0       	rjmp	.+4      	; 0x240c <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    2408:	ce ef       	ldi	r28, 0xFE	; 254
    240a:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
    240c:	e0 91 6b 02 	lds	r30, 0x026B
    2410:	f0 91 6c 02 	lds	r31, 0x026C
    2414:	ef 3f       	cpi	r30, 0xFF	; 255
    2416:	4f ef       	ldi	r20, 0xFF	; 255
    2418:	f4 07       	cpc	r31, r20
    241a:	09 f4       	brne	.+2      	; 0x241e <newSort+0x3e>
    241c:	7f c1       	rjmp	.+766    	; 0x271c <newSort+0x33c>
	a1 = indicator[arm[0]];
    241e:	df 01       	movw	r26, r30
    2420:	aa 0f       	add	r26, r26
    2422:	bb 1f       	adc	r27, r27
    2424:	a1 5a       	subi	r26, 0xA1	; 161
    2426:	bd 4f       	sbci	r27, 0xFD	; 253
    2428:	4d 91       	ld	r20, X+
    242a:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    242c:	80 91 41 02 	lds	r24, 0x0241
    2430:	90 91 42 02 	lds	r25, 0x0242
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	81 70       	andi	r24, 0x01	; 1
    2438:	90 78       	andi	r25, 0x80	; 128
    243a:	99 23       	and	r25, r25
    243c:	24 f4       	brge	.+8      	; 0x2446 <newSort+0x66>
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	8e 6f       	ori	r24, 0xFE	; 254
    2442:	9f 6f       	ori	r25, 0xFF	; 255
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2448:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    244a:	d0 93 42 02 	sts	0x0242, r29
    244e:	c0 93 41 02 	sts	0x0241, r28
		if (arm[1] == arm[0] && (visited[a2] == 0 || (term[a2][0] != -1 && term[a2][1] != -1)))
    2452:	2e 17       	cp	r18, r30
    2454:	3f 07       	cpc	r19, r31
    2456:	61 f5       	brne	.+88     	; 0x24b0 <newSort+0xd0>
    2458:	de 01       	movw	r26, r28
    245a:	aa 0f       	add	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	a2 5e       	subi	r26, 0xE2	; 226
    2460:	bd 4f       	sbci	r27, 0xFD	; 253
    2462:	0d 90       	ld	r0, X+
    2464:	bc 91       	ld	r27, X
    2466:	a0 2d       	mov	r26, r0
    2468:	ab 2b       	or	r26, r27
    246a:	c9 f0       	breq	.+50     	; 0x249e <newSort+0xbe>
    246c:	de 01       	movw	r26, r28
    246e:	aa 0f       	add	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	aa 0f       	add	r26, r26
    2474:	bb 1f       	adc	r27, r27
    2476:	ab 5b       	subi	r26, 0xBB	; 187
    2478:	bd 4f       	sbci	r27, 0xFD	; 253
    247a:	0d 90       	ld	r0, X+
    247c:	bc 91       	ld	r27, X
    247e:	a0 2d       	mov	r26, r0
    2480:	11 96       	adiw	r26, 0x01	; 1
    2482:	b1 f0       	breq	.+44     	; 0x24b0 <newSort+0xd0>
    2484:	de 01       	movw	r26, r28
    2486:	aa 0f       	add	r26, r26
    2488:	bb 1f       	adc	r27, r27
    248a:	aa 0f       	add	r26, r26
    248c:	bb 1f       	adc	r27, r27
    248e:	ab 5b       	subi	r26, 0xBB	; 187
    2490:	bd 4f       	sbci	r27, 0xFD	; 253
    2492:	12 96       	adiw	r26, 0x02	; 2
    2494:	0d 90       	ld	r0, X+
    2496:	bc 91       	ld	r27, X
    2498:	a0 2d       	mov	r26, r0
    249a:	11 96       	adiw	r26, 0x01	; 1
    249c:	49 f0       	breq	.+18     	; 0x24b0 <newSort+0xd0>
		{
			if (a2 == 0 || a2 == 3)
    249e:	20 97       	sbiw	r28, 0x00	; 0
    24a0:	19 f0       	breq	.+6      	; 0x24a8 <newSort+0xc8>
    24a2:	23 97       	sbiw	r28, 0x03	; 3
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <newSort+0xc8>
    24a6:	28 c1       	rjmp	.+592    	; 0x26f8 <newSort+0x318>
			sortDrop(0, t1);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	82 dd       	rcall	.-1276   	; 0x1fb2 <sortDrop>
    24ae:	24 c1       	rjmp	.+584    	; 0x26f8 <newSort+0x318>
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    24b0:	2f 3f       	cpi	r18, 0xFF	; 255
    24b2:	af ef       	ldi	r26, 0xFF	; 255
    24b4:	3a 07       	cpc	r19, r26
    24b6:	c1 f1       	breq	.+112    	; 0x2528 <newSort+0x148>
    24b8:	de 01       	movw	r26, r28
    24ba:	aa 0f       	add	r26, r26
    24bc:	bb 1f       	adc	r27, r27
    24be:	aa 0f       	add	r26, r26
    24c0:	bb 1f       	adc	r27, r27
    24c2:	ab 5b       	subi	r26, 0xBB	; 187
    24c4:	bd 4f       	sbci	r27, 0xFD	; 253
    24c6:	0d 90       	ld	r0, X+
    24c8:	bc 91       	ld	r27, X
    24ca:	a0 2d       	mov	r26, r0
    24cc:	11 96       	adiw	r26, 0x01	; 1
    24ce:	51 f0       	breq	.+20     	; 0x24e4 <newSort+0x104>
    24d0:	cc 0f       	add	r28, r28
    24d2:	dd 1f       	adc	r29, r29
    24d4:	cc 0f       	add	r28, r28
    24d6:	dd 1f       	adc	r29, r29
    24d8:	cb 5b       	subi	r28, 0xBB	; 187
    24da:	dd 4f       	sbci	r29, 0xFD	; 253
    24dc:	aa 81       	ldd	r26, Y+2	; 0x02
    24de:	bb 81       	ldd	r27, Y+3	; 0x03
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	11 f5       	brne	.+68     	; 0x2528 <newSort+0x148>
		{
			if (arm[0] == -1)
    24e4:	31 96       	adiw	r30, 0x01	; 1
    24e6:	09 f0       	breq	.+2      	; 0x24ea <newSort+0x10a>
    24e8:	07 c1       	rjmp	.+526    	; 0x26f8 <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    24ea:	9b 01       	movw	r18, r22
    24ec:	22 0f       	add	r18, r18
    24ee:	33 1f       	adc	r19, r19
    24f0:	f9 01       	movw	r30, r18
    24f2:	e3 5c       	subi	r30, 0xC3	; 195
    24f4:	fd 4f       	sbci	r31, 0xFD	; 253
    24f6:	40 81       	ld	r20, Z
    24f8:	51 81       	ldd	r21, Z+1	; 0x01
    24fa:	f9 01       	movw	r30, r18
    24fc:	e9 5a       	subi	r30, 0xA9	; 169
    24fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2500:	20 81       	ld	r18, Z
    2502:	31 81       	ldd	r19, Z+1	; 0x01
    2504:	42 17       	cp	r20, r18
    2506:	53 07       	cpc	r21, r19
    2508:	59 f0       	breq	.+22     	; 0x2520 <newSort+0x140>
    250a:	fc 01       	movw	r30, r24
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	e9 5a       	subi	r30, 0xA9	; 169
    2512:	fd 4f       	sbci	r31, 0xFD	; 253
    2514:	80 81       	ld	r24, Z
    2516:	91 81       	ldd	r25, Z+1	; 0x01
    2518:	48 17       	cp	r20, r24
    251a:	59 07       	cpc	r21, r25
    251c:	09 f0       	breq	.+2      	; 0x2520 <newSort+0x140>
    251e:	ec c0       	rjmp	.+472    	; 0x26f8 <newSort+0x318>
				pickSort(0, t1);
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	36 da       	rcall	.-2964   	; 0x1992 <pickSort>
    2526:	e8 c0       	rjmp	.+464    	; 0x26f8 <newSort+0x318>
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    2528:	ef 3f       	cpi	r30, 0xFF	; 255
    252a:	af ef       	ldi	r26, 0xFF	; 255
    252c:	fa 07       	cpc	r31, r26
    252e:	09 f4       	brne	.+2      	; 0x2532 <newSort+0x152>
    2530:	51 c0       	rjmp	.+162    	; 0x25d4 <newSort+0x1f4>
    2532:	da 01       	movw	r26, r20
    2534:	aa 0f       	add	r26, r26
    2536:	bb 1f       	adc	r27, r27
    2538:	aa 0f       	add	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	ab 5b       	subi	r26, 0xBB	; 187
    253e:	bd 4f       	sbci	r27, 0xFD	; 253
    2540:	0d 90       	ld	r0, X+
    2542:	bc 91       	ld	r27, X
    2544:	a0 2d       	mov	r26, r0
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	09 f4       	brne	.+2      	; 0x254c <newSort+0x16c>
    254a:	0a c1       	rjmp	.+532    	; 0x2760 <newSort+0x380>
    254c:	da 01       	movw	r26, r20
    254e:	aa 0f       	add	r26, r26
    2550:	bb 1f       	adc	r27, r27
    2552:	aa 0f       	add	r26, r26
    2554:	bb 1f       	adc	r27, r27
    2556:	ab 5b       	subi	r26, 0xBB	; 187
    2558:	bd 4f       	sbci	r27, 0xFD	; 253
    255a:	12 96       	adiw	r26, 0x02	; 2
    255c:	0d 90       	ld	r0, X+
    255e:	bc 91       	ld	r27, X
    2560:	a0 2d       	mov	r26, r0
    2562:	11 96       	adiw	r26, 0x01	; 1
    2564:	b9 f5       	brne	.+110    	; 0x25d4 <newSort+0x1f4>
    2566:	ea c0       	rjmp	.+468    	; 0x273c <newSort+0x35c>
		{
			ct = a1;
			if (term[a1][0] == -1 || term[a1][1] == -1)
			{
				if (arm[1] == -1)
    2568:	2f 3f       	cpi	r18, 0xFF	; 255
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	09 f0       	breq	.+2      	; 0x2570 <newSort+0x190>
    256e:	c4 c0       	rjmp	.+392    	; 0x26f8 <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    2570:	9b 01       	movw	r18, r22
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	f9 01       	movw	r30, r18
    2578:	e3 5c       	subi	r30, 0xC3	; 195
    257a:	fd 4f       	sbci	r31, 0xFD	; 253
    257c:	40 81       	ld	r20, Z
    257e:	51 81       	ldd	r21, Z+1	; 0x01
    2580:	f9 01       	movw	r30, r18
    2582:	e9 5a       	subi	r30, 0xA9	; 169
    2584:	fd 4f       	sbci	r31, 0xFD	; 253
    2586:	20 81       	ld	r18, Z
    2588:	31 81       	ldd	r19, Z+1	; 0x01
    258a:	42 17       	cp	r20, r18
    258c:	53 07       	cpc	r21, r19
    258e:	09 f0       	breq	.+2      	; 0x2592 <newSort+0x1b2>
    2590:	b3 c0       	rjmp	.+358    	; 0x26f8 <newSort+0x318>
    2592:	fc 01       	movw	r30, r24
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	e9 5a       	subi	r30, 0xA9	; 169
    259a:	fd 4f       	sbci	r31, 0xFD	; 253
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	48 17       	cp	r20, r24
    25a2:	59 07       	cpc	r21, r25
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <newSort+0x1c8>
    25a6:	a8 c0       	rjmp	.+336    	; 0x26f8 <newSort+0x318>
					pickSort(0, t1);
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	f2 d9       	rcall	.-3100   	; 0x1992 <pickSort>
    25ae:	a4 c0       	rjmp	.+328    	; 0x26f8 <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[1] != -1)
    25b0:	fb 01       	movw	r30, r22
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	e3 5c       	subi	r30, 0xC3	; 195
    25b8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <newSort+0x1e4>
    25c2:	9a c0       	rjmp	.+308    	; 0x26f8 <newSort+0x318>
    25c4:	2f 3f       	cpi	r18, 0xFF	; 255
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	09 f4       	brne	.+2      	; 0x25cc <newSort+0x1ec>
    25ca:	96 c0       	rjmp	.+300    	; 0x26f8 <newSort+0x318>
			sortDrop(0, t1);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	f0 dc       	rcall	.-1568   	; 0x1fb2 <sortDrop>
    25d2:	92 c0       	rjmp	.+292    	; 0x26f8 <newSort+0x318>
		}
		else	if (arm[1] != -1 && (sort[t1] == -1 && arm[0] != -1))
    25d4:	2f 3f       	cpi	r18, 0xFF	; 255
    25d6:	1f ef       	ldi	r17, 0xFF	; 255
    25d8:	31 07       	cpc	r19, r17
    25da:	a1 f0       	breq	.+40     	; 0x2604 <newSort+0x224>
    25dc:	db 01       	movw	r26, r22
    25de:	aa 0f       	add	r26, r26
    25e0:	bb 1f       	adc	r27, r27
    25e2:	a3 5c       	subi	r26, 0xC3	; 195
    25e4:	bd 4f       	sbci	r27, 0xFD	; 253
    25e6:	8d 91       	ld	r24, X+
    25e8:	9c 91       	ld	r25, X
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	31 f4       	brne	.+12     	; 0x25fa <newSort+0x21a>
    25ee:	31 96       	adiw	r30, 0x01	; 1
    25f0:	21 f0       	breq	.+8      	; 0x25fa <newSort+0x21a>
		sortDrop(0, t1);
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	dd dc       	rcall	.-1606   	; 0x1fb2 <sortDrop>
    25f8:	7f c0       	rjmp	.+254    	; 0x26f8 <newSort+0x318>
		else if (arm[1] != -1)
		ct = arm[1];
    25fa:	30 93 42 02 	sts	0x0242, r19
    25fe:	20 93 41 02 	sts	0x0241, r18
    2602:	7a c0       	rjmp	.+244    	; 0x26f8 <newSort+0x318>
		else ct = arm[0];
    2604:	f0 93 42 02 	sts	0x0242, r31
    2608:	e0 93 41 02 	sts	0x0241, r30
    260c:	75 c0       	rjmp	.+234    	; 0x26f8 <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    260e:	a8 01       	movw	r20, r16
    2610:	44 0f       	add	r20, r20
    2612:	55 1f       	adc	r21, r21
    2614:	fa 01       	movw	r30, r20
    2616:	e3 5c       	subi	r30, 0xC3	; 195
    2618:	fd 4f       	sbci	r31, 0xFD	; 253
    261a:	20 81       	ld	r18, Z
    261c:	31 81       	ldd	r19, Z+1	; 0x01
    261e:	fa 01       	movw	r30, r20
    2620:	e9 5a       	subi	r30, 0xA9	; 169
    2622:	fd 4f       	sbci	r31, 0xFD	; 253
    2624:	40 81       	ld	r20, Z
    2626:	51 81       	ldd	r21, Z+1	; 0x01
    2628:	24 17       	cp	r18, r20
    262a:	35 07       	cpc	r19, r21
    262c:	51 f0       	breq	.+20     	; 0x2642 <newSort+0x262>
    262e:	fc 01       	movw	r30, r24
    2630:	ee 0f       	add	r30, r30
    2632:	ff 1f       	adc	r31, r31
    2634:	e9 5a       	subi	r30, 0xA9	; 169
    2636:	fd 4f       	sbci	r31, 0xFD	; 253
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	26 17       	cp	r18, r22
    263e:	37 07       	cpc	r19, r23
    2640:	81 f4       	brne	.+32     	; 0x2662 <newSort+0x282>
    2642:	2f 3f       	cpi	r18, 0xFF	; 255
    2644:	af ef       	ldi	r26, 0xFF	; 255
    2646:	3a 07       	cpc	r19, r26
    2648:	31 f1       	breq	.+76     	; 0x2696 <newSort+0x2b6>
		ct = indicator[sort[t1]];
    264a:	f9 01       	movw	r30, r18
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	e1 5a       	subi	r30, 0xA1	; 161
    2652:	fd 4f       	sbci	r31, 0xFD	; 253
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	90 93 42 02 	sts	0x0242, r25
    265c:	80 93 41 02 	sts	0x0241, r24
    2660:	4b c0       	rjmp	.+150    	; 0x26f8 <newSort+0x318>
		else if (sort[t1] != -1)
    2662:	2f 3f       	cpi	r18, 0xFF	; 255
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	b9 f0       	breq	.+46     	; 0x2696 <newSort+0x2b6>
		{
			pickSort(1, t1);
    2668:	b8 01       	movw	r22, r16
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	91 d9       	rcall	.-3294   	; 0x1992 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    2670:	0f 5f       	subi	r16, 0xFF	; 255
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	01 70       	andi	r16, 0x01	; 1
    2676:	10 78       	andi	r17, 0x80	; 128
    2678:	11 23       	and	r17, r17
    267a:	34 f4       	brge	.+12     	; 0x2688 <newSort+0x2a8>
    267c:	01 50       	subi	r16, 0x01	; 1
    267e:	11 09       	sbc	r17, r1
    2680:	0e 6f       	ori	r16, 0xFE	; 254
    2682:	1f 6f       	ori	r17, 0xFF	; 255
    2684:	0f 5f       	subi	r16, 0xFF	; 255
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	0c 5f       	subi	r16, 0xFC	; 252
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	10 93 42 02 	sts	0x0242, r17
    2690:	00 93 41 02 	sts	0x0241, r16
    2694:	31 c0       	rjmp	.+98     	; 0x26f8 <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    2696:	f8 01       	movw	r30, r16
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	e2 5e       	subi	r30, 0xE2	; 226
    269e:	fd 4f       	sbci	r31, 0xFD	; 253
    26a0:	20 81       	ld	r18, Z
    26a2:	31 81       	ldd	r19, Z+1	; 0x01
    26a4:	21 30       	cpi	r18, 0x01	; 1
    26a6:	31 05       	cpc	r19, r1
    26a8:	19 f5       	brne	.+70     	; 0x26f0 <newSort+0x310>
    26aa:	f8 01       	movw	r30, r16
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	eb 5b       	subi	r30, 0xBB	; 187
    26b6:	fd 4f       	sbci	r31, 0xFD	; 253
    26b8:	20 81       	ld	r18, Z
    26ba:	31 81       	ldd	r19, Z+1	; 0x01
    26bc:	42 17       	cp	r20, r18
    26be:	53 07       	cpc	r21, r19
    26c0:	19 f0       	breq	.+6      	; 0x26c8 <newSort+0x2e8>
    26c2:	2f 3f       	cpi	r18, 0xFF	; 255
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	a1 f4       	brne	.+40     	; 0x26f0 <newSort+0x310>
    26c8:	f8 01       	movw	r30, r16
    26ca:	ee 0f       	add	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	eb 5b       	subi	r30, 0xBB	; 187
    26d4:	fd 4f       	sbci	r31, 0xFD	; 253
    26d6:	22 81       	ldd	r18, Z+2	; 0x02
    26d8:	33 81       	ldd	r19, Z+3	; 0x03
    26da:	42 17       	cp	r20, r18
    26dc:	53 07       	cpc	r21, r19
    26de:	19 f0       	breq	.+6      	; 0x26e6 <newSort+0x306>
    26e0:	2f 3f       	cpi	r18, 0xFF	; 255
    26e2:	3f 4f       	sbci	r19, 0xFF	; 255
    26e4:	29 f4       	brne	.+10     	; 0x26f0 <newSort+0x310>
		ct = t2;
    26e6:	90 93 42 02 	sts	0x0242, r25
    26ea:	80 93 41 02 	sts	0x0241, r24
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <newSort+0x318>
		else ct = t1;
    26f0:	10 93 42 02 	sts	0x0242, r17
    26f4:	00 93 41 02 	sts	0x0241, r16
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    26f8:	80 91 41 02 	lds	r24, 0x0241
    26fc:	90 91 42 02 	lds	r25, 0x0242
    2700:	02 96       	adiw	r24, 0x02	; 2
    2702:	83 70       	andi	r24, 0x03	; 3
    2704:	90 78       	andi	r25, 0x80	; 128
    2706:	99 23       	and	r25, r25
    2708:	24 f4       	brge	.+8      	; 0x2712 <newSort+0x332>
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	8c 6f       	ori	r24, 0xFC	; 252
    270e:	9f 6f       	ori	r25, 0xFF	; 255
    2710:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2712:	90 93 68 02 	sts	0x0268, r25
    2716:	80 93 67 02 	sts	0x0267, r24
    271a:	2e c0       	rjmp	.+92     	; 0x2778 <newSort+0x398>
	if (arm[1] != -1)
	a2 = indicator[arm[1]];
	if (arm[0] != -1)
	a1 = indicator[arm[0]];

	t1 = (ct + 1) % 2;
    271c:	80 91 41 02 	lds	r24, 0x0241
    2720:	90 91 42 02 	lds	r25, 0x0242
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	62 e0       	ldi	r22, 0x02	; 2
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	ab d5       	rcall	.+2902   	; 0x3282 <__divmodhi4>
    272c:	8c 01       	movw	r16, r24
    272e:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2730:	02 96       	adiw	r24, 0x02	; 2
	if (arm[1] != -1 || arm[0] != -1)
    2732:	2f 3f       	cpi	r18, 0xFF	; 255
    2734:	af ef       	ldi	r26, 0xFF	; 255
    2736:	3a 07       	cpc	r19, r26
    2738:	c1 f4       	brne	.+48     	; 0x276a <newSort+0x38a>
    273a:	69 cf       	rjmp	.-302    	; 0x260e <newSort+0x22e>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    273c:	50 93 42 02 	sts	0x0242, r21
    2740:	40 93 41 02 	sts	0x0241, r20
			if (term[a1][0] == -1 || term[a1][1] == -1)
    2744:	fa 01       	movw	r30, r20
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	eb 5b       	subi	r30, 0xBB	; 187
    2750:	fd 4f       	sbci	r31, 0xFD	; 253
    2752:	42 81       	ldd	r20, Z+2	; 0x02
    2754:	53 81       	ldd	r21, Z+3	; 0x03
    2756:	4f 3f       	cpi	r20, 0xFF	; 255
    2758:	5f 4f       	sbci	r21, 0xFF	; 255
    275a:	09 f0       	breq	.+2      	; 0x275e <newSort+0x37e>
    275c:	29 cf       	rjmp	.-430    	; 0x25b0 <newSort+0x1d0>
    275e:	04 cf       	rjmp	.-504    	; 0x2568 <newSort+0x188>
				pickSort(0, t1);
			}
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
		{
			ct = a1;
    2760:	50 93 42 02 	sts	0x0242, r21
    2764:	40 93 41 02 	sts	0x0241, r20
    2768:	ff ce       	rjmp	.-514    	; 0x2568 <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[1] != -1 || arm[0] != -1)
	{
		ct = a2;
    276a:	d0 93 42 02 	sts	0x0242, r29
    276e:	c0 93 41 02 	sts	0x0241, r28
	}
}

void newSort()
{
	int t1, t2, a2 = -2, a1 = -2;
    2772:	4e ef       	ldi	r20, 0xFE	; 254
    2774:	5f ef       	ldi	r21, 0xFF	; 255
    2776:	9c ce       	rjmp	.-712    	; 0x24b0 <newSort+0xd0>
		ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	08 95       	ret

00002782 <sortCheck>:
void sortCheck()
{
    2782:	8f 92       	push	r8
    2784:	9f 92       	push	r9
    2786:	af 92       	push	r10
    2788:	bf 92       	push	r11
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
	forward_mm(50);
    279a:	82 e3       	ldi	r24, 0x32	; 50
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    27a2:	40 91 41 02 	lds	r20, 0x0241
    27a6:	50 91 42 02 	lds	r21, 0x0242
    27aa:	42 30       	cpi	r20, 0x02	; 2
    27ac:	51 05       	cpc	r21, r1
    27ae:	30 f4       	brcc	.+12     	; 0x27bc <sortCheck+0x3a>
    27b0:	80 91 00 02 	lds	r24, 0x0200
    27b4:	90 91 01 02 	lds	r25, 0x0201
    27b8:	02 97       	sbiw	r24, 0x02	; 2
    27ba:	79 f0       	breq	.+30     	; 0x27da <sortCheck+0x58>
    27bc:	ca 01       	movw	r24, r20
    27be:	02 97       	sbiw	r24, 0x02	; 2
    27c0:	02 97       	sbiw	r24, 0x02	; 2
    27c2:	80 f4       	brcc	.+32     	; 0x27e4 <sortCheck+0x62>
    27c4:	80 91 00 02 	lds	r24, 0x0200
    27c8:	90 91 01 02 	lds	r25, 0x0201
    27cc:	89 2b       	or	r24, r25
    27ce:	79 f0       	breq	.+30     	; 0x27ee <sortCheck+0x6c>
}
void sortCheck()
{
	forward_mm(50);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    27d0:	01 e0       	ldi	r16, 0x01	; 1
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    27d4:	c0 e0       	ldi	r28, 0x00	; 0
    27d6:	d0 e0       	ldi	r29, 0x00	; 0
    27d8:	0e c0       	rjmp	.+28     	; 0x27f6 <sortCheck+0x74>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    27da:	00 e0       	ldi	r16, 0x00	; 0
    27dc:	10 e0       	ldi	r17, 0x00	; 0
	forward_mm(50);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    27de:	c1 e0       	ldi	r28, 0x01	; 1
    27e0:	d0 e0       	ldi	r29, 0x00	; 0
    27e2:	09 c0       	rjmp	.+18     	; 0x27f6 <sortCheck+0x74>
}
void sortCheck()
{
	forward_mm(50);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    27e4:	01 e0       	ldi	r16, 0x01	; 1
    27e6:	10 e0       	ldi	r17, 0x00	; 0
    27e8:	c0 e0       	ldi	r28, 0x00	; 0
    27ea:	d0 e0       	ldi	r29, 0x00	; 0
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <sortCheck+0x74>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    27ee:	00 e0       	ldi	r16, 0x00	; 0
    27f0:	10 e0       	ldi	r17, 0x00	; 0
	forward_mm(50);
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    27f2:	c1 e0       	ldi	r28, 0x01	; 1
    27f4:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    27f6:	9a 01       	movw	r18, r20
    27f8:	21 70       	andi	r18, 0x01	; 1
    27fa:	30 78       	andi	r19, 0x80	; 128
    27fc:	33 23       	and	r19, r19
    27fe:	34 f4       	brge	.+12     	; 0x280c <sortCheck+0x8a>
    2800:	21 50       	subi	r18, 0x01	; 1
    2802:	31 09       	sbc	r19, r1
    2804:	2e 6f       	ori	r18, 0xFE	; 254
    2806:	3f 6f       	ori	r19, 0xFF	; 255
    2808:	2f 5f       	subi	r18, 0xFF	; 255
    280a:	3f 4f       	sbci	r19, 0xFF	; 255
    280c:	b2 2e       	mov	r11, r18
    280e:	a3 2e       	mov	r10, r19
    2810:	f9 01       	movw	r30, r18
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	e3 5c       	subi	r30, 0xC3	; 195
    2818:	fd 4f       	sbci	r31, 0xFD	; 253
    281a:	20 81       	ld	r18, Z
    281c:	31 81       	ldd	r19, Z+1	; 0x01
    281e:	fa 01       	movw	r30, r20
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	e9 5a       	subi	r30, 0xA9	; 169
    2826:	fd 4f       	sbci	r31, 0xFD	; 253
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	28 17       	cp	r18, r24
    282e:	39 07       	cpc	r19, r25
    2830:	79 f0       	breq	.+30     	; 0x2850 <sortCheck+0xce>
    2832:	80 91 67 02 	lds	r24, 0x0267
    2836:	90 91 68 02 	lds	r25, 0x0268
    283a:	fc 01       	movw	r30, r24
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	e9 5a       	subi	r30, 0xA9	; 169
    2842:	fd 4f       	sbci	r31, 0xFD	; 253
    2844:	40 81       	ld	r20, Z
    2846:	51 81       	ldd	r21, Z+1	; 0x01
    2848:	24 17       	cp	r18, r20
    284a:	35 07       	cpc	r19, r21
    284c:	09 f0       	breq	.+2      	; 0x2850 <sortCheck+0xce>
    284e:	a6 c0       	rjmp	.+332    	; 0x299c <sortCheck+0x21a>
	{
		if (armCount>0)
    2850:	80 91 06 02 	lds	r24, 0x0206
    2854:	90 91 07 02 	lds	r25, 0x0207
    2858:	18 16       	cp	r1, r24
    285a:	19 06       	cpc	r1, r25
    285c:	0c f0       	brlt	.+2      	; 0x2860 <sortCheck+0xde>
    285e:	95 c0       	rjmp	.+298    	; 0x298a <sortCheck+0x208>
		{
			ct = indicator[sort[ct % 2]];
    2860:	f9 01       	movw	r30, r18
    2862:	ee 0f       	add	r30, r30
    2864:	ff 1f       	adc	r31, r31
    2866:	e1 5a       	subi	r30, 0xA1	; 161
    2868:	fd 4f       	sbci	r31, 0xFD	; 253
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	70 93 42 02 	sts	0x0242, r23
    2872:	60 93 41 02 	sts	0x0241, r22
			if (arm[arm0] == -1)
    2876:	fe 01       	movw	r30, r28
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	e5 59       	subi	r30, 0x95	; 149
    287e:	fd 4f       	sbci	r31, 0xFD	; 253
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	01 96       	adiw	r24, 0x01	; 1
    2886:	69 f4       	brne	.+26     	; 0x28a2 <sortCheck+0x120>
				pickSort(arm0, ct % 2);
    2888:	61 70       	andi	r22, 0x01	; 1
    288a:	70 78       	andi	r23, 0x80	; 128
    288c:	77 23       	and	r23, r23
    288e:	34 f4       	brge	.+12     	; 0x289c <sortCheck+0x11a>
    2890:	61 50       	subi	r22, 0x01	; 1
    2892:	71 09       	sbc	r23, r1
    2894:	6e 6f       	ori	r22, 0xFE	; 254
    2896:	7f 6f       	ori	r23, 0xFF	; 255
    2898:	6f 5f       	subi	r22, 0xFF	; 255
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	ce 01       	movw	r24, r28
    289e:	79 d8       	rcall	.-3854   	; 0x1992 <pickSort>
    28a0:	15 c0       	rjmp	.+42     	; 0x28cc <sortCheck+0x14a>
			else if (arm[arm1] == -1)
    28a2:	f8 01       	movw	r30, r16
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	e5 59       	subi	r30, 0x95	; 149
    28aa:	fd 4f       	sbci	r31, 0xFD	; 253
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	61 f4       	brne	.+24     	; 0x28cc <sortCheck+0x14a>
				pickSort(arm1, ct % 2);
    28b4:	61 70       	andi	r22, 0x01	; 1
    28b6:	70 78       	andi	r23, 0x80	; 128
    28b8:	77 23       	and	r23, r23
    28ba:	34 f4       	brge	.+12     	; 0x28c8 <sortCheck+0x146>
    28bc:	61 50       	subi	r22, 0x01	; 1
    28be:	71 09       	sbc	r23, r1
    28c0:	6e 6f       	ori	r22, 0xFE	; 254
    28c2:	7f 6f       	ori	r23, 0xFF	; 255
    28c4:	6f 5f       	subi	r22, 0xFF	; 255
    28c6:	7f 4f       	sbci	r23, 0xFF	; 255
    28c8:	c8 01       	movw	r24, r16
    28ca:	63 d8       	rcall	.-3898   	; 0x1992 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    28cc:	80 91 06 02 	lds	r24, 0x0206
    28d0:	90 91 07 02 	lds	r25, 0x0207
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	09 f4       	brne	.+2      	; 0x28da <sortCheck+0x158>
    28d8:	6d c1       	rjmp	.+730    	; 0x2bb4 <sortCheck+0x432>
    28da:	80 91 41 02 	lds	r24, 0x0241
    28de:	90 91 42 02 	lds	r25, 0x0242
    28e2:	fc 01       	movw	r30, r24
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	ee 0f       	add	r30, r30
    28ea:	ff 1f       	adc	r31, r31
    28ec:	eb 5b       	subi	r30, 0xBB	; 187
    28ee:	fd 4f       	sbci	r31, 0xFD	; 253
    28f0:	20 81       	ld	r18, Z
    28f2:	31 81       	ldd	r19, Z+1	; 0x01
    28f4:	2f 3f       	cpi	r18, 0xFF	; 255
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	09 f4       	brne	.+2      	; 0x28fc <sortCheck+0x17a>
    28fa:	5c c1       	rjmp	.+696    	; 0x2bb4 <sortCheck+0x432>
    28fc:	fc 01       	movw	r30, r24
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	eb 5b       	subi	r30, 0xBB	; 187
    2908:	fd 4f       	sbci	r31, 0xFD	; 253
    290a:	22 81       	ldd	r18, Z+2	; 0x02
    290c:	33 81       	ldd	r19, Z+3	; 0x03
    290e:	2f 3f       	cpi	r18, 0xFF	; 255
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	09 f4       	brne	.+2      	; 0x2916 <sortCheck+0x194>
    2914:	4f c1       	rjmp	.+670    	; 0x2bb4 <sortCheck+0x432>
    2916:	9c 01       	movw	r18, r24
    2918:	21 70       	andi	r18, 0x01	; 1
    291a:	30 78       	andi	r19, 0x80	; 128
    291c:	33 23       	and	r19, r19
    291e:	34 f4       	brge	.+12     	; 0x292c <sortCheck+0x1aa>
    2920:	21 50       	subi	r18, 0x01	; 1
    2922:	31 09       	sbc	r19, r1
    2924:	2e 6f       	ori	r18, 0xFE	; 254
    2926:	3f 6f       	ori	r19, 0xFF	; 255
    2928:	2f 5f       	subi	r18, 0xFF	; 255
    292a:	3f 4f       	sbci	r19, 0xFF	; 255
    292c:	62 2f       	mov	r22, r18
    292e:	73 2f       	mov	r23, r19
    2930:	f9 01       	movw	r30, r18
    2932:	ee 0f       	add	r30, r30
    2934:	ff 1f       	adc	r31, r31
    2936:	e3 5c       	subi	r30, 0xC3	; 195
    2938:	fd 4f       	sbci	r31, 0xFD	; 253
    293a:	20 81       	ld	r18, Z
    293c:	31 81       	ldd	r19, Z+1	; 0x01
    293e:	2f 3f       	cpi	r18, 0xFF	; 255
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	09 f0       	breq	.+2      	; 0x2946 <sortCheck+0x1c4>
    2944:	37 c1       	rjmp	.+622    	; 0x2bb4 <sortCheck+0x432>
			{
				if (arm[arm0] == color[ct])
    2946:	fc 01       	movw	r30, r24
    2948:	ee 0f       	add	r30, r30
    294a:	ff 1f       	adc	r31, r31
    294c:	e9 5a       	subi	r30, 0xA9	; 169
    294e:	fd 4f       	sbci	r31, 0xFD	; 253
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	fe 01       	movw	r30, r28
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	e5 59       	subi	r30, 0x95	; 149
    295c:	fd 4f       	sbci	r31, 0xFD	; 253
    295e:	20 81       	ld	r18, Z
    2960:	31 81       	ldd	r19, Z+1	; 0x01
    2962:	28 17       	cp	r18, r24
    2964:	39 07       	cpc	r19, r25
    2966:	19 f4       	brne	.+6      	; 0x296e <sortCheck+0x1ec>
					sortDrop(arm1, ct % 2);
    2968:	c8 01       	movw	r24, r16
    296a:	23 db       	rcall	.-2490   	; 0x1fb2 <sortDrop>
    296c:	23 c1       	rjmp	.+582    	; 0x2bb4 <sortCheck+0x432>
				else if (arm[arm1] == color[ct])
    296e:	f8 01       	movw	r30, r16
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	e5 59       	subi	r30, 0x95	; 149
    2976:	fd 4f       	sbci	r31, 0xFD	; 253
    2978:	20 81       	ld	r18, Z
    297a:	31 81       	ldd	r19, Z+1	; 0x01
    297c:	82 17       	cp	r24, r18
    297e:	93 07       	cpc	r25, r19
    2980:	09 f0       	breq	.+2      	; 0x2984 <sortCheck+0x202>
    2982:	18 c1       	rjmp	.+560    	; 0x2bb4 <sortCheck+0x432>
					sortDrop(arm0, ct % 2);
    2984:	ce 01       	movw	r24, r28
    2986:	15 db       	rcall	.-2518   	; 0x1fb2 <sortDrop>
    2988:	15 c1       	rjmp	.+554    	; 0x2bb4 <sortCheck+0x432>
			}
		}
		else ct = adj;
    298a:	80 91 67 02 	lds	r24, 0x0267
    298e:	90 91 68 02 	lds	r25, 0x0268
    2992:	90 93 42 02 	sts	0x0242, r25
    2996:	80 93 41 02 	sts	0x0241, r24
    299a:	0c c1       	rjmp	.+536    	; 0x2bb4 <sortCheck+0x432>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    299c:	fe 01       	movw	r30, r28
    299e:	ee 0f       	add	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	e5 59       	subi	r30, 0x95	; 149
    29a4:	fd 4f       	sbci	r31, 0xFD	; 253
    29a6:	01 90       	ld	r0, Z+
    29a8:	f0 81       	ld	r31, Z
    29aa:	e0 2d       	mov	r30, r0
    29ac:	4e 17       	cp	r20, r30
    29ae:	5f 07       	cpc	r21, r31
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <sortCheck+0x232>
    29b2:	8f c0       	rjmp	.+286    	; 0x2ad2 <sortCheck+0x350>
    29b4:	d8 01       	movw	r26, r16
    29b6:	aa 0f       	add	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	a5 59       	subi	r26, 0x95	; 149
    29bc:	bd 4f       	sbci	r27, 0xFD	; 253
    29be:	8d 90       	ld	r8, X+
    29c0:	9c 90       	ld	r9, X
    29c2:	48 15       	cp	r20, r8
    29c4:	59 05       	cpc	r21, r9
    29c6:	09 f4       	brne	.+2      	; 0x29ca <sortCheck+0x248>
    29c8:	84 c0       	rjmp	.+264    	; 0x2ad2 <sortCheck+0x350>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    29ca:	e0 90 06 02 	lds	r14, 0x0206
    29ce:	f0 90 07 02 	lds	r15, 0x0207
    29d2:	e1 14       	cp	r14, r1
    29d4:	f1 04       	cpc	r15, r1
    29d6:	09 f4       	brne	.+2      	; 0x29da <sortCheck+0x258>
    29d8:	4e c0       	rjmp	.+156    	; 0x2a76 <sortCheck+0x2f4>
    29da:	b1 e0       	ldi	r27, 0x01	; 1
    29dc:	eb 16       	cp	r14, r27
    29de:	f1 04       	cpc	r15, r1
    29e0:	29 f4       	brne	.+10     	; 0x29ec <sortCheck+0x26a>
    29e2:	2f 3f       	cpi	r18, 0xFF	; 255
    29e4:	6f ef       	ldi	r22, 0xFF	; 255
    29e6:	36 07       	cpc	r19, r22
    29e8:	b1 f5       	brne	.+108    	; 0x2a56 <sortCheck+0x2d4>
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <sortCheck+0x27c>
    29ec:	67 01       	movw	r12, r14
    29ee:	71 e0       	ldi	r23, 0x01	; 1
    29f0:	c7 1a       	sub	r12, r23
    29f2:	d1 08       	sbc	r13, r1
    29f4:	a2 e0       	ldi	r26, 0x02	; 2
    29f6:	ca 16       	cp	r12, r26
    29f8:	d1 04       	cpc	r13, r1
    29fa:	08 f0       	brcs	.+2      	; 0x29fe <sortCheck+0x27c>
    29fc:	65 c0       	rjmp	.+202    	; 0x2ac8 <sortCheck+0x346>
    29fe:	6c 01       	movw	r12, r24
    2a00:	cc 0c       	add	r12, r12
    2a02:	dd 1c       	adc	r13, r13
    2a04:	cc 0c       	add	r12, r12
    2a06:	dd 1c       	adc	r13, r13
    2a08:	b6 01       	movw	r22, r12
    2a0a:	6b 5b       	subi	r22, 0xBB	; 187
    2a0c:	7d 4f       	sbci	r23, 0xFD	; 253
    2a0e:	db 01       	movw	r26, r22
    2a10:	cd 90       	ld	r12, X+
    2a12:	dc 90       	ld	r13, X
    2a14:	4c 15       	cp	r20, r12
    2a16:	5d 05       	cpc	r21, r13
    2a18:	21 f0       	breq	.+8      	; 0x2a22 <sortCheck+0x2a0>
    2a1a:	cd 20       	and	r12, r13
    2a1c:	c0 94       	com	r12
    2a1e:	09 f0       	breq	.+2      	; 0x2a22 <sortCheck+0x2a0>
    2a20:	53 c0       	rjmp	.+166    	; 0x2ac8 <sortCheck+0x346>
    2a22:	6c 01       	movw	r12, r24
    2a24:	cc 0c       	add	r12, r12
    2a26:	dd 1c       	adc	r13, r13
    2a28:	cc 0c       	add	r12, r12
    2a2a:	dd 1c       	adc	r13, r13
    2a2c:	b6 01       	movw	r22, r12
    2a2e:	6b 5b       	subi	r22, 0xBB	; 187
    2a30:	7d 4f       	sbci	r23, 0xFD	; 253
    2a32:	db 01       	movw	r26, r22
    2a34:	12 96       	adiw	r26, 0x02	; 2
    2a36:	cd 90       	ld	r12, X+
    2a38:	dc 90       	ld	r13, X
    2a3a:	13 97       	sbiw	r26, 0x03	; 3
    2a3c:	4c 15       	cp	r20, r12
    2a3e:	5d 05       	cpc	r21, r13
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <sortCheck+0x2c8>
    2a42:	cd 20       	and	r12, r13
    2a44:	c0 94       	com	r12
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <sortCheck+0x2c8>
    2a48:	3f c0       	rjmp	.+126    	; 0x2ac8 <sortCheck+0x346>
		{
			if (armCount>0)
    2a4a:	1e 14       	cp	r1, r14
    2a4c:	1f 04       	cpc	r1, r15
    2a4e:	9c f4       	brge	.+38     	; 0x2a76 <sortCheck+0x2f4>
			{
				if (sort[ct % 2] != -1)
    2a50:	2f 3f       	cpi	r18, 0xFF	; 255
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	81 f0       	breq	.+32     	; 0x2a76 <sortCheck+0x2f4>
					if (arm[arm0] == -1)
    2a56:	31 96       	adiw	r30, 0x01	; 1
    2a58:	31 f4       	brne	.+12     	; 0x2a66 <sortCheck+0x2e4>
						pickSort(arm0, ct % 2);
    2a5a:	6b 2d       	mov	r22, r11
    2a5c:	7a 2d       	mov	r23, r10
    2a5e:	ce 01       	movw	r24, r28
    2a60:	0e 94 c9 0c 	call	0x1992	; 0x1992 <pickSort>
    2a64:	08 c0       	rjmp	.+16     	; 0x2a76 <sortCheck+0x2f4>
					else if (arm[arm1] == -1)
    2a66:	89 20       	and	r8, r9
    2a68:	80 94       	com	r8
    2a6a:	29 f4       	brne	.+10     	; 0x2a76 <sortCheck+0x2f4>
						pickSort(arm1, ct % 2);
    2a6c:	6b 2d       	mov	r22, r11
    2a6e:	7a 2d       	mov	r23, r10
    2a70:	c8 01       	movw	r24, r16
    2a72:	0e 94 c9 0c 	call	0x1992	; 0x1992 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    2a76:	80 91 41 02 	lds	r24, 0x0241
    2a7a:	90 91 42 02 	lds	r25, 0x0242
    2a7e:	bc 01       	movw	r22, r24
    2a80:	6f 5f       	subi	r22, 0xFF	; 255
    2a82:	7f 4f       	sbci	r23, 0xFF	; 255
    2a84:	61 70       	andi	r22, 0x01	; 1
    2a86:	70 78       	andi	r23, 0x80	; 128
    2a88:	77 23       	and	r23, r23
    2a8a:	34 f4       	brge	.+12     	; 0x2a98 <sortCheck+0x316>
    2a8c:	61 50       	subi	r22, 0x01	; 1
    2a8e:	71 09       	sbc	r23, r1
    2a90:	6e 6f       	ori	r22, 0xFE	; 254
    2a92:	7f 6f       	ori	r23, 0xFF	; 255
    2a94:	6f 5f       	subi	r22, 0xFF	; 255
    2a96:	7f 4f       	sbci	r23, 0xFF	; 255
    2a98:	6c 5f       	subi	r22, 0xFC	; 252
    2a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9c:	81 70       	andi	r24, 0x01	; 1
    2a9e:	90 78       	andi	r25, 0x80	; 128
    2aa0:	99 23       	and	r25, r25
    2aa2:	24 f4       	brge	.+8      	; 0x2aac <sortCheck+0x32a>
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	8e 6f       	ori	r24, 0xFE	; 254
    2aa8:	9f 6f       	ori	r25, 0xFF	; 255
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	04 96       	adiw	r24, 0x04	; 4
    2aae:	0e 94 e7 08 	call	0x11ce	; 0x11ce <traverseToSort>
			newSort();
    2ab2:	96 dc       	rcall	.-1748   	; 0x23e0 <newSort>
			if (ct == 4 || ct == 5)
    2ab4:	80 91 41 02 	lds	r24, 0x0241
    2ab8:	90 91 42 02 	lds	r25, 0x0242
    2abc:	04 97       	sbiw	r24, 0x04	; 4
    2abe:	02 97       	sbiw	r24, 0x02	; 2
    2ac0:	08 f0       	brcs	.+2      	; 0x2ac4 <sortCheck+0x342>
    2ac2:	89 c0       	rjmp	.+274    	; 0x2bd6 <sortCheck+0x454>
				newSort();
    2ac4:	8d dc       	rcall	.-1766   	; 0x23e0 <newSort>
    2ac6:	87 c0       	rjmp	.+270    	; 0x2bd6 <sortCheck+0x454>
			return;
		}
		else ct = adj;
    2ac8:	90 93 42 02 	sts	0x0242, r25
    2acc:	80 93 41 02 	sts	0x0241, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2ad0:	71 c0       	rjmp	.+226    	; 0x2bb4 <sortCheck+0x432>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2ad2:	a0 91 06 02 	lds	r26, 0x0206
    2ad6:	b0 91 07 02 	lds	r27, 0x0207
    2ada:	10 97       	sbiw	r26, 0x00	; 0
    2adc:	c1 f5       	brne	.+112    	; 0x2b4e <sortCheck+0x3cc>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	aa 0f       	add	r26, r26
    2ae2:	bb 1f       	adc	r27, r27
    2ae4:	a2 5e       	subi	r26, 0xE2	; 226
    2ae6:	bd 4f       	sbci	r27, 0xFD	; 253
    2ae8:	0d 90       	ld	r0, X+
    2aea:	bc 91       	ld	r27, X
    2aec:	a0 2d       	mov	r26, r0
    2aee:	a1 30       	cpi	r26, 0x01	; 1
    2af0:	b1 05       	cpc	r27, r1
    2af2:	d9 f4       	brne	.+54     	; 0x2b2a <sortCheck+0x3a8>
    2af4:	dc 01       	movw	r26, r24
    2af6:	aa 0f       	add	r26, r26
    2af8:	bb 1f       	adc	r27, r27
    2afa:	aa 0f       	add	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	ab 5b       	subi	r26, 0xBB	; 187
    2b00:	bd 4f       	sbci	r27, 0xFD	; 253
    2b02:	0d 90       	ld	r0, X+
    2b04:	bc 91       	ld	r27, X
    2b06:	a0 2d       	mov	r26, r0
    2b08:	11 96       	adiw	r26, 0x01	; 1
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <sortCheck+0x38c>
    2b0c:	4b c0       	rjmp	.+150    	; 0x2ba4 <sortCheck+0x422>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	aa 0f       	add	r26, r26
    2b12:	bb 1f       	adc	r27, r27
    2b14:	aa 0f       	add	r26, r26
    2b16:	bb 1f       	adc	r27, r27
    2b18:	ab 5b       	subi	r26, 0xBB	; 187
    2b1a:	bd 4f       	sbci	r27, 0xFD	; 253
    2b1c:	12 96       	adiw	r26, 0x02	; 2
    2b1e:	8d 91       	ld	r24, X+
    2b20:	9c 91       	ld	r25, X
    2b22:	13 97       	sbiw	r26, 0x03	; 3
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	19 f4       	brne	.+6      	; 0x2b2e <sortCheck+0x3ac>
    2b28:	3d c0       	rjmp	.+122    	; 0x2ba4 <sortCheck+0x422>
    2b2a:	ab 2b       	or	r26, r27
    2b2c:	d9 f5       	brne	.+118    	; 0x2ba4 <sortCheck+0x422>
    2b2e:	2f 3f       	cpi	r18, 0xFF	; 255
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	c1 f5       	brne	.+112    	; 0x2ba4 <sortCheck+0x422>
			if (arm[arm0] == color[adj])
    2b34:	4e 17       	cp	r20, r30
    2b36:	5f 07       	cpc	r21, r31
    2b38:	29 f4       	brne	.+10     	; 0x2b44 <sortCheck+0x3c2>
				sortDrop(arm1, ct % 2);
    2b3a:	6b 2d       	mov	r22, r11
    2b3c:	7a 2d       	mov	r23, r10
    2b3e:	c8 01       	movw	r24, r16
    2b40:	38 da       	rcall	.-2960   	; 0x1fb2 <sortDrop>
    2b42:	30 c0       	rjmp	.+96     	; 0x2ba4 <sortCheck+0x422>
			else sortDrop(arm0, ct % 2);
    2b44:	6b 2d       	mov	r22, r11
    2b46:	7a 2d       	mov	r23, r10
    2b48:	ce 01       	movw	r24, r28
    2b4a:	33 da       	rcall	.-2970   	; 0x1fb2 <sortDrop>
    2b4c:	2b c0       	rjmp	.+86     	; 0x2ba4 <sortCheck+0x422>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2b4e:	11 97       	sbiw	r26, 0x01	; 1
    2b50:	49 f5       	brne	.+82     	; 0x2ba4 <sortCheck+0x422>
    2b52:	dc 01       	movw	r26, r24
    2b54:	aa 0f       	add	r26, r26
    2b56:	bb 1f       	adc	r27, r27
    2b58:	aa 0f       	add	r26, r26
    2b5a:	bb 1f       	adc	r27, r27
    2b5c:	ab 5b       	subi	r26, 0xBB	; 187
    2b5e:	bd 4f       	sbci	r27, 0xFD	; 253
    2b60:	4d 91       	ld	r20, X+
    2b62:	5c 91       	ld	r21, X
    2b64:	4f 3f       	cpi	r20, 0xFF	; 255
    2b66:	5f 4f       	sbci	r21, 0xFF	; 255
    2b68:	69 f0       	breq	.+26     	; 0x2b84 <sortCheck+0x402>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	aa 0f       	add	r26, r26
    2b6e:	bb 1f       	adc	r27, r27
    2b70:	aa 0f       	add	r26, r26
    2b72:	bb 1f       	adc	r27, r27
    2b74:	ab 5b       	subi	r26, 0xBB	; 187
    2b76:	bd 4f       	sbci	r27, 0xFD	; 253
    2b78:	12 96       	adiw	r26, 0x02	; 2
    2b7a:	8d 91       	ld	r24, X+
    2b7c:	9c 91       	ld	r25, X
    2b7e:	13 97       	sbiw	r26, 0x03	; 3
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	81 f4       	brne	.+32     	; 0x2ba4 <sortCheck+0x422>
    2b84:	2f 3f       	cpi	r18, 0xFF	; 255
    2b86:	3f 4f       	sbci	r19, 0xFF	; 255
    2b88:	69 f0       	breq	.+26     	; 0x2ba4 <sortCheck+0x422>
			if (arm[arm0] == -1)
    2b8a:	31 96       	adiw	r30, 0x01	; 1
    2b8c:	31 f4       	brne	.+12     	; 0x2b9a <sortCheck+0x418>
				pickSort(arm0, ct % 2);
    2b8e:	6b 2d       	mov	r22, r11
    2b90:	7a 2d       	mov	r23, r10
    2b92:	ce 01       	movw	r24, r28
    2b94:	0e 94 c9 0c 	call	0x1992	; 0x1992 <pickSort>
    2b98:	05 c0       	rjmp	.+10     	; 0x2ba4 <sortCheck+0x422>
			else	pickSort(arm1, ct % 2);
    2b9a:	6b 2d       	mov	r22, r11
    2b9c:	7a 2d       	mov	r23, r10
    2b9e:	c8 01       	movw	r24, r16
    2ba0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <pickSort>
			ct = adj;
    2ba4:	80 91 67 02 	lds	r24, 0x0267
    2ba8:	90 91 68 02 	lds	r25, 0x0268
    2bac:	90 93 42 02 	sts	0x0242, r25
    2bb0:	80 93 41 02 	sts	0x0241, r24
	}
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    2bb4:	80 91 41 02 	lds	r24, 0x0241
    2bb8:	90 91 42 02 	lds	r25, 0x0242
    2bbc:	02 96       	adiw	r24, 0x02	; 2
    2bbe:	83 70       	andi	r24, 0x03	; 3
    2bc0:	90 78       	andi	r25, 0x80	; 128
    2bc2:	99 23       	and	r25, r25
    2bc4:	24 f4       	brge	.+8      	; 0x2bce <sortCheck+0x44c>
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	8c 6f       	ori	r24, 0xFC	; 252
    2bca:	9f 6f       	ori	r25, 0xFF	; 255
    2bcc:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2bce:	90 93 68 02 	sts	0x0268, r25
    2bd2:	80 93 67 02 	sts	0x0267, r24
}
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	df 90       	pop	r13
    2be4:	cf 90       	pop	r12
    2be6:	bf 90       	pop	r11
    2be8:	af 90       	pop	r10
    2bea:	9f 90       	pop	r9
    2bec:	8f 90       	pop	r8
    2bee:	08 95       	ret

00002bf0 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2bf0:	80 91 45 02 	lds	r24, 0x0245
    2bf4:	90 91 46 02 	lds	r25, 0x0246
    2bf8:	20 91 57 02 	lds	r18, 0x0257
    2bfc:	30 91 58 02 	lds	r19, 0x0258
    2c00:	82 17       	cp	r24, r18
    2c02:	93 07       	cpc	r25, r19
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <predict+0x18>
    2c06:	5f c0       	rjmp	.+190    	; 0x2cc6 <predict+0xd6>
    2c08:	20 91 47 02 	lds	r18, 0x0247
    2c0c:	30 91 48 02 	lds	r19, 0x0248
    2c10:	82 17       	cp	r24, r18
    2c12:	93 07       	cpc	r25, r19
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <predict+0x28>
    2c16:	57 c0       	rjmp	.+174    	; 0x2cc6 <predict+0xd6>
    2c18:	80 91 49 02 	lds	r24, 0x0249
    2c1c:	90 91 4a 02 	lds	r25, 0x024A
    2c20:	20 91 59 02 	lds	r18, 0x0259
    2c24:	30 91 5a 02 	lds	r19, 0x025A
    2c28:	82 17       	cp	r24, r18
    2c2a:	93 07       	cpc	r25, r19
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <predict+0x40>
    2c2e:	4b c0       	rjmp	.+150    	; 0x2cc6 <predict+0xd6>
    2c30:	20 91 4b 02 	lds	r18, 0x024B
    2c34:	30 91 4c 02 	lds	r19, 0x024C
    2c38:	82 17       	cp	r24, r18
    2c3a:	93 07       	cpc	r25, r19
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <predict+0x50>
    2c3e:	43 c0       	rjmp	.+134    	; 0x2cc6 <predict+0xd6>
    2c40:	80 91 41 02 	lds	r24, 0x0241
    2c44:	90 91 42 02 	lds	r25, 0x0242
    2c48:	fc 01       	movw	r30, r24
    2c4a:	ee 0f       	add	r30, r30
    2c4c:	ff 1f       	adc	r31, r31
    2c4e:	ee 0f       	add	r30, r30
    2c50:	ff 1f       	adc	r31, r31
    2c52:	eb 5b       	subi	r30, 0xBB	; 187
    2c54:	fd 4f       	sbci	r31, 0xFD	; 253
    2c56:	20 81       	ld	r18, Z
    2c58:	31 81       	ldd	r19, Z+1	; 0x01
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	ee 0f       	add	r30, r30
    2c5e:	ff 1f       	adc	r31, r31
    2c60:	e9 5a       	subi	r30, 0xA9	; 169
    2c62:	fd 4f       	sbci	r31, 0xFD	; 253
    2c64:	40 81       	ld	r20, Z
    2c66:	51 81       	ldd	r21, Z+1	; 0x01
    2c68:	24 17       	cp	r18, r20
    2c6a:	35 07       	cpc	r19, r21
    2c6c:	61 f5       	brne	.+88     	; 0x2cc6 <predict+0xd6>
    2c6e:	fc 01       	movw	r30, r24
    2c70:	ee 0f       	add	r30, r30
    2c72:	ff 1f       	adc	r31, r31
    2c74:	ee 0f       	add	r30, r30
    2c76:	ff 1f       	adc	r31, r31
    2c78:	eb 5b       	subi	r30, 0xBB	; 187
    2c7a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	28 17       	cp	r18, r24
    2c82:	39 07       	cpc	r19, r25
    2c84:	01 f5       	brne	.+64     	; 0x2cc6 <predict+0xd6>
    2c86:	80 91 3d 02 	lds	r24, 0x023D
    2c8a:	90 91 3e 02 	lds	r25, 0x023E
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	d1 f4       	brne	.+52     	; 0x2cc6 <predict+0xd6>
    2c92:	80 91 3f 02 	lds	r24, 0x023F
    2c96:	90 91 40 02 	lds	r25, 0x0240
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	a1 f4       	brne	.+40     	; 0x2cc6 <predict+0xd6>
    2c9e:	80 91 6b 02 	lds	r24, 0x026B
    2ca2:	90 91 6c 02 	lds	r25, 0x026C
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	71 f4       	brne	.+28     	; 0x2cc6 <predict+0xd6>
    2caa:	80 91 6d 02 	lds	r24, 0x026D
    2cae:	90 91 6e 02 	lds	r25, 0x026E
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	41 f4       	brne	.+16     	; 0x2cc6 <predict+0xd6>
		sorted = total;
    2cb6:	80 91 04 02 	lds	r24, 0x0204
    2cba:	90 91 05 02 	lds	r25, 0x0205
    2cbe:	90 93 11 02 	sts	0x0211, r25
    2cc2:	80 93 10 02 	sts	0x0210, r24
    2cc6:	08 95       	ret

00002cc8 <setIndicatorAndColor>:
//**************END INITIALISATION*******************



void setIndicatorAndColor()
{
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	e5 e4       	ldi	r30, 0x45	; 69
    2cce:	f2 e0       	ldi	r31, 0x02	; 2
    2cd0:	ce e1       	ldi	r28, 0x1E	; 30
    2cd2:	d2 e0       	ldi	r29, 0x02	; 2
    2cd4:	a7 e5       	ldi	r26, 0x57	; 87
    2cd6:	b2 e0       	ldi	r27, 0x02	; 2
	int i;
	for (i = 0; i<4; i++)
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
	{
		term[i][0] = term[i][1] = -2;
    2cdc:	2e ef       	ldi	r18, 0xFE	; 254
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	33 83       	std	Z+3, r19	; 0x03
    2ce2:	22 83       	std	Z+2, r18	; 0x02
    2ce4:	31 83       	std	Z+1, r19	; 0x01
    2ce6:	20 83       	st	Z, r18
		visited[i] = 0;
    2ce8:	19 92       	st	Y+, r1
    2cea:	19 92       	st	Y+, r1
		color[i]=i;
    2cec:	8d 93       	st	X+, r24
    2cee:	9d 93       	st	X+, r25


void setIndicatorAndColor()
{
	int i;
	for (i = 0; i<4; i++)
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	34 96       	adiw	r30, 0x04	; 4
    2cf4:	84 30       	cpi	r24, 0x04	; 4
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	99 f7       	brne	.-26     	; 0x2ce0 <setIndicatorAndColor+0x18>
		term[i][0] = term[i][1] = -2;
		visited[i] = 0;
		color[i]=i;
	}
	for (i = 0; i<4; i++)
		indicator[color[i]] = i;
    2cfa:	e0 91 57 02 	lds	r30, 0x0257
    2cfe:	f0 91 58 02 	lds	r31, 0x0258
    2d02:	ee 0f       	add	r30, r30
    2d04:	ff 1f       	adc	r31, r31
    2d06:	e1 5a       	subi	r30, 0xA1	; 161
    2d08:	fd 4f       	sbci	r31, 0xFD	; 253
    2d0a:	11 82       	std	Z+1, r1	; 0x01
    2d0c:	10 82       	st	Z, r1
    2d0e:	e0 91 59 02 	lds	r30, 0x0259
    2d12:	f0 91 5a 02 	lds	r31, 0x025A
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	e1 5a       	subi	r30, 0xA1	; 161
    2d1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	e0 91 5b 02 	lds	r30, 0x025B
    2d2a:	f0 91 5c 02 	lds	r31, 0x025C
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	e1 5a       	subi	r30, 0xA1	; 161
    2d34:	fd 4f       	sbci	r31, 0xFD	; 253
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	e0 91 5d 02 	lds	r30, 0x025D
    2d42:	f0 91 5e 02 	lds	r31, 0x025E
    2d46:	ee 0f       	add	r30, r30
    2d48:	ff 1f       	adc	r31, r31
    2d4a:	e1 5a       	subi	r30, 0xA1	; 161
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
	sort[0] = sort[1] = -1;
    2d56:	8f ef       	ldi	r24, 0xFF	; 255
    2d58:	9f ef       	ldi	r25, 0xFF	; 255
    2d5a:	90 93 40 02 	sts	0x0240, r25
    2d5e:	80 93 3f 02 	sts	0x023F, r24
    2d62:	90 93 3e 02 	sts	0x023E, r25
    2d66:	80 93 3d 02 	sts	0x023D, r24
	arm[0] = arm[1] = -1;
    2d6a:	90 93 6e 02 	sts	0x026E, r25
    2d6e:	80 93 6d 02 	sts	0x026D, r24
    2d72:	90 93 6c 02 	sts	0x026C, r25
    2d76:	80 93 6b 02 	sts	0x026B, r24
}
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	08 95       	ret

00002d80 <indicator_set>:

void indicator_set()
{
	forwardJaa_Indi();
    2d80:	0e 94 9f 07 	call	0xf3e	; 0xf3e <forwardJaa_Indi>
	
	//turn efficiency
	forward_mm(160);
    2d84:	80 ea       	ldi	r24, 0xA0	; 160
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	//scan 4
	soft_right_2();
    2d8c:	0e 94 8d 02 	call	0x51a	; 0x51a <soft_right_2>
    2d90:	2f ef       	ldi	r18, 0xFF	; 255
    2d92:	8f e7       	ldi	r24, 0x7F	; 127
    2d94:	9f e1       	ldi	r25, 0x1F	; 31
    2d96:	21 50       	subi	r18, 0x01	; 1
    2d98:	80 40       	sbci	r24, 0x00	; 0
    2d9a:	90 40       	sbci	r25, 0x00	; 0
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <indicator_set+0x16>
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <indicator_set+0x20>
    2da0:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2da8:	88 32       	cpi	r24, 0x28	; 40
    2daa:	d8 f3       	brcs	.-10     	; 0x2da2 <indicator_set+0x22>
	stop();
    2dac:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[3]=scan();
    2db0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <scan>
    2db4:	90 93 5e 02 	sts	0x025E, r25
    2db8:	80 93 5d 02 	sts	0x025D, r24
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	
	//back to line
	soft_left();
    2dbc:	0e 94 84 02 	call	0x508	; 0x508 <soft_left>
    2dc0:	2f ef       	ldi	r18, 0xFF	; 255
    2dc2:	8f ef       	ldi	r24, 0xFF	; 255
    2dc4:	9c e2       	ldi	r25, 0x2C	; 44
    2dc6:	21 50       	subi	r18, 0x01	; 1
    2dc8:	80 40       	sbci	r24, 0x00	; 0
    2dca:	90 40       	sbci	r25, 0x00	; 0
    2dcc:	e1 f7       	brne	.-8      	; 0x2dc6 <indicator_set+0x46>
    2dce:	00 c0       	rjmp	.+0      	; 0x2dd0 <indicator_set+0x50>
    2dd0:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    2dd2:	82 e0       	ldi	r24, 0x02	; 2
    2dd4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2dd8:	88 32       	cpi	r24, 0x28	; 40
    2dda:	d8 f3       	brcs	.-10     	; 0x2dd2 <indicator_set+0x52>
	stop();
    2ddc:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	
	//scan 3
	soft_left_2();
    2de0:	0e 94 8a 02 	call	0x514	; 0x514 <soft_left_2>
    2de4:	2f ef       	ldi	r18, 0xFF	; 255
    2de6:	8f e7       	ldi	r24, 0x7F	; 127
    2de8:	96 e1       	ldi	r25, 0x16	; 22
    2dea:	21 50       	subi	r18, 0x01	; 1
    2dec:	80 40       	sbci	r24, 0x00	; 0
    2dee:	90 40       	sbci	r25, 0x00	; 0
    2df0:	e1 f7       	brne	.-8      	; 0x2dea <indicator_set+0x6a>
    2df2:	00 c0       	rjmp	.+0      	; 0x2df4 <indicator_set+0x74>
    2df4:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2dfc:	88 32       	cpi	r24, 0x28	; 40
    2dfe:	d8 f3       	brcs	.-10     	; 0x2df6 <indicator_set+0x76>
	stop();
    2e00:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[2]=scan();
    2e04:	0e 94 f5 04 	call	0x9ea	; 0x9ea <scan>
    2e08:	90 93 5c 02 	sts	0x025C, r25
    2e0c:	80 93 5b 02 	sts	0x025B, r24
// 		_delay_ms(100);
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	//back to line
	soft_right();
    2e10:	0e 94 87 02 	call	0x50e	; 0x50e <soft_right>
    2e14:	2f ef       	ldi	r18, 0xFF	; 255
    2e16:	8f e7       	ldi	r24, 0x7F	; 127
    2e18:	96 e1       	ldi	r25, 0x16	; 22
    2e1a:	21 50       	subi	r18, 0x01	; 1
    2e1c:	80 40       	sbci	r24, 0x00	; 0
    2e1e:	90 40       	sbci	r25, 0x00	; 0
    2e20:	e1 f7       	brne	.-8      	; 0x2e1a <indicator_set+0x9a>
    2e22:	00 c0       	rjmp	.+0      	; 0x2e24 <indicator_set+0xa4>
    2e24:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2e2c:	88 32       	cpi	r24, 0x28	; 40
    2e2e:	d8 f3       	brcs	.-10     	; 0x2e26 <indicator_set+0xa6>
	stop();
    2e30:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	
	//=====
	
	forwardJaa_Indi();
    2e34:	0e 94 9f 07 	call	0xf3e	; 0xf3e <forwardJaa_Indi>
	
	//turn efficiency
	forward_mm(160);
    2e38:	80 ea       	ldi	r24, 0xA0	; 160
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 ac 04 	call	0x958	; 0x958 <forward_mm>
	//scan 4
	soft_right_2();
    2e40:	0e 94 8d 02 	call	0x51a	; 0x51a <soft_right_2>
    2e44:	2f ef       	ldi	r18, 0xFF	; 255
    2e46:	8f e7       	ldi	r24, 0x7F	; 127
    2e48:	9f e1       	ldi	r25, 0x1F	; 31
    2e4a:	21 50       	subi	r18, 0x01	; 1
    2e4c:	80 40       	sbci	r24, 0x00	; 0
    2e4e:	90 40       	sbci	r25, 0x00	; 0
    2e50:	e1 f7       	brne	.-8      	; 0x2e4a <indicator_set+0xca>
    2e52:	00 c0       	rjmp	.+0      	; 0x2e54 <indicator_set+0xd4>
    2e54:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
    2e56:	83 e0       	ldi	r24, 0x03	; 3
    2e58:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2e5c:	88 32       	cpi	r24, 0x28	; 40
    2e5e:	d8 f3       	brcs	.-10     	; 0x2e56 <indicator_set+0xd6>
	stop();
    2e60:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[1]=scan();
    2e64:	0e 94 f5 04 	call	0x9ea	; 0x9ea <scan>
    2e68:	90 93 5a 02 	sts	0x025A, r25
    2e6c:	80 93 59 02 	sts	0x0259, r24
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	
	//back to line
	soft_left();
    2e70:	0e 94 84 02 	call	0x508	; 0x508 <soft_left>
    2e74:	2f ef       	ldi	r18, 0xFF	; 255
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	9c e2       	ldi	r25, 0x2C	; 44
    2e7a:	21 50       	subi	r18, 0x01	; 1
    2e7c:	80 40       	sbci	r24, 0x00	; 0
    2e7e:	90 40       	sbci	r25, 0x00	; 0
    2e80:	e1 f7       	brne	.-8      	; 0x2e7a <indicator_set+0xfa>
    2e82:	00 c0       	rjmp	.+0      	; 0x2e84 <indicator_set+0x104>
    2e84:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2e8c:	88 32       	cpi	r24, 0x28	; 40
    2e8e:	d8 f3       	brcs	.-10     	; 0x2e86 <indicator_set+0x106>
	stop();
    2e90:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	
	//scan 3
	soft_left_2();
    2e94:	0e 94 8a 02 	call	0x514	; 0x514 <soft_left_2>
    2e98:	2f ef       	ldi	r18, 0xFF	; 255
    2e9a:	8f e7       	ldi	r24, 0x7F	; 127
    2e9c:	96 e1       	ldi	r25, 0x16	; 22
    2e9e:	21 50       	subi	r18, 0x01	; 1
    2ea0:	80 40       	sbci	r24, 0x00	; 0
    2ea2:	90 40       	sbci	r25, 0x00	; 0
    2ea4:	e1 f7       	brne	.-8      	; 0x2e9e <indicator_set+0x11e>
    2ea6:	00 c0       	rjmp	.+0      	; 0x2ea8 <indicator_set+0x128>
    2ea8:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2eb0:	88 32       	cpi	r24, 0x28	; 40
    2eb2:	d8 f3       	brcs	.-10     	; 0x2eaa <indicator_set+0x12a>
	stop();
    2eb4:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	color[0]=scan();
    2eb8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <scan>
    2ebc:	90 93 58 02 	sts	0x0258, r25
    2ec0:	80 93 57 02 	sts	0x0257, r24
// 		_delay_ms(100);
// 		buzzer_off();
// 		_delay_ms(500);
// 	}
	//back to line
	soft_right();
    2ec4:	0e 94 87 02 	call	0x50e	; 0x50e <soft_right>
    2ec8:	2f ef       	ldi	r18, 0xFF	; 255
    2eca:	8f e7       	ldi	r24, 0x7F	; 127
    2ecc:	96 e1       	ldi	r25, 0x16	; 22
    2ece:	21 50       	subi	r18, 0x01	; 1
    2ed0:	80 40       	sbci	r24, 0x00	; 0
    2ed2:	90 40       	sbci	r25, 0x00	; 0
    2ed4:	e1 f7       	brne	.-8      	; 0x2ece <indicator_set+0x14e>
    2ed6:	00 c0       	rjmp	.+0      	; 0x2ed8 <indicator_set+0x158>
    2ed8:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_Conversion>
    2ee0:	88 32       	cpi	r24, 0x28	; 40
    2ee2:	d8 f3       	brcs	.-10     	; 0x2eda <indicator_set+0x15a>
	stop();
    2ee4:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	//lcd_print(1,1,color[0],1);
	//lcd_print(1,3,color[1],1);
	//lcd_print(1,5,color[2],1);
	//lcd_print(1,7,color[3],1);
	
	forwardJaa();
    2ee8:	0e 94 a0 08 	call	0x1140	; 0x1140 <forwardJaa>
	turnRight();
    2eec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <turnRight>
	forward();
    2ef0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <forward>
    2ef4:	2f ef       	ldi	r18, 0xFF	; 255
    2ef6:	8f e7       	ldi	r24, 0x7F	; 127
    2ef8:	96 e1       	ldi	r25, 0x16	; 22
    2efa:	21 50       	subi	r18, 0x01	; 1
    2efc:	80 40       	sbci	r24, 0x00	; 0
    2efe:	90 40       	sbci	r25, 0x00	; 0
    2f00:	e1 f7       	brne	.-8      	; 0x2efa <indicator_set+0x17a>
    2f02:	00 c0       	rjmp	.+0      	; 0x2f04 <indicator_set+0x184>
    2f04:	00 00       	nop
	_delay_ms(500);
	forwardJaa();
    2f06:	0e 94 a0 08 	call	0x1140	; 0x1140 <forwardJaa>
	turnRight();
    2f0a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <turnRight>
	forwardJaa();
    2f0e:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <forwardJaa>
    2f12:	08 95       	ret

00002f14 <__init__>:
	//buzzer_on();	
}

void __init__()
{
	init_devices();
    2f14:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <init_devices>
	lcd_set_4bit();
    2f18:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2f1c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    2f20:	0e 94 57 03 	call	0x6ae	; 0x6ae <color_sensor_scaling>
	
	threshold=6000;
    2f24:	80 e7       	ldi	r24, 0x70	; 112
    2f26:	97 e1       	ldi	r25, 0x17	; 23
    2f28:	90 93 27 02 	sts	0x0227, r25
    2f2c:	80 93 26 02 	sts	0x0226, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    2f30:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    2f34:	83 e5       	ldi	r24, 0x53	; 83
    2f36:	80 93 8a 00 	sts	0x008A, r24
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
    2f3a:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
    2f3e:	83 e2       	ldi	r24, 0x23	; 35
    2f40:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    2f44:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    2f48:	80 93 8c 00 	sts	0x008C, r24
    2f4c:	2f ef       	ldi	r18, 0xFF	; 255
    2f4e:	8f e7       	ldi	r24, 0x7F	; 127
    2f50:	96 e1       	ldi	r25, 0x16	; 22
    2f52:	21 50       	subi	r18, 0x01	; 1
    2f54:	80 40       	sbci	r24, 0x00	; 0
    2f56:	90 40       	sbci	r25, 0x00	; 0
    2f58:	e1 f7       	brne	.-8      	; 0x2f52 <__init__+0x3e>
    2f5a:	00 c0       	rjmp	.+0      	; 0x2f5c <__init__+0x48>
    2f5c:	00 00       	nop
	
	servo_2(90);
	servo_1(0);
	servo_3(0);
	_delay_ms(500);
	servo_3_free();
    2f5e:	0e 94 ad 02 	call	0x55a	; 0x55a <servo_3_free>
	servo_2_free();
    2f62:	0e 94 a6 02 	call	0x54c	; 0x54c <servo_2_free>
	servo_1_free();
    2f66:	0e 94 9f 02 	call	0x53e	; 0x53e <servo_1_free>
	ct = 3;
    2f6a:	83 e0       	ldi	r24, 0x03	; 3
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	90 93 42 02 	sts	0x0242, r25
    2f72:	80 93 41 02 	sts	0x0241, r24
	adj = 1;
    2f76:	21 e0       	ldi	r18, 0x01	; 1
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	30 93 68 02 	sts	0x0268, r19
    2f7e:	20 93 67 02 	sts	0x0267, r18
	dir=2;
    2f82:	22 e0       	ldi	r18, 0x02	; 2
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	30 93 01 02 	sts	0x0201, r19
    2f8a:	20 93 00 02 	sts	0x0200, r18
	ot = 3;
    2f8e:	90 93 03 02 	sts	0x0203, r25
    2f92:	80 93 02 02 	sts	0x0202, r24
    2f96:	08 95       	ret

00002f98 <main>:

}
int main(void)
{
	__init__();
    2f98:	bd df       	rcall	.-134    	; 0x2f14 <__init__>
	forward();
    2f9a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <forward>
    2f9e:	2f ef       	ldi	r18, 0xFF	; 255
    2fa0:	8f ef       	ldi	r24, 0xFF	; 255
    2fa2:	9c e2       	ldi	r25, 0x2C	; 44
    2fa4:	21 50       	subi	r18, 0x01	; 1
    2fa6:	80 40       	sbci	r24, 0x00	; 0
    2fa8:	90 40       	sbci	r25, 0x00	; 0
    2faa:	e1 f7       	brne	.-8      	; 0x2fa4 <main+0xc>
    2fac:	00 c0       	rjmp	.+0      	; 0x2fae <main+0x16>
    2fae:	00 00       	nop
	_delay_ms(1000);
	stop();
    2fb0:	0e 94 90 02 	call	0x520	; 0x520 <stop>
	indicator_set();
    2fb4:	e5 de       	rcall	.-566    	; 0x2d80 <indicator_set>
	setIndicatorAndColor();
    2fb6:	88 de       	rcall	.-752    	; 0x2cc8 <setIndicatorAndColor>
		drop(1);
		_delay_ms(1000);
		pick(0);
	}
	while(1);*/
	while (sorted<total)
    2fb8:	20 91 10 02 	lds	r18, 0x0210
    2fbc:	30 91 11 02 	lds	r19, 0x0211
    2fc0:	80 91 04 02 	lds	r24, 0x0204
    2fc4:	90 91 05 02 	lds	r25, 0x0205
    2fc8:	28 17       	cp	r18, r24
    2fca:	39 07       	cpc	r19, r25
    2fcc:	ac f5       	brge	.+106    	; 0x3038 <main+0xa0>
	{
		canDrop();
    2fce:	91 d8       	rcall	.-3806   	; 0x20f2 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2fd0:	80 91 0c 02 	lds	r24, 0x020C
    2fd4:	90 91 0d 02 	lds	r25, 0x020D
    2fd8:	03 97       	sbiw	r24, 0x03	; 3
    2fda:	09 f4       	brne	.+2      	; 0x2fde <main+0x46>
			predict();
    2fdc:	09 de       	rcall	.-1006   	; 0x2bf0 <predict>
		if (sorted == total)
    2fde:	20 91 10 02 	lds	r18, 0x0210
    2fe2:	30 91 11 02 	lds	r19, 0x0211
    2fe6:	80 91 04 02 	lds	r24, 0x0204
    2fea:	90 91 05 02 	lds	r25, 0x0205
    2fee:	28 17       	cp	r18, r24
    2ff0:	39 07       	cpc	r19, r25
    2ff2:	11 f1       	breq	.+68     	; 0x3038 <main+0xa0>
			break;
		pickup();
    2ff4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2ff8:	80 91 41 02 	lds	r24, 0x0241
    2ffc:	90 91 42 02 	lds	r25, 0x0242
    3000:	9c 01       	movw	r18, r24
    3002:	21 70       	andi	r18, 0x01	; 1
    3004:	30 78       	andi	r19, 0x80	; 128
    3006:	33 23       	and	r19, r19
    3008:	34 f4       	brge	.+12     	; 0x3016 <main+0x7e>
    300a:	21 50       	subi	r18, 0x01	; 1
    300c:	31 09       	sbc	r19, r1
    300e:	2e 6f       	ori	r18, 0xFE	; 254
    3010:	3f 6f       	ori	r19, 0xFF	; 255
    3012:	2f 5f       	subi	r18, 0xFF	; 255
    3014:	3f 4f       	sbci	r19, 0xFF	; 255
    3016:	b9 01       	movw	r22, r18
    3018:	6c 5f       	subi	r22, 0xFC	; 252
    301a:	7f 4f       	sbci	r23, 0xFF	; 255
    301c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <traverseToSort>
		sortCheck();
    3020:	b0 db       	rcall	.-2208   	; 0x2782 <sortCheck>
		drop(1);
		_delay_ms(1000);
		pick(0);
	}
	while(1);*/
	while (sorted<total)
    3022:	20 91 10 02 	lds	r18, 0x0210
    3026:	30 91 11 02 	lds	r19, 0x0211
    302a:	80 91 04 02 	lds	r24, 0x0204
    302e:	90 91 05 02 	lds	r25, 0x0205
    3032:	28 17       	cp	r18, r24
    3034:	39 07       	cpc	r19, r25
    3036:	5c f2       	brlt	.-106    	; 0x2fce <main+0x36>
			break;
		pickup();
		traverseToSort(ct, ct % 2 + 4);
		sortCheck();
	}
	buzzer_on();
    3038:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <buzzer_on>
    303c:	ff cf       	rjmp	.-2      	; 0x303c <main+0xa4>

0000303e <__divsf3>:
    303e:	0c d0       	rcall	.+24     	; 0x3058 <__divsf3x>
    3040:	e6 c0       	rjmp	.+460    	; 0x320e <__fp_round>
    3042:	de d0       	rcall	.+444    	; 0x3200 <__fp_pscB>
    3044:	40 f0       	brcs	.+16     	; 0x3056 <__divsf3+0x18>
    3046:	d5 d0       	rcall	.+426    	; 0x31f2 <__fp_pscA>
    3048:	30 f0       	brcs	.+12     	; 0x3056 <__divsf3+0x18>
    304a:	21 f4       	brne	.+8      	; 0x3054 <__divsf3+0x16>
    304c:	5f 3f       	cpi	r21, 0xFF	; 255
    304e:	19 f0       	breq	.+6      	; 0x3056 <__divsf3+0x18>
    3050:	c7 c0       	rjmp	.+398    	; 0x31e0 <__fp_inf>
    3052:	51 11       	cpse	r21, r1
    3054:	10 c1       	rjmp	.+544    	; 0x3276 <__fp_szero>
    3056:	ca c0       	rjmp	.+404    	; 0x31ec <__fp_nan>

00003058 <__divsf3x>:
    3058:	eb d0       	rcall	.+470    	; 0x3230 <__fp_split3>
    305a:	98 f3       	brcs	.-26     	; 0x3042 <__divsf3+0x4>

0000305c <__divsf3_pse>:
    305c:	99 23       	and	r25, r25
    305e:	c9 f3       	breq	.-14     	; 0x3052 <__divsf3+0x14>
    3060:	55 23       	and	r21, r21
    3062:	b1 f3       	breq	.-20     	; 0x3050 <__divsf3+0x12>
    3064:	95 1b       	sub	r25, r21
    3066:	55 0b       	sbc	r21, r21
    3068:	bb 27       	eor	r27, r27
    306a:	aa 27       	eor	r26, r26
    306c:	62 17       	cp	r22, r18
    306e:	73 07       	cpc	r23, r19
    3070:	84 07       	cpc	r24, r20
    3072:	38 f0       	brcs	.+14     	; 0x3082 <__divsf3_pse+0x26>
    3074:	9f 5f       	subi	r25, 0xFF	; 255
    3076:	5f 4f       	sbci	r21, 0xFF	; 255
    3078:	22 0f       	add	r18, r18
    307a:	33 1f       	adc	r19, r19
    307c:	44 1f       	adc	r20, r20
    307e:	aa 1f       	adc	r26, r26
    3080:	a9 f3       	breq	.-22     	; 0x306c <__divsf3_pse+0x10>
    3082:	33 d0       	rcall	.+102    	; 0x30ea <__divsf3_pse+0x8e>
    3084:	0e 2e       	mov	r0, r30
    3086:	3a f0       	brmi	.+14     	; 0x3096 <__divsf3_pse+0x3a>
    3088:	e0 e8       	ldi	r30, 0x80	; 128
    308a:	30 d0       	rcall	.+96     	; 0x30ec <__divsf3_pse+0x90>
    308c:	91 50       	subi	r25, 0x01	; 1
    308e:	50 40       	sbci	r21, 0x00	; 0
    3090:	e6 95       	lsr	r30
    3092:	00 1c       	adc	r0, r0
    3094:	ca f7       	brpl	.-14     	; 0x3088 <__divsf3_pse+0x2c>
    3096:	29 d0       	rcall	.+82     	; 0x30ea <__divsf3_pse+0x8e>
    3098:	fe 2f       	mov	r31, r30
    309a:	27 d0       	rcall	.+78     	; 0x30ea <__divsf3_pse+0x8e>
    309c:	66 0f       	add	r22, r22
    309e:	77 1f       	adc	r23, r23
    30a0:	88 1f       	adc	r24, r24
    30a2:	bb 1f       	adc	r27, r27
    30a4:	26 17       	cp	r18, r22
    30a6:	37 07       	cpc	r19, r23
    30a8:	48 07       	cpc	r20, r24
    30aa:	ab 07       	cpc	r26, r27
    30ac:	b0 e8       	ldi	r27, 0x80	; 128
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <__divsf3_pse+0x56>
    30b0:	bb 0b       	sbc	r27, r27
    30b2:	80 2d       	mov	r24, r0
    30b4:	bf 01       	movw	r22, r30
    30b6:	ff 27       	eor	r31, r31
    30b8:	93 58       	subi	r25, 0x83	; 131
    30ba:	5f 4f       	sbci	r21, 0xFF	; 255
    30bc:	2a f0       	brmi	.+10     	; 0x30c8 <__divsf3_pse+0x6c>
    30be:	9e 3f       	cpi	r25, 0xFE	; 254
    30c0:	51 05       	cpc	r21, r1
    30c2:	68 f0       	brcs	.+26     	; 0x30de <__divsf3_pse+0x82>
    30c4:	8d c0       	rjmp	.+282    	; 0x31e0 <__fp_inf>
    30c6:	d7 c0       	rjmp	.+430    	; 0x3276 <__fp_szero>
    30c8:	5f 3f       	cpi	r21, 0xFF	; 255
    30ca:	ec f3       	brlt	.-6      	; 0x30c6 <__divsf3_pse+0x6a>
    30cc:	98 3e       	cpi	r25, 0xE8	; 232
    30ce:	dc f3       	brlt	.-10     	; 0x30c6 <__divsf3_pse+0x6a>
    30d0:	86 95       	lsr	r24
    30d2:	77 95       	ror	r23
    30d4:	67 95       	ror	r22
    30d6:	b7 95       	ror	r27
    30d8:	f7 95       	ror	r31
    30da:	9f 5f       	subi	r25, 0xFF	; 255
    30dc:	c9 f7       	brne	.-14     	; 0x30d0 <__divsf3_pse+0x74>
    30de:	88 0f       	add	r24, r24
    30e0:	91 1d       	adc	r25, r1
    30e2:	96 95       	lsr	r25
    30e4:	87 95       	ror	r24
    30e6:	97 f9       	bld	r25, 7
    30e8:	08 95       	ret
    30ea:	e1 e0       	ldi	r30, 0x01	; 1
    30ec:	66 0f       	add	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	bb 1f       	adc	r27, r27
    30f4:	62 17       	cp	r22, r18
    30f6:	73 07       	cpc	r23, r19
    30f8:	84 07       	cpc	r24, r20
    30fa:	ba 07       	cpc	r27, r26
    30fc:	20 f0       	brcs	.+8      	; 0x3106 <__divsf3_pse+0xaa>
    30fe:	62 1b       	sub	r22, r18
    3100:	73 0b       	sbc	r23, r19
    3102:	84 0b       	sbc	r24, r20
    3104:	ba 0b       	sbc	r27, r26
    3106:	ee 1f       	adc	r30, r30
    3108:	88 f7       	brcc	.-30     	; 0x30ec <__divsf3_pse+0x90>
    310a:	e0 95       	com	r30
    310c:	08 95       	ret

0000310e <__fixunssfsi>:
    310e:	98 d0       	rcall	.+304    	; 0x3240 <__fp_splitA>
    3110:	88 f0       	brcs	.+34     	; 0x3134 <__fixunssfsi+0x26>
    3112:	9f 57       	subi	r25, 0x7F	; 127
    3114:	90 f0       	brcs	.+36     	; 0x313a <__fixunssfsi+0x2c>
    3116:	b9 2f       	mov	r27, r25
    3118:	99 27       	eor	r25, r25
    311a:	b7 51       	subi	r27, 0x17	; 23
    311c:	a0 f0       	brcs	.+40     	; 0x3146 <__fixunssfsi+0x38>
    311e:	d1 f0       	breq	.+52     	; 0x3154 <__fixunssfsi+0x46>
    3120:	66 0f       	add	r22, r22
    3122:	77 1f       	adc	r23, r23
    3124:	88 1f       	adc	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	1a f0       	brmi	.+6      	; 0x3130 <__fixunssfsi+0x22>
    312a:	ba 95       	dec	r27
    312c:	c9 f7       	brne	.-14     	; 0x3120 <__fixunssfsi+0x12>
    312e:	12 c0       	rjmp	.+36     	; 0x3154 <__fixunssfsi+0x46>
    3130:	b1 30       	cpi	r27, 0x01	; 1
    3132:	81 f0       	breq	.+32     	; 0x3154 <__fixunssfsi+0x46>
    3134:	9f d0       	rcall	.+318    	; 0x3274 <__fp_zero>
    3136:	b1 e0       	ldi	r27, 0x01	; 1
    3138:	08 95       	ret
    313a:	9c c0       	rjmp	.+312    	; 0x3274 <__fp_zero>
    313c:	67 2f       	mov	r22, r23
    313e:	78 2f       	mov	r23, r24
    3140:	88 27       	eor	r24, r24
    3142:	b8 5f       	subi	r27, 0xF8	; 248
    3144:	39 f0       	breq	.+14     	; 0x3154 <__fixunssfsi+0x46>
    3146:	b9 3f       	cpi	r27, 0xF9	; 249
    3148:	cc f3       	brlt	.-14     	; 0x313c <__fixunssfsi+0x2e>
    314a:	86 95       	lsr	r24
    314c:	77 95       	ror	r23
    314e:	67 95       	ror	r22
    3150:	b3 95       	inc	r27
    3152:	d9 f7       	brne	.-10     	; 0x314a <__fixunssfsi+0x3c>
    3154:	3e f4       	brtc	.+14     	; 0x3164 <__fixunssfsi+0x56>
    3156:	90 95       	com	r25
    3158:	80 95       	com	r24
    315a:	70 95       	com	r23
    315c:	61 95       	neg	r22
    315e:	7f 4f       	sbci	r23, 0xFF	; 255
    3160:	8f 4f       	sbci	r24, 0xFF	; 255
    3162:	9f 4f       	sbci	r25, 0xFF	; 255
    3164:	08 95       	ret

00003166 <__floatunsisf>:
    3166:	e8 94       	clt
    3168:	09 c0       	rjmp	.+18     	; 0x317c <__floatsisf+0x12>

0000316a <__floatsisf>:
    316a:	97 fb       	bst	r25, 7
    316c:	3e f4       	brtc	.+14     	; 0x317c <__floatsisf+0x12>
    316e:	90 95       	com	r25
    3170:	80 95       	com	r24
    3172:	70 95       	com	r23
    3174:	61 95       	neg	r22
    3176:	7f 4f       	sbci	r23, 0xFF	; 255
    3178:	8f 4f       	sbci	r24, 0xFF	; 255
    317a:	9f 4f       	sbci	r25, 0xFF	; 255
    317c:	99 23       	and	r25, r25
    317e:	a9 f0       	breq	.+42     	; 0x31aa <__floatsisf+0x40>
    3180:	f9 2f       	mov	r31, r25
    3182:	96 e9       	ldi	r25, 0x96	; 150
    3184:	bb 27       	eor	r27, r27
    3186:	93 95       	inc	r25
    3188:	f6 95       	lsr	r31
    318a:	87 95       	ror	r24
    318c:	77 95       	ror	r23
    318e:	67 95       	ror	r22
    3190:	b7 95       	ror	r27
    3192:	f1 11       	cpse	r31, r1
    3194:	f8 cf       	rjmp	.-16     	; 0x3186 <__floatsisf+0x1c>
    3196:	fa f4       	brpl	.+62     	; 0x31d6 <__floatsisf+0x6c>
    3198:	bb 0f       	add	r27, r27
    319a:	11 f4       	brne	.+4      	; 0x31a0 <__floatsisf+0x36>
    319c:	60 ff       	sbrs	r22, 0
    319e:	1b c0       	rjmp	.+54     	; 0x31d6 <__floatsisf+0x6c>
    31a0:	6f 5f       	subi	r22, 0xFF	; 255
    31a2:	7f 4f       	sbci	r23, 0xFF	; 255
    31a4:	8f 4f       	sbci	r24, 0xFF	; 255
    31a6:	9f 4f       	sbci	r25, 0xFF	; 255
    31a8:	16 c0       	rjmp	.+44     	; 0x31d6 <__floatsisf+0x6c>
    31aa:	88 23       	and	r24, r24
    31ac:	11 f0       	breq	.+4      	; 0x31b2 <__floatsisf+0x48>
    31ae:	96 e9       	ldi	r25, 0x96	; 150
    31b0:	11 c0       	rjmp	.+34     	; 0x31d4 <__floatsisf+0x6a>
    31b2:	77 23       	and	r23, r23
    31b4:	21 f0       	breq	.+8      	; 0x31be <__floatsisf+0x54>
    31b6:	9e e8       	ldi	r25, 0x8E	; 142
    31b8:	87 2f       	mov	r24, r23
    31ba:	76 2f       	mov	r23, r22
    31bc:	05 c0       	rjmp	.+10     	; 0x31c8 <__floatsisf+0x5e>
    31be:	66 23       	and	r22, r22
    31c0:	71 f0       	breq	.+28     	; 0x31de <__floatsisf+0x74>
    31c2:	96 e8       	ldi	r25, 0x86	; 134
    31c4:	86 2f       	mov	r24, r22
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	60 e0       	ldi	r22, 0x00	; 0
    31ca:	2a f0       	brmi	.+10     	; 0x31d6 <__floatsisf+0x6c>
    31cc:	9a 95       	dec	r25
    31ce:	66 0f       	add	r22, r22
    31d0:	77 1f       	adc	r23, r23
    31d2:	88 1f       	adc	r24, r24
    31d4:	da f7       	brpl	.-10     	; 0x31cc <__floatsisf+0x62>
    31d6:	88 0f       	add	r24, r24
    31d8:	96 95       	lsr	r25
    31da:	87 95       	ror	r24
    31dc:	97 f9       	bld	r25, 7
    31de:	08 95       	ret

000031e0 <__fp_inf>:
    31e0:	97 f9       	bld	r25, 7
    31e2:	9f 67       	ori	r25, 0x7F	; 127
    31e4:	80 e8       	ldi	r24, 0x80	; 128
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	08 95       	ret

000031ec <__fp_nan>:
    31ec:	9f ef       	ldi	r25, 0xFF	; 255
    31ee:	80 ec       	ldi	r24, 0xC0	; 192
    31f0:	08 95       	ret

000031f2 <__fp_pscA>:
    31f2:	00 24       	eor	r0, r0
    31f4:	0a 94       	dec	r0
    31f6:	16 16       	cp	r1, r22
    31f8:	17 06       	cpc	r1, r23
    31fa:	18 06       	cpc	r1, r24
    31fc:	09 06       	cpc	r0, r25
    31fe:	08 95       	ret

00003200 <__fp_pscB>:
    3200:	00 24       	eor	r0, r0
    3202:	0a 94       	dec	r0
    3204:	12 16       	cp	r1, r18
    3206:	13 06       	cpc	r1, r19
    3208:	14 06       	cpc	r1, r20
    320a:	05 06       	cpc	r0, r21
    320c:	08 95       	ret

0000320e <__fp_round>:
    320e:	09 2e       	mov	r0, r25
    3210:	03 94       	inc	r0
    3212:	00 0c       	add	r0, r0
    3214:	11 f4       	brne	.+4      	; 0x321a <__fp_round+0xc>
    3216:	88 23       	and	r24, r24
    3218:	52 f0       	brmi	.+20     	; 0x322e <__fp_round+0x20>
    321a:	bb 0f       	add	r27, r27
    321c:	40 f4       	brcc	.+16     	; 0x322e <__fp_round+0x20>
    321e:	bf 2b       	or	r27, r31
    3220:	11 f4       	brne	.+4      	; 0x3226 <__fp_round+0x18>
    3222:	60 ff       	sbrs	r22, 0
    3224:	04 c0       	rjmp	.+8      	; 0x322e <__fp_round+0x20>
    3226:	6f 5f       	subi	r22, 0xFF	; 255
    3228:	7f 4f       	sbci	r23, 0xFF	; 255
    322a:	8f 4f       	sbci	r24, 0xFF	; 255
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	08 95       	ret

00003230 <__fp_split3>:
    3230:	57 fd       	sbrc	r21, 7
    3232:	90 58       	subi	r25, 0x80	; 128
    3234:	44 0f       	add	r20, r20
    3236:	55 1f       	adc	r21, r21
    3238:	59 f0       	breq	.+22     	; 0x3250 <__fp_splitA+0x10>
    323a:	5f 3f       	cpi	r21, 0xFF	; 255
    323c:	71 f0       	breq	.+28     	; 0x325a <__fp_splitA+0x1a>
    323e:	47 95       	ror	r20

00003240 <__fp_splitA>:
    3240:	88 0f       	add	r24, r24
    3242:	97 fb       	bst	r25, 7
    3244:	99 1f       	adc	r25, r25
    3246:	61 f0       	breq	.+24     	; 0x3260 <__fp_splitA+0x20>
    3248:	9f 3f       	cpi	r25, 0xFF	; 255
    324a:	79 f0       	breq	.+30     	; 0x326a <__fp_splitA+0x2a>
    324c:	87 95       	ror	r24
    324e:	08 95       	ret
    3250:	12 16       	cp	r1, r18
    3252:	13 06       	cpc	r1, r19
    3254:	14 06       	cpc	r1, r20
    3256:	55 1f       	adc	r21, r21
    3258:	f2 cf       	rjmp	.-28     	; 0x323e <__fp_split3+0xe>
    325a:	46 95       	lsr	r20
    325c:	f1 df       	rcall	.-30     	; 0x3240 <__fp_splitA>
    325e:	08 c0       	rjmp	.+16     	; 0x3270 <__fp_splitA+0x30>
    3260:	16 16       	cp	r1, r22
    3262:	17 06       	cpc	r1, r23
    3264:	18 06       	cpc	r1, r24
    3266:	99 1f       	adc	r25, r25
    3268:	f1 cf       	rjmp	.-30     	; 0x324c <__fp_splitA+0xc>
    326a:	86 95       	lsr	r24
    326c:	71 05       	cpc	r23, r1
    326e:	61 05       	cpc	r22, r1
    3270:	08 94       	sec
    3272:	08 95       	ret

00003274 <__fp_zero>:
    3274:	e8 94       	clt

00003276 <__fp_szero>:
    3276:	bb 27       	eor	r27, r27
    3278:	66 27       	eor	r22, r22
    327a:	77 27       	eor	r23, r23
    327c:	cb 01       	movw	r24, r22
    327e:	97 f9       	bld	r25, 7
    3280:	08 95       	ret

00003282 <__divmodhi4>:
    3282:	97 fb       	bst	r25, 7
    3284:	07 2e       	mov	r0, r23
    3286:	16 f4       	brtc	.+4      	; 0x328c <__divmodhi4+0xa>
    3288:	00 94       	com	r0
    328a:	06 d0       	rcall	.+12     	; 0x3298 <__divmodhi4_neg1>
    328c:	77 fd       	sbrc	r23, 7
    328e:	08 d0       	rcall	.+16     	; 0x32a0 <__divmodhi4_neg2>
    3290:	1a d0       	rcall	.+52     	; 0x32c6 <__udivmodhi4>
    3292:	07 fc       	sbrc	r0, 7
    3294:	05 d0       	rcall	.+10     	; 0x32a0 <__divmodhi4_neg2>
    3296:	3e f4       	brtc	.+14     	; 0x32a6 <__divmodhi4_exit>

00003298 <__divmodhi4_neg1>:
    3298:	90 95       	com	r25
    329a:	81 95       	neg	r24
    329c:	9f 4f       	sbci	r25, 0xFF	; 255
    329e:	08 95       	ret

000032a0 <__divmodhi4_neg2>:
    32a0:	70 95       	com	r23
    32a2:	61 95       	neg	r22
    32a4:	7f 4f       	sbci	r23, 0xFF	; 255

000032a6 <__divmodhi4_exit>:
    32a6:	08 95       	ret

000032a8 <__umulhisi3>:
    32a8:	a2 9f       	mul	r26, r18
    32aa:	b0 01       	movw	r22, r0
    32ac:	b3 9f       	mul	r27, r19
    32ae:	c0 01       	movw	r24, r0
    32b0:	a3 9f       	mul	r26, r19
    32b2:	70 0d       	add	r23, r0
    32b4:	81 1d       	adc	r24, r1
    32b6:	11 24       	eor	r1, r1
    32b8:	91 1d       	adc	r25, r1
    32ba:	b2 9f       	mul	r27, r18
    32bc:	70 0d       	add	r23, r0
    32be:	81 1d       	adc	r24, r1
    32c0:	11 24       	eor	r1, r1
    32c2:	91 1d       	adc	r25, r1
    32c4:	08 95       	ret

000032c6 <__udivmodhi4>:
    32c6:	aa 1b       	sub	r26, r26
    32c8:	bb 1b       	sub	r27, r27
    32ca:	51 e1       	ldi	r21, 0x11	; 17
    32cc:	07 c0       	rjmp	.+14     	; 0x32dc <__udivmodhi4_ep>

000032ce <__udivmodhi4_loop>:
    32ce:	aa 1f       	adc	r26, r26
    32d0:	bb 1f       	adc	r27, r27
    32d2:	a6 17       	cp	r26, r22
    32d4:	b7 07       	cpc	r27, r23
    32d6:	10 f0       	brcs	.+4      	; 0x32dc <__udivmodhi4_ep>
    32d8:	a6 1b       	sub	r26, r22
    32da:	b7 0b       	sbc	r27, r23

000032dc <__udivmodhi4_ep>:
    32dc:	88 1f       	adc	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	5a 95       	dec	r21
    32e2:	a9 f7       	brne	.-22     	; 0x32ce <__udivmodhi4_loop>
    32e4:	80 95       	com	r24
    32e6:	90 95       	com	r25
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	08 95       	ret

000032ee <_exit>:
    32ee:	f8 94       	cli

000032f0 <__stop_program>:
    32f0:	ff cf       	rjmp	.-2      	; 0x32f0 <__stop_program>
