
Sort.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001d92  00001e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800204  00800204  00001e2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000272d  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000486  00000000  00000000  0000487f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001afa  00000000  00000000  00004d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000074c  00000000  00000000  00006800  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000077d  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000164e  00000000  00000000  000076c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  00008d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	4a c2       	rjmp	.+1172   	; 0x49a <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e9       	ldi	r30, 0x92	; 146
      fc:	fd e1       	ldi	r31, 0x1D	; 29
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 30       	cpi	r26, 0x04	; 4
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e0       	ldi	r26, 0x04	; 4
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 36       	cpi	r26, 0x6A	; 106
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 bd 0c 	call	0x197a	; 0x197a <main>
     122:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_wr_command>:
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	98 b1       	in	r25, 0x08	; 8
     12a:	9f 70       	andi	r25, 0x0F	; 15
     12c:	98 b9       	out	0x08, r25	; 8
     12e:	98 b1       	in	r25, 0x08	; 8
     130:	28 2f       	mov	r18, r24
     132:	20 7f       	andi	r18, 0xF0	; 240
     134:	92 2b       	or	r25, r18
     136:	98 b9       	out	0x08, r25	; 8
     138:	40 98       	cbi	0x08, 0	; 8
     13a:	41 98       	cbi	0x08, 1	; 8
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	ef ef       	ldi	r30, 0xFF	; 255
     140:	f7 e4       	ldi	r31, 0x47	; 71
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <lcd_wr_command+0x1a>
     146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_wr_command+0x20>
     148:	00 00       	nop
     14a:	42 98       	cbi	0x08, 2	; 8
     14c:	98 b1       	in	r25, 0x08	; 8
     14e:	9f 70       	andi	r25, 0x0F	; 15
     150:	98 b9       	out	0x08, r25	; 8
     152:	98 b1       	in	r25, 0x08	; 8
     154:	82 95       	swap	r24
     156:	80 7f       	andi	r24, 0xF0	; 240
     158:	89 2b       	or	r24, r25
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	40 98       	cbi	0x08, 0	; 8
     15e:	41 98       	cbi	0x08, 1	; 8
     160:	42 9a       	sbi	0x08, 2	; 8
     162:	8f ef       	ldi	r24, 0xFF	; 255
     164:	97 e4       	ldi	r25, 0x47	; 71
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <lcd_wr_command+0x3e>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_wr_command+0x44>
     16c:	00 00       	nop
     16e:	42 98       	cbi	0x08, 2	; 8
     170:	08 95       	ret

00000172 <lcd_wr_char>:
     172:	98 b1       	in	r25, 0x08	; 8
     174:	9f 70       	andi	r25, 0x0F	; 15
     176:	98 b9       	out	0x08, r25	; 8
     178:	98 b1       	in	r25, 0x08	; 8
     17a:	28 2f       	mov	r18, r24
     17c:	20 7f       	andi	r18, 0xF0	; 240
     17e:	92 2b       	or	r25, r18
     180:	98 b9       	out	0x08, r25	; 8
     182:	40 9a       	sbi	0x08, 0	; 8
     184:	41 98       	cbi	0x08, 1	; 8
     186:	42 9a       	sbi	0x08, 2	; 8
     188:	ef ef       	ldi	r30, 0xFF	; 255
     18a:	f7 e4       	ldi	r31, 0x47	; 71
     18c:	31 97       	sbiw	r30, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_wr_char+0x1a>
     190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_wr_char+0x20>
     192:	00 00       	nop
     194:	42 98       	cbi	0x08, 2	; 8
     196:	98 b1       	in	r25, 0x08	; 8
     198:	9f 70       	andi	r25, 0x0F	; 15
     19a:	98 b9       	out	0x08, r25	; 8
     19c:	98 b1       	in	r25, 0x08	; 8
     19e:	82 95       	swap	r24
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	89 2b       	or	r24, r25
     1a4:	88 b9       	out	0x08, r24	; 8
     1a6:	40 9a       	sbi	0x08, 0	; 8
     1a8:	41 98       	cbi	0x08, 1	; 8
     1aa:	42 9a       	sbi	0x08, 2	; 8
     1ac:	8f ef       	ldi	r24, 0xFF	; 255
     1ae:	97 e4       	ldi	r25, 0x47	; 71
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_wr_char+0x3e>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_wr_char+0x44>
     1b6:	00 00       	nop
     1b8:	42 98       	cbi	0x08, 2	; 8
     1ba:	08 95       	ret

000001bc <lcd_home>:
     1bc:	80 e8       	ldi	r24, 0x80	; 128
     1be:	b4 cf       	rjmp	.-152    	; 0x128 <lcd_wr_command>
     1c0:	08 95       	ret

000001c2 <lcd_cursor>:
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	69 f0       	breq	.+26     	; 0x1e0 <lcd_cursor+0x1e>
     1c6:	18 f4       	brcc	.+6      	; 0x1ce <lcd_cursor+0xc>
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <lcd_cursor+0x16>
     1cc:	08 95       	ret
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	59 f0       	breq	.+22     	; 0x1e8 <lcd_cursor+0x26>
     1d2:	84 30       	cpi	r24, 0x04	; 4
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <lcd_cursor+0x2e>
     1d6:	08 95       	ret
     1d8:	8f e7       	ldi	r24, 0x7F	; 127
     1da:	86 0f       	add	r24, r22
     1dc:	a5 cf       	rjmp	.-182    	; 0x128 <lcd_wr_command>
     1de:	08 95       	ret
     1e0:	8f eb       	ldi	r24, 0xBF	; 191
     1e2:	86 0f       	add	r24, r22
     1e4:	a1 cf       	rjmp	.-190    	; 0x128 <lcd_wr_command>
     1e6:	08 95       	ret
     1e8:	83 e9       	ldi	r24, 0x93	; 147
     1ea:	86 0f       	add	r24, r22
     1ec:	9d cf       	rjmp	.-198    	; 0x128 <lcd_wr_command>
     1ee:	08 95       	ret
     1f0:	83 ed       	ldi	r24, 0xD3	; 211
     1f2:	86 0f       	add	r24, r22
     1f4:	99 cf       	rjmp	.-206    	; 0x128 <lcd_wr_command>
     1f6:	08 95       	ret

000001f8 <lcd_print>:
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	8a 01       	movw	r16, r20
     202:	e9 01       	movw	r28, r18
     204:	88 23       	and	r24, r24
     206:	11 f0       	breq	.+4      	; 0x20c <lcd_print+0x14>
     208:	61 11       	cpse	r22, r1
     20a:	02 c0       	rjmp	.+4      	; 0x210 <lcd_print+0x18>
     20c:	d7 df       	rcall	.-82     	; 0x1bc <lcd_home>
     20e:	01 c0       	rjmp	.+2      	; 0x212 <lcd_print+0x1a>
     210:	d8 df       	rcall	.-80     	; 0x1c2 <lcd_cursor>
     212:	c5 30       	cpi	r28, 0x05	; 5
     214:	d1 05       	cpc	r29, r1
     216:	09 f0       	breq	.+2      	; 0x21a <lcd_print+0x22>
     218:	d5 c0       	rjmp	.+426    	; 0x3c4 <lcd_print+0x1cc>
     21a:	98 01       	movw	r18, r16
     21c:	32 95       	swap	r19
     21e:	22 95       	swap	r18
     220:	2f 70       	andi	r18, 0x0F	; 15
     222:	23 27       	eor	r18, r19
     224:	3f 70       	andi	r19, 0x0F	; 15
     226:	23 27       	eor	r18, r19
     228:	a7 e4       	ldi	r26, 0x47	; 71
     22a:	b3 e0       	ldi	r27, 0x03	; 3
     22c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     230:	96 95       	lsr	r25
     232:	87 95       	ror	r24
     234:	96 95       	lsr	r25
     236:	87 95       	ror	r24
     238:	96 95       	lsr	r25
     23a:	87 95       	ror	r24
     23c:	c0 96       	adiw	r24, 0x30	; 48
     23e:	90 93 23 02 	sts	0x0223, r25
     242:	80 93 22 02 	sts	0x0222, r24
     246:	95 df       	rcall	.-214    	; 0x172 <lcd_wr_char>
     248:	98 01       	movw	r18, r16
     24a:	36 95       	lsr	r19
     24c:	27 95       	ror	r18
     24e:	36 95       	lsr	r19
     250:	27 95       	ror	r18
     252:	36 95       	lsr	r19
     254:	27 95       	ror	r18
     256:	a5 ec       	ldi	r26, 0xC5	; 197
     258:	b0 e2       	ldi	r27, 0x20	; 32
     25a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     25e:	ac 01       	movw	r20, r24
     260:	52 95       	swap	r21
     262:	42 95       	swap	r20
     264:	4f 70       	andi	r20, 0x0F	; 15
     266:	45 27       	eor	r20, r21
     268:	5f 70       	andi	r21, 0x0F	; 15
     26a:	45 27       	eor	r20, r21
     26c:	50 93 28 02 	sts	0x0228, r21
     270:	40 93 27 02 	sts	0x0227, r20
     274:	9a 01       	movw	r18, r20
     276:	ad ec       	ldi	r26, 0xCD	; 205
     278:	bc ec       	ldi	r27, 0xCC	; 204
     27a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     27e:	96 95       	lsr	r25
     280:	87 95       	ror	r24
     282:	96 95       	lsr	r25
     284:	87 95       	ror	r24
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	9c 01       	movw	r18, r24
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
     2a0:	48 1b       	sub	r20, r24
     2a2:	59 0b       	sbc	r21, r25
     2a4:	ca 01       	movw	r24, r20
     2a6:	c0 96       	adiw	r24, 0x30	; 48
     2a8:	90 93 69 02 	sts	0x0269, r25
     2ac:	80 93 68 02 	sts	0x0268, r24
     2b0:	60 df       	rcall	.-320    	; 0x172 <lcd_wr_char>
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <lcd_print+0xc4>
     2b4:	c3 30       	cpi	r28, 0x03	; 3
     2b6:	d1 05       	cpc	r29, r1
     2b8:	09 f0       	breq	.+2      	; 0x2bc <lcd_print+0xc4>
     2ba:	89 c0       	rjmp	.+274    	; 0x3ce <lcd_print+0x1d6>
     2bc:	98 01       	movw	r18, r16
     2be:	36 95       	lsr	r19
     2c0:	27 95       	ror	r18
     2c2:	36 95       	lsr	r19
     2c4:	27 95       	ror	r18
     2c6:	ab e7       	ldi	r26, 0x7B	; 123
     2c8:	b4 e1       	ldi	r27, 0x14	; 20
     2ca:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     2ce:	ac 01       	movw	r20, r24
     2d0:	56 95       	lsr	r21
     2d2:	47 95       	ror	r20
     2d4:	50 93 28 02 	sts	0x0228, r21
     2d8:	40 93 27 02 	sts	0x0227, r20
     2dc:	9a 01       	movw	r18, r20
     2de:	ad ec       	ldi	r26, 0xCD	; 205
     2e0:	bc ec       	ldi	r27, 0xCC	; 204
     2e2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     2e6:	96 95       	lsr	r25
     2e8:	87 95       	ror	r24
     2ea:	96 95       	lsr	r25
     2ec:	87 95       	ror	r24
     2ee:	96 95       	lsr	r25
     2f0:	87 95       	ror	r24
     2f2:	9c 01       	movw	r18, r24
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	82 0f       	add	r24, r18
     306:	93 1f       	adc	r25, r19
     308:	48 1b       	sub	r20, r24
     30a:	59 0b       	sbc	r21, r25
     30c:	ca 01       	movw	r24, r20
     30e:	c0 96       	adiw	r24, 0x30	; 48
     310:	90 93 5e 02 	sts	0x025E, r25
     314:	80 93 5d 02 	sts	0x025D, r24
     318:	2c df       	rcall	.-424    	; 0x172 <lcd_wr_char>
     31a:	98 01       	movw	r18, r16
     31c:	ad ec       	ldi	r26, 0xCD	; 205
     31e:	bc ec       	ldi	r27, 0xCC	; 204
     320:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     324:	ac 01       	movw	r20, r24
     326:	56 95       	lsr	r21
     328:	47 95       	ror	r20
     32a:	56 95       	lsr	r21
     32c:	47 95       	ror	r20
     32e:	56 95       	lsr	r21
     330:	47 95       	ror	r20
     332:	50 93 28 02 	sts	0x0228, r21
     336:	40 93 27 02 	sts	0x0227, r20
     33a:	9a 01       	movw	r18, r20
     33c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     340:	96 95       	lsr	r25
     342:	87 95       	ror	r24
     344:	96 95       	lsr	r25
     346:	87 95       	ror	r24
     348:	96 95       	lsr	r25
     34a:	87 95       	ror	r24
     34c:	9c 01       	movw	r18, r24
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	48 1b       	sub	r20, r24
     364:	59 0b       	sbc	r21, r25
     366:	ca 01       	movw	r24, r20
     368:	c0 96       	adiw	r24, 0x30	; 48
     36a:	90 93 3a 02 	sts	0x023A, r25
     36e:	80 93 39 02 	sts	0x0239, r24
     372:	ff de       	rcall	.-514    	; 0x172 <lcd_wr_char>
     374:	03 c0       	rjmp	.+6      	; 0x37c <lcd_print+0x184>
     376:	c1 30       	cpi	r28, 0x01	; 1
     378:	d1 05       	cpc	r29, r1
     37a:	f9 f4       	brne	.+62     	; 0x3ba <lcd_print+0x1c2>
     37c:	98 01       	movw	r18, r16
     37e:	ad ec       	ldi	r26, 0xCD	; 205
     380:	bc ec       	ldi	r27, 0xCC	; 204
     382:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__umulhisi3>
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
     38e:	96 95       	lsr	r25
     390:	87 95       	ror	r24
     392:	9c 01       	movw	r18, r24
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	08 1b       	sub	r16, r24
     3aa:	19 0b       	sbc	r17, r25
     3ac:	c8 01       	movw	r24, r16
     3ae:	c0 96       	adiw	r24, 0x30	; 48
     3b0:	90 93 67 02 	sts	0x0267, r25
     3b4:	80 93 66 02 	sts	0x0266, r24
     3b8:	dc de       	rcall	.-584    	; 0x172 <lcd_wr_char>
     3ba:	26 97       	sbiw	r28, 0x06	; 6
     3bc:	64 f0       	brlt	.+24     	; 0x3d6 <lcd_print+0x1de>
     3be:	85 e4       	ldi	r24, 0x45	; 69
     3c0:	d8 de       	rcall	.-592    	; 0x172 <lcd_wr_char>
     3c2:	09 c0       	rjmp	.+18     	; 0x3d6 <lcd_print+0x1de>
     3c4:	c4 30       	cpi	r28, 0x04	; 4
     3c6:	d1 05       	cpc	r29, r1
     3c8:	09 f0       	breq	.+2      	; 0x3cc <lcd_print+0x1d4>
     3ca:	74 cf       	rjmp	.-280    	; 0x2b4 <lcd_print+0xbc>
     3cc:	3d cf       	rjmp	.-390    	; 0x248 <lcd_print+0x50>
     3ce:	c2 30       	cpi	r28, 0x02	; 2
     3d0:	d1 05       	cpc	r29, r1
     3d2:	89 f6       	brne	.-94     	; 0x376 <lcd_print+0x17e>
     3d4:	a2 cf       	rjmp	.-188    	; 0x31a <lcd_print+0x122>
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <motion_set>:
     3e0:	92 b1       	in	r25, 0x02	; 2
     3e2:	90 7f       	andi	r25, 0xF0	; 240
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	98 2b       	or	r25, r24
     3e8:	92 b9       	out	0x02, r25	; 2
     3ea:	08 95       	ret

000003ec <forward>:
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	f8 cf       	rjmp	.-16     	; 0x3e0 <motion_set>
     3f0:	08 95       	ret

000003f2 <left>:
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <motion_set>
     3f6:	08 95       	ret

000003f8 <right>:
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <motion_set>
     3fc:	08 95       	ret

000003fe <soft_left>:
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	ef cf       	rjmp	.-34     	; 0x3e0 <motion_set>
     402:	08 95       	ret

00000404 <soft_right>:
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	ec cf       	rjmp	.-40     	; 0x3e0 <motion_set>
     408:	08 95       	ret

0000040a <stop>:
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	e9 cf       	rjmp	.-46     	; 0x3e0 <motion_set>
     40e:	08 95       	ret

00000410 <buzzer_on>:
     410:	86 b1       	in	r24, 0x06	; 6
     412:	88 60       	ori	r24, 0x08	; 8
     414:	88 b9       	out	0x08, r24	; 8
     416:	08 95       	ret

00000418 <buzzer_off>:
     418:	86 b1       	in	r24, 0x06	; 6
     41a:	87 7f       	andi	r24, 0xF7	; 247
     41c:	88 b9       	out	0x08, r24	; 8
     41e:	08 95       	ret

00000420 <angle_rotate>:
     420:	10 92 08 02 	sts	0x0208, r1
     424:	10 92 09 02 	sts	0x0209, r1
     428:	10 92 0a 02 	sts	0x020A, r1
     42c:	10 92 0b 02 	sts	0x020B, r1
     430:	10 92 0c 02 	sts	0x020C, r1
     434:	10 92 0d 02 	sts	0x020D, r1
     438:	10 92 0e 02 	sts	0x020E, r1
     43c:	10 92 0f 02 	sts	0x020F, r1
     440:	bc 01       	movw	r22, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__floatunsisf>
     44a:	28 e4       	ldi	r18, 0x48	; 72
     44c:	31 ee       	ldi	r19, 0xE1	; 225
     44e:	42 e8       	ldi	r20, 0x82	; 130
     450:	50 e4       	ldi	r21, 0x40	; 64
     452:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__divsf3>
     456:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fixunssfsi>
     45a:	67 2b       	or	r22, r23
     45c:	11 f4       	brne	.+4      	; 0x462 <angle_rotate+0x42>
     45e:	d5 cf       	rjmp	.-86     	; 0x40a <stop>
     460:	08 95       	ret
     462:	ff cf       	rjmp	.-2      	; 0x462 <angle_rotate+0x42>

00000464 <ADC_Conversion>:
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	18 f0       	brcs	.+6      	; 0x46e <ADC_Conversion+0xa>
     468:	98 e0       	ldi	r25, 0x08	; 8
     46a:	90 93 7b 00 	sts	0x007B, r25
     46e:	87 70       	andi	r24, 0x07	; 7
     470:	80 62       	ori	r24, 0x20	; 32
     472:	80 93 7c 00 	sts	0x007C, r24
     476:	ea e7       	ldi	r30, 0x7A	; 122
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	80 64       	ori	r24, 0x40	; 64
     47e:	80 83       	st	Z, r24
     480:	80 81       	ld	r24, Z
     482:	84 ff       	sbrs	r24, 4
     484:	fd cf       	rjmp	.-6      	; 0x480 <ADC_Conversion+0x1c>
     486:	80 91 79 00 	lds	r24, 0x0079
     48a:	ea e7       	ldi	r30, 0x7A	; 122
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	90 81       	ld	r25, Z
     490:	90 61       	ori	r25, 0x10	; 16
     492:	90 83       	st	Z, r25
     494:	10 92 7b 00 	sts	0x007B, r1
     498:	08 95       	ret

0000049a <__vector_1>:
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	80 91 10 02 	lds	r24, 0x0210
     4b0:	90 91 11 02 	lds	r25, 0x0211
     4b4:	a0 91 12 02 	lds	r26, 0x0212
     4b8:	b0 91 13 02 	lds	r27, 0x0213
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	a1 1d       	adc	r26, r1
     4c0:	b1 1d       	adc	r27, r1
     4c2:	80 93 10 02 	sts	0x0210, r24
     4c6:	90 93 11 02 	sts	0x0211, r25
     4ca:	a0 93 12 02 	sts	0x0212, r26
     4ce:	b0 93 13 02 	sts	0x0213, r27
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <servo_1>:
     4e4:	10 92 89 00 	sts	0x0089, r1
     4e8:	68 2f       	mov	r22, r24
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__floatunsisf>
     4f4:	2b e7       	ldi	r18, 0x7B	; 123
     4f6:	34 e1       	ldi	r19, 0x14	; 20
     4f8:	4e ee       	ldi	r20, 0xEE	; 238
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__divsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	4c e0       	ldi	r20, 0x0C	; 12
     506:	52 e4       	ldi	r21, 0x42	; 66
     508:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__addsf3>
     50c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fixunssfsi>
     510:	60 93 88 00 	sts	0x0088, r22
     514:	08 95       	ret

00000516 <Uturn>:
     516:	76 df       	rcall	.-276    	; 0x404 <soft_right>
     518:	2f ef       	ldi	r18, 0xFF	; 255
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9b e6       	ldi	r25, 0x6B	; 107
     51e:	21 50       	subi	r18, 0x01	; 1
     520:	80 40       	sbci	r24, 0x00	; 0
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <Uturn+0x8>
     526:	00 c0       	rjmp	.+0      	; 0x528 <Uturn+0x12>
     528:	00 00       	nop
     52a:	6f cf       	rjmp	.-290    	; 0x40a <stop>
     52c:	08 95       	ret

0000052e <setIndicatorAndColor>:
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cb e4       	ldi	r28, 0x4B	; 75
     534:	d2 e0       	ldi	r29, 0x02	; 2
     536:	eb e3       	ldi	r30, 0x3B	; 59
     538:	f2 e0       	ldi	r31, 0x02	; 2
     53a:	a4 e1       	ldi	r26, 0x14	; 20
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	2e ef       	ldi	r18, 0xFE	; 254
     544:	3f ef       	ldi	r19, 0xFF	; 255
     546:	89 93       	st	Y+, r24
     548:	99 93       	st	Y+, r25
     54a:	33 83       	std	Z+3, r19	; 0x03
     54c:	22 83       	std	Z+2, r18	; 0x02
     54e:	31 83       	std	Z+1, r19	; 0x01
     550:	20 83       	st	Z, r18
     552:	1d 92       	st	X+, r1
     554:	1d 92       	st	X+, r1
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	34 96       	adiw	r30, 0x04	; 4
     55a:	84 30       	cpi	r24, 0x04	; 4
     55c:	91 05       	cpc	r25, r1
     55e:	99 f7       	brne	.-26     	; 0x546 <setIndicatorAndColor+0x18>
     560:	e0 91 4b 02 	lds	r30, 0x024B
     564:	f0 91 4c 02 	lds	r31, 0x024C
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	ed 5a       	subi	r30, 0xAD	; 173
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	11 82       	std	Z+1, r1	; 0x01
     572:	10 82       	st	Z, r1
     574:	e0 91 4d 02 	lds	r30, 0x024D
     578:	f0 91 4e 02 	lds	r31, 0x024E
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	ed 5a       	subi	r30, 0xAD	; 173
     582:	fd 4f       	sbci	r31, 0xFD	; 253
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
     58c:	e0 91 4f 02 	lds	r30, 0x024F
     590:	f0 91 50 02 	lds	r31, 0x0250
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	ed 5a       	subi	r30, 0xAD	; 173
     59a:	fd 4f       	sbci	r31, 0xFD	; 253
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
     5a4:	e0 91 51 02 	lds	r30, 0x0251
     5a8:	f0 91 52 02 	lds	r31, 0x0252
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	ed 5a       	subi	r30, 0xAD	; 173
     5b2:	fd 4f       	sbci	r31, 0xFD	; 253
     5b4:	83 e0       	ldi	r24, 0x03	; 3
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	91 83       	std	Z+1, r25	; 0x01
     5ba:	80 83       	st	Z, r24
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	9f ef       	ldi	r25, 0xFF	; 255
     5c0:	90 93 36 02 	sts	0x0236, r25
     5c4:	80 93 35 02 	sts	0x0235, r24
     5c8:	90 93 34 02 	sts	0x0234, r25
     5cc:	80 93 33 02 	sts	0x0233, r24
     5d0:	90 93 63 02 	sts	0x0263, r25
     5d4:	80 93 62 02 	sts	0x0262, r24
     5d8:	90 93 61 02 	sts	0x0261, r25
     5dc:	80 93 60 02 	sts	0x0260, r24
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <terminalCheck>:
void terminalCheck()
{
	turnRight();
	//..printf("Enter term[%d][%d]\n",ct,0);
	//..scanf("%d",&term[ct][0]);
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
     5e6:	20 91 37 02 	lds	r18, 0x0237
     5ea:	30 91 38 02 	lds	r19, 0x0238
     5ee:	f9 01       	movw	r30, r18
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	e5 5c       	subi	r30, 0xC5	; 197
     5fa:	fd 4f       	sbci	r31, 0xFD	; 253
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	8f 3f       	cpi	r24, 0xFF	; 255
     602:	4f ef       	ldi	r20, 0xFF	; 255
     604:	94 07       	cpc	r25, r20
     606:	51 f0       	breq	.+20     	; 0x61c <terminalCheck+0x36>
     608:	f9 01       	movw	r30, r18
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	e5 5b       	subi	r30, 0xB5	; 181
     610:	fd 4f       	sbci	r31, 0xFD	; 253
     612:	20 81       	ld	r18, Z
     614:	31 81       	ldd	r19, Z+1	; 0x01
     616:	82 17       	cp	r24, r18
     618:	93 07       	cpc	r25, r19
     61a:	49 f4       	brne	.+18     	; 0x62e <terminalCheck+0x48>
		total--;
     61c:	80 91 00 02 	lds	r24, 0x0200
     620:	90 91 01 02 	lds	r25, 0x0201
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	90 93 01 02 	sts	0x0201, r25
     62a:	80 93 00 02 	sts	0x0200, r24
	Uturn();
     62e:	73 df       	rcall	.-282    	; 0x516 <Uturn>
	//..printf("Enter term[%d][%d]\n",ct,1);
	//..scanf("%d",&term[ct][1]);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
     630:	80 91 37 02 	lds	r24, 0x0237
     634:	90 91 38 02 	lds	r25, 0x0238
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	e5 5c       	subi	r30, 0xC5	; 197
     644:	fd 4f       	sbci	r31, 0xFD	; 253
     646:	22 81       	ldd	r18, Z+2	; 0x02
     648:	33 81       	ldd	r19, Z+3	; 0x03
     64a:	2f 3f       	cpi	r18, 0xFF	; 255
     64c:	4f ef       	ldi	r20, 0xFF	; 255
     64e:	34 07       	cpc	r19, r20
     650:	51 f0       	breq	.+20     	; 0x666 <terminalCheck+0x80>
     652:	fc 01       	movw	r30, r24
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	e5 5b       	subi	r30, 0xB5	; 181
     65a:	fd 4f       	sbci	r31, 0xFD	; 253
     65c:	40 81       	ld	r20, Z
     65e:	51 81       	ldd	r21, Z+1	; 0x01
     660:	24 17       	cp	r18, r20
     662:	35 07       	cpc	r19, r21
     664:	51 f4       	brne	.+20     	; 0x67a <terminalCheck+0x94>
		total--;
     666:	20 91 00 02 	lds	r18, 0x0200
     66a:	30 91 01 02 	lds	r19, 0x0201
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	31 09       	sbc	r19, r1
     672:	30 93 01 02 	sts	0x0201, r19
     676:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
     67a:	fc 01       	movw	r30, r24
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ec 5e       	subi	r30, 0xEC	; 236
     682:	fd 4f       	sbci	r31, 0xFD	; 253
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	91 83       	std	Z+1, r25	; 0x01
     68a:	80 83       	st	Z, r24
	visitedCount++;
     68c:	80 91 04 02 	lds	r24, 0x0204
     690:	90 91 05 02 	lds	r25, 0x0205
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	90 93 05 02 	sts	0x0205, r25
     69a:	80 93 04 02 	sts	0x0204, r24
     69e:	08 95       	ret

000006a0 <nodeRight>:
}

void nodeRight()
{
	soft_right();
     6a0:	b1 de       	rcall	.-670    	; 0x404 <soft_right>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a2:	2f ef       	ldi	r18, 0xFF	; 255
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	9e e3       	ldi	r25, 0x3E	; 62
     6a8:	21 50       	subi	r18, 0x01	; 1
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	90 40       	sbci	r25, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <nodeRight+0x8>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <nodeRight+0x12>
     6b2:	00 00       	nop
	_delay_ms(1400);	//for 255,255;; more for 200,200
	stop();
     6b4:	aa ce       	rjmp	.-684    	; 0x40a <stop>
     6b6:	08 95       	ret

000006b8 <nodeLeft>:
}
void nodeLeft()
{
	soft_left();
     6b8:	a2 de       	rcall	.-700    	; 0x3fe <soft_left>
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9e e3       	ldi	r25, 0x3E	; 62
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	90 40       	sbci	r25, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <nodeLeft+0x8>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <nodeLeft+0x12>
     6ca:	00 00       	nop
	_delay_ms(1400);	//for 255,255;; more for 200,200
	stop();
     6cc:	9e ce       	rjmp	.-708    	; 0x40a <stop>
     6ce:	08 95       	ret

000006d0 <buzzer>:
}

void buzzer()
{

	buzzer_on();
     6d0:	9f de       	rcall	.-706    	; 0x410 <buzzer_on>
	////_delay_ms(1000);
	buzzer_off();
     6d2:	a2 ce       	rjmp	.-700    	; 0x418 <buzzer_off>
     6d4:	08 95       	ret

000006d6 <set_color>:
}

void set_color()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	c5 de       	rcall	.-630    	; 0x464 <ADC_Conversion>
     6da:	80 93 24 02 	sts	0x0224, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	c1 de       	rcall	.-638    	; 0x464 <ADC_Conversion>
     6e2:	80 93 5f 02 	sts	0x025F, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	bd de       	rcall	.-646    	; 0x464 <ADC_Conversion>
     6ea:	80 93 32 02 	sts	0x0232, r24
     6ee:	08 95       	ret

000006f0 <correct>:

}

void correct()
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
	unsigned int i = 0;
	Degrees = 5;
     6f4:	85 e0       	ldi	r24, 0x05	; 5
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 21 02 	sts	0x0221, r25
     6fc:	80 93 20 02 	sts	0x0220, r24
     700:	c3 e0       	ldi	r28, 0x03	; 3
     702:	d0 e0       	ldi	r29, 0x00	; 0
	for (; i < 3; i++)
	{
		left(); //Left wheel backward, Right wheel forward
     704:	76 de       	rcall	.-788    	; 0x3f2 <left>
		lcd_print(2, 7, 777, 3);
     706:	23 e0       	ldi	r18, 0x03	; 3
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	49 e0       	ldi	r20, 0x09	; 9
     70c:	53 e0       	ldi	r21, 0x03	; 3
     70e:	67 e0       	ldi	r22, 0x07	; 7
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	72 dd       	rcall	.-1308   	; 0x1f8 <lcd_print>
		angle_rotate(Degrees);
     714:	80 91 20 02 	lds	r24, 0x0220
     718:	90 91 21 02 	lds	r25, 0x0221
     71c:	81 de       	rcall	.-766    	; 0x420 <angle_rotate>
		stop();
     71e:	75 de       	rcall	.-790    	; 0x40a <stop>
		set_color();
     720:	da df       	rcall	.-76     	; 0x6d6 <set_color>
		if (Center_white_line>40)
     722:	80 91 5f 02 	lds	r24, 0x025F
     726:	89 32       	cpi	r24, 0x29	; 41
     728:	68 f4       	brcc	.+26     	; 0x744 <correct+0x54>
     72a:	21 97       	sbiw	r28, 0x01	; 1

void correct()
{
	unsigned int i = 0;
	Degrees = 5;
	for (; i < 3; i++)
     72c:	20 97       	sbiw	r28, 0x00	; 0
     72e:	51 f7       	brne	.-44     	; 0x704 <correct+0x14>
		set_color();
		if (Center_white_line>40)
			return;
	}
	//normal
	right();
     730:	63 de       	rcall	.-826    	; 0x3f8 <right>
	while (Center_white_line < 40)
     732:	80 91 5f 02 	lds	r24, 0x025F
     736:	88 32       	cpi	r24, 0x28	; 40
     738:	28 f4       	brcc	.+10     	; 0x744 <correct+0x54>
	{
		//	lcd_print(2,1,7,1);
		set_color();
     73a:	cd df       	rcall	.-102    	; 0x6d6 <set_color>
		if (Center_white_line>40)
			return;
	}
	//normal
	right();
	while (Center_white_line < 40)
     73c:	80 91 5f 02 	lds	r24, 0x025F
     740:	88 32       	cpi	r24, 0x28	; 40
     742:	d8 f3       	brcs	.-10     	; 0x73a <correct+0x4a>
		//	lcd_print(2,1,7,1);
		set_color();

	}
	return;
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <noNatak>:
void noNatak()
{
	//buzzer_on();
	//lcd_print(2,1,7,1);
	correct();
     74a:	d2 df       	rcall	.-92     	; 0x6f0 <correct>

	stop();
     74c:	5e ce       	rjmp	.-836    	; 0x40a <stop>
     74e:	08 95       	ret

00000750 <forwardJaa>:
	//buzzer_off();

}

void forwardJaa()
{
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     75a:	08 e2       	ldi	r16, 0x28	; 40
     75c:	11 e0       	ldi	r17, 0x01	; 1
     75e:	0f 2e       	mov	r0, r31
     760:	f8 ec       	ldi	r31, 0xC8	; 200
     762:	ff 2e       	mov	r15, r31
     764:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     766:	ca e2       	ldi	r28, 0x2A	; 42
     768:	d1 e0       	ldi	r29, 0x01	; 1
	do
	{
		set_color();
     76a:	b5 df       	rcall	.-150    	; 0x6d6 <set_color>
		if (Center_white_line > 40 && (Left_white_line > 40 || Right_white_line > 40))
     76c:	80 91 5f 02 	lds	r24, 0x025F
     770:	89 32       	cpi	r24, 0x29	; 41
     772:	50 f0       	brcs	.+20     	; 0x788 <forwardJaa+0x38>
     774:	80 91 24 02 	lds	r24, 0x0224
     778:	89 32       	cpi	r24, 0x29	; 41
     77a:	20 f4       	brcc	.+8      	; 0x784 <forwardJaa+0x34>
     77c:	80 91 32 02 	lds	r24, 0x0232
     780:	89 32       	cpi	r24, 0x29	; 41
     782:	10 f0       	brcs	.+4      	; 0x788 <forwardJaa+0x38>
		{
			forward();
     784:	33 de       	rcall	.-922    	; 0x3ec <forward>
			//_delay_ms(4000);
			return;
     786:	0a c0       	rjmp	.+20     	; 0x79c <forwardJaa+0x4c>
		/*
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		*/
		forward();
     788:	31 de       	rcall	.-926    	; 0x3ec <forward>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     78a:	f8 01       	movw	r30, r16
     78c:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     78e:	f8 82       	st	Y, r15
		velocity(200, 200);

	} while (Center_white_line > 0x28);
     790:	80 91 5f 02 	lds	r24, 0x025F
     794:	89 32       	cpi	r24, 0x29	; 41
     796:	48 f7       	brcc	.-46     	; 0x76a <forwardJaa+0x1a>

	noNatak();
     798:	d8 df       	rcall	.-80     	; 0x74a <noNatak>
	forwardJaa();
     79a:	da df       	rcall	.-76     	; 0x750 <forwardJaa>
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	08 95       	ret

000007a8 <travel>:

void travel(unsigned char CT,unsigned char nxTerm)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	c8 2f       	mov	r28, r24
     7ae:	d6 2f       	mov	r29, r22

	forwardJaa();
     7b0:	cf df       	rcall	.-98     	; 0x750 <forwardJaa>
	if ((CT == 1 && (nxTerm == 2 || nxTerm == 4)) || (CT == 4 && (nxTerm == 1 || nxTerm == 3)))
     7b2:	c1 30       	cpi	r28, 0x01	; 1
     7b4:	29 f4       	brne	.+10     	; 0x7c0 <travel+0x18>
     7b6:	d2 30       	cpi	r29, 0x02	; 2
     7b8:	09 f1       	breq	.+66     	; 0x7fc <travel+0x54>
     7ba:	d4 30       	cpi	r29, 0x04	; 4
     7bc:	89 f4       	brne	.+34     	; 0x7e0 <travel+0x38>
     7be:	1a c0       	rjmp	.+52     	; 0x7f4 <travel+0x4c>
     7c0:	c4 30       	cpi	r28, 0x04	; 4
     7c2:	39 f4       	brne	.+14     	; 0x7d2 <travel+0x2a>
     7c4:	d1 30       	cpi	r29, 0x01	; 1
     7c6:	f9 f0       	breq	.+62     	; 0x806 <travel+0x5e>
     7c8:	d3 30       	cpi	r29, 0x03	; 3
     7ca:	81 f4       	brne	.+32     	; 0x7ec <travel+0x44>
     7cc:	17 c0       	rjmp	.+46     	; 0x7fc <travel+0x54>
		nodeLeft();
		forwardJaa();
		//_delay_ms(1000);
		forwardJaa();
		if (nxTerm == 1 || nxTerm == 4)
			nodeRight();
     7ce:	68 df       	rcall	.-304    	; 0x6a0 <nodeRight>
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <travel+0x44>
		else
			nodeLeft();
	}
	else if ((CT == 2 && (nxTerm == 3 || nxTerm == 1)) || (CT == 3 && (nxTerm == 4 || nxTerm == 2)))
     7d2:	c2 30       	cpi	r28, 0x02	; 2
     7d4:	29 f4       	brne	.+10     	; 0x7e0 <travel+0x38>
     7d6:	d3 30       	cpi	r29, 0x03	; 3
     7d8:	d1 f0       	breq	.+52     	; 0x80e <travel+0x66>
     7da:	d1 30       	cpi	r29, 0x01	; 1
     7dc:	39 f4       	brne	.+14     	; 0x7ec <travel+0x44>
     7de:	1c c0       	rjmp	.+56     	; 0x818 <travel+0x70>
     7e0:	c3 30       	cpi	r28, 0x03	; 3
     7e2:	21 f4       	brne	.+8      	; 0x7ec <travel+0x44>
     7e4:	d4 30       	cpi	r29, 0x04	; 4
     7e6:	c1 f0       	breq	.+48     	; 0x818 <travel+0x70>
     7e8:	d2 30       	cpi	r29, 0x02	; 2
     7ea:	89 f0       	breq	.+34     	; 0x80e <travel+0x66>
	}
	else
	{
		//_delay_ms(1000);
	}
	forwardJaa();
     7ec:	b1 df       	rcall	.-158    	; 0x750 <forwardJaa>
	stop();
     7ee:	0d de       	rcall	.-998    	; 0x40a <stop>
	buzzer();
     7f0:	6f df       	rcall	.-290    	; 0x6d0 <buzzer>
     7f2:	17 c0       	rjmp	.+46     	; 0x822 <travel+0x7a>
{

	forwardJaa();
	if ((CT == 1 && (nxTerm == 2 || nxTerm == 4)) || (CT == 4 && (nxTerm == 1 || nxTerm == 3)))
	{
		nodeLeft();
     7f4:	61 df       	rcall	.-318    	; 0x6b8 <nodeLeft>
		forwardJaa();
     7f6:	ac df       	rcall	.-168    	; 0x750 <forwardJaa>
		//_delay_ms(1000);
		forwardJaa();
     7f8:	ab df       	rcall	.-170    	; 0x750 <forwardJaa>
     7fa:	e9 cf       	rjmp	.-46     	; 0x7ce <travel+0x26>
{

	forwardJaa();
	if ((CT == 1 && (nxTerm == 2 || nxTerm == 4)) || (CT == 4 && (nxTerm == 1 || nxTerm == 3)))
	{
		nodeLeft();
     7fc:	5d df       	rcall	.-326    	; 0x6b8 <nodeLeft>
		forwardJaa();
     7fe:	a8 df       	rcall	.-176    	; 0x750 <forwardJaa>
		//_delay_ms(1000);
		forwardJaa();
     800:	a7 df       	rcall	.-178    	; 0x750 <forwardJaa>
		if (nxTerm == 1 || nxTerm == 4)
			nodeRight();
		else
			nodeLeft();
     802:	5a df       	rcall	.-332    	; 0x6b8 <nodeLeft>
     804:	f3 cf       	rjmp	.-26     	; 0x7ec <travel+0x44>
{

	forwardJaa();
	if ((CT == 1 && (nxTerm == 2 || nxTerm == 4)) || (CT == 4 && (nxTerm == 1 || nxTerm == 3)))
	{
		nodeLeft();
     806:	58 df       	rcall	.-336    	; 0x6b8 <nodeLeft>
		forwardJaa();
     808:	a3 df       	rcall	.-186    	; 0x750 <forwardJaa>
		//_delay_ms(1000);
		forwardJaa();
     80a:	a2 df       	rcall	.-188    	; 0x750 <forwardJaa>
     80c:	e0 cf       	rjmp	.-64     	; 0x7ce <travel+0x26>
		else
			nodeLeft();
	}
	else if ((CT == 2 && (nxTerm == 3 || nxTerm == 1)) || (CT == 3 && (nxTerm == 4 || nxTerm == 2)))
	{
		nodeRight();
     80e:	48 df       	rcall	.-368    	; 0x6a0 <nodeRight>
		forwardJaa();
     810:	9f df       	rcall	.-194    	; 0x750 <forwardJaa>
		//_delay_ms(500);
		forwardJaa();
     812:	9e df       	rcall	.-196    	; 0x750 <forwardJaa>
		if (nxTerm == 2 || nxTerm == 3)
			nodeLeft();
     814:	51 df       	rcall	.-350    	; 0x6b8 <nodeLeft>
     816:	ea cf       	rjmp	.-44     	; 0x7ec <travel+0x44>
		else
			nodeLeft();
	}
	else if ((CT == 2 && (nxTerm == 3 || nxTerm == 1)) || (CT == 3 && (nxTerm == 4 || nxTerm == 2)))
	{
		nodeRight();
     818:	43 df       	rcall	.-378    	; 0x6a0 <nodeRight>
		forwardJaa();
     81a:	9a df       	rcall	.-204    	; 0x750 <forwardJaa>
		//_delay_ms(500);
		forwardJaa();
     81c:	99 df       	rcall	.-206    	; 0x750 <forwardJaa>
		if (nxTerm == 2 || nxTerm == 3)
			nodeLeft();
		else
			nodeRight();
     81e:	40 df       	rcall	.-384    	; 0x6a0 <nodeRight>
     820:	e5 cf       	rjmp	.-54     	; 0x7ec <travel+0x44>
		//_delay_ms(1000);
	}
	forwardJaa();
	stop();
	buzzer();
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <elevate>:

void elevate(unsigned char angle, unsigned char side)
{
	if (side == 0)
     828:	61 11       	cpse	r22, r1
     82a:	02 c0       	rjmp	.+4      	; 0x830 <elevate+0x8>
	servo_1(angle);
     82c:	5b ce       	rjmp	.-842    	; 0x4e4 <servo_1>
     82e:	08 95       	ret
	else if (side == 1)
     830:	61 30       	cpi	r22, 0x01	; 1
     832:	31 f4       	brne	.+12     	; 0x840 <elevate+0x18>
	servo_1((angle == 45) ? 0 : 45);
     834:	8d 32       	cpi	r24, 0x2D	; 45
     836:	11 f4       	brne	.+4      	; 0x83c <elevate+0x14>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	01 c0       	rjmp	.+2      	; 0x83e <elevate+0x16>
     83c:	8d e2       	ldi	r24, 0x2D	; 45
     83e:	52 ce       	rjmp	.-860    	; 0x4e4 <servo_1>
     840:	08 95       	ret

00000842 <open>:
}
void open(unsigned char side)
{
	if (side == 0)
     842:	81 11       	cpse	r24, r1
     844:	06 c0       	rjmp	.+12     	; 0x852 <open+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     846:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     84a:	83 e8       	ldi	r24, 0x83	; 131
     84c:	80 93 8a 00 	sts	0x008A, r24
     850:	08 95       	ret
	servo_2(180);
	else if (side == 1)
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	29 f4       	brne	.+10     	; 0x860 <open+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     856:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     85a:	83 e8       	ldi	r24, 0x83	; 131
     85c:	80 93 8c 00 	sts	0x008C, r24
     860:	08 95       	ret

00000862 <close>:
	servo_3(180);
}
void close(unsigned char side)
{
	if (side == 0)
     862:	81 11       	cpse	r24, r1
     864:	06 c0       	rjmp	.+12     	; 0x872 <close+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     866:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     86a:	83 e2       	ldi	r24, 0x23	; 35
     86c:	80 93 8a 00 	sts	0x008A, r24
     870:	08 95       	ret
	servo_2(0);
	else if (side == 1)
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	29 f4       	brne	.+10     	; 0x880 <close+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     876:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     87a:	83 e2       	ldi	r24, 0x23	; 35
     87c:	80 93 8c 00 	sts	0x008C, r24
     880:	08 95       	ret

00000882 <pick>:
	servo_3(0);
}
void pick(int side)
{
     882:	cf 93       	push	r28
     884:	c8 2f       	mov	r28, r24
	armCount--;
     886:	20 91 02 02 	lds	r18, 0x0202
     88a:	30 91 03 02 	lds	r19, 0x0203
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	31 09       	sbc	r19, r1
     892:	30 93 03 02 	sts	0x0203, r19
     896:	20 93 02 02 	sts	0x0202, r18
	elevate(0, side);//lower
     89a:	68 2f       	mov	r22, r24
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	c4 df       	rcall	.-120    	; 0x828 <elevate>
	open(side);
     8a0:	8c 2f       	mov	r24, r28
     8a2:	cf df       	rcall	.-98     	; 0x842 <open>
	close(side);
     8a4:	8c 2f       	mov	r24, r28
     8a6:	dd df       	rcall	.-70     	; 0x862 <close>
	elevate(45, side);//mid
     8a8:	6c 2f       	mov	r22, r28
     8aa:	8d e2       	ldi	r24, 0x2D	; 45
     8ac:	bd df       	rcall	.-134    	; 0x828 <elevate>
}
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <pickNode>:

void pickNode(int armNo, int side)
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	8c 01       	movw	r16, r24
     8bc:	eb 01       	movw	r28, r22
	//..printf("Arm %d picked %d from term[%d][%d]\n",armNo,term[ct][side],ct,side);
	arm[armNo] = term[ct][side];
     8be:	fc 01       	movw	r30, r24
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e0 5a       	subi	r30, 0xA0	; 160
     8c6:	fd 4f       	sbci	r31, 0xFD	; 253
     8c8:	a0 91 37 02 	lds	r26, 0x0237
     8cc:	b0 91 38 02 	lds	r27, 0x0238
     8d0:	aa 0f       	add	r26, r26
     8d2:	bb 1f       	adc	r27, r27
     8d4:	a6 0f       	add	r26, r22
     8d6:	b7 1f       	adc	r27, r23
     8d8:	aa 0f       	add	r26, r26
     8da:	bb 1f       	adc	r27, r27
     8dc:	a5 5c       	subi	r26, 0xC5	; 197
     8de:	bd 4f       	sbci	r27, 0xFD	; 253
     8e0:	8d 91       	ld	r24, X+
     8e2:	9c 91       	ld	r25, X
     8e4:	91 83       	std	Z+1, r25	; 0x01
     8e6:	80 83       	st	Z, r24
	if (armNo != side)
     8e8:	06 17       	cp	r16, r22
     8ea:	17 07       	cpc	r17, r23
     8ec:	a9 f0       	breq	.+42     	; 0x918 <pickNode+0x66>
		Uturn();
     8ee:	13 de       	rcall	.-986    	; 0x516 <Uturn>
	pick(armNo);
     8f0:	c8 01       	movw	r24, r16
     8f2:	c7 df       	rcall	.-114    	; 0x882 <pick>
	if (armNo != side)
		Uturn();
     8f4:	10 de       	rcall	.-992    	; 0x516 <Uturn>
	term[ct][side] = -1;
     8f6:	80 91 37 02 	lds	r24, 0x0237
     8fa:	90 91 38 02 	lds	r25, 0x0238
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	c8 0f       	add	r28, r24
     904:	d9 1f       	adc	r29, r25
     906:	cc 0f       	add	r28, r28
     908:	dd 1f       	adc	r29, r29
     90a:	c5 5c       	subi	r28, 0xC5	; 197
     90c:	dd 4f       	sbci	r29, 0xFD	; 253
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	9f ef       	ldi	r25, 0xFF	; 255
     912:	99 83       	std	Y+1, r25	; 0x01
     914:	88 83       	st	Y, r24
     916:	03 c0       	rjmp	.+6      	; 0x91e <pickNode+0x6c>
{
	//..printf("Arm %d picked %d from term[%d][%d]\n",armNo,term[ct][side],ct,side);
	arm[armNo] = term[ct][side];
	if (armNo != side)
		Uturn();
	pick(armNo);
     918:	c8 01       	movw	r24, r16
     91a:	b3 df       	rcall	.-154    	; 0x882 <pick>
     91c:	ec cf       	rjmp	.-40     	; 0x8f6 <pickNode+0x44>
	if (armNo != side)
		Uturn();
	term[ct][side] = -1;
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <pickSort>:

void pickSort(int armNo, int sortNo)
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
	//..printf("Arm %d picked %d from sort[%d]\n",armNo,sort[sortNo],sortNo);
	arm[armNo] = sort[sortNo];
     92c:	fc 01       	movw	r30, r24
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	e0 5a       	subi	r30, 0xA0	; 160
     934:	fd 4f       	sbci	r31, 0xFD	; 253
     936:	eb 01       	movw	r28, r22
     938:	cc 0f       	add	r28, r28
     93a:	dd 1f       	adc	r29, r29
     93c:	cd 5c       	subi	r28, 0xCD	; 205
     93e:	dd 4f       	sbci	r29, 0xFD	; 253
     940:	28 81       	ld	r18, Y
     942:	39 81       	ldd	r19, Y+1	; 0x01
     944:	31 83       	std	Z+1, r19	; 0x01
     946:	20 83       	st	Z, r18
	if (armNo == 0)
		turnLeft();
	else turnRight();
	pick(armNo);
     948:	9c df       	rcall	.-200    	; 0x882 <pick>
	if (armNo == 0)
		turnRight();
	else turnLeft();
	sort[sortNo] = -1;
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	9f ef       	ldi	r25, 0xFF	; 255
     94e:	99 83       	std	Y+1, r25	; 0x01
     950:	88 83       	st	Y, r24
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <pickup>:
void pickup()
{
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
	if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
     960:	80 91 37 02 	lds	r24, 0x0237
     964:	90 91 38 02 	lds	r25, 0x0238
     968:	fc 01       	movw	r30, r24
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	e5 5c       	subi	r30, 0xC5	; 197
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	20 81       	ld	r18, Z
     978:	31 81       	ldd	r19, Z+1	; 0x01
     97a:	fc 01       	movw	r30, r24
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	e5 5b       	subi	r30, 0xB5	; 181
     982:	fd 4f       	sbci	r31, 0xFD	; 253
     984:	40 81       	ld	r20, Z
     986:	51 81       	ldd	r21, Z+1	; 0x01
     988:	24 17       	cp	r18, r20
     98a:	35 07       	cpc	r19, r21
     98c:	21 f0       	breq	.+8      	; 0x996 <pickup+0x3e>
     98e:	2f 3f       	cpi	r18, 0xFF	; 255
     990:	6f ef       	ldi	r22, 0xFF	; 255
     992:	36 07       	cpc	r19, r22
     994:	89 f4       	brne	.+34     	; 0x9b8 <pickup+0x60>
     996:	fc 01       	movw	r30, r24
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	e5 5c       	subi	r30, 0xC5	; 197
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	46 17       	cp	r20, r22
     9aa:	57 07       	cpc	r21, r23
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <pickup+0x58>
     9ae:	e2 c1       	rjmp	.+964    	; 0xd74 <pickup+0x41c>
     9b0:	6f 3f       	cpi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <pickup+0x60>
     9b6:	de c1       	rjmp	.+956    	; 0xd74 <pickup+0x41c>
	{
		if (armCount == 2)
     9b8:	60 91 02 02 	lds	r22, 0x0202
     9bc:	70 91 03 02 	lds	r23, 0x0203
     9c0:	62 30       	cpi	r22, 0x02	; 2
     9c2:	71 05       	cpc	r23, r1
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <pickup+0x70>
     9c6:	a6 c0       	rjmp	.+332    	; 0xb14 <pickup+0x1bc>
		{

			if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
     9c8:	e0 91 5b 02 	lds	r30, 0x025B
     9cc:	f0 91 5c 02 	lds	r31, 0x025C
     9d0:	df 01       	movw	r26, r30
     9d2:	aa 0f       	add	r26, r26
     9d4:	bb 1f       	adc	r27, r27
     9d6:	a5 5b       	subi	r26, 0xB5	; 181
     9d8:	bd 4f       	sbci	r27, 0xFD	; 253
     9da:	6d 91       	ld	r22, X+
     9dc:	7c 91       	ld	r23, X
     9de:	26 17       	cp	r18, r22
     9e0:	37 07       	cpc	r19, r23
     9e2:	79 f0       	breq	.+30     	; 0xa02 <pickup+0xaa>
     9e4:	dc 01       	movw	r26, r24
     9e6:	aa 0f       	add	r26, r26
     9e8:	bb 1f       	adc	r27, r27
     9ea:	aa 0f       	add	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	a5 5c       	subi	r26, 0xC5	; 197
     9f0:	bd 4f       	sbci	r27, 0xFD	; 253
     9f2:	12 96       	adiw	r26, 0x02	; 2
     9f4:	0d 90       	ld	r0, X+
     9f6:	bc 91       	ld	r27, X
     9f8:	a0 2d       	mov	r26, r0
     9fa:	6a 17       	cp	r22, r26
     9fc:	7b 07       	cpc	r23, r27
     9fe:	69 f4       	brne	.+26     	; 0xa1a <pickup+0xc2>
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <pickup+0xb6>
				if (term[ct][0] == color[adj])
					pickNode(0, 0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	53 df       	rcall	.-346    	; 0x8b2 <pickNode>
     a0c:	83 c0       	rjmp	.+262    	; 0xb14 <pickup+0x1bc>
				else	pickNode(1, 1);
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	4d df       	rcall	.-358    	; 0x8b2 <pickNode>
     a18:	7d c0       	rjmp	.+250    	; 0xb14 <pickup+0x1bc>
			else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
     a1a:	4a 17       	cp	r20, r26
     a1c:	5b 07       	cpc	r21, r27
     a1e:	09 f4       	brne	.+2      	; 0xa22 <pickup+0xca>
     a20:	43 c0       	rjmp	.+134    	; 0xaa8 <pickup+0x150>
     a22:	11 96       	adiw	r26, 0x01	; 1
     a24:	09 f4       	brne	.+2      	; 0xa28 <pickup+0xd0>
     a26:	40 c0       	rjmp	.+128    	; 0xaa8 <pickup+0x150>
			{
				if (term[ct][0] != color[ct] && term[ct][0] != -1)
     a28:	24 17       	cp	r18, r20
     a2a:	35 07       	cpc	r19, r21
     a2c:	71 f0       	breq	.+28     	; 0xa4a <pickup+0xf2>
     a2e:	2f 3f       	cpi	r18, 0xFF	; 255
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	59 f0       	breq	.+22     	; 0xa4a <pickup+0xf2>
				{
					pickNode(1, 1);
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	3a df       	rcall	.-396    	; 0x8b2 <pickNode>
					pickNode(0, 0);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	35 df       	rcall	.-406    	; 0x8b2 <pickNode>
     a48:	65 c0       	rjmp	.+202    	; 0xb14 <pickup+0x1bc>
				}
				else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
     a4a:	81 70       	andi	r24, 0x01	; 1
     a4c:	90 78       	andi	r25, 0x80	; 128
     a4e:	99 23       	and	r25, r25
     a50:	24 f4       	brge	.+8      	; 0xa5a <pickup+0x102>
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	8e 6f       	ori	r24, 0xFE	; 254
     a56:	9f 6f       	ori	r25, 0xFF	; 255
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	dc 01       	movw	r26, r24
     a5c:	aa 0f       	add	r26, r26
     a5e:	bb 1f       	adc	r27, r27
     a60:	ad 5c       	subi	r26, 0xCD	; 205
     a62:	bd 4f       	sbci	r27, 0xFD	; 253
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	c1 f0       	breq	.+48     	; 0xa9c <pickup+0x144>
     a6c:	df 01       	movw	r26, r30
     a6e:	aa 0f       	add	r26, r26
     a70:	bb 1f       	adc	r27, r27
     a72:	aa 0f       	add	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	a5 5c       	subi	r26, 0xC5	; 197
     a78:	bd 4f       	sbci	r27, 0xFD	; 253
     a7a:	8d 91       	ld	r24, X+
     a7c:	9c 91       	ld	r25, X
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	68 17       	cp	r22, r24
     a82:	79 07       	cpc	r23, r25
     a84:	59 f0       	breq	.+22     	; 0xa9c <pickup+0x144>
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	49 f0       	breq	.+18     	; 0xa9c <pickup+0x144>
     a8a:	fd 01       	movw	r30, r26
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	68 17       	cp	r22, r24
     a92:	79 07       	cpc	r23, r25
     a94:	19 f0       	breq	.+6      	; 0xa9c <pickup+0x144>
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	09 f0       	breq	.+2      	; 0xa9c <pickup+0x144>
     a9a:	6c c1       	rjmp	.+728    	; 0xd74 <pickup+0x41c>
					pickNode(1, 1);
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	06 df       	rcall	.-500    	; 0x8b2 <pickNode>
     aa6:	36 c0       	rjmp	.+108    	; 0xb14 <pickup+0x1bc>
			}
			else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
     aa8:	24 17       	cp	r18, r20
     aaa:	35 07       	cpc	r19, r21
     aac:	09 f4       	brne	.+2      	; 0xab0 <pickup+0x158>
     aae:	62 c1       	rjmp	.+708    	; 0xd74 <pickup+0x41c>
     ab0:	2f 3f       	cpi	r18, 0xFF	; 255
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	09 f4       	brne	.+2      	; 0xab8 <pickup+0x160>
     ab6:	5e c1       	rjmp	.+700    	; 0xd74 <pickup+0x41c>
			{
				if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
     ab8:	81 70       	andi	r24, 0x01	; 1
     aba:	90 78       	andi	r25, 0x80	; 128
     abc:	99 23       	and	r25, r25
     abe:	24 f4       	brge	.+8      	; 0xac8 <pickup+0x170>
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	8e 6f       	ori	r24, 0xFE	; 254
     ac4:	9f 6f       	ori	r25, 0xFF	; 255
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	dc 01       	movw	r26, r24
     aca:	aa 0f       	add	r26, r26
     acc:	bb 1f       	adc	r27, r27
     ace:	ad 5c       	subi	r26, 0xCD	; 205
     ad0:	bd 4f       	sbci	r27, 0xFD	; 253
     ad2:	8d 91       	ld	r24, X+
     ad4:	9c 91       	ld	r25, X
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	c1 f0       	breq	.+48     	; 0xb0a <pickup+0x1b2>
     ada:	df 01       	movw	r26, r30
     adc:	aa 0f       	add	r26, r26
     ade:	bb 1f       	adc	r27, r27
     ae0:	aa 0f       	add	r26, r26
     ae2:	bb 1f       	adc	r27, r27
     ae4:	a5 5c       	subi	r26, 0xC5	; 197
     ae6:	bd 4f       	sbci	r27, 0xFD	; 253
     ae8:	8d 91       	ld	r24, X+
     aea:	9c 91       	ld	r25, X
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	68 17       	cp	r22, r24
     af0:	79 07       	cpc	r23, r25
     af2:	59 f0       	breq	.+22     	; 0xb0a <pickup+0x1b2>
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	49 f0       	breq	.+18     	; 0xb0a <pickup+0x1b2>
     af8:	fd 01       	movw	r30, r26
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	68 17       	cp	r22, r24
     b00:	79 07       	cpc	r23, r25
     b02:	19 f0       	breq	.+6      	; 0xb0a <pickup+0x1b2>
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	09 f0       	breq	.+2      	; 0xb0a <pickup+0x1b2>
     b08:	35 c1       	rjmp	.+618    	; 0xd74 <pickup+0x41c>
					pickNode(0, 0);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	cf de       	rcall	.-610    	; 0x8b2 <pickNode>
			}
			else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
				pickNode(0, 0);

		}
		if (armCount == 1)
     b14:	80 91 02 02 	lds	r24, 0x0202
     b18:	90 91 03 02 	lds	r25, 0x0203
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	09 f0       	breq	.+2      	; 0xb22 <pickup+0x1ca>
     b20:	29 c1       	rjmp	.+594    	; 0xd74 <pickup+0x41c>
		{
			int a1, a2;
			if (arm[0] == -1)
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	80 91 60 02 	lds	r24, 0x0260
     b2a:	90 91 61 02 	lds	r25, 0x0261
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	11 f4       	brne	.+4      	; 0xb36 <pickup+0x1de>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
				a1 = 0;
     b36:	c9 01       	movw	r24, r18
			else a1 = 1;
			a2 = (a1 + 1) % 2;
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	26 27       	eor	r18, r22
     b3c:	b9 01       	movw	r22, r18

			if (sort[ct % 2] == -1)
     b3e:	20 91 37 02 	lds	r18, 0x0237
     b42:	30 91 38 02 	lds	r19, 0x0238
     b46:	a9 01       	movw	r20, r18
     b48:	41 70       	andi	r20, 0x01	; 1
     b4a:	50 78       	andi	r21, 0x80	; 128
     b4c:	55 23       	and	r21, r21
     b4e:	34 f4       	brge	.+12     	; 0xb5c <pickup+0x204>
     b50:	41 50       	subi	r20, 0x01	; 1
     b52:	51 09       	sbc	r21, r1
     b54:	4e 6f       	ori	r20, 0xFE	; 254
     b56:	5f 6f       	ori	r21, 0xFF	; 255
     b58:	4f 5f       	subi	r20, 0xFF	; 255
     b5a:	5f 4f       	sbci	r21, 0xFF	; 255
     b5c:	fa 01       	movw	r30, r20
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	ed 5c       	subi	r30, 0xCD	; 205
     b64:	fd 4f       	sbci	r31, 0xFD	; 253
     b66:	40 81       	ld	r20, Z
     b68:	51 81       	ldd	r21, Z+1	; 0x01
     b6a:	4f 3f       	cpi	r20, 0xFF	; 255
     b6c:	af ef       	ldi	r26, 0xFF	; 255
     b6e:	5a 07       	cpc	r21, r26
     b70:	d1 f5       	brne	.+116    	; 0xbe6 <pickup+0x28e>
			{

				if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
     b72:	f9 01       	movw	r30, r18
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e8 0f       	add	r30, r24
     b7a:	f9 1f       	adc	r31, r25
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e5 5c       	subi	r30, 0xC5	; 197
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	40 81       	ld	r20, Z
     b86:	51 81       	ldd	r21, Z+1	; 0x01
     b88:	4f 3f       	cpi	r20, 0xFF	; 255
     b8a:	cf ef       	ldi	r28, 0xFF	; 255
     b8c:	5c 07       	cpc	r21, r28
     b8e:	71 f0       	breq	.+28     	; 0xbac <pickup+0x254>
     b90:	f9 01       	movw	r30, r18
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	e5 5b       	subi	r30, 0xB5	; 181
     b98:	fd 4f       	sbci	r31, 0xFD	; 253
     b9a:	01 90       	ld	r0, Z+
     b9c:	f0 81       	ld	r31, Z
     b9e:	e0 2d       	mov	r30, r0
     ba0:	4e 17       	cp	r20, r30
     ba2:	5f 07       	cpc	r21, r31
     ba4:	19 f0       	breq	.+6      	; 0xbac <pickup+0x254>
					pickNode(a1, a1);
     ba6:	bc 01       	movw	r22, r24
     ba8:	84 de       	rcall	.-760    	; 0x8b2 <pickNode>
     baa:	e4 c0       	rjmp	.+456    	; 0xd74 <pickup+0x41c>
				else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
     bac:	f9 01       	movw	r30, r18
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e6 0f       	add	r30, r22
     bb4:	f7 1f       	adc	r31, r23
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e5 5c       	subi	r30, 0xC5	; 197
     bbc:	fd 4f       	sbci	r31, 0xFD	; 253
     bbe:	40 81       	ld	r20, Z
     bc0:	51 81       	ldd	r21, Z+1	; 0x01
     bc2:	4f 3f       	cpi	r20, 0xFF	; 255
     bc4:	df ef       	ldi	r29, 0xFF	; 255
     bc6:	5d 07       	cpc	r21, r29
     bc8:	09 f4       	brne	.+2      	; 0xbcc <pickup+0x274>
     bca:	d4 c0       	rjmp	.+424    	; 0xd74 <pickup+0x41c>
     bcc:	f9 01       	movw	r30, r18
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	e5 5b       	subi	r30, 0xB5	; 181
     bd4:	fd 4f       	sbci	r31, 0xFD	; 253
     bd6:	20 81       	ld	r18, Z
     bd8:	31 81       	ldd	r19, Z+1	; 0x01
     bda:	42 17       	cp	r20, r18
     bdc:	53 07       	cpc	r21, r19
     bde:	09 f4       	brne	.+2      	; 0xbe2 <pickup+0x28a>
     be0:	c9 c0       	rjmp	.+402    	; 0xd74 <pickup+0x41c>
					pickNode(a1, a2);
     be2:	67 de       	rcall	.-818    	; 0x8b2 <pickNode>
     be4:	c7 c0       	rjmp	.+398    	; 0xd74 <pickup+0x41c>
			}
			else
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
     be6:	a0 91 5b 02 	lds	r26, 0x025B
     bea:	b0 91 5c 02 	lds	r27, 0x025C
     bee:	fd 01       	movw	r30, r26
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	e5 5b       	subi	r30, 0xB5	; 181
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	01 90       	ld	r0, Z+
     bfa:	f0 81       	ld	r31, Z
     bfc:	e0 2d       	mov	r30, r0
     bfe:	e9 01       	movw	r28, r18
     c00:	cc 0f       	add	r28, r28
     c02:	dd 1f       	adc	r29, r29
     c04:	cc 0f       	add	r28, r28
     c06:	dd 1f       	adc	r29, r29
     c08:	c5 5c       	subi	r28, 0xC5	; 197
     c0a:	dd 4f       	sbci	r29, 0xFD	; 253
     c0c:	09 90       	ld	r0, Y+
     c0e:	d8 81       	ld	r29, Y
     c10:	c0 2d       	mov	r28, r0
     c12:	ce 17       	cp	r28, r30
     c14:	df 07       	cpc	r29, r31
     c16:	69 f0       	breq	.+26     	; 0xc32 <pickup+0x2da>
     c18:	e9 01       	movw	r28, r18
     c1a:	cc 0f       	add	r28, r28
     c1c:	dd 1f       	adc	r29, r29
     c1e:	cc 0f       	add	r28, r28
     c20:	dd 1f       	adc	r29, r29
     c22:	c5 5c       	subi	r28, 0xC5	; 197
     c24:	dd 4f       	sbci	r29, 0xFD	; 253
     c26:	0a 80       	ldd	r0, Y+2	; 0x02
     c28:	db 81       	ldd	r29, Y+3	; 0x03
     c2a:	c0 2d       	mov	r28, r0
     c2c:	ec 17       	cp	r30, r28
     c2e:	fd 07       	cpc	r31, r29
     c30:	c1 f5       	brne	.+112    	; 0xca2 <pickup+0x34a>
				{
					if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
     c32:	ed 01       	movw	r28, r26
     c34:	cc 0f       	add	r28, r28
     c36:	dd 1f       	adc	r29, r29
     c38:	cc 5e       	subi	r28, 0xEC	; 236
     c3a:	dd 4f       	sbci	r29, 0xFD	; 253
     c3c:	48 81       	ld	r20, Y
     c3e:	59 81       	ldd	r21, Y+1	; 0x01
     c40:	41 30       	cpi	r20, 0x01	; 1
     c42:	51 05       	cpc	r21, r1
     c44:	09 f0       	breq	.+2      	; 0xc48 <pickup+0x2f0>
     c46:	96 c0       	rjmp	.+300    	; 0xd74 <pickup+0x41c>
     c48:	ed 01       	movw	r28, r26
     c4a:	cc 0f       	add	r28, r28
     c4c:	dd 1f       	adc	r29, r29
     c4e:	cc 0f       	add	r28, r28
     c50:	dd 1f       	adc	r29, r29
     c52:	c5 5c       	subi	r28, 0xC5	; 197
     c54:	dd 4f       	sbci	r29, 0xFD	; 253
     c56:	48 81       	ld	r20, Y
     c58:	59 81       	ldd	r21, Y+1	; 0x01
     c5a:	4f 3f       	cpi	r20, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	71 f0       	breq	.+28     	; 0xc7c <pickup+0x324>
     c60:	aa 0f       	add	r26, r26
     c62:	bb 1f       	adc	r27, r27
     c64:	aa 0f       	add	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	a5 5c       	subi	r26, 0xC5	; 197
     c6a:	bd 4f       	sbci	r27, 0xFD	; 253
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	4d 91       	ld	r20, X+
     c70:	5c 91       	ld	r21, X
     c72:	13 97       	sbiw	r26, 0x03	; 3
     c74:	4f 3f       	cpi	r20, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	09 f0       	breq	.+2      	; 0xc7c <pickup+0x324>
     c7a:	7c c0       	rjmp	.+248    	; 0xd74 <pickup+0x41c>
					{
						if (term[ct][a1] == color[adj])
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	28 0f       	add	r18, r24
     c82:	39 1f       	adc	r19, r25
     c84:	d9 01       	movw	r26, r18
     c86:	aa 0f       	add	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	a5 5c       	subi	r26, 0xC5	; 197
     c8c:	bd 4f       	sbci	r27, 0xFD	; 253
     c8e:	2d 91       	ld	r18, X+
     c90:	3c 91       	ld	r19, X
     c92:	e2 17       	cp	r30, r18
     c94:	f3 07       	cpc	r31, r19
     c96:	19 f4       	brne	.+6      	; 0xc9e <pickup+0x346>
							pickNode(a1, a1);
     c98:	bc 01       	movw	r22, r24
     c9a:	0b de       	rcall	.-1002   	; 0x8b2 <pickNode>
     c9c:	6b c0       	rjmp	.+214    	; 0xd74 <pickup+0x41c>

						else
							pickNode(a1, a2);
     c9e:	09 de       	rcall	.-1006   	; 0x8b2 <pickNode>
     ca0:	69 c0       	rjmp	.+210    	; 0xd74 <pickup+0x41c>
					}
				}
				else {
					if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
     ca2:	e9 01       	movw	r28, r18
     ca4:	cc 0f       	add	r28, r28
     ca6:	dd 1f       	adc	r29, r29
     ca8:	c5 5b       	subi	r28, 0xB5	; 181
     caa:	dd 4f       	sbci	r29, 0xFD	; 253
     cac:	08 81       	ld	r16, Y
     cae:	19 81       	ldd	r17, Y+1	; 0x01
     cb0:	40 17       	cp	r20, r16
     cb2:	51 07       	cpc	r21, r17
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <pickup+0x360>
     cb6:	5e c0       	rjmp	.+188    	; 0xd74 <pickup+0x41c>
     cb8:	4e 17       	cp	r20, r30
     cba:	5f 07       	cpc	r21, r31
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <pickup+0x368>
     cbe:	5a c0       	rjmp	.+180    	; 0xd74 <pickup+0x41c>
					{
						if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))) && arm[a2] != color[adj] || arm[a2] != color[adj])
     cc0:	ad 01       	movw	r20, r26
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	4c 5e       	subi	r20, 0xEC	; 236
     cc8:	5d 4f       	sbci	r21, 0xFD	; 253
     cca:	ea 01       	movw	r28, r20
     ccc:	48 81       	ld	r20, Y
     cce:	59 81       	ldd	r21, Y+1	; 0x01
     cd0:	41 30       	cpi	r20, 0x01	; 1
     cd2:	51 05       	cpc	r21, r1
     cd4:	e9 f4       	brne	.+58     	; 0xd10 <pickup+0x3b8>
     cd6:	ad 01       	movw	r20, r26
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	44 0f       	add	r20, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	45 5c       	subi	r20, 0xC5	; 197
     ce2:	5d 4f       	sbci	r21, 0xFD	; 253
     ce4:	ea 01       	movw	r28, r20
     ce6:	48 81       	ld	r20, Y
     ce8:	59 81       	ldd	r21, Y+1	; 0x01
     cea:	04 17       	cp	r16, r20
     cec:	15 07       	cpc	r17, r21
     cee:	81 f0       	breq	.+32     	; 0xd10 <pickup+0x3b8>
     cf0:	4a 81       	ldd	r20, Y+2	; 0x02
     cf2:	5b 81       	ldd	r21, Y+3	; 0x03
     cf4:	04 17       	cp	r16, r20
     cf6:	15 07       	cpc	r17, r21
     cf8:	59 f0       	breq	.+22     	; 0xd10 <pickup+0x3b8>
     cfa:	db 01       	movw	r26, r22
     cfc:	aa 0f       	add	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	a0 5a       	subi	r26, 0xA0	; 160
     d02:	bd 4f       	sbci	r27, 0xFD	; 253
     d04:	4d 91       	ld	r20, X+
     d06:	5c 91       	ld	r21, X
     d08:	e4 17       	cp	r30, r20
     d0a:	f5 07       	cpc	r31, r21
     d0c:	59 f4       	brne	.+22     	; 0xd24 <pickup+0x3cc>
     d0e:	32 c0       	rjmp	.+100    	; 0xd74 <pickup+0x41c>
     d10:	db 01       	movw	r26, r22
     d12:	aa 0f       	add	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	a0 5a       	subi	r26, 0xA0	; 160
     d18:	bd 4f       	sbci	r27, 0xFD	; 253
     d1a:	4d 91       	ld	r20, X+
     d1c:	5c 91       	ld	r21, X
     d1e:	e4 17       	cp	r30, r20
     d20:	f5 07       	cpc	r31, r21
     d22:	41 f1       	breq	.+80     	; 0xd74 <pickup+0x41c>
							if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
     d24:	f9 01       	movw	r30, r18
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	e8 0f       	add	r30, r24
     d2c:	f9 1f       	adc	r31, r25
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	e5 5c       	subi	r30, 0xC5	; 197
     d34:	fd 4f       	sbci	r31, 0xFD	; 253
     d36:	40 81       	ld	r20, Z
     d38:	51 81       	ldd	r21, Z+1	; 0x01
     d3a:	4f 3f       	cpi	r20, 0xFF	; 255
     d3c:	df ef       	ldi	r29, 0xFF	; 255
     d3e:	5d 07       	cpc	r21, r29
     d40:	31 f0       	breq	.+12     	; 0xd4e <pickup+0x3f6>
     d42:	04 17       	cp	r16, r20
     d44:	15 07       	cpc	r17, r21
     d46:	19 f0       	breq	.+6      	; 0xd4e <pickup+0x3f6>
								pickNode(a1, a1);
     d48:	bc 01       	movw	r22, r24
     d4a:	b3 dd       	rcall	.-1178   	; 0x8b2 <pickNode>
     d4c:	13 c0       	rjmp	.+38     	; 0xd74 <pickup+0x41c>
							else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	26 0f       	add	r18, r22
     d54:	37 1f       	adc	r19, r23
     d56:	f9 01       	movw	r30, r18
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	e5 5c       	subi	r30, 0xC5	; 197
     d5e:	fd 4f       	sbci	r31, 0xFD	; 253
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	2f 3f       	cpi	r18, 0xFF	; 255
     d66:	ef ef       	ldi	r30, 0xFF	; 255
     d68:	3e 07       	cpc	r19, r30
     d6a:	21 f0       	breq	.+8      	; 0xd74 <pickup+0x41c>
     d6c:	02 17       	cp	r16, r18
     d6e:	13 07       	cpc	r17, r19
     d70:	09 f0       	breq	.+2      	; 0xd74 <pickup+0x41c>
								pickNode(a1, a2);
     d72:	9f dd       	rcall	.-1218   	; 0x8b2 <pickNode>
					}
				}
			}
		}
	}
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <drop>:

void drop(int side)
{
     d7e:	cf 93       	push	r28
     d80:	c8 2f       	mov	r28, r24
	armCount++;
     d82:	20 91 02 02 	lds	r18, 0x0202
     d86:	30 91 03 02 	lds	r19, 0x0203
     d8a:	2f 5f       	subi	r18, 0xFF	; 255
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	30 93 03 02 	sts	0x0203, r19
     d92:	20 93 02 02 	sts	0x0202, r18
	elevate(0, side);//lower
     d96:	68 2f       	mov	r22, r24
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	46 dd       	rcall	.-1396   	; 0x828 <elevate>
	open(side);
     d9c:	8c 2f       	mov	r24, r28
     d9e:	51 dd       	rcall	.-1374   	; 0x842 <open>
	elevate(45, side);//mid
     da0:	6c 2f       	mov	r22, r28
     da2:	8d e2       	ldi	r24, 0x2D	; 45
     da4:	41 dd       	rcall	.-1406   	; 0x828 <elevate>
	close(side);
     da6:	8c 2f       	mov	r24, r28
     da8:	5c dd       	rcall	.-1352   	; 0x862 <close>
}
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <nodeDrop>:
void nodeDrop(int armNo, int side)
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
	//..printf("Arm %d dropped %d on term[%d][%d]\n",armNo,arm[armNo],ct,side);
	term[ct][side] = arm[armNo];
     db4:	e0 91 37 02 	lds	r30, 0x0237
     db8:	f0 91 38 02 	lds	r31, 0x0238
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	e6 0f       	add	r30, r22
     dc2:	f7 1f       	adc	r31, r23
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	e5 5c       	subi	r30, 0xC5	; 197
     dca:	fd 4f       	sbci	r31, 0xFD	; 253
     dcc:	dc 01       	movw	r26, r24
     dce:	aa 0f       	add	r26, r26
     dd0:	bb 1f       	adc	r27, r27
     dd2:	a0 5a       	subi	r26, 0xA0	; 160
     dd4:	bd 4f       	sbci	r27, 0xFD	; 253
     dd6:	8d 91       	ld	r24, X+
     dd8:	9c 91       	ld	r25, X
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
	if (armNo != side)
     dde:	c6 17       	cp	r28, r22
     de0:	d7 07       	cpc	r29, r23
     de2:	b1 f0       	breq	.+44     	; 0xe10 <nodeDrop+0x62>
		Uturn();
     de4:	98 db       	rcall	.-2256   	; 0x516 <Uturn>
	drop(armNo);
     de6:	ce 01       	movw	r24, r28
     de8:	ca df       	rcall	.-108    	; 0xd7e <drop>
	if (armNo != side)
		Uturn();
     dea:	95 db       	rcall	.-2262   	; 0x516 <Uturn>
	arm[armNo] = -1;
     dec:	cc 0f       	add	r28, r28
     dee:	dd 1f       	adc	r29, r29
     df0:	c0 5a       	subi	r28, 0xA0	; 160
     df2:	dd 4f       	sbci	r29, 0xFD	; 253
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	99 83       	std	Y+1, r25	; 0x01
     dfa:	88 83       	st	Y, r24
	sorted++;
     dfc:	80 91 06 02 	lds	r24, 0x0206
     e00:	90 91 07 02 	lds	r25, 0x0207
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	90 93 07 02 	sts	0x0207, r25
     e0a:	80 93 06 02 	sts	0x0206, r24
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <nodeDrop+0x68>
{
	//..printf("Arm %d dropped %d on term[%d][%d]\n",armNo,arm[armNo],ct,side);
	term[ct][side] = arm[armNo];
	if (armNo != side)
		Uturn();
	drop(armNo);
     e10:	ce 01       	movw	r24, r28
     e12:	b5 df       	rcall	.-150    	; 0xd7e <drop>
     e14:	eb cf       	rjmp	.-42     	; 0xdec <nodeDrop+0x3e>
	if (armNo != side)
		Uturn();
	arm[armNo] = -1;
	sorted++;
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
	//..printf("Arm %d dropped %d on sort[%d]\n",armNo,arm[armNo],sortNo);
	sort[sortNo] = arm[armNo];
     e20:	fb 01       	movw	r30, r22
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ed 5c       	subi	r30, 0xCD	; 205
     e28:	fd 4f       	sbci	r31, 0xFD	; 253
     e2a:	ec 01       	movw	r28, r24
     e2c:	cc 0f       	add	r28, r28
     e2e:	dd 1f       	adc	r29, r29
     e30:	c0 5a       	subi	r28, 0xA0	; 160
     e32:	dd 4f       	sbci	r29, 0xFD	; 253
     e34:	28 81       	ld	r18, Y
     e36:	39 81       	ldd	r19, Y+1	; 0x01
     e38:	31 83       	std	Z+1, r19	; 0x01
     e3a:	20 83       	st	Z, r18
	if (armNo == 0)
		turnLeft();
	else turnLeft();
	drop(armNo);
     e3c:	a0 df       	rcall	.-192    	; 0xd7e <drop>
	if (armNo == 0)
		turnRight();
	else turnLeft();
	arm[armNo] = -1;
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	99 83       	std	Y+1, r25	; 0x01
     e44:	88 83       	st	Y, r24
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <dropPickup>:

void dropPickup(int a1)
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
     e50:	9c 01       	movw	r18, r24
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	21 70       	andi	r18, 0x01	; 1
     e58:	30 78       	andi	r19, 0x80	; 128
     e5a:	33 23       	and	r19, r19
     e5c:	34 f4       	brge	.+12     	; 0xe6a <dropPickup+0x1e>
     e5e:	21 50       	subi	r18, 0x01	; 1
     e60:	31 09       	sbc	r19, r1
     e62:	2e 6f       	ori	r18, 0xFE	; 254
     e64:	3f 6f       	ori	r19, 0xFF	; 255
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	d2 2f       	mov	r29, r18
     e6c:	c3 2f       	mov	r28, r19
	if (term[ct][a2] == color[ct] && term[ct][a2] != color[adj])
     e6e:	e0 91 37 02 	lds	r30, 0x0237
     e72:	f0 91 38 02 	lds	r31, 0x0238
     e76:	af 01       	movw	r20, r30
     e78:	44 0f       	add	r20, r20
     e7a:	55 1f       	adc	r21, r21
     e7c:	24 0f       	add	r18, r20
     e7e:	35 1f       	adc	r19, r21
     e80:	d9 01       	movw	r26, r18
     e82:	aa 0f       	add	r26, r26
     e84:	bb 1f       	adc	r27, r27
     e86:	a5 5c       	subi	r26, 0xC5	; 197
     e88:	bd 4f       	sbci	r27, 0xFD	; 253
     e8a:	2d 91       	ld	r18, X+
     e8c:	3c 91       	ld	r19, X
     e8e:	da 01       	movw	r26, r20
     e90:	a5 5b       	subi	r26, 0xB5	; 181
     e92:	bd 4f       	sbci	r27, 0xFD	; 253
     e94:	4d 91       	ld	r20, X+
     e96:	5c 91       	ld	r21, X
     e98:	24 17       	cp	r18, r20
     e9a:	35 07       	cpc	r19, r21
     e9c:	11 f5       	brne	.+68     	; 0xee2 <dropPickup+0x96>
     e9e:	a0 91 5b 02 	lds	r26, 0x025B
     ea2:	b0 91 5c 02 	lds	r27, 0x025C
     ea6:	aa 0f       	add	r26, r26
     ea8:	bb 1f       	adc	r27, r27
     eaa:	a5 5b       	subi	r26, 0xB5	; 181
     eac:	bd 4f       	sbci	r27, 0xFD	; 253
     eae:	4d 91       	ld	r20, X+
     eb0:	5c 91       	ld	r21, X
     eb2:	24 17       	cp	r18, r20
     eb4:	35 07       	cpc	r19, r21
     eb6:	e9 f0       	breq	.+58     	; 0xef2 <dropPickup+0xa6>
	{
		if (term[ct][a1] != color[ct] && term[ct][a1] != -1)
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e8 0f       	add	r30, r24
     ebe:	f9 1f       	adc	r31, r25
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	e5 5c       	subi	r30, 0xC5	; 197
     ec6:	fd 4f       	sbci	r31, 0xFD	; 253
     ec8:	40 81       	ld	r20, Z
     eca:	51 81       	ldd	r21, Z+1	; 0x01
     ecc:	24 17       	cp	r18, r20
     ece:	35 07       	cpc	r19, r21
     ed0:	81 f0       	breq	.+32     	; 0xef2 <dropPickup+0xa6>
     ed2:	4f 3f       	cpi	r20, 0xFF	; 255
     ed4:	5f 4f       	sbci	r21, 0xFF	; 255
     ed6:	69 f0       	breq	.+26     	; 0xef2 <dropPickup+0xa6>
			pickNode(a2, a1);
     ed8:	bc 01       	movw	r22, r24
     eda:	8d 2f       	mov	r24, r29
     edc:	9c 2f       	mov	r25, r28
     ede:	e9 dc       	rcall	.-1582   	; 0x8b2 <pickNode>
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <dropPickup+0xa6>
	}
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
     ee2:	2f 3f       	cpi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	29 f0       	breq	.+10     	; 0xef2 <dropPickup+0xa6>
		pickNode(a2, a2);
     ee8:	6d 2f       	mov	r22, r29
     eea:	7c 2f       	mov	r23, r28
     eec:	8d 2f       	mov	r24, r29
     eee:	9c 2f       	mov	r25, r28
     ef0:	e0 dc       	rcall	.-1600   	; 0x8b2 <pickNode>
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <canDrop>:
void canDrop()
{
	if (visited[ct] == 0)
     ef8:	e0 91 37 02 	lds	r30, 0x0237
     efc:	f0 91 38 02 	lds	r31, 0x0238
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	ec 5e       	subi	r30, 0xEC	; 236
     f06:	fd 4f       	sbci	r31, 0xFD	; 253
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	89 2b       	or	r24, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <canDrop+0x1a>
		terminalCheck();
     f10:	6a db       	rcall	.-2348   	; 0x5e6 <terminalCheck>
	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
     f12:	20 91 02 02 	lds	r18, 0x0202
     f16:	30 91 03 02 	lds	r19, 0x0203
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <canDrop+0x2a>
     f20:	37 c1       	rjmp	.+622    	; 0x1190 <canDrop+0x298>
     f22:	60 91 60 02 	lds	r22, 0x0260
     f26:	70 91 61 02 	lds	r23, 0x0261
     f2a:	40 91 37 02 	lds	r20, 0x0237
     f2e:	50 91 38 02 	lds	r21, 0x0238
     f32:	fa 01       	movw	r30, r20
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	e5 5b       	subi	r30, 0xB5	; 181
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	68 17       	cp	r22, r24
     f42:	79 07       	cpc	r23, r25
     f44:	09 f4       	brne	.+2      	; 0xf48 <canDrop+0x50>
     f46:	fb c0       	rjmp	.+502    	; 0x113e <canDrop+0x246>
     f48:	e0 91 62 02 	lds	r30, 0x0262
     f4c:	f0 91 63 02 	lds	r31, 0x0263
     f50:	8e 17       	cp	r24, r30
     f52:	9f 07       	cpc	r25, r31
     f54:	09 f0       	breq	.+2      	; 0xf58 <canDrop+0x60>
     f56:	1c c1       	rjmp	.+568    	; 0x1190 <canDrop+0x298>
		return;
	else if (armCount == 0)
     f58:	23 2b       	or	r18, r19
     f5a:	09 f4       	brne	.+2      	; 0xf5e <canDrop+0x66>
     f5c:	f4 c0       	rjmp	.+488    	; 0x1146 <canDrop+0x24e>
     f5e:	f8 c0       	rjmp	.+496    	; 0x1150 <canDrop+0x258>
	{
		if (arm[0] == color[ct] && term[ct][0] == -1)
     f60:	fa 01       	movw	r30, r20
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	e5 5c       	subi	r30, 0xC5	; 197
     f6c:	fd 4f       	sbci	r31, 0xFD	; 253
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	2f 3f       	cpi	r18, 0xFF	; 255
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	31 f4       	brne	.+12     	; 0xf84 <canDrop+0x8c>
			nodeDrop(0, 0);
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	16 df       	rcall	.-468    	; 0xdae <nodeDrop>
     f82:	41 c0       	rjmp	.+130    	; 0x1006 <canDrop+0x10e>
		else if (arm[1] == color[ct] && term[ct][1] == -1)
     f84:	20 91 62 02 	lds	r18, 0x0262
     f88:	30 91 63 02 	lds	r19, 0x0263
     f8c:	82 17       	cp	r24, r18
     f8e:	93 07       	cpc	r25, r19
     f90:	91 f4       	brne	.+36     	; 0xfb6 <canDrop+0xbe>
     f92:	fa 01       	movw	r30, r20
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	e5 5c       	subi	r30, 0xC5	; 197
     f9e:	fd 4f       	sbci	r31, 0xFD	; 253
     fa0:	02 80       	ldd	r0, Z+2	; 0x02
     fa2:	f3 81       	ldd	r31, Z+3	; 0x03
     fa4:	e0 2d       	mov	r30, r0
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	31 f4       	brne	.+12     	; 0xfb6 <canDrop+0xbe>
			nodeDrop(1, 1);
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	fd de       	rcall	.-518    	; 0xdae <nodeDrop>
     fb4:	28 c0       	rjmp	.+80     	; 0x1006 <canDrop+0x10e>
		else if (arm[0] == color[ct] && term[ct][1] == -1)
     fb6:	68 17       	cp	r22, r24
     fb8:	79 07       	cpc	r23, r25
     fba:	91 f4       	brne	.+36     	; 0xfe0 <canDrop+0xe8>
     fbc:	fa 01       	movw	r30, r20
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	e5 5c       	subi	r30, 0xC5	; 197
     fc8:	fd 4f       	sbci	r31, 0xFD	; 253
     fca:	62 81       	ldd	r22, Z+2	; 0x02
     fcc:	73 81       	ldd	r23, Z+3	; 0x03
     fce:	6f 3f       	cpi	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	31 f4       	brne	.+12     	; 0xfe0 <canDrop+0xe8>
			nodeDrop(0, 1);
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	e8 de       	rcall	.-560    	; 0xdae <nodeDrop>
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <canDrop+0x10e>
		else if (arm[1] == color[ct] && term[ct][0] == -1)
     fe0:	82 17       	cp	r24, r18
     fe2:	93 07       	cpc	r25, r19
     fe4:	81 f4       	brne	.+32     	; 0x1006 <canDrop+0x10e>
     fe6:	fa 01       	movw	r30, r20
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	e5 5c       	subi	r30, 0xC5	; 197
     ff2:	fd 4f       	sbci	r31, 0xFD	; 253
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	29 f4       	brne	.+10     	; 0x1006 <canDrop+0x10e>
			nodeDrop(1, 0);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	d4 de       	rcall	.-600    	; 0xdae <nodeDrop>
	}

	if (arm[0] == color[ct] || arm[1] == color[ct])
    1006:	40 91 60 02 	lds	r20, 0x0260
    100a:	50 91 61 02 	lds	r21, 0x0261
    100e:	80 91 37 02 	lds	r24, 0x0237
    1012:	90 91 38 02 	lds	r25, 0x0238
    1016:	fc 01       	movw	r30, r24
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	e5 5b       	subi	r30, 0xB5	; 181
    101e:	fd 4f       	sbci	r31, 0xFD	; 253
    1020:	20 81       	ld	r18, Z
    1022:	31 81       	ldd	r19, Z+1	; 0x01
    1024:	42 17       	cp	r20, r18
    1026:	53 07       	cpc	r21, r19
    1028:	41 f0       	breq	.+16     	; 0x103a <canDrop+0x142>
    102a:	60 91 62 02 	lds	r22, 0x0262
    102e:	70 91 63 02 	lds	r23, 0x0263
    1032:	26 17       	cp	r18, r22
    1034:	37 07       	cpc	r19, r23
    1036:	09 f0       	breq	.+2      	; 0x103a <canDrop+0x142>
    1038:	ab c0       	rjmp	.+342    	; 0x1190 <canDrop+0x298>
	{
		if (term[ct][0] != -1 && term[ct][1] != -1)
    103a:	fc 01       	movw	r30, r24
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	e5 5c       	subi	r30, 0xC5	; 197
    1046:	fd 4f       	sbci	r31, 0xFD	; 253
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	6f 3f       	cpi	r22, 0xFF	; 255
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	a9 f0       	breq	.+42     	; 0x107c <canDrop+0x184>
    1052:	fc 01       	movw	r30, r24
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e5 5c       	subi	r30, 0xC5	; 197
    105e:	fd 4f       	sbci	r31, 0xFD	; 253
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	51 f0       	breq	.+20     	; 0x107c <canDrop+0x184>
		{
			if (arm[0] == color[ct])
    1068:	42 17       	cp	r20, r18
    106a:	53 07       	cpc	r21, r19
    106c:	21 f4       	brne	.+8      	; 0x1076 <canDrop+0x17e>
				dropPickup(0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	ec de       	rcall	.-552    	; 0xe4c <dropPickup>
    1074:	03 c0       	rjmp	.+6      	; 0x107c <canDrop+0x184>
			else dropPickup(1);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	e8 de       	rcall	.-560    	; 0xe4c <dropPickup>
		}
		if (arm[0] == color[ct] && term[ct][0] == -1)
    107c:	80 91 37 02 	lds	r24, 0x0237
    1080:	90 91 38 02 	lds	r25, 0x0238
    1084:	fc 01       	movw	r30, r24
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	e5 5b       	subi	r30, 0xB5	; 181
    108c:	fd 4f       	sbci	r31, 0xFD	; 253
    108e:	20 81       	ld	r18, Z
    1090:	31 81       	ldd	r19, Z+1	; 0x01
    1092:	40 91 60 02 	lds	r20, 0x0260
    1096:	50 91 61 02 	lds	r21, 0x0261
    109a:	42 17       	cp	r20, r18
    109c:	53 07       	cpc	r21, r19
    109e:	21 f5       	brne	.+72     	; 0x10e8 <canDrop+0x1f0>
    10a0:	fc 01       	movw	r30, r24
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	e5 5c       	subi	r30, 0xC5	; 197
    10ac:	fd 4f       	sbci	r31, 0xFD	; 253
    10ae:	40 81       	ld	r20, Z
    10b0:	51 81       	ldd	r21, Z+1	; 0x01
    10b2:	4f 3f       	cpi	r20, 0xFF	; 255
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	31 f4       	brne	.+12     	; 0x10c4 <canDrop+0x1cc>
			nodeDrop(0, 0);
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	76 ce       	rjmp	.-788    	; 0xdae <nodeDrop>
    10c2:	08 95       	ret
		else if (arm[0] == color[ct] && term[ct][1] == -1)
    10c4:	fc 01       	movw	r30, r24
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	e5 5c       	subi	r30, 0xC5	; 197
    10d0:	fd 4f       	sbci	r31, 0xFD	; 253
    10d2:	42 81       	ldd	r20, Z+2	; 0x02
    10d4:	53 81       	ldd	r21, Z+3	; 0x03
    10d6:	4f 3f       	cpi	r20, 0xFF	; 255
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
    10da:	31 f4       	brne	.+12     	; 0x10e8 <canDrop+0x1f0>
			nodeDrop(0, 1);
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	64 ce       	rjmp	.-824    	; 0xdae <nodeDrop>
    10e6:	08 95       	ret
		else if (arm[1] == color[ct] && term[ct][0] == -1)
    10e8:	40 91 62 02 	lds	r20, 0x0262
    10ec:	50 91 63 02 	lds	r21, 0x0263
    10f0:	24 17       	cp	r18, r20
    10f2:	35 07       	cpc	r19, r21
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <canDrop+0x200>
    10f6:	4c c0       	rjmp	.+152    	; 0x1190 <canDrop+0x298>
    10f8:	fc 01       	movw	r30, r24
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e5 5c       	subi	r30, 0xC5	; 197
    1104:	fd 4f       	sbci	r31, 0xFD	; 253
    1106:	20 81       	ld	r18, Z
    1108:	31 81       	ldd	r19, Z+1	; 0x01
    110a:	2f 3f       	cpi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	31 f4       	brne	.+12     	; 0x111c <canDrop+0x224>
			nodeDrop(1, 0);
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	4a ce       	rjmp	.-876    	; 0xdae <nodeDrop>
    111a:	08 95       	ret
		else if (arm[1] == color[ct] && term[ct][1] == -1)
    111c:	fc 01       	movw	r30, r24
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	e5 5c       	subi	r30, 0xC5	; 197
    1128:	fd 4f       	sbci	r31, 0xFD	; 253
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	79 f5       	brne	.+94     	; 0x1190 <canDrop+0x298>
			nodeDrop(1, 1);
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	39 ce       	rjmp	.-910    	; 0xdae <nodeDrop>
    113c:	08 95       	ret
{
	if (visited[ct] == 0)
		terminalCheck();
	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
		return;
	else if (armCount == 0)
    113e:	23 2b       	or	r18, r19
    1140:	09 f4       	brne	.+2      	; 0x1144 <canDrop+0x24c>
    1142:	0e cf       	rjmp	.-484    	; 0xf60 <canDrop+0x68>
    1144:	15 c0       	rjmp	.+42     	; 0x1170 <canDrop+0x278>
	{
		if (arm[0] == color[ct] && term[ct][0] == -1)
			nodeDrop(0, 0);
		else if (arm[1] == color[ct] && term[ct][1] == -1)
    1146:	20 91 62 02 	lds	r18, 0x0262
    114a:	30 91 63 02 	lds	r19, 0x0263
    114e:	21 cf       	rjmp	.-446    	; 0xf92 <canDrop+0x9a>
			nodeDrop(0, 1);
		else if (arm[1] == color[ct] && term[ct][0] == -1)
			nodeDrop(1, 0);
	}

	if (arm[0] == color[ct] || arm[1] == color[ct])
    1150:	40 91 60 02 	lds	r20, 0x0260
    1154:	50 91 61 02 	lds	r21, 0x0261
    1158:	80 91 37 02 	lds	r24, 0x0237
    115c:	90 91 38 02 	lds	r25, 0x0238
    1160:	fc 01       	movw	r30, r24
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	e5 5b       	subi	r30, 0xB5	; 181
    1168:	fd 4f       	sbci	r31, 0xFD	; 253
    116a:	20 81       	ld	r18, Z
    116c:	31 81       	ldd	r19, Z+1	; 0x01
    116e:	5d cf       	rjmp	.-326    	; 0x102a <canDrop+0x132>
    1170:	40 91 60 02 	lds	r20, 0x0260
    1174:	50 91 61 02 	lds	r21, 0x0261
    1178:	80 91 37 02 	lds	r24, 0x0237
    117c:	90 91 38 02 	lds	r25, 0x0238
    1180:	fc 01       	movw	r30, r24
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	e5 5b       	subi	r30, 0xB5	; 181
    1188:	fd 4f       	sbci	r31, 0xFD	; 253
    118a:	20 81       	ld	r18, Z
    118c:	31 81       	ldd	r19, Z+1	; 0x01
    118e:	55 cf       	rjmp	.-342    	; 0x103a <canDrop+0x142>
    1190:	08 95       	ret

00001192 <newSort>:
	}
	else return;
}

void newSort()
{
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
	int t1, t2, a1, a2;
	if (arm[0] != -1)
    11a6:	e0 91 60 02 	lds	r30, 0x0260
    11aa:	f0 91 61 02 	lds	r31, 0x0261
    11ae:	ef 3f       	cpi	r30, 0xFF	; 255
    11b0:	2f ef       	ldi	r18, 0xFF	; 255
    11b2:	f2 07       	cpc	r31, r18
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <newSort+0x32>
		a1 = indicator[arm[0]];
    11b6:	df 01       	movw	r26, r30
    11b8:	aa 0f       	add	r26, r26
    11ba:	bb 1f       	adc	r27, r27
    11bc:	ad 5a       	subi	r26, 0xAD	; 173
    11be:	bd 4f       	sbci	r27, 0xFD	; 253
    11c0:	ed 90       	ld	r14, X+
    11c2:	fc 90       	ld	r15, X
	if (arm[1] != -1)
    11c4:	c0 91 62 02 	lds	r28, 0x0262
    11c8:	d0 91 63 02 	lds	r29, 0x0263
    11cc:	cf 3f       	cpi	r28, 0xFF	; 255
    11ce:	4f ef       	ldi	r20, 0xFF	; 255
    11d0:	d4 07       	cpc	r29, r20
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <newSort+0x44>
    11d4:	5a c1       	rjmp	.+692    	; 0x148a <newSort+0x2f8>
		a2 = indicator[arm[1]];
    11d6:	de 01       	movw	r26, r28
    11d8:	aa 0f       	add	r26, r26
    11da:	bb 1f       	adc	r27, r27
    11dc:	ad 5a       	subi	r26, 0xAD	; 173
    11de:	bd 4f       	sbci	r27, 0xFD	; 253
    11e0:	cd 90       	ld	r12, X+
    11e2:	dc 90       	ld	r13, X

	t1 = (ct + 1) % 2;
    11e4:	20 91 37 02 	lds	r18, 0x0237
    11e8:	30 91 38 02 	lds	r19, 0x0238
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	21 70       	andi	r18, 0x01	; 1
    11f2:	30 78       	andi	r19, 0x80	; 128
    11f4:	33 23       	and	r19, r19
    11f6:	34 f4       	brge	.+12     	; 0x1204 <newSort+0x72>
    11f8:	21 50       	subi	r18, 0x01	; 1
    11fa:	31 09       	sbc	r19, r1
    11fc:	2e 6f       	ori	r18, 0xFE	; 254
    11fe:	3f 6f       	ori	r19, 0xFF	; 255
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	89 01       	movw	r16, r18
	t2 = t1 + 2;
    1206:	2e 5f       	subi	r18, 0xFE	; 254
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    120a:	f0 92 38 02 	sts	0x0238, r15
    120e:	e0 92 37 02 	sts	0x0237, r14
		if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    1212:	ef 3f       	cpi	r30, 0xFF	; 255
    1214:	6f ef       	ldi	r22, 0xFF	; 255
    1216:	f6 07       	cpc	r31, r22
    1218:	09 f4       	brne	.+2      	; 0x121c <newSort+0x8a>
    121a:	4c c0       	rjmp	.+152    	; 0x12b4 <newSort+0x122>
    121c:	d7 01       	movw	r26, r14
    121e:	aa 0f       	add	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	aa 0f       	add	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	a5 5c       	subi	r26, 0xC5	; 197
    1228:	bd 4f       	sbci	r27, 0xFD	; 253
    122a:	8d 91       	ld	r24, X+
    122c:	9c 91       	ld	r25, X
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	69 f0       	breq	.+26     	; 0x124c <newSort+0xba>
    1232:	d7 01       	movw	r26, r14
    1234:	aa 0f       	add	r26, r26
    1236:	bb 1f       	adc	r27, r27
    1238:	aa 0f       	add	r26, r26
    123a:	bb 1f       	adc	r27, r27
    123c:	a5 5c       	subi	r26, 0xC5	; 197
    123e:	bd 4f       	sbci	r27, 0xFD	; 253
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	13 97       	sbiw	r26, 0x03	; 3
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	19 f5       	brne	.+70     	; 0x1292 <newSort+0x100>
		{
			if (arm[1] == -1)
    124c:	21 96       	adiw	r28, 0x01	; 1
    124e:	09 f0       	breq	.+2      	; 0x1252 <newSort+0xc0>
    1250:	ff c0       	rjmp	.+510    	; 0x1450 <newSort+0x2be>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    1252:	c8 01       	movw	r24, r16
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	fc 01       	movw	r30, r24
    125a:	ed 5c       	subi	r30, 0xCD	; 205
    125c:	fd 4f       	sbci	r31, 0xFD	; 253
    125e:	40 81       	ld	r20, Z
    1260:	51 81       	ldd	r21, Z+1	; 0x01
    1262:	fc 01       	movw	r30, r24
    1264:	e5 5b       	subi	r30, 0xB5	; 181
    1266:	fd 4f       	sbci	r31, 0xFD	; 253
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	48 17       	cp	r20, r24
    126e:	59 07       	cpc	r21, r25
    1270:	59 f0       	breq	.+22     	; 0x1288 <newSort+0xf6>
    1272:	f9 01       	movw	r30, r18
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	e5 5b       	subi	r30, 0xB5	; 181
    127a:	fd 4f       	sbci	r31, 0xFD	; 253
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	48 17       	cp	r20, r24
    1282:	59 07       	cpc	r21, r25
    1284:	09 f0       	breq	.+2      	; 0x1288 <newSort+0xf6>
    1286:	e4 c0       	rjmp	.+456    	; 0x1450 <newSort+0x2be>
					pickSort(1, a1);
    1288:	b7 01       	movw	r22, r14
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	4c db       	rcall	.-2408   	; 0x928 <pickSort>
    1290:	df c0       	rjmp	.+446    	; 0x1450 <newSort+0x2be>
			}
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    1292:	d8 01       	movw	r26, r16
    1294:	aa 0f       	add	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	ad 5c       	subi	r26, 0xCD	; 205
    129a:	bd 4f       	sbci	r27, 0xFD	; 253
    129c:	8d 91       	ld	r24, X+
    129e:	9c 91       	ld	r25, X
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	41 f4       	brne	.+16     	; 0x12b4 <newSort+0x122>
    12a4:	21 96       	adiw	r28, 0x01	; 1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <newSort+0x118>
    12a8:	d3 c0       	rjmp	.+422    	; 0x1450 <newSort+0x2be>
			sortDrop(1, t1);
    12aa:	b8 01       	movw	r22, r16
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	b5 dd       	rcall	.-1174   	; 0xe1c <sortDrop>
    12b2:	ce c0       	rjmp	.+412    	; 0x1450 <newSort+0x2be>
		else if (arm[1] != -1)
    12b4:	21 96       	adiw	r28, 0x01	; 1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <newSort+0x128>
    12b8:	cb c0       	rjmp	.+406    	; 0x1450 <newSort+0x2be>
		{
			ct = a2;
    12ba:	d0 92 38 02 	sts	0x0238, r13
    12be:	c0 92 37 02 	sts	0x0237, r12
			if (term[a2][0] == -1 || term[a2][1] == -1)
    12c2:	d6 01       	movw	r26, r12
    12c4:	aa 0f       	add	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	aa 0f       	add	r26, r26
    12ca:	bb 1f       	adc	r27, r27
    12cc:	a5 5c       	subi	r26, 0xC5	; 197
    12ce:	bd 4f       	sbci	r27, 0xFD	; 253
    12d0:	8d 91       	ld	r24, X+
    12d2:	9c 91       	ld	r25, X
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	69 f0       	breq	.+26     	; 0x12f2 <newSort+0x160>
    12d8:	d6 01       	movw	r26, r12
    12da:	aa 0f       	add	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	aa 0f       	add	r26, r26
    12e0:	bb 1f       	adc	r27, r27
    12e2:	a5 5c       	subi	r26, 0xC5	; 197
    12e4:	bd 4f       	sbci	r27, 0xFD	; 253
    12e6:	12 96       	adiw	r26, 0x02	; 2
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	13 97       	sbiw	r26, 0x03	; 3
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	21 f5       	brne	.+72     	; 0x133a <newSort+0x1a8>
			{
				if (arm[0] == -1)
    12f2:	31 96       	adiw	r30, 0x01	; 1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <newSort+0x166>
    12f6:	ac c0       	rjmp	.+344    	; 0x1450 <newSort+0x2be>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    12f8:	c8 01       	movw	r24, r16
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	fc 01       	movw	r30, r24
    1300:	ed 5c       	subi	r30, 0xCD	; 205
    1302:	fd 4f       	sbci	r31, 0xFD	; 253
    1304:	40 81       	ld	r20, Z
    1306:	51 81       	ldd	r21, Z+1	; 0x01
    1308:	fc 01       	movw	r30, r24
    130a:	e5 5b       	subi	r30, 0xB5	; 181
    130c:	fd 4f       	sbci	r31, 0xFD	; 253
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	48 17       	cp	r20, r24
    1314:	59 07       	cpc	r21, r25
    1316:	09 f0       	breq	.+2      	; 0x131a <newSort+0x188>
    1318:	9b c0       	rjmp	.+310    	; 0x1450 <newSort+0x2be>
    131a:	f9 01       	movw	r30, r18
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	e5 5b       	subi	r30, 0xB5	; 181
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	48 17       	cp	r20, r24
    132a:	59 07       	cpc	r21, r25
    132c:	09 f0       	breq	.+2      	; 0x1330 <newSort+0x19e>
    132e:	90 c0       	rjmp	.+288    	; 0x1450 <newSort+0x2be>
						pickSort(1, t1);
    1330:	b8 01       	movw	r22, r16
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	f8 da       	rcall	.-2576   	; 0x928 <pickSort>
    1338:	8b c0       	rjmp	.+278    	; 0x1450 <newSort+0x2be>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    133a:	d8 01       	movw	r26, r16
    133c:	aa 0f       	add	r26, r26
    133e:	bb 1f       	adc	r27, r27
    1340:	ad 5c       	subi	r26, 0xCD	; 205
    1342:	bd 4f       	sbci	r27, 0xFD	; 253
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	09 f0       	breq	.+2      	; 0x134e <newSort+0x1bc>
    134c:	81 c0       	rjmp	.+258    	; 0x1450 <newSort+0x2be>
    134e:	31 96       	adiw	r30, 0x01	; 1
    1350:	09 f4       	brne	.+2      	; 0x1354 <newSort+0x1c2>
    1352:	7e c0       	rjmp	.+252    	; 0x1450 <newSort+0x2be>
				sortDrop(1, t1);
    1354:	b8 01       	movw	r22, r16
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	60 dd       	rcall	.-1344   	; 0xe1c <sortDrop>
    135c:	79 c0       	rjmp	.+242    	; 0x1450 <newSort+0x2be>
		}
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    135e:	a5 01       	movw	r20, r10
    1360:	44 0f       	add	r20, r20
    1362:	55 1f       	adc	r21, r21
    1364:	fa 01       	movw	r30, r20
    1366:	ed 5c       	subi	r30, 0xCD	; 205
    1368:	fd 4f       	sbci	r31, 0xFD	; 253
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	fa 01       	movw	r30, r20
    1370:	e5 5b       	subi	r30, 0xB5	; 181
    1372:	fd 4f       	sbci	r31, 0xFD	; 253
    1374:	40 81       	ld	r20, Z
    1376:	51 81       	ldd	r21, Z+1	; 0x01
    1378:	84 17       	cp	r24, r20
    137a:	95 07       	cpc	r25, r21
    137c:	51 f0       	breq	.+20     	; 0x1392 <newSort+0x200>
    137e:	f9 01       	movw	r30, r18
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	e5 5b       	subi	r30, 0xB5	; 181
    1386:	fd 4f       	sbci	r31, 0xFD	; 253
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	86 17       	cp	r24, r22
    138e:	97 07       	cpc	r25, r23
    1390:	81 f4       	brne	.+32     	; 0x13b2 <newSort+0x220>
    1392:	8f 3f       	cpi	r24, 0xFF	; 255
    1394:	6f ef       	ldi	r22, 0xFF	; 255
    1396:	96 07       	cpc	r25, r22
    1398:	69 f1       	breq	.+90     	; 0x13f4 <newSort+0x262>
			ct = indicator[sort[t1]];
    139a:	fc 01       	movw	r30, r24
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ed 5a       	subi	r30, 0xAD	; 173
    13a2:	fd 4f       	sbci	r31, 0xFD	; 253
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	90 93 38 02 	sts	0x0238, r25
    13ac:	80 93 37 02 	sts	0x0237, r24
    13b0:	4f c0       	rjmp	.+158    	; 0x1450 <newSort+0x2be>
		else if (sort[t1] != -1)
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	f9 f0       	breq	.+62     	; 0x13f4 <newSort+0x262>
		{
			pickSort(0, t1);
    13b6:	b5 01       	movw	r22, r10
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	b5 da       	rcall	.-2710   	; 0x928 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	a8 1a       	sub	r10, r24
    13c2:	b8 0a       	sbc	r11, r24
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	a2 22       	and	r10, r18
    13c8:	20 e8       	ldi	r18, 0x80	; 128
    13ca:	b2 22       	and	r11, r18
    13cc:	bb 20       	and	r11, r11
    13ce:	54 f4       	brge	.+20     	; 0x13e4 <newSort+0x252>
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	a4 1a       	sub	r10, r20
    13d4:	b1 08       	sbc	r11, r1
    13d6:	6e ef       	ldi	r22, 0xFE	; 254
    13d8:	a6 2a       	or	r10, r22
    13da:	bb 24       	eor	r11, r11
    13dc:	ba 94       	dec	r11
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	a8 1a       	sub	r10, r24
    13e2:	b8 0a       	sbc	r11, r24
    13e4:	24 e0       	ldi	r18, 0x04	; 4
    13e6:	a2 0e       	add	r10, r18
    13e8:	b1 1c       	adc	r11, r1
    13ea:	b0 92 38 02 	sts	0x0238, r11
    13ee:	a0 92 37 02 	sts	0x0237, r10
    13f2:	2e c0       	rjmp	.+92     	; 0x1450 <newSort+0x2be>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    13f4:	f5 01       	movw	r30, r10
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	ec 5e       	subi	r30, 0xEC	; 236
    13fc:	fd 4f       	sbci	r31, 0xFD	; 253
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	09 f5       	brne	.+66     	; 0x1448 <newSort+0x2b6>
    1406:	f5 01       	movw	r30, r10
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	e5 5c       	subi	r30, 0xC5	; 197
    1412:	fd 4f       	sbci	r31, 0xFD	; 253
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	48 17       	cp	r20, r24
    141a:	59 07       	cpc	r21, r25
    141c:	11 f0       	breq	.+4      	; 0x1422 <newSort+0x290>
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	99 f4       	brne	.+38     	; 0x1448 <newSort+0x2b6>
    1422:	f5 01       	movw	r30, r10
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e5 5c       	subi	r30, 0xC5	; 197
    142e:	fd 4f       	sbci	r31, 0xFD	; 253
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	48 17       	cp	r20, r24
    1436:	59 07       	cpc	r21, r25
    1438:	11 f0       	breq	.+4      	; 0x143e <newSort+0x2ac>
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	29 f4       	brne	.+10     	; 0x1448 <newSort+0x2b6>
			ct = t2;
    143e:	30 93 38 02 	sts	0x0238, r19
    1442:	20 93 37 02 	sts	0x0237, r18
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <newSort+0x2be>
		else ct = t1;
    1448:	b0 92 38 02 	sts	0x0238, r11
    144c:	a0 92 37 02 	sts	0x0237, r10

	}
	adj = adjCount(ct);
    1450:	40 91 37 02 	lds	r20, 0x0237
    1454:	50 91 38 02 	lds	r21, 0x0238
	arm[0] = arm[1] = -1;
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    1458:	9a 01       	movw	r18, r20
    145a:	2e 5f       	subi	r18, 0xFE	; 254
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	23 70       	andi	r18, 0x03	; 3
    1460:	30 78       	andi	r19, 0x80	; 128
    1462:	33 23       	and	r19, r19
    1464:	34 f4       	brge	.+12     	; 0x1472 <newSort+0x2e0>
    1466:	21 50       	subi	r18, 0x01	; 1
    1468:	31 09       	sbc	r19, r1
    146a:	2c 6f       	ori	r18, 0xFC	; 252
    146c:	3f 6f       	ori	r19, 0xFF	; 255
    146e:	2f 5f       	subi	r18, 0xFF	; 255
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    1472:	30 93 5c 02 	sts	0x025C, r19
    1476:	20 93 5b 02 	sts	0x025B, r18
	travel((t1 + 4) % 6, ct);
    147a:	c8 01       	movw	r24, r16
    147c:	04 96       	adiw	r24, 0x04	; 4
    147e:	66 e0       	ldi	r22, 0x06	; 6
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	4f d4       	rcall	.+2206   	; 0x1d22 <__divmodhi4>
    1484:	64 2f       	mov	r22, r20
    1486:	90 d9       	rcall	.-3296   	; 0x7a8 <travel>
    1488:	17 c0       	rjmp	.+46     	; 0x14b8 <newSort+0x326>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    148a:	80 91 37 02 	lds	r24, 0x0237
    148e:	90 91 38 02 	lds	r25, 0x0238
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	62 e0       	ldi	r22, 0x02	; 2
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	44 d4       	rcall	.+2184   	; 0x1d22 <__divmodhi4>
    149a:	5c 01       	movw	r10, r24
    149c:	8c 01       	movw	r16, r24
	t2 = t1 + 2;
    149e:	9c 01       	movw	r18, r24
    14a0:	2e 5f       	subi	r18, 0xFE	; 254
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
	if (arm[0] != -1 || arm[1] != -1)
    14a4:	ef 3f       	cpi	r30, 0xFF	; 255
    14a6:	6f ef       	ldi	r22, 0xFF	; 255
    14a8:	f6 07       	cpc	r31, r22
    14aa:	09 f4       	brne	.+2      	; 0x14ae <newSort+0x31c>
    14ac:	58 cf       	rjmp	.-336    	; 0x135e <newSort+0x1cc>
	{
		ct = a1;
    14ae:	f0 92 38 02 	sts	0x0238, r15
    14b2:	e0 92 37 02 	sts	0x0237, r14
    14b6:	b2 ce       	rjmp	.-668    	; 0x121c <newSort+0x8a>
		else ct = t1;

	}
	adj = adjCount(ct);
	travel((t1 + 4) % 6, ct);
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	08 95       	ret

000014ce <sortCheck>:
void sortCheck()
{
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
	int term1 = ct, a1, a2;
    14da:	40 91 37 02 	lds	r20, 0x0237
    14de:	50 91 38 02 	lds	r21, 0x0238
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    14e2:	9a 01       	movw	r18, r20
    14e4:	21 70       	andi	r18, 0x01	; 1
    14e6:	30 78       	andi	r19, 0x80	; 128
    14e8:	33 23       	and	r19, r19
    14ea:	34 f4       	brge	.+12     	; 0x14f8 <sortCheck+0x2a>
    14ec:	21 50       	subi	r18, 0x01	; 1
    14ee:	31 09       	sbc	r19, r1
    14f0:	2e 6f       	ori	r18, 0xFE	; 254
    14f2:	3f 6f       	ori	r19, 0xFF	; 255
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	c2 2f       	mov	r28, r18
    14fa:	d3 2f       	mov	r29, r19
    14fc:	f9 01       	movw	r30, r18
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	ed 5c       	subi	r30, 0xCD	; 205
    1504:	fd 4f       	sbci	r31, 0xFD	; 253
    1506:	20 81       	ld	r18, Z
    1508:	31 81       	ldd	r19, Z+1	; 0x01
    150a:	fa 01       	movw	r30, r20
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	e5 5b       	subi	r30, 0xB5	; 181
    1512:	fd 4f       	sbci	r31, 0xFD	; 253
    1514:	40 81       	ld	r20, Z
    1516:	51 81       	ldd	r21, Z+1	; 0x01
    1518:	24 17       	cp	r18, r20
    151a:	35 07       	cpc	r19, r21
    151c:	79 f0       	breq	.+30     	; 0x153c <sortCheck+0x6e>
    151e:	80 91 5b 02 	lds	r24, 0x025B
    1522:	90 91 5c 02 	lds	r25, 0x025C
    1526:	fc 01       	movw	r30, r24
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	e5 5b       	subi	r30, 0xB5	; 181
    152e:	fd 4f       	sbci	r31, 0xFD	; 253
    1530:	40 81       	ld	r20, Z
    1532:	51 81       	ldd	r21, Z+1	; 0x01
    1534:	24 17       	cp	r18, r20
    1536:	35 07       	cpc	r19, r21
    1538:	09 f0       	breq	.+2      	; 0x153c <sortCheck+0x6e>
    153a:	93 c0       	rjmp	.+294    	; 0x1662 <sortCheck+0x194>
	{
		if (armCount>0)
    153c:	80 91 02 02 	lds	r24, 0x0202
    1540:	90 91 03 02 	lds	r25, 0x0203
    1544:	18 16       	cp	r1, r24
    1546:	19 06       	cpc	r1, r25
    1548:	0c f0       	brlt	.+2      	; 0x154c <sortCheck+0x7e>
    154a:	82 c0       	rjmp	.+260    	; 0x1650 <sortCheck+0x182>
		{
			ct = indicator[sort[ct % 2]];
    154c:	f9 01       	movw	r30, r18
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ed 5a       	subi	r30, 0xAD	; 173
    1554:	fd 4f       	sbci	r31, 0xFD	; 253
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	70 93 38 02 	sts	0x0238, r23
    155e:	60 93 37 02 	sts	0x0237, r22
			if (arm[0] == -1)
    1562:	80 91 60 02 	lds	r24, 0x0260
    1566:	90 91 61 02 	lds	r25, 0x0261
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	71 f4       	brne	.+28     	; 0x158a <sortCheck+0xbc>
				pickSort(0, ct % 2);
    156e:	61 70       	andi	r22, 0x01	; 1
    1570:	70 78       	andi	r23, 0x80	; 128
    1572:	77 23       	and	r23, r23
    1574:	34 f4       	brge	.+12     	; 0x1582 <sortCheck+0xb4>
    1576:	61 50       	subi	r22, 0x01	; 1
    1578:	71 09       	sbc	r23, r1
    157a:	6e 6f       	ori	r22, 0xFE	; 254
    157c:	7f 6f       	ori	r23, 0xFF	; 255
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	d0 d9       	rcall	.-3168   	; 0x928 <pickSort>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <sortCheck+0xe2>
			else if (arm[1] == -1)
    158a:	80 91 62 02 	lds	r24, 0x0262
    158e:	90 91 63 02 	lds	r25, 0x0263
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	69 f4       	brne	.+26     	; 0x15b0 <sortCheck+0xe2>
				pickSort(1, ct % 2);
    1596:	61 70       	andi	r22, 0x01	; 1
    1598:	70 78       	andi	r23, 0x80	; 128
    159a:	77 23       	and	r23, r23
    159c:	34 f4       	brge	.+12     	; 0x15aa <sortCheck+0xdc>
    159e:	61 50       	subi	r22, 0x01	; 1
    15a0:	71 09       	sbc	r23, r1
    15a2:	6e 6f       	ori	r22, 0xFE	; 254
    15a4:	7f 6f       	ori	r23, 0xFF	; 255
    15a6:	6f 5f       	subi	r22, 0xFF	; 255
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	bc d9       	rcall	.-3208   	; 0x928 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    15b0:	80 91 02 02 	lds	r24, 0x0202
    15b4:	90 91 03 02 	lds	r25, 0x0203
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	09 f4       	brne	.+2      	; 0x15be <sortCheck+0xf0>
    15bc:	52 c1       	rjmp	.+676    	; 0x1862 <sortCheck+0x394>
    15be:	80 91 37 02 	lds	r24, 0x0237
    15c2:	90 91 38 02 	lds	r25, 0x0238
    15c6:	fc 01       	movw	r30, r24
    15c8:	ee 0f       	add	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	ee 0f       	add	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	e5 5c       	subi	r30, 0xC5	; 197
    15d2:	fd 4f       	sbci	r31, 0xFD	; 253
    15d4:	20 81       	ld	r18, Z
    15d6:	31 81       	ldd	r19, Z+1	; 0x01
    15d8:	2f 3f       	cpi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <sortCheck+0x112>
    15de:	41 c1       	rjmp	.+642    	; 0x1862 <sortCheck+0x394>
    15e0:	fc 01       	movw	r30, r24
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	e5 5c       	subi	r30, 0xC5	; 197
    15ec:	fd 4f       	sbci	r31, 0xFD	; 253
    15ee:	22 81       	ldd	r18, Z+2	; 0x02
    15f0:	33 81       	ldd	r19, Z+3	; 0x03
    15f2:	2f 3f       	cpi	r18, 0xFF	; 255
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	09 f4       	brne	.+2      	; 0x15fa <sortCheck+0x12c>
    15f8:	34 c1       	rjmp	.+616    	; 0x1862 <sortCheck+0x394>
    15fa:	9c 01       	movw	r18, r24
    15fc:	21 70       	andi	r18, 0x01	; 1
    15fe:	30 78       	andi	r19, 0x80	; 128
    1600:	33 23       	and	r19, r19
    1602:	34 f4       	brge	.+12     	; 0x1610 <sortCheck+0x142>
    1604:	21 50       	subi	r18, 0x01	; 1
    1606:	31 09       	sbc	r19, r1
    1608:	2e 6f       	ori	r18, 0xFE	; 254
    160a:	3f 6f       	ori	r19, 0xFF	; 255
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	62 2f       	mov	r22, r18
    1612:	73 2f       	mov	r23, r19
    1614:	f9 01       	movw	r30, r18
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	ed 5c       	subi	r30, 0xCD	; 205
    161c:	fd 4f       	sbci	r31, 0xFD	; 253
    161e:	20 81       	ld	r18, Z
    1620:	31 81       	ldd	r19, Z+1	; 0x01
    1622:	2f 3f       	cpi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	09 f0       	breq	.+2      	; 0x162a <sortCheck+0x15c>
    1628:	1c c1       	rjmp	.+568    	; 0x1862 <sortCheck+0x394>
				if (arm[0] == color[ct])
    162a:	fc 01       	movw	r30, r24
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e5 5b       	subi	r30, 0xB5	; 181
    1632:	fd 4f       	sbci	r31, 0xFD	; 253
    1634:	20 91 60 02 	lds	r18, 0x0260
    1638:	30 91 61 02 	lds	r19, 0x0261
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	28 17       	cp	r18, r24
    1642:	39 07       	cpc	r19, r25
    1644:	09 f0       	breq	.+2      	; 0x1648 <sortCheck+0x17a>
    1646:	0d c1       	rjmp	.+538    	; 0x1862 <sortCheck+0x394>
					sortDrop(1, ct % 2);
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	e7 db       	rcall	.-2098   	; 0xe1c <sortDrop>
    164e:	09 c1       	rjmp	.+530    	; 0x1862 <sortCheck+0x394>
				else if (arm[0] == color[ct])
					sortDrop(0, ct % 2);
		}
		else ct = adj;
    1650:	80 91 5b 02 	lds	r24, 0x025B
    1654:	90 91 5c 02 	lds	r25, 0x025C
    1658:	90 93 38 02 	sts	0x0238, r25
    165c:	80 93 37 02 	sts	0x0237, r24
    1660:	00 c1       	rjmp	.+512    	; 0x1862 <sortCheck+0x394>
	}
	else if (arm[0] != color[adj] && arm[1] != color[adj])
    1662:	60 91 60 02 	lds	r22, 0x0260
    1666:	70 91 61 02 	lds	r23, 0x0261
    166a:	46 17       	cp	r20, r22
    166c:	57 07       	cpc	r21, r23
    166e:	09 f4       	brne	.+2      	; 0x1672 <sortCheck+0x1a4>
    1670:	87 c0       	rjmp	.+270    	; 0x1780 <sortCheck+0x2b2>
    1672:	e0 91 62 02 	lds	r30, 0x0262
    1676:	f0 91 63 02 	lds	r31, 0x0263
    167a:	4e 17       	cp	r20, r30
    167c:	5f 07       	cpc	r21, r31
    167e:	09 f4       	brne	.+2      	; 0x1682 <sortCheck+0x1b4>
    1680:	7f c0       	rjmp	.+254    	; 0x1780 <sortCheck+0x2b2>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1682:	00 91 02 02 	lds	r16, 0x0202
    1686:	10 91 03 02 	lds	r17, 0x0203
    168a:	01 15       	cp	r16, r1
    168c:	11 05       	cpc	r17, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <sortCheck+0x1c4>
    1690:	4b c0       	rjmp	.+150    	; 0x1728 <sortCheck+0x25a>
    1692:	01 30       	cpi	r16, 0x01	; 1
    1694:	11 05       	cpc	r17, r1
    1696:	29 f4       	brne	.+10     	; 0x16a2 <sortCheck+0x1d4>
    1698:	2f 3f       	cpi	r18, 0xFF	; 255
    169a:	af ef       	ldi	r26, 0xFF	; 255
    169c:	3a 07       	cpc	r19, r26
    169e:	a1 f5       	brne	.+104    	; 0x1708 <sortCheck+0x23a>
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <sortCheck+0x1e6>
    16a2:	78 01       	movw	r14, r16
    16a4:	b1 e0       	ldi	r27, 0x01	; 1
    16a6:	eb 1a       	sub	r14, r27
    16a8:	f1 08       	sbc	r15, r1
    16aa:	a2 e0       	ldi	r26, 0x02	; 2
    16ac:	ea 16       	cp	r14, r26
    16ae:	f1 04       	cpc	r15, r1
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <sortCheck+0x1e6>
    16b2:	61 c0       	rjmp	.+194    	; 0x1776 <sortCheck+0x2a8>
    16b4:	7c 01       	movw	r14, r24
    16b6:	ee 0c       	add	r14, r14
    16b8:	ff 1c       	adc	r15, r15
    16ba:	ee 0c       	add	r14, r14
    16bc:	ff 1c       	adc	r15, r15
    16be:	d7 01       	movw	r26, r14
    16c0:	a5 5c       	subi	r26, 0xC5	; 197
    16c2:	bd 4f       	sbci	r27, 0xFD	; 253
    16c4:	ed 90       	ld	r14, X+
    16c6:	fc 90       	ld	r15, X
    16c8:	4e 15       	cp	r20, r14
    16ca:	5f 05       	cpc	r21, r15
    16cc:	21 f0       	breq	.+8      	; 0x16d6 <sortCheck+0x208>
    16ce:	ef 20       	and	r14, r15
    16d0:	e0 94       	com	r14
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <sortCheck+0x208>
    16d4:	50 c0       	rjmp	.+160    	; 0x1776 <sortCheck+0x2a8>
    16d6:	7c 01       	movw	r14, r24
    16d8:	ee 0c       	add	r14, r14
    16da:	ff 1c       	adc	r15, r15
    16dc:	ee 0c       	add	r14, r14
    16de:	ff 1c       	adc	r15, r15
    16e0:	d7 01       	movw	r26, r14
    16e2:	a5 5c       	subi	r26, 0xC5	; 197
    16e4:	bd 4f       	sbci	r27, 0xFD	; 253
    16e6:	12 96       	adiw	r26, 0x02	; 2
    16e8:	ed 90       	ld	r14, X+
    16ea:	fc 90       	ld	r15, X
    16ec:	13 97       	sbiw	r26, 0x03	; 3
    16ee:	4e 15       	cp	r20, r14
    16f0:	5f 05       	cpc	r21, r15
    16f2:	21 f0       	breq	.+8      	; 0x16fc <sortCheck+0x22e>
    16f4:	ef 20       	and	r14, r15
    16f6:	e0 94       	com	r14
    16f8:	09 f0       	breq	.+2      	; 0x16fc <sortCheck+0x22e>
    16fa:	3d c0       	rjmp	.+122    	; 0x1776 <sortCheck+0x2a8>
		{
			if (armCount>0)
    16fc:	10 16       	cp	r1, r16
    16fe:	11 06       	cpc	r1, r17
    1700:	9c f4       	brge	.+38     	; 0x1728 <sortCheck+0x25a>
			{
				if (sort[ct % 2] != -1)
    1702:	2f 3f       	cpi	r18, 0xFF	; 255
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	81 f0       	breq	.+32     	; 0x1728 <sortCheck+0x25a>
					if (arm[0] == -1)
    1708:	6f 3f       	cpi	r22, 0xFF	; 255
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	31 f4       	brne	.+12     	; 0x171a <sortCheck+0x24c>
						pickSort(0, ct % 2);
    170e:	6c 2f       	mov	r22, r28
    1710:	7d 2f       	mov	r23, r29
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	08 d9       	rcall	.-3568   	; 0x928 <pickSort>
    1718:	07 c0       	rjmp	.+14     	; 0x1728 <sortCheck+0x25a>
					else if (arm[1] == -1)
    171a:	31 96       	adiw	r30, 0x01	; 1
    171c:	29 f4       	brne	.+10     	; 0x1728 <sortCheck+0x25a>
						pickSort(1, ct % 2);
    171e:	6c 2f       	mov	r22, r28
    1720:	7d 2f       	mov	r23, r29
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	00 d9       	rcall	.-3584   	; 0x928 <pickSort>
			}
			travel(ct % 2 + 4, (ct + 1) % 2 + 4);
    1728:	80 91 37 02 	lds	r24, 0x0237
    172c:	90 91 38 02 	lds	r25, 0x0238
    1730:	bc 01       	movw	r22, r24
    1732:	6f 5f       	subi	r22, 0xFF	; 255
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	61 70       	andi	r22, 0x01	; 1
    1738:	70 78       	andi	r23, 0x80	; 128
    173a:	77 23       	and	r23, r23
    173c:	34 f4       	brge	.+12     	; 0x174a <sortCheck+0x27c>
    173e:	61 50       	subi	r22, 0x01	; 1
    1740:	71 09       	sbc	r23, r1
    1742:	6e 6f       	ori	r22, 0xFE	; 254
    1744:	7f 6f       	ori	r23, 0xFF	; 255
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	6c 5f       	subi	r22, 0xFC	; 252
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	90 78       	andi	r25, 0x80	; 128
    1750:	99 23       	and	r25, r25
    1752:	24 f4       	brge	.+8      	; 0x175c <sortCheck+0x28e>
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	8e 6f       	ori	r24, 0xFE	; 254
    1758:	9f 6f       	ori	r25, 0xFF	; 255
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	8c 5f       	subi	r24, 0xFC	; 252
    175e:	24 d8       	rcall	.-4024   	; 0x7a8 <travel>
			newSort();
    1760:	18 dd       	rcall	.-1488   	; 0x1192 <newSort>
			if (ct == 4 || ct == 5)
    1762:	80 91 37 02 	lds	r24, 0x0237
    1766:	90 91 38 02 	lds	r25, 0x0238
    176a:	04 97       	sbiw	r24, 0x04	; 4
    176c:	02 97       	sbiw	r24, 0x02	; 2
    176e:	08 f0       	brcs	.+2      	; 0x1772 <sortCheck+0x2a4>
    1770:	91 c0       	rjmp	.+290    	; 0x1894 <sortCheck+0x3c6>
				newSort();
    1772:	0f dd       	rcall	.-1506   	; 0x1192 <newSort>
    1774:	8f c0       	rjmp	.+286    	; 0x1894 <sortCheck+0x3c6>
			return;
		}
		else ct = adj;
    1776:	90 93 38 02 	sts	0x0238, r25
    177a:	80 93 37 02 	sts	0x0237, r24
		}
		else ct = adj;
	}
	else if (arm[0] != color[adj] && arm[1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    177e:	71 c0       	rjmp	.+226    	; 0x1862 <sortCheck+0x394>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    1780:	e0 91 02 02 	lds	r30, 0x0202
    1784:	f0 91 03 02 	lds	r31, 0x0203
    1788:	30 97       	sbiw	r30, 0x00	; 0
    178a:	c9 f5       	brne	.+114    	; 0x17fe <sortCheck+0x330>
    178c:	fc 01       	movw	r30, r24
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	ec 5e       	subi	r30, 0xEC	; 236
    1794:	fd 4f       	sbci	r31, 0xFD	; 253
    1796:	01 90       	ld	r0, Z+
    1798:	f0 81       	ld	r31, Z
    179a:	e0 2d       	mov	r30, r0
    179c:	e1 30       	cpi	r30, 0x01	; 1
    179e:	f1 05       	cpc	r31, r1
    17a0:	c9 f4       	brne	.+50     	; 0x17d4 <sortCheck+0x306>
    17a2:	fc 01       	movw	r30, r24
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	e5 5c       	subi	r30, 0xC5	; 197
    17ae:	fd 4f       	sbci	r31, 0xFD	; 253
    17b0:	01 90       	ld	r0, Z+
    17b2:	f0 81       	ld	r31, Z
    17b4:	e0 2d       	mov	r30, r0
    17b6:	31 96       	adiw	r30, 0x01	; 1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <sortCheck+0x2ee>
    17ba:	4b c0       	rjmp	.+150    	; 0x1852 <sortCheck+0x384>
    17bc:	fc 01       	movw	r30, r24
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	e5 5c       	subi	r30, 0xC5	; 197
    17c8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	21 f4       	brne	.+8      	; 0x17da <sortCheck+0x30c>
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <sortCheck+0x384>
    17d4:	ef 2b       	or	r30, r31
    17d6:	09 f0       	breq	.+2      	; 0x17da <sortCheck+0x30c>
    17d8:	3c c0       	rjmp	.+120    	; 0x1852 <sortCheck+0x384>
    17da:	2f 3f       	cpi	r18, 0xFF	; 255
    17dc:	3f 4f       	sbci	r19, 0xFF	; 255
    17de:	c9 f5       	brne	.+114    	; 0x1852 <sortCheck+0x384>
			if (arm[0] == color[adj])
    17e0:	46 17       	cp	r20, r22
    17e2:	57 07       	cpc	r21, r23
    17e4:	31 f4       	brne	.+12     	; 0x17f2 <sortCheck+0x324>
				sortDrop(1, ct % 2);
    17e6:	6c 2f       	mov	r22, r28
    17e8:	7d 2f       	mov	r23, r29
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	16 db       	rcall	.-2516   	; 0xe1c <sortDrop>
    17f0:	30 c0       	rjmp	.+96     	; 0x1852 <sortCheck+0x384>
			else sortDrop(0, ct % 2);
    17f2:	6c 2f       	mov	r22, r28
    17f4:	7d 2f       	mov	r23, r29
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	10 db       	rcall	.-2528   	; 0xe1c <sortDrop>
    17fc:	2a c0       	rjmp	.+84     	; 0x1852 <sortCheck+0x384>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    17fe:	31 97       	sbiw	r30, 0x01	; 1
    1800:	41 f5       	brne	.+80     	; 0x1852 <sortCheck+0x384>
    1802:	fc 01       	movw	r30, r24
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	e5 5c       	subi	r30, 0xC5	; 197
    180e:	fd 4f       	sbci	r31, 0xFD	; 253
    1810:	40 81       	ld	r20, Z
    1812:	51 81       	ldd	r21, Z+1	; 0x01
    1814:	4f 3f       	cpi	r20, 0xFF	; 255
    1816:	5f 4f       	sbci	r21, 0xFF	; 255
    1818:	59 f0       	breq	.+22     	; 0x1830 <sortCheck+0x362>
    181a:	fc 01       	movw	r30, r24
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	e5 5c       	subi	r30, 0xC5	; 197
    1826:	fd 4f       	sbci	r31, 0xFD	; 253
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	89 f4       	brne	.+34     	; 0x1852 <sortCheck+0x384>
    1830:	2f 3f       	cpi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	71 f0       	breq	.+28     	; 0x1852 <sortCheck+0x384>
			if (arm[0] == -1)
    1836:	6f 3f       	cpi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	31 f4       	brne	.+12     	; 0x1848 <sortCheck+0x37a>
				pickSort(0, ct % 2);
    183c:	6c 2f       	mov	r22, r28
    183e:	7d 2f       	mov	r23, r29
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	71 d8       	rcall	.-3870   	; 0x928 <pickSort>
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <sortCheck+0x384>
			else	pickSort(1, ct % 2);
    1848:	6c 2f       	mov	r22, r28
    184a:	7d 2f       	mov	r23, r29
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	6b d8       	rcall	.-3882   	; 0x928 <pickSort>
			ct = adj;
    1852:	80 91 5b 02 	lds	r24, 0x025B
    1856:	90 91 5c 02 	lds	r25, 0x025C
    185a:	90 93 38 02 	sts	0x0238, r25
    185e:	80 93 37 02 	sts	0x0237, r24
	}
	adj = adjCount(ct);
    1862:	60 91 37 02 	lds	r22, 0x0237
    1866:	70 91 38 02 	lds	r23, 0x0238
	arm[0] = arm[1] = -1;
}

int adjCount(int ct)
{
	return (ct + 2) % 4;
    186a:	9b 01       	movw	r18, r22
    186c:	2e 5f       	subi	r18, 0xFE	; 254
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	23 70       	andi	r18, 0x03	; 3
    1872:	30 78       	andi	r19, 0x80	; 128
    1874:	33 23       	and	r19, r19
    1876:	34 f4       	brge	.+12     	; 0x1884 <sortCheck+0x3b6>
    1878:	21 50       	subi	r18, 0x01	; 1
    187a:	31 09       	sbc	r19, r1
    187c:	2c 6f       	ori	r18, 0xFC	; 252
    187e:	3f 6f       	ori	r19, 0xFF	; 255
    1880:	2f 5f       	subi	r18, 0xFF	; 255
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
			if (arm[0] == -1)
				pickSort(0, ct % 2);
			else	pickSort(1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    1884:	30 93 5c 02 	sts	0x025C, r19
    1888:	20 93 5b 02 	sts	0x025B, r18
	travel(term1 % 2 + 4, ct);
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	8c 0f       	add	r24, r28
    1890:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <travel>
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	08 95       	ret

000018a2 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    18a2:	80 91 3b 02 	lds	r24, 0x023B
    18a6:	90 91 3c 02 	lds	r25, 0x023C
    18aa:	20 91 4b 02 	lds	r18, 0x024B
    18ae:	30 91 4c 02 	lds	r19, 0x024C
    18b2:	82 17       	cp	r24, r18
    18b4:	93 07       	cpc	r25, r19
    18b6:	09 f0       	breq	.+2      	; 0x18ba <predict+0x18>
    18b8:	5f c0       	rjmp	.+190    	; 0x1978 <predict+0xd6>
    18ba:	20 91 3d 02 	lds	r18, 0x023D
    18be:	30 91 3e 02 	lds	r19, 0x023E
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	09 f0       	breq	.+2      	; 0x18ca <predict+0x28>
    18c8:	57 c0       	rjmp	.+174    	; 0x1978 <predict+0xd6>
    18ca:	80 91 3f 02 	lds	r24, 0x023F
    18ce:	90 91 40 02 	lds	r25, 0x0240
    18d2:	20 91 4d 02 	lds	r18, 0x024D
    18d6:	30 91 4e 02 	lds	r19, 0x024E
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	09 f0       	breq	.+2      	; 0x18e2 <predict+0x40>
    18e0:	4b c0       	rjmp	.+150    	; 0x1978 <predict+0xd6>
    18e2:	20 91 41 02 	lds	r18, 0x0241
    18e6:	30 91 42 02 	lds	r19, 0x0242
    18ea:	82 17       	cp	r24, r18
    18ec:	93 07       	cpc	r25, r19
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <predict+0x50>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <predict+0xd6>
    18f2:	80 91 37 02 	lds	r24, 0x0237
    18f6:	90 91 38 02 	lds	r25, 0x0238
    18fa:	fc 01       	movw	r30, r24
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	e5 5c       	subi	r30, 0xC5	; 197
    1906:	fd 4f       	sbci	r31, 0xFD	; 253
    1908:	20 81       	ld	r18, Z
    190a:	31 81       	ldd	r19, Z+1	; 0x01
    190c:	fc 01       	movw	r30, r24
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	e5 5b       	subi	r30, 0xB5	; 181
    1914:	fd 4f       	sbci	r31, 0xFD	; 253
    1916:	40 81       	ld	r20, Z
    1918:	51 81       	ldd	r21, Z+1	; 0x01
    191a:	24 17       	cp	r18, r20
    191c:	35 07       	cpc	r19, r21
    191e:	61 f5       	brne	.+88     	; 0x1978 <predict+0xd6>
    1920:	fc 01       	movw	r30, r24
    1922:	ee 0f       	add	r30, r30
    1924:	ff 1f       	adc	r31, r31
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	e5 5c       	subi	r30, 0xC5	; 197
    192c:	fd 4f       	sbci	r31, 0xFD	; 253
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	28 17       	cp	r18, r24
    1934:	39 07       	cpc	r19, r25
    1936:	01 f5       	brne	.+64     	; 0x1978 <predict+0xd6>
    1938:	80 91 33 02 	lds	r24, 0x0233
    193c:	90 91 34 02 	lds	r25, 0x0234
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	d1 f4       	brne	.+52     	; 0x1978 <predict+0xd6>
    1944:	80 91 35 02 	lds	r24, 0x0235
    1948:	90 91 36 02 	lds	r25, 0x0236
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	a1 f4       	brne	.+40     	; 0x1978 <predict+0xd6>
    1950:	80 91 60 02 	lds	r24, 0x0260
    1954:	90 91 61 02 	lds	r25, 0x0261
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	71 f4       	brne	.+28     	; 0x1978 <predict+0xd6>
    195c:	80 91 62 02 	lds	r24, 0x0262
    1960:	90 91 63 02 	lds	r25, 0x0263
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	41 f4       	brne	.+16     	; 0x1978 <predict+0xd6>
		sorted = total;
    1968:	80 91 00 02 	lds	r24, 0x0200
    196c:	90 91 01 02 	lds	r25, 0x0201
    1970:	90 93 07 02 	sts	0x0207, r25
    1974:	80 93 06 02 	sts	0x0206, r24
    1978:	08 95       	ret

0000197a <main>:

}
int main()
{
	setIndicatorAndColor();
    197a:	0e 94 97 02 	call	0x52e	; 0x52e <setIndicatorAndColor>
	ct = 0; adj = 2;
    197e:	10 92 38 02 	sts	0x0238, r1
    1982:	10 92 37 02 	sts	0x0237, r1
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	90 93 5c 02 	sts	0x025C, r25
    198e:	80 93 5b 02 	sts	0x025B, r24
	while (sorted<total)
    1992:	20 91 06 02 	lds	r18, 0x0206
    1996:	30 91 07 02 	lds	r19, 0x0207
    199a:	80 91 00 02 	lds	r24, 0x0200
    199e:	90 91 01 02 	lds	r25, 0x0201
    19a2:	28 17       	cp	r18, r24
    19a4:	39 07       	cpc	r19, r25
    19a6:	9c f5       	brge	.+102    	; 0x1a0e <main+0x94>
	{
		canDrop();
    19a8:	a7 da       	rcall	.-2738   	; 0xef8 <canDrop>
		if (visitedCount == 3)
    19aa:	80 91 04 02 	lds	r24, 0x0204
    19ae:	90 91 05 02 	lds	r25, 0x0205
    19b2:	03 97       	sbiw	r24, 0x03	; 3
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <main+0x3e>
			predict();
    19b6:	75 df       	rcall	.-278    	; 0x18a2 <predict>
		if (sorted == total)
    19b8:	20 91 06 02 	lds	r18, 0x0206
    19bc:	30 91 07 02 	lds	r19, 0x0207
    19c0:	80 91 00 02 	lds	r24, 0x0200
    19c4:	90 91 01 02 	lds	r25, 0x0201
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	01 f1       	breq	.+64     	; 0x1a0e <main+0x94>
			break;
		pickup();
    19ce:	0e 94 ac 04 	call	0x958	; 0x958 <pickup>
		travel(ct, ct % 2 + 4);
    19d2:	80 91 37 02 	lds	r24, 0x0237
    19d6:	90 91 38 02 	lds	r25, 0x0238
    19da:	bc 01       	movw	r22, r24
    19dc:	61 70       	andi	r22, 0x01	; 1
    19de:	70 78       	andi	r23, 0x80	; 128
    19e0:	77 23       	and	r23, r23
    19e2:	34 f4       	brge	.+12     	; 0x19f0 <main+0x76>
    19e4:	61 50       	subi	r22, 0x01	; 1
    19e6:	71 09       	sbc	r23, r1
    19e8:	6e 6f       	ori	r22, 0xFE	; 254
    19ea:	7f 6f       	ori	r23, 0xFF	; 255
    19ec:	6f 5f       	subi	r22, 0xFF	; 255
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	6c 5f       	subi	r22, 0xFC	; 252
    19f2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <travel>
		sortCheck();
    19f6:	6b dd       	rcall	.-1322   	; 0x14ce <sortCheck>
}
int main()
{
	setIndicatorAndColor();
	ct = 0; adj = 2;
	while (sorted<total)
    19f8:	20 91 06 02 	lds	r18, 0x0206
    19fc:	30 91 07 02 	lds	r19, 0x0207
    1a00:	80 91 00 02 	lds	r24, 0x0200
    1a04:	90 91 01 02 	lds	r25, 0x0201
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	6c f2       	brlt	.-102    	; 0x19a8 <main+0x2e>
		pickup();
		travel(ct, ct % 2 + 4);
		sortCheck();
	}
	return 0;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	08 95       	ret

00001a14 <__subsf3>:
    1a14:	50 58       	subi	r21, 0x80	; 128

00001a16 <__addsf3>:
    1a16:	bb 27       	eor	r27, r27
    1a18:	aa 27       	eor	r26, r26
    1a1a:	0e d0       	rcall	.+28     	; 0x1a38 <__addsf3x>
    1a1c:	48 c1       	rjmp	.+656    	; 0x1cae <__fp_round>
    1a1e:	39 d1       	rcall	.+626    	; 0x1c92 <__fp_pscA>
    1a20:	30 f0       	brcs	.+12     	; 0x1a2e <__addsf3+0x18>
    1a22:	3e d1       	rcall	.+636    	; 0x1ca0 <__fp_pscB>
    1a24:	20 f0       	brcs	.+8      	; 0x1a2e <__addsf3+0x18>
    1a26:	31 f4       	brne	.+12     	; 0x1a34 <__addsf3+0x1e>
    1a28:	9f 3f       	cpi	r25, 0xFF	; 255
    1a2a:	11 f4       	brne	.+4      	; 0x1a30 <__addsf3+0x1a>
    1a2c:	1e f4       	brtc	.+6      	; 0x1a34 <__addsf3+0x1e>
    1a2e:	2e c1       	rjmp	.+604    	; 0x1c8c <__fp_nan>
    1a30:	0e f4       	brtc	.+2      	; 0x1a34 <__addsf3+0x1e>
    1a32:	e0 95       	com	r30
    1a34:	e7 fb       	bst	r30, 7
    1a36:	24 c1       	rjmp	.+584    	; 0x1c80 <__fp_inf>

00001a38 <__addsf3x>:
    1a38:	e9 2f       	mov	r30, r25
    1a3a:	4a d1       	rcall	.+660    	; 0x1cd0 <__fp_split3>
    1a3c:	80 f3       	brcs	.-32     	; 0x1a1e <__addsf3+0x8>
    1a3e:	ba 17       	cp	r27, r26
    1a40:	62 07       	cpc	r22, r18
    1a42:	73 07       	cpc	r23, r19
    1a44:	84 07       	cpc	r24, r20
    1a46:	95 07       	cpc	r25, r21
    1a48:	18 f0       	brcs	.+6      	; 0x1a50 <__addsf3x+0x18>
    1a4a:	71 f4       	brne	.+28     	; 0x1a68 <__addsf3x+0x30>
    1a4c:	9e f5       	brtc	.+102    	; 0x1ab4 <__addsf3x+0x7c>
    1a4e:	62 c1       	rjmp	.+708    	; 0x1d14 <__fp_zero>
    1a50:	0e f4       	brtc	.+2      	; 0x1a54 <__addsf3x+0x1c>
    1a52:	e0 95       	com	r30
    1a54:	0b 2e       	mov	r0, r27
    1a56:	ba 2f       	mov	r27, r26
    1a58:	a0 2d       	mov	r26, r0
    1a5a:	0b 01       	movw	r0, r22
    1a5c:	b9 01       	movw	r22, r18
    1a5e:	90 01       	movw	r18, r0
    1a60:	0c 01       	movw	r0, r24
    1a62:	ca 01       	movw	r24, r20
    1a64:	a0 01       	movw	r20, r0
    1a66:	11 24       	eor	r1, r1
    1a68:	ff 27       	eor	r31, r31
    1a6a:	59 1b       	sub	r21, r25
    1a6c:	99 f0       	breq	.+38     	; 0x1a94 <__addsf3x+0x5c>
    1a6e:	59 3f       	cpi	r21, 0xF9	; 249
    1a70:	50 f4       	brcc	.+20     	; 0x1a86 <__addsf3x+0x4e>
    1a72:	50 3e       	cpi	r21, 0xE0	; 224
    1a74:	68 f1       	brcs	.+90     	; 0x1ad0 <__addsf3x+0x98>
    1a76:	1a 16       	cp	r1, r26
    1a78:	f0 40       	sbci	r31, 0x00	; 0
    1a7a:	a2 2f       	mov	r26, r18
    1a7c:	23 2f       	mov	r18, r19
    1a7e:	34 2f       	mov	r19, r20
    1a80:	44 27       	eor	r20, r20
    1a82:	58 5f       	subi	r21, 0xF8	; 248
    1a84:	f3 cf       	rjmp	.-26     	; 0x1a6c <__addsf3x+0x34>
    1a86:	46 95       	lsr	r20
    1a88:	37 95       	ror	r19
    1a8a:	27 95       	ror	r18
    1a8c:	a7 95       	ror	r26
    1a8e:	f0 40       	sbci	r31, 0x00	; 0
    1a90:	53 95       	inc	r21
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__addsf3x+0x4e>
    1a94:	7e f4       	brtc	.+30     	; 0x1ab4 <__addsf3x+0x7c>
    1a96:	1f 16       	cp	r1, r31
    1a98:	ba 0b       	sbc	r27, r26
    1a9a:	62 0b       	sbc	r22, r18
    1a9c:	73 0b       	sbc	r23, r19
    1a9e:	84 0b       	sbc	r24, r20
    1aa0:	ba f0       	brmi	.+46     	; 0x1ad0 <__addsf3x+0x98>
    1aa2:	91 50       	subi	r25, 0x01	; 1
    1aa4:	a1 f0       	breq	.+40     	; 0x1ace <__addsf3x+0x96>
    1aa6:	ff 0f       	add	r31, r31
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	66 1f       	adc	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	c2 f7       	brpl	.-16     	; 0x1aa2 <__addsf3x+0x6a>
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <__addsf3x+0x98>
    1ab4:	ba 0f       	add	r27, r26
    1ab6:	62 1f       	adc	r22, r18
    1ab8:	73 1f       	adc	r23, r19
    1aba:	84 1f       	adc	r24, r20
    1abc:	48 f4       	brcc	.+18     	; 0x1ad0 <__addsf3x+0x98>
    1abe:	87 95       	ror	r24
    1ac0:	77 95       	ror	r23
    1ac2:	67 95       	ror	r22
    1ac4:	b7 95       	ror	r27
    1ac6:	f7 95       	ror	r31
    1ac8:	9e 3f       	cpi	r25, 0xFE	; 254
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <__addsf3x+0x96>
    1acc:	b3 cf       	rjmp	.-154    	; 0x1a34 <__addsf3+0x1e>
    1ace:	93 95       	inc	r25
    1ad0:	88 0f       	add	r24, r24
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <__addsf3x+0x9e>
    1ad4:	99 27       	eor	r25, r25
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	97 95       	ror	r25
    1ada:	87 95       	ror	r24
    1adc:	08 95       	ret

00001ade <__divsf3>:
    1ade:	0c d0       	rcall	.+24     	; 0x1af8 <__divsf3x>
    1ae0:	e6 c0       	rjmp	.+460    	; 0x1cae <__fp_round>
    1ae2:	de d0       	rcall	.+444    	; 0x1ca0 <__fp_pscB>
    1ae4:	40 f0       	brcs	.+16     	; 0x1af6 <__divsf3+0x18>
    1ae6:	d5 d0       	rcall	.+426    	; 0x1c92 <__fp_pscA>
    1ae8:	30 f0       	brcs	.+12     	; 0x1af6 <__divsf3+0x18>
    1aea:	21 f4       	brne	.+8      	; 0x1af4 <__divsf3+0x16>
    1aec:	5f 3f       	cpi	r21, 0xFF	; 255
    1aee:	19 f0       	breq	.+6      	; 0x1af6 <__divsf3+0x18>
    1af0:	c7 c0       	rjmp	.+398    	; 0x1c80 <__fp_inf>
    1af2:	51 11       	cpse	r21, r1
    1af4:	10 c1       	rjmp	.+544    	; 0x1d16 <__fp_szero>
    1af6:	ca c0       	rjmp	.+404    	; 0x1c8c <__fp_nan>

00001af8 <__divsf3x>:
    1af8:	eb d0       	rcall	.+470    	; 0x1cd0 <__fp_split3>
    1afa:	98 f3       	brcs	.-26     	; 0x1ae2 <__divsf3+0x4>

00001afc <__divsf3_pse>:
    1afc:	99 23       	and	r25, r25
    1afe:	c9 f3       	breq	.-14     	; 0x1af2 <__divsf3+0x14>
    1b00:	55 23       	and	r21, r21
    1b02:	b1 f3       	breq	.-20     	; 0x1af0 <__divsf3+0x12>
    1b04:	95 1b       	sub	r25, r21
    1b06:	55 0b       	sbc	r21, r21
    1b08:	bb 27       	eor	r27, r27
    1b0a:	aa 27       	eor	r26, r26
    1b0c:	62 17       	cp	r22, r18
    1b0e:	73 07       	cpc	r23, r19
    1b10:	84 07       	cpc	r24, r20
    1b12:	38 f0       	brcs	.+14     	; 0x1b22 <__divsf3_pse+0x26>
    1b14:	9f 5f       	subi	r25, 0xFF	; 255
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	22 0f       	add	r18, r18
    1b1a:	33 1f       	adc	r19, r19
    1b1c:	44 1f       	adc	r20, r20
    1b1e:	aa 1f       	adc	r26, r26
    1b20:	a9 f3       	breq	.-22     	; 0x1b0c <__divsf3_pse+0x10>
    1b22:	33 d0       	rcall	.+102    	; 0x1b8a <__divsf3_pse+0x8e>
    1b24:	0e 2e       	mov	r0, r30
    1b26:	3a f0       	brmi	.+14     	; 0x1b36 <__divsf3_pse+0x3a>
    1b28:	e0 e8       	ldi	r30, 0x80	; 128
    1b2a:	30 d0       	rcall	.+96     	; 0x1b8c <__divsf3_pse+0x90>
    1b2c:	91 50       	subi	r25, 0x01	; 1
    1b2e:	50 40       	sbci	r21, 0x00	; 0
    1b30:	e6 95       	lsr	r30
    1b32:	00 1c       	adc	r0, r0
    1b34:	ca f7       	brpl	.-14     	; 0x1b28 <__divsf3_pse+0x2c>
    1b36:	29 d0       	rcall	.+82     	; 0x1b8a <__divsf3_pse+0x8e>
    1b38:	fe 2f       	mov	r31, r30
    1b3a:	27 d0       	rcall	.+78     	; 0x1b8a <__divsf3_pse+0x8e>
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	bb 1f       	adc	r27, r27
    1b44:	26 17       	cp	r18, r22
    1b46:	37 07       	cpc	r19, r23
    1b48:	48 07       	cpc	r20, r24
    1b4a:	ab 07       	cpc	r26, r27
    1b4c:	b0 e8       	ldi	r27, 0x80	; 128
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <__divsf3_pse+0x56>
    1b50:	bb 0b       	sbc	r27, r27
    1b52:	80 2d       	mov	r24, r0
    1b54:	bf 01       	movw	r22, r30
    1b56:	ff 27       	eor	r31, r31
    1b58:	93 58       	subi	r25, 0x83	; 131
    1b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5c:	2a f0       	brmi	.+10     	; 0x1b68 <__divsf3_pse+0x6c>
    1b5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b60:	51 05       	cpc	r21, r1
    1b62:	68 f0       	brcs	.+26     	; 0x1b7e <__divsf3_pse+0x82>
    1b64:	8d c0       	rjmp	.+282    	; 0x1c80 <__fp_inf>
    1b66:	d7 c0       	rjmp	.+430    	; 0x1d16 <__fp_szero>
    1b68:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6a:	ec f3       	brlt	.-6      	; 0x1b66 <__divsf3_pse+0x6a>
    1b6c:	98 3e       	cpi	r25, 0xE8	; 232
    1b6e:	dc f3       	brlt	.-10     	; 0x1b66 <__divsf3_pse+0x6a>
    1b70:	86 95       	lsr	r24
    1b72:	77 95       	ror	r23
    1b74:	67 95       	ror	r22
    1b76:	b7 95       	ror	r27
    1b78:	f7 95       	ror	r31
    1b7a:	9f 5f       	subi	r25, 0xFF	; 255
    1b7c:	c9 f7       	brne	.-14     	; 0x1b70 <__divsf3_pse+0x74>
    1b7e:	88 0f       	add	r24, r24
    1b80:	91 1d       	adc	r25, r1
    1b82:	96 95       	lsr	r25
    1b84:	87 95       	ror	r24
    1b86:	97 f9       	bld	r25, 7
    1b88:	08 95       	ret
    1b8a:	e1 e0       	ldi	r30, 0x01	; 1
    1b8c:	66 0f       	add	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	bb 1f       	adc	r27, r27
    1b94:	62 17       	cp	r22, r18
    1b96:	73 07       	cpc	r23, r19
    1b98:	84 07       	cpc	r24, r20
    1b9a:	ba 07       	cpc	r27, r26
    1b9c:	20 f0       	brcs	.+8      	; 0x1ba6 <__divsf3_pse+0xaa>
    1b9e:	62 1b       	sub	r22, r18
    1ba0:	73 0b       	sbc	r23, r19
    1ba2:	84 0b       	sbc	r24, r20
    1ba4:	ba 0b       	sbc	r27, r26
    1ba6:	ee 1f       	adc	r30, r30
    1ba8:	88 f7       	brcc	.-30     	; 0x1b8c <__divsf3_pse+0x90>
    1baa:	e0 95       	com	r30
    1bac:	08 95       	ret

00001bae <__fixunssfsi>:
    1bae:	98 d0       	rcall	.+304    	; 0x1ce0 <__fp_splitA>
    1bb0:	88 f0       	brcs	.+34     	; 0x1bd4 <__fixunssfsi+0x26>
    1bb2:	9f 57       	subi	r25, 0x7F	; 127
    1bb4:	90 f0       	brcs	.+36     	; 0x1bda <__fixunssfsi+0x2c>
    1bb6:	b9 2f       	mov	r27, r25
    1bb8:	99 27       	eor	r25, r25
    1bba:	b7 51       	subi	r27, 0x17	; 23
    1bbc:	a0 f0       	brcs	.+40     	; 0x1be6 <__fixunssfsi+0x38>
    1bbe:	d1 f0       	breq	.+52     	; 0x1bf4 <__fixunssfsi+0x46>
    1bc0:	66 0f       	add	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	1a f0       	brmi	.+6      	; 0x1bd0 <__fixunssfsi+0x22>
    1bca:	ba 95       	dec	r27
    1bcc:	c9 f7       	brne	.-14     	; 0x1bc0 <__fixunssfsi+0x12>
    1bce:	12 c0       	rjmp	.+36     	; 0x1bf4 <__fixunssfsi+0x46>
    1bd0:	b1 30       	cpi	r27, 0x01	; 1
    1bd2:	81 f0       	breq	.+32     	; 0x1bf4 <__fixunssfsi+0x46>
    1bd4:	9f d0       	rcall	.+318    	; 0x1d14 <__fp_zero>
    1bd6:	b1 e0       	ldi	r27, 0x01	; 1
    1bd8:	08 95       	ret
    1bda:	9c c0       	rjmp	.+312    	; 0x1d14 <__fp_zero>
    1bdc:	67 2f       	mov	r22, r23
    1bde:	78 2f       	mov	r23, r24
    1be0:	88 27       	eor	r24, r24
    1be2:	b8 5f       	subi	r27, 0xF8	; 248
    1be4:	39 f0       	breq	.+14     	; 0x1bf4 <__fixunssfsi+0x46>
    1be6:	b9 3f       	cpi	r27, 0xF9	; 249
    1be8:	cc f3       	brlt	.-14     	; 0x1bdc <__fixunssfsi+0x2e>
    1bea:	86 95       	lsr	r24
    1bec:	77 95       	ror	r23
    1bee:	67 95       	ror	r22
    1bf0:	b3 95       	inc	r27
    1bf2:	d9 f7       	brne	.-10     	; 0x1bea <__fixunssfsi+0x3c>
    1bf4:	3e f4       	brtc	.+14     	; 0x1c04 <__fixunssfsi+0x56>
    1bf6:	90 95       	com	r25
    1bf8:	80 95       	com	r24
    1bfa:	70 95       	com	r23
    1bfc:	61 95       	neg	r22
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	8f 4f       	sbci	r24, 0xFF	; 255
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	08 95       	ret

00001c06 <__floatunsisf>:
    1c06:	e8 94       	clt
    1c08:	09 c0       	rjmp	.+18     	; 0x1c1c <__floatsisf+0x12>

00001c0a <__floatsisf>:
    1c0a:	97 fb       	bst	r25, 7
    1c0c:	3e f4       	brtc	.+14     	; 0x1c1c <__floatsisf+0x12>
    1c0e:	90 95       	com	r25
    1c10:	80 95       	com	r24
    1c12:	70 95       	com	r23
    1c14:	61 95       	neg	r22
    1c16:	7f 4f       	sbci	r23, 0xFF	; 255
    1c18:	8f 4f       	sbci	r24, 0xFF	; 255
    1c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1c:	99 23       	and	r25, r25
    1c1e:	a9 f0       	breq	.+42     	; 0x1c4a <__floatsisf+0x40>
    1c20:	f9 2f       	mov	r31, r25
    1c22:	96 e9       	ldi	r25, 0x96	; 150
    1c24:	bb 27       	eor	r27, r27
    1c26:	93 95       	inc	r25
    1c28:	f6 95       	lsr	r31
    1c2a:	87 95       	ror	r24
    1c2c:	77 95       	ror	r23
    1c2e:	67 95       	ror	r22
    1c30:	b7 95       	ror	r27
    1c32:	f1 11       	cpse	r31, r1
    1c34:	f8 cf       	rjmp	.-16     	; 0x1c26 <__floatsisf+0x1c>
    1c36:	fa f4       	brpl	.+62     	; 0x1c76 <__floatsisf+0x6c>
    1c38:	bb 0f       	add	r27, r27
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <__floatsisf+0x36>
    1c3c:	60 ff       	sbrs	r22, 0
    1c3e:	1b c0       	rjmp	.+54     	; 0x1c76 <__floatsisf+0x6c>
    1c40:	6f 5f       	subi	r22, 0xFF	; 255
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	8f 4f       	sbci	r24, 0xFF	; 255
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	16 c0       	rjmp	.+44     	; 0x1c76 <__floatsisf+0x6c>
    1c4a:	88 23       	and	r24, r24
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <__floatsisf+0x48>
    1c4e:	96 e9       	ldi	r25, 0x96	; 150
    1c50:	11 c0       	rjmp	.+34     	; 0x1c74 <__floatsisf+0x6a>
    1c52:	77 23       	and	r23, r23
    1c54:	21 f0       	breq	.+8      	; 0x1c5e <__floatsisf+0x54>
    1c56:	9e e8       	ldi	r25, 0x8E	; 142
    1c58:	87 2f       	mov	r24, r23
    1c5a:	76 2f       	mov	r23, r22
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <__floatsisf+0x5e>
    1c5e:	66 23       	and	r22, r22
    1c60:	71 f0       	breq	.+28     	; 0x1c7e <__floatsisf+0x74>
    1c62:	96 e8       	ldi	r25, 0x86	; 134
    1c64:	86 2f       	mov	r24, r22
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	2a f0       	brmi	.+10     	; 0x1c76 <__floatsisf+0x6c>
    1c6c:	9a 95       	dec	r25
    1c6e:	66 0f       	add	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	da f7       	brpl	.-10     	; 0x1c6c <__floatsisf+0x62>
    1c76:	88 0f       	add	r24, r24
    1c78:	96 95       	lsr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	97 f9       	bld	r25, 7
    1c7e:	08 95       	ret

00001c80 <__fp_inf>:
    1c80:	97 f9       	bld	r25, 7
    1c82:	9f 67       	ori	r25, 0x7F	; 127
    1c84:	80 e8       	ldi	r24, 0x80	; 128
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	08 95       	ret

00001c8c <__fp_nan>:
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	80 ec       	ldi	r24, 0xC0	; 192
    1c90:	08 95       	ret

00001c92 <__fp_pscA>:
    1c92:	00 24       	eor	r0, r0
    1c94:	0a 94       	dec	r0
    1c96:	16 16       	cp	r1, r22
    1c98:	17 06       	cpc	r1, r23
    1c9a:	18 06       	cpc	r1, r24
    1c9c:	09 06       	cpc	r0, r25
    1c9e:	08 95       	ret

00001ca0 <__fp_pscB>:
    1ca0:	00 24       	eor	r0, r0
    1ca2:	0a 94       	dec	r0
    1ca4:	12 16       	cp	r1, r18
    1ca6:	13 06       	cpc	r1, r19
    1ca8:	14 06       	cpc	r1, r20
    1caa:	05 06       	cpc	r0, r21
    1cac:	08 95       	ret

00001cae <__fp_round>:
    1cae:	09 2e       	mov	r0, r25
    1cb0:	03 94       	inc	r0
    1cb2:	00 0c       	add	r0, r0
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <__fp_round+0xc>
    1cb6:	88 23       	and	r24, r24
    1cb8:	52 f0       	brmi	.+20     	; 0x1cce <__fp_round+0x20>
    1cba:	bb 0f       	add	r27, r27
    1cbc:	40 f4       	brcc	.+16     	; 0x1cce <__fp_round+0x20>
    1cbe:	bf 2b       	or	r27, r31
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <__fp_round+0x18>
    1cc2:	60 ff       	sbrs	r22, 0
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <__fp_round+0x20>
    1cc6:	6f 5f       	subi	r22, 0xFF	; 255
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	08 95       	ret

00001cd0 <__fp_split3>:
    1cd0:	57 fd       	sbrc	r21, 7
    1cd2:	90 58       	subi	r25, 0x80	; 128
    1cd4:	44 0f       	add	r20, r20
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	59 f0       	breq	.+22     	; 0x1cf0 <__fp_splitA+0x10>
    1cda:	5f 3f       	cpi	r21, 0xFF	; 255
    1cdc:	71 f0       	breq	.+28     	; 0x1cfa <__fp_splitA+0x1a>
    1cde:	47 95       	ror	r20

00001ce0 <__fp_splitA>:
    1ce0:	88 0f       	add	r24, r24
    1ce2:	97 fb       	bst	r25, 7
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <__fp_splitA+0x20>
    1ce8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cea:	79 f0       	breq	.+30     	; 0x1d0a <__fp_splitA+0x2a>
    1cec:	87 95       	ror	r24
    1cee:	08 95       	ret
    1cf0:	12 16       	cp	r1, r18
    1cf2:	13 06       	cpc	r1, r19
    1cf4:	14 06       	cpc	r1, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	f2 cf       	rjmp	.-28     	; 0x1cde <__fp_split3+0xe>
    1cfa:	46 95       	lsr	r20
    1cfc:	f1 df       	rcall	.-30     	; 0x1ce0 <__fp_splitA>
    1cfe:	08 c0       	rjmp	.+16     	; 0x1d10 <__fp_splitA+0x30>
    1d00:	16 16       	cp	r1, r22
    1d02:	17 06       	cpc	r1, r23
    1d04:	18 06       	cpc	r1, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	f1 cf       	rjmp	.-30     	; 0x1cec <__fp_splitA+0xc>
    1d0a:	86 95       	lsr	r24
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	61 05       	cpc	r22, r1
    1d10:	08 94       	sec
    1d12:	08 95       	ret

00001d14 <__fp_zero>:
    1d14:	e8 94       	clt

00001d16 <__fp_szero>:
    1d16:	bb 27       	eor	r27, r27
    1d18:	66 27       	eor	r22, r22
    1d1a:	77 27       	eor	r23, r23
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	97 f9       	bld	r25, 7
    1d20:	08 95       	ret

00001d22 <__divmodhi4>:
    1d22:	97 fb       	bst	r25, 7
    1d24:	07 2e       	mov	r0, r23
    1d26:	16 f4       	brtc	.+4      	; 0x1d2c <__divmodhi4+0xa>
    1d28:	00 94       	com	r0
    1d2a:	06 d0       	rcall	.+12     	; 0x1d38 <__divmodhi4_neg1>
    1d2c:	77 fd       	sbrc	r23, 7
    1d2e:	08 d0       	rcall	.+16     	; 0x1d40 <__divmodhi4_neg2>
    1d30:	1a d0       	rcall	.+52     	; 0x1d66 <__udivmodhi4>
    1d32:	07 fc       	sbrc	r0, 7
    1d34:	05 d0       	rcall	.+10     	; 0x1d40 <__divmodhi4_neg2>
    1d36:	3e f4       	brtc	.+14     	; 0x1d46 <__divmodhi4_exit>

00001d38 <__divmodhi4_neg1>:
    1d38:	90 95       	com	r25
    1d3a:	81 95       	neg	r24
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	08 95       	ret

00001d40 <__divmodhi4_neg2>:
    1d40:	70 95       	com	r23
    1d42:	61 95       	neg	r22
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255

00001d46 <__divmodhi4_exit>:
    1d46:	08 95       	ret

00001d48 <__umulhisi3>:
    1d48:	a2 9f       	mul	r26, r18
    1d4a:	b0 01       	movw	r22, r0
    1d4c:	b3 9f       	mul	r27, r19
    1d4e:	c0 01       	movw	r24, r0
    1d50:	a3 9f       	mul	r26, r19
    1d52:	70 0d       	add	r23, r0
    1d54:	81 1d       	adc	r24, r1
    1d56:	11 24       	eor	r1, r1
    1d58:	91 1d       	adc	r25, r1
    1d5a:	b2 9f       	mul	r27, r18
    1d5c:	70 0d       	add	r23, r0
    1d5e:	81 1d       	adc	r24, r1
    1d60:	11 24       	eor	r1, r1
    1d62:	91 1d       	adc	r25, r1
    1d64:	08 95       	ret

00001d66 <__udivmodhi4>:
    1d66:	aa 1b       	sub	r26, r26
    1d68:	bb 1b       	sub	r27, r27
    1d6a:	51 e1       	ldi	r21, 0x11	; 17
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <__udivmodhi4_ep>

00001d6e <__udivmodhi4_loop>:
    1d6e:	aa 1f       	adc	r26, r26
    1d70:	bb 1f       	adc	r27, r27
    1d72:	a6 17       	cp	r26, r22
    1d74:	b7 07       	cpc	r27, r23
    1d76:	10 f0       	brcs	.+4      	; 0x1d7c <__udivmodhi4_ep>
    1d78:	a6 1b       	sub	r26, r22
    1d7a:	b7 0b       	sbc	r27, r23

00001d7c <__udivmodhi4_ep>:
    1d7c:	88 1f       	adc	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	5a 95       	dec	r21
    1d82:	a9 f7       	brne	.-22     	; 0x1d6e <__udivmodhi4_loop>
    1d84:	80 95       	com	r24
    1d86:	90 95       	com	r25
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	08 95       	ret

00001d8e <_exit>:
    1d8e:	f8 94       	cli

00001d90 <__stop_program>:
    1d90:	ff cf       	rjmp	.-2      	; 0x1d90 <__stop_program>
