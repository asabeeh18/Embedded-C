
Sort.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800200  00002c8e  00002d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800246  00800246  00002d68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000320  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c79  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ec  00000000  00000000  00005d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002257  00000000  00000000  0000621d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000898  00000000  00000000  00008474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ab  00000000  00000000  00008d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bca  00000000  00000000  000094b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  0000b081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c c3       	rjmp	.+1560   	; 0x61e <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e8       	ldi	r30, 0x8E	; 142
      fc:	fc e2       	ldi	r31, 0x2C	; 44
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 34       	cpi	r26, 0x46	; 70
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a6 e4       	ldi	r26, 0x46	; 70
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 3a       	cpi	r26, 0xAA	; 170
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 28 14 	call	0x2850	; 0x2850 <main>
     122:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 66 02 	sts	0x0266, r25
     30a:	80 93 65 02 	sts	0x0265, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 6a 02 	sts	0x026A, r21
     338:	40 93 69 02 	sts	0x0269, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 a9 02 	sts	0x02A9, r25
     374:	80 93 a8 02 	sts	0x02A8, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 6a 02 	sts	0x026A, r21
     3a0:	40 93 69 02 	sts	0x0269, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 9f 02 	sts	0x029F, r25
     3dc:	80 93 9e 02 	sts	0x029E, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 6a 02 	sts	0x026A, r21
     3fe:	40 93 69 02 	sts	0x0269, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 7b 02 	sts	0x027B, r25
     436:	80 93 7a 02 	sts	0x027A, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 a7 02 	sts	0x02A7, r25
     47c:	80 93 a6 02 	sts	0x02A6, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <lcd_port_config>:
     512:	87 b1       	in	r24, 0x07	; 7
     514:	87 6f       	ori	r24, 0xF7	; 247
     516:	87 b9       	out	0x07, r24	; 7
     518:	88 b1       	in	r24, 0x08	; 8
     51a:	80 78       	andi	r24, 0x80	; 128
     51c:	88 b9       	out	0x08, r24	; 8
     51e:	08 95       	ret

00000520 <color_sensor_pin_config>:
     520:	8a b1       	in	r24, 0x0a	; 10
     522:	8e 6f       	ori	r24, 0xFE	; 254
     524:	8a b9       	out	0x0a, r24	; 10
     526:	58 9a       	sbi	0x0b, 0	; 11
     528:	08 95       	ret

0000052a <adc_pin_config>:
     52a:	10 ba       	out	0x10, r1	; 16
     52c:	11 ba       	out	0x11, r1	; 17
     52e:	10 92 07 01 	sts	0x0107, r1
     532:	10 92 08 01 	sts	0x0108, r1
     536:	08 95       	ret

00000538 <servo1_pin_config>:
     538:	25 9a       	sbi	0x04, 5	; 4
     53a:	2d 9a       	sbi	0x05, 5	; 5
     53c:	08 95       	ret

0000053e <servo2_pin_config>:
     53e:	26 9a       	sbi	0x04, 6	; 4
     540:	2e 9a       	sbi	0x05, 6	; 5
     542:	08 95       	ret

00000544 <servo3_pin_config>:
     544:	27 9a       	sbi	0x04, 7	; 4
     546:	2f 9a       	sbi	0x05, 7	; 5
     548:	08 95       	ret

0000054a <timer1_init>:
     54a:	e1 e8       	ldi	r30, 0x81	; 129
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	10 82       	st	Z, r1
     550:	8c ef       	ldi	r24, 0xFC	; 252
     552:	80 93 85 00 	sts	0x0085, r24
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 84 00 	sts	0x0084, r24
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	90 93 89 00 	sts	0x0089, r25
     562:	8f ef       	ldi	r24, 0xFF	; 255
     564:	80 93 88 00 	sts	0x0088, r24
     568:	90 93 8b 00 	sts	0x008B, r25
     56c:	80 93 8a 00 	sts	0x008A, r24
     570:	90 93 8d 00 	sts	0x008D, r25
     574:	80 93 8c 00 	sts	0x008C, r24
     578:	90 93 87 00 	sts	0x0087, r25
     57c:	80 93 86 00 	sts	0x0086, r24
     580:	8b ea       	ldi	r24, 0xAB	; 171
     582:	80 93 80 00 	sts	0x0080, r24
     586:	10 92 82 00 	sts	0x0082, r1
     58a:	8c e0       	ldi	r24, 0x0C	; 12
     58c:	80 83       	st	Z, r24
     58e:	08 95       	ret

00000590 <port_init>:
     590:	c0 df       	rcall	.-128    	; 0x512 <lcd_port_config>
     592:	cb df       	rcall	.-106    	; 0x52a <adc_pin_config>
     594:	3b 9a       	sbi	0x07, 3	; 7
     596:	43 98       	cbi	0x08, 3	; 8
     598:	cf df       	rcall	.-98     	; 0x538 <servo1_pin_config>
     59a:	d1 df       	rcall	.-94     	; 0x53e <servo2_pin_config>
     59c:	d3 df       	rcall	.-90     	; 0x544 <servo3_pin_config>
     59e:	c0 cf       	rjmp	.-128    	; 0x520 <color_sensor_pin_config>
     5a0:	08 95       	ret

000005a2 <buzzer_on>:
     5a2:	86 b1       	in	r24, 0x06	; 6
     5a4:	88 60       	ori	r24, 0x08	; 8
     5a6:	88 b9       	out	0x08, r24	; 8
     5a8:	08 95       	ret

000005aa <buzzer_off>:
     5aa:	86 b1       	in	r24, 0x06	; 6
     5ac:	87 7f       	andi	r24, 0xF7	; 247
     5ae:	88 b9       	out	0x08, r24	; 8
     5b0:	08 95       	ret

000005b2 <ADC_Conversion>:
     5b2:	88 30       	cpi	r24, 0x08	; 8
     5b4:	18 f0       	brcs	.+6      	; 0x5bc <ADC_Conversion+0xa>
     5b6:	98 e0       	ldi	r25, 0x08	; 8
     5b8:	90 93 7b 00 	sts	0x007B, r25
     5bc:	87 70       	andi	r24, 0x07	; 7
     5be:	80 62       	ori	r24, 0x20	; 32
     5c0:	80 93 7c 00 	sts	0x007C, r24
     5c4:	ea e7       	ldi	r30, 0x7A	; 122
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	80 64       	ori	r24, 0x40	; 64
     5cc:	80 83       	st	Z, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	84 ff       	sbrs	r24, 4
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <ADC_Conversion+0x1c>
     5d4:	80 91 79 00 	lds	r24, 0x0079
     5d8:	ea e7       	ldi	r30, 0x7A	; 122
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	90 81       	ld	r25, Z
     5de:	90 61       	ori	r25, 0x10	; 16
     5e0:	90 83       	st	Z, r25
     5e2:	10 92 7b 00 	sts	0x007B, r1
     5e6:	08 95       	ret

000005e8 <print_sensor>:
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	c8 2f       	mov	r28, r24
     5ee:	d6 2f       	mov	r29, r22
     5f0:	84 2f       	mov	r24, r20
     5f2:	df df       	rcall	.-66     	; 0x5b2 <ADC_Conversion>
     5f4:	80 93 73 02 	sts	0x0273, r24
     5f8:	48 2f       	mov	r20, r24
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	23 e0       	ldi	r18, 0x03	; 3
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	6d 2f       	mov	r22, r29
     602:	8c 2f       	mov	r24, r28
     604:	5d de       	rcall	.-838    	; 0x2c0 <lcd_print>
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <color_sensor_pin_interrupt_init>:
     60c:	f8 94       	cli
     60e:	e9 e6       	ldi	r30, 0x69	; 105
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	82 60       	ori	r24, 0x02	; 2
     616:	80 83       	st	Z, r24
     618:	e8 9a       	sbi	0x1d, 0	; 29
     61a:	78 94       	sei
     61c:	08 95       	ret

0000061e <__vector_1>:
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	80 91 51 02 	lds	r24, 0x0251
     634:	90 91 52 02 	lds	r25, 0x0252
     638:	a0 91 53 02 	lds	r26, 0x0253
     63c:	b0 91 54 02 	lds	r27, 0x0254
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	a1 1d       	adc	r26, r1
     644:	b1 1d       	adc	r27, r1
     646:	80 93 51 02 	sts	0x0251, r24
     64a:	90 93 52 02 	sts	0x0252, r25
     64e:	a0 93 53 02 	sts	0x0253, r26
     652:	b0 93 54 02 	sts	0x0254, r27
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	0f 90       	pop	r0
     660:	0f be       	out	0x3f, r0	; 63
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	18 95       	reti

00000668 <adc_init>:
     668:	ea e7       	ldi	r30, 0x7A	; 122
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	10 82       	st	Z, r1
     66e:	10 92 7b 00 	sts	0x007B, r1
     672:	80 e2       	ldi	r24, 0x20	; 32
     674:	80 93 7c 00 	sts	0x007C, r24
     678:	80 e8       	ldi	r24, 0x80	; 128
     67a:	80 bf       	out	0x30, r24	; 48
     67c:	86 e8       	ldi	r24, 0x86	; 134
     67e:	80 83       	st	Z, r24
     680:	08 95       	ret

00000682 <init_devices>:
     682:	f8 94       	cli
     684:	85 df       	rcall	.-246    	; 0x590 <port_init>
     686:	c2 df       	rcall	.-124    	; 0x60c <color_sensor_pin_interrupt_init>
     688:	ef df       	rcall	.-34     	; 0x668 <adc_init>
     68a:	29 df       	rcall	.-430    	; 0x4de <motion_pin_config>
     68c:	0d df       	rcall	.-486    	; 0x4a8 <timer5_init>
     68e:	5d df       	rcall	.-326    	; 0x54a <timer1_init>
     690:	78 94       	sei
     692:	08 95       	ret

00000694 <servo_1>:
     694:	10 92 89 00 	sts	0x0089, r1
     698:	68 2f       	mov	r22, r24
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__floatunsisf>
     6a4:	2b e7       	ldi	r18, 0x7B	; 123
     6a6:	34 e1       	ldi	r19, 0x14	; 20
     6a8:	4e ee       	ldi	r20, 0xEE	; 238
     6aa:	5f e3       	ldi	r21, 0x3F	; 63
     6ac:	0e 94 ed 14 	call	0x29da	; 0x29da <__divsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4c e0       	ldi	r20, 0x0C	; 12
     6b6:	52 e4       	ldi	r21, 0x42	; 66
     6b8:	0e 94 89 14 	call	0x2912	; 0x2912 <__addsf3>
     6bc:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__fixunssfsi>
     6c0:	60 93 88 00 	sts	0x0088, r22
     6c4:	08 95       	ret

000006c6 <filter_red>:
     6c6:	5e 98       	cbi	0x0b, 6	; 11
     6c8:	5f 98       	cbi	0x0b, 7	; 11
     6ca:	08 95       	ret

000006cc <filter_green>:
     6cc:	5e 9a       	sbi	0x0b, 6	; 11
     6ce:	5f 9a       	sbi	0x0b, 7	; 11
     6d0:	08 95       	ret

000006d2 <filter_blue>:
     6d2:	5e 98       	cbi	0x0b, 6	; 11
     6d4:	5f 9a       	sbi	0x0b, 7	; 11
     6d6:	08 95       	ret

000006d8 <color_sensor_scaling>:
     6d8:	5c 9a       	sbi	0x0b, 4	; 11
     6da:	5d 9a       	sbi	0x0b, 5	; 11
     6dc:	08 95       	ret

000006de <red_read>:
     6de:	f3 df       	rcall	.-26     	; 0x6c6 <filter_red>
     6e0:	10 92 51 02 	sts	0x0251, r1
     6e4:	10 92 52 02 	sts	0x0252, r1
     6e8:	10 92 53 02 	sts	0x0253, r1
     6ec:	10 92 54 02 	sts	0x0254, r1
     6f0:	2f ef       	ldi	r18, 0xFF	; 255
     6f2:	8f e7       	ldi	r24, 0x7F	; 127
     6f4:	94 e0       	ldi	r25, 0x04	; 4
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	90 40       	sbci	r25, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <red_read+0x18>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <red_read+0x22>
     700:	00 00       	nop
     702:	80 91 51 02 	lds	r24, 0x0251
     706:	90 91 52 02 	lds	r25, 0x0252
     70a:	a0 91 53 02 	lds	r26, 0x0253
     70e:	b0 91 54 02 	lds	r27, 0x0254
     712:	80 93 6f 02 	sts	0x026F, r24
     716:	90 93 70 02 	sts	0x0270, r25
     71a:	a0 93 71 02 	sts	0x0271, r26
     71e:	b0 93 72 02 	sts	0x0272, r27
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	9c e2       	ldi	r25, 0x2C	; 44
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	80 40       	sbci	r24, 0x00	; 0
     72c:	90 40       	sbci	r25, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <red_read+0x4a>
     730:	00 c0       	rjmp	.+0      	; 0x732 <red_read+0x54>
     732:	00 00       	nop
     734:	08 95       	ret

00000736 <green_read>:
     736:	ca df       	rcall	.-108    	; 0x6cc <filter_green>
     738:	10 92 51 02 	sts	0x0251, r1
     73c:	10 92 52 02 	sts	0x0252, r1
     740:	10 92 53 02 	sts	0x0253, r1
     744:	10 92 54 02 	sts	0x0254, r1
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	8f e7       	ldi	r24, 0x7F	; 127
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <green_read+0x18>
     756:	00 c0       	rjmp	.+0      	; 0x758 <green_read+0x22>
     758:	00 00       	nop
     75a:	80 91 51 02 	lds	r24, 0x0251
     75e:	90 91 52 02 	lds	r25, 0x0252
     762:	a0 91 53 02 	lds	r26, 0x0253
     766:	b0 91 54 02 	lds	r27, 0x0254
     76a:	80 93 6b 02 	sts	0x026B, r24
     76e:	90 93 6c 02 	sts	0x026C, r25
     772:	a0 93 6d 02 	sts	0x026D, r26
     776:	b0 93 6e 02 	sts	0x026E, r27
     77a:	08 95       	ret

0000077c <blue_read>:
     77c:	aa df       	rcall	.-172    	; 0x6d2 <filter_blue>
     77e:	10 92 51 02 	sts	0x0251, r1
     782:	10 92 52 02 	sts	0x0252, r1
     786:	10 92 53 02 	sts	0x0253, r1
     78a:	10 92 54 02 	sts	0x0254, r1
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	8f e7       	ldi	r24, 0x7F	; 127
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	21 50       	subi	r18, 0x01	; 1
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <blue_read+0x18>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <blue_read+0x22>
     79e:	00 00       	nop
     7a0:	80 91 51 02 	lds	r24, 0x0251
     7a4:	90 91 52 02 	lds	r25, 0x0252
     7a8:	a0 91 53 02 	lds	r26, 0x0253
     7ac:	b0 91 54 02 	lds	r27, 0x0254
     7b0:	80 93 5f 02 	sts	0x025F, r24
     7b4:	90 93 60 02 	sts	0x0260, r25
     7b8:	a0 93 61 02 	sts	0x0261, r26
     7bc:	b0 93 62 02 	sts	0x0262, r27
     7c0:	08 95       	ret

000007c2 <set_color>:
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	f6 de       	rcall	.-532    	; 0x5b2 <ADC_Conversion>
     7c6:	80 93 48 02 	sts	0x0248, r24
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	f2 de       	rcall	.-540    	; 0x5b2 <ADC_Conversion>
     7ce:	80 93 47 02 	sts	0x0247, r24
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	ee de       	rcall	.-548    	; 0x5b2 <ADC_Conversion>
     7d6:	80 93 46 02 	sts	0x0246, r24
     7da:	08 95       	ret

000007dc <show_color>:
     7dc:	43 e0       	ldi	r20, 0x03	; 3
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	02 df       	rcall	.-508    	; 0x5e8 <print_sensor>
     7e4:	42 e0       	ldi	r20, 0x02	; 2
     7e6:	65 e0       	ldi	r22, 0x05	; 5
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	fe de       	rcall	.-516    	; 0x5e8 <print_sensor>
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	69 e0       	ldi	r22, 0x09	; 9
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	fa ce       	rjmp	.-524    	; 0x5e8 <print_sensor>
     7f4:	08 95       	ret

000007f6 <fixLeft>:
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	08 e2       	ldi	r16, 0x28	; 40
     806:	11 e0       	ldi	r17, 0x01	; 1
     808:	0f 2e       	mov	r0, r31
     80a:	f8 ec       	ldi	r31, 0xC8	; 200
     80c:	ff 2e       	mov	r15, r31
     80e:	f0 2d       	mov	r31, r0
     810:	ca e2       	ldi	r28, 0x2A	; 42
     812:	d1 e0       	ldi	r29, 0x01	; 1
     814:	0f 2e       	mov	r0, r31
     816:	f0 ef       	ldi	r31, 0xF0	; 240
     818:	ef 2e       	mov	r14, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	0f 2e       	mov	r0, r31
     81e:	fc ed       	ldi	r31, 0xDC	; 220
     820:	df 2e       	mov	r13, r31
     822:	f0 2d       	mov	r31, r0
     824:	73 de       	rcall	.-794    	; 0x50c <forward>
     826:	f8 01       	movw	r30, r16
     828:	f0 82       	st	Z, r15
     82a:	e8 82       	st	Y, r14
     82c:	d7 df       	rcall	.-82     	; 0x7dc <show_color>
     82e:	c9 df       	rcall	.-110    	; 0x7c2 <set_color>
     830:	d5 df       	rcall	.-86     	; 0x7dc <show_color>
     832:	80 91 47 02 	lds	r24, 0x0247
     836:	89 32       	cpi	r24, 0x29	; 41
     838:	c8 f0       	brcs	.+50     	; 0x86c <fixLeft+0x76>
     83a:	b3 de       	rcall	.-666    	; 0x5a2 <buzzer_on>
     83c:	67 de       	rcall	.-818    	; 0x50c <forward>
     83e:	f8 01       	movw	r30, r16
     840:	d0 82       	st	Z, r13
     842:	f8 82       	st	Y, r15
     844:	fc ec       	ldi	r31, 0xCC	; 204
     846:	2c ec       	ldi	r18, 0xCC	; 204
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	f1 50       	subi	r31, 0x01	; 1
     84c:	20 40       	sbci	r18, 0x00	; 0
     84e:	80 40       	sbci	r24, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <fixLeft+0x54>
     852:	00 c0       	rjmp	.+0      	; 0x854 <fixLeft+0x5e>
     854:	80 91 47 02 	lds	r24, 0x0247
     858:	89 32       	cpi	r24, 0x29	; 41
     85a:	40 f0       	brcs	.+16     	; 0x86c <fixLeft+0x76>
     85c:	80 91 48 02 	lds	r24, 0x0248
     860:	88 32       	cpi	r24, 0x28	; 40
     862:	00 f3       	brcs	.-64     	; 0x824 <fixLeft+0x2e>
     864:	80 91 46 02 	lds	r24, 0x0246
     868:	88 32       	cpi	r24, 0x28	; 40
     86a:	e0 f2       	brcs	.-72     	; 0x824 <fixLeft+0x2e>
     86c:	9e de       	rcall	.-708    	; 0x5aa <buzzer_off>
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	08 95       	ret

0000087e <fixRight>:
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	08 e2       	ldi	r16, 0x28	; 40
     88e:	11 e0       	ldi	r17, 0x01	; 1
     890:	0f 2e       	mov	r0, r31
     892:	f0 ef       	ldi	r31, 0xF0	; 240
     894:	ef 2e       	mov	r14, r31
     896:	f0 2d       	mov	r31, r0
     898:	ca e2       	ldi	r28, 0x2A	; 42
     89a:	d1 e0       	ldi	r29, 0x01	; 1
     89c:	0f 2e       	mov	r0, r31
     89e:	f8 ec       	ldi	r31, 0xC8	; 200
     8a0:	ff 2e       	mov	r15, r31
     8a2:	f0 2d       	mov	r31, r0
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fc ed       	ldi	r31, 0xDC	; 220
     8a8:	df 2e       	mov	r13, r31
     8aa:	f0 2d       	mov	r31, r0
     8ac:	2f de       	rcall	.-930    	; 0x50c <forward>
     8ae:	f8 01       	movw	r30, r16
     8b0:	e0 82       	st	Z, r14
     8b2:	f8 82       	st	Y, r15
     8b4:	93 df       	rcall	.-218    	; 0x7dc <show_color>
     8b6:	85 df       	rcall	.-246    	; 0x7c2 <set_color>
     8b8:	91 df       	rcall	.-222    	; 0x7dc <show_color>
     8ba:	80 91 47 02 	lds	r24, 0x0247
     8be:	89 32       	cpi	r24, 0x29	; 41
     8c0:	c8 f0       	brcs	.+50     	; 0x8f4 <fixRight+0x76>
     8c2:	6f de       	rcall	.-802    	; 0x5a2 <buzzer_on>
     8c4:	23 de       	rcall	.-954    	; 0x50c <forward>
     8c6:	f8 01       	movw	r30, r16
     8c8:	f0 82       	st	Z, r15
     8ca:	d8 82       	st	Y, r13
     8cc:	fc ec       	ldi	r31, 0xCC	; 204
     8ce:	2c ec       	ldi	r18, 0xCC	; 204
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	f1 50       	subi	r31, 0x01	; 1
     8d4:	20 40       	sbci	r18, 0x00	; 0
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <fixRight+0x54>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <fixRight+0x5e>
     8dc:	80 91 47 02 	lds	r24, 0x0247
     8e0:	89 32       	cpi	r24, 0x29	; 41
     8e2:	40 f0       	brcs	.+16     	; 0x8f4 <fixRight+0x76>
     8e4:	80 91 48 02 	lds	r24, 0x0248
     8e8:	88 32       	cpi	r24, 0x28	; 40
     8ea:	00 f3       	brcs	.-64     	; 0x8ac <fixRight+0x2e>
     8ec:	80 91 46 02 	lds	r24, 0x0246
     8f0:	88 32       	cpi	r24, 0x28	; 40
     8f2:	e0 f2       	brcs	.-72     	; 0x8ac <fixRight+0x2e>
     8f4:	5a de       	rcall	.-844    	; 0x5aa <buzzer_off>
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	08 95       	ret

00000906 <fixPath>:
     906:	5d df       	rcall	.-326    	; 0x7c2 <set_color>
     908:	80 91 48 02 	lds	r24, 0x0248
     90c:	89 32       	cpi	r24, 0x29	; 41
     90e:	40 f0       	brcs	.+16     	; 0x920 <fixPath+0x1a>
     910:	72 df       	rcall	.-284    	; 0x7f6 <fixLeft>
     912:	57 df       	rcall	.-338    	; 0x7c2 <set_color>
     914:	63 df       	rcall	.-314    	; 0x7dc <show_color>
     916:	80 91 48 02 	lds	r24, 0x0248
     91a:	89 32       	cpi	r24, 0x29	; 41
     91c:	c8 f7       	brcc	.-14     	; 0x910 <fixPath+0xa>
     91e:	08 95       	ret
     920:	90 91 46 02 	lds	r25, 0x0246
     924:	99 32       	cpi	r25, 0x29	; 41
     926:	40 f0       	brcs	.+16     	; 0x938 <fixPath+0x32>
     928:	aa df       	rcall	.-172    	; 0x87e <fixRight>
     92a:	4b df       	rcall	.-362    	; 0x7c2 <set_color>
     92c:	57 df       	rcall	.-338    	; 0x7dc <show_color>
     92e:	80 91 46 02 	lds	r24, 0x0246
     932:	89 32       	cpi	r24, 0x29	; 41
     934:	c8 f7       	brcc	.-14     	; 0x928 <fixPath+0x22>
     936:	08 95       	ret
     938:	88 32       	cpi	r24, 0x28	; 40
     93a:	60 f4       	brcc	.+24     	; 0x954 <fixPath+0x4e>
     93c:	98 32       	cpi	r25, 0x28	; 40
     93e:	50 f4       	brcc	.+20     	; 0x954 <fixPath+0x4e>
     940:	e5 dd       	rcall	.-1078   	; 0x50c <forward>
     942:	2c ec       	ldi	r18, 0xCC	; 204
     944:	8c ec       	ldi	r24, 0xCC	; 204
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <fixPath+0x42>
     950:	00 c0       	rjmp	.+0      	; 0x952 <fixPath+0x4c>
     952:	d9 cf       	rjmp	.-78     	; 0x906 <fixPath>
     954:	08 95       	ret

00000956 <goForward>:
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	30 df       	rcall	.-416    	; 0x7c2 <set_color>
     962:	08 e2       	ldi	r16, 0x28	; 40
     964:	11 e0       	ldi	r17, 0x01	; 1
     966:	0f 2e       	mov	r0, r31
     968:	fa ef       	ldi	r31, 0xFA	; 250
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0
     96e:	ca e2       	ldi	r28, 0x2A	; 42
     970:	d1 e0       	ldi	r29, 0x01	; 1
     972:	12 c0       	rjmp	.+36     	; 0x998 <goForward+0x42>
     974:	26 df       	rcall	.-436    	; 0x7c2 <set_color>
     976:	32 df       	rcall	.-412    	; 0x7dc <show_color>
     978:	c9 dd       	rcall	.-1134   	; 0x50c <forward>
     97a:	f8 01       	movw	r30, r16
     97c:	f0 82       	st	Z, r15
     97e:	f8 82       	st	Y, r15
     980:	80 91 47 02 	lds	r24, 0x0247
     984:	89 32       	cpi	r24, 0x29	; 41
     986:	40 f0       	brcs	.+16     	; 0x998 <goForward+0x42>
     988:	80 91 48 02 	lds	r24, 0x0248
     98c:	89 32       	cpi	r24, 0x29	; 41
     98e:	90 f4       	brcc	.+36     	; 0x9b4 <goForward+0x5e>
     990:	80 91 46 02 	lds	r24, 0x0246
     994:	89 32       	cpi	r24, 0x29	; 41
     996:	70 f4       	brcc	.+28     	; 0x9b4 <goForward+0x5e>
     998:	80 91 47 02 	lds	r24, 0x0247
     99c:	89 32       	cpi	r24, 0x29	; 41
     99e:	40 f0       	brcs	.+16     	; 0x9b0 <goForward+0x5a>
     9a0:	80 91 46 02 	lds	r24, 0x0246
     9a4:	88 32       	cpi	r24, 0x28	; 40
     9a6:	20 f4       	brcc	.+8      	; 0x9b0 <goForward+0x5a>
     9a8:	80 91 48 02 	lds	r24, 0x0248
     9ac:	88 32       	cpi	r24, 0x28	; 40
     9ae:	10 f3       	brcs	.-60     	; 0x974 <goForward+0x1e>
     9b0:	aa df       	rcall	.-172    	; 0x906 <fixPath>
     9b2:	d1 df       	rcall	.-94     	; 0x956 <goForward>
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	08 95       	ret

000009c0 <lcd>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	f4 db       	rcall	.-2072   	; 0x1b2 <lcd_wr_command>
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	5d dc       	rcall	.-1862   	; 0x28a <lcd_cursor>
     9d0:	ce 01       	movw	r24, r28
     9d2:	4d dc       	rcall	.-1894   	; 0x26e <lcd_string>
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <calcThresh>:
     9da:	8f 92       	push	r8
     9dc:	9f 92       	push	r9
     9de:	af 92       	push	r10
     9e0:	bf 92       	push	r11
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	28 97       	sbiw	r28, 0x08	; 8
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	dc df       	rcall	.-72     	; 0x9c0 <lcd>
     a08:	6a de       	rcall	.-812    	; 0x6de <red_read>
     a0a:	b8 de       	rcall	.-656    	; 0x77c <blue_read>
     a0c:	94 de       	rcall	.-728    	; 0x736 <green_read>
     a0e:	1a 82       	std	Y+2, r1	; 0x02
     a10:	19 82       	std	Y+1, r1	; 0x01
     a12:	1c 82       	std	Y+4, r1	; 0x04
     a14:	1b 82       	std	Y+3, r1	; 0x03
     a16:	1e 82       	std	Y+6, r1	; 0x06
     a18:	1d 82       	std	Y+5, r1	; 0x05
     a1a:	a0 e0       	ldi	r26, 0x00	; 0
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	00 e0       	ldi	r16, 0x00	; 0
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	e0 e0       	ldi	r30, 0x00	; 0
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	24 e0       	ldi	r18, 0x04	; 4
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	c0 90 6f 02 	lds	r12, 0x026F
     a32:	d0 90 70 02 	lds	r13, 0x0270
     a36:	e0 90 71 02 	lds	r14, 0x0271
     a3a:	f0 90 72 02 	lds	r15, 0x0272
     a3e:	40 91 6b 02 	lds	r20, 0x026B
     a42:	50 91 6c 02 	lds	r21, 0x026C
     a46:	60 91 6d 02 	lds	r22, 0x026D
     a4a:	70 91 6e 02 	lds	r23, 0x026E
     a4e:	4c 15       	cp	r20, r12
     a50:	5d 05       	cpc	r21, r13
     a52:	6e 05       	cpc	r22, r14
     a54:	7f 05       	cpc	r23, r15
     a56:	08 f0       	brcs	.+2      	; 0xa5a <calcThresh+0x80>
     a58:	53 c0       	rjmp	.+166    	; 0xb00 <calcThresh+0x126>
     a5a:	c0 90 6f 02 	lds	r12, 0x026F
     a5e:	d0 90 70 02 	lds	r13, 0x0270
     a62:	e0 90 71 02 	lds	r14, 0x0271
     a66:	f0 90 72 02 	lds	r15, 0x0272
     a6a:	40 91 5f 02 	lds	r20, 0x025F
     a6e:	50 91 60 02 	lds	r21, 0x0260
     a72:	60 91 61 02 	lds	r22, 0x0261
     a76:	70 91 62 02 	lds	r23, 0x0262
     a7a:	4c 15       	cp	r20, r12
     a7c:	5d 05       	cpc	r21, r13
     a7e:	6e 05       	cpc	r22, r14
     a80:	7f 05       	cpc	r23, r15
     a82:	f0 f5       	brcc	.+124    	; 0xb00 <calcThresh+0x126>
     a84:	40 91 6f 02 	lds	r20, 0x026F
     a88:	50 91 70 02 	lds	r21, 0x0270
     a8c:	60 91 71 02 	lds	r22, 0x0271
     a90:	70 91 72 02 	lds	r23, 0x0272
     a94:	6d 01       	movw	r12, r26
     a96:	ee 24       	eor	r14, r14
     a98:	d7 fc       	sbrc	r13, 7
     a9a:	e0 94       	com	r14
     a9c:	fe 2c       	mov	r15, r14
     a9e:	4c 15       	cp	r20, r12
     aa0:	5d 05       	cpc	r21, r13
     aa2:	6e 05       	cpc	r22, r14
     aa4:	7f 05       	cpc	r23, r15
     aa6:	e8 f4       	brcc	.+58     	; 0xae2 <calcThresh+0x108>
     aa8:	40 91 6f 02 	lds	r20, 0x026F
     aac:	50 91 70 02 	lds	r21, 0x0270
     ab0:	60 91 71 02 	lds	r22, 0x0271
     ab4:	70 91 72 02 	lds	r23, 0x0272
     ab8:	6c 01       	movw	r12, r24
     aba:	ee 24       	eor	r14, r14
     abc:	d7 fc       	sbrc	r13, 7
     abe:	e0 94       	com	r14
     ac0:	fe 2c       	mov	r15, r14
     ac2:	c4 16       	cp	r12, r20
     ac4:	d5 06       	cpc	r13, r21
     ac6:	e6 06       	cpc	r14, r22
     ac8:	f7 06       	cpc	r15, r23
     aca:	08 f0       	brcs	.+2      	; 0xace <calcThresh+0xf4>
     acc:	c2 c0       	rjmp	.+388    	; 0xc52 <calcThresh+0x278>
     ace:	40 91 6f 02 	lds	r20, 0x026F
     ad2:	50 91 70 02 	lds	r21, 0x0270
     ad6:	60 91 71 02 	lds	r22, 0x0271
     ada:	70 91 72 02 	lds	r23, 0x0272
     ade:	7a 01       	movw	r14, r20
     ae0:	bd c0       	rjmp	.+378    	; 0xc5c <calcThresh+0x282>
     ae2:	a8 17       	cp	r26, r24
     ae4:	b9 07       	cpc	r27, r25
     ae6:	0c f4       	brge	.+2      	; 0xaea <calcThresh+0x110>
     ae8:	dc 01       	movw	r26, r24
     aea:	80 90 6f 02 	lds	r8, 0x026F
     aee:	90 90 70 02 	lds	r9, 0x0270
     af2:	a0 90 71 02 	lds	r10, 0x0271
     af6:	b0 90 72 02 	lds	r11, 0x0272
     afa:	7d 01       	movw	r14, r26
     afc:	d4 01       	movw	r26, r8
     afe:	ae c0       	rjmp	.+348    	; 0xc5c <calcThresh+0x282>
     b00:	c0 90 5f 02 	lds	r12, 0x025F
     b04:	d0 90 60 02 	lds	r13, 0x0260
     b08:	e0 90 61 02 	lds	r14, 0x0261
     b0c:	f0 90 62 02 	lds	r15, 0x0262
     b10:	40 91 6b 02 	lds	r20, 0x026B
     b14:	50 91 6c 02 	lds	r21, 0x026C
     b18:	60 91 6d 02 	lds	r22, 0x026D
     b1c:	70 91 6e 02 	lds	r23, 0x026E
     b20:	4c 15       	cp	r20, r12
     b22:	5d 05       	cpc	r21, r13
     b24:	6e 05       	cpc	r22, r14
     b26:	7f 05       	cpc	r23, r15
     b28:	08 f0       	brcs	.+2      	; 0xb2c <calcThresh+0x152>
     b2a:	55 c0       	rjmp	.+170    	; 0xbd6 <calcThresh+0x1fc>
     b2c:	c0 90 6f 02 	lds	r12, 0x026F
     b30:	d0 90 70 02 	lds	r13, 0x0270
     b34:	e0 90 71 02 	lds	r14, 0x0271
     b38:	f0 90 72 02 	lds	r15, 0x0272
     b3c:	40 91 5f 02 	lds	r20, 0x025F
     b40:	50 91 60 02 	lds	r21, 0x0260
     b44:	60 91 61 02 	lds	r22, 0x0261
     b48:	70 91 62 02 	lds	r23, 0x0262
     b4c:	c4 16       	cp	r12, r20
     b4e:	d5 06       	cpc	r13, r21
     b50:	e6 06       	cpc	r14, r22
     b52:	f7 06       	cpc	r15, r23
     b54:	08 f0       	brcs	.+2      	; 0xb58 <calcThresh+0x17e>
     b56:	3f c0       	rjmp	.+126    	; 0xbd6 <calcThresh+0x1fc>
     b58:	40 91 5f 02 	lds	r20, 0x025F
     b5c:	50 91 60 02 	lds	r21, 0x0260
     b60:	60 91 61 02 	lds	r22, 0x0261
     b64:	70 91 62 02 	lds	r23, 0x0262
     b68:	68 01       	movw	r12, r16
     b6a:	ee 24       	eor	r14, r14
     b6c:	d7 fc       	sbrc	r13, 7
     b6e:	e0 94       	com	r14
     b70:	fe 2c       	mov	r15, r14
     b72:	4c 15       	cp	r20, r12
     b74:	5d 05       	cpc	r21, r13
     b76:	6e 05       	cpc	r22, r14
     b78:	7f 05       	cpc	r23, r15
     b7a:	e8 f4       	brcc	.+58     	; 0xbb6 <calcThresh+0x1dc>
     b7c:	40 91 5f 02 	lds	r20, 0x025F
     b80:	50 91 60 02 	lds	r21, 0x0260
     b84:	60 91 61 02 	lds	r22, 0x0261
     b88:	70 91 62 02 	lds	r23, 0x0262
     b8c:	6c 01       	movw	r12, r24
     b8e:	ee 24       	eor	r14, r14
     b90:	d7 fc       	sbrc	r13, 7
     b92:	e0 94       	com	r14
     b94:	fe 2c       	mov	r15, r14
     b96:	c4 16       	cp	r12, r20
     b98:	d5 06       	cpc	r13, r21
     b9a:	e6 06       	cpc	r14, r22
     b9c:	f7 06       	cpc	r15, r23
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <calcThresh+0x1c8>
     ba0:	5a c0       	rjmp	.+180    	; 0xc56 <calcThresh+0x27c>
     ba2:	40 91 5f 02 	lds	r20, 0x025F
     ba6:	50 91 60 02 	lds	r21, 0x0260
     baa:	60 91 61 02 	lds	r22, 0x0261
     bae:	70 91 62 02 	lds	r23, 0x0262
     bb2:	7a 01       	movw	r14, r20
     bb4:	53 c0       	rjmp	.+166    	; 0xc5c <calcThresh+0x282>
     bb6:	a8 01       	movw	r20, r16
     bb8:	08 17       	cp	r16, r24
     bba:	19 07       	cpc	r17, r25
     bbc:	0c f4       	brge	.+2      	; 0xbc0 <calcThresh+0x1e6>
     bbe:	ac 01       	movw	r20, r24
     bc0:	c0 90 5f 02 	lds	r12, 0x025F
     bc4:	d0 90 60 02 	lds	r13, 0x0260
     bc8:	e0 90 61 02 	lds	r14, 0x0261
     bcc:	f0 90 62 02 	lds	r15, 0x0262
     bd0:	86 01       	movw	r16, r12
     bd2:	7a 01       	movw	r14, r20
     bd4:	43 c0       	rjmp	.+134    	; 0xc5c <calcThresh+0x282>
     bd6:	40 91 6b 02 	lds	r20, 0x026B
     bda:	50 91 6c 02 	lds	r21, 0x026C
     bde:	60 91 6d 02 	lds	r22, 0x026D
     be2:	70 91 6e 02 	lds	r23, 0x026E
     be6:	6f 01       	movw	r12, r30
     be8:	ee 24       	eor	r14, r14
     bea:	d7 fc       	sbrc	r13, 7
     bec:	e0 94       	com	r14
     bee:	fe 2c       	mov	r15, r14
     bf0:	4c 15       	cp	r20, r12
     bf2:	5d 05       	cpc	r21, r13
     bf4:	6e 05       	cpc	r22, r14
     bf6:	7f 05       	cpc	r23, r15
     bf8:	e0 f4       	brcc	.+56     	; 0xc32 <calcThresh+0x258>
     bfa:	40 91 6b 02 	lds	r20, 0x026B
     bfe:	50 91 6c 02 	lds	r21, 0x026C
     c02:	60 91 6d 02 	lds	r22, 0x026D
     c06:	70 91 6e 02 	lds	r23, 0x026E
     c0a:	6c 01       	movw	r12, r24
     c0c:	ee 24       	eor	r14, r14
     c0e:	d7 fc       	sbrc	r13, 7
     c10:	e0 94       	com	r14
     c12:	fe 2c       	mov	r15, r14
     c14:	c4 16       	cp	r12, r20
     c16:	d5 06       	cpc	r13, r21
     c18:	e6 06       	cpc	r14, r22
     c1a:	f7 06       	cpc	r15, r23
     c1c:	f0 f4       	brcc	.+60     	; 0xc5a <calcThresh+0x280>
     c1e:	40 91 6b 02 	lds	r20, 0x026B
     c22:	50 91 6c 02 	lds	r21, 0x026C
     c26:	60 91 6d 02 	lds	r22, 0x026D
     c2a:	70 91 6e 02 	lds	r23, 0x026E
     c2e:	7a 01       	movw	r14, r20
     c30:	15 c0       	rjmp	.+42     	; 0xc5c <calcThresh+0x282>
     c32:	af 01       	movw	r20, r30
     c34:	e8 17       	cp	r30, r24
     c36:	f9 07       	cpc	r31, r25
     c38:	0c f4       	brge	.+2      	; 0xc3c <calcThresh+0x262>
     c3a:	ac 01       	movw	r20, r24
     c3c:	c0 90 6b 02 	lds	r12, 0x026B
     c40:	d0 90 6c 02 	lds	r13, 0x026C
     c44:	e0 90 6d 02 	lds	r14, 0x026D
     c48:	f0 90 6e 02 	lds	r15, 0x026E
     c4c:	f6 01       	movw	r30, r12
     c4e:	7a 01       	movw	r14, r20
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <calcThresh+0x282>
     c52:	7c 01       	movw	r14, r24
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <calcThresh+0x282>
     c56:	7c 01       	movw	r14, r24
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <calcThresh+0x282>
     c5a:	7c 01       	movw	r14, r24
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	31 09       	sbc	r19, r1
     c60:	21 15       	cp	r18, r1
     c62:	31 05       	cpc	r19, r1
     c64:	11 f0       	breq	.+4      	; 0xc6a <calcThresh+0x290>
     c66:	c7 01       	movw	r24, r14
     c68:	e2 ce       	rjmp	.-572    	; 0xa2e <calcThresh+0x54>
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0d db       	rcall	.-2534   	; 0x28a <lcd_cursor>
     c70:	8f e0       	ldi	r24, 0x0F	; 15
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	fc da       	rcall	.-2568   	; 0x26e <lcd_string>
     c76:	28 ec       	ldi	r18, 0xC8	; 200
     c78:	e2 0e       	add	r14, r18
     c7a:	f1 1c       	adc	r15, r1
     c7c:	25 e0       	ldi	r18, 0x05	; 5
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	a7 01       	movw	r20, r14
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	1c db       	rcall	.-2504   	; 0x2c0 <lcd_print>
     c88:	3f ef       	ldi	r19, 0xFF	; 255
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	96 e7       	ldi	r25, 0x76	; 118
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	31 50       	subi	r19, 0x01	; 1
     c92:	80 40       	sbci	r24, 0x00	; 0
     c94:	90 40       	sbci	r25, 0x00	; 0
     c96:	20 40       	sbci	r18, 0x00	; 0
     c98:	d9 f7       	brne	.-10     	; 0xc90 <calcThresh+0x2b6>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <calcThresh+0x2c2>
     c9c:	00 00       	nop
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	88 da       	rcall	.-2800   	; 0x1b2 <lcd_wr_command>
     ca2:	c7 01       	movw	r24, r14
     ca4:	8d de       	rcall	.-742    	; 0x9c0 <lcd>
     ca6:	c7 01       	movw	r24, r14
     ca8:	28 96       	adiw	r28, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	08 95       	ret

00000cce <front>:
     cce:	43 de       	rcall	.-890    	; 0x956 <goForward>
     cd0:	80 91 67 02 	lds	r24, 0x0267
     cd4:	90 91 68 02 	lds	r25, 0x0268
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	90 93 68 02 	sts	0x0268, r25
     cde:	80 93 67 02 	sts	0x0267, r24
     ce2:	08 95       	ret

00000ce4 <backward>:
     ce4:	80 91 67 02 	lds	r24, 0x0267
     ce8:	90 91 68 02 	lds	r25, 0x0268
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	90 93 68 02 	sts	0x0268, r25
     cf2:	80 93 67 02 	sts	0x0267, r24
     cf6:	08 95       	ret

00000cf8 <turnRight>:
     cf8:	80 91 49 02 	lds	r24, 0x0249
     cfc:	90 91 4a 02 	lds	r25, 0x024A
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	83 70       	andi	r24, 0x03	; 3
     d04:	90 78       	andi	r25, 0x80	; 128
     d06:	99 23       	and	r25, r25
     d08:	24 f4       	brge	.+8      	; 0xd12 <turnRight+0x1a>
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	8c 6f       	ori	r24, 0xFC	; 252
     d0e:	9f 6f       	ori	r25, 0xFF	; 255
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	90 93 4a 02 	sts	0x024A, r25
     d16:	80 93 49 02 	sts	0x0249, r24
     d1a:	08 95       	ret

00000d1c <turnLeft>:
     d1c:	80 91 49 02 	lds	r24, 0x0249
     d20:	90 91 4a 02 	lds	r25, 0x024A
     d24:	03 96       	adiw	r24, 0x03	; 3
     d26:	83 70       	andi	r24, 0x03	; 3
     d28:	90 78       	andi	r25, 0x80	; 128
     d2a:	99 23       	and	r25, r25
     d2c:	24 f4       	brge	.+8      	; 0xd36 <turnLeft+0x1a>
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	8c 6f       	ori	r24, 0xFC	; 252
     d32:	9f 6f       	ori	r25, 0xFF	; 255
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	90 93 4a 02 	sts	0x024A, r25
     d3a:	80 93 49 02 	sts	0x0249, r24
     d3e:	08 95       	ret

00000d40 <turn>:
     d40:	80 91 49 02 	lds	r24, 0x0249
     d44:	90 91 4a 02 	lds	r25, 0x024A
     d48:	02 96       	adiw	r24, 0x02	; 2
     d4a:	83 70       	andi	r24, 0x03	; 3
     d4c:	90 78       	andi	r25, 0x80	; 128
     d4e:	99 23       	and	r25, r25
     d50:	24 f4       	brge	.+8      	; 0xd5a <turn+0x1a>
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	8c 6f       	ori	r24, 0xFC	; 252
     d56:	9f 6f       	ori	r25, 0xFF	; 255
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	90 93 4a 02 	sts	0x024A, r25
     d5e:	80 93 49 02 	sts	0x0249, r24
     d62:	08 95       	ret

00000d64 <traverseToSort>:
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
     d6a:	04 97       	sbiw	r24, 0x04	; 4
     d6c:	02 97       	sbiw	r24, 0x02	; 2
     d6e:	88 f5       	brcc	.+98     	; 0xdd2 <traverseToSort+0x6e>
     d70:	c4 30       	cpi	r28, 0x04	; 4
     d72:	d1 05       	cpc	r29, r1
     d74:	39 f4       	brne	.+14     	; 0xd84 <traverseToSort+0x20>
     d76:	80 91 49 02 	lds	r24, 0x0249
     d7a:	90 91 4a 02 	lds	r25, 0x024A
     d7e:	89 2b       	or	r24, r25
     d80:	51 f0       	breq	.+20     	; 0xd96 <traverseToSort+0x32>
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <traverseToSort+0x36>
     d84:	c5 30       	cpi	r28, 0x05	; 5
     d86:	d1 05       	cpc	r29, r1
     d88:	41 f4       	brne	.+16     	; 0xd9a <traverseToSort+0x36>
     d8a:	80 91 49 02 	lds	r24, 0x0249
     d8e:	90 91 4a 02 	lds	r25, 0x024A
     d92:	02 97       	sbiw	r24, 0x02	; 2
     d94:	11 f4       	brne	.+4      	; 0xd9a <traverseToSort+0x36>
     d96:	b0 df       	rcall	.-160    	; 0xcf8 <turnRight>
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <traverseToSort+0x38>
     d9a:	c0 df       	rcall	.-128    	; 0xd1c <turnLeft>
     d9c:	98 df       	rcall	.-208    	; 0xcce <front>
     d9e:	97 df       	rcall	.-210    	; 0xcce <front>
     da0:	24 97       	sbiw	r28, 0x04	; 4
     da2:	39 f4       	brne	.+14     	; 0xdb2 <traverseToSort+0x4e>
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	90 93 4c 02 	sts	0x024C, r25
     dac:	80 93 4b 02 	sts	0x024B, r24
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <traverseToSort+0x5a>
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 4c 02 	sts	0x024C, r25
     dba:	80 93 4b 02 	sts	0x024B, r24
     dbe:	80 91 67 02 	lds	r24, 0x0267
     dc2:	90 91 68 02 	lds	r25, 0x0268
     dc6:	02 96       	adiw	r24, 0x02	; 2
     dc8:	90 93 68 02 	sts	0x0268, r25
     dcc:	80 93 67 02 	sts	0x0267, r24
     dd0:	23 c0       	rjmp	.+70     	; 0xe18 <traverseToSort+0xb4>
     dd2:	22 97       	sbiw	r28, 0x02	; 2
     dd4:	3c f4       	brge	.+14     	; 0xde4 <traverseToSort+0x80>
     dd6:	80 91 49 02 	lds	r24, 0x0249
     dda:	90 91 4a 02 	lds	r25, 0x024A
     dde:	89 2b       	or	r24, r25
     de0:	39 f0       	breq	.+14     	; 0xdf0 <traverseToSort+0x8c>
     de2:	08 c0       	rjmp	.+16     	; 0xdf4 <traverseToSort+0x90>
     de4:	80 91 49 02 	lds	r24, 0x0249
     de8:	90 91 4a 02 	lds	r25, 0x024A
     dec:	02 97       	sbiw	r24, 0x02	; 2
     dee:	11 f4       	brne	.+4      	; 0xdf4 <traverseToSort+0x90>
     df0:	79 df       	rcall	.-270    	; 0xce4 <backward>
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <traverseToSort+0x92>
     df4:	6c df       	rcall	.-296    	; 0xcce <front>
     df6:	80 91 78 02 	lds	r24, 0x0278
     dfa:	90 91 79 02 	lds	r25, 0x0279
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	90 78       	andi	r25, 0x80	; 128
     e02:	99 23       	and	r25, r25
     e04:	24 f4       	brge	.+8      	; 0xe0e <traverseToSort+0xaa>
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	8e 6f       	ori	r24, 0xFE	; 254
     e0a:	9f 6f       	ori	r25, 0xFF	; 255
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	04 96       	adiw	r24, 0x04	; 4
     e10:	90 93 4c 02 	sts	0x024C, r25
     e14:	80 93 4b 02 	sts	0x024B, r24
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <scan>:
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	5d dc       	rcall	.-1862   	; 0x6de <red_read>
     e24:	ab dc       	rcall	.-1706   	; 0x77c <blue_read>
     e26:	87 dc       	rcall	.-1778   	; 0x736 <green_read>
     e28:	80 91 5d 02 	lds	r24, 0x025D
     e2c:	90 91 5e 02 	lds	r25, 0x025E
     e30:	aa 27       	eor	r26, r26
     e32:	97 fd       	sbrc	r25, 7
     e34:	a0 95       	com	r26
     e36:	ba 2f       	mov	r27, r26
     e38:	40 91 6f 02 	lds	r20, 0x026F
     e3c:	50 91 70 02 	lds	r21, 0x0270
     e40:	60 91 71 02 	lds	r22, 0x0271
     e44:	70 91 72 02 	lds	r23, 0x0272
     e48:	48 17       	cp	r20, r24
     e4a:	59 07       	cpc	r21, r25
     e4c:	6a 07       	cpc	r22, r26
     e4e:	7b 07       	cpc	r23, r27
     e50:	d8 f4       	brcc	.+54     	; 0xe88 <scan+0x6a>
     e52:	40 91 6b 02 	lds	r20, 0x026B
     e56:	50 91 6c 02 	lds	r21, 0x026C
     e5a:	60 91 6d 02 	lds	r22, 0x026D
     e5e:	70 91 6e 02 	lds	r23, 0x026E
     e62:	48 17       	cp	r20, r24
     e64:	59 07       	cpc	r21, r25
     e66:	6a 07       	cpc	r22, r26
     e68:	7b 07       	cpc	r23, r27
     e6a:	70 f4       	brcc	.+28     	; 0xe88 <scan+0x6a>
     e6c:	40 91 5f 02 	lds	r20, 0x025F
     e70:	50 91 60 02 	lds	r21, 0x0260
     e74:	60 91 61 02 	lds	r22, 0x0261
     e78:	70 91 62 02 	lds	r23, 0x0262
     e7c:	48 17       	cp	r20, r24
     e7e:	59 07       	cpc	r21, r25
     e80:	6a 07       	cpc	r22, r26
     e82:	7b 07       	cpc	r23, r27
     e84:	08 f4       	brcc	.+2      	; 0xe88 <scan+0x6a>
     e86:	46 c0       	rjmp	.+140    	; 0xf14 <scan+0xf6>
     e88:	40 91 6f 02 	lds	r20, 0x026F
     e8c:	50 91 70 02 	lds	r21, 0x0270
     e90:	60 91 71 02 	lds	r22, 0x0271
     e94:	70 91 72 02 	lds	r23, 0x0272
     e98:	80 91 5f 02 	lds	r24, 0x025F
     e9c:	90 91 60 02 	lds	r25, 0x0260
     ea0:	a0 91 61 02 	lds	r26, 0x0261
     ea4:	b0 91 62 02 	lds	r27, 0x0262
     ea8:	84 17       	cp	r24, r20
     eaa:	95 07       	cpc	r25, r21
     eac:	a6 07       	cpc	r26, r22
     eae:	b7 07       	cpc	r27, r23
     eb0:	c8 f4       	brcc	.+50     	; 0xee4 <scan+0xc6>
     eb2:	00 91 6f 02 	lds	r16, 0x026F
     eb6:	10 91 70 02 	lds	r17, 0x0270
     eba:	20 91 71 02 	lds	r18, 0x0271
     ebe:	30 91 72 02 	lds	r19, 0x0272
     ec2:	40 91 6b 02 	lds	r20, 0x026B
     ec6:	50 91 6c 02 	lds	r21, 0x026C
     eca:	60 91 6d 02 	lds	r22, 0x026D
     ece:	70 91 6e 02 	lds	r23, 0x026E
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	40 17       	cp	r20, r16
     ed8:	51 07       	cpc	r21, r17
     eda:	62 07       	cpc	r22, r18
     edc:	73 07       	cpc	r23, r19
     ede:	f8 f4       	brcc	.+62     	; 0xf1e <scan+0x100>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	1d c0       	rjmp	.+58     	; 0xf1e <scan+0x100>
     ee4:	40 91 5f 02 	lds	r20, 0x025F
     ee8:	50 91 60 02 	lds	r21, 0x0260
     eec:	60 91 61 02 	lds	r22, 0x0261
     ef0:	70 91 62 02 	lds	r23, 0x0262
     ef4:	80 91 6b 02 	lds	r24, 0x026B
     ef8:	90 91 6c 02 	lds	r25, 0x026C
     efc:	a0 91 6d 02 	lds	r26, 0x026D
     f00:	b0 91 6e 02 	lds	r27, 0x026E
     f04:	84 17       	cp	r24, r20
     f06:	95 07       	cpc	r25, r21
     f08:	a6 07       	cpc	r26, r22
     f0a:	b7 07       	cpc	r27, r23
     f0c:	30 f4       	brcc	.+12     	; 0xf1a <scan+0xfc>
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <scan+0x100>
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <scan+0x100>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <setIndicatorAndColor>:
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	cc e8       	ldi	r28, 0x8C	; 140
     f2a:	d2 e0       	ldi	r29, 0x02	; 2
     f2c:	ec e7       	ldi	r30, 0x7C	; 124
     f2e:	f2 e0       	ldi	r31, 0x02	; 2
     f30:	a5 e5       	ldi	r26, 0x55	; 85
     f32:	b2 e0       	ldi	r27, 0x02	; 2
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	2e ef       	ldi	r18, 0xFE	; 254
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
     f3c:	89 93       	st	Y+, r24
     f3e:	99 93       	st	Y+, r25
     f40:	33 83       	std	Z+3, r19	; 0x03
     f42:	22 83       	std	Z+2, r18	; 0x02
     f44:	31 83       	std	Z+1, r19	; 0x01
     f46:	20 83       	st	Z, r18
     f48:	1d 92       	st	X+, r1
     f4a:	1d 92       	st	X+, r1
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	34 96       	adiw	r30, 0x04	; 4
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	91 05       	cpc	r25, r1
     f54:	99 f7       	brne	.-26     	; 0xf3c <setIndicatorAndColor+0x18>
     f56:	e0 91 8c 02 	lds	r30, 0x028C
     f5a:	f0 91 8d 02 	lds	r31, 0x028D
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	ec 56       	subi	r30, 0x6C	; 108
     f64:	fd 4f       	sbci	r31, 0xFD	; 253
     f66:	11 82       	std	Z+1, r1	; 0x01
     f68:	10 82       	st	Z, r1
     f6a:	e0 91 8e 02 	lds	r30, 0x028E
     f6e:	f0 91 8f 02 	lds	r31, 0x028F
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	ec 56       	subi	r30, 0x6C	; 108
     f78:	fd 4f       	sbci	r31, 0xFD	; 253
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
     f82:	e0 91 90 02 	lds	r30, 0x0290
     f86:	f0 91 91 02 	lds	r31, 0x0291
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	ec 56       	subi	r30, 0x6C	; 108
     f90:	fd 4f       	sbci	r31, 0xFD	; 253
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	e0 91 92 02 	lds	r30, 0x0292
     f9e:	f0 91 93 02 	lds	r31, 0x0293
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	ec 56       	subi	r30, 0x6C	; 108
     fa8:	fd 4f       	sbci	r31, 0xFD	; 253
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	9f ef       	ldi	r25, 0xFF	; 255
     fb6:	90 93 77 02 	sts	0x0277, r25
     fba:	80 93 76 02 	sts	0x0276, r24
     fbe:	90 93 75 02 	sts	0x0275, r25
     fc2:	80 93 74 02 	sts	0x0274, r24
     fc6:	90 93 a3 02 	sts	0x02A3, r25
     fca:	80 93 a2 02 	sts	0x02A2, r24
     fce:	90 93 a1 02 	sts	0x02A1, r25
     fd2:	80 93 a0 02 	sts	0x02A0, r24
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <terminalCheck1>:
void terminalCheck1()
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
	if (ct != ot)
     fe0:	80 91 78 02 	lds	r24, 0x0278
     fe4:	90 91 79 02 	lds	r25, 0x0279
     fe8:	20 91 4b 02 	lds	r18, 0x024B
     fec:	30 91 4c 02 	lds	r19, 0x024C
     ff0:	82 17       	cp	r24, r18
     ff2:	93 07       	cpc	r25, r19
     ff4:	89 f1       	breq	.+98     	; 0x1058 <terminalCheck1+0x7c>
	{
		if (dir == 1 || dir == 3)
     ff6:	20 91 49 02 	lds	r18, 0x0249
     ffa:	30 91 4a 02 	lds	r19, 0x024A
     ffe:	2d 7f       	andi	r18, 0xFD	; 253
    1000:	21 30       	cpi	r18, 0x01	; 1
    1002:	31 05       	cpc	r19, r1
    1004:	49 f4       	brne	.+18     	; 0x1018 <terminalCheck1+0x3c>
		{
			if (ct == 3 || ct == 0)
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	11 f0       	breq	.+4      	; 0x1010 <terminalCheck1+0x34>
    100c:	89 2b       	or	r24, r25
    100e:	11 f4       	brne	.+4      	; 0x1014 <terminalCheck1+0x38>
				turnRight();
    1010:	73 de       	rcall	.-794    	; 0xcf8 <turnRight>
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <terminalCheck1+0x3a>
			else turnLeft();
    1014:	83 de       	rcall	.-762    	; 0xd1c <turnLeft>
			front();
    1016:	5b de       	rcall	.-842    	; 0xcce <front>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1018:	80 91 78 02 	lds	r24, 0x0278
    101c:	90 91 79 02 	lds	r25, 0x0279
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	91 05       	cpc	r25, r1
    1024:	38 f4       	brcc	.+14     	; 0x1034 <terminalCheck1+0x58>
    1026:	20 91 49 02 	lds	r18, 0x0249
    102a:	30 91 4a 02 	lds	r19, 0x024A
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	31 05       	cpc	r19, r1
    1032:	49 f0       	breq	.+18     	; 0x1046 <terminalCheck1+0x6a>
    1034:	02 97       	sbiw	r24, 0x02	; 2
    1036:	02 97       	sbiw	r24, 0x02	; 2
    1038:	38 f4       	brcc	.+14     	; 0x1048 <terminalCheck1+0x6c>
    103a:	80 91 49 02 	lds	r24, 0x0249
    103e:	90 91 4a 02 	lds	r25, 0x024A
    1042:	89 2b       	or	r24, r25
    1044:	09 f4       	brne	.+2      	; 0x1048 <terminalCheck1+0x6c>
			backward();
    1046:	4e de       	rcall	.-868    	; 0xce4 <backward>
		ot = ct;
    1048:	80 91 78 02 	lds	r24, 0x0278
    104c:	90 91 79 02 	lds	r25, 0x0279
    1050:	90 93 4c 02 	sts	0x024C, r25
    1054:	80 93 4b 02 	sts	0x024B, r24
	}
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1058:	80 91 78 02 	lds	r24, 0x0278
    105c:	90 91 79 02 	lds	r25, 0x0279
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	91 05       	cpc	r25, r1
    1064:	30 f4       	brcc	.+12     	; 0x1072 <terminalCheck1+0x96>
    1066:	20 91 49 02 	lds	r18, 0x0249
    106a:	30 91 4a 02 	lds	r19, 0x024A
    106e:	23 2b       	or	r18, r19
    1070:	49 f0       	breq	.+18     	; 0x1084 <terminalCheck1+0xa8>
    1072:	02 97       	sbiw	r24, 0x02	; 2
    1074:	02 97       	sbiw	r24, 0x02	; 2
    1076:	40 f4       	brcc	.+16     	; 0x1088 <terminalCheck1+0xac>
    1078:	80 91 49 02 	lds	r24, 0x0249
    107c:	90 91 4a 02 	lds	r25, 0x024A
    1080:	02 97       	sbiw	r24, 0x02	; 2
    1082:	11 f4       	brne	.+4      	; 0x1088 <terminalCheck1+0xac>
		turnRight();
    1084:	39 de       	rcall	.-910    	; 0xcf8 <turnRight>
    1086:	01 c0       	rjmp	.+2      	; 0x108a <terminalCheck1+0xae>
	else turnLeft();
    1088:	49 de       	rcall	.-878    	; 0xd1c <turnLeft>
	//..printf("Enter term[%d][%d]\n", ct, 0);
	//..scanf("%d", &term[ct][0]);
	term[ct][0]=scan();
    108a:	c0 91 78 02 	lds	r28, 0x0278
    108e:	d0 91 79 02 	lds	r29, 0x0279
    1092:	c5 de       	rcall	.-630    	; 0xe1e <scan>
    1094:	cc 0f       	add	r28, r28
    1096:	dd 1f       	adc	r29, r29
    1098:	cc 0f       	add	r28, r28
    109a:	dd 1f       	adc	r29, r29
    109c:	c4 58       	subi	r28, 0x84	; 132
    109e:	dd 4f       	sbci	r29, 0xFD	; 253
    10a0:	99 83       	std	Y+1, r25	; 0x01
    10a2:	88 83       	st	Y, r24
	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    10a4:	20 91 78 02 	lds	r18, 0x0278
    10a8:	30 91 79 02 	lds	r19, 0x0279
    10ac:	f9 01       	movw	r30, r18
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	e4 58       	subi	r30, 0x84	; 132
    10b8:	fd 4f       	sbci	r31, 0xFD	; 253
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	4f ef       	ldi	r20, 0xFF	; 255
    10c2:	94 07       	cpc	r25, r20
    10c4:	51 f0       	breq	.+20     	; 0x10da <terminalCheck1+0xfe>
    10c6:	f9 01       	movw	r30, r18
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	e4 57       	subi	r30, 0x74	; 116
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
    10d4:	82 17       	cp	r24, r18
    10d6:	93 07       	cpc	r25, r19
    10d8:	49 f4       	brne	.+18     	; 0x10ec <terminalCheck1+0x110>
		total--;
    10da:	80 91 00 02 	lds	r24, 0x0200
    10de:	90 91 01 02 	lds	r25, 0x0201
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	90 93 01 02 	sts	0x0201, r25
    10e8:	80 93 00 02 	sts	0x0200, r24
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <terminalCheck2>:
void terminalCheck2()
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    10f6:	80 91 78 02 	lds	r24, 0x0278
    10fa:	90 91 79 02 	lds	r25, 0x0279
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	30 f4       	brcc	.+12     	; 0x1110 <terminalCheck2+0x1e>
    1104:	20 91 49 02 	lds	r18, 0x0249
    1108:	30 91 4a 02 	lds	r19, 0x024A
    110c:	23 2b       	or	r18, r19
    110e:	69 f0       	breq	.+26     	; 0x112a <terminalCheck2+0x38>
    1110:	9c 01       	movw	r18, r24
    1112:	22 50       	subi	r18, 0x02	; 2
    1114:	31 09       	sbc	r19, r1
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	48 f4       	brcc	.+18     	; 0x112e <terminalCheck2+0x3c>
    111c:	40 91 49 02 	lds	r20, 0x0249
    1120:	50 91 4a 02 	lds	r21, 0x024A
    1124:	42 30       	cpi	r20, 0x02	; 2
    1126:	51 05       	cpc	r21, r1
    1128:	11 f4       	brne	.+4      	; 0x112e <terminalCheck2+0x3c>
		turnLeft();
    112a:	f8 dd       	rcall	.-1040   	; 0xd1c <turnLeft>
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <terminalCheck2+0x64>
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    112e:	02 97       	sbiw	r24, 0x02	; 2
    1130:	30 f4       	brcc	.+12     	; 0x113e <terminalCheck2+0x4c>
    1132:	80 91 49 02 	lds	r24, 0x0249
    1136:	90 91 4a 02 	lds	r25, 0x024A
    113a:	02 97       	sbiw	r24, 0x02	; 2
    113c:	49 f0       	breq	.+18     	; 0x1150 <terminalCheck2+0x5e>
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	40 f4       	brcc	.+16     	; 0x1154 <terminalCheck2+0x62>
    1144:	80 91 49 02 	lds	r24, 0x0249
    1148:	90 91 4a 02 	lds	r25, 0x024A
    114c:	89 2b       	or	r24, r25
    114e:	11 f4       	brne	.+4      	; 0x1154 <terminalCheck2+0x62>
		turnRight();
    1150:	d3 dd       	rcall	.-1114   	; 0xcf8 <turnRight>
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <terminalCheck2+0x64>
	else turn();
    1154:	f5 dd       	rcall	.-1046   	; 0xd40 <turn>
	//..printf("Enter term[%d][%d]\n", ct, 1);
	//..scanf("%d", &term[ct][1]);
	term[ct][1]=scan();
    1156:	c0 91 78 02 	lds	r28, 0x0278
    115a:	d0 91 79 02 	lds	r29, 0x0279
    115e:	5f de       	rcall	.-834    	; 0xe1e <scan>
    1160:	cc 0f       	add	r28, r28
    1162:	dd 1f       	adc	r29, r29
    1164:	cc 0f       	add	r28, r28
    1166:	dd 1f       	adc	r29, r29
    1168:	c4 58       	subi	r28, 0x84	; 132
    116a:	dd 4f       	sbci	r29, 0xFD	; 253
    116c:	9b 83       	std	Y+3, r25	; 0x03
    116e:	8a 83       	std	Y+2, r24	; 0x02
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1170:	80 91 78 02 	lds	r24, 0x0278
    1174:	90 91 79 02 	lds	r25, 0x0279
    1178:	fc 01       	movw	r30, r24
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e4 58       	subi	r30, 0x84	; 132
    1184:	fd 4f       	sbci	r31, 0xFD	; 253
    1186:	22 81       	ldd	r18, Z+2	; 0x02
    1188:	33 81       	ldd	r19, Z+3	; 0x03
    118a:	2f 3f       	cpi	r18, 0xFF	; 255
    118c:	4f ef       	ldi	r20, 0xFF	; 255
    118e:	34 07       	cpc	r19, r20
    1190:	51 f0       	breq	.+20     	; 0x11a6 <terminalCheck2+0xb4>
    1192:	fc 01       	movw	r30, r24
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	e4 57       	subi	r30, 0x74	; 116
    119a:	fd 4f       	sbci	r31, 0xFD	; 253
    119c:	40 81       	ld	r20, Z
    119e:	51 81       	ldd	r21, Z+1	; 0x01
    11a0:	24 17       	cp	r18, r20
    11a2:	35 07       	cpc	r19, r21
    11a4:	51 f4       	brne	.+20     	; 0x11ba <terminalCheck2+0xc8>
		total--;
    11a6:	20 91 00 02 	lds	r18, 0x0200
    11aa:	30 91 01 02 	lds	r19, 0x0201
    11ae:	21 50       	subi	r18, 0x01	; 1
    11b0:	31 09       	sbc	r19, r1
    11b2:	30 93 01 02 	sts	0x0201, r19
    11b6:	20 93 00 02 	sts	0x0200, r18
	visited[ct] = 1;
    11ba:	fc 01       	movw	r30, r24
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	eb 5a       	subi	r30, 0xAB	; 171
    11c2:	fd 4f       	sbci	r31, 0xFD	; 253
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
	visitedCount++;
    11cc:	80 91 4d 02 	lds	r24, 0x024D
    11d0:	90 91 4e 02 	lds	r25, 0x024E
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	90 93 4e 02 	sts	0x024E, r25
    11da:	80 93 4d 02 	sts	0x024D, r24
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <elevate>:
void elevate(unsigned char angle, unsigned char side)
{
	if (side == 0)
    11e4:	61 11       	cpse	r22, r1
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <elevate+0x8>
	servo_1(angle);
    11e8:	55 ca       	rjmp	.-2902   	; 0x694 <servo_1>
    11ea:	08 95       	ret
	else if (side == 1)
    11ec:	61 30       	cpi	r22, 0x01	; 1
    11ee:	31 f4       	brne	.+12     	; 0x11fc <elevate+0x18>
	servo_1((angle == 45) ? 0 : 45);
    11f0:	8d 32       	cpi	r24, 0x2D	; 45
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <elevate+0x14>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <elevate+0x16>
    11f8:	8d e2       	ldi	r24, 0x2D	; 45
    11fa:	4c ca       	rjmp	.-2920   	; 0x694 <servo_1>
    11fc:	08 95       	ret

000011fe <open>:
}
void open(unsigned char side)
{
	if (side == 0)
    11fe:	81 11       	cpse	r24, r1
    1200:	06 c0       	rjmp	.+12     	; 0x120e <open+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    1202:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1206:	83 e8       	ldi	r24, 0x83	; 131
    1208:	80 93 8a 00 	sts	0x008A, r24
    120c:	08 95       	ret
	servo_2(180);
	else if (side == 1)
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	29 f4       	brne	.+10     	; 0x121c <open+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    1212:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    1216:	83 e8       	ldi	r24, 0x83	; 131
    1218:	80 93 8c 00 	sts	0x008C, r24
    121c:	08 95       	ret

0000121e <close>:
	servo_3(180);
}
void close(unsigned char side)
{
	if (side == 0)
    121e:	81 11       	cpse	r24, r1
    1220:	06 c0       	rjmp	.+12     	; 0x122e <close+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    1222:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1226:	83 e2       	ldi	r24, 0x23	; 35
    1228:	80 93 8a 00 	sts	0x008A, r24
    122c:	08 95       	ret
	servo_2(0);
	else if (side == 1)
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	29 f4       	brne	.+10     	; 0x123c <close+0x1e>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    1232:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    1236:	83 e2       	ldi	r24, 0x23	; 35
    1238:	80 93 8c 00 	sts	0x008C, r24
    123c:	08 95       	ret

0000123e <pick>:
	servo_3(0);
}
void pick(int side)	//TODO delay
{
    123e:	cf 93       	push	r28
    1240:	c8 2f       	mov	r28, r24
	elevate(0, side);//lower
    1242:	68 2f       	mov	r22, r24
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	ce df       	rcall	.-100    	; 0x11e4 <elevate>
	open(side);
    1248:	8c 2f       	mov	r24, r28
    124a:	d9 df       	rcall	.-78     	; 0x11fe <open>
	close(side);
    124c:	8c 2f       	mov	r24, r28
    124e:	e7 df       	rcall	.-50     	; 0x121e <close>
	elevate(45, side);//mid
    1250:	6c 2f       	mov	r22, r28
    1252:	8d e2       	ldi	r24, 0x2D	; 45
    1254:	c7 df       	rcall	.-114    	; 0x11e4 <elevate>
	armCount--;
    1256:	80 91 02 02 	lds	r24, 0x0202
    125a:	90 91 03 02 	lds	r25, 0x0203
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	90 93 03 02 	sts	0x0203, r25
    1264:	80 93 02 02 	sts	0x0202, r24
}
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <pickNode>:

void pickNode(int armNo, int side)
{
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	8c 01       	movw	r16, r24
    1276:	eb 01       	movw	r28, r22
	lcd(pickNode);
    1278:	86 e3       	ldi	r24, 0x36	; 54
    127a:	99 e0       	ldi	r25, 0x09	; 9
    127c:	a1 db       	rcall	.-2238   	; 0x9c0 <lcd>
	arm[armNo] = term[ct][side];
    127e:	20 91 78 02 	lds	r18, 0x0278
    1282:	30 91 79 02 	lds	r19, 0x0279
    1286:	f8 01       	movw	r30, r16
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	e0 56       	subi	r30, 0x60	; 96
    128e:	fd 4f       	sbci	r31, 0xFD	; 253
    1290:	d9 01       	movw	r26, r18
    1292:	aa 0f       	add	r26, r26
    1294:	bb 1f       	adc	r27, r27
    1296:	ac 0f       	add	r26, r28
    1298:	bd 1f       	adc	r27, r29
    129a:	aa 0f       	add	r26, r26
    129c:	bb 1f       	adc	r27, r27
    129e:	a4 58       	subi	r26, 0x84	; 132
    12a0:	bd 4f       	sbci	r27, 0xFD	; 253
    12a2:	8d 91       	ld	r24, X+
    12a4:	9c 91       	ld	r25, X
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
	if (ct == ot)
    12aa:	80 91 4b 02 	lds	r24, 0x024B
    12ae:	90 91 4c 02 	lds	r25, 0x024C
    12b2:	28 17       	cp	r18, r24
    12b4:	39 07       	cpc	r19, r25
    12b6:	09 f0       	breq	.+2      	; 0x12ba <pickNode+0x4e>
    12b8:	75 c0       	rjmp	.+234    	; 0x13a4 <pickNode+0x138>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    12ba:	c9 01       	movw	r24, r18
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	30 f4       	brcc	.+12     	; 0x12ce <pickNode+0x62>
    12c2:	40 91 49 02 	lds	r20, 0x0249
    12c6:	50 91 4a 02 	lds	r21, 0x024A
    12ca:	45 2b       	or	r20, r21
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <pickNode+0x7a>
    12ce:	22 50       	subi	r18, 0x02	; 2
    12d0:	31 09       	sbc	r19, r1
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	68 f4       	brcc	.+26     	; 0x12f2 <pickNode+0x86>
    12d8:	40 91 49 02 	lds	r20, 0x0249
    12dc:	50 91 4a 02 	lds	r21, 0x024A
    12e0:	42 30       	cpi	r20, 0x02	; 2
    12e2:	51 05       	cpc	r21, r1
    12e4:	31 f4       	brne	.+12     	; 0x12f2 <pickNode+0x86>
		{
			if (armNo != side)
    12e6:	0c 17       	cp	r16, r28
    12e8:	1d 07       	cpc	r17, r29
    12ea:	09 f4       	brne	.+2      	; 0x12ee <pickNode+0x82>
    12ec:	48 c0       	rjmp	.+144    	; 0x137e <pickNode+0x112>
				turn();
    12ee:	28 dd       	rcall	.-1456   	; 0xd40 <turn>
    12f0:	46 c0       	rjmp	.+140    	; 0x137e <pickNode+0x112>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	91 05       	cpc	r25, r1
    12f6:	38 f4       	brcc	.+14     	; 0x1306 <pickNode+0x9a>
    12f8:	40 91 49 02 	lds	r20, 0x0249
    12fc:	50 91 4a 02 	lds	r21, 0x024A
    1300:	42 30       	cpi	r20, 0x02	; 2
    1302:	51 05       	cpc	r21, r1
    1304:	49 f0       	breq	.+18     	; 0x1318 <pickNode+0xac>
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	58 f4       	brcc	.+22     	; 0x1322 <pickNode+0xb6>
    130c:	40 91 49 02 	lds	r20, 0x0249
    1310:	50 91 4a 02 	lds	r21, 0x024A
    1314:	45 2b       	or	r20, r21
    1316:	29 f4       	brne	.+10     	; 0x1322 <pickNode+0xb6>
		{
			if (armNo == side)
    1318:	0c 17       	cp	r16, r28
    131a:	1d 07       	cpc	r17, r29
    131c:	81 f5       	brne	.+96     	; 0x137e <pickNode+0x112>
				turn();
    131e:	10 dd       	rcall	.-1504   	; 0xd40 <turn>
    1320:	2e c0       	rjmp	.+92     	; 0x137e <pickNode+0x112>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	91 05       	cpc	r25, r1
    1326:	38 f4       	brcc	.+14     	; 0x1336 <pickNode+0xca>
    1328:	40 91 49 02 	lds	r20, 0x0249
    132c:	50 91 4a 02 	lds	r21, 0x024A
    1330:	41 30       	cpi	r20, 0x01	; 1
    1332:	51 05       	cpc	r21, r1
    1334:	51 f0       	breq	.+20     	; 0x134a <pickNode+0xde>
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	60 f4       	brcc	.+24     	; 0x1354 <pickNode+0xe8>
    133c:	40 91 49 02 	lds	r20, 0x0249
    1340:	50 91 4a 02 	lds	r21, 0x024A
    1344:	43 30       	cpi	r20, 0x03	; 3
    1346:	51 05       	cpc	r21, r1
    1348:	29 f4       	brne	.+10     	; 0x1354 <pickNode+0xe8>
		{
			if (armNo != side)
    134a:	0c 17       	cp	r16, r28
    134c:	1d 07       	cpc	r17, r29
    134e:	b9 f0       	breq	.+46     	; 0x137e <pickNode+0x112>
				turnRight();
    1350:	d3 dc       	rcall	.-1626   	; 0xcf8 <turnRight>
    1352:	15 c0       	rjmp	.+42     	; 0x137e <pickNode+0x112>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1354:	02 97       	sbiw	r24, 0x02	; 2
    1356:	30 f4       	brcc	.+12     	; 0x1364 <pickNode+0xf8>
    1358:	80 91 49 02 	lds	r24, 0x0249
    135c:	90 91 4a 02 	lds	r25, 0x024A
    1360:	03 97       	sbiw	r24, 0x03	; 3
    1362:	49 f0       	breq	.+18     	; 0x1376 <pickNode+0x10a>
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	50 f4       	brcc	.+20     	; 0x137e <pickNode+0x112>
    136a:	80 91 49 02 	lds	r24, 0x0249
    136e:	90 91 4a 02 	lds	r25, 0x024A
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	21 f4       	brne	.+8      	; 0x137e <pickNode+0x112>
			if (armNo == side)
    1376:	0c 17       	cp	r16, r28
    1378:	1d 07       	cpc	r17, r29
    137a:	09 f4       	brne	.+2      	; 0x137e <pickNode+0x112>
				turnRight();
    137c:	bd dc       	rcall	.-1670   	; 0xcf8 <turnRight>
		pick(armNo);
    137e:	c8 01       	movw	r24, r16
    1380:	5e df       	rcall	.-324    	; 0x123e <pick>
		term[ct][side] = -1;
    1382:	80 91 78 02 	lds	r24, 0x0278
    1386:	90 91 79 02 	lds	r25, 0x0279
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	c8 0f       	add	r28, r24
    1390:	d9 1f       	adc	r29, r25
    1392:	cc 0f       	add	r28, r28
    1394:	dd 1f       	adc	r29, r29
    1396:	c4 58       	subi	r28, 0x84	; 132
    1398:	dd 4f       	sbci	r29, 0xFD	; 253
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	9f ef       	ldi	r25, 0xFF	; 255
    139e:	99 83       	std	Y+1, r25	; 0x01
    13a0:	88 83       	st	Y, r24
    13a2:	50 c0       	rjmp	.+160    	; 0x1444 <pickNode+0x1d8>
	}
	else
	{
		ot = ct;
    13a4:	30 93 4c 02 	sts	0x024C, r19
    13a8:	20 93 4b 02 	sts	0x024B, r18
		if (dir == 0 || dir == 2)
    13ac:	80 91 49 02 	lds	r24, 0x0249
    13b0:	90 91 4a 02 	lds	r25, 0x024A
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	19 f0       	breq	.+6      	; 0x13be <pickNode+0x152>
    13b8:	02 97       	sbiw	r24, 0x02	; 2
    13ba:	d1 f4       	brne	.+52     	; 0x13f0 <pickNode+0x184>
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <pickNode+0x15a>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	70 f4       	brcc	.+28     	; 0x13e0 <pickNode+0x174>
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <pickNode+0x164>
    13c6:	22 50       	subi	r18, 0x02	; 2
    13c8:	31 09       	sbc	r19, r1
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	40 f4       	brcc	.+16     	; 0x13e0 <pickNode+0x174>
			{
				if (armNo == side)
    13d0:	0c 17       	cp	r16, r28
    13d2:	1d 07       	cpc	r17, r29
    13d4:	11 f4       	brne	.+4      	; 0x13da <pickNode+0x16e>
					front();
    13d6:	7b dc       	rcall	.-1802   	; 0xcce <front>
    13d8:	23 c0       	rjmp	.+70     	; 0x1420 <pickNode+0x1b4>
				else
				{
					front();
    13da:	79 dc       	rcall	.-1806   	; 0xcce <front>
					turn();
    13dc:	b1 dc       	rcall	.-1694   	; 0xd40 <turn>
    13de:	20 c0       	rjmp	.+64     	; 0x1420 <pickNode+0x1b4>
				}
			}
			else
			{
				if (armNo == side)
    13e0:	0c 17       	cp	r16, r28
    13e2:	1d 07       	cpc	r17, r29
    13e4:	19 f4       	brne	.+6      	; 0x13ec <pickNode+0x180>
				{
					turn();
    13e6:	ac dc       	rcall	.-1704   	; 0xd40 <turn>
					front();
    13e8:	72 dc       	rcall	.-1820   	; 0xcce <front>
    13ea:	1a c0       	rjmp	.+52     	; 0x1420 <pickNode+0x1b4>
				}
				else
				{
					backward();
    13ec:	7b dc       	rcall	.-1802   	; 0xce4 <backward>
    13ee:	18 c0       	rjmp	.+48     	; 0x1420 <pickNode+0x1b4>
				}
			}
		}
		else
		{
			if (armNo == side)
    13f0:	0c 17       	cp	r16, r28
    13f2:	1d 07       	cpc	r17, r29
    13f4:	59 f4       	brne	.+22     	; 0x140c <pickNode+0x1a0>
			{
				if (ct == 0 || ct == 3)
    13f6:	21 15       	cp	r18, r1
    13f8:	31 05       	cpc	r19, r1
    13fa:	19 f0       	breq	.+6      	; 0x1402 <pickNode+0x196>
    13fc:	23 30       	cpi	r18, 0x03	; 3
    13fe:	31 05       	cpc	r19, r1
    1400:	11 f4       	brne	.+4      	; 0x1406 <pickNode+0x19a>
					turnRight();
    1402:	7a dc       	rcall	.-1804   	; 0xcf8 <turnRight>
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <pickNode+0x19c>
				else turnLeft();
    1406:	8a dc       	rcall	.-1772   	; 0xd1c <turnLeft>
				front();
    1408:	62 dc       	rcall	.-1852   	; 0xcce <front>
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <pickNode+0x1b4>
			}
			else
			{
				if (ct == 0 || ct == 3)
    140c:	21 15       	cp	r18, r1
    140e:	31 05       	cpc	r19, r1
    1410:	19 f0       	breq	.+6      	; 0x1418 <pickNode+0x1ac>
    1412:	23 30       	cpi	r18, 0x03	; 3
    1414:	31 05       	cpc	r19, r1
    1416:	11 f4       	brne	.+4      	; 0x141c <pickNode+0x1b0>
					turnLeft();
    1418:	81 dc       	rcall	.-1790   	; 0xd1c <turnLeft>
    141a:	01 c0       	rjmp	.+2      	; 0x141e <pickNode+0x1b2>
				else turnRight();
    141c:	6d dc       	rcall	.-1830   	; 0xcf8 <turnRight>
				backward();
    141e:	62 dc       	rcall	.-1852   	; 0xce4 <backward>
			}
		}
		pick(armNo);
    1420:	c8 01       	movw	r24, r16
    1422:	0d df       	rcall	.-486    	; 0x123e <pick>
		term[ct][side] = -1;
    1424:	80 91 78 02 	lds	r24, 0x0278
    1428:	90 91 79 02 	lds	r25, 0x0279
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	c8 0f       	add	r28, r24
    1432:	d9 1f       	adc	r29, r25
    1434:	cc 0f       	add	r28, r28
    1436:	dd 1f       	adc	r29, r29
    1438:	c4 58       	subi	r28, 0x84	; 132
    143a:	dd 4f       	sbci	r29, 0xFD	; 253
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	99 83       	std	Y+1, r25	; 0x01
    1442:	88 83       	st	Y, r24
	}
	//..printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <pickSort>:

void pickSort(int armNo, int sortNo)
{
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	8b 01       	movw	r16, r22
	lcd("pickSort");
    145a:	89 e1       	ldi	r24, 0x19	; 25
    145c:	92 e0       	ldi	r25, 0x02	; 2
    145e:	b0 da       	rcall	.-2720   	; 0x9c0 <lcd>
	arm[armNo] = sort[sortNo];
    1460:	fe 01       	movw	r30, r28
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	e0 56       	subi	r30, 0x60	; 96
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	d8 01       	movw	r26, r16
    146c:	aa 0f       	add	r26, r26
    146e:	bb 1f       	adc	r27, r27
    1470:	ac 58       	subi	r26, 0x8C	; 140
    1472:	bd 4f       	sbci	r27, 0xFD	; 253
    1474:	8d 91       	ld	r24, X+
    1476:	9c 91       	ld	r25, X
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    147c:	c0 17       	cp	r28, r16
    147e:	d1 07       	cpc	r29, r17
    1480:	39 f4       	brne	.+14     	; 0x1490 <pickSort+0x42>
    1482:	80 91 49 02 	lds	r24, 0x0249
    1486:	90 91 4a 02 	lds	r25, 0x024A
    148a:	89 2b       	or	r24, r25
    148c:	49 f4       	brne	.+18     	; 0x14a0 <pickSort+0x52>
    148e:	06 c0       	rjmp	.+12     	; 0x149c <pickSort+0x4e>
    1490:	80 91 49 02 	lds	r24, 0x0249
    1494:	90 91 4a 02 	lds	r25, 0x024A
    1498:	02 97       	sbiw	r24, 0x02	; 2
    149a:	11 f4       	brne	.+4      	; 0x14a0 <pickSort+0x52>
		turn();
    149c:	51 dc       	rcall	.-1886   	; 0xd40 <turn>
    149e:	0c c0       	rjmp	.+24     	; 0x14b8 <pickSort+0x6a>
	else
	{
		if (dir == 1 || dir == 3)
    14a0:	80 91 49 02 	lds	r24, 0x0249
    14a4:	90 91 4a 02 	lds	r25, 0x024A
    14a8:	8d 7f       	andi	r24, 0xFD	; 253
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <pickSort+0x6a>
			if (armNo == 0)
    14ae:	20 97       	sbiw	r28, 0x00	; 0
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <pickSort+0x68>
				turnLeft();
    14b2:	34 dc       	rcall	.-1944   	; 0xd1c <turnLeft>
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <pickSort+0x6a>
			else turnRight();
    14b6:	20 dc       	rcall	.-1984   	; 0xcf8 <turnRight>
	}
	pick(armNo);
    14b8:	ce 01       	movw	r24, r28
    14ba:	c1 de       	rcall	.-638    	; 0x123e <pick>
	sort[sortNo] = -1;
    14bc:	f8 01       	movw	r30, r16
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	ec 58       	subi	r30, 0x8C	; 140
    14c4:	fd 4f       	sbci	r31, 0xFD	; 253
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	80 83       	st	Z, r24
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <pickup>:
void pickup()
{
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
	lcd("pickup");
    14e4:	82 e2       	ldi	r24, 0x22	; 34
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	6b da       	rcall	.-2858   	; 0x9c0 <lcd>
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    14ea:	20 91 78 02 	lds	r18, 0x0278
    14ee:	30 91 79 02 	lds	r19, 0x0279
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	30 f4       	brcc	.+12     	; 0x1504 <pickup+0x2c>
    14f8:	80 91 49 02 	lds	r24, 0x0249
    14fc:	90 91 4a 02 	lds	r25, 0x024A
    1500:	02 97       	sbiw	r24, 0x02	; 2
    1502:	79 f0       	breq	.+30     	; 0x1522 <pickup+0x4a>
    1504:	c9 01       	movw	r24, r18
    1506:	02 97       	sbiw	r24, 0x02	; 2
    1508:	02 97       	sbiw	r24, 0x02	; 2
    150a:	80 f4       	brcc	.+32     	; 0x152c <pickup+0x54>
    150c:	80 91 49 02 	lds	r24, 0x0249
    1510:	90 91 4a 02 	lds	r25, 0x024A
    1514:	89 2b       	or	r24, r25
    1516:	79 f0       	breq	.+30     	; 0x1536 <pickup+0x5e>
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
    1518:	c1 e0       	ldi	r28, 0x01	; 1
    151a:	d0 e0       	ldi	r29, 0x00	; 0
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	10 e0       	ldi	r17, 0x00	; 0
    1520:	0e c0       	rjmp	.+28     	; 0x153e <pickup+0x66>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1522:	c0 e0       	ldi	r28, 0x00	; 0
    1524:	d0 e0       	ldi	r29, 0x00	; 0
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1526:	01 e0       	ldi	r16, 0x01	; 1
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	09 c0       	rjmp	.+18     	; 0x153e <pickup+0x66>
	//..printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
    152c:	c1 e0       	ldi	r28, 0x01	; 1
    152e:	d0 e0       	ldi	r29, 0x00	; 0
    1530:	00 e0       	ldi	r16, 0x00	; 0
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	04 c0       	rjmp	.+8      	; 0x153e <pickup+0x66>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1536:	c0 e0       	ldi	r28, 0x00	; 0
    1538:	d0 e0       	ldi	r29, 0x00	; 0
{
	lcd("pickup");
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    153a:	01 e0       	ldi	r16, 0x01	; 1
    153c:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    153e:	f9 01       	movw	r30, r18
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	eb 5a       	subi	r30, 0xAB	; 171
    1546:	fd 4f       	sbci	r31, 0xFD	; 253
    1548:	80 81       	ld	r24, Z
    154a:	91 81       	ldd	r25, Z+1	; 0x01
    154c:	89 2b       	or	r24, r25
    154e:	79 f4       	brne	.+30     	; 0x156e <pickup+0x96>
		if (term[ct][0] == -2)
    1550:	f9 01       	movw	r30, r18
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	e4 58       	subi	r30, 0x84	; 132
    155c:	fd 4f       	sbci	r31, 0xFD	; 253
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	02 96       	adiw	r24, 0x02	; 2
    1564:	19 f4       	brne	.+6      	; 0x156c <pickup+0x94>
		{
		terminalCheck1();
    1566:	3a dd       	rcall	.-1420   	; 0xfdc <terminalCheck1>
		terminalCheck2();
    1568:	c4 dd       	rcall	.-1144   	; 0x10f2 <terminalCheck2>
    156a:	01 c0       	rjmp	.+2      	; 0x156e <pickup+0x96>
		}
		else	terminalCheck2();
    156c:	c2 dd       	rcall	.-1148   	; 0x10f2 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    156e:	20 91 78 02 	lds	r18, 0x0278
    1572:	30 91 79 02 	lds	r19, 0x0279
    1576:	f9 01       	movw	r30, r18
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	e4 58       	subi	r30, 0x84	; 132
    1582:	fd 4f       	sbci	r31, 0xFD	; 253
    1584:	40 81       	ld	r20, Z
    1586:	51 81       	ldd	r21, Z+1	; 0x01
    1588:	f9 01       	movw	r30, r18
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	e4 57       	subi	r30, 0x74	; 116
    1590:	fd 4f       	sbci	r31, 0xFD	; 253
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	48 17       	cp	r20, r24
    1598:	59 07       	cpc	r21, r25
    159a:	21 f0       	breq	.+8      	; 0x15a4 <pickup+0xcc>
    159c:	4f 3f       	cpi	r20, 0xFF	; 255
    159e:	6f ef       	ldi	r22, 0xFF	; 255
    15a0:	56 07       	cpc	r21, r22
    15a2:	89 f4       	brne	.+34     	; 0x15c6 <pickup+0xee>
    15a4:	f9 01       	movw	r30, r18
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	e4 58       	subi	r30, 0x84	; 132
    15b0:	fd 4f       	sbci	r31, 0xFD	; 253
    15b2:	62 81       	ldd	r22, Z+2	; 0x02
    15b4:	73 81       	ldd	r23, Z+3	; 0x03
    15b6:	86 17       	cp	r24, r22
    15b8:	97 07       	cpc	r25, r23
    15ba:	09 f4       	brne	.+2      	; 0x15be <pickup+0xe6>
    15bc:	ee c1       	rjmp	.+988    	; 0x199a <pickup+0x4c2>
    15be:	6f 3f       	cpi	r22, 0xFF	; 255
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <pickup+0xee>
    15c4:	ea c1       	rjmp	.+980    	; 0x199a <pickup+0x4c2>
		{
			if (armCount == 2)
    15c6:	60 91 02 02 	lds	r22, 0x0202
    15ca:	70 91 03 02 	lds	r23, 0x0203
    15ce:	62 30       	cpi	r22, 0x02	; 2
    15d0:	71 05       	cpc	r23, r1
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <pickup+0xfe>
    15d4:	b0 c0       	rjmp	.+352    	; 0x1736 <pickup+0x25e>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    15d6:	e0 91 9c 02 	lds	r30, 0x029C
    15da:	f0 91 9d 02 	lds	r31, 0x029D
    15de:	df 01       	movw	r26, r30
    15e0:	aa 0f       	add	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	a4 57       	subi	r26, 0x74	; 116
    15e6:	bd 4f       	sbci	r27, 0xFD	; 253
    15e8:	6d 91       	ld	r22, X+
    15ea:	7c 91       	ld	r23, X
    15ec:	46 17       	cp	r20, r22
    15ee:	57 07       	cpc	r21, r23
    15f0:	79 f0       	breq	.+30     	; 0x1610 <pickup+0x138>
    15f2:	d9 01       	movw	r26, r18
    15f4:	aa 0f       	add	r26, r26
    15f6:	bb 1f       	adc	r27, r27
    15f8:	aa 0f       	add	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	a4 58       	subi	r26, 0x84	; 132
    15fe:	bd 4f       	sbci	r27, 0xFD	; 253
    1600:	12 96       	adiw	r26, 0x02	; 2
    1602:	ed 90       	ld	r14, X+
    1604:	fc 90       	ld	r15, X
    1606:	13 97       	sbiw	r26, 0x03	; 3
    1608:	6e 15       	cp	r22, r14
    160a:	7f 05       	cpc	r23, r15
    160c:	59 f4       	brne	.+22     	; 0x1624 <pickup+0x14c>
    160e:	05 c0       	rjmp	.+10     	; 0x161a <pickup+0x142>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	c8 01       	movw	r24, r16
    1616:	2a de       	rcall	.-940    	; 0x126c <pickNode>
    1618:	8e c0       	rjmp	.+284    	; 0x1736 <pickup+0x25e>
					else	pickNode(arm1, 1);
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	ce 01       	movw	r24, r28
    1620:	25 de       	rcall	.-950    	; 0x126c <pickNode>
    1622:	89 c0       	rjmp	.+274    	; 0x1736 <pickup+0x25e>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1624:	8e 15       	cp	r24, r14
    1626:	9f 05       	cpc	r25, r15
    1628:	09 f4       	brne	.+2      	; 0x162c <pickup+0x154>
    162a:	4e c0       	rjmp	.+156    	; 0x16c8 <pickup+0x1f0>
    162c:	ef 20       	and	r14, r15
    162e:	e0 94       	com	r14
    1630:	09 f4       	brne	.+2      	; 0x1634 <pickup+0x15c>
    1632:	4a c0       	rjmp	.+148    	; 0x16c8 <pickup+0x1f0>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1634:	48 17       	cp	r20, r24
    1636:	59 07       	cpc	r21, r25
    1638:	69 f0       	breq	.+26     	; 0x1654 <pickup+0x17c>
    163a:	4f 3f       	cpi	r20, 0xFF	; 255
    163c:	af ef       	ldi	r26, 0xFF	; 255
    163e:	5a 07       	cpc	r21, r26
    1640:	49 f0       	breq	.+18     	; 0x1654 <pickup+0x17c>
					{
						pickNode(arm1, 1);
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	ce 01       	movw	r24, r28
    1648:	11 de       	rcall	.-990    	; 0x126c <pickNode>
						pickNode(arm0, 0);
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	c8 01       	movw	r24, r16
    1650:	0d de       	rcall	.-998    	; 0x126c <pickNode>
    1652:	71 c0       	rjmp	.+226    	; 0x1736 <pickup+0x25e>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1654:	21 70       	andi	r18, 0x01	; 1
    1656:	30 78       	andi	r19, 0x80	; 128
    1658:	33 23       	and	r19, r19
    165a:	34 f4       	brge	.+12     	; 0x1668 <pickup+0x190>
    165c:	21 50       	subi	r18, 0x01	; 1
    165e:	31 09       	sbc	r19, r1
    1660:	2e 6f       	ori	r18, 0xFE	; 254
    1662:	3f 6f       	ori	r19, 0xFF	; 255
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	d9 01       	movw	r26, r18
    166a:	aa 0f       	add	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	ac 58       	subi	r26, 0x8C	; 140
    1670:	bd 4f       	sbci	r27, 0xFD	; 253
    1672:	2d 91       	ld	r18, X+
    1674:	3c 91       	ld	r19, X
    1676:	2f 3f       	cpi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	09 f1       	breq	.+66     	; 0x16be <pickup+0x1e6>
    167c:	df 01       	movw	r26, r30
    167e:	aa 0f       	add	r26, r26
    1680:	bb 1f       	adc	r27, r27
    1682:	aa 0f       	add	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	a4 58       	subi	r26, 0x84	; 132
    1688:	bd 4f       	sbci	r27, 0xFD	; 253
    168a:	2d 91       	ld	r18, X+
    168c:	3c 91       	ld	r19, X
    168e:	62 17       	cp	r22, r18
    1690:	73 07       	cpc	r23, r19
    1692:	a9 f0       	breq	.+42     	; 0x16be <pickup+0x1e6>
    1694:	2f 3f       	cpi	r18, 0xFF	; 255
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	91 f0       	breq	.+36     	; 0x16be <pickup+0x1e6>
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	e4 58       	subi	r30, 0x84	; 132
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	22 81       	ldd	r18, Z+2	; 0x02
    16a8:	33 81       	ldd	r19, Z+3	; 0x03
    16aa:	62 17       	cp	r22, r18
    16ac:	73 07       	cpc	r23, r19
    16ae:	39 f0       	breq	.+14     	; 0x16be <pickup+0x1e6>
    16b0:	2f 3f       	cpi	r18, 0xFF	; 255
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	21 f0       	breq	.+8      	; 0x16be <pickup+0x1e6>
    16b6:	48 17       	cp	r20, r24
    16b8:	59 07       	cpc	r21, r25
    16ba:	09 f0       	breq	.+2      	; 0x16be <pickup+0x1e6>
    16bc:	6e c1       	rjmp	.+732    	; 0x199a <pickup+0x4c2>
						pickNode(arm1, 1);
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	ce 01       	movw	r24, r28
    16c4:	d3 dd       	rcall	.-1114   	; 0x126c <pickNode>
    16c6:	37 c0       	rjmp	.+110    	; 0x1736 <pickup+0x25e>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    16c8:	48 17       	cp	r20, r24
    16ca:	59 07       	cpc	r21, r25
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <pickup+0x1f8>
    16ce:	65 c1       	rjmp	.+714    	; 0x199a <pickup+0x4c2>
    16d0:	4f 3f       	cpi	r20, 0xFF	; 255
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <pickup+0x200>
    16d6:	61 c1       	rjmp	.+706    	; 0x199a <pickup+0x4c2>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    16d8:	21 70       	andi	r18, 0x01	; 1
    16da:	30 78       	andi	r19, 0x80	; 128
    16dc:	33 23       	and	r19, r19
    16de:	34 f4       	brge	.+12     	; 0x16ec <pickup+0x214>
    16e0:	21 50       	subi	r18, 0x01	; 1
    16e2:	31 09       	sbc	r19, r1
    16e4:	2e 6f       	ori	r18, 0xFE	; 254
    16e6:	3f 6f       	ori	r19, 0xFF	; 255
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	d9 01       	movw	r26, r18
    16ee:	aa 0f       	add	r26, r26
    16f0:	bb 1f       	adc	r27, r27
    16f2:	ac 58       	subi	r26, 0x8C	; 140
    16f4:	bd 4f       	sbci	r27, 0xFD	; 253
    16f6:	8d 91       	ld	r24, X+
    16f8:	9c 91       	ld	r25, X
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	c1 f0       	breq	.+48     	; 0x172e <pickup+0x256>
    16fe:	df 01       	movw	r26, r30
    1700:	aa 0f       	add	r26, r26
    1702:	bb 1f       	adc	r27, r27
    1704:	aa 0f       	add	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	a4 58       	subi	r26, 0x84	; 132
    170a:	bd 4f       	sbci	r27, 0xFD	; 253
    170c:	8d 91       	ld	r24, X+
    170e:	9c 91       	ld	r25, X
    1710:	11 97       	sbiw	r26, 0x01	; 1
    1712:	68 17       	cp	r22, r24
    1714:	79 07       	cpc	r23, r25
    1716:	59 f0       	breq	.+22     	; 0x172e <pickup+0x256>
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	49 f0       	breq	.+18     	; 0x172e <pickup+0x256>
    171c:	fd 01       	movw	r30, r26
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	68 17       	cp	r22, r24
    1724:	79 07       	cpc	r23, r25
    1726:	19 f0       	breq	.+6      	; 0x172e <pickup+0x256>
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	09 f0       	breq	.+2      	; 0x172e <pickup+0x256>
    172c:	36 c1       	rjmp	.+620    	; 0x199a <pickup+0x4c2>
						pickNode(arm0, 0);
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	c8 01       	movw	r24, r16
    1734:	9b dd       	rcall	.-1226   	; 0x126c <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    1736:	80 91 02 02 	lds	r24, 0x0202
    173a:	90 91 03 02 	lds	r25, 0x0203
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	09 f0       	breq	.+2      	; 0x1744 <pickup+0x26c>
    1742:	2b c1       	rjmp	.+598    	; 0x199a <pickup+0x4c2>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1744:	f8 01       	movw	r30, r16
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	e0 56       	subi	r30, 0x60	; 96
    174c:	fd 4f       	sbci	r31, 0xFD	; 253
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	09 f4       	brne	.+2      	; 0x1758 <pickup+0x280>
					a1 = arm0;
    1756:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1758:	be 01       	movw	r22, r28
    175a:	6f 5f       	subi	r22, 0xFF	; 255
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	61 70       	andi	r22, 0x01	; 1
    1760:	70 78       	andi	r23, 0x80	; 128
    1762:	77 23       	and	r23, r23
    1764:	34 f4       	brge	.+12     	; 0x1772 <pickup+0x29a>
    1766:	61 50       	subi	r22, 0x01	; 1
    1768:	71 09       	sbc	r23, r1
    176a:	6e 6f       	ori	r22, 0xFE	; 254
    176c:	7f 6f       	ori	r23, 0xFF	; 255
    176e:	6f 5f       	subi	r22, 0xFF	; 255
    1770:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1772:	80 91 78 02 	lds	r24, 0x0278
    1776:	90 91 79 02 	lds	r25, 0x0279
    177a:	9c 01       	movw	r18, r24
    177c:	21 70       	andi	r18, 0x01	; 1
    177e:	30 78       	andi	r19, 0x80	; 128
    1780:	33 23       	and	r19, r19
    1782:	34 f4       	brge	.+12     	; 0x1790 <pickup+0x2b8>
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	31 09       	sbc	r19, r1
    1788:	2e 6f       	ori	r18, 0xFE	; 254
    178a:	3f 6f       	ori	r19, 0xFF	; 255
    178c:	2f 5f       	subi	r18, 0xFF	; 255
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	f9 01       	movw	r30, r18
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	ec 58       	subi	r30, 0x8C	; 140
    1798:	fd 4f       	sbci	r31, 0xFD	; 253
    179a:	20 81       	ld	r18, Z
    179c:	31 81       	ldd	r19, Z+1	; 0x01
    179e:	2f 3f       	cpi	r18, 0xFF	; 255
    17a0:	af ef       	ldi	r26, 0xFF	; 255
    17a2:	3a 07       	cpc	r19, r26
    17a4:	d9 f5       	brne	.+118    	; 0x181c <pickup+0x344>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    17a6:	fc 01       	movw	r30, r24
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	ec 0f       	add	r30, r28
    17ae:	fd 1f       	adc	r31, r29
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	e4 58       	subi	r30, 0x84	; 132
    17b6:	fd 4f       	sbci	r31, 0xFD	; 253
    17b8:	20 81       	ld	r18, Z
    17ba:	31 81       	ldd	r19, Z+1	; 0x01
    17bc:	2f 3f       	cpi	r18, 0xFF	; 255
    17be:	ef ef       	ldi	r30, 0xFF	; 255
    17c0:	3e 07       	cpc	r19, r30
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <pickup+0x308>
    17c4:	fc 01       	movw	r30, r24
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	e4 57       	subi	r30, 0x74	; 116
    17cc:	fd 4f       	sbci	r31, 0xFD	; 253
    17ce:	40 81       	ld	r20, Z
    17d0:	51 81       	ldd	r21, Z+1	; 0x01
    17d2:	24 17       	cp	r18, r20
    17d4:	35 07       	cpc	r19, r21
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <pickup+0x308>
						pickNode(a1, a1);
    17d8:	be 01       	movw	r22, r28
    17da:	ce 01       	movw	r24, r28
    17dc:	47 dd       	rcall	.-1394   	; 0x126c <pickNode>
    17de:	dd c0       	rjmp	.+442    	; 0x199a <pickup+0x4c2>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    17e0:	fc 01       	movw	r30, r24
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	e6 0f       	add	r30, r22
    17e8:	f7 1f       	adc	r31, r23
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	e4 58       	subi	r30, 0x84	; 132
    17f0:	fd 4f       	sbci	r31, 0xFD	; 253
    17f2:	20 81       	ld	r18, Z
    17f4:	31 81       	ldd	r19, Z+1	; 0x01
    17f6:	2f 3f       	cpi	r18, 0xFF	; 255
    17f8:	4f ef       	ldi	r20, 0xFF	; 255
    17fa:	34 07       	cpc	r19, r20
    17fc:	09 f4       	brne	.+2      	; 0x1800 <pickup+0x328>
    17fe:	cd c0       	rjmp	.+410    	; 0x199a <pickup+0x4c2>
    1800:	fc 01       	movw	r30, r24
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	e4 57       	subi	r30, 0x74	; 116
    1808:	fd 4f       	sbci	r31, 0xFD	; 253
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	28 17       	cp	r18, r24
    1810:	39 07       	cpc	r19, r25
    1812:	09 f4       	brne	.+2      	; 0x1816 <pickup+0x33e>
    1814:	c2 c0       	rjmp	.+388    	; 0x199a <pickup+0x4c2>
						pickNode(a1, a2);
    1816:	ce 01       	movw	r24, r28
    1818:	29 dd       	rcall	.-1454   	; 0x126c <pickNode>
    181a:	bf c0       	rjmp	.+382    	; 0x199a <pickup+0x4c2>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    181c:	40 91 9c 02 	lds	r20, 0x029C
    1820:	50 91 9d 02 	lds	r21, 0x029D
    1824:	fa 01       	movw	r30, r20
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	e4 57       	subi	r30, 0x74	; 116
    182c:	fd 4f       	sbci	r31, 0xFD	; 253
    182e:	01 90       	ld	r0, Z+
    1830:	f0 81       	ld	r31, Z
    1832:	e0 2d       	mov	r30, r0
    1834:	dc 01       	movw	r26, r24
    1836:	aa 0f       	add	r26, r26
    1838:	bb 1f       	adc	r27, r27
    183a:	aa 0f       	add	r26, r26
    183c:	bb 1f       	adc	r27, r27
    183e:	a4 58       	subi	r26, 0x84	; 132
    1840:	bd 4f       	sbci	r27, 0xFD	; 253
    1842:	0d 90       	ld	r0, X+
    1844:	bc 91       	ld	r27, X
    1846:	a0 2d       	mov	r26, r0
    1848:	ae 17       	cp	r26, r30
    184a:	bf 07       	cpc	r27, r31
    184c:	71 f0       	breq	.+28     	; 0x186a <pickup+0x392>
    184e:	dc 01       	movw	r26, r24
    1850:	aa 0f       	add	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	aa 0f       	add	r26, r26
    1856:	bb 1f       	adc	r27, r27
    1858:	a4 58       	subi	r26, 0x84	; 132
    185a:	bd 4f       	sbci	r27, 0xFD	; 253
    185c:	12 96       	adiw	r26, 0x02	; 2
    185e:	0d 90       	ld	r0, X+
    1860:	bc 91       	ld	r27, X
    1862:	a0 2d       	mov	r26, r0
    1864:	ea 17       	cp	r30, r26
    1866:	fb 07       	cpc	r31, r27
    1868:	d9 f5       	brne	.+118    	; 0x18e0 <pickup+0x408>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    186a:	da 01       	movw	r26, r20
    186c:	aa 0f       	add	r26, r26
    186e:	bb 1f       	adc	r27, r27
    1870:	ab 5a       	subi	r26, 0xAB	; 171
    1872:	bd 4f       	sbci	r27, 0xFD	; 253
    1874:	2d 91       	ld	r18, X+
    1876:	3c 91       	ld	r19, X
    1878:	21 30       	cpi	r18, 0x01	; 1
    187a:	31 05       	cpc	r19, r1
    187c:	09 f0       	breq	.+2      	; 0x1880 <pickup+0x3a8>
    187e:	8d c0       	rjmp	.+282    	; 0x199a <pickup+0x4c2>
    1880:	da 01       	movw	r26, r20
    1882:	aa 0f       	add	r26, r26
    1884:	bb 1f       	adc	r27, r27
    1886:	aa 0f       	add	r26, r26
    1888:	bb 1f       	adc	r27, r27
    188a:	a4 58       	subi	r26, 0x84	; 132
    188c:	bd 4f       	sbci	r27, 0xFD	; 253
    188e:	2d 91       	ld	r18, X+
    1890:	3c 91       	ld	r19, X
    1892:	2f 3f       	cpi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	79 f0       	breq	.+30     	; 0x18b6 <pickup+0x3de>
    1898:	da 01       	movw	r26, r20
    189a:	aa 0f       	add	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	aa 0f       	add	r26, r26
    18a0:	bb 1f       	adc	r27, r27
    18a2:	a4 58       	subi	r26, 0x84	; 132
    18a4:	bd 4f       	sbci	r27, 0xFD	; 253
    18a6:	12 96       	adiw	r26, 0x02	; 2
    18a8:	2d 91       	ld	r18, X+
    18aa:	3c 91       	ld	r19, X
    18ac:	13 97       	sbiw	r26, 0x03	; 3
    18ae:	2f 3f       	cpi	r18, 0xFF	; 255
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <pickup+0x3de>
    18b4:	72 c0       	rjmp	.+228    	; 0x199a <pickup+0x4c2>
							if (term[ct][a1] == color[adj])
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	8c 0f       	add	r24, r28
    18bc:	9d 1f       	adc	r25, r29
    18be:	dc 01       	movw	r26, r24
    18c0:	aa 0f       	add	r26, r26
    18c2:	bb 1f       	adc	r27, r27
    18c4:	a4 58       	subi	r26, 0x84	; 132
    18c6:	bd 4f       	sbci	r27, 0xFD	; 253
    18c8:	8d 91       	ld	r24, X+
    18ca:	9c 91       	ld	r25, X
    18cc:	e8 17       	cp	r30, r24
    18ce:	f9 07       	cpc	r31, r25
    18d0:	21 f4       	brne	.+8      	; 0x18da <pickup+0x402>
								pickNode(a1, a1);
    18d2:	be 01       	movw	r22, r28
    18d4:	ce 01       	movw	r24, r28
    18d6:	ca dc       	rcall	.-1644   	; 0x126c <pickNode>
    18d8:	60 c0       	rjmp	.+192    	; 0x199a <pickup+0x4c2>
							else pickNode(a1, a2);
    18da:	ce 01       	movw	r24, r28
    18dc:	c7 dc       	rcall	.-1650   	; 0x126c <pickNode>
    18de:	5d c0       	rjmp	.+186    	; 0x199a <pickup+0x4c2>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    18e0:	dc 01       	movw	r26, r24
    18e2:	aa 0f       	add	r26, r26
    18e4:	bb 1f       	adc	r27, r27
    18e6:	a4 57       	subi	r26, 0x74	; 116
    18e8:	bd 4f       	sbci	r27, 0xFD	; 253
    18ea:	0d 90       	ld	r0, X+
    18ec:	bc 91       	ld	r27, X
    18ee:	a0 2d       	mov	r26, r0
    18f0:	2a 17       	cp	r18, r26
    18f2:	3b 07       	cpc	r19, r27
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <pickup+0x420>
    18f6:	51 c0       	rjmp	.+162    	; 0x199a <pickup+0x4c2>
    18f8:	2e 17       	cp	r18, r30
    18fa:	3f 07       	cpc	r19, r31
    18fc:	09 f4       	brne	.+2      	; 0x1900 <pickup+0x428>
    18fe:	4d c0       	rjmp	.+154    	; 0x199a <pickup+0x4c2>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1900:	fa 01       	movw	r30, r20
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	eb 5a       	subi	r30, 0xAB	; 171
    1908:	fd 4f       	sbci	r31, 0xFD	; 253
    190a:	20 81       	ld	r18, Z
    190c:	31 81       	ldd	r19, Z+1	; 0x01
    190e:	21 30       	cpi	r18, 0x01	; 1
    1910:	31 05       	cpc	r19, r1
    1912:	09 f0       	breq	.+2      	; 0x1916 <pickup+0x43e>
    1914:	42 c0       	rjmp	.+132    	; 0x199a <pickup+0x4c2>
    1916:	fa 01       	movw	r30, r20
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	e4 58       	subi	r30, 0x84	; 132
    1922:	fd 4f       	sbci	r31, 0xFD	; 253
    1924:	20 81       	ld	r18, Z
    1926:	31 81       	ldd	r19, Z+1	; 0x01
    1928:	a2 17       	cp	r26, r18
    192a:	b3 07       	cpc	r27, r19
    192c:	b1 f1       	breq	.+108    	; 0x199a <pickup+0x4c2>
    192e:	fa 01       	movw	r30, r20
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	e4 58       	subi	r30, 0x84	; 132
    193a:	fd 4f       	sbci	r31, 0xFD	; 253
    193c:	22 81       	ldd	r18, Z+2	; 0x02
    193e:	33 81       	ldd	r19, Z+3	; 0x03
    1940:	a2 17       	cp	r26, r18
    1942:	b3 07       	cpc	r27, r19
    1944:	51 f1       	breq	.+84     	; 0x199a <pickup+0x4c2>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1946:	fc 01       	movw	r30, r24
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	ec 0f       	add	r30, r28
    194e:	fd 1f       	adc	r31, r29
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	e4 58       	subi	r30, 0x84	; 132
    1956:	fd 4f       	sbci	r31, 0xFD	; 253
    1958:	20 81       	ld	r18, Z
    195a:	31 81       	ldd	r19, Z+1	; 0x01
    195c:	2f 3f       	cpi	r18, 0xFF	; 255
    195e:	ef ef       	ldi	r30, 0xFF	; 255
    1960:	3e 07       	cpc	r19, r30
    1962:	39 f0       	breq	.+14     	; 0x1972 <pickup+0x49a>
    1964:	a2 17       	cp	r26, r18
    1966:	b3 07       	cpc	r27, r19
    1968:	21 f0       	breq	.+8      	; 0x1972 <pickup+0x49a>
									pickNode(a1, a1);
    196a:	be 01       	movw	r22, r28
    196c:	ce 01       	movw	r24, r28
    196e:	7e dc       	rcall	.-1796   	; 0x126c <pickNode>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <pickup+0x4c2>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	86 0f       	add	r24, r22
    1978:	97 1f       	adc	r25, r23
    197a:	fc 01       	movw	r30, r24
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	e4 58       	subi	r30, 0x84	; 132
    1982:	fd 4f       	sbci	r31, 0xFD	; 253
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	8f 3f       	cpi	r24, 0xFF	; 255
    198a:	2f ef       	ldi	r18, 0xFF	; 255
    198c:	92 07       	cpc	r25, r18
    198e:	29 f0       	breq	.+10     	; 0x199a <pickup+0x4c2>
    1990:	a8 17       	cp	r26, r24
    1992:	b9 07       	cpc	r27, r25
    1994:	11 f0       	breq	.+4      	; 0x199a <pickup+0x4c2>
									pickNode(a1, a2);
    1996:	ce 01       	movw	r24, r28
    1998:	69 dc       	rcall	.-1838   	; 0x126c <pickNode>
					}
				}
			}
		}
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	08 95       	ret

000019a8 <drop>:

void drop(int side)	//TODO delay
{
    19a8:	cf 93       	push	r28
    19aa:	c8 2f       	mov	r28, r24
	lcd("drop");
    19ac:	89 e2       	ldi	r24, 0x29	; 41
    19ae:	92 e0       	ldi	r25, 0x02	; 2
    19b0:	07 d8       	rcall	.-4082   	; 0x9c0 <lcd>
	elevate(0, side);//lower
    19b2:	6c 2f       	mov	r22, r28
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	16 dc       	rcall	.-2004   	; 0x11e4 <elevate>
	open(side);
    19b8:	8c 2f       	mov	r24, r28
    19ba:	21 dc       	rcall	.-1982   	; 0x11fe <open>
	elevate(45, side);//mid
    19bc:	6c 2f       	mov	r22, r28
    19be:	8d e2       	ldi	r24, 0x2D	; 45
    19c0:	11 dc       	rcall	.-2014   	; 0x11e4 <elevate>
	close(side);
    19c2:	8c 2f       	mov	r24, r28
    19c4:	2c dc       	rcall	.-1960   	; 0x121e <close>
	armCount++;
    19c6:	80 91 02 02 	lds	r24, 0x0202
    19ca:	90 91 03 02 	lds	r25, 0x0203
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	90 93 03 02 	sts	0x0203, r25
    19d4:	80 93 02 02 	sts	0x0202, r24
}
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <nodeDrop>:
void nodeDrop(int armNo, int side)
{
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
    19e6:	8b 01       	movw	r16, r22
	lcd("nodeDrop");
    19e8:	8e e2       	ldi	r24, 0x2E	; 46
    19ea:	92 e0       	ldi	r25, 0x02	; 2
    19ec:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <lcd>
	term[ct][side] = arm[armNo];
    19f0:	20 91 78 02 	lds	r18, 0x0278
    19f4:	30 91 79 02 	lds	r19, 0x0279
    19f8:	f9 01       	movw	r30, r18
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	e0 0f       	add	r30, r16
    1a00:	f1 1f       	adc	r31, r17
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	e4 58       	subi	r30, 0x84	; 132
    1a08:	fd 4f       	sbci	r31, 0xFD	; 253
    1a0a:	de 01       	movw	r26, r28
    1a0c:	aa 0f       	add	r26, r26
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	a0 56       	subi	r26, 0x60	; 96
    1a12:	bd 4f       	sbci	r27, 0xFD	; 253
    1a14:	8d 91       	ld	r24, X+
    1a16:	9c 91       	ld	r25, X
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
	if (ct == ot)
    1a1c:	80 91 4b 02 	lds	r24, 0x024B
    1a20:	90 91 4c 02 	lds	r25, 0x024C
    1a24:	28 17       	cp	r18, r24
    1a26:	39 07       	cpc	r19, r25
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <nodeDrop+0x50>
    1a2a:	6d c0       	rjmp	.+218    	; 0x1b06 <nodeDrop+0x12a>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	30 f4       	brcc	.+12     	; 0x1a40 <nodeDrop+0x64>
    1a34:	40 91 49 02 	lds	r20, 0x0249
    1a38:	50 91 4a 02 	lds	r21, 0x024A
    1a3c:	45 2b       	or	r20, r21
    1a3e:	61 f0       	breq	.+24     	; 0x1a58 <nodeDrop+0x7c>
    1a40:	22 50       	subi	r18, 0x02	; 2
    1a42:	31 09       	sbc	r19, r1
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	68 f4       	brcc	.+26     	; 0x1a64 <nodeDrop+0x88>
    1a4a:	40 91 49 02 	lds	r20, 0x0249
    1a4e:	50 91 4a 02 	lds	r21, 0x024A
    1a52:	42 30       	cpi	r20, 0x02	; 2
    1a54:	51 05       	cpc	r21, r1
    1a56:	31 f4       	brne	.+12     	; 0x1a64 <nodeDrop+0x88>
		{
			if (armNo != side)
    1a58:	c0 17       	cp	r28, r16
    1a5a:	d1 07       	cpc	r29, r17
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <nodeDrop+0x84>
    1a5e:	48 c0       	rjmp	.+144    	; 0x1af0 <nodeDrop+0x114>
				turn();
    1a60:	6f d9       	rcall	.-3362   	; 0xd40 <turn>
    1a62:	46 c0       	rjmp	.+140    	; 0x1af0 <nodeDrop+0x114>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1a64:	82 30       	cpi	r24, 0x02	; 2
    1a66:	91 05       	cpc	r25, r1
    1a68:	38 f4       	brcc	.+14     	; 0x1a78 <nodeDrop+0x9c>
    1a6a:	40 91 49 02 	lds	r20, 0x0249
    1a6e:	50 91 4a 02 	lds	r21, 0x024A
    1a72:	42 30       	cpi	r20, 0x02	; 2
    1a74:	51 05       	cpc	r21, r1
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <nodeDrop+0xae>
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	58 f4       	brcc	.+22     	; 0x1a94 <nodeDrop+0xb8>
    1a7e:	40 91 49 02 	lds	r20, 0x0249
    1a82:	50 91 4a 02 	lds	r21, 0x024A
    1a86:	45 2b       	or	r20, r21
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <nodeDrop+0xb8>
		{
			if (armNo == side)
    1a8a:	c0 17       	cp	r28, r16
    1a8c:	d1 07       	cpc	r29, r17
    1a8e:	81 f5       	brne	.+96     	; 0x1af0 <nodeDrop+0x114>
				turn();
    1a90:	57 d9       	rcall	.-3410   	; 0xd40 <turn>
    1a92:	2e c0       	rjmp	.+92     	; 0x1af0 <nodeDrop+0x114>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	91 05       	cpc	r25, r1
    1a98:	38 f4       	brcc	.+14     	; 0x1aa8 <nodeDrop+0xcc>
    1a9a:	40 91 49 02 	lds	r20, 0x0249
    1a9e:	50 91 4a 02 	lds	r21, 0x024A
    1aa2:	41 30       	cpi	r20, 0x01	; 1
    1aa4:	51 05       	cpc	r21, r1
    1aa6:	51 f0       	breq	.+20     	; 0x1abc <nodeDrop+0xe0>
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	60 f4       	brcc	.+24     	; 0x1ac6 <nodeDrop+0xea>
    1aae:	40 91 49 02 	lds	r20, 0x0249
    1ab2:	50 91 4a 02 	lds	r21, 0x024A
    1ab6:	43 30       	cpi	r20, 0x03	; 3
    1ab8:	51 05       	cpc	r21, r1
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <nodeDrop+0xea>
		{
			if (armNo != side)
    1abc:	c0 17       	cp	r28, r16
    1abe:	d1 07       	cpc	r29, r17
    1ac0:	b9 f0       	breq	.+46     	; 0x1af0 <nodeDrop+0x114>
				turnRight();
    1ac2:	1a d9       	rcall	.-3532   	; 0xcf8 <turnRight>
    1ac4:	15 c0       	rjmp	.+42     	; 0x1af0 <nodeDrop+0x114>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1ac6:	02 97       	sbiw	r24, 0x02	; 2
    1ac8:	30 f4       	brcc	.+12     	; 0x1ad6 <nodeDrop+0xfa>
    1aca:	80 91 49 02 	lds	r24, 0x0249
    1ace:	90 91 4a 02 	lds	r25, 0x024A
    1ad2:	03 97       	sbiw	r24, 0x03	; 3
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <nodeDrop+0x10c>
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	50 f4       	brcc	.+20     	; 0x1af0 <nodeDrop+0x114>
    1adc:	80 91 49 02 	lds	r24, 0x0249
    1ae0:	90 91 4a 02 	lds	r25, 0x024A
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	21 f4       	brne	.+8      	; 0x1af0 <nodeDrop+0x114>
			if (armNo == side)
    1ae8:	c0 17       	cp	r28, r16
    1aea:	d1 07       	cpc	r29, r17
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <nodeDrop+0x114>
				turnRight();
    1aee:	04 d9       	rcall	.-3576   	; 0xcf8 <turnRight>
		drop(armNo);
    1af0:	ce 01       	movw	r24, r28
    1af2:	5a df       	rcall	.-332    	; 0x19a8 <drop>
		arm[armNo] = -1;
    1af4:	cc 0f       	add	r28, r28
    1af6:	dd 1f       	adc	r29, r29
    1af8:	c0 56       	subi	r28, 0x60	; 96
    1afa:	dd 4f       	sbci	r29, 0xFD	; 253
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f ef       	ldi	r25, 0xFF	; 255
    1b00:	99 83       	std	Y+1, r25	; 0x01
    1b02:	88 83       	st	Y, r24
    1b04:	47 c0       	rjmp	.+142    	; 0x1b94 <nodeDrop+0x1b8>
	}
	else
	{
		ot = ct;
    1b06:	30 93 4c 02 	sts	0x024C, r19
    1b0a:	20 93 4b 02 	sts	0x024B, r18
		if (dir == 0 || dir == 2)
    1b0e:	80 91 49 02 	lds	r24, 0x0249
    1b12:	90 91 4a 02 	lds	r25, 0x024A
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <nodeDrop+0x144>
    1b1a:	02 97       	sbiw	r24, 0x02	; 2
    1b1c:	c9 f4       	brne	.+50     	; 0x1b50 <nodeDrop+0x174>
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <nodeDrop+0x14c>

			if ((dir == 0 && (ct == 0 || ct == 2)) || (dir == 2 && (ct == 1 || ct == 3)))
    1b20:	2d 7f       	andi	r18, 0xFD	; 253
    1b22:	23 2b       	or	r18, r19
    1b24:	29 f0       	breq	.+10     	; 0x1b30 <nodeDrop+0x154>
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <nodeDrop+0x164>
    1b28:	2d 7f       	andi	r18, 0xFD	; 253
    1b2a:	21 30       	cpi	r18, 0x01	; 1
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	41 f4       	brne	.+16     	; 0x1b40 <nodeDrop+0x164>
				if (armNo == side)
    1b30:	c0 17       	cp	r28, r16
    1b32:	d1 07       	cpc	r29, r17
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <nodeDrop+0x15e>
					front();
    1b36:	cb d8       	rcall	.-3690   	; 0xcce <front>
    1b38:	23 c0       	rjmp	.+70     	; 0x1b80 <nodeDrop+0x1a4>
				else
				{
					front();
    1b3a:	c9 d8       	rcall	.-3694   	; 0xcce <front>
					turn();
    1b3c:	01 d9       	rcall	.-3582   	; 0xd40 <turn>
    1b3e:	20 c0       	rjmp	.+64     	; 0x1b80 <nodeDrop+0x1a4>
				}
			else
			{
				if (armNo == side)
    1b40:	c0 17       	cp	r28, r16
    1b42:	d1 07       	cpc	r29, r17
    1b44:	19 f4       	brne	.+6      	; 0x1b4c <nodeDrop+0x170>
				{
					turn();
    1b46:	fc d8       	rcall	.-3592   	; 0xd40 <turn>
					front();
    1b48:	c2 d8       	rcall	.-3708   	; 0xcce <front>
    1b4a:	1a c0       	rjmp	.+52     	; 0x1b80 <nodeDrop+0x1a4>
				}
				else
				{
					backward();
    1b4c:	cb d8       	rcall	.-3690   	; 0xce4 <backward>
    1b4e:	18 c0       	rjmp	.+48     	; 0x1b80 <nodeDrop+0x1a4>
				}
			}
		else
		{
			if (armNo == side)
    1b50:	c0 17       	cp	r28, r16
    1b52:	d1 07       	cpc	r29, r17
    1b54:	59 f4       	brne	.+22     	; 0x1b6c <nodeDrop+0x190>
			{
				if (ct == 0 || ct == 3)
    1b56:	21 15       	cp	r18, r1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	19 f0       	breq	.+6      	; 0x1b62 <nodeDrop+0x186>
    1b5c:	23 30       	cpi	r18, 0x03	; 3
    1b5e:	31 05       	cpc	r19, r1
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <nodeDrop+0x18a>
					turnRight();
    1b62:	ca d8       	rcall	.-3692   	; 0xcf8 <turnRight>
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <nodeDrop+0x18c>
				else turnLeft();
    1b66:	da d8       	rcall	.-3660   	; 0xd1c <turnLeft>
				front();
    1b68:	b2 d8       	rcall	.-3740   	; 0xcce <front>
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <nodeDrop+0x1a4>
			}
			else
			{
				if (ct == 0 || ct == 3)
    1b6c:	21 15       	cp	r18, r1
    1b6e:	31 05       	cpc	r19, r1
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <nodeDrop+0x19c>
    1b72:	23 30       	cpi	r18, 0x03	; 3
    1b74:	31 05       	cpc	r19, r1
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <nodeDrop+0x1a0>
					turnLeft();
    1b78:	d1 d8       	rcall	.-3678   	; 0xd1c <turnLeft>
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <nodeDrop+0x1a2>
				else turnRight();
    1b7c:	bd d8       	rcall	.-3718   	; 0xcf8 <turnRight>
				backward();
    1b7e:	b2 d8       	rcall	.-3740   	; 0xce4 <backward>
			}
		}
		drop(armNo);
    1b80:	ce 01       	movw	r24, r28
    1b82:	12 df       	rcall	.-476    	; 0x19a8 <drop>
		arm[armNo] = -1;
    1b84:	cc 0f       	add	r28, r28
    1b86:	dd 1f       	adc	r29, r29
    1b88:	c0 56       	subi	r28, 0x60	; 96
    1b8a:	dd 4f       	sbci	r29, 0xFD	; 253
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	9f ef       	ldi	r25, 0xFF	; 255
    1b90:	99 83       	std	Y+1, r25	; 0x01
    1b92:	88 83       	st	Y, r24
	}

	ot = ct;
    1b94:	80 91 78 02 	lds	r24, 0x0278
    1b98:	90 91 79 02 	lds	r25, 0x0279
    1b9c:	90 93 4c 02 	sts	0x024C, r25
    1ba0:	80 93 4b 02 	sts	0x024B, r24
	//..printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    1ba4:	80 91 4f 02 	lds	r24, 0x024F
    1ba8:	90 91 50 02 	lds	r25, 0x0250
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	90 93 50 02 	sts	0x0250, r25
    1bb2:	80 93 4f 02 	sts	0x024F, r24
}
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <sortDrop>:
void sortDrop(int armNo, int sortNo)
{
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    1bc6:	fb 01       	movw	r30, r22
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	ec 58       	subi	r30, 0x8C	; 140
    1bce:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	aa 0f       	add	r26, r26
    1bd4:	bb 1f       	adc	r27, r27
    1bd6:	a0 56       	subi	r26, 0x60	; 96
    1bd8:	bd 4f       	sbci	r27, 0xFD	; 253
    1bda:	8d 91       	ld	r24, X+
    1bdc:	9c 91       	ld	r25, X
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    1be2:	c6 17       	cp	r28, r22
    1be4:	d7 07       	cpc	r29, r23
    1be6:	39 f4       	brne	.+14     	; 0x1bf6 <sortDrop+0x36>
    1be8:	80 91 49 02 	lds	r24, 0x0249
    1bec:	90 91 4a 02 	lds	r25, 0x024A
    1bf0:	89 2b       	or	r24, r25
    1bf2:	49 f4       	brne	.+18     	; 0x1c06 <sortDrop+0x46>
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <sortDrop+0x42>
    1bf6:	80 91 49 02 	lds	r24, 0x0249
    1bfa:	90 91 4a 02 	lds	r25, 0x024A
    1bfe:	02 97       	sbiw	r24, 0x02	; 2
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <sortDrop+0x46>
		turn();
    1c02:	9e d8       	rcall	.-3780   	; 0xd40 <turn>
    1c04:	0c c0       	rjmp	.+24     	; 0x1c1e <sortDrop+0x5e>
	else
	{
		if (dir == 1 || dir == 3)
    1c06:	80 91 49 02 	lds	r24, 0x0249
    1c0a:	90 91 4a 02 	lds	r25, 0x024A
    1c0e:	8d 7f       	andi	r24, 0xFD	; 253
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	29 f4       	brne	.+10     	; 0x1c1e <sortDrop+0x5e>
			if (armNo == 0)
    1c14:	20 97       	sbiw	r28, 0x00	; 0
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <sortDrop+0x5c>
				turnLeft();
    1c18:	81 d8       	rcall	.-3838   	; 0xd1c <turnLeft>
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <sortDrop+0x5e>
			else turnRight();
    1c1c:	6d d8       	rcall	.-3878   	; 0xcf8 <turnRight>
	}
	drop(armNo);
    1c1e:	ce 01       	movw	r24, r28
    1c20:	c3 de       	rcall	.-634    	; 0x19a8 <drop>
	arm[armNo] = -1;
    1c22:	cc 0f       	add	r28, r28
    1c24:	dd 1f       	adc	r29, r29
    1c26:	c0 56       	subi	r28, 0x60	; 96
    1c28:	dd 4f       	sbci	r29, 0xFD	; 253
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	99 83       	std	Y+1, r25	; 0x01
    1c30:	88 83       	st	Y, r24
	//..printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <dropPickup>:

void dropPickup(int a1)
{
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	2f 5f       	subi	r18, 0xFF	; 255
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	21 70       	andi	r18, 0x01	; 1
    1c44:	30 78       	andi	r19, 0x80	; 128
    1c46:	33 23       	and	r19, r19
    1c48:	34 f4       	brge	.+12     	; 0x1c56 <dropPickup+0x1e>
    1c4a:	21 50       	subi	r18, 0x01	; 1
    1c4c:	31 09       	sbc	r19, r1
    1c4e:	2e 6f       	ori	r18, 0xFE	; 254
    1c50:	3f 6f       	ori	r19, 0xFF	; 255
    1c52:	2f 5f       	subi	r18, 0xFF	; 255
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	d2 2f       	mov	r29, r18
    1c58:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1c5a:	e0 91 78 02 	lds	r30, 0x0278
    1c5e:	f0 91 79 02 	lds	r31, 0x0279
    1c62:	af 01       	movw	r20, r30
    1c64:	44 0f       	add	r20, r20
    1c66:	55 1f       	adc	r21, r21
    1c68:	24 0f       	add	r18, r20
    1c6a:	35 1f       	adc	r19, r21
    1c6c:	d9 01       	movw	r26, r18
    1c6e:	aa 0f       	add	r26, r26
    1c70:	bb 1f       	adc	r27, r27
    1c72:	a4 58       	subi	r26, 0x84	; 132
    1c74:	bd 4f       	sbci	r27, 0xFD	; 253
    1c76:	2d 91       	ld	r18, X+
    1c78:	3c 91       	ld	r19, X
    1c7a:	da 01       	movw	r26, r20
    1c7c:	a4 57       	subi	r26, 0x74	; 116
    1c7e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c80:	4d 91       	ld	r20, X+
    1c82:	5c 91       	ld	r21, X
    1c84:	24 17       	cp	r18, r20
    1c86:	35 07       	cpc	r19, r21
    1c88:	69 f0       	breq	.+26     	; 0x1ca4 <dropPickup+0x6c>
    1c8a:	a0 91 9c 02 	lds	r26, 0x029C
    1c8e:	b0 91 9d 02 	lds	r27, 0x029D
    1c92:	aa 0f       	add	r26, r26
    1c94:	bb 1f       	adc	r27, r27
    1c96:	a4 57       	subi	r26, 0x74	; 116
    1c98:	bd 4f       	sbci	r27, 0xFD	; 253
    1c9a:	6d 91       	ld	r22, X+
    1c9c:	7c 91       	ld	r23, X
    1c9e:	26 17       	cp	r18, r22
    1ca0:	37 07       	cpc	r19, r23
    1ca2:	a9 f0       	breq	.+42     	; 0x1cce <dropPickup+0x96>
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	e8 0f       	add	r30, r24
    1caa:	f9 1f       	adc	r31, r25
    1cac:	ee 0f       	add	r30, r30
    1cae:	ff 1f       	adc	r31, r31
    1cb0:	e4 58       	subi	r30, 0x84	; 132
    1cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb4:	01 90       	ld	r0, Z+
    1cb6:	f0 81       	ld	r31, Z
    1cb8:	e0 2d       	mov	r30, r0
    1cba:	4e 17       	cp	r20, r30
    1cbc:	5f 07       	cpc	r21, r31
    1cbe:	39 f0       	breq	.+14     	; 0x1cce <dropPickup+0x96>
    1cc0:	31 96       	adiw	r30, 0x01	; 1
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <dropPickup+0x96>
		pickNode(a2, a1);
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	8d 2f       	mov	r24, r29
    1cc8:	9c 2f       	mov	r25, r28
    1cca:	d0 da       	rcall	.-2656   	; 0x126c <pickNode>
    1ccc:	0b c0       	rjmp	.+22     	; 0x1ce4 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1cce:	24 17       	cp	r18, r20
    1cd0:	35 07       	cpc	r19, r21
    1cd2:	41 f0       	breq	.+16     	; 0x1ce4 <dropPickup+0xac>
    1cd4:	2f 3f       	cpi	r18, 0xFF	; 255
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <dropPickup+0xac>
		pickNode(a2, a2);
    1cda:	6d 2f       	mov	r22, r29
    1cdc:	7c 2f       	mov	r23, r28
    1cde:	8d 2f       	mov	r24, r29
    1ce0:	9c 2f       	mov	r25, r28
    1ce2:	c4 da       	rcall	.-2680   	; 0x126c <pickNode>
}
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <canDrop>:

void canDrop()
{
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
    1cf2:	87 e3       	ldi	r24, 0x37	; 55
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <lcd>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1cfa:	20 91 78 02 	lds	r18, 0x0278
    1cfe:	30 91 79 02 	lds	r19, 0x0279
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	30 f4       	brcc	.+12     	; 0x1d14 <canDrop+0x2a>
    1d08:	80 91 49 02 	lds	r24, 0x0249
    1d0c:	90 91 4a 02 	lds	r25, 0x024A
    1d10:	02 97       	sbiw	r24, 0x02	; 2
    1d12:	79 f0       	breq	.+30     	; 0x1d32 <canDrop+0x48>
    1d14:	c9 01       	movw	r24, r18
    1d16:	02 97       	sbiw	r24, 0x02	; 2
    1d18:	02 97       	sbiw	r24, 0x02	; 2
    1d1a:	80 f4       	brcc	.+32     	; 0x1d3c <canDrop+0x52>
    1d1c:	80 91 49 02 	lds	r24, 0x0249
    1d20:	90 91 4a 02 	lds	r25, 0x024A
    1d24:	89 2b       	or	r24, r25
    1d26:	79 f0       	breq	.+30     	; 0x1d46 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1d28:	01 e0       	ldi	r16, 0x01	; 1
    1d2a:	10 e0       	ldi	r17, 0x00	; 0
    1d2c:	c0 e0       	ldi	r28, 0x00	; 0
    1d2e:	d0 e0       	ldi	r29, 0x00	; 0
    1d30:	0e c0       	rjmp	.+28     	; 0x1d4e <canDrop+0x64>
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1d36:	c1 e0       	ldi	r28, 0x01	; 1
    1d38:	d0 e0       	ldi	r29, 0x00	; 0
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <canDrop+0x64>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    1d3c:	01 e0       	ldi	r16, 0x01	; 1
    1d3e:	10 e0       	ldi	r17, 0x00	; 0
    1d40:	c0 e0       	ldi	r28, 0x00	; 0
    1d42:	d0 e0       	ldi	r29, 0x00	; 0
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <canDrop+0x64>
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1d46:	00 e0       	ldi	r16, 0x00	; 0
    1d48:	10 e0       	ldi	r17, 0x00	; 0
{
	int arm0 = 0, arm1 = 1;
	lcd("canDrop");
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1d4a:	c1 e0       	ldi	r28, 0x01	; 1
    1d4c:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    1d4e:	40 91 02 02 	lds	r20, 0x0202
    1d52:	50 91 03 02 	lds	r21, 0x0203
    1d56:	42 30       	cpi	r20, 0x02	; 2
    1d58:	51 05       	cpc	r21, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <canDrop+0x74>
    1d5c:	26 c1       	rjmp	.+588    	; 0x1faa <canDrop+0x2c0>
    1d5e:	f9 01       	movw	r30, r18
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	e4 57       	subi	r30, 0x74	; 116
    1d66:	fd 4f       	sbci	r31, 0xFD	; 253
    1d68:	40 81       	ld	r20, Z
    1d6a:	51 81       	ldd	r21, Z+1	; 0x01
    1d6c:	60 91 a0 02 	lds	r22, 0x02A0
    1d70:	70 91 a1 02 	lds	r23, 0x02A1
    1d74:	64 17       	cp	r22, r20
    1d76:	75 07       	cpc	r23, r21
    1d78:	41 f0       	breq	.+16     	; 0x1d8a <canDrop+0xa0>
    1d7a:	80 91 a2 02 	lds	r24, 0x02A2
    1d7e:	90 91 a3 02 	lds	r25, 0x02A3
    1d82:	48 17       	cp	r20, r24
    1d84:	59 07       	cpc	r21, r25
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <canDrop+0xa0>
    1d88:	10 c1       	rjmp	.+544    	; 0x1faa <canDrop+0x2c0>
		return;
	else
	{
		if (visited[ct] == 0)
    1d8a:	f9 01       	movw	r30, r18
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	eb 5a       	subi	r30, 0xAB	; 171
    1d92:	fd 4f       	sbci	r31, 0xFD	; 253
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	89 2b       	or	r24, r25
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <canDrop+0xb4>
			terminalCheck1();
    1d9c:	1f d9       	rcall	.-3522   	; 0xfdc <terminalCheck1>
		if (armCount == 0)
    1d9e:	80 91 02 02 	lds	r24, 0x0202
    1da2:	90 91 03 02 	lds	r25, 0x0203
    1da6:	89 2b       	or	r24, r25
    1da8:	09 f0       	breq	.+2      	; 0x1dac <canDrop+0xc2>
    1daa:	48 c0       	rjmp	.+144    	; 0x1e3c <canDrop+0x152>
		{
			if (arm[arm0] == color[ct])
    1dac:	20 91 78 02 	lds	r18, 0x0278
    1db0:	30 91 79 02 	lds	r19, 0x0279
    1db4:	f9 01       	movw	r30, r18
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	e4 57       	subi	r30, 0x74	; 116
    1dbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ee 0f       	add	r30, r30
    1dc6:	ff 1f       	adc	r31, r31
    1dc8:	e0 56       	subi	r30, 0x60	; 96
    1dca:	fd 4f       	sbci	r31, 0xFD	; 253
    1dcc:	40 81       	ld	r20, Z
    1dce:	51 81       	ldd	r21, Z+1	; 0x01
    1dd0:	48 17       	cp	r20, r24
    1dd2:	59 07       	cpc	r21, r25
    1dd4:	a9 f4       	brne	.+42     	; 0x1e00 <canDrop+0x116>
				if (term[ct][0] == -1)
    1dd6:	f9 01       	movw	r30, r18
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	e4 58       	subi	r30, 0x84	; 132
    1de2:	fd 4f       	sbci	r31, 0xFD	; 253
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	29 f4       	brne	.+10     	; 0x1df6 <canDrop+0x10c>
					nodeDrop(arm0, 0);
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	ce 01       	movw	r24, r28
    1df2:	f4 dd       	rcall	.-1048   	; 0x19dc <nodeDrop>
    1df4:	23 c0       	rjmp	.+70     	; 0x1e3c <canDrop+0x152>
				else nodeDrop(arm0, 1);
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	ef dd       	rcall	.-1058   	; 0x19dc <nodeDrop>
    1dfe:	1e c0       	rjmp	.+60     	; 0x1e3c <canDrop+0x152>
			else if (arm[arm1] == color[ct])
    1e00:	f8 01       	movw	r30, r16
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	e0 56       	subi	r30, 0x60	; 96
    1e08:	fd 4f       	sbci	r31, 0xFD	; 253
    1e0a:	40 81       	ld	r20, Z
    1e0c:	51 81       	ldd	r21, Z+1	; 0x01
    1e0e:	84 17       	cp	r24, r20
    1e10:	95 07       	cpc	r25, r21
    1e12:	a1 f4       	brne	.+40     	; 0x1e3c <canDrop+0x152>
				if (term[ct][0] != -1)
    1e14:	f9 01       	movw	r30, r18
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	e4 58       	subi	r30, 0x84	; 132
    1e20:	fd 4f       	sbci	r31, 0xFD	; 253
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	29 f0       	breq	.+10     	; 0x1e34 <canDrop+0x14a>
					nodeDrop(arm1, 1);
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	c8 01       	movw	r24, r16
    1e30:	d5 dd       	rcall	.-1110   	; 0x19dc <nodeDrop>
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <canDrop+0x152>
				else nodeDrop(arm1, 0);
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	c8 01       	movw	r24, r16
    1e3a:	d0 dd       	rcall	.-1120   	; 0x19dc <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    1e3c:	20 91 78 02 	lds	r18, 0x0278
    1e40:	30 91 79 02 	lds	r19, 0x0279
    1e44:	f9 01       	movw	r30, r18
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	e4 57       	subi	r30, 0x74	; 116
    1e4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	40 91 a0 02 	lds	r20, 0x02A0
    1e56:	50 91 a1 02 	lds	r21, 0x02A1
    1e5a:	48 17       	cp	r20, r24
    1e5c:	59 07       	cpc	r21, r25
    1e5e:	41 f0       	breq	.+16     	; 0x1e70 <canDrop+0x186>
    1e60:	40 91 a2 02 	lds	r20, 0x02A2
    1e64:	50 91 a3 02 	lds	r21, 0x02A3
    1e68:	84 17       	cp	r24, r20
    1e6a:	95 07       	cpc	r25, r21
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <canDrop+0x186>
    1e6e:	9d c0       	rjmp	.+314    	; 0x1faa <canDrop+0x2c0>
		{
			if (visited[ct] == 0)
    1e70:	f9 01       	movw	r30, r18
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	eb 5a       	subi	r30, 0xAB	; 171
    1e78:	fd 4f       	sbci	r31, 0xFD	; 253
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	89 2b       	or	r24, r25
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <canDrop+0x19a>
				terminalCheck2();
    1e82:	37 d9       	rcall	.-3474   	; 0x10f2 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    1e84:	80 91 78 02 	lds	r24, 0x0278
    1e88:	90 91 79 02 	lds	r25, 0x0279
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	e4 58       	subi	r30, 0x84	; 132
    1e98:	fd 4f       	sbci	r31, 0xFD	; 253
    1e9a:	20 81       	ld	r18, Z
    1e9c:	31 81       	ldd	r19, Z+1	; 0x01
    1e9e:	2f 3f       	cpi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	11 f1       	breq	.+68     	; 0x1ee8 <canDrop+0x1fe>
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	e4 58       	subi	r30, 0x84	; 132
    1eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb2:	22 81       	ldd	r18, Z+2	; 0x02
    1eb4:	33 81       	ldd	r19, Z+3	; 0x03
    1eb6:	2f 3f       	cpi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	b1 f0       	breq	.+44     	; 0x1ee8 <canDrop+0x1fe>
			{
				if (arm[arm0] == color[ct])
    1ebc:	de 01       	movw	r26, r28
    1ebe:	aa 0f       	add	r26, r26
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	a0 56       	subi	r26, 0x60	; 96
    1ec4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	e4 57       	subi	r30, 0x74	; 116
    1ece:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed0:	2d 91       	ld	r18, X+
    1ed2:	3c 91       	ld	r19, X
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	28 17       	cp	r18, r24
    1eda:	39 07       	cpc	r19, r25
    1edc:	19 f4       	brne	.+6      	; 0x1ee4 <canDrop+0x1fa>
					dropPickup(arm0);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	ab de       	rcall	.-682    	; 0x1c38 <dropPickup>
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <canDrop+0x1fe>
				else dropPickup(arm1);
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	a8 de       	rcall	.-688    	; 0x1c38 <dropPickup>
			}
			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    1ee8:	80 91 78 02 	lds	r24, 0x0278
    1eec:	90 91 79 02 	lds	r25, 0x0279
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	e4 57       	subi	r30, 0x74	; 116
    1ef8:	fd 4f       	sbci	r31, 0xFD	; 253
    1efa:	20 81       	ld	r18, Z
    1efc:	31 81       	ldd	r19, Z+1	; 0x01
    1efe:	fe 01       	movw	r30, r28
    1f00:	ee 0f       	add	r30, r30
    1f02:	ff 1f       	adc	r31, r31
    1f04:	e0 56       	subi	r30, 0x60	; 96
    1f06:	fd 4f       	sbci	r31, 0xFD	; 253
    1f08:	40 81       	ld	r20, Z
    1f0a:	51 81       	ldd	r21, Z+1	; 0x01
    1f0c:	42 17       	cp	r20, r18
    1f0e:	53 07       	cpc	r21, r19
    1f10:	11 f5       	brne	.+68     	; 0x1f56 <canDrop+0x26c>
    1f12:	fc 01       	movw	r30, r24
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e4 58       	subi	r30, 0x84	; 132
    1f1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f20:	40 81       	ld	r20, Z
    1f22:	51 81       	ldd	r21, Z+1	; 0x01
    1f24:	4f 3f       	cpi	r20, 0xFF	; 255
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	29 f4       	brne	.+10     	; 0x1f34 <canDrop+0x24a>
				nodeDrop(arm0, 0);
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	ce 01       	movw	r24, r28
    1f30:	55 dd       	rcall	.-1366   	; 0x19dc <nodeDrop>
    1f32:	3b c0       	rjmp	.+118    	; 0x1faa <canDrop+0x2c0>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    1f34:	fc 01       	movw	r30, r24
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e4 58       	subi	r30, 0x84	; 132
    1f40:	fd 4f       	sbci	r31, 0xFD	; 253
    1f42:	42 81       	ldd	r20, Z+2	; 0x02
    1f44:	53 81       	ldd	r21, Z+3	; 0x03
    1f46:	4f 3f       	cpi	r20, 0xFF	; 255
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	29 f4       	brne	.+10     	; 0x1f56 <canDrop+0x26c>
				nodeDrop(arm0, 1);
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	ce 01       	movw	r24, r28
    1f52:	44 dd       	rcall	.-1400   	; 0x19dc <nodeDrop>
    1f54:	2a c0       	rjmp	.+84     	; 0x1faa <canDrop+0x2c0>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    1f56:	f8 01       	movw	r30, r16
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	e0 56       	subi	r30, 0x60	; 96
    1f5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f60:	40 81       	ld	r20, Z
    1f62:	51 81       	ldd	r21, Z+1	; 0x01
    1f64:	24 17       	cp	r18, r20
    1f66:	35 07       	cpc	r19, r21
    1f68:	01 f5       	brne	.+64     	; 0x1faa <canDrop+0x2c0>
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	e4 58       	subi	r30, 0x84	; 132
    1f76:	fd 4f       	sbci	r31, 0xFD	; 253
    1f78:	20 81       	ld	r18, Z
    1f7a:	31 81       	ldd	r19, Z+1	; 0x01
    1f7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	29 f4       	brne	.+10     	; 0x1f8c <canDrop+0x2a2>
				nodeDrop(arm1, 0);
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	c8 01       	movw	r24, r16
    1f88:	29 dd       	rcall	.-1454   	; 0x19dc <nodeDrop>
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <canDrop+0x2c0>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	e4 58       	subi	r30, 0x84	; 132
    1f98:	fd 4f       	sbci	r31, 0xFD	; 253
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <canDrop+0x2c0>
				nodeDrop(arm1, 1);
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	19 dd       	rcall	.-1486   	; 0x19dc <nodeDrop>
		}
	}
}
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <newSort>:

void newSort()
{
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
	int t1, t2, a1, a2;
	if (arm[0] != -1)
    1fc0:	20 91 a0 02 	lds	r18, 0x02A0
    1fc4:	30 91 a1 02 	lds	r19, 0x02A1
    1fc8:	2f 3f       	cpi	r18, 0xFF	; 255
    1fca:	4f ef       	ldi	r20, 0xFF	; 255
    1fcc:	34 07       	cpc	r19, r20
    1fce:	39 f0       	breq	.+14     	; 0x1fde <newSort+0x2a>
		a1 = indicator[arm[0]];
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	ec 56       	subi	r30, 0x6C	; 108
    1fd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fda:	c0 81       	ld	r28, Z
    1fdc:	d1 81       	ldd	r29, Z+1	; 0x01
	if (arm[1] != -1)
    1fde:	e0 91 a2 02 	lds	r30, 0x02A2
    1fe2:	f0 91 a3 02 	lds	r31, 0x02A3
    1fe6:	ef 3f       	cpi	r30, 0xFF	; 255
    1fe8:	6f ef       	ldi	r22, 0xFF	; 255
    1fea:	f6 07       	cpc	r31, r22
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <newSort+0x3c>
    1fee:	5d c1       	rjmp	.+698    	; 0x22aa <__stack+0xab>
		a2 = indicator[arm[1]];
    1ff0:	df 01       	movw	r26, r30
    1ff2:	aa 0f       	add	r26, r26
    1ff4:	bb 1f       	adc	r27, r27
    1ff6:	ac 56       	subi	r26, 0x6C	; 108
    1ff8:	bd 4f       	sbci	r27, 0xFD	; 253
    1ffa:	0d 91       	ld	r16, X+
    1ffc:	1c 91       	ld	r17, X

	t1 = (ct + 1) % 2;
    1ffe:	80 91 78 02 	lds	r24, 0x0278
    2002:	90 91 79 02 	lds	r25, 0x0279
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	81 70       	andi	r24, 0x01	; 1
    200a:	90 78       	andi	r25, 0x80	; 128
    200c:	99 23       	and	r25, r25
    200e:	24 f4       	brge	.+8      	; 0x2018 <newSort+0x64>
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	8e 6f       	ori	r24, 0xFE	; 254
    2014:	9f 6f       	ori	r25, 0xFF	; 255
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    201a:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    201c:	d0 93 79 02 	sts	0x0279, r29
    2020:	c0 93 78 02 	sts	0x0278, r28
		if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    2024:	2f 3f       	cpi	r18, 0xFF	; 255
    2026:	af ef       	ldi	r26, 0xFF	; 255
    2028:	3a 07       	cpc	r19, r26
    202a:	e1 f1       	breq	.+120    	; 0x20a4 <newSort+0xf0>
    202c:	de 01       	movw	r26, r28
    202e:	aa 0f       	add	r26, r26
    2030:	bb 1f       	adc	r27, r27
    2032:	aa 0f       	add	r26, r26
    2034:	bb 1f       	adc	r27, r27
    2036:	a4 58       	subi	r26, 0x84	; 132
    2038:	bd 4f       	sbci	r27, 0xFD	; 253
    203a:	4d 91       	ld	r20, X+
    203c:	5c 91       	ld	r21, X
    203e:	4f 3f       	cpi	r20, 0xFF	; 255
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	71 f0       	breq	.+28     	; 0x2060 <newSort+0xac>
    2044:	de 01       	movw	r26, r28
    2046:	aa 0f       	add	r26, r26
    2048:	bb 1f       	adc	r27, r27
    204a:	aa 0f       	add	r26, r26
    204c:	bb 1f       	adc	r27, r27
    204e:	a4 58       	subi	r26, 0x84	; 132
    2050:	bd 4f       	sbci	r27, 0xFD	; 253
    2052:	12 96       	adiw	r26, 0x02	; 2
    2054:	4d 91       	ld	r20, X+
    2056:	5c 91       	ld	r21, X
    2058:	13 97       	sbiw	r26, 0x03	; 3
    205a:	4f 3f       	cpi	r20, 0xFF	; 255
    205c:	5f 4f       	sbci	r21, 0xFF	; 255
    205e:	11 f5       	brne	.+68     	; 0x20a4 <newSort+0xf0>
		{
			if (arm[1] == -1)
    2060:	31 96       	adiw	r30, 0x01	; 1
    2062:	09 f0       	breq	.+2      	; 0x2066 <newSort+0xb2>
    2064:	10 c1       	rjmp	.+544    	; 0x2286 <__stack+0x87>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2066:	66 0f       	add	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	fb 01       	movw	r30, r22
    206c:	ec 58       	subi	r30, 0x8C	; 140
    206e:	fd 4f       	sbci	r31, 0xFD	; 253
    2070:	20 81       	ld	r18, Z
    2072:	31 81       	ldd	r19, Z+1	; 0x01
    2074:	fb 01       	movw	r30, r22
    2076:	e4 57       	subi	r30, 0x74	; 116
    2078:	fd 4f       	sbci	r31, 0xFD	; 253
    207a:	40 81       	ld	r20, Z
    207c:	51 81       	ldd	r21, Z+1	; 0x01
    207e:	24 17       	cp	r18, r20
    2080:	35 07       	cpc	r19, r21
    2082:	59 f0       	breq	.+22     	; 0x209a <newSort+0xe6>
    2084:	fc 01       	movw	r30, r24
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	e4 57       	subi	r30, 0x74	; 116
    208c:	fd 4f       	sbci	r31, 0xFD	; 253
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	28 17       	cp	r18, r24
    2094:	39 07       	cpc	r19, r25
    2096:	09 f0       	breq	.+2      	; 0x209a <newSort+0xe6>
    2098:	f6 c0       	rjmp	.+492    	; 0x2286 <__stack+0x87>
					pickSort(1, a1);
    209a:	be 01       	movw	r22, r28
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	d6 d9       	rcall	.-3156   	; 0x144e <pickSort>
    20a2:	f1 c0       	rjmp	.+482    	; 0x2286 <__stack+0x87>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    20a4:	ef 3f       	cpi	r30, 0xFF	; 255
    20a6:	4f ef       	ldi	r20, 0xFF	; 255
    20a8:	f4 07       	cpc	r31, r20
    20aa:	09 f4       	brne	.+2      	; 0x20ae <newSort+0xfa>
    20ac:	52 c0       	rjmp	.+164    	; 0x2152 <newSort+0x19e>
    20ae:	d8 01       	movw	r26, r16
    20b0:	aa 0f       	add	r26, r26
    20b2:	bb 1f       	adc	r27, r27
    20b4:	aa 0f       	add	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	a4 58       	subi	r26, 0x84	; 132
    20ba:	bd 4f       	sbci	r27, 0xFD	; 253
    20bc:	4d 91       	ld	r20, X+
    20be:	5c 91       	ld	r21, X
    20c0:	4f 3f       	cpi	r20, 0xFF	; 255
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <newSort+0x114>
    20c6:	13 c1       	rjmp	.+550    	; 0x22ee <__stack+0xef>
    20c8:	d8 01       	movw	r26, r16
    20ca:	aa 0f       	add	r26, r26
    20cc:	bb 1f       	adc	r27, r27
    20ce:	aa 0f       	add	r26, r26
    20d0:	bb 1f       	adc	r27, r27
    20d2:	a4 58       	subi	r26, 0x84	; 132
    20d4:	bd 4f       	sbci	r27, 0xFD	; 253
    20d6:	12 96       	adiw	r26, 0x02	; 2
    20d8:	4d 91       	ld	r20, X+
    20da:	5c 91       	ld	r21, X
    20dc:	13 97       	sbiw	r26, 0x03	; 3
    20de:	4f 3f       	cpi	r20, 0xFF	; 255
    20e0:	5f 4f       	sbci	r21, 0xFF	; 255
    20e2:	b9 f5       	brne	.+110    	; 0x2152 <newSort+0x19e>
    20e4:	f2 c0       	rjmp	.+484    	; 0x22ca <__stack+0xcb>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    20e6:	2f 3f       	cpi	r18, 0xFF	; 255
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	09 f0       	breq	.+2      	; 0x20ee <newSort+0x13a>
    20ec:	cc c0       	rjmp	.+408    	; 0x2286 <__stack+0x87>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    20ee:	9b 01       	movw	r18, r22
    20f0:	22 0f       	add	r18, r18
    20f2:	33 1f       	adc	r19, r19
    20f4:	f9 01       	movw	r30, r18
    20f6:	ec 58       	subi	r30, 0x8C	; 140
    20f8:	fd 4f       	sbci	r31, 0xFD	; 253
    20fa:	40 81       	ld	r20, Z
    20fc:	51 81       	ldd	r21, Z+1	; 0x01
    20fe:	f9 01       	movw	r30, r18
    2100:	e4 57       	subi	r30, 0x74	; 116
    2102:	fd 4f       	sbci	r31, 0xFD	; 253
    2104:	20 81       	ld	r18, Z
    2106:	31 81       	ldd	r19, Z+1	; 0x01
    2108:	42 17       	cp	r20, r18
    210a:	53 07       	cpc	r21, r19
    210c:	09 f0       	breq	.+2      	; 0x2110 <newSort+0x15c>
    210e:	bb c0       	rjmp	.+374    	; 0x2286 <__stack+0x87>
    2110:	fc 01       	movw	r30, r24
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	e4 57       	subi	r30, 0x74	; 116
    2118:	fd 4f       	sbci	r31, 0xFD	; 253
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	48 17       	cp	r20, r24
    2120:	59 07       	cpc	r21, r25
    2122:	09 f0       	breq	.+2      	; 0x2126 <newSort+0x172>
    2124:	b0 c0       	rjmp	.+352    	; 0x2286 <__stack+0x87>
						pickSort(1, t1);
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	91 d9       	rcall	.-3294   	; 0x144e <pickSort>
    212c:	ac c0       	rjmp	.+344    	; 0x2286 <__stack+0x87>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    212e:	fb 01       	movw	r30, r22
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ec 58       	subi	r30, 0x8C	; 140
    2136:	fd 4f       	sbci	r31, 0xFD	; 253
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	09 f0       	breq	.+2      	; 0x2142 <newSort+0x18e>
    2140:	a2 c0       	rjmp	.+324    	; 0x2286 <__stack+0x87>
    2142:	2f 3f       	cpi	r18, 0xFF	; 255
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	09 f4       	brne	.+2      	; 0x214a <newSort+0x196>
    2148:	9e c0       	rjmp	.+316    	; 0x2286 <__stack+0x87>
				sortDrop(1, t1);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	38 dd       	rcall	.-1424   	; 0x1bc0 <sortDrop>
    2150:	9a c0       	rjmp	.+308    	; 0x2286 <__stack+0x87>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    2152:	2f 3f       	cpi	r18, 0xFF	; 255
    2154:	af ef       	ldi	r26, 0xFF	; 255
    2156:	3a 07       	cpc	r19, r26
    2158:	a1 f0       	breq	.+40     	; 0x2182 <newSort+0x1ce>
    215a:	db 01       	movw	r26, r22
    215c:	aa 0f       	add	r26, r26
    215e:	bb 1f       	adc	r27, r27
    2160:	ac 58       	subi	r26, 0x8C	; 140
    2162:	bd 4f       	sbci	r27, 0xFD	; 253
    2164:	8d 91       	ld	r24, X+
    2166:	9c 91       	ld	r25, X
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	31 f4       	brne	.+12     	; 0x2178 <newSort+0x1c4>
    216c:	31 96       	adiw	r30, 0x01	; 1
    216e:	21 f0       	breq	.+8      	; 0x2178 <newSort+0x1c4>
			sortDrop(1, t1);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	25 dd       	rcall	.-1462   	; 0x1bc0 <sortDrop>
    2176:	87 c0       	rjmp	.+270    	; 0x2286 <__stack+0x87>
		else if (arm[0] != -1)
			ct = arm[0];
    2178:	30 93 79 02 	sts	0x0279, r19
    217c:	20 93 78 02 	sts	0x0278, r18
    2180:	82 c0       	rjmp	.+260    	; 0x2286 <__stack+0x87>
		else ct = arm[1];
    2182:	f0 93 79 02 	sts	0x0279, r31
    2186:	e0 93 78 02 	sts	0x0278, r30
    218a:	7d c0       	rjmp	.+250    	; 0x2286 <__stack+0x87>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    218c:	a7 01       	movw	r20, r14
    218e:	44 0f       	add	r20, r20
    2190:	55 1f       	adc	r21, r21
    2192:	fa 01       	movw	r30, r20
    2194:	ec 58       	subi	r30, 0x8C	; 140
    2196:	fd 4f       	sbci	r31, 0xFD	; 253
    2198:	20 81       	ld	r18, Z
    219a:	31 81       	ldd	r19, Z+1	; 0x01
    219c:	fa 01       	movw	r30, r20
    219e:	e4 57       	subi	r30, 0x74	; 116
    21a0:	fd 4f       	sbci	r31, 0xFD	; 253
    21a2:	40 81       	ld	r20, Z
    21a4:	51 81       	ldd	r21, Z+1	; 0x01
    21a6:	24 17       	cp	r18, r20
    21a8:	35 07       	cpc	r19, r21
    21aa:	51 f0       	breq	.+20     	; 0x21c0 <newSort+0x20c>
    21ac:	fc 01       	movw	r30, r24
    21ae:	ee 0f       	add	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	e4 57       	subi	r30, 0x74	; 116
    21b4:	fd 4f       	sbci	r31, 0xFD	; 253
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	26 17       	cp	r18, r22
    21bc:	37 07       	cpc	r19, r23
    21be:	81 f4       	brne	.+32     	; 0x21e0 <newSort+0x22c>
    21c0:	2f 3f       	cpi	r18, 0xFF	; 255
    21c2:	af ef       	ldi	r26, 0xFF	; 255
    21c4:	3a 07       	cpc	r19, r26
    21c6:	71 f1       	breq	.+92     	; 0x2224 <__stack+0x25>
			ct = indicator[sort[t1]];
    21c8:	f9 01       	movw	r30, r18
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	ec 56       	subi	r30, 0x6C	; 108
    21d0:	fd 4f       	sbci	r31, 0xFD	; 253
    21d2:	80 81       	ld	r24, Z
    21d4:	91 81       	ldd	r25, Z+1	; 0x01
    21d6:	90 93 79 02 	sts	0x0279, r25
    21da:	80 93 78 02 	sts	0x0278, r24
    21de:	53 c0       	rjmp	.+166    	; 0x2286 <__stack+0x87>
		else if (sort[t1] != -1)
    21e0:	2f 3f       	cpi	r18, 0xFF	; 255
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	f9 f0       	breq	.+62     	; 0x2224 <__stack+0x25>
		{
			pickSort(0, t1);
    21e6:	b7 01       	movw	r22, r14
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	30 d9       	rcall	.-3488   	; 0x144e <pickSort>
			ct = (t1 + 1) % 2 + 4;
    21ee:	2f ef       	ldi	r18, 0xFF	; 255
    21f0:	e2 1a       	sub	r14, r18
    21f2:	f2 0a       	sbc	r15, r18
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	e4 22       	and	r14, r20
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	f4 22       	and	r15, r20
    21fc:	ff 20       	and	r15, r15
    21fe:	54 f4       	brge	.+20     	; 0x2214 <__stack+0x15>
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	e6 1a       	sub	r14, r22
    2204:	f1 08       	sbc	r15, r1
    2206:	8e ef       	ldi	r24, 0xFE	; 254
    2208:	e8 2a       	or	r14, r24
    220a:	ff 24       	eor	r15, r15
    220c:	fa 94       	dec	r15
    220e:	af ef       	ldi	r26, 0xFF	; 255
    2210:	ea 1a       	sub	r14, r26
    2212:	fa 0a       	sbc	r15, r26
    2214:	e4 e0       	ldi	r30, 0x04	; 4
    2216:	ee 0e       	add	r14, r30
    2218:	f1 1c       	adc	r15, r1
    221a:	f0 92 79 02 	sts	0x0279, r15
    221e:	e0 92 78 02 	sts	0x0278, r14
    2222:	31 c0       	rjmp	.+98     	; 0x2286 <__stack+0x87>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    2224:	f7 01       	movw	r30, r14
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	eb 5a       	subi	r30, 0xAB	; 171
    222c:	fd 4f       	sbci	r31, 0xFD	; 253
    222e:	20 81       	ld	r18, Z
    2230:	31 81       	ldd	r19, Z+1	; 0x01
    2232:	21 30       	cpi	r18, 0x01	; 1
    2234:	31 05       	cpc	r19, r1
    2236:	19 f5       	brne	.+70     	; 0x227e <__stack+0x7f>
    2238:	f7 01       	movw	r30, r14
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	e4 58       	subi	r30, 0x84	; 132
    2244:	fd 4f       	sbci	r31, 0xFD	; 253
    2246:	20 81       	ld	r18, Z
    2248:	31 81       	ldd	r19, Z+1	; 0x01
    224a:	42 17       	cp	r20, r18
    224c:	53 07       	cpc	r21, r19
    224e:	19 f0       	breq	.+6      	; 0x2256 <__stack+0x57>
    2250:	2f 3f       	cpi	r18, 0xFF	; 255
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	a1 f4       	brne	.+40     	; 0x227e <__stack+0x7f>
    2256:	f7 01       	movw	r30, r14
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	e4 58       	subi	r30, 0x84	; 132
    2262:	fd 4f       	sbci	r31, 0xFD	; 253
    2264:	22 81       	ldd	r18, Z+2	; 0x02
    2266:	33 81       	ldd	r19, Z+3	; 0x03
    2268:	42 17       	cp	r20, r18
    226a:	53 07       	cpc	r21, r19
    226c:	19 f0       	breq	.+6      	; 0x2274 <__stack+0x75>
    226e:	2f 3f       	cpi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	29 f4       	brne	.+10     	; 0x227e <__stack+0x7f>
			ct = t2;
    2274:	90 93 79 02 	sts	0x0279, r25
    2278:	80 93 78 02 	sts	0x0278, r24
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <__stack+0x87>
		else ct = t1;
    227e:	f0 92 79 02 	sts	0x0279, r15
    2282:	e0 92 78 02 	sts	0x0278, r14
	arm[0] = arm[1] = -1;
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    2286:	80 91 78 02 	lds	r24, 0x0278
    228a:	90 91 79 02 	lds	r25, 0x0279
    228e:	02 96       	adiw	r24, 0x02	; 2
    2290:	83 70       	andi	r24, 0x03	; 3
    2292:	90 78       	andi	r25, 0x80	; 128
    2294:	99 23       	and	r25, r25
    2296:	24 f4       	brge	.+8      	; 0x22a0 <__stack+0xa1>
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	8c 6f       	ori	r24, 0xFC	; 252
    229c:	9f 6f       	ori	r25, 0xFF	; 255
    229e:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    22a0:	90 93 9d 02 	sts	0x029D, r25
    22a4:	80 93 9c 02 	sts	0x029C, r24
    22a8:	2c c0       	rjmp	.+88     	; 0x2302 <__stack+0x103>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    22aa:	80 91 78 02 	lds	r24, 0x0278
    22ae:	90 91 79 02 	lds	r25, 0x0279
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	b2 d4       	rcall	.+2404   	; 0x2c1e <__divmodhi4>
    22ba:	7c 01       	movw	r14, r24
    22bc:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    22be:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    22c0:	2f 3f       	cpi	r18, 0xFF	; 255
    22c2:	4f ef       	ldi	r20, 0xFF	; 255
    22c4:	34 07       	cpc	r19, r20
    22c6:	c1 f4       	brne	.+48     	; 0x22f8 <__stack+0xf9>
    22c8:	61 cf       	rjmp	.-318    	; 0x218c <newSort+0x1d8>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    22ca:	10 93 79 02 	sts	0x0279, r17
    22ce:	00 93 78 02 	sts	0x0278, r16
			if (term[a2][0] == -1 || term[a2][1] == -1)
    22d2:	f8 01       	movw	r30, r16
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	e4 58       	subi	r30, 0x84	; 132
    22de:	fd 4f       	sbci	r31, 0xFD	; 253
    22e0:	42 81       	ldd	r20, Z+2	; 0x02
    22e2:	53 81       	ldd	r21, Z+3	; 0x03
    22e4:	4f 3f       	cpi	r20, 0xFF	; 255
    22e6:	5f 4f       	sbci	r21, 0xFF	; 255
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__stack+0xed>
    22ea:	21 cf       	rjmp	.-446    	; 0x212e <newSort+0x17a>
    22ec:	fc ce       	rjmp	.-520    	; 0x20e6 <newSort+0x132>
					pickSort(1, a1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    22ee:	10 93 79 02 	sts	0x0279, r17
    22f2:	00 93 78 02 	sts	0x0278, r16
    22f6:	f7 ce       	rjmp	.-530    	; 0x20e6 <newSort+0x132>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    22f8:	d0 93 79 02 	sts	0x0279, r29
    22fc:	c0 93 78 02 	sts	0x0278, r28
    2300:	95 ce       	rjmp	.-726    	; 0x202c <newSort+0x78>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	08 95       	ret

00002310 <sortCheck>:
void sortCheck()
{
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2328:	40 91 78 02 	lds	r20, 0x0278
    232c:	50 91 79 02 	lds	r21, 0x0279
    2330:	42 30       	cpi	r20, 0x02	; 2
    2332:	51 05       	cpc	r21, r1
    2334:	30 f4       	brcc	.+12     	; 0x2342 <sortCheck+0x32>
    2336:	80 91 49 02 	lds	r24, 0x0249
    233a:	90 91 4a 02 	lds	r25, 0x024A
    233e:	02 97       	sbiw	r24, 0x02	; 2
    2340:	79 f0       	breq	.+30     	; 0x2360 <sortCheck+0x50>
    2342:	ca 01       	movw	r24, r20
    2344:	02 97       	sbiw	r24, 0x02	; 2
    2346:	02 97       	sbiw	r24, 0x02	; 2
    2348:	80 f4       	brcc	.+32     	; 0x236a <sortCheck+0x5a>
    234a:	80 91 49 02 	lds	r24, 0x0249
    234e:	90 91 4a 02 	lds	r25, 0x024A
    2352:	89 2b       	or	r24, r25
    2354:	79 f0       	breq	.+30     	; 0x2374 <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
    2356:	01 e0       	ldi	r16, 0x01	; 1
    2358:	10 e0       	ldi	r17, 0x00	; 0
    235a:	c0 e0       	ldi	r28, 0x00	; 0
    235c:	d0 e0       	ldi	r29, 0x00	; 0
    235e:	0e c0       	rjmp	.+28     	; 0x237c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2360:	00 e0       	ldi	r16, 0x00	; 0
    2362:	10 e0       	ldi	r17, 0x00	; 0
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2364:	c1 e0       	ldi	r28, 0x01	; 1
    2366:	d0 e0       	ldi	r29, 0x00	; 0
    2368:	09 c0       	rjmp	.+18     	; 0x237c <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
    236a:	01 e0       	ldi	r16, 0x01	; 1
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	c0 e0       	ldi	r28, 0x00	; 0
    2370:	d0 e0       	ldi	r29, 0x00	; 0
    2372:	04 c0       	rjmp	.+8      	; 0x237c <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2374:	00 e0       	ldi	r16, 0x00	; 0
    2376:	10 e0       	ldi	r17, 0x00	; 0
{
	//int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2378:	c1 e0       	ldi	r28, 0x01	; 1
    237a:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    237c:	9a 01       	movw	r18, r20
    237e:	21 70       	andi	r18, 0x01	; 1
    2380:	30 78       	andi	r19, 0x80	; 128
    2382:	33 23       	and	r19, r19
    2384:	34 f4       	brge	.+12     	; 0x2392 <sortCheck+0x82>
    2386:	21 50       	subi	r18, 0x01	; 1
    2388:	31 09       	sbc	r19, r1
    238a:	2e 6f       	ori	r18, 0xFE	; 254
    238c:	3f 6f       	ori	r19, 0xFF	; 255
    238e:	2f 5f       	subi	r18, 0xFF	; 255
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	b2 2e       	mov	r11, r18
    2394:	a3 2e       	mov	r10, r19
    2396:	f9 01       	movw	r30, r18
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	ec 58       	subi	r30, 0x8C	; 140
    239e:	fd 4f       	sbci	r31, 0xFD	; 253
    23a0:	20 81       	ld	r18, Z
    23a2:	31 81       	ldd	r19, Z+1	; 0x01
    23a4:	fa 01       	movw	r30, r20
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	e4 57       	subi	r30, 0x74	; 116
    23ac:	fd 4f       	sbci	r31, 0xFD	; 253
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	28 17       	cp	r18, r24
    23b4:	39 07       	cpc	r19, r25
    23b6:	79 f0       	breq	.+30     	; 0x23d6 <sortCheck+0xc6>
    23b8:	80 91 9c 02 	lds	r24, 0x029C
    23bc:	90 91 9d 02 	lds	r25, 0x029D
    23c0:	fc 01       	movw	r30, r24
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	e4 57       	subi	r30, 0x74	; 116
    23c8:	fd 4f       	sbci	r31, 0xFD	; 253
    23ca:	40 81       	ld	r20, Z
    23cc:	51 81       	ldd	r21, Z+1	; 0x01
    23ce:	24 17       	cp	r18, r20
    23d0:	35 07       	cpc	r19, r21
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <sortCheck+0xc6>
    23d4:	a7 c0       	rjmp	.+334    	; 0x2524 <sortCheck+0x214>
	{
		if (armCount>0)
    23d6:	80 91 02 02 	lds	r24, 0x0202
    23da:	90 91 03 02 	lds	r25, 0x0203
    23de:	18 16       	cp	r1, r24
    23e0:	19 06       	cpc	r1, r25
    23e2:	0c f0       	brlt	.+2      	; 0x23e6 <sortCheck+0xd6>
    23e4:	96 c0       	rjmp	.+300    	; 0x2512 <sortCheck+0x202>
		{
			ct = indicator[sort[ct % 2]];
    23e6:	f9 01       	movw	r30, r18
    23e8:	ee 0f       	add	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	ec 56       	subi	r30, 0x6C	; 108
    23ee:	fd 4f       	sbci	r31, 0xFD	; 253
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	70 93 79 02 	sts	0x0279, r23
    23f8:	60 93 78 02 	sts	0x0278, r22
			if (arm[arm0] == -1)
    23fc:	fe 01       	movw	r30, r28
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e0 56       	subi	r30, 0x60	; 96
    2404:	fd 4f       	sbci	r31, 0xFD	; 253
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	69 f4       	brne	.+26     	; 0x2428 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    240e:	61 70       	andi	r22, 0x01	; 1
    2410:	70 78       	andi	r23, 0x80	; 128
    2412:	77 23       	and	r23, r23
    2414:	34 f4       	brge	.+12     	; 0x2422 <sortCheck+0x112>
    2416:	61 50       	subi	r22, 0x01	; 1
    2418:	71 09       	sbc	r23, r1
    241a:	6e 6f       	ori	r22, 0xFE	; 254
    241c:	7f 6f       	ori	r23, 0xFF	; 255
    241e:	6f 5f       	subi	r22, 0xFF	; 255
    2420:	7f 4f       	sbci	r23, 0xFF	; 255
    2422:	ce 01       	movw	r24, r28
    2424:	14 d8       	rcall	.-4056   	; 0x144e <pickSort>
    2426:	16 c0       	rjmp	.+44     	; 0x2454 <sortCheck+0x144>
			else if (arm[arm1] == -1)
    2428:	f8 01       	movw	r30, r16
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	e0 56       	subi	r30, 0x60	; 96
    2430:	fd 4f       	sbci	r31, 0xFD	; 253
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	69 f4       	brne	.+26     	; 0x2454 <sortCheck+0x144>
				pickSort(arm1, ct % 2);
    243a:	61 70       	andi	r22, 0x01	; 1
    243c:	70 78       	andi	r23, 0x80	; 128
    243e:	77 23       	and	r23, r23
    2440:	34 f4       	brge	.+12     	; 0x244e <sortCheck+0x13e>
    2442:	61 50       	subi	r22, 0x01	; 1
    2444:	71 09       	sbc	r23, r1
    2446:	6e 6f       	ori	r22, 0xFE	; 254
    2448:	7f 6f       	ori	r23, 0xFF	; 255
    244a:	6f 5f       	subi	r22, 0xFF	; 255
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	c8 01       	movw	r24, r16
    2450:	0e 94 27 0a 	call	0x144e	; 0x144e <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    2454:	80 91 02 02 	lds	r24, 0x0202
    2458:	90 91 03 02 	lds	r25, 0x0203
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	09 f4       	brne	.+2      	; 0x2462 <sortCheck+0x152>
    2460:	6d c1       	rjmp	.+730    	; 0x273c <sortCheck+0x42c>
    2462:	80 91 78 02 	lds	r24, 0x0278
    2466:	90 91 79 02 	lds	r25, 0x0279
    246a:	fc 01       	movw	r30, r24
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	e4 58       	subi	r30, 0x84	; 132
    2476:	fd 4f       	sbci	r31, 0xFD	; 253
    2478:	20 81       	ld	r18, Z
    247a:	31 81       	ldd	r19, Z+1	; 0x01
    247c:	2f 3f       	cpi	r18, 0xFF	; 255
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	09 f4       	brne	.+2      	; 0x2484 <sortCheck+0x174>
    2482:	5c c1       	rjmp	.+696    	; 0x273c <sortCheck+0x42c>
    2484:	fc 01       	movw	r30, r24
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	e4 58       	subi	r30, 0x84	; 132
    2490:	fd 4f       	sbci	r31, 0xFD	; 253
    2492:	22 81       	ldd	r18, Z+2	; 0x02
    2494:	33 81       	ldd	r19, Z+3	; 0x03
    2496:	2f 3f       	cpi	r18, 0xFF	; 255
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	09 f4       	brne	.+2      	; 0x249e <sortCheck+0x18e>
    249c:	4f c1       	rjmp	.+670    	; 0x273c <sortCheck+0x42c>
    249e:	9c 01       	movw	r18, r24
    24a0:	21 70       	andi	r18, 0x01	; 1
    24a2:	30 78       	andi	r19, 0x80	; 128
    24a4:	33 23       	and	r19, r19
    24a6:	34 f4       	brge	.+12     	; 0x24b4 <sortCheck+0x1a4>
    24a8:	21 50       	subi	r18, 0x01	; 1
    24aa:	31 09       	sbc	r19, r1
    24ac:	2e 6f       	ori	r18, 0xFE	; 254
    24ae:	3f 6f       	ori	r19, 0xFF	; 255
    24b0:	2f 5f       	subi	r18, 0xFF	; 255
    24b2:	3f 4f       	sbci	r19, 0xFF	; 255
    24b4:	62 2f       	mov	r22, r18
    24b6:	73 2f       	mov	r23, r19
    24b8:	f9 01       	movw	r30, r18
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	ec 58       	subi	r30, 0x8C	; 140
    24c0:	fd 4f       	sbci	r31, 0xFD	; 253
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	2f 3f       	cpi	r18, 0xFF	; 255
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	09 f0       	breq	.+2      	; 0x24ce <sortCheck+0x1be>
    24cc:	37 c1       	rjmp	.+622    	; 0x273c <sortCheck+0x42c>
			{
				if (arm[arm0] == color[ct])
    24ce:	fc 01       	movw	r30, r24
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	e4 57       	subi	r30, 0x74	; 116
    24d6:	fd 4f       	sbci	r31, 0xFD	; 253
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	fe 01       	movw	r30, r28
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	e0 56       	subi	r30, 0x60	; 96
    24e4:	fd 4f       	sbci	r31, 0xFD	; 253
    24e6:	20 81       	ld	r18, Z
    24e8:	31 81       	ldd	r19, Z+1	; 0x01
    24ea:	28 17       	cp	r18, r24
    24ec:	39 07       	cpc	r19, r25
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <sortCheck+0x1e6>
					sortDrop(arm1, ct % 2);
    24f0:	c8 01       	movw	r24, r16
    24f2:	66 db       	rcall	.-2356   	; 0x1bc0 <sortDrop>
    24f4:	23 c1       	rjmp	.+582    	; 0x273c <sortCheck+0x42c>
				else if (arm[arm1] == color[ct])
    24f6:	f8 01       	movw	r30, r16
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	e0 56       	subi	r30, 0x60	; 96
    24fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2500:	20 81       	ld	r18, Z
    2502:	31 81       	ldd	r19, Z+1	; 0x01
    2504:	82 17       	cp	r24, r18
    2506:	93 07       	cpc	r25, r19
    2508:	09 f0       	breq	.+2      	; 0x250c <sortCheck+0x1fc>
    250a:	18 c1       	rjmp	.+560    	; 0x273c <sortCheck+0x42c>
					sortDrop(arm0, ct % 2);
    250c:	ce 01       	movw	r24, r28
    250e:	58 db       	rcall	.-2384   	; 0x1bc0 <sortDrop>
    2510:	15 c1       	rjmp	.+554    	; 0x273c <sortCheck+0x42c>
			}
		}
		else ct = adj;
    2512:	80 91 9c 02 	lds	r24, 0x029C
    2516:	90 91 9d 02 	lds	r25, 0x029D
    251a:	90 93 79 02 	sts	0x0279, r25
    251e:	80 93 78 02 	sts	0x0278, r24
    2522:	0c c1       	rjmp	.+536    	; 0x273c <sortCheck+0x42c>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    2524:	fe 01       	movw	r30, r28
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	e0 56       	subi	r30, 0x60	; 96
    252c:	fd 4f       	sbci	r31, 0xFD	; 253
    252e:	01 90       	ld	r0, Z+
    2530:	f0 81       	ld	r31, Z
    2532:	e0 2d       	mov	r30, r0
    2534:	4e 17       	cp	r20, r30
    2536:	5f 07       	cpc	r21, r31
    2538:	09 f4       	brne	.+2      	; 0x253c <sortCheck+0x22c>
    253a:	8f c0       	rjmp	.+286    	; 0x265a <sortCheck+0x34a>
    253c:	d8 01       	movw	r26, r16
    253e:	aa 0f       	add	r26, r26
    2540:	bb 1f       	adc	r27, r27
    2542:	a0 56       	subi	r26, 0x60	; 96
    2544:	bd 4f       	sbci	r27, 0xFD	; 253
    2546:	8d 90       	ld	r8, X+
    2548:	9c 90       	ld	r9, X
    254a:	48 15       	cp	r20, r8
    254c:	59 05       	cpc	r21, r9
    254e:	09 f4       	brne	.+2      	; 0x2552 <sortCheck+0x242>
    2550:	84 c0       	rjmp	.+264    	; 0x265a <sortCheck+0x34a>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2552:	e0 90 02 02 	lds	r14, 0x0202
    2556:	f0 90 03 02 	lds	r15, 0x0203
    255a:	e1 14       	cp	r14, r1
    255c:	f1 04       	cpc	r15, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <sortCheck+0x252>
    2560:	4e c0       	rjmp	.+156    	; 0x25fe <sortCheck+0x2ee>
    2562:	b1 e0       	ldi	r27, 0x01	; 1
    2564:	eb 16       	cp	r14, r27
    2566:	f1 04       	cpc	r15, r1
    2568:	29 f4       	brne	.+10     	; 0x2574 <sortCheck+0x264>
    256a:	2f 3f       	cpi	r18, 0xFF	; 255
    256c:	6f ef       	ldi	r22, 0xFF	; 255
    256e:	36 07       	cpc	r19, r22
    2570:	b1 f5       	brne	.+108    	; 0x25de <sortCheck+0x2ce>
    2572:	09 c0       	rjmp	.+18     	; 0x2586 <sortCheck+0x276>
    2574:	67 01       	movw	r12, r14
    2576:	71 e0       	ldi	r23, 0x01	; 1
    2578:	c7 1a       	sub	r12, r23
    257a:	d1 08       	sbc	r13, r1
    257c:	a2 e0       	ldi	r26, 0x02	; 2
    257e:	ca 16       	cp	r12, r26
    2580:	d1 04       	cpc	r13, r1
    2582:	08 f0       	brcs	.+2      	; 0x2586 <sortCheck+0x276>
    2584:	65 c0       	rjmp	.+202    	; 0x2650 <sortCheck+0x340>
    2586:	6c 01       	movw	r12, r24
    2588:	cc 0c       	add	r12, r12
    258a:	dd 1c       	adc	r13, r13
    258c:	cc 0c       	add	r12, r12
    258e:	dd 1c       	adc	r13, r13
    2590:	b6 01       	movw	r22, r12
    2592:	64 58       	subi	r22, 0x84	; 132
    2594:	7d 4f       	sbci	r23, 0xFD	; 253
    2596:	db 01       	movw	r26, r22
    2598:	cd 90       	ld	r12, X+
    259a:	dc 90       	ld	r13, X
    259c:	4c 15       	cp	r20, r12
    259e:	5d 05       	cpc	r21, r13
    25a0:	21 f0       	breq	.+8      	; 0x25aa <sortCheck+0x29a>
    25a2:	cd 20       	and	r12, r13
    25a4:	c0 94       	com	r12
    25a6:	09 f0       	breq	.+2      	; 0x25aa <sortCheck+0x29a>
    25a8:	53 c0       	rjmp	.+166    	; 0x2650 <sortCheck+0x340>
    25aa:	6c 01       	movw	r12, r24
    25ac:	cc 0c       	add	r12, r12
    25ae:	dd 1c       	adc	r13, r13
    25b0:	cc 0c       	add	r12, r12
    25b2:	dd 1c       	adc	r13, r13
    25b4:	b6 01       	movw	r22, r12
    25b6:	64 58       	subi	r22, 0x84	; 132
    25b8:	7d 4f       	sbci	r23, 0xFD	; 253
    25ba:	db 01       	movw	r26, r22
    25bc:	12 96       	adiw	r26, 0x02	; 2
    25be:	cd 90       	ld	r12, X+
    25c0:	dc 90       	ld	r13, X
    25c2:	13 97       	sbiw	r26, 0x03	; 3
    25c4:	4c 15       	cp	r20, r12
    25c6:	5d 05       	cpc	r21, r13
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <sortCheck+0x2c2>
    25ca:	cd 20       	and	r12, r13
    25cc:	c0 94       	com	r12
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <sortCheck+0x2c2>
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <sortCheck+0x340>
		{
			if (armCount>0)
    25d2:	1e 14       	cp	r1, r14
    25d4:	1f 04       	cpc	r1, r15
    25d6:	9c f4       	brge	.+38     	; 0x25fe <sortCheck+0x2ee>
			{
				if (sort[ct % 2] != -1)
    25d8:	2f 3f       	cpi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	81 f0       	breq	.+32     	; 0x25fe <sortCheck+0x2ee>
					if (arm[arm0] == -1)
    25de:	31 96       	adiw	r30, 0x01	; 1
    25e0:	31 f4       	brne	.+12     	; 0x25ee <sortCheck+0x2de>
						pickSort(arm0, ct % 2);
    25e2:	6b 2d       	mov	r22, r11
    25e4:	7a 2d       	mov	r23, r10
    25e6:	ce 01       	movw	r24, r28
    25e8:	0e 94 27 0a 	call	0x144e	; 0x144e <pickSort>
    25ec:	08 c0       	rjmp	.+16     	; 0x25fe <sortCheck+0x2ee>
					else if (arm[arm1] == -1)
    25ee:	89 20       	and	r8, r9
    25f0:	80 94       	com	r8
    25f2:	29 f4       	brne	.+10     	; 0x25fe <sortCheck+0x2ee>
						pickSort(arm1, ct % 2);
    25f4:	6b 2d       	mov	r22, r11
    25f6:	7a 2d       	mov	r23, r10
    25f8:	c8 01       	movw	r24, r16
    25fa:	0e 94 27 0a 	call	0x144e	; 0x144e <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    25fe:	80 91 78 02 	lds	r24, 0x0278
    2602:	90 91 79 02 	lds	r25, 0x0279
    2606:	bc 01       	movw	r22, r24
    2608:	6f 5f       	subi	r22, 0xFF	; 255
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	61 70       	andi	r22, 0x01	; 1
    260e:	70 78       	andi	r23, 0x80	; 128
    2610:	77 23       	and	r23, r23
    2612:	34 f4       	brge	.+12     	; 0x2620 <sortCheck+0x310>
    2614:	61 50       	subi	r22, 0x01	; 1
    2616:	71 09       	sbc	r23, r1
    2618:	6e 6f       	ori	r22, 0xFE	; 254
    261a:	7f 6f       	ori	r23, 0xFF	; 255
    261c:	6f 5f       	subi	r22, 0xFF	; 255
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	6c 5f       	subi	r22, 0xFC	; 252
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	81 70       	andi	r24, 0x01	; 1
    2626:	90 78       	andi	r25, 0x80	; 128
    2628:	99 23       	and	r25, r25
    262a:	24 f4       	brge	.+8      	; 0x2634 <sortCheck+0x324>
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	8e 6f       	ori	r24, 0xFE	; 254
    2630:	9f 6f       	ori	r25, 0xFF	; 255
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	04 96       	adiw	r24, 0x04	; 4
    2636:	0e 94 b2 06 	call	0xd64	; 0xd64 <traverseToSort>
			newSort();
    263a:	bc dc       	rcall	.-1672   	; 0x1fb4 <newSort>
			if (ct == 4 || ct == 5)
    263c:	80 91 78 02 	lds	r24, 0x0278
    2640:	90 91 79 02 	lds	r25, 0x0279
    2644:	04 97       	sbiw	r24, 0x04	; 4
    2646:	02 97       	sbiw	r24, 0x02	; 2
    2648:	08 f0       	brcs	.+2      	; 0x264c <sortCheck+0x33c>
    264a:	89 c0       	rjmp	.+274    	; 0x275e <sortCheck+0x44e>
				newSort();
    264c:	b3 dc       	rcall	.-1690   	; 0x1fb4 <newSort>
    264e:	87 c0       	rjmp	.+270    	; 0x275e <sortCheck+0x44e>
			return;
		}
		else ct = adj;
    2650:	90 93 79 02 	sts	0x0279, r25
    2654:	80 93 78 02 	sts	0x0278, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2658:	71 c0       	rjmp	.+226    	; 0x273c <sortCheck+0x42c>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    265a:	a0 91 02 02 	lds	r26, 0x0202
    265e:	b0 91 03 02 	lds	r27, 0x0203
    2662:	10 97       	sbiw	r26, 0x00	; 0
    2664:	c1 f5       	brne	.+112    	; 0x26d6 <sortCheck+0x3c6>
    2666:	dc 01       	movw	r26, r24
    2668:	aa 0f       	add	r26, r26
    266a:	bb 1f       	adc	r27, r27
    266c:	ab 5a       	subi	r26, 0xAB	; 171
    266e:	bd 4f       	sbci	r27, 0xFD	; 253
    2670:	0d 90       	ld	r0, X+
    2672:	bc 91       	ld	r27, X
    2674:	a0 2d       	mov	r26, r0
    2676:	a1 30       	cpi	r26, 0x01	; 1
    2678:	b1 05       	cpc	r27, r1
    267a:	d9 f4       	brne	.+54     	; 0x26b2 <sortCheck+0x3a2>
    267c:	dc 01       	movw	r26, r24
    267e:	aa 0f       	add	r26, r26
    2680:	bb 1f       	adc	r27, r27
    2682:	aa 0f       	add	r26, r26
    2684:	bb 1f       	adc	r27, r27
    2686:	a4 58       	subi	r26, 0x84	; 132
    2688:	bd 4f       	sbci	r27, 0xFD	; 253
    268a:	0d 90       	ld	r0, X+
    268c:	bc 91       	ld	r27, X
    268e:	a0 2d       	mov	r26, r0
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	09 f4       	brne	.+2      	; 0x2696 <sortCheck+0x386>
    2694:	4b c0       	rjmp	.+150    	; 0x272c <sortCheck+0x41c>
    2696:	dc 01       	movw	r26, r24
    2698:	aa 0f       	add	r26, r26
    269a:	bb 1f       	adc	r27, r27
    269c:	aa 0f       	add	r26, r26
    269e:	bb 1f       	adc	r27, r27
    26a0:	a4 58       	subi	r26, 0x84	; 132
    26a2:	bd 4f       	sbci	r27, 0xFD	; 253
    26a4:	12 96       	adiw	r26, 0x02	; 2
    26a6:	8d 91       	ld	r24, X+
    26a8:	9c 91       	ld	r25, X
    26aa:	13 97       	sbiw	r26, 0x03	; 3
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	19 f4       	brne	.+6      	; 0x26b6 <sortCheck+0x3a6>
    26b0:	3d c0       	rjmp	.+122    	; 0x272c <sortCheck+0x41c>
    26b2:	ab 2b       	or	r26, r27
    26b4:	d9 f5       	brne	.+118    	; 0x272c <sortCheck+0x41c>
    26b6:	2f 3f       	cpi	r18, 0xFF	; 255
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	c1 f5       	brne	.+112    	; 0x272c <sortCheck+0x41c>
			if (arm[arm0] == color[adj])
    26bc:	4e 17       	cp	r20, r30
    26be:	5f 07       	cpc	r21, r31
    26c0:	29 f4       	brne	.+10     	; 0x26cc <sortCheck+0x3bc>
				sortDrop(arm1, ct % 2);
    26c2:	6b 2d       	mov	r22, r11
    26c4:	7a 2d       	mov	r23, r10
    26c6:	c8 01       	movw	r24, r16
    26c8:	7b da       	rcall	.-2826   	; 0x1bc0 <sortDrop>
    26ca:	30 c0       	rjmp	.+96     	; 0x272c <sortCheck+0x41c>
			else sortDrop(arm0, ct % 2);
    26cc:	6b 2d       	mov	r22, r11
    26ce:	7a 2d       	mov	r23, r10
    26d0:	ce 01       	movw	r24, r28
    26d2:	76 da       	rcall	.-2836   	; 0x1bc0 <sortDrop>
    26d4:	2b c0       	rjmp	.+86     	; 0x272c <sortCheck+0x41c>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    26d6:	11 97       	sbiw	r26, 0x01	; 1
    26d8:	49 f5       	brne	.+82     	; 0x272c <sortCheck+0x41c>
    26da:	dc 01       	movw	r26, r24
    26dc:	aa 0f       	add	r26, r26
    26de:	bb 1f       	adc	r27, r27
    26e0:	aa 0f       	add	r26, r26
    26e2:	bb 1f       	adc	r27, r27
    26e4:	a4 58       	subi	r26, 0x84	; 132
    26e6:	bd 4f       	sbci	r27, 0xFD	; 253
    26e8:	4d 91       	ld	r20, X+
    26ea:	5c 91       	ld	r21, X
    26ec:	4f 3f       	cpi	r20, 0xFF	; 255
    26ee:	5f 4f       	sbci	r21, 0xFF	; 255
    26f0:	69 f0       	breq	.+26     	; 0x270c <sortCheck+0x3fc>
    26f2:	dc 01       	movw	r26, r24
    26f4:	aa 0f       	add	r26, r26
    26f6:	bb 1f       	adc	r27, r27
    26f8:	aa 0f       	add	r26, r26
    26fa:	bb 1f       	adc	r27, r27
    26fc:	a4 58       	subi	r26, 0x84	; 132
    26fe:	bd 4f       	sbci	r27, 0xFD	; 253
    2700:	12 96       	adiw	r26, 0x02	; 2
    2702:	8d 91       	ld	r24, X+
    2704:	9c 91       	ld	r25, X
    2706:	13 97       	sbiw	r26, 0x03	; 3
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	81 f4       	brne	.+32     	; 0x272c <sortCheck+0x41c>
    270c:	2f 3f       	cpi	r18, 0xFF	; 255
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	69 f0       	breq	.+26     	; 0x272c <sortCheck+0x41c>
			if (arm[arm0] == -1)
    2712:	31 96       	adiw	r30, 0x01	; 1
    2714:	31 f4       	brne	.+12     	; 0x2722 <sortCheck+0x412>
				pickSort(arm0, ct % 2);
    2716:	6b 2d       	mov	r22, r11
    2718:	7a 2d       	mov	r23, r10
    271a:	ce 01       	movw	r24, r28
    271c:	0e 94 27 0a 	call	0x144e	; 0x144e <pickSort>
    2720:	05 c0       	rjmp	.+10     	; 0x272c <sortCheck+0x41c>
			else	pickSort(arm1, ct % 2);
    2722:	6b 2d       	mov	r22, r11
    2724:	7a 2d       	mov	r23, r10
    2726:	c8 01       	movw	r24, r16
    2728:	0e 94 27 0a 	call	0x144e	; 0x144e <pickSort>
			ct = adj;
    272c:	80 91 9c 02 	lds	r24, 0x029C
    2730:	90 91 9d 02 	lds	r25, 0x029D
    2734:	90 93 79 02 	sts	0x0279, r25
    2738:	80 93 78 02 	sts	0x0278, r24
	arm[0] = arm[1] = -1;
}
/********END COLOR*******/
int adjCount(int ct)
{
	return (ct + 2) % 4;
    273c:	80 91 78 02 	lds	r24, 0x0278
    2740:	90 91 79 02 	lds	r25, 0x0279
    2744:	02 96       	adiw	r24, 0x02	; 2
    2746:	83 70       	andi	r24, 0x03	; 3
    2748:	90 78       	andi	r25, 0x80	; 128
    274a:	99 23       	and	r25, r25
    274c:	24 f4       	brge	.+8      	; 0x2756 <sortCheck+0x446>
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	8c 6f       	ori	r24, 0xFC	; 252
    2752:	9f 6f       	ori	r25, 0xFF	; 255
    2754:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2756:	90 93 9d 02 	sts	0x029D, r25
    275a:	80 93 9c 02 	sts	0x029C, r24
}
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	ff 90       	pop	r15
    2768:	ef 90       	pop	r14
    276a:	df 90       	pop	r13
    276c:	cf 90       	pop	r12
    276e:	bf 90       	pop	r11
    2770:	af 90       	pop	r10
    2772:	9f 90       	pop	r9
    2774:	8f 90       	pop	r8
    2776:	08 95       	ret

00002778 <predict>:

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    2778:	80 91 7c 02 	lds	r24, 0x027C
    277c:	90 91 7d 02 	lds	r25, 0x027D
    2780:	20 91 8c 02 	lds	r18, 0x028C
    2784:	30 91 8d 02 	lds	r19, 0x028D
    2788:	82 17       	cp	r24, r18
    278a:	93 07       	cpc	r25, r19
    278c:	09 f0       	breq	.+2      	; 0x2790 <predict+0x18>
    278e:	5f c0       	rjmp	.+190    	; 0x284e <predict+0xd6>
    2790:	20 91 7e 02 	lds	r18, 0x027E
    2794:	30 91 7f 02 	lds	r19, 0x027F
    2798:	82 17       	cp	r24, r18
    279a:	93 07       	cpc	r25, r19
    279c:	09 f0       	breq	.+2      	; 0x27a0 <predict+0x28>
    279e:	57 c0       	rjmp	.+174    	; 0x284e <predict+0xd6>
    27a0:	80 91 80 02 	lds	r24, 0x0280
    27a4:	90 91 81 02 	lds	r25, 0x0281
    27a8:	20 91 8e 02 	lds	r18, 0x028E
    27ac:	30 91 8f 02 	lds	r19, 0x028F
    27b0:	82 17       	cp	r24, r18
    27b2:	93 07       	cpc	r25, r19
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <predict+0x40>
    27b6:	4b c0       	rjmp	.+150    	; 0x284e <predict+0xd6>
    27b8:	20 91 82 02 	lds	r18, 0x0282
    27bc:	30 91 83 02 	lds	r19, 0x0283
    27c0:	82 17       	cp	r24, r18
    27c2:	93 07       	cpc	r25, r19
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <predict+0x50>
    27c6:	43 c0       	rjmp	.+134    	; 0x284e <predict+0xd6>
    27c8:	80 91 78 02 	lds	r24, 0x0278
    27cc:	90 91 79 02 	lds	r25, 0x0279
    27d0:	fc 01       	movw	r30, r24
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	e4 58       	subi	r30, 0x84	; 132
    27dc:	fd 4f       	sbci	r31, 0xFD	; 253
    27de:	20 81       	ld	r18, Z
    27e0:	31 81       	ldd	r19, Z+1	; 0x01
    27e2:	fc 01       	movw	r30, r24
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	e4 57       	subi	r30, 0x74	; 116
    27ea:	fd 4f       	sbci	r31, 0xFD	; 253
    27ec:	40 81       	ld	r20, Z
    27ee:	51 81       	ldd	r21, Z+1	; 0x01
    27f0:	24 17       	cp	r18, r20
    27f2:	35 07       	cpc	r19, r21
    27f4:	61 f5       	brne	.+88     	; 0x284e <predict+0xd6>
    27f6:	fc 01       	movw	r30, r24
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e4 58       	subi	r30, 0x84	; 132
    2802:	fd 4f       	sbci	r31, 0xFD	; 253
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	28 17       	cp	r18, r24
    280a:	39 07       	cpc	r19, r25
    280c:	01 f5       	brne	.+64     	; 0x284e <predict+0xd6>
    280e:	80 91 74 02 	lds	r24, 0x0274
    2812:	90 91 75 02 	lds	r25, 0x0275
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	d1 f4       	brne	.+52     	; 0x284e <predict+0xd6>
    281a:	80 91 76 02 	lds	r24, 0x0276
    281e:	90 91 77 02 	lds	r25, 0x0277
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	a1 f4       	brne	.+40     	; 0x284e <predict+0xd6>
    2826:	80 91 a0 02 	lds	r24, 0x02A0
    282a:	90 91 a1 02 	lds	r25, 0x02A1
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	71 f4       	brne	.+28     	; 0x284e <predict+0xd6>
    2832:	80 91 a2 02 	lds	r24, 0x02A2
    2836:	90 91 a3 02 	lds	r25, 0x02A3
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	41 f4       	brne	.+16     	; 0x284e <predict+0xd6>
		sorted = total;
    283e:	80 91 00 02 	lds	r24, 0x0200
    2842:	90 91 01 02 	lds	r25, 0x0201
    2846:	90 93 50 02 	sts	0x0250, r25
    284a:	80 93 4f 02 	sts	0x024F, r24
    284e:	08 95       	ret

00002850 <main>:

}
int main()
{
	int i;
	init_devices();
    2850:	0e 94 41 03 	call	0x682	; 0x682 <init_devices>
	lcd_set_4bit();
    2854:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    2858:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    285c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <color_sensor_scaling>
	threshold= calcThresh();
    2860:	0e 94 ed 04 	call	0x9da	; 0x9da <calcThresh>
    2864:	90 93 5e 02 	sts	0x025E, r25
    2868:	80 93 5d 02 	sts	0x025D, r24
	setIndicatorAndColor();
    286c:	0e 94 92 07 	call	0xf24	; 0xf24 <setIndicatorAndColor>
	ct = 0; adj = 2;
    2870:	10 92 79 02 	sts	0x0279, r1
    2874:	10 92 78 02 	sts	0x0278, r1
    2878:	82 e0       	ldi	r24, 0x02	; 2
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	90 93 9d 02 	sts	0x029D, r25
    2880:	80 93 9c 02 	sts	0x029C, r24
	lcd("Begin");
    2884:	8f e3       	ldi	r24, 0x3F	; 63
    2886:	92 e0       	ldi	r25, 0x02	; 2
    2888:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <lcd>
	while (sorted<total)
    288c:	20 91 4f 02 	lds	r18, 0x024F
    2890:	30 91 50 02 	lds	r19, 0x0250
    2894:	80 91 00 02 	lds	r24, 0x0200
    2898:	90 91 01 02 	lds	r25, 0x0201
    289c:	28 17       	cp	r18, r24
    289e:	39 07       	cpc	r19, r25
    28a0:	a4 f5       	brge	.+104    	; 0x290a <main+0xba>
	{
		canDrop();
    28a2:	23 da       	rcall	.-3002   	; 0x1cea <canDrop>
		if (visitedCount == 3)
    28a4:	80 91 4d 02 	lds	r24, 0x024D
    28a8:	90 91 4e 02 	lds	r25, 0x024E
    28ac:	03 97       	sbiw	r24, 0x03	; 3
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <main+0x62>
			predict();
    28b0:	63 df       	rcall	.-314    	; 0x2778 <predict>
		if (sorted == total)
    28b2:	20 91 4f 02 	lds	r18, 0x024F
    28b6:	30 91 50 02 	lds	r19, 0x0250
    28ba:	80 91 00 02 	lds	r24, 0x0200
    28be:	90 91 01 02 	lds	r25, 0x0201
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	09 f1       	breq	.+66     	; 0x290a <main+0xba>
			break;
		pickup();
    28c8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    28cc:	80 91 78 02 	lds	r24, 0x0278
    28d0:	90 91 79 02 	lds	r25, 0x0279
    28d4:	bc 01       	movw	r22, r24
    28d6:	61 70       	andi	r22, 0x01	; 1
    28d8:	70 78       	andi	r23, 0x80	; 128
    28da:	77 23       	and	r23, r23
    28dc:	34 f4       	brge	.+12     	; 0x28ea <main+0x9a>
    28de:	61 50       	subi	r22, 0x01	; 1
    28e0:	71 09       	sbc	r23, r1
    28e2:	6e 6f       	ori	r22, 0xFE	; 254
    28e4:	7f 6f       	ori	r23, 0xFF	; 255
    28e6:	6f 5f       	subi	r22, 0xFF	; 255
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	6c 5f       	subi	r22, 0xFC	; 252
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	0e 94 b2 06 	call	0xd64	; 0xd64 <traverseToSort>
		sortCheck();
    28f2:	0e dd       	rcall	.-1508   	; 0x2310 <sortCheck>
	color_sensor_scaling();
	threshold= calcThresh();
	setIndicatorAndColor();
	ct = 0; adj = 2;
	lcd("Begin");
	while (sorted<total)
    28f4:	20 91 4f 02 	lds	r18, 0x024F
    28f8:	30 91 50 02 	lds	r19, 0x0250
    28fc:	80 91 00 02 	lds	r24, 0x0200
    2900:	90 91 01 02 	lds	r25, 0x0201
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	64 f2       	brlt	.-104    	; 0x28a2 <main+0x52>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	08 95       	ret

00002910 <__subsf3>:
    2910:	50 58       	subi	r21, 0x80	; 128

00002912 <__addsf3>:
    2912:	bb 27       	eor	r27, r27
    2914:	aa 27       	eor	r26, r26
    2916:	0e d0       	rcall	.+28     	; 0x2934 <__addsf3x>
    2918:	48 c1       	rjmp	.+656    	; 0x2baa <__fp_round>
    291a:	39 d1       	rcall	.+626    	; 0x2b8e <__fp_pscA>
    291c:	30 f0       	brcs	.+12     	; 0x292a <__addsf3+0x18>
    291e:	3e d1       	rcall	.+636    	; 0x2b9c <__fp_pscB>
    2920:	20 f0       	brcs	.+8      	; 0x292a <__addsf3+0x18>
    2922:	31 f4       	brne	.+12     	; 0x2930 <__addsf3+0x1e>
    2924:	9f 3f       	cpi	r25, 0xFF	; 255
    2926:	11 f4       	brne	.+4      	; 0x292c <__addsf3+0x1a>
    2928:	1e f4       	brtc	.+6      	; 0x2930 <__addsf3+0x1e>
    292a:	2e c1       	rjmp	.+604    	; 0x2b88 <__fp_nan>
    292c:	0e f4       	brtc	.+2      	; 0x2930 <__addsf3+0x1e>
    292e:	e0 95       	com	r30
    2930:	e7 fb       	bst	r30, 7
    2932:	24 c1       	rjmp	.+584    	; 0x2b7c <__fp_inf>

00002934 <__addsf3x>:
    2934:	e9 2f       	mov	r30, r25
    2936:	4a d1       	rcall	.+660    	; 0x2bcc <__fp_split3>
    2938:	80 f3       	brcs	.-32     	; 0x291a <__addsf3+0x8>
    293a:	ba 17       	cp	r27, r26
    293c:	62 07       	cpc	r22, r18
    293e:	73 07       	cpc	r23, r19
    2940:	84 07       	cpc	r24, r20
    2942:	95 07       	cpc	r25, r21
    2944:	18 f0       	brcs	.+6      	; 0x294c <__addsf3x+0x18>
    2946:	71 f4       	brne	.+28     	; 0x2964 <__addsf3x+0x30>
    2948:	9e f5       	brtc	.+102    	; 0x29b0 <__addsf3x+0x7c>
    294a:	62 c1       	rjmp	.+708    	; 0x2c10 <__fp_zero>
    294c:	0e f4       	brtc	.+2      	; 0x2950 <__addsf3x+0x1c>
    294e:	e0 95       	com	r30
    2950:	0b 2e       	mov	r0, r27
    2952:	ba 2f       	mov	r27, r26
    2954:	a0 2d       	mov	r26, r0
    2956:	0b 01       	movw	r0, r22
    2958:	b9 01       	movw	r22, r18
    295a:	90 01       	movw	r18, r0
    295c:	0c 01       	movw	r0, r24
    295e:	ca 01       	movw	r24, r20
    2960:	a0 01       	movw	r20, r0
    2962:	11 24       	eor	r1, r1
    2964:	ff 27       	eor	r31, r31
    2966:	59 1b       	sub	r21, r25
    2968:	99 f0       	breq	.+38     	; 0x2990 <__addsf3x+0x5c>
    296a:	59 3f       	cpi	r21, 0xF9	; 249
    296c:	50 f4       	brcc	.+20     	; 0x2982 <__addsf3x+0x4e>
    296e:	50 3e       	cpi	r21, 0xE0	; 224
    2970:	68 f1       	brcs	.+90     	; 0x29cc <__addsf3x+0x98>
    2972:	1a 16       	cp	r1, r26
    2974:	f0 40       	sbci	r31, 0x00	; 0
    2976:	a2 2f       	mov	r26, r18
    2978:	23 2f       	mov	r18, r19
    297a:	34 2f       	mov	r19, r20
    297c:	44 27       	eor	r20, r20
    297e:	58 5f       	subi	r21, 0xF8	; 248
    2980:	f3 cf       	rjmp	.-26     	; 0x2968 <__addsf3x+0x34>
    2982:	46 95       	lsr	r20
    2984:	37 95       	ror	r19
    2986:	27 95       	ror	r18
    2988:	a7 95       	ror	r26
    298a:	f0 40       	sbci	r31, 0x00	; 0
    298c:	53 95       	inc	r21
    298e:	c9 f7       	brne	.-14     	; 0x2982 <__addsf3x+0x4e>
    2990:	7e f4       	brtc	.+30     	; 0x29b0 <__addsf3x+0x7c>
    2992:	1f 16       	cp	r1, r31
    2994:	ba 0b       	sbc	r27, r26
    2996:	62 0b       	sbc	r22, r18
    2998:	73 0b       	sbc	r23, r19
    299a:	84 0b       	sbc	r24, r20
    299c:	ba f0       	brmi	.+46     	; 0x29cc <__addsf3x+0x98>
    299e:	91 50       	subi	r25, 0x01	; 1
    29a0:	a1 f0       	breq	.+40     	; 0x29ca <__addsf3x+0x96>
    29a2:	ff 0f       	add	r31, r31
    29a4:	bb 1f       	adc	r27, r27
    29a6:	66 1f       	adc	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	c2 f7       	brpl	.-16     	; 0x299e <__addsf3x+0x6a>
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <__addsf3x+0x98>
    29b0:	ba 0f       	add	r27, r26
    29b2:	62 1f       	adc	r22, r18
    29b4:	73 1f       	adc	r23, r19
    29b6:	84 1f       	adc	r24, r20
    29b8:	48 f4       	brcc	.+18     	; 0x29cc <__addsf3x+0x98>
    29ba:	87 95       	ror	r24
    29bc:	77 95       	ror	r23
    29be:	67 95       	ror	r22
    29c0:	b7 95       	ror	r27
    29c2:	f7 95       	ror	r31
    29c4:	9e 3f       	cpi	r25, 0xFE	; 254
    29c6:	08 f0       	brcs	.+2      	; 0x29ca <__addsf3x+0x96>
    29c8:	b3 cf       	rjmp	.-154    	; 0x2930 <__addsf3+0x1e>
    29ca:	93 95       	inc	r25
    29cc:	88 0f       	add	r24, r24
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <__addsf3x+0x9e>
    29d0:	99 27       	eor	r25, r25
    29d2:	ee 0f       	add	r30, r30
    29d4:	97 95       	ror	r25
    29d6:	87 95       	ror	r24
    29d8:	08 95       	ret

000029da <__divsf3>:
    29da:	0c d0       	rcall	.+24     	; 0x29f4 <__divsf3x>
    29dc:	e6 c0       	rjmp	.+460    	; 0x2baa <__fp_round>
    29de:	de d0       	rcall	.+444    	; 0x2b9c <__fp_pscB>
    29e0:	40 f0       	brcs	.+16     	; 0x29f2 <__divsf3+0x18>
    29e2:	d5 d0       	rcall	.+426    	; 0x2b8e <__fp_pscA>
    29e4:	30 f0       	brcs	.+12     	; 0x29f2 <__divsf3+0x18>
    29e6:	21 f4       	brne	.+8      	; 0x29f0 <__divsf3+0x16>
    29e8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ea:	19 f0       	breq	.+6      	; 0x29f2 <__divsf3+0x18>
    29ec:	c7 c0       	rjmp	.+398    	; 0x2b7c <__fp_inf>
    29ee:	51 11       	cpse	r21, r1
    29f0:	10 c1       	rjmp	.+544    	; 0x2c12 <__fp_szero>
    29f2:	ca c0       	rjmp	.+404    	; 0x2b88 <__fp_nan>

000029f4 <__divsf3x>:
    29f4:	eb d0       	rcall	.+470    	; 0x2bcc <__fp_split3>
    29f6:	98 f3       	brcs	.-26     	; 0x29de <__divsf3+0x4>

000029f8 <__divsf3_pse>:
    29f8:	99 23       	and	r25, r25
    29fa:	c9 f3       	breq	.-14     	; 0x29ee <__divsf3+0x14>
    29fc:	55 23       	and	r21, r21
    29fe:	b1 f3       	breq	.-20     	; 0x29ec <__divsf3+0x12>
    2a00:	95 1b       	sub	r25, r21
    2a02:	55 0b       	sbc	r21, r21
    2a04:	bb 27       	eor	r27, r27
    2a06:	aa 27       	eor	r26, r26
    2a08:	62 17       	cp	r22, r18
    2a0a:	73 07       	cpc	r23, r19
    2a0c:	84 07       	cpc	r24, r20
    2a0e:	38 f0       	brcs	.+14     	; 0x2a1e <__divsf3_pse+0x26>
    2a10:	9f 5f       	subi	r25, 0xFF	; 255
    2a12:	5f 4f       	sbci	r21, 0xFF	; 255
    2a14:	22 0f       	add	r18, r18
    2a16:	33 1f       	adc	r19, r19
    2a18:	44 1f       	adc	r20, r20
    2a1a:	aa 1f       	adc	r26, r26
    2a1c:	a9 f3       	breq	.-22     	; 0x2a08 <__divsf3_pse+0x10>
    2a1e:	33 d0       	rcall	.+102    	; 0x2a86 <__divsf3_pse+0x8e>
    2a20:	0e 2e       	mov	r0, r30
    2a22:	3a f0       	brmi	.+14     	; 0x2a32 <__divsf3_pse+0x3a>
    2a24:	e0 e8       	ldi	r30, 0x80	; 128
    2a26:	30 d0       	rcall	.+96     	; 0x2a88 <__divsf3_pse+0x90>
    2a28:	91 50       	subi	r25, 0x01	; 1
    2a2a:	50 40       	sbci	r21, 0x00	; 0
    2a2c:	e6 95       	lsr	r30
    2a2e:	00 1c       	adc	r0, r0
    2a30:	ca f7       	brpl	.-14     	; 0x2a24 <__divsf3_pse+0x2c>
    2a32:	29 d0       	rcall	.+82     	; 0x2a86 <__divsf3_pse+0x8e>
    2a34:	fe 2f       	mov	r31, r30
    2a36:	27 d0       	rcall	.+78     	; 0x2a86 <__divsf3_pse+0x8e>
    2a38:	66 0f       	add	r22, r22
    2a3a:	77 1f       	adc	r23, r23
    2a3c:	88 1f       	adc	r24, r24
    2a3e:	bb 1f       	adc	r27, r27
    2a40:	26 17       	cp	r18, r22
    2a42:	37 07       	cpc	r19, r23
    2a44:	48 07       	cpc	r20, r24
    2a46:	ab 07       	cpc	r26, r27
    2a48:	b0 e8       	ldi	r27, 0x80	; 128
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <__divsf3_pse+0x56>
    2a4c:	bb 0b       	sbc	r27, r27
    2a4e:	80 2d       	mov	r24, r0
    2a50:	bf 01       	movw	r22, r30
    2a52:	ff 27       	eor	r31, r31
    2a54:	93 58       	subi	r25, 0x83	; 131
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	2a f0       	brmi	.+10     	; 0x2a64 <__divsf3_pse+0x6c>
    2a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a5c:	51 05       	cpc	r21, r1
    2a5e:	68 f0       	brcs	.+26     	; 0x2a7a <__divsf3_pse+0x82>
    2a60:	8d c0       	rjmp	.+282    	; 0x2b7c <__fp_inf>
    2a62:	d7 c0       	rjmp	.+430    	; 0x2c12 <__fp_szero>
    2a64:	5f 3f       	cpi	r21, 0xFF	; 255
    2a66:	ec f3       	brlt	.-6      	; 0x2a62 <__divsf3_pse+0x6a>
    2a68:	98 3e       	cpi	r25, 0xE8	; 232
    2a6a:	dc f3       	brlt	.-10     	; 0x2a62 <__divsf3_pse+0x6a>
    2a6c:	86 95       	lsr	r24
    2a6e:	77 95       	ror	r23
    2a70:	67 95       	ror	r22
    2a72:	b7 95       	ror	r27
    2a74:	f7 95       	ror	r31
    2a76:	9f 5f       	subi	r25, 0xFF	; 255
    2a78:	c9 f7       	brne	.-14     	; 0x2a6c <__divsf3_pse+0x74>
    2a7a:	88 0f       	add	r24, r24
    2a7c:	91 1d       	adc	r25, r1
    2a7e:	96 95       	lsr	r25
    2a80:	87 95       	ror	r24
    2a82:	97 f9       	bld	r25, 7
    2a84:	08 95       	ret
    2a86:	e1 e0       	ldi	r30, 0x01	; 1
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	88 1f       	adc	r24, r24
    2a8e:	bb 1f       	adc	r27, r27
    2a90:	62 17       	cp	r22, r18
    2a92:	73 07       	cpc	r23, r19
    2a94:	84 07       	cpc	r24, r20
    2a96:	ba 07       	cpc	r27, r26
    2a98:	20 f0       	brcs	.+8      	; 0x2aa2 <__divsf3_pse+0xaa>
    2a9a:	62 1b       	sub	r22, r18
    2a9c:	73 0b       	sbc	r23, r19
    2a9e:	84 0b       	sbc	r24, r20
    2aa0:	ba 0b       	sbc	r27, r26
    2aa2:	ee 1f       	adc	r30, r30
    2aa4:	88 f7       	brcc	.-30     	; 0x2a88 <__divsf3_pse+0x90>
    2aa6:	e0 95       	com	r30
    2aa8:	08 95       	ret

00002aaa <__fixunssfsi>:
    2aaa:	98 d0       	rcall	.+304    	; 0x2bdc <__fp_splitA>
    2aac:	88 f0       	brcs	.+34     	; 0x2ad0 <__fixunssfsi+0x26>
    2aae:	9f 57       	subi	r25, 0x7F	; 127
    2ab0:	90 f0       	brcs	.+36     	; 0x2ad6 <__fixunssfsi+0x2c>
    2ab2:	b9 2f       	mov	r27, r25
    2ab4:	99 27       	eor	r25, r25
    2ab6:	b7 51       	subi	r27, 0x17	; 23
    2ab8:	a0 f0       	brcs	.+40     	; 0x2ae2 <__fixunssfsi+0x38>
    2aba:	d1 f0       	breq	.+52     	; 0x2af0 <__fixunssfsi+0x46>
    2abc:	66 0f       	add	r22, r22
    2abe:	77 1f       	adc	r23, r23
    2ac0:	88 1f       	adc	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	1a f0       	brmi	.+6      	; 0x2acc <__fixunssfsi+0x22>
    2ac6:	ba 95       	dec	r27
    2ac8:	c9 f7       	brne	.-14     	; 0x2abc <__fixunssfsi+0x12>
    2aca:	12 c0       	rjmp	.+36     	; 0x2af0 <__fixunssfsi+0x46>
    2acc:	b1 30       	cpi	r27, 0x01	; 1
    2ace:	81 f0       	breq	.+32     	; 0x2af0 <__fixunssfsi+0x46>
    2ad0:	9f d0       	rcall	.+318    	; 0x2c10 <__fp_zero>
    2ad2:	b1 e0       	ldi	r27, 0x01	; 1
    2ad4:	08 95       	ret
    2ad6:	9c c0       	rjmp	.+312    	; 0x2c10 <__fp_zero>
    2ad8:	67 2f       	mov	r22, r23
    2ada:	78 2f       	mov	r23, r24
    2adc:	88 27       	eor	r24, r24
    2ade:	b8 5f       	subi	r27, 0xF8	; 248
    2ae0:	39 f0       	breq	.+14     	; 0x2af0 <__fixunssfsi+0x46>
    2ae2:	b9 3f       	cpi	r27, 0xF9	; 249
    2ae4:	cc f3       	brlt	.-14     	; 0x2ad8 <__fixunssfsi+0x2e>
    2ae6:	86 95       	lsr	r24
    2ae8:	77 95       	ror	r23
    2aea:	67 95       	ror	r22
    2aec:	b3 95       	inc	r27
    2aee:	d9 f7       	brne	.-10     	; 0x2ae6 <__fixunssfsi+0x3c>
    2af0:	3e f4       	brtc	.+14     	; 0x2b00 <__fixunssfsi+0x56>
    2af2:	90 95       	com	r25
    2af4:	80 95       	com	r24
    2af6:	70 95       	com	r23
    2af8:	61 95       	neg	r22
    2afa:	7f 4f       	sbci	r23, 0xFF	; 255
    2afc:	8f 4f       	sbci	r24, 0xFF	; 255
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
    2b00:	08 95       	ret

00002b02 <__floatunsisf>:
    2b02:	e8 94       	clt
    2b04:	09 c0       	rjmp	.+18     	; 0x2b18 <__floatsisf+0x12>

00002b06 <__floatsisf>:
    2b06:	97 fb       	bst	r25, 7
    2b08:	3e f4       	brtc	.+14     	; 0x2b18 <__floatsisf+0x12>
    2b0a:	90 95       	com	r25
    2b0c:	80 95       	com	r24
    2b0e:	70 95       	com	r23
    2b10:	61 95       	neg	r22
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	8f 4f       	sbci	r24, 0xFF	; 255
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	99 23       	and	r25, r25
    2b1a:	a9 f0       	breq	.+42     	; 0x2b46 <__floatsisf+0x40>
    2b1c:	f9 2f       	mov	r31, r25
    2b1e:	96 e9       	ldi	r25, 0x96	; 150
    2b20:	bb 27       	eor	r27, r27
    2b22:	93 95       	inc	r25
    2b24:	f6 95       	lsr	r31
    2b26:	87 95       	ror	r24
    2b28:	77 95       	ror	r23
    2b2a:	67 95       	ror	r22
    2b2c:	b7 95       	ror	r27
    2b2e:	f1 11       	cpse	r31, r1
    2b30:	f8 cf       	rjmp	.-16     	; 0x2b22 <__floatsisf+0x1c>
    2b32:	fa f4       	brpl	.+62     	; 0x2b72 <__floatsisf+0x6c>
    2b34:	bb 0f       	add	r27, r27
    2b36:	11 f4       	brne	.+4      	; 0x2b3c <__floatsisf+0x36>
    2b38:	60 ff       	sbrs	r22, 0
    2b3a:	1b c0       	rjmp	.+54     	; 0x2b72 <__floatsisf+0x6c>
    2b3c:	6f 5f       	subi	r22, 0xFF	; 255
    2b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b40:	8f 4f       	sbci	r24, 0xFF	; 255
    2b42:	9f 4f       	sbci	r25, 0xFF	; 255
    2b44:	16 c0       	rjmp	.+44     	; 0x2b72 <__floatsisf+0x6c>
    2b46:	88 23       	and	r24, r24
    2b48:	11 f0       	breq	.+4      	; 0x2b4e <__floatsisf+0x48>
    2b4a:	96 e9       	ldi	r25, 0x96	; 150
    2b4c:	11 c0       	rjmp	.+34     	; 0x2b70 <__floatsisf+0x6a>
    2b4e:	77 23       	and	r23, r23
    2b50:	21 f0       	breq	.+8      	; 0x2b5a <__floatsisf+0x54>
    2b52:	9e e8       	ldi	r25, 0x8E	; 142
    2b54:	87 2f       	mov	r24, r23
    2b56:	76 2f       	mov	r23, r22
    2b58:	05 c0       	rjmp	.+10     	; 0x2b64 <__floatsisf+0x5e>
    2b5a:	66 23       	and	r22, r22
    2b5c:	71 f0       	breq	.+28     	; 0x2b7a <__floatsisf+0x74>
    2b5e:	96 e8       	ldi	r25, 0x86	; 134
    2b60:	86 2f       	mov	r24, r22
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	2a f0       	brmi	.+10     	; 0x2b72 <__floatsisf+0x6c>
    2b68:	9a 95       	dec	r25
    2b6a:	66 0f       	add	r22, r22
    2b6c:	77 1f       	adc	r23, r23
    2b6e:	88 1f       	adc	r24, r24
    2b70:	da f7       	brpl	.-10     	; 0x2b68 <__floatsisf+0x62>
    2b72:	88 0f       	add	r24, r24
    2b74:	96 95       	lsr	r25
    2b76:	87 95       	ror	r24
    2b78:	97 f9       	bld	r25, 7
    2b7a:	08 95       	ret

00002b7c <__fp_inf>:
    2b7c:	97 f9       	bld	r25, 7
    2b7e:	9f 67       	ori	r25, 0x7F	; 127
    2b80:	80 e8       	ldi	r24, 0x80	; 128
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	08 95       	ret

00002b88 <__fp_nan>:
    2b88:	9f ef       	ldi	r25, 0xFF	; 255
    2b8a:	80 ec       	ldi	r24, 0xC0	; 192
    2b8c:	08 95       	ret

00002b8e <__fp_pscA>:
    2b8e:	00 24       	eor	r0, r0
    2b90:	0a 94       	dec	r0
    2b92:	16 16       	cp	r1, r22
    2b94:	17 06       	cpc	r1, r23
    2b96:	18 06       	cpc	r1, r24
    2b98:	09 06       	cpc	r0, r25
    2b9a:	08 95       	ret

00002b9c <__fp_pscB>:
    2b9c:	00 24       	eor	r0, r0
    2b9e:	0a 94       	dec	r0
    2ba0:	12 16       	cp	r1, r18
    2ba2:	13 06       	cpc	r1, r19
    2ba4:	14 06       	cpc	r1, r20
    2ba6:	05 06       	cpc	r0, r21
    2ba8:	08 95       	ret

00002baa <__fp_round>:
    2baa:	09 2e       	mov	r0, r25
    2bac:	03 94       	inc	r0
    2bae:	00 0c       	add	r0, r0
    2bb0:	11 f4       	brne	.+4      	; 0x2bb6 <__fp_round+0xc>
    2bb2:	88 23       	and	r24, r24
    2bb4:	52 f0       	brmi	.+20     	; 0x2bca <__fp_round+0x20>
    2bb6:	bb 0f       	add	r27, r27
    2bb8:	40 f4       	brcc	.+16     	; 0x2bca <__fp_round+0x20>
    2bba:	bf 2b       	or	r27, r31
    2bbc:	11 f4       	brne	.+4      	; 0x2bc2 <__fp_round+0x18>
    2bbe:	60 ff       	sbrs	r22, 0
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <__fp_round+0x20>
    2bc2:	6f 5f       	subi	r22, 0xFF	; 255
    2bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	08 95       	ret

00002bcc <__fp_split3>:
    2bcc:	57 fd       	sbrc	r21, 7
    2bce:	90 58       	subi	r25, 0x80	; 128
    2bd0:	44 0f       	add	r20, r20
    2bd2:	55 1f       	adc	r21, r21
    2bd4:	59 f0       	breq	.+22     	; 0x2bec <__fp_splitA+0x10>
    2bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd8:	71 f0       	breq	.+28     	; 0x2bf6 <__fp_splitA+0x1a>
    2bda:	47 95       	ror	r20

00002bdc <__fp_splitA>:
    2bdc:	88 0f       	add	r24, r24
    2bde:	97 fb       	bst	r25, 7
    2be0:	99 1f       	adc	r25, r25
    2be2:	61 f0       	breq	.+24     	; 0x2bfc <__fp_splitA+0x20>
    2be4:	9f 3f       	cpi	r25, 0xFF	; 255
    2be6:	79 f0       	breq	.+30     	; 0x2c06 <__fp_splitA+0x2a>
    2be8:	87 95       	ror	r24
    2bea:	08 95       	ret
    2bec:	12 16       	cp	r1, r18
    2bee:	13 06       	cpc	r1, r19
    2bf0:	14 06       	cpc	r1, r20
    2bf2:	55 1f       	adc	r21, r21
    2bf4:	f2 cf       	rjmp	.-28     	; 0x2bda <__fp_split3+0xe>
    2bf6:	46 95       	lsr	r20
    2bf8:	f1 df       	rcall	.-30     	; 0x2bdc <__fp_splitA>
    2bfa:	08 c0       	rjmp	.+16     	; 0x2c0c <__fp_splitA+0x30>
    2bfc:	16 16       	cp	r1, r22
    2bfe:	17 06       	cpc	r1, r23
    2c00:	18 06       	cpc	r1, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	f1 cf       	rjmp	.-30     	; 0x2be8 <__fp_splitA+0xc>
    2c06:	86 95       	lsr	r24
    2c08:	71 05       	cpc	r23, r1
    2c0a:	61 05       	cpc	r22, r1
    2c0c:	08 94       	sec
    2c0e:	08 95       	ret

00002c10 <__fp_zero>:
    2c10:	e8 94       	clt

00002c12 <__fp_szero>:
    2c12:	bb 27       	eor	r27, r27
    2c14:	66 27       	eor	r22, r22
    2c16:	77 27       	eor	r23, r23
    2c18:	cb 01       	movw	r24, r22
    2c1a:	97 f9       	bld	r25, 7
    2c1c:	08 95       	ret

00002c1e <__divmodhi4>:
    2c1e:	97 fb       	bst	r25, 7
    2c20:	07 2e       	mov	r0, r23
    2c22:	16 f4       	brtc	.+4      	; 0x2c28 <__divmodhi4+0xa>
    2c24:	00 94       	com	r0
    2c26:	06 d0       	rcall	.+12     	; 0x2c34 <__divmodhi4_neg1>
    2c28:	77 fd       	sbrc	r23, 7
    2c2a:	08 d0       	rcall	.+16     	; 0x2c3c <__divmodhi4_neg2>
    2c2c:	1a d0       	rcall	.+52     	; 0x2c62 <__udivmodhi4>
    2c2e:	07 fc       	sbrc	r0, 7
    2c30:	05 d0       	rcall	.+10     	; 0x2c3c <__divmodhi4_neg2>
    2c32:	3e f4       	brtc	.+14     	; 0x2c42 <__divmodhi4_exit>

00002c34 <__divmodhi4_neg1>:
    2c34:	90 95       	com	r25
    2c36:	81 95       	neg	r24
    2c38:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3a:	08 95       	ret

00002c3c <__divmodhi4_neg2>:
    2c3c:	70 95       	com	r23
    2c3e:	61 95       	neg	r22
    2c40:	7f 4f       	sbci	r23, 0xFF	; 255

00002c42 <__divmodhi4_exit>:
    2c42:	08 95       	ret

00002c44 <__umulhisi3>:
    2c44:	a2 9f       	mul	r26, r18
    2c46:	b0 01       	movw	r22, r0
    2c48:	b3 9f       	mul	r27, r19
    2c4a:	c0 01       	movw	r24, r0
    2c4c:	a3 9f       	mul	r26, r19
    2c4e:	70 0d       	add	r23, r0
    2c50:	81 1d       	adc	r24, r1
    2c52:	11 24       	eor	r1, r1
    2c54:	91 1d       	adc	r25, r1
    2c56:	b2 9f       	mul	r27, r18
    2c58:	70 0d       	add	r23, r0
    2c5a:	81 1d       	adc	r24, r1
    2c5c:	11 24       	eor	r1, r1
    2c5e:	91 1d       	adc	r25, r1
    2c60:	08 95       	ret

00002c62 <__udivmodhi4>:
    2c62:	aa 1b       	sub	r26, r26
    2c64:	bb 1b       	sub	r27, r27
    2c66:	51 e1       	ldi	r21, 0x11	; 17
    2c68:	07 c0       	rjmp	.+14     	; 0x2c78 <__udivmodhi4_ep>

00002c6a <__udivmodhi4_loop>:
    2c6a:	aa 1f       	adc	r26, r26
    2c6c:	bb 1f       	adc	r27, r27
    2c6e:	a6 17       	cp	r26, r22
    2c70:	b7 07       	cpc	r27, r23
    2c72:	10 f0       	brcs	.+4      	; 0x2c78 <__udivmodhi4_ep>
    2c74:	a6 1b       	sub	r26, r22
    2c76:	b7 0b       	sbc	r27, r23

00002c78 <__udivmodhi4_ep>:
    2c78:	88 1f       	adc	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	5a 95       	dec	r21
    2c7e:	a9 f7       	brne	.-22     	; 0x2c6a <__udivmodhi4_loop>
    2c80:	80 95       	com	r24
    2c82:	90 95       	com	r25
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	08 95       	ret

00002c8a <_exit>:
    2c8a:	f8 94       	cli

00002c8c <__stop_program>:
    2c8c:	ff cf       	rjmp	.-2      	; 0x2c8c <__stop_program>
