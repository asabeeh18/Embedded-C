
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000a8a  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000024a  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000703  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000194  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002ef  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000572  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000100  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	37 d0       	rcall	.+110    	; 0x174 <main>
 106:	6b c0       	rjmp	.+214    	; 0x1de <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <servo1_pin_config>:
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
 OCR1CL = 0xFF; //Servo 3 off
 10a:	25 9a       	sbi	0x04, 5	; 4
 10c:	2d 9a       	sbi	0x05, 5	; 5
 10e:	08 95       	ret

00000110 <servo2_pin_config>:
 110:	26 9a       	sbi	0x04, 6	; 4
 112:	2e 9a       	sbi	0x05, 6	; 5
 114:	08 95       	ret

00000116 <servo3_pin_config>:
 116:	27 9a       	sbi	0x04, 7	; 4
 118:	2f 9a       	sbi	0x05, 7	; 5
 11a:	08 95       	ret

0000011c <port_init>:
 11c:	f6 df       	rcall	.-20     	; 0x10a <servo1_pin_config>
 11e:	f8 df       	rcall	.-16     	; 0x110 <servo2_pin_config>
 120:	fa cf       	rjmp	.-12     	; 0x116 <servo3_pin_config>
 122:	08 95       	ret

00000124 <timer1_init>:
 124:	e1 e8       	ldi	r30, 0x81	; 129
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	10 82       	st	Z, r1
 12a:	8c ef       	ldi	r24, 0xFC	; 252
 12c:	80 93 85 00 	sts	0x0085, r24
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 84 00 	sts	0x0084, r24
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	90 93 89 00 	sts	0x0089, r25
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	80 93 88 00 	sts	0x0088, r24
 142:	90 93 8b 00 	sts	0x008B, r25
 146:	80 93 8a 00 	sts	0x008A, r24
 14a:	90 93 8d 00 	sts	0x008D, r25
 14e:	80 93 8c 00 	sts	0x008C, r24
 152:	90 93 87 00 	sts	0x0087, r25
 156:	80 93 86 00 	sts	0x0086, r24
 15a:	8b ea       	ldi	r24, 0xAB	; 171
 15c:	80 93 80 00 	sts	0x0080, r24
 160:	10 92 82 00 	sts	0x0082, r1
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <init_devices>:
 16a:	f8 94       	cli
 16c:	d7 df       	rcall	.-82     	; 0x11c <port_init>
 16e:	da df       	rcall	.-76     	; 0x124 <timer1_init>
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <main>:

//Main function
int main(void)
{
 unsigned char i = 0;
 init_devices();
 174:	fa df       	rcall	.-12     	; 0x16a <init_devices>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 176:	a9 e8       	ldi	r26, 0x89	; 137
 178:	b0 e0       	ldi	r27, 0x00	; 0
 OCR1AL = (unsigned char) PositionPanServo;
 17a:	e8 e8       	ldi	r30, 0x88	; 136
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	23 e2       	ldi	r18, 0x23	; 35
 180:	8b e2       	ldi	r24, 0x2B	; 43
 182:	93 e3       	ldi	r25, 0x33	; 51
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 184:	1c 92       	st	X, r1
 OCR1AL = (unsigned char) PositionPanServo;
 186:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	3f ef       	ldi	r19, 0xFF	; 255
 18a:	4f ef       	ldi	r20, 0xFF	; 255
 18c:	5c e2       	ldi	r21, 0x2C	; 44
 18e:	31 50       	subi	r19, 0x01	; 1
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	50 40       	sbci	r21, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x1a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x24>
 198:	00 00       	nop
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 19a:	1c 92       	st	X, r1
 OCR1AL = (unsigned char) PositionPanServo;
 19c:	80 83       	st	Z, r24
 19e:	3f ef       	ldi	r19, 0xFF	; 255
 1a0:	4f ef       	ldi	r20, 0xFF	; 255
 1a2:	5c e2       	ldi	r21, 0x2C	; 44
 1a4:	31 50       	subi	r19, 0x01	; 1
 1a6:	40 40       	sbci	r20, 0x00	; 0
 1a8:	50 40       	sbci	r21, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x30>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x3a>
 1ae:	00 00       	nop
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 1b0:	1c 92       	st	X, r1
 OCR1AL = (unsigned char) PositionPanServo;
 1b2:	90 83       	st	Z, r25
 1b4:	3f ef       	ldi	r19, 0xFF	; 255
 1b6:	4f ef       	ldi	r20, 0xFF	; 255
 1b8:	5c e2       	ldi	r21, 0x2C	; 44
 1ba:	31 50       	subi	r19, 0x01	; 1
 1bc:	40 40       	sbci	r20, 0x00	; 0
 1be:	50 40       	sbci	r21, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x46>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x50>
 1c4:	00 00       	nop
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 1c6:	1c 92       	st	X, r1
 OCR1AL = (unsigned char) PositionPanServo;
 1c8:	80 83       	st	Z, r24
 1ca:	3f ef       	ldi	r19, 0xFF	; 255
 1cc:	4f ef       	ldi	r20, 0xFF	; 255
 1ce:	5c e2       	ldi	r21, 0x2C	; 44
 1d0:	31 50       	subi	r19, 0x01	; 1
 1d2:	40 40       	sbci	r20, 0x00	; 0
 1d4:	50 40       	sbci	r21, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x5c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x66>
 1da:	00 00       	nop
 1dc:	d3 cf       	rjmp	.-90     	; 0x184 <main+0x10>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
