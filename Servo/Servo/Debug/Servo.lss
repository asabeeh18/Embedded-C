
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000100  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000e65  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000024a  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000008bd  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000214  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000339  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000007f3  00000000  00000000  00002291  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000150  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e5       	ldi	r30, 0x52	; 82
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	41 d0       	rcall	.+130    	; 0x1a2 <main>
 120:	96 c0       	rjmp	.+300    	; 0x24e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <servo1_pin_config>:
//	armCount++;
	elevate(0, side);//lower
	open(side);
	elevate(90, side);//mid
	close(side);
}
 124:	25 9a       	sbi	0x04, 5	; 4
 126:	2d 9a       	sbi	0x05, 5	; 5
 128:	08 95       	ret

0000012a <servo2_pin_config>:
 12a:	26 9a       	sbi	0x04, 6	; 4
 12c:	2e 9a       	sbi	0x05, 6	; 5
 12e:	08 95       	ret

00000130 <servo3_pin_config>:
 130:	27 9a       	sbi	0x04, 7	; 4
 132:	2f 9a       	sbi	0x05, 7	; 5
 134:	08 95       	ret

00000136 <port_init>:
 136:	f6 df       	rcall	.-20     	; 0x124 <servo1_pin_config>
 138:	f8 df       	rcall	.-16     	; 0x12a <servo2_pin_config>
 13a:	fa cf       	rjmp	.-12     	; 0x130 <servo3_pin_config>
 13c:	08 95       	ret

0000013e <timer1_init>:
 13e:	e1 e8       	ldi	r30, 0x81	; 129
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
 144:	8c ef       	ldi	r24, 0xFC	; 252
 146:	80 93 85 00 	sts	0x0085, r24
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 84 00 	sts	0x0084, r24
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	90 93 89 00 	sts	0x0089, r25
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 88 00 	sts	0x0088, r24
 15c:	90 93 8b 00 	sts	0x008B, r25
 160:	80 93 8a 00 	sts	0x008A, r24
 164:	90 93 8d 00 	sts	0x008D, r25
 168:	80 93 8c 00 	sts	0x008C, r24
 16c:	90 93 87 00 	sts	0x0087, r25
 170:	80 93 86 00 	sts	0x0086, r24
 174:	8b ea       	ldi	r24, 0xAB	; 171
 176:	80 93 80 00 	sts	0x0080, r24
 17a:	10 92 82 00 	sts	0x0082, r1
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <init_devices>:
 184:	f8 94       	cli
 186:	3b 9a       	sbi	0x07, 3	; 7
 188:	43 98       	cbi	0x08, 3	; 8
 18a:	d5 df       	rcall	.-86     	; 0x136 <port_init>
 18c:	d8 df       	rcall	.-80     	; 0x13e <timer1_init>
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <buzzer_on>:
 192:	86 b1       	in	r24, 0x06	; 6
 194:	88 60       	ori	r24, 0x08	; 8
 196:	88 b9       	out	0x08, r24	; 8
 198:	08 95       	ret

0000019a <buzzer_off>:
 19a:	86 b1       	in	r24, 0x06	; 6
 19c:	87 7f       	andi	r24, 0xF7	; 247
 19e:	88 b9       	out	0x08, r24	; 8
 1a0:	08 95       	ret

000001a2 <main>:
//Main function
int main(void)
{
	unsigned char i = 0;
	init_devices();
 1a2:	f0 df       	rcall	.-32     	; 0x184 <init_devices>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
 1a4:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) PositionServo;
 1a8:	88 e3       	ldi	r24, 0x38	; 56
 1aa:	80 93 8c 00 	sts	0x008C, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
 1ae:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
 1b2:	83 e3       	ldi	r24, 0x33	; 51
 1b4:	80 93 8a 00 	sts	0x008A, r24
	unsigned char i = 0;
	init_devices();
	servo_3(40);
	servo_2(30);
	
	buzzer_on();
 1b8:	ec df       	rcall	.-40     	; 0x192 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	1f ef       	ldi	r17, 0xFF	; 255
 1bc:	2f e7       	ldi	r18, 0x7F	; 127
 1be:	64 e0       	ldi	r22, 0x04	; 4
 1c0:	11 50       	subi	r17, 0x01	; 1
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	60 40       	sbci	r22, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x1e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x28>
 1ca:	00 00       	nop
	_delay_ms(100);
	buzzer_off();
 1cc:	e6 df       	rcall	.-52     	; 0x19a <buzzer_off>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
 1ce:	8b e8       	ldi	r24, 0x8B	; 139
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 OCR1BL = (unsigned char) PositionTiltServo;
 1d2:	ca e8       	ldi	r28, 0x8A	; 138
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
 1d6:	55 e4       	ldi	r21, 0x45	; 69
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
 1d8:	ad e8       	ldi	r26, 0x8D	; 141
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 OCR1CL = (unsigned char) PositionServo;
 1dc:	0f 2e       	mov	r0, r31
 1de:	fc e8       	ldi	r31, 0x8C	; 140
 1e0:	ef 2e       	mov	r14, r31
 1e2:	f1 2c       	mov	r15, r1
 1e4:	f0 2d       	mov	r31, r0
 1e6:	43 e2       	ldi	r20, 0x23	; 35
 1e8:	3b e3       	ldi	r19, 0x3B	; 59
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
 1ea:	23 e3       	ldi	r18, 0x33	; 51
 1ec:	7f ef       	ldi	r23, 0xFF	; 255
 1ee:	ef ef       	ldi	r30, 0xFF	; 255
 1f0:	fc e2       	ldi	r31, 0x2C	; 44
 1f2:	71 50       	subi	r23, 0x01	; 1
 1f4:	e0 40       	sbci	r30, 0x00	; 0
 1f6:	f0 40       	sbci	r31, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x50>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x5a>
 1fc:	00 00       	nop
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
 1fe:	fc 01       	movw	r30, r24
 200:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
 202:	58 83       	st	Y, r21
 204:	ff ef       	ldi	r31, 0xFF	; 255
 206:	1f e7       	ldi	r17, 0x7F	; 127
 208:	66 e1       	ldi	r22, 0x16	; 22
 20a:	f1 50       	subi	r31, 0x01	; 1
 20c:	10 40       	sbci	r17, 0x00	; 0
 20e:	60 40       	sbci	r22, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x68>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x72>
 214:	00 00       	nop
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
 216:	1c 92       	st	X, r1
 OCR1CL = (unsigned char) PositionServo;
 218:	f7 01       	movw	r30, r14
 21a:	40 83       	st	Z, r20
 21c:	ff ef       	ldi	r31, 0xFF	; 255
 21e:	1f ef       	ldi	r17, 0xFF	; 255
 220:	6c e2       	ldi	r22, 0x2C	; 44
 222:	f1 50       	subi	r31, 0x01	; 1
 224:	10 40       	sbci	r17, 0x00	; 0
 226:	60 40       	sbci	r22, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x80>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x8a>
 22c:	00 00       	nop
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
 22e:	1c 92       	st	X, r1
 OCR1CL = (unsigned char) PositionServo;
 230:	f7 01       	movw	r30, r14
 232:	30 83       	st	Z, r19
 234:	ff ef       	ldi	r31, 0xFF	; 255
 236:	1f ef       	ldi	r17, 0xFF	; 255
 238:	6c e2       	ldi	r22, 0x2C	; 44
 23a:	f1 50       	subi	r31, 0x01	; 1
 23c:	10 40       	sbci	r17, 0x00	; 0
 23e:	60 40       	sbci	r22, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x98>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0xa2>
 244:	00 00       	nop
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
 246:	fc 01       	movw	r30, r24
 248:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
 24a:	28 83       	st	Y, r18
 24c:	cf cf       	rjmp	.-98     	; 0x1ec <main+0x4a>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
