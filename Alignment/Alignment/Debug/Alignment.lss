
Alignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00003116  000031aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  0080024a  0080024a  000031f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000380a  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000494  00000000  00000000  00006d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026a9  00000000  00000000  0000722a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000998  00000000  00000000  000098d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000841  00000000  00000000  0000a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000233c  00000000  00000000  0000aaad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  0000cde9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c4       	rjmp	.+2164   	; 0x88a <__vector_5>
      16:	00 00       	nop
      18:	13 c4       	rjmp	.+2086   	; 0x840 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e1       	ldi	r30, 0x16	; 22
      fc:	f1 e3       	ldi	r31, 0x31	; 49
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 3b       	cpi	r26, 0xBD	; 189
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <main>
     122:	0c 94 89 18 	jmp	0x3112	; 0x3112 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 77 02 	sts	0x0277, r25
     30a:	80 93 76 02 	sts	0x0276, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 7b 02 	sts	0x027B, r21
     338:	40 93 7a 02 	sts	0x027A, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 bc 02 	sts	0x02BC, r25
     374:	80 93 bb 02 	sts	0x02BB, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 7b 02 	sts	0x027B, r21
     3a0:	40 93 7a 02 	sts	0x027A, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b2 02 	sts	0x02B2, r25
     3dc:	80 93 b1 02 	sts	0x02B1, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 7b 02 	sts	0x027B, r21
     3fe:	40 93 7a 02 	sts	0x027A, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8c 02 	sts	0x028C, r25
     436:	80 93 8b 02 	sts	0x028B, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 66 18 	call	0x30cc	; 0x30cc <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 ba 02 	sts	0x02BA, r25
     47c:	80 93 b9 02 	sts	0x02B9, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 5a 02 	lds	r24, 0x025A
     628:	90 91 5b 02 	lds	r25, 0x025B
     62c:	a0 91 5c 02 	lds	r26, 0x025C
     630:	b0 91 5d 02 	lds	r27, 0x025D
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 5a 02 	sts	0x025A, r24
     63e:	90 93 5b 02 	sts	0x025B, r25
     642:	a0 93 5c 02 	sts	0x025C, r26
     646:	b0 93 5d 02 	sts	0x025D, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <servo_1>:
     676:	10 92 89 00 	sts	0x0089, r1
     67a:	68 2f       	mov	r22, r24
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
     686:	2b e7       	ldi	r18, 0x7B	; 123
     688:	34 e1       	ldi	r19, 0x14	; 20
     68a:	4e ee       	ldi	r20, 0xEE	; 238
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4c e0       	ldi	r20, 0x0C	; 12
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__addsf3>
     69e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__fixunssfsi>
     6a2:	60 93 88 00 	sts	0x0088, r22
     6a6:	08 95       	ret

000006a8 <servo_2>:
     6a8:	10 92 8b 00 	sts	0x008B, r1
     6ac:	68 2f       	mov	r22, r24
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
     6b8:	2b e7       	ldi	r18, 0x7B	; 123
     6ba:	34 e1       	ldi	r19, 0x14	; 20
     6bc:	4e ee       	ldi	r20, 0xEE	; 238
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4c e0       	ldi	r20, 0x0C	; 12
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__addsf3>
     6d0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__fixunssfsi>
     6d4:	60 93 8a 00 	sts	0x008A, r22
     6d8:	08 95       	ret

000006da <servo_3>:
     6da:	10 92 8d 00 	sts	0x008D, r1
     6de:	68 2f       	mov	r22, r24
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
     6ea:	2b e7       	ldi	r18, 0x7B	; 123
     6ec:	34 e1       	ldi	r19, 0x14	; 20
     6ee:	4e ee       	ldi	r20, 0xEE	; 238
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4c e0       	ldi	r20, 0x0C	; 12
     6fc:	52 e4       	ldi	r21, 0x42	; 66
     6fe:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__addsf3>
     702:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__fixunssfsi>
     706:	60 93 8c 00 	sts	0x008C, r22
     70a:	08 95       	ret

0000070c <filter_red>:
     70c:	5e 98       	cbi	0x0b, 6	; 11
     70e:	5f 98       	cbi	0x0b, 7	; 11
     710:	08 95       	ret

00000712 <filter_green>:
     712:	5e 9a       	sbi	0x0b, 6	; 11
     714:	5f 9a       	sbi	0x0b, 7	; 11
     716:	08 95       	ret

00000718 <filter_blue>:
     718:	5e 98       	cbi	0x0b, 6	; 11
     71a:	5f 9a       	sbi	0x0b, 7	; 11
     71c:	08 95       	ret

0000071e <color_sensor_scaling>:
     71e:	5c 9a       	sbi	0x0b, 4	; 11
     720:	5d 9a       	sbi	0x0b, 5	; 11
     722:	08 95       	ret

00000724 <red_read>:
     724:	f3 df       	rcall	.-26     	; 0x70c <filter_red>
     726:	10 92 5a 02 	sts	0x025A, r1
     72a:	10 92 5b 02 	sts	0x025B, r1
     72e:	10 92 5c 02 	sts	0x025C, r1
     732:	10 92 5d 02 	sts	0x025D, r1
     736:	2f ef       	ldi	r18, 0xFF	; 255
     738:	8f e7       	ldi	r24, 0x7F	; 127
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	80 40       	sbci	r24, 0x00	; 0
     740:	90 40       	sbci	r25, 0x00	; 0
     742:	e1 f7       	brne	.-8      	; 0x73c <red_read+0x18>
     744:	00 c0       	rjmp	.+0      	; 0x746 <red_read+0x22>
     746:	00 00       	nop
     748:	80 91 5a 02 	lds	r24, 0x025A
     74c:	90 91 5b 02 	lds	r25, 0x025B
     750:	a0 91 5c 02 	lds	r26, 0x025C
     754:	b0 91 5d 02 	lds	r27, 0x025D
     758:	80 93 80 02 	sts	0x0280, r24
     75c:	90 93 81 02 	sts	0x0281, r25
     760:	a0 93 82 02 	sts	0x0282, r26
     764:	b0 93 83 02 	sts	0x0283, r27
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	9c e2       	ldi	r25, 0x2C	; 44
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <red_read+0x4a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <red_read+0x54>
     778:	00 00       	nop
     77a:	08 95       	ret

0000077c <green_read>:
     77c:	ca df       	rcall	.-108    	; 0x712 <filter_green>
     77e:	10 92 5a 02 	sts	0x025A, r1
     782:	10 92 5b 02 	sts	0x025B, r1
     786:	10 92 5c 02 	sts	0x025C, r1
     78a:	10 92 5d 02 	sts	0x025D, r1
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	8f e7       	ldi	r24, 0x7F	; 127
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	21 50       	subi	r18, 0x01	; 1
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <green_read+0x18>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <green_read+0x22>
     79e:	00 00       	nop
     7a0:	80 91 5a 02 	lds	r24, 0x025A
     7a4:	90 91 5b 02 	lds	r25, 0x025B
     7a8:	a0 91 5c 02 	lds	r26, 0x025C
     7ac:	b0 91 5d 02 	lds	r27, 0x025D
     7b0:	80 93 7c 02 	sts	0x027C, r24
     7b4:	90 93 7d 02 	sts	0x027D, r25
     7b8:	a0 93 7e 02 	sts	0x027E, r26
     7bc:	b0 93 7f 02 	sts	0x027F, r27
     7c0:	08 95       	ret

000007c2 <blue_read>:
     7c2:	aa df       	rcall	.-172    	; 0x718 <filter_blue>
     7c4:	10 92 5a 02 	sts	0x025A, r1
     7c8:	10 92 5b 02 	sts	0x025B, r1
     7cc:	10 92 5c 02 	sts	0x025C, r1
     7d0:	10 92 5d 02 	sts	0x025D, r1
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	8f e7       	ldi	r24, 0x7F	; 127
     7d8:	94 e0       	ldi	r25, 0x04	; 4
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <blue_read+0x18>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <blue_read+0x22>
     7e4:	00 00       	nop
     7e6:	80 91 5a 02 	lds	r24, 0x025A
     7ea:	90 91 5b 02 	lds	r25, 0x025B
     7ee:	a0 91 5c 02 	lds	r26, 0x025C
     7f2:	b0 91 5d 02 	lds	r27, 0x025D
     7f6:	80 93 70 02 	sts	0x0270, r24
     7fa:	90 93 71 02 	sts	0x0271, r25
     7fe:	a0 93 72 02 	sts	0x0272, r26
     802:	b0 93 73 02 	sts	0x0273, r27
     806:	08 95       	ret

00000808 <left_encoder_pin_config>:
     808:	6c 98       	cbi	0x0d, 4	; 13
     80a:	74 9a       	sbi	0x0e, 4	; 14
     80c:	08 95       	ret

0000080e <right_encoder_pin_config>:
     80e:	6d 98       	cbi	0x0d, 5	; 13
     810:	75 9a       	sbi	0x0e, 5	; 14
     812:	08 95       	ret

00000814 <port_init_poz>:
     814:	64 de       	rcall	.-824    	; 0x4de <motion_pin_config>
     816:	f8 df       	rcall	.-16     	; 0x808 <left_encoder_pin_config>
     818:	fa cf       	rjmp	.-12     	; 0x80e <right_encoder_pin_config>
     81a:	08 95       	ret

0000081c <left_position_encoder_interrupt_init>:
     81c:	f8 94       	cli
     81e:	ea e6       	ldi	r30, 0x6A	; 106
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	82 60       	ori	r24, 0x02	; 2
     826:	80 83       	st	Z, r24
     828:	ec 9a       	sbi	0x1d, 4	; 29
     82a:	78 94       	sei
     82c:	08 95       	ret

0000082e <right_position_encoder_interrupt_init>:
     82e:	f8 94       	cli
     830:	ea e6       	ldi	r30, 0x6A	; 106
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	88 60       	ori	r24, 0x08	; 8
     838:	80 83       	st	Z, r24
     83a:	ed 9a       	sbi	0x1d, 5	; 29
     83c:	78 94       	sei
     83e:	08 95       	ret

00000840 <__vector_6>:
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	80 91 5e 02 	lds	r24, 0x025E
     856:	90 91 5f 02 	lds	r25, 0x025F
     85a:	a0 91 60 02 	lds	r26, 0x0260
     85e:	b0 91 61 02 	lds	r27, 0x0261
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	a1 1d       	adc	r26, r1
     866:	b1 1d       	adc	r27, r1
     868:	80 93 5e 02 	sts	0x025E, r24
     86c:	90 93 5f 02 	sts	0x025F, r25
     870:	a0 93 60 02 	sts	0x0260, r26
     874:	b0 93 61 02 	sts	0x0261, r27
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <__vector_5>:
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	80 91 62 02 	lds	r24, 0x0262
     8a0:	90 91 63 02 	lds	r25, 0x0263
     8a4:	a0 91 64 02 	lds	r26, 0x0264
     8a8:	b0 91 65 02 	lds	r27, 0x0265
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	b1 1d       	adc	r27, r1
     8b2:	80 93 62 02 	sts	0x0262, r24
     8b6:	90 93 63 02 	sts	0x0263, r25
     8ba:	a0 93 64 02 	sts	0x0264, r26
     8be:	b0 93 65 02 	sts	0x0265, r27
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <angle_rotate>:
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	bc 01       	movw	r22, r24
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
     8ea:	28 e4       	ldi	r18, 0x48	; 72
     8ec:	31 ee       	ldi	r19, 0xE1	; 225
     8ee:	42 e8       	ldi	r20, 0x82	; 130
     8f0:	50 e4       	ldi	r21, 0x40	; 64
     8f2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divsf3>
     8f6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__fixunssfsi>
     8fa:	cb 01       	movw	r24, r22
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	10 92 5e 02 	sts	0x025E, r1
     904:	10 92 5f 02 	sts	0x025F, r1
     908:	10 92 60 02 	sts	0x0260, r1
     90c:	10 92 61 02 	sts	0x0261, r1
     910:	10 92 62 02 	sts	0x0262, r1
     914:	10 92 63 02 	sts	0x0263, r1
     918:	10 92 64 02 	sts	0x0264, r1
     91c:	10 92 65 02 	sts	0x0265, r1
     920:	51 e0       	ldi	r21, 0x01	; 1
     922:	e0 e0       	ldi	r30, 0x00	; 0
     924:	c0 90 5e 02 	lds	r12, 0x025E
     928:	d0 90 5f 02 	lds	r13, 0x025F
     92c:	e0 90 60 02 	lds	r14, 0x0260
     930:	f0 90 61 02 	lds	r15, 0x0261
     934:	00 91 62 02 	lds	r16, 0x0262
     938:	10 91 63 02 	lds	r17, 0x0263
     93c:	20 91 64 02 	lds	r18, 0x0264
     940:	30 91 65 02 	lds	r19, 0x0265
     944:	45 2f       	mov	r20, r21
     946:	08 17       	cp	r16, r24
     948:	19 07       	cpc	r17, r25
     94a:	2a 07       	cpc	r18, r26
     94c:	3b 07       	cpc	r19, r27
     94e:	08 f4       	brcc	.+2      	; 0x952 <angle_rotate+0x7e>
     950:	4e 2f       	mov	r20, r30
     952:	41 11       	cpse	r20, r1
     954:	09 c0       	rjmp	.+18     	; 0x968 <angle_rotate+0x94>
     956:	25 2f       	mov	r18, r21
     958:	c8 16       	cp	r12, r24
     95a:	d9 06       	cpc	r13, r25
     95c:	ea 06       	cpc	r14, r26
     95e:	fb 06       	cpc	r15, r27
     960:	08 f4       	brcc	.+2      	; 0x964 <angle_rotate+0x90>
     962:	2e 2f       	mov	r18, r30
     964:	22 23       	and	r18, r18
     966:	f1 f2       	breq	.-68     	; 0x924 <angle_rotate+0x50>
     968:	dd dd       	rcall	.-1094   	; 0x524 <stop>
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <linear_distance_mm>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	bc 01       	movw	r22, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
     986:	25 ee       	ldi	r18, 0xE5	; 229
     988:	30 ed       	ldi	r19, 0xD0	; 208
     98a:	4a ea       	ldi	r20, 0xAA	; 170
     98c:	50 e4       	ldi	r21, 0x40	; 64
     98e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divsf3>
     992:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__fixunssfsi>
     996:	10 92 5e 02 	sts	0x025E, r1
     99a:	10 92 5f 02 	sts	0x025F, r1
     99e:	10 92 60 02 	sts	0x0260, r1
     9a2:	10 92 61 02 	sts	0x0261, r1
     9a6:	00 91 5e 02 	lds	r16, 0x025E
     9aa:	10 91 5f 02 	lds	r17, 0x025F
     9ae:	20 91 60 02 	lds	r18, 0x0260
     9b2:	30 91 61 02 	lds	r19, 0x0261
     9b6:	60 17       	cp	r22, r16
     9b8:	71 07       	cpc	r23, r17
     9ba:	82 07       	cpc	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	98 f7       	brcc	.-26     	; 0x9a6 <linear_distance_mm+0x2e>
     9c0:	b1 dd       	rcall	.-1182   	; 0x524 <stop>
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <forward_mm>:
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
     9ce:	9e dd       	rcall	.-1220   	; 0x50c <forward>
     9d0:	ce 01       	movw	r24, r28
     9d2:	d2 df       	rcall	.-92     	; 0x978 <linear_distance_mm>
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <back_mm>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	98 dd       	rcall	.-1232   	; 0x512 <back>
     9e2:	ce 01       	movw	r24, r28
     9e4:	c9 df       	rcall	.-110    	; 0x978 <linear_distance_mm>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <left_degrees>:
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	92 dd       	rcall	.-1244   	; 0x518 <left>
     9f4:	ce 01       	movw	r24, r28
     9f6:	6e df       	rcall	.-292    	; 0x8d4 <angle_rotate>
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <right_degrees>:
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
     a04:	8c dd       	rcall	.-1256   	; 0x51e <right>
     a06:	ce 01       	movw	r24, r28
     a08:	65 df       	rcall	.-310    	; 0x8d4 <angle_rotate>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <init_devices>:
     a10:	f8 94       	cli
     a12:	00 df       	rcall	.-512    	; 0x814 <port_init_poz>
     a14:	03 df       	rcall	.-506    	; 0x81c <left_position_encoder_interrupt_init>
     a16:	0b df       	rcall	.-490    	; 0x82e <right_position_encoder_interrupt_init>
     a18:	c7 dd       	rcall	.-1138   	; 0x5a8 <port_init>
     a1a:	f2 dd       	rcall	.-1052   	; 0x600 <color_sensor_pin_interrupt_init>
     a1c:	1f de       	rcall	.-962    	; 0x65c <adc_init>
     a1e:	5f dd       	rcall	.-1346   	; 0x4de <motion_pin_config>
     a20:	43 dd       	rcall	.-1402   	; 0x4a8 <timer5_init>
     a22:	9f dd       	rcall	.-1218   	; 0x562 <timer1_init>
     a24:	78 94       	sei
     a26:	08 95       	ret

00000a28 <set_color>:
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	cf dd       	rcall	.-1122   	; 0x5ca <ADC_Conversion>
     a2c:	80 93 4d 02 	sts	0x024D, r24
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	cb dd       	rcall	.-1130   	; 0x5ca <ADC_Conversion>
     a34:	80 93 4c 02 	sts	0x024C, r24
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	c7 dd       	rcall	.-1138   	; 0x5ca <ADC_Conversion>
     a3c:	80 93 4b 02 	sts	0x024B, r24
     a40:	08 95       	ret

00000a42 <lower>:
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	e9 f4       	brne	.+58     	; 0xa80 <lower+0x3e>
     a46:	8a e5       	ldi	r24, 0x5A	; 90
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	90 93 4f 02 	sts	0x024F, r25
     a4e:	80 93 4e 02 	sts	0x024E, r24
     a52:	2a de       	rcall	.-940    	; 0x6a8 <servo_2>
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	9f e8       	ldi	r25, 0x8F	; 143
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <lower+0x16>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <lower+0x1c>
     a5e:	00 00       	nop
     a60:	80 91 4e 02 	lds	r24, 0x024E
     a64:	90 91 4f 02 	lds	r25, 0x024F
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	90 93 4f 02 	sts	0x024F, r25
     a6e:	80 93 4e 02 	sts	0x024E, r24
     a72:	8c 33       	cpi	r24, 0x3C	; 60
     a74:	91 05       	cpc	r25, r1
     a76:	6c f7       	brge	.-38     	; 0xa52 <lower+0x10>
     a78:	8c e3       	ldi	r24, 0x3C	; 60
     a7a:	80 93 00 02 	sts	0x0200, r24
     a7e:	08 95       	ret
     a80:	8a e5       	ldi	r24, 0x5A	; 90
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 4f 02 	sts	0x024F, r25
     a88:	80 93 4e 02 	sts	0x024E, r24
     a8c:	0d de       	rcall	.-998    	; 0x6a8 <servo_2>
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f e8       	ldi	r25, 0x8F	; 143
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <lower+0x50>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <lower+0x56>
     a98:	00 00       	nop
     a9a:	80 91 4e 02 	lds	r24, 0x024E
     a9e:	90 91 4f 02 	lds	r25, 0x024F
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	90 93 4f 02 	sts	0x024F, r25
     aa8:	80 93 4e 02 	sts	0x024E, r24
     aac:	89 37       	cpi	r24, 0x79	; 121
     aae:	91 05       	cpc	r25, r1
     ab0:	6c f3       	brlt	.-38     	; 0xa8c <lower+0x4a>
     ab2:	88 e7       	ldi	r24, 0x78	; 120
     ab4:	80 93 00 02 	sts	0x0200, r24
     ab8:	08 95       	ret

00000aba <elevate>:
     aba:	80 91 00 02 	lds	r24, 0x0200
     abe:	8c 33       	cpi	r24, 0x3C	; 60
     ac0:	d1 f4       	brne	.+52     	; 0xaf6 <elevate+0x3c>
     ac2:	8c e3       	ldi	r24, 0x3C	; 60
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 4f 02 	sts	0x024F, r25
     aca:	80 93 4e 02 	sts	0x024E, r24
     ace:	ec dd       	rcall	.-1064   	; 0x6a8 <servo_2>
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	9f e8       	ldi	r25, 0x8F	; 143
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <elevate+0x1a>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <elevate+0x20>
     ada:	00 00       	nop
     adc:	80 91 4e 02 	lds	r24, 0x024E
     ae0:	90 91 4f 02 	lds	r25, 0x024F
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	90 93 4f 02 	sts	0x024F, r25
     aea:	80 93 4e 02 	sts	0x024E, r24
     aee:	8b 35       	cpi	r24, 0x5B	; 91
     af0:	91 05       	cpc	r25, r1
     af2:	d4 f4       	brge	.+52     	; 0xb28 <elevate+0x6e>
     af4:	ec cf       	rjmp	.-40     	; 0xace <elevate+0x14>
     af6:	88 e7       	ldi	r24, 0x78	; 120
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 4f 02 	sts	0x024F, r25
     afe:	80 93 4e 02 	sts	0x024E, r24
     b02:	d2 dd       	rcall	.-1116   	; 0x6a8 <servo_2>
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f e8       	ldi	r25, 0x8F	; 143
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <elevate+0x4e>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <elevate+0x54>
     b0e:	00 00       	nop
     b10:	80 91 4e 02 	lds	r24, 0x024E
     b14:	90 91 4f 02 	lds	r25, 0x024F
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	90 93 4f 02 	sts	0x024F, r25
     b1e:	80 93 4e 02 	sts	0x024E, r24
     b22:	8a 35       	cpi	r24, 0x5A	; 90
     b24:	91 05       	cpc	r25, r1
     b26:	6c f7       	brge	.-38     	; 0xb02 <elevate+0x48>
     b28:	8a e5       	ldi	r24, 0x5A	; 90
     b2a:	80 93 00 02 	sts	0x0200, r24
     b2e:	08 95       	ret

00000b30 <open>:
     b30:	81 11       	cpse	r24, r1
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <open+0x38>
     b34:	87 e3       	ldi	r24, 0x37	; 55
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 4f 02 	sts	0x024F, r25
     b3c:	80 93 4e 02 	sts	0x024E, r24
     b40:	cc dd       	rcall	.-1128   	; 0x6da <servo_3>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	9f e8       	ldi	r25, 0x8F	; 143
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <open+0x16>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <open+0x1c>
     b4c:	00 00       	nop
     b4e:	80 91 4e 02 	lds	r24, 0x024E
     b52:	90 91 4f 02 	lds	r25, 0x024F
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	90 93 4f 02 	sts	0x024F, r25
     b5c:	80 93 4e 02 	sts	0x024E, r24
     b60:	18 16       	cp	r1, r24
     b62:	19 06       	cpc	r1, r25
     b64:	e4 f4       	brge	.+56     	; 0xb9e <open+0x6e>
     b66:	ec cf       	rjmp	.-40     	; 0xb40 <open+0x10>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	c9 f4       	brne	.+50     	; 0xb9e <open+0x6e>
     b6c:	87 e3       	ldi	r24, 0x37	; 55
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 4f 02 	sts	0x024F, r25
     b74:	80 93 4e 02 	sts	0x024E, r24
     b78:	7e dd       	rcall	.-1284   	; 0x676 <servo_1>
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	9f e8       	ldi	r25, 0x8F	; 143
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <open+0x4e>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <open+0x54>
     b84:	00 00       	nop
     b86:	80 91 4e 02 	lds	r24, 0x024E
     b8a:	90 91 4f 02 	lds	r25, 0x024F
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	90 93 4f 02 	sts	0x024F, r25
     b94:	80 93 4e 02 	sts	0x024E, r24
     b98:	18 16       	cp	r1, r24
     b9a:	19 06       	cpc	r1, r25
     b9c:	6c f3       	brlt	.-38     	; 0xb78 <open+0x48>
     b9e:	08 95       	ret

00000ba0 <close>:
     ba0:	81 11       	cpse	r24, r1
     ba2:	18 c0       	rjmp	.+48     	; 0xbd4 <close+0x34>
     ba4:	10 92 4f 02 	sts	0x024F, r1
     ba8:	10 92 4e 02 	sts	0x024E, r1
     bac:	96 dd       	rcall	.-1236   	; 0x6da <servo_3>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	9f e8       	ldi	r25, 0x8F	; 143
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <close+0x12>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <close+0x18>
     bb8:	00 00       	nop
     bba:	80 91 4e 02 	lds	r24, 0x024E
     bbe:	90 91 4f 02 	lds	r25, 0x024F
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	90 93 4f 02 	sts	0x024F, r25
     bc8:	80 93 4e 02 	sts	0x024E, r24
     bcc:	87 33       	cpi	r24, 0x37	; 55
     bce:	91 05       	cpc	r25, r1
     bd0:	dc f4       	brge	.+54     	; 0xc08 <close+0x68>
     bd2:	ec cf       	rjmp	.-40     	; 0xbac <close+0xc>
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	c1 f4       	brne	.+48     	; 0xc08 <close+0x68>
     bd8:	10 92 4f 02 	sts	0x024F, r1
     bdc:	10 92 4e 02 	sts	0x024E, r1
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	49 dd       	rcall	.-1390   	; 0x676 <servo_1>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9f e8       	ldi	r25, 0x8F	; 143
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <close+0x48>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <close+0x4e>
     bee:	00 00       	nop
     bf0:	80 91 4e 02 	lds	r24, 0x024E
     bf4:	90 91 4f 02 	lds	r25, 0x024F
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 4f 02 	sts	0x024F, r25
     bfe:	80 93 4e 02 	sts	0x024E, r24
     c02:	87 33       	cpi	r24, 0x37	; 55
     c04:	91 05       	cpc	r25, r1
     c06:	6c f3       	brlt	.-38     	; 0xbe2 <close+0x42>
     c08:	08 95       	ret

00000c0a <buzzer>:
     c0a:	d7 dc       	rcall	.-1618   	; 0x5ba <buzzer_on>
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	8f e7       	ldi	r24, 0x7F	; 127
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <buzzer+0x8>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <buzzer+0x12>
     c1c:	00 00       	nop
     c1e:	d1 cc       	rjmp	.-1630   	; 0x5c2 <buzzer_off>
     c20:	08 95       	ret

00000c22 <lcd>:
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	c3 da       	rcall	.-2682   	; 0x1b2 <lcd_wr_command>
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	2c db       	rcall	.-2472   	; 0x28a <lcd_cursor>
     c32:	ce 01       	movw	r24, r28
     c34:	1c db       	rcall	.-2504   	; 0x26e <lcd_string>
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <scan>:
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	71 dd       	rcall	.-1310   	; 0x724 <red_read>
     c42:	bf dd       	rcall	.-1154   	; 0x7c2 <blue_read>
     c44:	9b dd       	rcall	.-1226   	; 0x77c <green_read>
     c46:	2f ef       	ldi	r18, 0xFF	; 255
     c48:	8f e7       	ldi	r24, 0x7F	; 127
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <scan+0x10>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <scan+0x1a>
     c56:	00 00       	nop
     c58:	8b e0       	ldi	r24, 0x0B	; 11
     c5a:	b7 dc       	rcall	.-1682   	; 0x5ca <ADC_Conversion>
     c5c:	88 33       	cpi	r24, 0x38	; 56
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <scan+0x26>
     c60:	7b c0       	rjmp	.+246    	; 0xd58 <scan+0x11c>
     c62:	8b e0       	ldi	r24, 0x0B	; 11
     c64:	b2 dc       	rcall	.-1692   	; 0x5ca <ADC_Conversion>
     c66:	84 36       	cpi	r24, 0x64	; 100
     c68:	08 f0       	brcs	.+2      	; 0xc6c <scan+0x30>
     c6a:	79 c0       	rjmp	.+242    	; 0xd5e <scan+0x122>
     c6c:	80 91 6e 02 	lds	r24, 0x026E
     c70:	90 91 6f 02 	lds	r25, 0x026F
     c74:	aa 27       	eor	r26, r26
     c76:	97 fd       	sbrc	r25, 7
     c78:	a0 95       	com	r26
     c7a:	ba 2f       	mov	r27, r26
     c7c:	40 91 80 02 	lds	r20, 0x0280
     c80:	50 91 81 02 	lds	r21, 0x0281
     c84:	60 91 82 02 	lds	r22, 0x0282
     c88:	70 91 83 02 	lds	r23, 0x0283
     c8c:	48 17       	cp	r20, r24
     c8e:	59 07       	cpc	r21, r25
     c90:	6a 07       	cpc	r22, r26
     c92:	7b 07       	cpc	r23, r27
     c94:	d8 f4       	brcc	.+54     	; 0xccc <scan+0x90>
     c96:	40 91 7c 02 	lds	r20, 0x027C
     c9a:	50 91 7d 02 	lds	r21, 0x027D
     c9e:	60 91 7e 02 	lds	r22, 0x027E
     ca2:	70 91 7f 02 	lds	r23, 0x027F
     ca6:	48 17       	cp	r20, r24
     ca8:	59 07       	cpc	r21, r25
     caa:	6a 07       	cpc	r22, r26
     cac:	7b 07       	cpc	r23, r27
     cae:	70 f4       	brcc	.+28     	; 0xccc <scan+0x90>
     cb0:	40 91 70 02 	lds	r20, 0x0270
     cb4:	50 91 71 02 	lds	r21, 0x0271
     cb8:	60 91 72 02 	lds	r22, 0x0272
     cbc:	70 91 73 02 	lds	r23, 0x0273
     cc0:	48 17       	cp	r20, r24
     cc2:	59 07       	cpc	r21, r25
     cc4:	6a 07       	cpc	r22, r26
     cc6:	7b 07       	cpc	r23, r27
     cc8:	08 f4       	brcc	.+2      	; 0xccc <scan+0x90>
     cca:	4c c0       	rjmp	.+152    	; 0xd64 <scan+0x128>
     ccc:	40 91 80 02 	lds	r20, 0x0280
     cd0:	50 91 81 02 	lds	r21, 0x0281
     cd4:	60 91 82 02 	lds	r22, 0x0282
     cd8:	70 91 83 02 	lds	r23, 0x0283
     cdc:	80 91 70 02 	lds	r24, 0x0270
     ce0:	90 91 71 02 	lds	r25, 0x0271
     ce4:	a0 91 72 02 	lds	r26, 0x0272
     ce8:	b0 91 73 02 	lds	r27, 0x0273
     cec:	84 17       	cp	r24, r20
     cee:	95 07       	cpc	r25, r21
     cf0:	a6 07       	cpc	r26, r22
     cf2:	b7 07       	cpc	r27, r23
     cf4:	c8 f4       	brcc	.+50     	; 0xd28 <scan+0xec>
     cf6:	00 91 80 02 	lds	r16, 0x0280
     cfa:	10 91 81 02 	lds	r17, 0x0281
     cfe:	20 91 82 02 	lds	r18, 0x0282
     d02:	30 91 83 02 	lds	r19, 0x0283
     d06:	40 91 7c 02 	lds	r20, 0x027C
     d0a:	50 91 7d 02 	lds	r21, 0x027D
     d0e:	60 91 7e 02 	lds	r22, 0x027E
     d12:	70 91 7f 02 	lds	r23, 0x027F
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	40 17       	cp	r20, r16
     d1c:	51 07       	cpc	r21, r17
     d1e:	62 07       	cpc	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	28 f5       	brcc	.+74     	; 0xd6e <scan+0x132>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	23 c0       	rjmp	.+70     	; 0xd6e <scan+0x132>
     d28:	40 91 70 02 	lds	r20, 0x0270
     d2c:	50 91 71 02 	lds	r21, 0x0271
     d30:	60 91 72 02 	lds	r22, 0x0272
     d34:	70 91 73 02 	lds	r23, 0x0273
     d38:	80 91 7c 02 	lds	r24, 0x027C
     d3c:	90 91 7d 02 	lds	r25, 0x027D
     d40:	a0 91 7e 02 	lds	r26, 0x027E
     d44:	b0 91 7f 02 	lds	r27, 0x027F
     d48:	84 17       	cp	r24, r20
     d4a:	95 07       	cpc	r25, r21
     d4c:	a6 07       	cpc	r26, r22
     d4e:	b7 07       	cpc	r27, r23
     d50:	60 f4       	brcc	.+24     	; 0xd6a <scan+0x12e>
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0b c0       	rjmp	.+22     	; 0xd6e <scan+0x132>
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	08 c0       	rjmp	.+16     	; 0xd6e <scan+0x132>
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	9f ef       	ldi	r25, 0xFF	; 255
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <scan+0x132>
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <scan+0x132>
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <setIndicatorAndColor>:
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cf e9       	ldi	r28, 0x9F	; 159
     d7a:	d2 e0       	ldi	r29, 0x02	; 2
     d7c:	ed e8       	ldi	r30, 0x8D	; 141
     d7e:	f2 e0       	ldi	r31, 0x02	; 2
     d80:	a6 e6       	ldi	r26, 0x66	; 102
     d82:	b2 e0       	ldi	r27, 0x02	; 2
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2e ef       	ldi	r18, 0xFE	; 254
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	89 93       	st	Y+, r24
     d8e:	99 93       	st	Y+, r25
     d90:	33 83       	std	Z+3, r19	; 0x03
     d92:	22 83       	std	Z+2, r18	; 0x02
     d94:	31 83       	std	Z+1, r19	; 0x01
     d96:	20 83       	st	Z, r18
     d98:	1d 92       	st	X+, r1
     d9a:	1d 92       	st	X+, r1
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	34 96       	adiw	r30, 0x04	; 4
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	91 05       	cpc	r25, r1
     da4:	99 f7       	brne	.-26     	; 0xd8c <setIndicatorAndColor+0x18>
     da6:	e0 91 9f 02 	lds	r30, 0x029F
     daa:	f0 91 a0 02 	lds	r31, 0x02A0
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	e9 55       	subi	r30, 0x59	; 89
     db4:	fd 4f       	sbci	r31, 0xFD	; 253
     db6:	11 82       	std	Z+1, r1	; 0x01
     db8:	10 82       	st	Z, r1
     dba:	e0 91 a1 02 	lds	r30, 0x02A1
     dbe:	f0 91 a2 02 	lds	r31, 0x02A2
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	e9 55       	subi	r30, 0x59	; 89
     dc8:	fd 4f       	sbci	r31, 0xFD	; 253
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
     dd2:	e0 91 a3 02 	lds	r30, 0x02A3
     dd6:	f0 91 a4 02 	lds	r31, 0x02A4
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	e9 55       	subi	r30, 0x59	; 89
     de0:	fd 4f       	sbci	r31, 0xFD	; 253
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
     dea:	e0 91 a5 02 	lds	r30, 0x02A5
     dee:	f0 91 a6 02 	lds	r31, 0x02A6
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	e9 55       	subi	r30, 0x59	; 89
     df8:	fd 4f       	sbci	r31, 0xFD	; 253
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	9f ef       	ldi	r25, 0xFF	; 255
     e06:	90 93 88 02 	sts	0x0288, r25
     e0a:	80 93 87 02 	sts	0x0287, r24
     e0e:	90 93 86 02 	sts	0x0286, r25
     e12:	80 93 85 02 	sts	0x0285, r24
     e16:	90 93 b6 02 	sts	0x02B6, r25
     e1a:	80 93 b5 02 	sts	0x02B5, r24
     e1e:	90 93 b4 02 	sts	0x02B4, r25
     e22:	80 93 b3 02 	sts	0x02B3, r24
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <terminalCheck2>:

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
		total--;
}
void terminalCheck2()
{
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e30:	86 e9       	ldi	r24, 0x96	; 150
     e32:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     e36:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	if (flag == 0)
     e3a:	80 91 56 02 	lds	r24, 0x0256
     e3e:	90 91 57 02 	lds	r25, 0x0257
     e42:	89 2b       	or	r24, r25
     e44:	39 f5       	brne	.+78     	; 0xe94 <terminalCheck2+0x68>
	{
		if (dir == 0)
     e46:	80 91 50 02 	lds	r24, 0x0250
     e4a:	90 91 51 02 	lds	r25, 0x0251
     e4e:	89 2b       	or	r24, r25
     e50:	71 f4       	brne	.+28     	; 0xe6e <terminalCheck2+0x42>
			if (ot == 0 || ot == 1)
     e52:	80 91 52 02 	lds	r24, 0x0252
     e56:	90 91 53 02 	lds	r25, 0x0253
     e5a:	02 97       	sbiw	r24, 0x02	; 2
     e5c:	20 f4       	brcc	.+8      	; 0xe66 <terminalCheck2+0x3a>
				forward_mm(30);
     e5e:	8e e1       	ldi	r24, 0x1E	; 30
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	b2 dd       	rcall	.-1180   	; 0x9c8 <forward_mm>
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <terminalCheck2+0x5c>
			else back_mm(30);
     e66:	8e e1       	ldi	r24, 0x1E	; 30
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	b7 dd       	rcall	.-1170   	; 0x9da <back_mm>
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <terminalCheck2+0x5c>
		else if (ot == 0 || ot == 1)
     e6e:	80 91 52 02 	lds	r24, 0x0252
     e72:	90 91 53 02 	lds	r25, 0x0253
     e76:	02 97       	sbiw	r24, 0x02	; 2
     e78:	20 f4       	brcc	.+8      	; 0xe82 <terminalCheck2+0x56>
			back_mm(30);
     e7a:	8e e1       	ldi	r24, 0x1E	; 30
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	ad dd       	rcall	.-1190   	; 0x9da <back_mm>
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <terminalCheck2+0x5c>
		else forward_mm(30);
     e82:	8e e1       	ldi	r24, 0x1E	; 30
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 dd       	rcall	.-1216   	; 0x9c8 <forward_mm>
		flag = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	90 93 57 02 	sts	0x0257, r25
     e90:	80 93 56 02 	sts	0x0256, r24
	}

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     e94:	80 91 89 02 	lds	r24, 0x0289
     e98:	90 91 8a 02 	lds	r25, 0x028A
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	91 05       	cpc	r25, r1
     ea0:	30 f4       	brcc	.+12     	; 0xeae <terminalCheck2+0x82>
     ea2:	20 91 50 02 	lds	r18, 0x0250
     ea6:	30 91 51 02 	lds	r19, 0x0251
     eaa:	23 2b       	or	r18, r19
     eac:	69 f0       	breq	.+26     	; 0xec8 <terminalCheck2+0x9c>
     eae:	9c 01       	movw	r18, r24
     eb0:	22 50       	subi	r18, 0x02	; 2
     eb2:	31 09       	sbc	r19, r1
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	40 f5       	brcc	.+80     	; 0xf0a <terminalCheck2+0xde>
     eba:	40 91 50 02 	lds	r20, 0x0250
     ebe:	50 91 51 02 	lds	r21, 0x0251
     ec2:	42 30       	cpi	r20, 0x02	; 2
     ec4:	51 05       	cpc	r21, r1
     ec6:	09 f5       	brne	.+66     	; 0xf0a <terminalCheck2+0xde>
	{
		left_degrees(30);
     ec8:	8e e1       	ldi	r24, 0x1E	; 30
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	8f dd       	rcall	.-1250   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ece:	86 e9       	ldi	r24, 0x96	; 150
     ed0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     ed4:	80 93 2a 01 	sts	0x012A, r24
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <terminalCheck2+0xb0>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
		left();
     eda:	1e db       	rcall	.-2500   	; 0x518 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	75 db       	rcall	.-2326   	; 0x5ca <ADC_Conversion>
     ee0:	82 33       	cpi	r24, 0x32	; 50
     ee2:	d8 f3       	brcs	.-10     	; 0xeda <terminalCheck2+0xae>
		left();
		//	_delay_ms(100);
		stop();
     ee4:	1f db       	rcall	.-2498   	; 0x524 <stop>
		dir=(dir+3)%4;
     ee6:	80 91 50 02 	lds	r24, 0x0250
     eea:	90 91 51 02 	lds	r25, 0x0251
     eee:	03 96       	adiw	r24, 0x03	; 3
     ef0:	83 70       	andi	r24, 0x03	; 3
     ef2:	90 78       	andi	r25, 0x80	; 128
     ef4:	99 23       	and	r25, r25
     ef6:	24 f4       	brge	.+8      	; 0xf00 <terminalCheck2+0xd4>
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	8c 6f       	ori	r24, 0xFC	; 252
     efc:	9f 6f       	ori	r25, 0xFF	; 255
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	90 93 51 02 	sts	0x0251, r25
     f04:	80 93 50 02 	sts	0x0250, r24
     f08:	53 c0       	rjmp	.+166    	; 0xfb0 <terminalCheck2+0x184>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     f0a:	02 97       	sbiw	r24, 0x02	; 2
     f0c:	30 f4       	brcc	.+12     	; 0xf1a <terminalCheck2+0xee>
     f0e:	80 91 50 02 	lds	r24, 0x0250
     f12:	90 91 51 02 	lds	r25, 0x0251
     f16:	02 97       	sbiw	r24, 0x02	; 2
     f18:	49 f0       	breq	.+18     	; 0xf2c <terminalCheck2+0x100>
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	38 f5       	brcc	.+78     	; 0xf6e <terminalCheck2+0x142>
     f20:	80 91 50 02 	lds	r24, 0x0250
     f24:	90 91 51 02 	lds	r25, 0x0251
     f28:	89 2b       	or	r24, r25
     f2a:	09 f5       	brne	.+66     	; 0xf6e <terminalCheck2+0x142>
		{
			right_degrees(30);
     f2c:	8e e1       	ldi	r24, 0x1E	; 30
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	66 dd       	rcall	.-1332   	; 0x9fe <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f32:	86 e9       	ldi	r24, 0x96	; 150
     f34:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     f38:	80 93 2a 01 	sts	0x012A, r24
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <terminalCheck2+0x114>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<50)
				right();
     f3e:	ef da       	rcall	.-2594   	; 0x51e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<50)
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	43 db       	rcall	.-2426   	; 0x5ca <ADC_Conversion>
     f44:	82 33       	cpi	r24, 0x32	; 50
     f46:	d8 f3       	brcs	.-10     	; 0xf3e <terminalCheck2+0x112>
				right();
			//	_delay_ms(100);
			stop();	
     f48:	ed da       	rcall	.-2598   	; 0x524 <stop>
			dir=(dir+1)%4;
     f4a:	80 91 50 02 	lds	r24, 0x0250
     f4e:	90 91 51 02 	lds	r25, 0x0251
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	83 70       	andi	r24, 0x03	; 3
     f56:	90 78       	andi	r25, 0x80	; 128
     f58:	99 23       	and	r25, r25
     f5a:	24 f4       	brge	.+8      	; 0xf64 <terminalCheck2+0x138>
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	8c 6f       	ori	r24, 0xFC	; 252
     f60:	9f 6f       	ori	r25, 0xFF	; 255
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	90 93 51 02 	sts	0x0251, r25
     f68:	80 93 50 02 	sts	0x0250, r24
     f6c:	21 c0       	rjmp	.+66     	; 0xfb0 <terminalCheck2+0x184>
		}
	else {
		left_degrees(150);
     f6e:	86 e9       	ldi	r24, 0x96	; 150
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	3c dd       	rcall	.-1416   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f74:	86 e9       	ldi	r24, 0x96	; 150
     f76:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     f7a:	80 93 2a 01 	sts	0x012A, r24
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <terminalCheck2+0x156>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<40)
		left();
     f80:	cb da       	rcall	.-2666   	; 0x518 <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<40)
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	22 db       	rcall	.-2492   	; 0x5ca <ADC_Conversion>
     f86:	88 32       	cpi	r24, 0x28	; 40
     f88:	d8 f3       	brcs	.-10     	; 0xf80 <terminalCheck2+0x154>
		left();
	//	_delay_ms(50);
		stop();
     f8a:	cc da       	rcall	.-2664   	; 0x524 <stop>
		dir=(dir+2)%4;
     f8c:	80 91 50 02 	lds	r24, 0x0250
     f90:	90 91 51 02 	lds	r25, 0x0251
     f94:	02 96       	adiw	r24, 0x02	; 2
     f96:	83 70       	andi	r24, 0x03	; 3
     f98:	90 78       	andi	r25, 0x80	; 128
     f9a:	99 23       	and	r25, r25
     f9c:	24 f4       	brge	.+8      	; 0xfa6 <terminalCheck2+0x17a>
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	8c 6f       	ori	r24, 0xFC	; 252
     fa2:	9f 6f       	ori	r25, 0xFF	; 255
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	90 93 51 02 	sts	0x0251, r25
     faa:	80 93 50 02 	sts	0x0250, r24
		lcd((char *)dir);
     fae:	39 de       	rcall	.-910    	; 0xc22 <lcd>
		}
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
     fb0:	c0 91 89 02 	lds	r28, 0x0289
     fb4:	d0 91 8a 02 	lds	r29, 0x028A
     fb8:	41 de       	rcall	.-894    	; 0xc3c <scan>
     fba:	cc 0f       	add	r28, r28
     fbc:	dd 1f       	adc	r29, r29
     fbe:	cc 0f       	add	r28, r28
     fc0:	dd 1f       	adc	r29, r29
     fc2:	c3 57       	subi	r28, 0x73	; 115
     fc4:	dd 4f       	sbci	r29, 0xFD	; 253
     fc6:	9b 83       	std	Y+3, r25	; 0x03
     fc8:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==-1)
     fca:	e0 91 89 02 	lds	r30, 0x0289
     fce:	f0 91 8a 02 	lds	r31, 0x028A
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	e3 57       	subi	r30, 0x73	; 115
     fdc:	fd 4f       	sbci	r31, 0xFD	; 253
     fde:	42 81       	ldd	r20, Z+2	; 0x02
     fe0:	53 81       	ldd	r21, Z+3	; 0x03
     fe2:	4f 3f       	cpi	r20, 0xFF	; 255
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	52 07       	cpc	r21, r18
     fe8:	41 f4       	brne	.+16     	; 0xffa <terminalCheck2+0x1ce>
		lcd_print(2,11,9, 1);
     fea:	21 e0       	ldi	r18, 0x01	; 1
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	49 e0       	ldi	r20, 0x09	; 9
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	6b e0       	ldi	r22, 0x0B	; 11
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	64 d9       	rcall	.-3384   	; 0x2c0 <lcd_print>
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <terminalCheck2+0x1d8>
	else
		lcd_print(2,11, term[ct][1], 1);
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	6b e0       	ldi	r22, 0x0B	; 11
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	5e d9       	rcall	.-3396   	; 0x2c0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1004:	4f ef       	ldi	r20, 0xFF	; 255
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	9c e2       	ldi	r25, 0x2C	; 44
    100a:	41 50       	subi	r20, 0x01	; 1
    100c:	80 40       	sbci	r24, 0x00	; 0
    100e:	90 40       	sbci	r25, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <terminalCheck2+0x1de>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <terminalCheck2+0x1e8>
    1014:	00 00       	nop
	_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1016:	80 91 89 02 	lds	r24, 0x0289
    101a:	90 91 8a 02 	lds	r25, 0x028A
    101e:	fc 01       	movw	r30, r24
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	e3 57       	subi	r30, 0x73	; 115
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	22 81       	ldd	r18, Z+2	; 0x02
    102e:	33 81       	ldd	r19, Z+3	; 0x03
    1030:	2f 3f       	cpi	r18, 0xFF	; 255
    1032:	4f ef       	ldi	r20, 0xFF	; 255
    1034:	34 07       	cpc	r19, r20
    1036:	51 f0       	breq	.+20     	; 0x104c <terminalCheck2+0x220>
    1038:	fc 01       	movw	r30, r24
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	e1 56       	subi	r30, 0x61	; 97
    1040:	fd 4f       	sbci	r31, 0xFD	; 253
    1042:	40 81       	ld	r20, Z
    1044:	51 81       	ldd	r21, Z+1	; 0x01
    1046:	24 17       	cp	r18, r20
    1048:	35 07       	cpc	r19, r21
    104a:	51 f4       	brne	.+20     	; 0x1060 <terminalCheck2+0x234>
		total--;
    104c:	20 91 01 02 	lds	r18, 0x0201
    1050:	30 91 02 02 	lds	r19, 0x0202
    1054:	21 50       	subi	r18, 0x01	; 1
    1056:	31 09       	sbc	r19, r1
    1058:	30 93 02 02 	sts	0x0202, r19
    105c:	20 93 01 02 	sts	0x0201, r18
	visited[ct] = 1;
    1060:	fc 01       	movw	r30, r24
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ea 59       	subi	r30, 0x9A	; 154
    1068:	fd 4f       	sbci	r31, 0xFD	; 253
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
	visitedCount++;
    1072:	80 91 54 02 	lds	r24, 0x0254
    1076:	90 91 55 02 	lds	r25, 0x0255
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	90 93 55 02 	sts	0x0255, r25
    1080:	80 93 54 02 	sts	0x0254, r24
}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <pick>:

void pick(int side)
{	
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
	lower(side);//lower
    1090:	d8 dc       	rcall	.-1616   	; 0xa42 <lower>
	open(side);
    1092:	8c 2f       	mov	r24, r28
    1094:	4d dd       	rcall	.-1382   	; 0xb30 <open>
	close(side);
    1096:	8c 2f       	mov	r24, r28
    1098:	83 dd       	rcall	.-1274   	; 0xba0 <close>
	elevate();//mid
    109a:	0f dd       	rcall	.-1506   	; 0xaba <elevate>
	armCount--;
    109c:	80 91 03 02 	lds	r24, 0x0203
    10a0:	90 91 04 02 	lds	r25, 0x0204
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	90 93 04 02 	sts	0x0204, r25
    10aa:	80 93 03 02 	sts	0x0203, r24
	if (side == 0)
    10ae:	cd 2b       	or	r28, r29
    10b0:	21 f4       	brne	.+8      	; 0x10ba <pick+0x30>
		lcd("pickRight");
    10b2:	8f e0       	ldi	r24, 0x0F	; 15
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	b5 dd       	rcall	.-1174   	; 0xc22 <lcd>
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <pick+0x36>
	else
		lcd("pickLeft");
    10ba:	89 e1       	ldi	r24, 0x19	; 25
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	b1 dd       	rcall	.-1182   	; 0xc22 <lcd>
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <drop>:
			}
		}
}

void drop(int side)
{
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
	lower(side);//lower
    10cc:	ba dc       	rcall	.-1676   	; 0xa42 <lower>
	open(side);
    10ce:	8c 2f       	mov	r24, r28
    10d0:	2f dd       	rcall	.-1442   	; 0xb30 <open>
	elevate();//mid
    10d2:	f3 dc       	rcall	.-1562   	; 0xaba <elevate>
	
	armCount++;
    10d4:	80 91 03 02 	lds	r24, 0x0203
    10d8:	90 91 04 02 	lds	r25, 0x0204
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	90 93 04 02 	sts	0x0204, r25
    10e2:	80 93 03 02 	sts	0x0203, r24
	if(side==0)
    10e6:	cd 2b       	or	r28, r29
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <drop+0x2c>
	lcd("dropRight");
    10ea:	82 e2       	ldi	r24, 0x22	; 34
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	99 dd       	rcall	.-1230   	; 0xc22 <lcd>
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <drop+0x32>
	else
	lcd("dropLeft");
    10f2:	8c e2       	ldi	r24, 0x2C	; 44
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	95 dd       	rcall	.-1238   	; 0xc22 <lcd>
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <predict>:
	adj = adjCount(ct);
}

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    10fe:	80 91 8d 02 	lds	r24, 0x028D
    1102:	90 91 8e 02 	lds	r25, 0x028E
    1106:	20 91 9f 02 	lds	r18, 0x029F
    110a:	30 91 a0 02 	lds	r19, 0x02A0
    110e:	82 17       	cp	r24, r18
    1110:	93 07       	cpc	r25, r19
    1112:	09 f0       	breq	.+2      	; 0x1116 <predict+0x18>
    1114:	5f c0       	rjmp	.+190    	; 0x11d4 <predict+0xd6>
    1116:	20 91 8f 02 	lds	r18, 0x028F
    111a:	30 91 90 02 	lds	r19, 0x0290
    111e:	82 17       	cp	r24, r18
    1120:	93 07       	cpc	r25, r19
    1122:	09 f0       	breq	.+2      	; 0x1126 <predict+0x28>
    1124:	57 c0       	rjmp	.+174    	; 0x11d4 <predict+0xd6>
    1126:	80 91 91 02 	lds	r24, 0x0291
    112a:	90 91 92 02 	lds	r25, 0x0292
    112e:	20 91 a1 02 	lds	r18, 0x02A1
    1132:	30 91 a2 02 	lds	r19, 0x02A2
    1136:	82 17       	cp	r24, r18
    1138:	93 07       	cpc	r25, r19
    113a:	09 f0       	breq	.+2      	; 0x113e <predict+0x40>
    113c:	4b c0       	rjmp	.+150    	; 0x11d4 <predict+0xd6>
    113e:	20 91 93 02 	lds	r18, 0x0293
    1142:	30 91 94 02 	lds	r19, 0x0294
    1146:	82 17       	cp	r24, r18
    1148:	93 07       	cpc	r25, r19
    114a:	09 f0       	breq	.+2      	; 0x114e <predict+0x50>
    114c:	43 c0       	rjmp	.+134    	; 0x11d4 <predict+0xd6>
    114e:	80 91 89 02 	lds	r24, 0x0289
    1152:	90 91 8a 02 	lds	r25, 0x028A
    1156:	fc 01       	movw	r30, r24
    1158:	ee 0f       	add	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	e3 57       	subi	r30, 0x73	; 115
    1162:	fd 4f       	sbci	r31, 0xFD	; 253
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	fc 01       	movw	r30, r24
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	e1 56       	subi	r30, 0x61	; 97
    1170:	fd 4f       	sbci	r31, 0xFD	; 253
    1172:	40 81       	ld	r20, Z
    1174:	51 81       	ldd	r21, Z+1	; 0x01
    1176:	24 17       	cp	r18, r20
    1178:	35 07       	cpc	r19, r21
    117a:	61 f5       	brne	.+88     	; 0x11d4 <predict+0xd6>
    117c:	fc 01       	movw	r30, r24
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	e3 57       	subi	r30, 0x73	; 115
    1188:	fd 4f       	sbci	r31, 0xFD	; 253
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	01 f5       	brne	.+64     	; 0x11d4 <predict+0xd6>
    1194:	80 91 85 02 	lds	r24, 0x0285
    1198:	90 91 86 02 	lds	r25, 0x0286
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	d1 f4       	brne	.+52     	; 0x11d4 <predict+0xd6>
    11a0:	80 91 87 02 	lds	r24, 0x0287
    11a4:	90 91 88 02 	lds	r25, 0x0288
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	a1 f4       	brne	.+40     	; 0x11d4 <predict+0xd6>
    11ac:	80 91 b3 02 	lds	r24, 0x02B3
    11b0:	90 91 b4 02 	lds	r25, 0x02B4
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	71 f4       	brne	.+28     	; 0x11d4 <predict+0xd6>
    11b8:	80 91 b5 02 	lds	r24, 0x02B5
    11bc:	90 91 b6 02 	lds	r25, 0x02B6
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	41 f4       	brne	.+16     	; 0x11d4 <predict+0xd6>
		sorted = total;
    11c4:	80 91 01 02 	lds	r24, 0x0201
    11c8:	90 91 02 02 	lds	r25, 0x0202
    11cc:	90 93 59 02 	sts	0x0259, r25
    11d0:	80 93 58 02 	sts	0x0258, r24
    11d4:	08 95       	ret

000011d6 <__init__>:
}


void __init__()
{
	init_devices();
    11d6:	1c dc       	rcall	.-1992   	; 0xa10 <init_devices>
	lcd_set_4bit();
    11d8:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    11dc:	0f d8       	rcall	.-4066   	; 0x1fc <lcd_init>
	color_sensor_scaling();
    11de:	9f da       	rcall	.-2754   	; 0x71e <color_sensor_scaling>
	setIndicatorAndColor();
    11e0:	c9 dd       	rcall	.-1134   	; 0xd74 <setIndicatorAndColor>
	threshold=6000;
    11e2:	80 e7       	ldi	r24, 0x70	; 112
    11e4:	97 e1       	ldi	r25, 0x17	; 23
    11e6:	90 93 6f 02 	sts	0x026F, r25
    11ea:	80 93 6e 02 	sts	0x026E, r24
	servo_2(90);
    11ee:	8a e5       	ldi	r24, 0x5A	; 90
    11f0:	5b ca       	rjmp	.-2890   	; 0x6a8 <servo_2>
    11f2:	08 95       	ret

000011f4 <node>:
*************************************************
******************BLACK*LINE***********************
**************************************************/
void node()
{
	lcd_print(1,1,1,1);
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	5f d8       	rcall	.-3906   	; 0x2c0 <lcd_print>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1202:	86 e9       	ldi	r24, 0x96	; 150
    1204:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1208:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	forward_mm(60);
    120c:	8c e3       	ldi	r24, 0x3C	; 60
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	db cb       	rjmp	.-2122   	; 0x9c8 <forward_mm>
    1212:	08 95       	ret

00001214 <Delay>:
}
/*************************GULLA CODE**Blackline Forward***********/

char Delay(int tim)
{
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	8c 01       	movw	r16, r24
	int i;
	for(i=0;i<tim && ADC_Conversion(2)<0x28;i++)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40));i++)
    121e:	18 16       	cp	r1, r24
    1220:	19 06       	cpc	r1, r25
    1222:	8c f4       	brge	.+34     	; 0x1246 <Delay+0x32>
    1224:	c0 e0       	ldi	r28, 0x00	; 0
    1226:	d0 e0       	ldi	r29, 0x00	; 0
    1228:	09 c0       	rjmp	.+18     	; 0x123c <Delay+0x28>
    122a:	86 e6       	ldi	r24, 0x66	; 102
    122c:	9e e0       	ldi	r25, 0x0E	; 14
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <Delay+0x1a>
    1232:	00 00       	nop
    1234:	21 96       	adiw	r28, 0x01	; 1
    1236:	c0 17       	cp	r28, r16
    1238:	d1 07       	cpc	r29, r17
    123a:	39 f0       	breq	.+14     	; 0x124a <Delay+0x36>
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	c5 d9       	rcall	.-3190   	; 0x5ca <ADC_Conversion>
    1240:	88 32       	cpi	r24, 0x28	; 40
    1242:	98 f3       	brcs	.-26     	; 0x122a <Delay+0x16>
    1244:	02 c0       	rjmp	.+4      	; 0x124a <Delay+0x36>
    1246:	c0 e0       	ldi	r28, 0x00	; 0
    1248:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//set_color();
		_delay_ms(1);
	}
	stop();
    124a:	6c d9       	rcall	.-3368   	; 0x524 <stop>
	if(i<tim)
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	c0 17       	cp	r28, r16
    1250:	d1 07       	cpc	r29, r17
    1252:	0c f0       	brlt	.+2      	; 0x1256 <Delay+0x42>
    1254:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else return 0;
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <semiCorrect>:

void semiCorrect()
{
	
	//lcd_print(1,2,1,1);
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
    1260:	80 91 4c 02 	lds	r24, 0x024C
    1264:	89 32       	cpi	r24, 0x29	; 41
    1266:	50 f0       	brcs	.+20     	; 0x127c <semiCorrect+0x1c>
    1268:	90 91 4d 02 	lds	r25, 0x024D
    126c:	99 32       	cpi	r25, 0x29	; 41
    126e:	20 f4       	brcc	.+8      	; 0x1278 <semiCorrect+0x18>
    1270:	90 91 4b 02 	lds	r25, 0x024B
    1274:	99 32       	cpi	r25, 0x29	; 41
    1276:	10 f0       	brcs	.+4      	; 0x127c <semiCorrect+0x1c>
	{
		node();
    1278:	bd cf       	rjmp	.-134    	; 0x11f4 <node>
		return;
    127a:	08 95       	ret
	}
	if(Center_white_line<40)
    127c:	88 32       	cpi	r24, 0x28	; 40
    127e:	d8 f4       	brcc	.+54     	; 0x12b6 <semiCorrect+0x56>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
    1280:	80 91 4d 02 	lds	r24, 0x024D
    1284:	89 32       	cpi	r24, 0x29	; 41
    1286:	58 f0       	brcs	.+22     	; 0x129e <semiCorrect+0x3e>
    1288:	90 91 4b 02 	lds	r25, 0x024B
    128c:	98 32       	cpi	r25, 0x28	; 40
    128e:	38 f4       	brcc	.+14     	; 0x129e <semiCorrect+0x3e>
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,1,1);
				left();
    1290:	43 d9       	rcall	.-3450   	; 0x518 <left>
				set_color();
    1292:	ca db       	rcall	.-2156   	; 0xa28 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
    1294:	80 91 4c 02 	lds	r24, 0x024C
    1298:	88 32       	cpi	r24, 0x28	; 40
    129a:	d0 f3       	brcs	.-12     	; 0x1290 <semiCorrect+0x30>
    129c:	08 95       	ret
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
    129e:	90 91 4b 02 	lds	r25, 0x024B
    12a2:	99 32       	cpi	r25, 0x29	; 41
    12a4:	40 f0       	brcs	.+16     	; 0x12b6 <semiCorrect+0x56>
    12a6:	88 32       	cpi	r24, 0x28	; 40
    12a8:	30 f4       	brcc	.+12     	; 0x12b6 <semiCorrect+0x56>
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,2,1);
				right();
    12aa:	39 d9       	rcall	.-3470   	; 0x51e <right>
				set_color();
    12ac:	bd db       	rcall	.-2182   	; 0xa28 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
    12ae:	80 91 4c 02 	lds	r24, 0x024C
    12b2:	88 32       	cpi	r24, 0x28	; 40
    12b4:	d0 f3       	brcs	.-12     	; 0x12aa <semiCorrect+0x4a>
    12b6:	08 95       	ret

000012b8 <correct>:
	}
	//lcd_print(1,2,0,1);
	
}
void correct()
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
	unsigned int d=2;
	unsigned int i=50;
	Degrees=5;
    12bc:	85 e0       	ldi	r24, 0x05	; 5
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	90 93 75 02 	sts	0x0275, r25
    12c4:	80 93 74 02 	sts	0x0274, r24
	stop();
    12c8:	2d d9       	rcall	.-3494   	; 0x524 <stop>
			i+=50;
		}
	}*/
	//else
	
		lf=1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	80 93 4a 02 	sts	0x024A, r24
	
}
void correct()
{
	unsigned int d=2;
	unsigned int i=50;
    12d0:	c2 e3       	ldi	r28, 0x32	; 50
    12d2:	d0 e0       	ldi	r29, 0x00	; 0
	//else
	
		lf=1;
		while(1)
		{
			left();
    12d4:	21 d9       	rcall	.-3518   	; 0x518 <left>
			if(Delay(i))
    12d6:	ce 01       	movw	r24, r28
    12d8:	9d df       	rcall	.-198    	; 0x1214 <Delay>
    12da:	81 11       	cpse	r24, r1
    12dc:	26 c0       	rjmp	.+76     	; 0x132a <correct+0x72>
				return;
			stop();
    12de:	22 d9       	rcall	.-3516   	; 0x524 <stop>
			lcd_print(1,1,1,1);
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
			//set_color();
			semiCorrect();
    12f0:	b7 df       	rcall	.-146    	; 0x1260 <semiCorrect>
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	6a d9       	rcall	.-3372   	; 0x5ca <ADC_Conversion>
    12f6:	89 32       	cpi	r24, 0x29	; 41
    12f8:	b8 f4       	brcc	.+46     	; 0x1328 <correct+0x70>
				break;
			i+=50;
			right();
    12fa:	11 d9       	rcall	.-3550   	; 0x51e <right>
			if(Delay(i))
    12fc:	ce 01       	movw	r24, r28
    12fe:	c2 96       	adiw	r24, 0x32	; 50
    1300:	89 df       	rcall	.-238    	; 0x1214 <Delay>
    1302:	81 11       	cpse	r24, r1
    1304:	12 c0       	rjmp	.+36     	; 0x132a <correct+0x72>
				return;
			stop();
    1306:	0e d9       	rcall	.-3556   	; 0x524 <stop>
			lcd_print(1,1,2,1);
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	42 e0       	ldi	r20, 0x02	; 2
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
			semiCorrect();
    1318:	a3 df       	rcall	.-186    	; 0x1260 <semiCorrect>
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	56 d9       	rcall	.-3412   	; 0x5ca <ADC_Conversion>
    131e:	89 32       	cpi	r24, 0x29	; 41
    1320:	18 f4       	brcc	.+6      	; 0x1328 <correct+0x70>
				break;
			//d*=2;
			//set_color();
			//i+=2;
			i+=50;
    1322:	cc 59       	subi	r28, 0x9C	; 156
    1324:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
    1326:	d6 cf       	rjmp	.-84     	; 0x12d4 <correct+0x1c>
	//lcd("-");
	stop();
    1328:	fd d8       	rcall	.-3590   	; 0x524 <stop>
	return;
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <noNatak>:
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1330:	88 ec       	ldi	r24, 0xC8	; 200
    1332:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1336:	80 93 2a 01 	sts	0x012A, r24
	int flag=0;
	//buzzer_on();
	//lcd_print(2,1,7,1);
	//lcd("no");
	velocity(correct_v,correct_v);
	if(Center_white_line<40)
    133a:	80 91 4c 02 	lds	r24, 0x024C
    133e:	88 32       	cpi	r24, 0x28	; 40
    1340:	80 f5       	brcc	.+96     	; 0x13a2 <noNatak+0x72>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
    1342:	80 91 4d 02 	lds	r24, 0x024D
    1346:	89 32       	cpi	r24, 0x29	; 41
    1348:	a0 f0       	brcs	.+40     	; 0x1372 <noNatak+0x42>
    134a:	90 91 4b 02 	lds	r25, 0x024B
    134e:	98 32       	cpi	r25, 0x28	; 40
    1350:	80 f4       	brcc	.+32     	; 0x1372 <noNatak+0x42>
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <noNatak+0x28>
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
    1354:	e1 d8       	rcall	.-3646   	; 0x518 <left>
				set_color();
    1356:	68 db       	rcall	.-2352   	; 0xa28 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
    1358:	80 91 4c 02 	lds	r24, 0x024C
    135c:	89 32       	cpi	r24, 0x29	; 41
    135e:	d0 f3       	brcs	.-12     	; 0x1354 <noNatak+0x24>
    1360:	80 91 4d 02 	lds	r24, 0x024D
    1364:	88 32       	cpi	r24, 0x28	; 40
    1366:	b0 f7       	brcc	.-20     	; 0x1354 <noNatak+0x24>
    1368:	80 91 4b 02 	lds	r24, 0x024B
    136c:	88 32       	cpi	r24, 0x28	; 40
    136e:	90 f7       	brcc	.-28     	; 0x1354 <noNatak+0x24>
    1370:	2b c0       	rjmp	.+86     	; 0x13c8 <noNatak+0x98>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
    1372:	90 91 4b 02 	lds	r25, 0x024B
    1376:	99 32       	cpi	r25, 0x29	; 41
    1378:	90 f0       	brcs	.+36     	; 0x139e <noNatak+0x6e>
    137a:	88 32       	cpi	r24, 0x28	; 40
    137c:	80 f4       	brcc	.+32     	; 0x139e <noNatak+0x6e>
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <noNatak+0x54>
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
    1380:	ce d8       	rcall	.-3684   	; 0x51e <right>
				set_color();
    1382:	52 db       	rcall	.-2396   	; 0xa28 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
    1384:	80 91 4c 02 	lds	r24, 0x024C
    1388:	89 32       	cpi	r24, 0x29	; 41
    138a:	d0 f3       	brcs	.-12     	; 0x1380 <noNatak+0x50>
    138c:	80 91 4d 02 	lds	r24, 0x024D
    1390:	88 32       	cpi	r24, 0x28	; 40
    1392:	b0 f7       	brcc	.-20     	; 0x1380 <noNatak+0x50>
    1394:	80 91 4b 02 	lds	r24, 0x024B
    1398:	88 32       	cpi	r24, 0x28	; 40
    139a:	90 f7       	brcc	.-28     	; 0x1380 <noNatak+0x50>
    139c:	15 c0       	rjmp	.+42     	; 0x13c8 <noNatak+0x98>
			
		}
		else
		{
			flag=1;
			correct();
    139e:	8c df       	rcall	.-232    	; 0x12b8 <correct>
    13a0:	13 c0       	rjmp	.+38     	; 0x13c8 <noNatak+0x98>
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
    13a2:	80 91 4d 02 	lds	r24, 0x024D
    13a6:	89 32       	cpi	r24, 0x29	; 41
    13a8:	30 f0       	brcs	.+12     	; 0x13b6 <noNatak+0x86>
    13aa:	90 91 4b 02 	lds	r25, 0x024B
    13ae:	98 32       	cpi	r25, 0x28	; 40
    13b0:	10 f4       	brcc	.+4      	; 0x13b6 <noNatak+0x86>
		{
			flag=1;
			node();
    13b2:	20 cf       	rjmp	.-448    	; 0x11f4 <node>
			return;
    13b4:	08 95       	ret
				soft_right_2();
				set_color();
			}
			lcd("-");*/
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
    13b6:	88 32       	cpi	r24, 0x28	; 40
    13b8:	30 f4       	brcc	.+12     	; 0x13c6 <noNatak+0x96>
    13ba:	80 91 4b 02 	lds	r24, 0x024B
    13be:	89 32       	cpi	r24, 0x29	; 41
    13c0:	10 f0       	brcs	.+4      	; 0x13c6 <noNatak+0x96>
		{
			flag=1;
			node();
    13c2:	18 cf       	rjmp	.-464    	; 0x11f4 <node>
			return;
    13c4:	08 95       	ret
			lcd("-");*/
		}
		else
		{
			flag=1;
			correct();
    13c6:	78 df       	rcall	.-272    	; 0x12b8 <correct>
		}
	}
	if(flag==0)	
		correct();
	stop();
    13c8:	ad c8       	rjmp	.-3750   	; 0x524 <stop>
    13ca:	08 95       	ret

000013cc <forwardJaa>:
	//lcd_print(2,1,6,1);
	//buzzer_off();
	return;
}
void forwardJaa()
{
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13d6:	08 e2       	ldi	r16, 0x28	; 40
    13d8:	11 e0       	ldi	r17, 0x01	; 1
    13da:	0f 2e       	mov	r0, r31
    13dc:	f0 ef       	ldi	r31, 0xF0	; 240
    13de:	ff 2e       	mov	r15, r31
    13e0:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    13e2:	ca e2       	ldi	r28, 0x2A	; 42
    13e4:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned int vi=0;
	do
	{
		forward();
    13e6:	92 d8       	rcall	.-3804   	; 0x50c <forward>
		//_delay_ms(200);
		set_color();
    13e8:	1f db       	rcall	.-2498   	; 0xa28 <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
    13ea:	80 91 4c 02 	lds	r24, 0x024C
    13ee:	89 32       	cpi	r24, 0x29	; 41
    13f0:	50 f0       	brcs	.+20     	; 0x1406 <forwardJaa+0x3a>
    13f2:	80 91 4d 02 	lds	r24, 0x024D
    13f6:	89 32       	cpi	r24, 0x29	; 41
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <forwardJaa+0x36>
    13fa:	80 91 4b 02 	lds	r24, 0x024B
    13fe:	89 32       	cpi	r24, 0x29	; 41
    1400:	10 f0       	brcs	.+4      	; 0x1406 <forwardJaa+0x3a>
		{
			node();
    1402:	f8 de       	rcall	.-528    	; 0x11f4 <node>
			return;
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <forwardJaa+0x5c>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1406:	f8 01       	movw	r30, r16
    1408:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    140a:	f8 82       	st	Y, r15
		}
		velocity(240,240);
		//velocity(v+vi,v+vi);
		//i+=20;
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
    140c:	80 91 4c 02 	lds	r24, 0x024C
    1410:	89 32       	cpi	r24, 0x29	; 41
    1412:	40 f0       	brcs	.+16     	; 0x1424 <forwardJaa+0x58>
    1414:	80 91 4d 02 	lds	r24, 0x024D
    1418:	88 32       	cpi	r24, 0x28	; 40
    141a:	20 f4       	brcc	.+8      	; 0x1424 <forwardJaa+0x58>
    141c:	80 91 4b 02 	lds	r24, 0x024B
    1420:	88 32       	cpi	r24, 0x28	; 40
    1422:	08 f3       	brcs	.-62     	; 0x13e6 <forwardJaa+0x1a>
	
	noNatak();
    1424:	85 df       	rcall	.-246    	; 0x1330 <noNatak>
	forwardJaa();
    1426:	d2 df       	rcall	.-92     	; 0x13cc <forwardJaa>
	return;
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	08 95       	ret

00001434 <front>:
	//buzzer();
	//_delay_ms(1000);
}
void front()
{
	forwardJaa();
    1434:	cb df       	rcall	.-106    	; 0x13cc <forwardJaa>
	cost++;
    1436:	80 91 78 02 	lds	r24, 0x0278
    143a:	90 91 79 02 	lds	r25, 0x0279
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	90 93 79 02 	sts	0x0279, r25
    1444:	80 93 78 02 	sts	0x0278, r24
    1448:	08 95       	ret

0000144a <turnRight>:
	return;
}
/*************************END GULLA CODE*************/
void turnRight()	//turns the robo right
{
	dir=99;
    144a:	83 e6       	ldi	r24, 0x63	; 99
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	90 93 51 02 	sts	0x0251, r25
    1452:	80 93 50 02 	sts	0x0250, r24
	ot=99;
    1456:	90 93 53 02 	sts	0x0253, r25
    145a:	80 93 52 02 	sts	0x0252, r24
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    145e:	86 e9       	ldi	r24, 0x96	; 150
    1460:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1464:	80 93 2a 01 	sts	0x012A, r24
		right_degrees(90);
	}
	else
	{
		velocity(turn_v, turn_v);
		right_degrees(30);
    1468:	8e e1       	ldi	r24, 0x1E	; 30
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	c8 da       	rcall	.-2672   	; 0x9fe <right_degrees>
		
		while (ADC_Conversion(2)<50)
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <turnRight+0x28>
			right();
    1470:	56 d8       	rcall	.-3924   	; 0x51e <right>
	else
	{
		velocity(turn_v, turn_v);
		right_degrees(30);
		
		while (ADC_Conversion(2)<50)
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	aa d8       	rcall	.-3756   	; 0x5ca <ADC_Conversion>
    1476:	82 33       	cpi	r24, 0x32	; 50
    1478:	d8 f3       	brcs	.-10     	; 0x1470 <turnRight+0x26>
    147a:	29 e9       	ldi	r18, 0x99	; 153
    147c:	89 e9       	ldi	r24, 0x99	; 153
    147e:	93 e0       	ldi	r25, 0x03	; 3
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	80 40       	sbci	r24, 0x00	; 0
    1484:	90 40       	sbci	r25, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <turnRight+0x36>
    1488:	00 00       	nop
			right();
		_delay_ms(80);
		stop();	
    148a:	4c d8       	rcall	.-3944   	; 0x524 <stop>
	}
	lcd("Right turn");
    148c:	85 e3       	ldi	r24, 0x35	; 53
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	c8 db       	rcall	.-2160   	; 0xc22 <lcd>
	//_delay_ms(2000);
	dir = (dir + 1) % 4;
    1492:	80 91 50 02 	lds	r24, 0x0250
    1496:	90 91 51 02 	lds	r25, 0x0251
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	83 70       	andi	r24, 0x03	; 3
    149e:	90 78       	andi	r25, 0x80	; 128
    14a0:	99 23       	and	r25, r25
    14a2:	24 f4       	brge	.+8      	; 0x14ac <turnRight+0x62>
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	8c 6f       	ori	r24, 0xFC	; 252
    14a8:	9f 6f       	ori	r25, 0xFF	; 255
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	90 93 51 02 	sts	0x0251, r25
    14b0:	80 93 50 02 	sts	0x0250, r24
	//printf("Turn Right \n");
	angle += 90;
    14b4:	80 91 9d 02 	lds	r24, 0x029D
    14b8:	90 91 9e 02 	lds	r25, 0x029E
    14bc:	86 5a       	subi	r24, 0xA6	; 166
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	90 93 9e 02 	sts	0x029E, r25
    14c4:	80 93 9d 02 	sts	0x029D, r24
	buzzer();
    14c8:	a0 cb       	rjmp	.-2240   	; 0xc0a <buzzer>
    14ca:	08 95       	ret

000014cc <turnLeft>:
}
void turnLeft()	//turns the robo left
{
	
	if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 3)))
    14cc:	80 91 50 02 	lds	r24, 0x0250
    14d0:	90 91 51 02 	lds	r25, 0x0251
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	39 f4       	brne	.+14     	; 0x14e8 <turnLeft+0x1c>
    14da:	80 91 52 02 	lds	r24, 0x0252
    14de:	90 91 53 02 	lds	r25, 0x0253
    14e2:	02 97       	sbiw	r24, 0x02	; 2
    14e4:	98 f4       	brcc	.+38     	; 0x150c <turnLeft+0x40>
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <turnLeft+0x2e>
    14e8:	03 97       	sbiw	r24, 0x03	; 3
    14ea:	81 f4       	brne	.+32     	; 0x150c <turnLeft+0x40>
    14ec:	80 91 52 02 	lds	r24, 0x0252
    14f0:	90 91 53 02 	lds	r25, 0x0253
    14f4:	02 97       	sbiw	r24, 0x02	; 2
    14f6:	02 97       	sbiw	r24, 0x02	; 2
    14f8:	48 f4       	brcc	.+18     	; 0x150c <turnLeft+0x40>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14fa:	86 e9       	ldi	r24, 0x96	; 150
    14fc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1500:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(90);
    1504:	8a e5       	ldi	r24, 0x5A	; 90
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	71 da       	rcall	.-2846   	; 0x9ec <left_degrees>
    150a:	11 c0       	rjmp	.+34     	; 0x152e <turnLeft+0x62>
	}
	else
	{
		left_degrees(30);
    150c:	8e e1       	ldi	r24, 0x1E	; 30
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	6d da       	rcall	.-2854   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1512:	86 e9       	ldi	r24, 0x96	; 150
    1514:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1518:	80 93 2a 01 	sts	0x012A, r24
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <turnLeft+0x56>
		velocity(turn_v,turn_v);
		while (ADC_Conversion(2)<50)
			left();
    151e:	0e 94 8c 02 	call	0x518	; 0x518 <left>
	}
	else
	{
		left_degrees(30);
		velocity(turn_v,turn_v);
		while (ADC_Conversion(2)<50)
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	52 d8       	rcall	.-3932   	; 0x5ca <ADC_Conversion>
    1526:	82 33       	cpi	r24, 0x32	; 50
    1528:	d0 f3       	brcs	.-12     	; 0x151e <turnLeft+0x52>
			left();
		//_delay_ms(100);
		stop();
    152a:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	}
	lcd("Left turn");
    152e:	80 e4       	ldi	r24, 0x40	; 64
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	77 db       	rcall	.-2322   	; 0xc22 <lcd>
	//_delay_ms(2000);
	dir = (dir + 3) % 4;
    1534:	80 91 50 02 	lds	r24, 0x0250
    1538:	90 91 51 02 	lds	r25, 0x0251
    153c:	03 96       	adiw	r24, 0x03	; 3
    153e:	83 70       	andi	r24, 0x03	; 3
    1540:	90 78       	andi	r25, 0x80	; 128
    1542:	99 23       	and	r25, r25
    1544:	24 f4       	brge	.+8      	; 0x154e <turnLeft+0x82>
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	8c 6f       	ori	r24, 0xFC	; 252
    154a:	9f 6f       	ori	r25, 0xFF	; 255
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	90 93 51 02 	sts	0x0251, r25
    1552:	80 93 50 02 	sts	0x0250, r24
	//printf("Turn Left\n");
	angle += 90;
    1556:	80 91 9d 02 	lds	r24, 0x029D
    155a:	90 91 9e 02 	lds	r25, 0x029E
    155e:	86 5a       	subi	r24, 0xA6	; 166
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	90 93 9e 02 	sts	0x029E, r25
    1566:	80 93 9d 02 	sts	0x029D, r24
	buzzer();
    156a:	4f cb       	rjmp	.-2402   	; 0xc0a <buzzer>
    156c:	08 95       	ret

0000156e <turn>:
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
	}
	*/
	if (dir == 0 && (ot == 2 || ot == 3))
    156e:	80 91 50 02 	lds	r24, 0x0250
    1572:	90 91 51 02 	lds	r25, 0x0251
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	81 f4       	brne	.+32     	; 0x159a <turn+0x2c>
    157a:	80 91 52 02 	lds	r24, 0x0252
    157e:	90 91 53 02 	lds	r25, 0x0253
    1582:	02 97       	sbiw	r24, 0x02	; 2
    1584:	02 97       	sbiw	r24, 0x02	; 2
    1586:	d0 f4       	brcc	.+52     	; 0x15bc <turn+0x4e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1588:	86 e9       	ldi	r24, 0x96	; 150
    158a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    158e:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
    1592:	84 eb       	ldi	r24, 0xB4	; 180
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	2a da       	rcall	.-2988   	; 0x9ec <left_degrees>
    1598:	23 c0       	rjmp	.+70     	; 0x15e0 <turn+0x72>
	}
	else if (dir == 2 && (ot == 0 || ot == 1))
    159a:	02 97       	sbiw	r24, 0x02	; 2
    159c:	79 f4       	brne	.+30     	; 0x15bc <turn+0x4e>
    159e:	80 91 52 02 	lds	r24, 0x0252
    15a2:	90 91 53 02 	lds	r25, 0x0253
    15a6:	02 97       	sbiw	r24, 0x02	; 2
    15a8:	48 f4       	brcc	.+18     	; 0x15bc <turn+0x4e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15aa:	86 e9       	ldi	r24, 0x96	; 150
    15ac:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    15b0:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
    15b4:	84 eb       	ldi	r24, 0xB4	; 180
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	19 da       	rcall	.-3022   	; 0x9ec <left_degrees>
    15ba:	12 c0       	rjmp	.+36     	; 0x15e0 <turn+0x72>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15bc:	86 e9       	ldi	r24, 0x96	; 150
    15be:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    15c2:	80 93 2a 01 	sts	0x012A, r24
	}
	else
	{
		velocity(turn_v, turn_v);
		left_degrees(150);
    15c6:	86 e9       	ldi	r24, 0x96	; 150
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	10 da       	rcall	.-3040   	; 0x9ec <left_degrees>
		while (ADC_Conversion(2)<50)
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <turn+0x64>
			left();
    15ce:	0e 94 8c 02 	call	0x518	; 0x518 <left>
	}
	else
	{
		velocity(turn_v, turn_v);
		left_degrees(150);
		while (ADC_Conversion(2)<50)
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    15d8:	82 33       	cpi	r24, 0x32	; 50
    15da:	c8 f3       	brcs	.-14     	; 0x15ce <turn+0x60>
			left();
		stop();
    15dc:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	}
	lcd("turn");
    15e0:	85 e4       	ldi	r24, 0x45	; 69
    15e2:	92 e0       	ldi	r25, 0x02	; 2
    15e4:	1e db       	rcall	.-2500   	; 0xc22 <lcd>
	//_delay_ms(2000);
	dir = (dir + 2) % 4;
    15e6:	80 91 50 02 	lds	r24, 0x0250
    15ea:	90 91 51 02 	lds	r25, 0x0251
    15ee:	02 96       	adiw	r24, 0x02	; 2
    15f0:	83 70       	andi	r24, 0x03	; 3
    15f2:	90 78       	andi	r25, 0x80	; 128
    15f4:	99 23       	and	r25, r25
    15f6:	24 f4       	brge	.+8      	; 0x1600 <turn+0x92>
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	8c 6f       	ori	r24, 0xFC	; 252
    15fc:	9f 6f       	ori	r25, 0xFF	; 255
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	90 93 51 02 	sts	0x0251, r25
    1604:	80 93 50 02 	sts	0x0250, r24
	//printf("Turn\n");
	angle += 180;
    1608:	80 91 9d 02 	lds	r24, 0x029D
    160c:	90 91 9e 02 	lds	r25, 0x029E
    1610:	8c 54       	subi	r24, 0x4C	; 76
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	90 93 9e 02 	sts	0x029E, r25
    1618:	80 93 9d 02 	sts	0x029D, r24
    161c:	08 95       	ret

0000161e <traverseToSort>:
	cost++;
	//printf("Front\n");
}

void traverseToSort(int a, int b)
{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	ec 01       	movw	r28, r24

	if (flag == 1)
    1624:	80 91 56 02 	lds	r24, 0x0256
    1628:	90 91 57 02 	lds	r25, 0x0257
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	21 f4       	brne	.+8      	; 0x1638 <traverseToSort+0x1a>
		flag = 0;
    1630:	10 92 57 02 	sts	0x0257, r1
    1634:	10 92 56 02 	sts	0x0256, r1
	if (a == 4 || a == 5)
    1638:	ce 01       	movw	r24, r28
    163a:	04 97       	sbiw	r24, 0x04	; 4
    163c:	02 97       	sbiw	r24, 0x02	; 2
    163e:	88 f5       	brcc	.+98     	; 0x16a2 <traverseToSort+0x84>
	{
		if ((a == 4 && dir == 0) || (a == 5 && dir == 2))
    1640:	c4 30       	cpi	r28, 0x04	; 4
    1642:	d1 05       	cpc	r29, r1
    1644:	39 f4       	brne	.+14     	; 0x1654 <traverseToSort+0x36>
    1646:	80 91 50 02 	lds	r24, 0x0250
    164a:	90 91 51 02 	lds	r25, 0x0251
    164e:	89 2b       	or	r24, r25
    1650:	51 f0       	breq	.+20     	; 0x1666 <traverseToSort+0x48>
    1652:	0b c0       	rjmp	.+22     	; 0x166a <traverseToSort+0x4c>
    1654:	c5 30       	cpi	r28, 0x05	; 5
    1656:	d1 05       	cpc	r29, r1
    1658:	41 f4       	brne	.+16     	; 0x166a <traverseToSort+0x4c>
    165a:	80 91 50 02 	lds	r24, 0x0250
    165e:	90 91 51 02 	lds	r25, 0x0251
    1662:	02 97       	sbiw	r24, 0x02	; 2
    1664:	11 f4       	brne	.+4      	; 0x166a <traverseToSort+0x4c>
			turnRight();
    1666:	f1 de       	rcall	.-542    	; 0x144a <turnRight>
    1668:	01 c0       	rjmp	.+2      	; 0x166c <traverseToSort+0x4e>
		else turnLeft();
    166a:	30 df       	rcall	.-416    	; 0x14cc <turnLeft>
		front();
    166c:	e3 de       	rcall	.-570    	; 0x1434 <front>
		front();
    166e:	e2 de       	rcall	.-572    	; 0x1434 <front>
		if (a == 4)
    1670:	24 97       	sbiw	r28, 0x04	; 4
    1672:	39 f4       	brne	.+14     	; 0x1682 <traverseToSort+0x64>
			ot = 5;
    1674:	85 e0       	ldi	r24, 0x05	; 5
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	90 93 53 02 	sts	0x0253, r25
    167c:	80 93 52 02 	sts	0x0252, r24
    1680:	06 c0       	rjmp	.+12     	; 0x168e <traverseToSort+0x70>
		else ot = 4;
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	90 93 53 02 	sts	0x0253, r25
    168a:	80 93 52 02 	sts	0x0252, r24
		cost = cost + 2;
    168e:	80 91 78 02 	lds	r24, 0x0278
    1692:	90 91 79 02 	lds	r25, 0x0279
    1696:	02 96       	adiw	r24, 0x02	; 2
    1698:	90 93 79 02 	sts	0x0279, r25
    169c:	80 93 78 02 	sts	0x0278, r24
    16a0:	45 c0       	rjmp	.+138    	; 0x172c <traverseToSort+0x10e>
	}
	else{
		if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 2)))
    16a2:	80 91 50 02 	lds	r24, 0x0250
    16a6:	90 91 51 02 	lds	r25, 0x0251
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	39 f4       	brne	.+14     	; 0x16be <traverseToSort+0xa0>
    16b0:	80 91 52 02 	lds	r24, 0x0252
    16b4:	90 91 53 02 	lds	r25, 0x0253
    16b8:	02 97       	sbiw	r24, 0x02	; 2
    16ba:	78 f4       	brcc	.+30     	; 0x16da <traverseToSort+0xbc>
    16bc:	09 c0       	rjmp	.+18     	; 0x16d0 <traverseToSort+0xb2>
    16be:	03 97       	sbiw	r24, 0x03	; 3
    16c0:	99 f4       	brne	.+38     	; 0x16e8 <traverseToSort+0xca>
    16c2:	80 91 52 02 	lds	r24, 0x0252
    16c6:	90 91 53 02 	lds	r25, 0x0253
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	91 05       	cpc	r25, r1
    16ce:	11 f4       	brne	.+4      	; 0x16d4 <traverseToSort+0xb6>
		{
			turnRight();
    16d0:	bc de       	rcall	.-648    	; 0x144a <turnRight>
		else ot = 4;
		cost = cost + 2;
	}
	else{
		if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 2)))
		{
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <traverseToSort+0xca>
			turnRight();
		}
		else if ((dir == 3 && (ot == 0 || ot == 1)) || (dir == 1 && (ot == 2 || ot == 2)))
    16d4:	02 97       	sbiw	r24, 0x02	; 2
    16d6:	40 f4       	brcc	.+16     	; 0x16e8 <traverseToSort+0xca>
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <traverseToSort+0xc8>
    16da:	80 91 52 02 	lds	r24, 0x0252
    16de:	90 91 53 02 	lds	r25, 0x0253
    16e2:	02 97       	sbiw	r24, 0x02	; 2
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <traverseToSort+0xca>
		{
			turnLeft();
    16e6:	f2 de       	rcall	.-540    	; 0x14cc <turnLeft>
		}
		if ((a <= 1 && dir == 0) || (a >= 2 && dir == 2))
    16e8:	22 97       	sbiw	r28, 0x02	; 2
    16ea:	3c f4       	brge	.+14     	; 0x16fa <traverseToSort+0xdc>
    16ec:	80 91 50 02 	lds	r24, 0x0250
    16f0:	90 91 51 02 	lds	r25, 0x0251
    16f4:	89 2b       	or	r24, r25
    16f6:	39 f0       	breq	.+14     	; 0x1706 <traverseToSort+0xe8>
    16f8:	07 c0       	rjmp	.+14     	; 0x1708 <traverseToSort+0xea>
    16fa:	80 91 50 02 	lds	r24, 0x0250
    16fe:	90 91 51 02 	lds	r25, 0x0251
    1702:	02 97       	sbiw	r24, 0x02	; 2
    1704:	09 f4       	brne	.+2      	; 0x1708 <traverseToSort+0xea>
			turn();
    1706:	33 df       	rcall	.-410    	; 0x156e <turn>
		front();
    1708:	95 de       	rcall	.-726    	; 0x1434 <front>
		ot = ct % 2 + 4;
    170a:	80 91 89 02 	lds	r24, 0x0289
    170e:	90 91 8a 02 	lds	r25, 0x028A
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	90 78       	andi	r25, 0x80	; 128
    1716:	99 23       	and	r25, r25
    1718:	24 f4       	brge	.+8      	; 0x1722 <traverseToSort+0x104>
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	8e 6f       	ori	r24, 0xFE	; 254
    171e:	9f 6f       	ori	r25, 0xFF	; 255
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	04 96       	adiw	r24, 0x04	; 4
    1724:	90 93 53 02 	sts	0x0253, r25
    1728:	80 93 52 02 	sts	0x0252, r24
	}
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <terminalCheck1>:
int adjCount(ct)
{
	return (ct + 2) % 4;
}
void terminalCheck1()
{
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
	//????
	lcd_wr_command(0x01);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_print(1,1,888,3);
    173c:	23 e0       	ldi	r18, 0x03	; 3
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	48 e7       	ldi	r20, 0x78	; 120
    1742:	53 e0       	ldi	r21, 0x03	; 3
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    174c:	86 e9       	ldi	r24, 0x96	; 150
    174e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1752:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	//forward_mm(60);
	flag = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	90 93 57 02 	sts	0x0257, r25
    175e:	80 93 56 02 	sts	0x0256, r24
	if (ct != ot)
    1762:	80 91 52 02 	lds	r24, 0x0252
    1766:	90 91 53 02 	lds	r25, 0x0253
    176a:	20 91 89 02 	lds	r18, 0x0289
    176e:	30 91 8a 02 	lds	r19, 0x028A
    1772:	28 17       	cp	r18, r24
    1774:	39 07       	cpc	r19, r25
    1776:	89 f1       	breq	.+98     	; 0x17da <terminalCheck1+0xa8>
	{
		if (dir == 1 || dir == 3)
    1778:	20 91 50 02 	lds	r18, 0x0250
    177c:	30 91 51 02 	lds	r19, 0x0251
    1780:	2d 7f       	andi	r18, 0xFD	; 253
    1782:	21 30       	cpi	r18, 0x01	; 1
    1784:	31 05       	cpc	r19, r1
    1786:	41 f4       	brne	.+16     	; 0x1798 <terminalCheck1+0x66>
		{
			if (ot == 3 || ot == 0)
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	91 05       	cpc	r25, r1
    178c:	11 f0       	breq	.+4      	; 0x1792 <terminalCheck1+0x60>
    178e:	89 2b       	or	r24, r25
    1790:	11 f4       	brne	.+4      	; 0x1796 <terminalCheck1+0x64>
				turnRight();
    1792:	5b de       	rcall	.-842    	; 0x144a <turnRight>
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <terminalCheck1+0x66>
			else turnLeft();
    1796:	9a de       	rcall	.-716    	; 0x14cc <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1798:	80 91 89 02 	lds	r24, 0x0289
    179c:	90 91 8a 02 	lds	r25, 0x028A
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	91 05       	cpc	r25, r1
    17a4:	38 f4       	brcc	.+14     	; 0x17b4 <terminalCheck1+0x82>
    17a6:	20 91 50 02 	lds	r18, 0x0250
    17aa:	30 91 51 02 	lds	r19, 0x0251
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	49 f0       	breq	.+18     	; 0x17c6 <terminalCheck1+0x94>
    17b4:	02 97       	sbiw	r24, 0x02	; 2
    17b6:	02 97       	sbiw	r24, 0x02	; 2
    17b8:	38 f4       	brcc	.+14     	; 0x17c8 <terminalCheck1+0x96>
    17ba:	80 91 50 02 	lds	r24, 0x0250
    17be:	90 91 51 02 	lds	r25, 0x0251
    17c2:	89 2b       	or	r24, r25
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <terminalCheck1+0x96>
			turn();
    17c6:	d3 de       	rcall	.-602    	; 0x156e <turn>
		front();
    17c8:	35 de       	rcall	.-918    	; 0x1434 <front>
		ot = ct;
    17ca:	80 91 89 02 	lds	r24, 0x0289
    17ce:	90 91 8a 02 	lds	r25, 0x028A
    17d2:	90 93 53 02 	sts	0x0253, r25
    17d6:	80 93 52 02 	sts	0x0252, r24
	}
	//????
	right_degrees(50);
    17da:	82 e3       	ldi	r24, 0x32	; 50
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0f d9       	rcall	.-3554   	; 0x9fe <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17e0:	86 e9       	ldi	r24, 0x96	; 150
    17e2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    17e6:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
    17ea:	80 91 50 02 	lds	r24, 0x0250
    17ee:	90 91 51 02 	lds	r25, 0x0251
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	83 70       	andi	r24, 0x03	; 3
    17f6:	90 78       	andi	r25, 0x80	; 128
    17f8:	99 23       	and	r25, r25
    17fa:	24 f4       	brge	.+8      	; 0x1804 <terminalCheck1+0xd2>
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	8c 6f       	ori	r24, 0xFC	; 252
    1800:	9f 6f       	ori	r25, 0xFF	; 255
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	90 93 51 02 	sts	0x0251, r25
    1808:	80 93 50 02 	sts	0x0250, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<40)
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <terminalCheck1+0xe0>
		right();
    180e:	0e 94 8f 02 	call	0x51e	; 0x51e <right>
	right_degrees(50);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<40)
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    1818:	88 32       	cpi	r24, 0x28	; 40
    181a:	c8 f3       	brcs	.-14     	; 0x180e <terminalCheck1+0xdc>
		right();
	//_delay_ms(140);
	stop();
    181c:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    1820:	c0 91 89 02 	lds	r28, 0x0289
    1824:	d0 91 8a 02 	lds	r29, 0x028A
    1828:	09 da       	rcall	.-3054   	; 0xc3c <scan>
    182a:	cc 0f       	add	r28, r28
    182c:	dd 1f       	adc	r29, r29
    182e:	cc 0f       	add	r28, r28
    1830:	dd 1f       	adc	r29, r29
    1832:	c3 57       	subi	r28, 0x73	; 115
    1834:	dd 4f       	sbci	r29, 0xFD	; 253
    1836:	99 83       	std	Y+1, r25	; 0x01
    1838:	88 83       	st	Y, r24
	if(term[ct][0]==-1)
    183a:	e0 91 89 02 	lds	r30, 0x0289
    183e:	f0 91 8a 02 	lds	r31, 0x028A
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	e3 57       	subi	r30, 0x73	; 115
    184c:	fd 4f       	sbci	r31, 0xFD	; 253
    184e:	40 81       	ld	r20, Z
    1850:	51 81       	ldd	r21, Z+1	; 0x01
    1852:	4f 3f       	cpi	r20, 0xFF	; 255
    1854:	2f ef       	ldi	r18, 0xFF	; 255
    1856:	52 07       	cpc	r21, r18
    1858:	49 f4       	brne	.+18     	; 0x186c <terminalCheck1+0x13a>
		lcd_print(2,11,9, 1);
    185a:	21 e0       	ldi	r18, 0x01	; 1
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	49 e0       	ldi	r20, 0x09	; 9
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	6b e0       	ldi	r22, 0x0B	; 11
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <terminalCheck1+0x146>
	else
		lcd_print(2,11, term[ct][0], 1);
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	6b e0       	ldi	r22, 0x0B	; 11
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    1878:	4f ef       	ldi	r20, 0xFF	; 255
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	9c e2       	ldi	r25, 0x2C	; 44
    187e:	41 50       	subi	r20, 0x01	; 1
    1880:	80 40       	sbci	r24, 0x00	; 0
    1882:	90 40       	sbci	r25, 0x00	; 0
    1884:	e1 f7       	brne	.-8      	; 0x187e <terminalCheck1+0x14c>
    1886:	00 c0       	rjmp	.+0      	; 0x1888 <terminalCheck1+0x156>
    1888:	00 00       	nop
	_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    188a:	20 91 89 02 	lds	r18, 0x0289
    188e:	30 91 8a 02 	lds	r19, 0x028A
    1892:	f9 01       	movw	r30, r18
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	e3 57       	subi	r30, 0x73	; 115
    189e:	fd 4f       	sbci	r31, 0xFD	; 253
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	8f 3f       	cpi	r24, 0xFF	; 255
    18a6:	4f ef       	ldi	r20, 0xFF	; 255
    18a8:	94 07       	cpc	r25, r20
    18aa:	51 f0       	breq	.+20     	; 0x18c0 <terminalCheck1+0x18e>
    18ac:	f9 01       	movw	r30, r18
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	e1 56       	subi	r30, 0x61	; 97
    18b4:	fd 4f       	sbci	r31, 0xFD	; 253
    18b6:	20 81       	ld	r18, Z
    18b8:	31 81       	ldd	r19, Z+1	; 0x01
    18ba:	82 17       	cp	r24, r18
    18bc:	93 07       	cpc	r25, r19
    18be:	49 f4       	brne	.+18     	; 0x18d2 <terminalCheck1+0x1a0>
		total--;
    18c0:	80 91 01 02 	lds	r24, 0x0201
    18c4:	90 91 02 02 	lds	r25, 0x0202
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	90 93 02 02 	sts	0x0202, r25
    18ce:	80 93 01 02 	sts	0x0201, r24
}
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <position>:
	else
		lcd("pickLeft");
}

void position(int armNo, int side)
{
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	8c 01       	movw	r16, r24
    18e2:	eb 01       	movw	r28, r22
	if (ct == ot)
    18e4:	20 91 89 02 	lds	r18, 0x0289
    18e8:	30 91 8a 02 	lds	r19, 0x028A
    18ec:	40 91 52 02 	lds	r20, 0x0252
    18f0:	50 91 53 02 	lds	r21, 0x0253
    18f4:	24 17       	cp	r18, r20
    18f6:	35 07       	cpc	r19, r21
    18f8:	09 f0       	breq	.+2      	; 0x18fc <position+0x24>
    18fa:	7e c0       	rjmp	.+252    	; 0x19f8 <position+0x120>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    18fc:	c9 01       	movw	r24, r18
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	30 f4       	brcc	.+12     	; 0x1910 <position+0x38>
    1904:	40 91 50 02 	lds	r20, 0x0250
    1908:	50 91 51 02 	lds	r21, 0x0251
    190c:	45 2b       	or	r20, r21
    190e:	61 f0       	breq	.+24     	; 0x1928 <position+0x50>
    1910:	22 50       	subi	r18, 0x02	; 2
    1912:	31 09       	sbc	r19, r1
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	68 f4       	brcc	.+26     	; 0x1934 <position+0x5c>
    191a:	40 91 50 02 	lds	r20, 0x0250
    191e:	50 91 51 02 	lds	r21, 0x0251
    1922:	42 30       	cpi	r20, 0x02	; 2
    1924:	51 05       	cpc	r21, r1
    1926:	31 f4       	brne	.+12     	; 0x1934 <position+0x5c>
		{
			if (armNo != side)
    1928:	0c 17       	cp	r16, r28
    192a:	1d 07       	cpc	r17, r29
    192c:	09 f4       	brne	.+2      	; 0x1930 <position+0x58>
    192e:	4c c0       	rjmp	.+152    	; 0x19c8 <position+0xf0>
				turn();
    1930:	1e de       	rcall	.-964    	; 0x156e <turn>
    1932:	4a c0       	rjmp	.+148    	; 0x19c8 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1934:	82 30       	cpi	r24, 0x02	; 2
    1936:	91 05       	cpc	r25, r1
    1938:	38 f4       	brcc	.+14     	; 0x1948 <position+0x70>
    193a:	40 91 50 02 	lds	r20, 0x0250
    193e:	50 91 51 02 	lds	r21, 0x0251
    1942:	42 30       	cpi	r20, 0x02	; 2
    1944:	51 05       	cpc	r21, r1
    1946:	49 f0       	breq	.+18     	; 0x195a <position+0x82>
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	58 f4       	brcc	.+22     	; 0x1964 <position+0x8c>
    194e:	40 91 50 02 	lds	r20, 0x0250
    1952:	50 91 51 02 	lds	r21, 0x0251
    1956:	45 2b       	or	r20, r21
    1958:	29 f4       	brne	.+10     	; 0x1964 <position+0x8c>
		{
			if (armNo == side)
    195a:	0c 17       	cp	r16, r28
    195c:	1d 07       	cpc	r17, r29
    195e:	a1 f5       	brne	.+104    	; 0x19c8 <position+0xf0>
				turn();
    1960:	06 de       	rcall	.-1012   	; 0x156e <turn>
    1962:	32 c0       	rjmp	.+100    	; 0x19c8 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	91 05       	cpc	r25, r1
    1968:	38 f4       	brcc	.+14     	; 0x1978 <position+0xa0>
    196a:	40 91 50 02 	lds	r20, 0x0250
    196e:	50 91 51 02 	lds	r21, 0x0251
    1972:	41 30       	cpi	r20, 0x01	; 1
    1974:	51 05       	cpc	r21, r1
    1976:	51 f0       	breq	.+20     	; 0x198c <position+0xb4>
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	70 f4       	brcc	.+28     	; 0x199a <position+0xc2>
    197e:	40 91 50 02 	lds	r20, 0x0250
    1982:	50 91 51 02 	lds	r21, 0x0251
    1986:	43 30       	cpi	r20, 0x03	; 3
    1988:	51 05       	cpc	r21, r1
    198a:	39 f4       	brne	.+14     	; 0x199a <position+0xc2>
		{
			if (armNo != side)
    198c:	0c 17       	cp	r16, r28
    198e:	1d 07       	cpc	r17, r29
    1990:	11 f0       	breq	.+4      	; 0x1996 <position+0xbe>
				turnRight();
    1992:	5b dd       	rcall	.-1354   	; 0x144a <turnRight>
    1994:	19 c0       	rjmp	.+50     	; 0x19c8 <position+0xf0>
			else turnLeft();
    1996:	9a dd       	rcall	.-1228   	; 0x14cc <turnLeft>
    1998:	17 c0       	rjmp	.+46     	; 0x19c8 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    199a:	02 97       	sbiw	r24, 0x02	; 2
    199c:	30 f4       	brcc	.+12     	; 0x19aa <position+0xd2>
    199e:	80 91 50 02 	lds	r24, 0x0250
    19a2:	90 91 51 02 	lds	r25, 0x0251
    19a6:	03 97       	sbiw	r24, 0x03	; 3
    19a8:	49 f0       	breq	.+18     	; 0x19bc <position+0xe4>
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	60 f4       	brcc	.+24     	; 0x19c8 <position+0xf0>
    19b0:	80 91 50 02 	lds	r24, 0x0250
    19b4:	90 91 51 02 	lds	r25, 0x0251
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	31 f4       	brne	.+12     	; 0x19c8 <position+0xf0>
			if (armNo == side)
    19bc:	0c 17       	cp	r16, r28
    19be:	1d 07       	cpc	r17, r29
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <position+0xee>
				turnRight();
    19c2:	43 dd       	rcall	.-1402   	; 0x144a <turnRight>
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <position+0xf0>
			else turnLeft();
    19c6:	82 dd       	rcall	.-1276   	; 0x14cc <turnLeft>
		if (flag == 1 && (dir == 0 || dir == 2))
    19c8:	80 91 56 02 	lds	r24, 0x0256
    19cc:	90 91 57 02 	lds	r25, 0x0257
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <position+0xfe>
    19d4:	65 c0       	rjmp	.+202    	; 0x1aa0 <position+0x1c8>
    19d6:	80 91 50 02 	lds	r24, 0x0250
    19da:	90 91 51 02 	lds	r25, 0x0251
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	89 2b       	or	r24, r25
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <position+0x10e>
    19e4:	5d c0       	rjmp	.+186    	; 0x1aa0 <position+0x1c8>
		{
			back_mm(30);
    19e6:	8e e1       	ldi	r24, 0x1E	; 30
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 ed 04 	call	0x9da	; 0x9da <back_mm>
			flag = 0;
    19ee:	10 92 57 02 	sts	0x0257, r1
    19f2:	10 92 56 02 	sts	0x0256, r1
    19f6:	54 c0       	rjmp	.+168    	; 0x1aa0 <position+0x1c8>
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    19f8:	80 91 50 02 	lds	r24, 0x0250
    19fc:	90 91 51 02 	lds	r25, 0x0251
    1a00:	8d 7f       	andi	r24, 0xFD	; 253
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	49 f4       	brne	.+18     	; 0x1a18 <position+0x140>
			if (ct == 0 || ct == 3)
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <position+0x13a>
    1a0c:	23 30       	cpi	r18, 0x03	; 3
    1a0e:	31 05       	cpc	r19, r1
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <position+0x13e>
				turnRight();
    1a12:	1b dd       	rcall	.-1482   	; 0x144a <turnRight>
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <position+0x140>
			else turnLeft();
    1a16:	5a dd       	rcall	.-1356   	; 0x14cc <turnLeft>
		if (dir == 0 || dir == 2)
    1a18:	20 91 50 02 	lds	r18, 0x0250
    1a1c:	30 91 51 02 	lds	r19, 0x0251
    1a20:	21 15       	cp	r18, r1
    1a22:	31 05       	cpc	r19, r1
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <position+0x156>
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	91 f5       	brne	.+100    	; 0x1a90 <position+0x1b8>
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <position+0x164>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1a2e:	80 91 89 02 	lds	r24, 0x0289
    1a32:	90 91 8a 02 	lds	r25, 0x028A
    1a36:	02 97       	sbiw	r24, 0x02	; 2
    1a38:	c8 f4       	brcc	.+50     	; 0x1a6c <position+0x194>
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <position+0x172>
    1a3c:	80 91 89 02 	lds	r24, 0x0289
    1a40:	90 91 8a 02 	lds	r25, 0x028A
    1a44:	02 97       	sbiw	r24, 0x02	; 2
    1a46:	02 97       	sbiw	r24, 0x02	; 2
    1a48:	88 f4       	brcc	.+34     	; 0x1a6c <position+0x194>
			{
				if (ot != 4 && ot != 5)
    1a4a:	80 91 52 02 	lds	r24, 0x0252
    1a4e:	90 91 53 02 	lds	r25, 0x0253
    1a52:	04 97       	sbiw	r24, 0x04	; 4
    1a54:	02 97       	sbiw	r24, 0x02	; 2
    1a56:	10 f0       	brcs	.+4      	; 0x1a5c <position+0x184>
				{
					turnLeft();
    1a58:	39 dd       	rcall	.-1422   	; 0x14cc <turnLeft>
					front();
    1a5a:	ec dc       	rcall	.-1576   	; 0x1434 <front>
				}
				if (armNo == side)
    1a5c:	0c 17       	cp	r16, r28
    1a5e:	1d 07       	cpc	r17, r29
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <position+0x18e>
				{
					front();
    1a62:	e8 dc       	rcall	.-1584   	; 0x1434 <front>
    1a64:	15 c0       	rjmp	.+42     	; 0x1a90 <position+0x1b8>
				}
				else
				{
					front();
    1a66:	e6 dc       	rcall	.-1588   	; 0x1434 <front>
					turn();
    1a68:	82 dd       	rcall	.-1276   	; 0x156e <turn>
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <position+0x1b8>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1a6c:	80 91 52 02 	lds	r24, 0x0252
    1a70:	90 91 53 02 	lds	r25, 0x0253
    1a74:	04 97       	sbiw	r24, 0x04	; 4
    1a76:	02 97       	sbiw	r24, 0x02	; 2
    1a78:	10 f0       	brcs	.+4      	; 0x1a7e <position+0x1a6>
				{
					turnLeft();
    1a7a:	28 dd       	rcall	.-1456   	; 0x14cc <turnLeft>
					front();
    1a7c:	db dc       	rcall	.-1610   	; 0x1434 <front>
				}
				if (armNo == side)
    1a7e:	0c 17       	cp	r16, r28
    1a80:	1d 07       	cpc	r17, r29
    1a82:	19 f4       	brne	.+6      	; 0x1a8a <position+0x1b2>
				{
					turn();
    1a84:	74 dd       	rcall	.-1304   	; 0x156e <turn>
					front();
    1a86:	d6 dc       	rcall	.-1620   	; 0x1434 <front>
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <position+0x1b8>
				}
				else
				{
					turn();
    1a8a:	71 dd       	rcall	.-1310   	; 0x156e <turn>
					front();
    1a8c:	d3 dc       	rcall	.-1626   	; 0x1434 <front>
					turn();
    1a8e:	6f dd       	rcall	.-1314   	; 0x156e <turn>
				}
			}
		}
		ot = ct;
    1a90:	80 91 89 02 	lds	r24, 0x0289
    1a94:	90 91 8a 02 	lds	r25, 0x028A
    1a98:	90 93 53 02 	sts	0x0253, r25
    1a9c:	80 93 52 02 	sts	0x0252, r24
	}
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	08 95       	ret

00001aaa <pickNode>:
void pickNode(int armNo, int side)
{
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ed 54       	subi	r30, 0x4D	; 77
    1abe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac0:	a0 91 89 02 	lds	r26, 0x0289
    1ac4:	b0 91 8a 02 	lds	r27, 0x028A
    1ac8:	aa 0f       	add	r26, r26
    1aca:	bb 1f       	adc	r27, r27
    1acc:	a6 0f       	add	r26, r22
    1ace:	b7 1f       	adc	r27, r23
    1ad0:	aa 0f       	add	r26, r26
    1ad2:	bb 1f       	adc	r27, r27
    1ad4:	a3 57       	subi	r26, 0x73	; 115
    1ad6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ad8:	8d 91       	ld	r24, X+
    1ada:	9c 91       	ld	r25, X
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
	position(armNo, side);
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	fa de       	rcall	.-524    	; 0x18d8 <position>
	pick(armNo);
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	d1 da       	rcall	.-2654   	; 0x108a <pick>
	term[ct][side] = -1;
    1ae8:	80 91 89 02 	lds	r24, 0x0289
    1aec:	90 91 8a 02 	lds	r25, 0x028A
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	c8 0f       	add	r28, r24
    1af6:	d9 1f       	adc	r29, r25
    1af8:	cc 0f       	add	r28, r28
    1afa:	dd 1f       	adc	r29, r29
    1afc:	c3 57       	subi	r28, 0x73	; 115
    1afe:	dd 4f       	sbci	r29, 0xFD	; 253
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	99 83       	std	Y+1, r25	; 0x01
    1b06:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	08 95       	ret

00001b12 <pickup>:
	pick(armNo);
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1b1e:	20 91 89 02 	lds	r18, 0x0289
    1b22:	30 91 8a 02 	lds	r19, 0x028A
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	30 f4       	brcc	.+12     	; 0x1b38 <pickup+0x26>
    1b2c:	80 91 50 02 	lds	r24, 0x0250
    1b30:	90 91 51 02 	lds	r25, 0x0251
    1b34:	02 97       	sbiw	r24, 0x02	; 2
    1b36:	79 f0       	breq	.+30     	; 0x1b56 <pickup+0x44>
    1b38:	c9 01       	movw	r24, r18
    1b3a:	02 97       	sbiw	r24, 0x02	; 2
    1b3c:	02 97       	sbiw	r24, 0x02	; 2
    1b3e:	80 f4       	brcc	.+32     	; 0x1b60 <pickup+0x4e>
    1b40:	80 91 50 02 	lds	r24, 0x0250
    1b44:	90 91 51 02 	lds	r25, 0x0251
    1b48:	89 2b       	or	r24, r25
    1b4a:	79 f0       	breq	.+30     	; 0x1b6a <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1b4c:	c1 e0       	ldi	r28, 0x01	; 1
    1b4e:	d0 e0       	ldi	r29, 0x00	; 0
    1b50:	00 e0       	ldi	r16, 0x00	; 0
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	0e c0       	rjmp	.+28     	; 0x1b72 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1b56:	c0 e0       	ldi	r28, 0x00	; 0
    1b58:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1b5a:	01 e0       	ldi	r16, 0x01	; 1
    1b5c:	10 e0       	ldi	r17, 0x00	; 0
    1b5e:	09 c0       	rjmp	.+18     	; 0x1b72 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1b60:	c1 e0       	ldi	r28, 0x01	; 1
    1b62:	d0 e0       	ldi	r29, 0x00	; 0
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1b6a:	c0 e0       	ldi	r28, 0x00	; 0
    1b6c:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1b6e:	01 e0       	ldi	r16, 0x01	; 1
    1b70:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1b72:	f9 01       	movw	r30, r18
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	ea 59       	subi	r30, 0x9A	; 154
    1b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	89 2b       	or	r24, r25
    1b82:	79 f4       	brne	.+30     	; 0x1ba2 <pickup+0x90>
		if (term[ct][0] == -2)
    1b84:	f9 01       	movw	r30, r18
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	e3 57       	subi	r30, 0x73	; 115
    1b90:	fd 4f       	sbci	r31, 0xFD	; 253
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	02 96       	adiw	r24, 0x02	; 2
    1b98:	19 f4       	brne	.+6      	; 0x1ba0 <pickup+0x8e>
		{
		terminalCheck1();
    1b9a:	cb dd       	rcall	.-1130   	; 0x1732 <terminalCheck1>
		terminalCheck2();
    1b9c:	47 d9       	rcall	.-3442   	; 0xe2c <terminalCheck2>
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <pickup+0x90>
		}
		else	terminalCheck2();
    1ba0:	45 d9       	rcall	.-3446   	; 0xe2c <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1ba2:	20 91 89 02 	lds	r18, 0x0289
    1ba6:	30 91 8a 02 	lds	r19, 0x028A
    1baa:	f9 01       	movw	r30, r18
    1bac:	ee 0f       	add	r30, r30
    1bae:	ff 1f       	adc	r31, r31
    1bb0:	ee 0f       	add	r30, r30
    1bb2:	ff 1f       	adc	r31, r31
    1bb4:	e3 57       	subi	r30, 0x73	; 115
    1bb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb8:	40 81       	ld	r20, Z
    1bba:	51 81       	ldd	r21, Z+1	; 0x01
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	e1 56       	subi	r30, 0x61	; 97
    1bc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	48 17       	cp	r20, r24
    1bcc:	59 07       	cpc	r21, r25
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <pickup+0xc6>
    1bd0:	4f 3f       	cpi	r20, 0xFF	; 255
    1bd2:	6f ef       	ldi	r22, 0xFF	; 255
    1bd4:	56 07       	cpc	r21, r22
    1bd6:	89 f4       	brne	.+34     	; 0x1bfa <pickup+0xe8>
    1bd8:	f9 01       	movw	r30, r18
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	ee 0f       	add	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	e3 57       	subi	r30, 0x73	; 115
    1be4:	fd 4f       	sbci	r31, 0xFD	; 253
    1be6:	62 81       	ldd	r22, Z+2	; 0x02
    1be8:	73 81       	ldd	r23, Z+3	; 0x03
    1bea:	86 17       	cp	r24, r22
    1bec:	97 07       	cpc	r25, r23
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <pickup+0xe0>
    1bf0:	ee c1       	rjmp	.+988    	; 0x1fce <pickup+0x4bc>
    1bf2:	6f 3f       	cpi	r22, 0xFF	; 255
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <pickup+0xe8>
    1bf8:	ea c1       	rjmp	.+980    	; 0x1fce <pickup+0x4bc>
		{
			if (armCount == 2)
    1bfa:	60 91 03 02 	lds	r22, 0x0203
    1bfe:	70 91 04 02 	lds	r23, 0x0204
    1c02:	62 30       	cpi	r22, 0x02	; 2
    1c04:	71 05       	cpc	r23, r1
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <pickup+0xf8>
    1c08:	b0 c0       	rjmp	.+352    	; 0x1d6a <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1c0a:	e0 91 af 02 	lds	r30, 0x02AF
    1c0e:	f0 91 b0 02 	lds	r31, 0x02B0
    1c12:	df 01       	movw	r26, r30
    1c14:	aa 0f       	add	r26, r26
    1c16:	bb 1f       	adc	r27, r27
    1c18:	a1 56       	subi	r26, 0x61	; 97
    1c1a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c1c:	6d 91       	ld	r22, X+
    1c1e:	7c 91       	ld	r23, X
    1c20:	46 17       	cp	r20, r22
    1c22:	57 07       	cpc	r21, r23
    1c24:	79 f0       	breq	.+30     	; 0x1c44 <pickup+0x132>
    1c26:	d9 01       	movw	r26, r18
    1c28:	aa 0f       	add	r26, r26
    1c2a:	bb 1f       	adc	r27, r27
    1c2c:	aa 0f       	add	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	a3 57       	subi	r26, 0x73	; 115
    1c32:	bd 4f       	sbci	r27, 0xFD	; 253
    1c34:	12 96       	adiw	r26, 0x02	; 2
    1c36:	ed 90       	ld	r14, X+
    1c38:	fc 90       	ld	r15, X
    1c3a:	13 97       	sbiw	r26, 0x03	; 3
    1c3c:	6e 15       	cp	r22, r14
    1c3e:	7f 05       	cpc	r23, r15
    1c40:	59 f4       	brne	.+22     	; 0x1c58 <pickup+0x146>
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 0);
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	c8 01       	movw	r24, r16
    1c4a:	2f df       	rcall	.-418    	; 0x1aaa <pickNode>
    1c4c:	8e c0       	rjmp	.+284    	; 0x1d6a <pickup+0x258>
					else	pickNode(arm1, 1);
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	ce 01       	movw	r24, r28
    1c54:	2a df       	rcall	.-428    	; 0x1aaa <pickNode>
    1c56:	89 c0       	rjmp	.+274    	; 0x1d6a <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1c58:	8e 15       	cp	r24, r14
    1c5a:	9f 05       	cpc	r25, r15
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <pickup+0x14e>
    1c5e:	4e c0       	rjmp	.+156    	; 0x1cfc <pickup+0x1ea>
    1c60:	ef 20       	and	r14, r15
    1c62:	e0 94       	com	r14
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <pickup+0x156>
    1c66:	4a c0       	rjmp	.+148    	; 0x1cfc <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1c68:	48 17       	cp	r20, r24
    1c6a:	59 07       	cpc	r21, r25
    1c6c:	69 f0       	breq	.+26     	; 0x1c88 <pickup+0x176>
    1c6e:	4f 3f       	cpi	r20, 0xFF	; 255
    1c70:	af ef       	ldi	r26, 0xFF	; 255
    1c72:	5a 07       	cpc	r21, r26
    1c74:	49 f0       	breq	.+18     	; 0x1c88 <pickup+0x176>
					{
						pickNode(arm1, 1);
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	16 df       	rcall	.-468    	; 0x1aaa <pickNode>
						pickNode(arm0, 0);
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	c8 01       	movw	r24, r16
    1c84:	12 df       	rcall	.-476    	; 0x1aaa <pickNode>
    1c86:	71 c0       	rjmp	.+226    	; 0x1d6a <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1c88:	21 70       	andi	r18, 0x01	; 1
    1c8a:	30 78       	andi	r19, 0x80	; 128
    1c8c:	33 23       	and	r19, r19
    1c8e:	34 f4       	brge	.+12     	; 0x1c9c <pickup+0x18a>
    1c90:	21 50       	subi	r18, 0x01	; 1
    1c92:	31 09       	sbc	r19, r1
    1c94:	2e 6f       	ori	r18, 0xFE	; 254
    1c96:	3f 6f       	ori	r19, 0xFF	; 255
    1c98:	2f 5f       	subi	r18, 0xFF	; 255
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	d9 01       	movw	r26, r18
    1c9e:	aa 0f       	add	r26, r26
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	ab 57       	subi	r26, 0x7B	; 123
    1ca4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ca6:	2d 91       	ld	r18, X+
    1ca8:	3c 91       	ld	r19, X
    1caa:	2f 3f       	cpi	r18, 0xFF	; 255
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	09 f1       	breq	.+66     	; 0x1cf2 <pickup+0x1e0>
    1cb0:	df 01       	movw	r26, r30
    1cb2:	aa 0f       	add	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	aa 0f       	add	r26, r26
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	a3 57       	subi	r26, 0x73	; 115
    1cbc:	bd 4f       	sbci	r27, 0xFD	; 253
    1cbe:	2d 91       	ld	r18, X+
    1cc0:	3c 91       	ld	r19, X
    1cc2:	62 17       	cp	r22, r18
    1cc4:	73 07       	cpc	r23, r19
    1cc6:	a9 f0       	breq	.+42     	; 0x1cf2 <pickup+0x1e0>
    1cc8:	2f 3f       	cpi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	91 f0       	breq	.+36     	; 0x1cf2 <pickup+0x1e0>
    1cce:	ee 0f       	add	r30, r30
    1cd0:	ff 1f       	adc	r31, r31
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	e3 57       	subi	r30, 0x73	; 115
    1cd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cda:	22 81       	ldd	r18, Z+2	; 0x02
    1cdc:	33 81       	ldd	r19, Z+3	; 0x03
    1cde:	62 17       	cp	r22, r18
    1ce0:	73 07       	cpc	r23, r19
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <pickup+0x1e0>
    1ce4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	21 f0       	breq	.+8      	; 0x1cf2 <pickup+0x1e0>
    1cea:	48 17       	cp	r20, r24
    1cec:	59 07       	cpc	r21, r25
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <pickup+0x1e0>
    1cf0:	6e c1       	rjmp	.+732    	; 0x1fce <pickup+0x4bc>
						pickNode(arm1, 1);
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	d8 de       	rcall	.-592    	; 0x1aaa <pickNode>
    1cfa:	37 c0       	rjmp	.+110    	; 0x1d6a <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1cfc:	48 17       	cp	r20, r24
    1cfe:	59 07       	cpc	r21, r25
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <pickup+0x1f2>
    1d02:	65 c1       	rjmp	.+714    	; 0x1fce <pickup+0x4bc>
    1d04:	4f 3f       	cpi	r20, 0xFF	; 255
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <pickup+0x1fa>
    1d0a:	61 c1       	rjmp	.+706    	; 0x1fce <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1d0c:	21 70       	andi	r18, 0x01	; 1
    1d0e:	30 78       	andi	r19, 0x80	; 128
    1d10:	33 23       	and	r19, r19
    1d12:	34 f4       	brge	.+12     	; 0x1d20 <pickup+0x20e>
    1d14:	21 50       	subi	r18, 0x01	; 1
    1d16:	31 09       	sbc	r19, r1
    1d18:	2e 6f       	ori	r18, 0xFE	; 254
    1d1a:	3f 6f       	ori	r19, 0xFF	; 255
    1d1c:	2f 5f       	subi	r18, 0xFF	; 255
    1d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d20:	d9 01       	movw	r26, r18
    1d22:	aa 0f       	add	r26, r26
    1d24:	bb 1f       	adc	r27, r27
    1d26:	ab 57       	subi	r26, 0x7B	; 123
    1d28:	bd 4f       	sbci	r27, 0xFD	; 253
    1d2a:	8d 91       	ld	r24, X+
    1d2c:	9c 91       	ld	r25, X
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	c1 f0       	breq	.+48     	; 0x1d62 <pickup+0x250>
    1d32:	df 01       	movw	r26, r30
    1d34:	aa 0f       	add	r26, r26
    1d36:	bb 1f       	adc	r27, r27
    1d38:	aa 0f       	add	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	a3 57       	subi	r26, 0x73	; 115
    1d3e:	bd 4f       	sbci	r27, 0xFD	; 253
    1d40:	8d 91       	ld	r24, X+
    1d42:	9c 91       	ld	r25, X
    1d44:	11 97       	sbiw	r26, 0x01	; 1
    1d46:	68 17       	cp	r22, r24
    1d48:	79 07       	cpc	r23, r25
    1d4a:	59 f0       	breq	.+22     	; 0x1d62 <pickup+0x250>
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	49 f0       	breq	.+18     	; 0x1d62 <pickup+0x250>
    1d50:	fd 01       	movw	r30, r26
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	68 17       	cp	r22, r24
    1d58:	79 07       	cpc	r23, r25
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <pickup+0x250>
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <pickup+0x250>
    1d60:	36 c1       	rjmp	.+620    	; 0x1fce <pickup+0x4bc>
						pickNode(arm0, 0);
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	c8 01       	movw	r24, r16
    1d68:	a0 de       	rcall	.-704    	; 0x1aaa <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 0);

			}
			if (armCount == 1)
    1d6a:	80 91 03 02 	lds	r24, 0x0203
    1d6e:	90 91 04 02 	lds	r25, 0x0204
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <pickup+0x266>
    1d76:	2b c1       	rjmp	.+598    	; 0x1fce <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1d78:	f8 01       	movw	r30, r16
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ed 54       	subi	r30, 0x4D	; 77
    1d80:	fd 4f       	sbci	r31, 0xFD	; 253
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <pickup+0x27a>
					a1 = arm0;
    1d8a:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1d8c:	be 01       	movw	r22, r28
    1d8e:	6f 5f       	subi	r22, 0xFF	; 255
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	61 70       	andi	r22, 0x01	; 1
    1d94:	70 78       	andi	r23, 0x80	; 128
    1d96:	77 23       	and	r23, r23
    1d98:	34 f4       	brge	.+12     	; 0x1da6 <pickup+0x294>
    1d9a:	61 50       	subi	r22, 0x01	; 1
    1d9c:	71 09       	sbc	r23, r1
    1d9e:	6e 6f       	ori	r22, 0xFE	; 254
    1da0:	7f 6f       	ori	r23, 0xFF	; 255
    1da2:	6f 5f       	subi	r22, 0xFF	; 255
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1da6:	80 91 89 02 	lds	r24, 0x0289
    1daa:	90 91 8a 02 	lds	r25, 0x028A
    1dae:	9c 01       	movw	r18, r24
    1db0:	21 70       	andi	r18, 0x01	; 1
    1db2:	30 78       	andi	r19, 0x80	; 128
    1db4:	33 23       	and	r19, r19
    1db6:	34 f4       	brge	.+12     	; 0x1dc4 <pickup+0x2b2>
    1db8:	21 50       	subi	r18, 0x01	; 1
    1dba:	31 09       	sbc	r19, r1
    1dbc:	2e 6f       	ori	r18, 0xFE	; 254
    1dbe:	3f 6f       	ori	r19, 0xFF	; 255
    1dc0:	2f 5f       	subi	r18, 0xFF	; 255
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	ee 0f       	add	r30, r30
    1dc8:	ff 1f       	adc	r31, r31
    1dca:	eb 57       	subi	r30, 0x7B	; 123
    1dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    1dce:	20 81       	ld	r18, Z
    1dd0:	31 81       	ldd	r19, Z+1	; 0x01
    1dd2:	2f 3f       	cpi	r18, 0xFF	; 255
    1dd4:	af ef       	ldi	r26, 0xFF	; 255
    1dd6:	3a 07       	cpc	r19, r26
    1dd8:	d9 f5       	brne	.+118    	; 0x1e50 <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1dda:	fc 01       	movw	r30, r24
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	ec 0f       	add	r30, r28
    1de2:	fd 1f       	adc	r31, r29
    1de4:	ee 0f       	add	r30, r30
    1de6:	ff 1f       	adc	r31, r31
    1de8:	e3 57       	subi	r30, 0x73	; 115
    1dea:	fd 4f       	sbci	r31, 0xFD	; 253
    1dec:	20 81       	ld	r18, Z
    1dee:	31 81       	ldd	r19, Z+1	; 0x01
    1df0:	2f 3f       	cpi	r18, 0xFF	; 255
    1df2:	ef ef       	ldi	r30, 0xFF	; 255
    1df4:	3e 07       	cpc	r19, r30
    1df6:	71 f0       	breq	.+28     	; 0x1e14 <pickup+0x302>
    1df8:	fc 01       	movw	r30, r24
    1dfa:	ee 0f       	add	r30, r30
    1dfc:	ff 1f       	adc	r31, r31
    1dfe:	e1 56       	subi	r30, 0x61	; 97
    1e00:	fd 4f       	sbci	r31, 0xFD	; 253
    1e02:	40 81       	ld	r20, Z
    1e04:	51 81       	ldd	r21, Z+1	; 0x01
    1e06:	24 17       	cp	r18, r20
    1e08:	35 07       	cpc	r19, r21
    1e0a:	21 f0       	breq	.+8      	; 0x1e14 <pickup+0x302>
						pickNode(a1, a1);
    1e0c:	be 01       	movw	r22, r28
    1e0e:	ce 01       	movw	r24, r28
    1e10:	4c de       	rcall	.-872    	; 0x1aaa <pickNode>
    1e12:	dd c0       	rjmp	.+442    	; 0x1fce <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1e14:	fc 01       	movw	r30, r24
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	e6 0f       	add	r30, r22
    1e1c:	f7 1f       	adc	r31, r23
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	e3 57       	subi	r30, 0x73	; 115
    1e24:	fd 4f       	sbci	r31, 0xFD	; 253
    1e26:	20 81       	ld	r18, Z
    1e28:	31 81       	ldd	r19, Z+1	; 0x01
    1e2a:	2f 3f       	cpi	r18, 0xFF	; 255
    1e2c:	4f ef       	ldi	r20, 0xFF	; 255
    1e2e:	34 07       	cpc	r19, r20
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <pickup+0x322>
    1e32:	cd c0       	rjmp	.+410    	; 0x1fce <pickup+0x4bc>
    1e34:	fc 01       	movw	r30, r24
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	e1 56       	subi	r30, 0x61	; 97
    1e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	28 17       	cp	r18, r24
    1e44:	39 07       	cpc	r19, r25
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <pickup+0x338>
    1e48:	c2 c0       	rjmp	.+388    	; 0x1fce <pickup+0x4bc>
						pickNode(a1, a2);
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	2e de       	rcall	.-932    	; 0x1aaa <pickNode>
    1e4e:	bf c0       	rjmp	.+382    	; 0x1fce <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1e50:	40 91 af 02 	lds	r20, 0x02AF
    1e54:	50 91 b0 02 	lds	r21, 0x02B0
    1e58:	fa 01       	movw	r30, r20
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	e1 56       	subi	r30, 0x61	; 97
    1e60:	fd 4f       	sbci	r31, 0xFD	; 253
    1e62:	01 90       	ld	r0, Z+
    1e64:	f0 81       	ld	r31, Z
    1e66:	e0 2d       	mov	r30, r0
    1e68:	dc 01       	movw	r26, r24
    1e6a:	aa 0f       	add	r26, r26
    1e6c:	bb 1f       	adc	r27, r27
    1e6e:	aa 0f       	add	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	a3 57       	subi	r26, 0x73	; 115
    1e74:	bd 4f       	sbci	r27, 0xFD	; 253
    1e76:	0d 90       	ld	r0, X+
    1e78:	bc 91       	ld	r27, X
    1e7a:	a0 2d       	mov	r26, r0
    1e7c:	ae 17       	cp	r26, r30
    1e7e:	bf 07       	cpc	r27, r31
    1e80:	71 f0       	breq	.+28     	; 0x1e9e <pickup+0x38c>
    1e82:	dc 01       	movw	r26, r24
    1e84:	aa 0f       	add	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	aa 0f       	add	r26, r26
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	a3 57       	subi	r26, 0x73	; 115
    1e8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e90:	12 96       	adiw	r26, 0x02	; 2
    1e92:	0d 90       	ld	r0, X+
    1e94:	bc 91       	ld	r27, X
    1e96:	a0 2d       	mov	r26, r0
    1e98:	ea 17       	cp	r30, r26
    1e9a:	fb 07       	cpc	r31, r27
    1e9c:	d9 f5       	brne	.+118    	; 0x1f14 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1e9e:	da 01       	movw	r26, r20
    1ea0:	aa 0f       	add	r26, r26
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	aa 59       	subi	r26, 0x9A	; 154
    1ea6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ea8:	2d 91       	ld	r18, X+
    1eaa:	3c 91       	ld	r19, X
    1eac:	21 30       	cpi	r18, 0x01	; 1
    1eae:	31 05       	cpc	r19, r1
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <pickup+0x3a2>
    1eb2:	8d c0       	rjmp	.+282    	; 0x1fce <pickup+0x4bc>
    1eb4:	da 01       	movw	r26, r20
    1eb6:	aa 0f       	add	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	aa 0f       	add	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	a3 57       	subi	r26, 0x73	; 115
    1ec0:	bd 4f       	sbci	r27, 0xFD	; 253
    1ec2:	2d 91       	ld	r18, X+
    1ec4:	3c 91       	ld	r19, X
    1ec6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	79 f0       	breq	.+30     	; 0x1eea <pickup+0x3d8>
    1ecc:	da 01       	movw	r26, r20
    1ece:	aa 0f       	add	r26, r26
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	aa 0f       	add	r26, r26
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	a3 57       	subi	r26, 0x73	; 115
    1ed8:	bd 4f       	sbci	r27, 0xFD	; 253
    1eda:	12 96       	adiw	r26, 0x02	; 2
    1edc:	2d 91       	ld	r18, X+
    1ede:	3c 91       	ld	r19, X
    1ee0:	13 97       	sbiw	r26, 0x03	; 3
    1ee2:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <pickup+0x3d8>
    1ee8:	72 c0       	rjmp	.+228    	; 0x1fce <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	8c 0f       	add	r24, r28
    1ef0:	9d 1f       	adc	r25, r29
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	aa 0f       	add	r26, r26
    1ef6:	bb 1f       	adc	r27, r27
    1ef8:	a3 57       	subi	r26, 0x73	; 115
    1efa:	bd 4f       	sbci	r27, 0xFD	; 253
    1efc:	8d 91       	ld	r24, X+
    1efe:	9c 91       	ld	r25, X
    1f00:	e8 17       	cp	r30, r24
    1f02:	f9 07       	cpc	r31, r25
    1f04:	21 f4       	brne	.+8      	; 0x1f0e <pickup+0x3fc>
								pickNode(a1, a1);
    1f06:	be 01       	movw	r22, r28
    1f08:	ce 01       	movw	r24, r28
    1f0a:	cf dd       	rcall	.-1122   	; 0x1aaa <pickNode>
    1f0c:	60 c0       	rjmp	.+192    	; 0x1fce <pickup+0x4bc>
							else pickNode(a1, a2);
    1f0e:	ce 01       	movw	r24, r28
    1f10:	cc dd       	rcall	.-1128   	; 0x1aaa <pickNode>
    1f12:	5d c0       	rjmp	.+186    	; 0x1fce <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1f14:	dc 01       	movw	r26, r24
    1f16:	aa 0f       	add	r26, r26
    1f18:	bb 1f       	adc	r27, r27
    1f1a:	a1 56       	subi	r26, 0x61	; 97
    1f1c:	bd 4f       	sbci	r27, 0xFD	; 253
    1f1e:	0d 90       	ld	r0, X+
    1f20:	bc 91       	ld	r27, X
    1f22:	a0 2d       	mov	r26, r0
    1f24:	2a 17       	cp	r18, r26
    1f26:	3b 07       	cpc	r19, r27
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <pickup+0x41a>
    1f2a:	51 c0       	rjmp	.+162    	; 0x1fce <pickup+0x4bc>
    1f2c:	2e 17       	cp	r18, r30
    1f2e:	3f 07       	cpc	r19, r31
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <pickup+0x422>
    1f32:	4d c0       	rjmp	.+154    	; 0x1fce <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1f34:	fa 01       	movw	r30, r20
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ea 59       	subi	r30, 0x9A	; 154
    1f3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f3e:	20 81       	ld	r18, Z
    1f40:	31 81       	ldd	r19, Z+1	; 0x01
    1f42:	21 30       	cpi	r18, 0x01	; 1
    1f44:	31 05       	cpc	r19, r1
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <pickup+0x438>
    1f48:	42 c0       	rjmp	.+132    	; 0x1fce <pickup+0x4bc>
    1f4a:	fa 01       	movw	r30, r20
    1f4c:	ee 0f       	add	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	e3 57       	subi	r30, 0x73	; 115
    1f56:	fd 4f       	sbci	r31, 0xFD	; 253
    1f58:	20 81       	ld	r18, Z
    1f5a:	31 81       	ldd	r19, Z+1	; 0x01
    1f5c:	a2 17       	cp	r26, r18
    1f5e:	b3 07       	cpc	r27, r19
    1f60:	b1 f1       	breq	.+108    	; 0x1fce <pickup+0x4bc>
    1f62:	fa 01       	movw	r30, r20
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	e3 57       	subi	r30, 0x73	; 115
    1f6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f70:	22 81       	ldd	r18, Z+2	; 0x02
    1f72:	33 81       	ldd	r19, Z+3	; 0x03
    1f74:	a2 17       	cp	r26, r18
    1f76:	b3 07       	cpc	r27, r19
    1f78:	51 f1       	breq	.+84     	; 0x1fce <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ec 0f       	add	r30, r28
    1f82:	fd 1f       	adc	r31, r29
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	e3 57       	subi	r30, 0x73	; 115
    1f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f8c:	20 81       	ld	r18, Z
    1f8e:	31 81       	ldd	r19, Z+1	; 0x01
    1f90:	2f 3f       	cpi	r18, 0xFF	; 255
    1f92:	ef ef       	ldi	r30, 0xFF	; 255
    1f94:	3e 07       	cpc	r19, r30
    1f96:	39 f0       	breq	.+14     	; 0x1fa6 <pickup+0x494>
    1f98:	a2 17       	cp	r26, r18
    1f9a:	b3 07       	cpc	r27, r19
    1f9c:	21 f0       	breq	.+8      	; 0x1fa6 <pickup+0x494>
									pickNode(a1, a1);
    1f9e:	be 01       	movw	r22, r28
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	83 dd       	rcall	.-1274   	; 0x1aaa <pickNode>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	86 0f       	add	r24, r22
    1fac:	97 1f       	adc	r25, r23
    1fae:	fc 01       	movw	r30, r24
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	e3 57       	subi	r30, 0x73	; 115
    1fb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbe:	2f ef       	ldi	r18, 0xFF	; 255
    1fc0:	92 07       	cpc	r25, r18
    1fc2:	29 f0       	breq	.+10     	; 0x1fce <pickup+0x4bc>
    1fc4:	a8 17       	cp	r26, r24
    1fc6:	b9 07       	cpc	r27, r25
    1fc8:	11 f0       	breq	.+4      	; 0x1fce <pickup+0x4bc>
									pickNode(a1, a2);
    1fca:	ce 01       	movw	r24, r28
    1fcc:	6e dd       	rcall	.-1316   	; 0x1aaa <pickNode>
					}
				}
			}
		}
}
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	08 95       	ret

00001fdc <dropPickup>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}

void dropPickup(int a1)
{
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	21 70       	andi	r18, 0x01	; 1
    1fe8:	30 78       	andi	r19, 0x80	; 128
    1fea:	33 23       	and	r19, r19
    1fec:	34 f4       	brge	.+12     	; 0x1ffa <dropPickup+0x1e>
    1fee:	21 50       	subi	r18, 0x01	; 1
    1ff0:	31 09       	sbc	r19, r1
    1ff2:	2e 6f       	ori	r18, 0xFE	; 254
    1ff4:	3f 6f       	ori	r19, 0xFF	; 255
    1ff6:	2f 5f       	subi	r18, 0xFF	; 255
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	d2 2f       	mov	r29, r18
    1ffc:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1ffe:	e0 91 89 02 	lds	r30, 0x0289
    2002:	f0 91 8a 02 	lds	r31, 0x028A
    2006:	af 01       	movw	r20, r30
    2008:	44 0f       	add	r20, r20
    200a:	55 1f       	adc	r21, r21
    200c:	24 0f       	add	r18, r20
    200e:	35 1f       	adc	r19, r21
    2010:	d9 01       	movw	r26, r18
    2012:	aa 0f       	add	r26, r26
    2014:	bb 1f       	adc	r27, r27
    2016:	a3 57       	subi	r26, 0x73	; 115
    2018:	bd 4f       	sbci	r27, 0xFD	; 253
    201a:	2d 91       	ld	r18, X+
    201c:	3c 91       	ld	r19, X
    201e:	da 01       	movw	r26, r20
    2020:	a1 56       	subi	r26, 0x61	; 97
    2022:	bd 4f       	sbci	r27, 0xFD	; 253
    2024:	4d 91       	ld	r20, X+
    2026:	5c 91       	ld	r21, X
    2028:	24 17       	cp	r18, r20
    202a:	35 07       	cpc	r19, r21
    202c:	69 f0       	breq	.+26     	; 0x2048 <dropPickup+0x6c>
    202e:	a0 91 af 02 	lds	r26, 0x02AF
    2032:	b0 91 b0 02 	lds	r27, 0x02B0
    2036:	aa 0f       	add	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	a1 56       	subi	r26, 0x61	; 97
    203c:	bd 4f       	sbci	r27, 0xFD	; 253
    203e:	6d 91       	ld	r22, X+
    2040:	7c 91       	ld	r23, X
    2042:	26 17       	cp	r18, r22
    2044:	37 07       	cpc	r19, r23
    2046:	a9 f0       	breq	.+42     	; 0x2072 <dropPickup+0x96>
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	e8 0f       	add	r30, r24
    204e:	f9 1f       	adc	r31, r25
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	e3 57       	subi	r30, 0x73	; 115
    2056:	fd 4f       	sbci	r31, 0xFD	; 253
    2058:	01 90       	ld	r0, Z+
    205a:	f0 81       	ld	r31, Z
    205c:	e0 2d       	mov	r30, r0
    205e:	4e 17       	cp	r20, r30
    2060:	5f 07       	cpc	r21, r31
    2062:	39 f0       	breq	.+14     	; 0x2072 <dropPickup+0x96>
    2064:	31 96       	adiw	r30, 0x01	; 1
    2066:	29 f0       	breq	.+10     	; 0x2072 <dropPickup+0x96>
		pickNode(a2, a1);
    2068:	bc 01       	movw	r22, r24
    206a:	8d 2f       	mov	r24, r29
    206c:	9c 2f       	mov	r25, r28
    206e:	1d dd       	rcall	.-1478   	; 0x1aaa <pickNode>
    2070:	0b c0       	rjmp	.+22     	; 0x2088 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    2072:	24 17       	cp	r18, r20
    2074:	35 07       	cpc	r19, r21
    2076:	41 f0       	breq	.+16     	; 0x2088 <dropPickup+0xac>
    2078:	2f 3f       	cpi	r18, 0xFF	; 255
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	29 f0       	breq	.+10     	; 0x2088 <dropPickup+0xac>
		pickNode(a2, a2);
    207e:	6d 2f       	mov	r22, r29
    2080:	7c 2f       	mov	r23, r28
    2082:	8d 2f       	mov	r24, r29
    2084:	9c 2f       	mov	r25, r28
    2086:	11 dd       	rcall	.-1502   	; 0x1aaa <pickNode>
}
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <nodeDrop>:
	lcd("dropRight");
	else
	lcd("dropLeft");
}
void nodeDrop(int armNo, int side)
{
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    2098:	e0 91 89 02 	lds	r30, 0x0289
    209c:	f0 91 8a 02 	lds	r31, 0x028A
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	e6 0f       	add	r30, r22
    20a6:	f7 1f       	adc	r31, r23
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	e3 57       	subi	r30, 0x73	; 115
    20ae:	fd 4f       	sbci	r31, 0xFD	; 253
    20b0:	8c 01       	movw	r16, r24
    20b2:	00 0f       	add	r16, r16
    20b4:	11 1f       	adc	r17, r17
    20b6:	0d 54       	subi	r16, 0x4D	; 77
    20b8:	1d 4f       	sbci	r17, 0xFD	; 253
    20ba:	d8 01       	movw	r26, r16
    20bc:	8d 91       	ld	r24, X+
    20be:	9c 91       	ld	r25, X
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
	position(armNo, side);
    20c4:	ce 01       	movw	r24, r28
    20c6:	08 dc       	rcall	.-2032   	; 0x18d8 <position>
	drop(armNo);
    20c8:	ce 01       	movw	r24, r28
    20ca:	0e 94 63 08 	call	0x10c6	; 0x10c6 <drop>
	arm[armNo] = -1;
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	9f ef       	ldi	r25, 0xFF	; 255
    20d2:	f8 01       	movw	r30, r16
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    20d8:	80 91 58 02 	lds	r24, 0x0258
    20dc:	90 91 59 02 	lds	r25, 0x0259
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	90 93 59 02 	sts	0x0259, r25
    20e6:	80 93 58 02 	sts	0x0258, r24
}
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret

000020f4 <canDrop>:
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
		pickNode(a2, a2);
}

void canDrop()
{
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    20fc:	20 91 89 02 	lds	r18, 0x0289
    2100:	30 91 8a 02 	lds	r19, 0x028A
    2104:	22 30       	cpi	r18, 0x02	; 2
    2106:	31 05       	cpc	r19, r1
    2108:	30 f4       	brcc	.+12     	; 0x2116 <canDrop+0x22>
    210a:	80 91 50 02 	lds	r24, 0x0250
    210e:	90 91 51 02 	lds	r25, 0x0251
    2112:	02 97       	sbiw	r24, 0x02	; 2
    2114:	79 f0       	breq	.+30     	; 0x2134 <canDrop+0x40>
    2116:	c9 01       	movw	r24, r18
    2118:	02 97       	sbiw	r24, 0x02	; 2
    211a:	02 97       	sbiw	r24, 0x02	; 2
    211c:	80 f4       	brcc	.+32     	; 0x213e <canDrop+0x4a>
    211e:	80 91 50 02 	lds	r24, 0x0250
    2122:	90 91 51 02 	lds	r25, 0x0251
    2126:	89 2b       	or	r24, r25
    2128:	79 f0       	breq	.+30     	; 0x2148 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    212a:	01 e0       	ldi	r16, 0x01	; 1
    212c:	10 e0       	ldi	r17, 0x00	; 0
    212e:	c0 e0       	ldi	r28, 0x00	; 0
    2130:	d0 e0       	ldi	r29, 0x00	; 0
    2132:	0e c0       	rjmp	.+28     	; 0x2150 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2134:	00 e0       	ldi	r16, 0x00	; 0
    2136:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2138:	c1 e0       	ldi	r28, 0x01	; 1
    213a:	d0 e0       	ldi	r29, 0x00	; 0
    213c:	09 c0       	rjmp	.+18     	; 0x2150 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    213e:	01 e0       	ldi	r16, 0x01	; 1
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	c0 e0       	ldi	r28, 0x00	; 0
    2144:	d0 e0       	ldi	r29, 0x00	; 0
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2148:	00 e0       	ldi	r16, 0x00	; 0
    214a:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    214c:	c1 e0       	ldi	r28, 0x01	; 1
    214e:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    2150:	40 91 03 02 	lds	r20, 0x0203
    2154:	50 91 04 02 	lds	r21, 0x0204
    2158:	42 30       	cpi	r20, 0x02	; 2
    215a:	51 05       	cpc	r21, r1
    215c:	09 f4       	brne	.+2      	; 0x2160 <canDrop+0x6c>
    215e:	3c c1       	rjmp	.+632    	; 0x23d8 <__stack+0x1d9>
    2160:	f9 01       	movw	r30, r18
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	e1 56       	subi	r30, 0x61	; 97
    2168:	fd 4f       	sbci	r31, 0xFD	; 253
    216a:	40 81       	ld	r20, Z
    216c:	51 81       	ldd	r21, Z+1	; 0x01
    216e:	80 91 b3 02 	lds	r24, 0x02B3
    2172:	90 91 b4 02 	lds	r25, 0x02B4
    2176:	84 17       	cp	r24, r20
    2178:	95 07       	cpc	r25, r21
    217a:	41 f0       	breq	.+16     	; 0x218c <canDrop+0x98>
    217c:	80 91 b5 02 	lds	r24, 0x02B5
    2180:	90 91 b6 02 	lds	r25, 0x02B6
    2184:	48 17       	cp	r20, r24
    2186:	59 07       	cpc	r21, r25
    2188:	09 f0       	breq	.+2      	; 0x218c <canDrop+0x98>
    218a:	26 c1       	rjmp	.+588    	; 0x23d8 <__stack+0x1d9>
		return;
	else
	{
		if (visited[ct] == 0)
    218c:	f9 01       	movw	r30, r18
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	ea 59       	subi	r30, 0x9A	; 154
    2194:	fd 4f       	sbci	r31, 0xFD	; 253
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	89 2b       	or	r24, r25
    219c:	09 f4       	brne	.+2      	; 0x21a0 <canDrop+0xac>
			terminalCheck1();
    219e:	c9 da       	rcall	.-2670   	; 0x1732 <terminalCheck1>
		if (armCount == 0)
    21a0:	80 91 03 02 	lds	r24, 0x0203
    21a4:	90 91 04 02 	lds	r25, 0x0204
    21a8:	89 2b       	or	r24, r25
    21aa:	09 f0       	breq	.+2      	; 0x21ae <canDrop+0xba>
    21ac:	48 c0       	rjmp	.+144    	; 0x223e <__stack+0x3f>
		{
			if (arm[arm0] == color[ct])
    21ae:	20 91 89 02 	lds	r18, 0x0289
    21b2:	30 91 8a 02 	lds	r19, 0x028A
    21b6:	f9 01       	movw	r30, r18
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	e1 56       	subi	r30, 0x61	; 97
    21be:	fd 4f       	sbci	r31, 0xFD	; 253
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	ed 54       	subi	r30, 0x4D	; 77
    21cc:	fd 4f       	sbci	r31, 0xFD	; 253
    21ce:	40 81       	ld	r20, Z
    21d0:	51 81       	ldd	r21, Z+1	; 0x01
    21d2:	48 17       	cp	r20, r24
    21d4:	59 07       	cpc	r21, r25
    21d6:	a9 f4       	brne	.+42     	; 0x2202 <__stack+0x3>
				if (term[ct][0] == -1)
    21d8:	f9 01       	movw	r30, r18
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	e3 57       	subi	r30, 0x73	; 115
    21e4:	fd 4f       	sbci	r31, 0xFD	; 253
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	29 f4       	brne	.+10     	; 0x21f8 <canDrop+0x104>
					nodeDrop(arm0, 0);
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	ce 01       	movw	r24, r28
    21f4:	4c df       	rcall	.-360    	; 0x208e <nodeDrop>
    21f6:	23 c0       	rjmp	.+70     	; 0x223e <__stack+0x3f>
				else nodeDrop(arm0, 1);
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	ce 01       	movw	r24, r28
    21fe:	47 df       	rcall	.-370    	; 0x208e <nodeDrop>
    2200:	1e c0       	rjmp	.+60     	; 0x223e <__stack+0x3f>
			else if (arm[arm1] == color[ct])
    2202:	f8 01       	movw	r30, r16
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	ed 54       	subi	r30, 0x4D	; 77
    220a:	fd 4f       	sbci	r31, 0xFD	; 253
    220c:	40 81       	ld	r20, Z
    220e:	51 81       	ldd	r21, Z+1	; 0x01
    2210:	84 17       	cp	r24, r20
    2212:	95 07       	cpc	r25, r21
    2214:	a1 f4       	brne	.+40     	; 0x223e <__stack+0x3f>
				if (term[ct][0] != -1)
    2216:	f9 01       	movw	r30, r18
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	e3 57       	subi	r30, 0x73	; 115
    2222:	fd 4f       	sbci	r31, 0xFD	; 253
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	29 f0       	breq	.+10     	; 0x2236 <__stack+0x37>
					nodeDrop(arm1, 1);
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	c8 01       	movw	r24, r16
    2232:	2d df       	rcall	.-422    	; 0x208e <nodeDrop>
    2234:	04 c0       	rjmp	.+8      	; 0x223e <__stack+0x3f>
				else nodeDrop(arm1, 0);
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	c8 01       	movw	r24, r16
    223c:	28 df       	rcall	.-432    	; 0x208e <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    223e:	20 91 89 02 	lds	r18, 0x0289
    2242:	30 91 8a 02 	lds	r19, 0x028A
    2246:	f9 01       	movw	r30, r18
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	e1 56       	subi	r30, 0x61	; 97
    224e:	fd 4f       	sbci	r31, 0xFD	; 253
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	40 91 b3 02 	lds	r20, 0x02B3
    2258:	50 91 b4 02 	lds	r21, 0x02B4
    225c:	48 17       	cp	r20, r24
    225e:	59 07       	cpc	r21, r25
    2260:	41 f0       	breq	.+16     	; 0x2272 <__stack+0x73>
    2262:	40 91 b5 02 	lds	r20, 0x02B5
    2266:	50 91 b6 02 	lds	r21, 0x02B6
    226a:	84 17       	cp	r24, r20
    226c:	95 07       	cpc	r25, r21
    226e:	09 f0       	breq	.+2      	; 0x2272 <__stack+0x73>
    2270:	b3 c0       	rjmp	.+358    	; 0x23d8 <__stack+0x1d9>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2272:	f9 01       	movw	r30, r18
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	e3 57       	subi	r30, 0x73	; 115
    227e:	fd 4f       	sbci	r31, 0xFD	; 253
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	09 f4       	brne	.+2      	; 0x228a <__stack+0x8b>
    2288:	46 c0       	rjmp	.+140    	; 0x2316 <__stack+0x117>
    228a:	f9 01       	movw	r30, r18
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	e3 57       	subi	r30, 0x73	; 115
    2296:	fd 4f       	sbci	r31, 0xFD	; 253
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	d1 f0       	breq	.+52     	; 0x22d4 <__stack+0xd5>
				if (visited[ct] == 0)
    22a0:	f9 01       	movw	r30, r18
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	ea 59       	subi	r30, 0x9A	; 154
    22a8:	fd 4f       	sbci	r31, 0xFD	; 253
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	89 2b       	or	r24, r25
    22b0:	89 f4       	brne	.+34     	; 0x22d4 <__stack+0xd5>
					terminalCheck2();
    22b2:	0e 94 16 07 	call	0xe2c	; 0xe2c <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    22b6:	20 91 89 02 	lds	r18, 0x0289
    22ba:	30 91 8a 02 	lds	r19, 0x028A
    22be:	f9 01       	movw	r30, r18
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	ee 0f       	add	r30, r30
    22c6:	ff 1f       	adc	r31, r31
    22c8:	e3 57       	subi	r30, 0x73	; 115
    22ca:	fd 4f       	sbci	r31, 0xFD	; 253
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	09 f1       	breq	.+66     	; 0x2316 <__stack+0x117>
    22d4:	f9 01       	movw	r30, r18
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	e3 57       	subi	r30, 0x73	; 115
    22e0:	fd 4f       	sbci	r31, 0xFD	; 253
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	b1 f0       	breq	.+44     	; 0x2316 <__stack+0x117>
			{
				if (arm[arm0] == color[ct])
    22ea:	de 01       	movw	r26, r28
    22ec:	aa 0f       	add	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	ad 54       	subi	r26, 0x4D	; 77
    22f2:	bd 4f       	sbci	r27, 0xFD	; 253
    22f4:	f9 01       	movw	r30, r18
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	e1 56       	subi	r30, 0x61	; 97
    22fc:	fd 4f       	sbci	r31, 0xFD	; 253
    22fe:	4d 91       	ld	r20, X+
    2300:	5c 91       	ld	r21, X
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	48 17       	cp	r20, r24
    2308:	59 07       	cpc	r21, r25
    230a:	19 f4       	brne	.+6      	; 0x2312 <__stack+0x113>
					dropPickup(arm0);
    230c:	ce 01       	movw	r24, r28
    230e:	66 de       	rcall	.-820    	; 0x1fdc <dropPickup>
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <__stack+0x117>
				else dropPickup(arm1);
    2312:	c8 01       	movw	r24, r16
    2314:	63 de       	rcall	.-826    	; 0x1fdc <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    2316:	80 91 89 02 	lds	r24, 0x0289
    231a:	90 91 8a 02 	lds	r25, 0x028A
    231e:	fc 01       	movw	r30, r24
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	e1 56       	subi	r30, 0x61	; 97
    2326:	fd 4f       	sbci	r31, 0xFD	; 253
    2328:	20 81       	ld	r18, Z
    232a:	31 81       	ldd	r19, Z+1	; 0x01
    232c:	fe 01       	movw	r30, r28
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	ed 54       	subi	r30, 0x4D	; 77
    2334:	fd 4f       	sbci	r31, 0xFD	; 253
    2336:	40 81       	ld	r20, Z
    2338:	51 81       	ldd	r21, Z+1	; 0x01
    233a:	42 17       	cp	r20, r18
    233c:	53 07       	cpc	r21, r19
    233e:	11 f5       	brne	.+68     	; 0x2384 <__stack+0x185>
    2340:	fc 01       	movw	r30, r24
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e3 57       	subi	r30, 0x73	; 115
    234c:	fd 4f       	sbci	r31, 0xFD	; 253
    234e:	40 81       	ld	r20, Z
    2350:	51 81       	ldd	r21, Z+1	; 0x01
    2352:	4f 3f       	cpi	r20, 0xFF	; 255
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	29 f4       	brne	.+10     	; 0x2362 <__stack+0x163>
				nodeDrop(arm0, 0);
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	ce 01       	movw	r24, r28
    235e:	97 de       	rcall	.-722    	; 0x208e <nodeDrop>
    2360:	3b c0       	rjmp	.+118    	; 0x23d8 <__stack+0x1d9>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    2362:	fc 01       	movw	r30, r24
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	e3 57       	subi	r30, 0x73	; 115
    236e:	fd 4f       	sbci	r31, 0xFD	; 253
    2370:	42 81       	ldd	r20, Z+2	; 0x02
    2372:	53 81       	ldd	r21, Z+3	; 0x03
    2374:	4f 3f       	cpi	r20, 0xFF	; 255
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	29 f4       	brne	.+10     	; 0x2384 <__stack+0x185>
				nodeDrop(arm0, 1);
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	ce 01       	movw	r24, r28
    2380:	86 de       	rcall	.-756    	; 0x208e <nodeDrop>
    2382:	2a c0       	rjmp	.+84     	; 0x23d8 <__stack+0x1d9>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2384:	f8 01       	movw	r30, r16
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ed 54       	subi	r30, 0x4D	; 77
    238c:	fd 4f       	sbci	r31, 0xFD	; 253
    238e:	40 81       	ld	r20, Z
    2390:	51 81       	ldd	r21, Z+1	; 0x01
    2392:	24 17       	cp	r18, r20
    2394:	35 07       	cpc	r19, r21
    2396:	01 f5       	brne	.+64     	; 0x23d8 <__stack+0x1d9>
    2398:	fc 01       	movw	r30, r24
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	e3 57       	subi	r30, 0x73	; 115
    23a4:	fd 4f       	sbci	r31, 0xFD	; 253
    23a6:	20 81       	ld	r18, Z
    23a8:	31 81       	ldd	r19, Z+1	; 0x01
    23aa:	2f 3f       	cpi	r18, 0xFF	; 255
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	29 f4       	brne	.+10     	; 0x23ba <__stack+0x1bb>
				nodeDrop(arm1, 0);
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	c8 01       	movw	r24, r16
    23b6:	6b de       	rcall	.-810    	; 0x208e <nodeDrop>
    23b8:	0f c0       	rjmp	.+30     	; 0x23d8 <__stack+0x1d9>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    23ba:	fc 01       	movw	r30, r24
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	e3 57       	subi	r30, 0x73	; 115
    23c6:	fd 4f       	sbci	r31, 0xFD	; 253
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	21 f4       	brne	.+8      	; 0x23d8 <__stack+0x1d9>
				nodeDrop(arm1, 1);
    23d0:	61 e0       	ldi	r22, 0x01	; 1
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	c8 01       	movw	r24, r16
    23d6:	5b de       	rcall	.-842    	; 0x208e <nodeDrop>

		}
	}
}
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	08 95       	ret

000023e2 <pickSort>:
	term[ct][side] = -1;
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}

void pickSort(int armNo, int sortNo)
{
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	ec 01       	movw	r28, r24
    23ec:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    23ee:	fc 01       	movw	r30, r24
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ed 54       	subi	r30, 0x4D	; 77
    23f6:	fd 4f       	sbci	r31, 0xFD	; 253
    23f8:	db 01       	movw	r26, r22
    23fa:	aa 0f       	add	r26, r26
    23fc:	bb 1f       	adc	r27, r27
    23fe:	ab 57       	subi	r26, 0x7B	; 123
    2400:	bd 4f       	sbci	r27, 0xFD	; 253
    2402:	8d 91       	ld	r24, X+
    2404:	9c 91       	ld	r25, X
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    240a:	c6 17       	cp	r28, r22
    240c:	d7 07       	cpc	r29, r23
    240e:	39 f4       	brne	.+14     	; 0x241e <pickSort+0x3c>
    2410:	80 91 50 02 	lds	r24, 0x0250
    2414:	90 91 51 02 	lds	r25, 0x0251
    2418:	89 2b       	or	r24, r25
    241a:	49 f4       	brne	.+18     	; 0x242e <pickSort+0x4c>
    241c:	06 c0       	rjmp	.+12     	; 0x242a <pickSort+0x48>
    241e:	80 91 50 02 	lds	r24, 0x0250
    2422:	90 91 51 02 	lds	r25, 0x0251
    2426:	02 97       	sbiw	r24, 0x02	; 2
    2428:	11 f4       	brne	.+4      	; 0x242e <pickSort+0x4c>
		turn();
    242a:	a1 d8       	rcall	.-3774   	; 0x156e <turn>
    242c:	0c c0       	rjmp	.+24     	; 0x2446 <pickSort+0x64>
	else
	{
		if (dir == 1 || dir == 3)
    242e:	80 91 50 02 	lds	r24, 0x0250
    2432:	90 91 51 02 	lds	r25, 0x0251
    2436:	8d 7f       	andi	r24, 0xFD	; 253
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	29 f4       	brne	.+10     	; 0x2446 <pickSort+0x64>
			if (armNo == 0)
    243c:	20 97       	sbiw	r28, 0x00	; 0
    243e:	11 f4       	brne	.+4      	; 0x2444 <pickSort+0x62>
				turnLeft();
    2440:	45 d8       	rcall	.-3958   	; 0x14cc <turnLeft>
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <pickSort+0x64>
			else turnRight();
    2444:	02 d8       	rcall	.-4092   	; 0x144a <turnRight>
	}
	pick(armNo);
    2446:	ce 01       	movw	r24, r28
    2448:	0e 94 45 08 	call	0x108a	; 0x108a <pick>
	sort[sortNo] = -1;
    244c:	f8 01       	movw	r30, r16
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	eb 57       	subi	r30, 0x7B	; 123
    2454:	fd 4f       	sbci	r31, 0xFD	; 253
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f ef       	ldi	r25, 0xFF	; 255
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	08 95       	ret

00002468 <sortDrop>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
}
void sortDrop(int armNo, int sortNo)
{
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    246e:	fb 01       	movw	r30, r22
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	eb 57       	subi	r30, 0x7B	; 123
    2476:	fd 4f       	sbci	r31, 0xFD	; 253
    2478:	dc 01       	movw	r26, r24
    247a:	aa 0f       	add	r26, r26
    247c:	bb 1f       	adc	r27, r27
    247e:	ad 54       	subi	r26, 0x4D	; 77
    2480:	bd 4f       	sbci	r27, 0xFD	; 253
    2482:	8d 91       	ld	r24, X+
    2484:	9c 91       	ld	r25, X
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    248a:	c6 17       	cp	r28, r22
    248c:	d7 07       	cpc	r29, r23
    248e:	39 f4       	brne	.+14     	; 0x249e <sortDrop+0x36>
    2490:	80 91 50 02 	lds	r24, 0x0250
    2494:	90 91 51 02 	lds	r25, 0x0251
    2498:	89 2b       	or	r24, r25
    249a:	49 f4       	brne	.+18     	; 0x24ae <sortDrop+0x46>
    249c:	06 c0       	rjmp	.+12     	; 0x24aa <sortDrop+0x42>
    249e:	80 91 50 02 	lds	r24, 0x0250
    24a2:	90 91 51 02 	lds	r25, 0x0251
    24a6:	02 97       	sbiw	r24, 0x02	; 2
    24a8:	11 f4       	brne	.+4      	; 0x24ae <sortDrop+0x46>
		turn();
    24aa:	61 d8       	rcall	.-3902   	; 0x156e <turn>
    24ac:	0d c0       	rjmp	.+26     	; 0x24c8 <sortDrop+0x60>
	else
	{
		if (dir == 1 || dir == 3)
    24ae:	80 91 50 02 	lds	r24, 0x0250
    24b2:	90 91 51 02 	lds	r25, 0x0251
    24b6:	8d 7f       	andi	r24, 0xFD	; 253
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	31 f4       	brne	.+12     	; 0x24c8 <sortDrop+0x60>
			if (armNo == 0)
    24bc:	20 97       	sbiw	r28, 0x00	; 0
    24be:	11 f4       	brne	.+4      	; 0x24c4 <sortDrop+0x5c>
				turnLeft();
    24c0:	05 d8       	rcall	.-4086   	; 0x14cc <turnLeft>
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <sortDrop+0x60>
			else turnRight();
    24c4:	0e 94 25 0a 	call	0x144a	; 0x144a <turnRight>
	}
	drop(armNo);
    24c8:	ce 01       	movw	r24, r28
    24ca:	0e 94 63 08 	call	0x10c6	; 0x10c6 <drop>
	arm[armNo] = -1;
    24ce:	cc 0f       	add	r28, r28
    24d0:	dd 1f       	adc	r29, r29
    24d2:	cd 54       	subi	r28, 0x4D	; 77
    24d4:	dd 4f       	sbci	r29, 0xFD	; 253
    24d6:	8f ef       	ldi	r24, 0xFF	; 255
    24d8:	9f ef       	ldi	r25, 0xFF	; 255
    24da:	99 83       	std	Y+1, r25	; 0x01
    24dc:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	08 95       	ret

000024e4 <newSort>:
		}
	}
}

void newSort()
{
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    24ec:	20 91 b3 02 	lds	r18, 0x02B3
    24f0:	30 91 b4 02 	lds	r19, 0x02B4
    24f4:	2f 3f       	cpi	r18, 0xFF	; 255
    24f6:	1f ef       	ldi	r17, 0xFF	; 255
    24f8:	31 07       	cpc	r19, r17
    24fa:	41 f0       	breq	.+16     	; 0x250c <newSort+0x28>
		a1 = indicator[arm[0]];
    24fc:	f9 01       	movw	r30, r18
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	e9 55       	subi	r30, 0x59	; 89
    2504:	fd 4f       	sbci	r31, 0xFD	; 253
    2506:	c0 81       	ld	r28, Z
    2508:	d1 81       	ldd	r29, Z+1	; 0x01
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    250c:	ce ef       	ldi	r28, 0xFE	; 254
    250e:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    2510:	e0 91 b5 02 	lds	r30, 0x02B5
    2514:	f0 91 b6 02 	lds	r31, 0x02B6
    2518:	ef 3f       	cpi	r30, 0xFF	; 255
    251a:	4f ef       	ldi	r20, 0xFF	; 255
    251c:	f4 07       	cpc	r31, r20
    251e:	09 f4       	brne	.+2      	; 0x2522 <newSort+0x3e>
    2520:	7f c1       	rjmp	.+766    	; 0x2820 <newSort+0x33c>
		a2 = indicator[arm[1]];
    2522:	df 01       	movw	r26, r30
    2524:	aa 0f       	add	r26, r26
    2526:	bb 1f       	adc	r27, r27
    2528:	a9 55       	subi	r26, 0x59	; 89
    252a:	bd 4f       	sbci	r27, 0xFD	; 253
    252c:	4d 91       	ld	r20, X+
    252e:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    2530:	80 91 89 02 	lds	r24, 0x0289
    2534:	90 91 8a 02 	lds	r25, 0x028A
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	81 70       	andi	r24, 0x01	; 1
    253c:	90 78       	andi	r25, 0x80	; 128
    253e:	99 23       	and	r25, r25
    2540:	24 f4       	brge	.+8      	; 0x254a <newSort+0x66>
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	8e 6f       	ori	r24, 0xFE	; 254
    2546:	9f 6f       	ori	r25, 0xFF	; 255
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    254c:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    254e:	d0 93 8a 02 	sts	0x028A, r29
    2552:	c0 93 89 02 	sts	0x0289, r28
		if(arm[0]==arm[1] && (visited[a1]==0 ||(term[a1][0] != -1 && term[a1][1] != -1)))
    2556:	2e 17       	cp	r18, r30
    2558:	3f 07       	cpc	r19, r31
    255a:	61 f5       	brne	.+88     	; 0x25b4 <newSort+0xd0>
    255c:	de 01       	movw	r26, r28
    255e:	aa 0f       	add	r26, r26
    2560:	bb 1f       	adc	r27, r27
    2562:	aa 59       	subi	r26, 0x9A	; 154
    2564:	bd 4f       	sbci	r27, 0xFD	; 253
    2566:	0d 90       	ld	r0, X+
    2568:	bc 91       	ld	r27, X
    256a:	a0 2d       	mov	r26, r0
    256c:	ab 2b       	or	r26, r27
    256e:	c9 f0       	breq	.+50     	; 0x25a2 <newSort+0xbe>
    2570:	de 01       	movw	r26, r28
    2572:	aa 0f       	add	r26, r26
    2574:	bb 1f       	adc	r27, r27
    2576:	aa 0f       	add	r26, r26
    2578:	bb 1f       	adc	r27, r27
    257a:	a3 57       	subi	r26, 0x73	; 115
    257c:	bd 4f       	sbci	r27, 0xFD	; 253
    257e:	0d 90       	ld	r0, X+
    2580:	bc 91       	ld	r27, X
    2582:	a0 2d       	mov	r26, r0
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	b1 f0       	breq	.+44     	; 0x25b4 <newSort+0xd0>
    2588:	de 01       	movw	r26, r28
    258a:	aa 0f       	add	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	aa 0f       	add	r26, r26
    2590:	bb 1f       	adc	r27, r27
    2592:	a3 57       	subi	r26, 0x73	; 115
    2594:	bd 4f       	sbci	r27, 0xFD	; 253
    2596:	12 96       	adiw	r26, 0x02	; 2
    2598:	0d 90       	ld	r0, X+
    259a:	bc 91       	ld	r27, X
    259c:	a0 2d       	mov	r26, r0
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	49 f0       	breq	.+18     	; 0x25b4 <newSort+0xd0>
		{
			if(a1== 0 || a1==3)
    25a2:	20 97       	sbiw	r28, 0x00	; 0
    25a4:	19 f0       	breq	.+6      	; 0x25ac <newSort+0xc8>
    25a6:	23 97       	sbiw	r28, 0x03	; 3
    25a8:	09 f0       	breq	.+2      	; 0x25ac <newSort+0xc8>
    25aa:	28 c1       	rjmp	.+592    	; 0x27fc <newSort+0x318>
				sortDrop(1,t1);
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	5b df       	rcall	.-330    	; 0x2468 <sortDrop>
    25b2:	24 c1       	rjmp	.+584    	; 0x27fc <newSort+0x318>
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    25b4:	2f 3f       	cpi	r18, 0xFF	; 255
    25b6:	af ef       	ldi	r26, 0xFF	; 255
    25b8:	3a 07       	cpc	r19, r26
    25ba:	c1 f1       	breq	.+112    	; 0x262c <newSort+0x148>
    25bc:	de 01       	movw	r26, r28
    25be:	aa 0f       	add	r26, r26
    25c0:	bb 1f       	adc	r27, r27
    25c2:	aa 0f       	add	r26, r26
    25c4:	bb 1f       	adc	r27, r27
    25c6:	a3 57       	subi	r26, 0x73	; 115
    25c8:	bd 4f       	sbci	r27, 0xFD	; 253
    25ca:	0d 90       	ld	r0, X+
    25cc:	bc 91       	ld	r27, X
    25ce:	a0 2d       	mov	r26, r0
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	51 f0       	breq	.+20     	; 0x25e8 <newSort+0x104>
    25d4:	cc 0f       	add	r28, r28
    25d6:	dd 1f       	adc	r29, r29
    25d8:	cc 0f       	add	r28, r28
    25da:	dd 1f       	adc	r29, r29
    25dc:	c3 57       	subi	r28, 0x73	; 115
    25de:	dd 4f       	sbci	r29, 0xFD	; 253
    25e0:	aa 81       	ldd	r26, Y+2	; 0x02
    25e2:	bb 81       	ldd	r27, Y+3	; 0x03
    25e4:	11 96       	adiw	r26, 0x01	; 1
    25e6:	11 f5       	brne	.+68     	; 0x262c <newSort+0x148>
		{
			if (arm[1] == -1)
    25e8:	31 96       	adiw	r30, 0x01	; 1
    25ea:	09 f0       	breq	.+2      	; 0x25ee <newSort+0x10a>
    25ec:	07 c1       	rjmp	.+526    	; 0x27fc <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    25ee:	9b 01       	movw	r18, r22
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	f9 01       	movw	r30, r18
    25f6:	eb 57       	subi	r30, 0x7B	; 123
    25f8:	fd 4f       	sbci	r31, 0xFD	; 253
    25fa:	40 81       	ld	r20, Z
    25fc:	51 81       	ldd	r21, Z+1	; 0x01
    25fe:	f9 01       	movw	r30, r18
    2600:	e1 56       	subi	r30, 0x61	; 97
    2602:	fd 4f       	sbci	r31, 0xFD	; 253
    2604:	20 81       	ld	r18, Z
    2606:	31 81       	ldd	r19, Z+1	; 0x01
    2608:	42 17       	cp	r20, r18
    260a:	53 07       	cpc	r21, r19
    260c:	59 f0       	breq	.+22     	; 0x2624 <newSort+0x140>
    260e:	fc 01       	movw	r30, r24
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	e1 56       	subi	r30, 0x61	; 97
    2616:	fd 4f       	sbci	r31, 0xFD	; 253
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	48 17       	cp	r20, r24
    261e:	59 07       	cpc	r21, r25
    2620:	09 f0       	breq	.+2      	; 0x2624 <newSort+0x140>
    2622:	ec c0       	rjmp	.+472    	; 0x27fc <newSort+0x318>
					pickSort(1, t1);
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	dc de       	rcall	.-584    	; 0x23e2 <pickSort>
    262a:	e8 c0       	rjmp	.+464    	; 0x27fc <newSort+0x318>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    262c:	ef 3f       	cpi	r30, 0xFF	; 255
    262e:	af ef       	ldi	r26, 0xFF	; 255
    2630:	fa 07       	cpc	r31, r26
    2632:	09 f4       	brne	.+2      	; 0x2636 <newSort+0x152>
    2634:	51 c0       	rjmp	.+162    	; 0x26d8 <newSort+0x1f4>
    2636:	da 01       	movw	r26, r20
    2638:	aa 0f       	add	r26, r26
    263a:	bb 1f       	adc	r27, r27
    263c:	aa 0f       	add	r26, r26
    263e:	bb 1f       	adc	r27, r27
    2640:	a3 57       	subi	r26, 0x73	; 115
    2642:	bd 4f       	sbci	r27, 0xFD	; 253
    2644:	0d 90       	ld	r0, X+
    2646:	bc 91       	ld	r27, X
    2648:	a0 2d       	mov	r26, r0
    264a:	11 96       	adiw	r26, 0x01	; 1
    264c:	09 f4       	brne	.+2      	; 0x2650 <newSort+0x16c>
    264e:	0a c1       	rjmp	.+532    	; 0x2864 <newSort+0x380>
    2650:	da 01       	movw	r26, r20
    2652:	aa 0f       	add	r26, r26
    2654:	bb 1f       	adc	r27, r27
    2656:	aa 0f       	add	r26, r26
    2658:	bb 1f       	adc	r27, r27
    265a:	a3 57       	subi	r26, 0x73	; 115
    265c:	bd 4f       	sbci	r27, 0xFD	; 253
    265e:	12 96       	adiw	r26, 0x02	; 2
    2660:	0d 90       	ld	r0, X+
    2662:	bc 91       	ld	r27, X
    2664:	a0 2d       	mov	r26, r0
    2666:	11 96       	adiw	r26, 0x01	; 1
    2668:	b9 f5       	brne	.+110    	; 0x26d8 <newSort+0x1f4>
    266a:	ea c0       	rjmp	.+468    	; 0x2840 <newSort+0x35c>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    266c:	2f 3f       	cpi	r18, 0xFF	; 255
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	09 f0       	breq	.+2      	; 0x2674 <newSort+0x190>
    2672:	c4 c0       	rjmp	.+392    	; 0x27fc <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    2674:	9b 01       	movw	r18, r22
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	f9 01       	movw	r30, r18
    267c:	eb 57       	subi	r30, 0x7B	; 123
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	40 81       	ld	r20, Z
    2682:	51 81       	ldd	r21, Z+1	; 0x01
    2684:	f9 01       	movw	r30, r18
    2686:	e1 56       	subi	r30, 0x61	; 97
    2688:	fd 4f       	sbci	r31, 0xFD	; 253
    268a:	20 81       	ld	r18, Z
    268c:	31 81       	ldd	r19, Z+1	; 0x01
    268e:	42 17       	cp	r20, r18
    2690:	53 07       	cpc	r21, r19
    2692:	09 f0       	breq	.+2      	; 0x2696 <newSort+0x1b2>
    2694:	b3 c0       	rjmp	.+358    	; 0x27fc <newSort+0x318>
    2696:	fc 01       	movw	r30, r24
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	e1 56       	subi	r30, 0x61	; 97
    269e:	fd 4f       	sbci	r31, 0xFD	; 253
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	48 17       	cp	r20, r24
    26a6:	59 07       	cpc	r21, r25
    26a8:	09 f0       	breq	.+2      	; 0x26ac <newSort+0x1c8>
    26aa:	a8 c0       	rjmp	.+336    	; 0x27fc <newSort+0x318>
						pickSort(1, t1);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	98 de       	rcall	.-720    	; 0x23e2 <pickSort>
    26b2:	a4 c0       	rjmp	.+328    	; 0x27fc <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    26b4:	fb 01       	movw	r30, r22
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	eb 57       	subi	r30, 0x7B	; 123
    26bc:	fd 4f       	sbci	r31, 0xFD	; 253
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <newSort+0x1e4>
    26c6:	9a c0       	rjmp	.+308    	; 0x27fc <newSort+0x318>
    26c8:	2f 3f       	cpi	r18, 0xFF	; 255
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <newSort+0x1ec>
    26ce:	96 c0       	rjmp	.+300    	; 0x27fc <newSort+0x318>
				sortDrop(1, t1);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	c9 de       	rcall	.-622    	; 0x2468 <sortDrop>
    26d6:	92 c0       	rjmp	.+292    	; 0x27fc <newSort+0x318>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    26d8:	2f 3f       	cpi	r18, 0xFF	; 255
    26da:	1f ef       	ldi	r17, 0xFF	; 255
    26dc:	31 07       	cpc	r19, r17
    26de:	a1 f0       	breq	.+40     	; 0x2708 <newSort+0x224>
    26e0:	db 01       	movw	r26, r22
    26e2:	aa 0f       	add	r26, r26
    26e4:	bb 1f       	adc	r27, r27
    26e6:	ab 57       	subi	r26, 0x7B	; 123
    26e8:	bd 4f       	sbci	r27, 0xFD	; 253
    26ea:	8d 91       	ld	r24, X+
    26ec:	9c 91       	ld	r25, X
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	31 f4       	brne	.+12     	; 0x26fe <newSort+0x21a>
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	21 f0       	breq	.+8      	; 0x26fe <newSort+0x21a>
			sortDrop(1, t1);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	b6 de       	rcall	.-660    	; 0x2468 <sortDrop>
    26fc:	7f c0       	rjmp	.+254    	; 0x27fc <newSort+0x318>
		else if (arm[0] != -1)
			ct = arm[0];
    26fe:	30 93 8a 02 	sts	0x028A, r19
    2702:	20 93 89 02 	sts	0x0289, r18
    2706:	7a c0       	rjmp	.+244    	; 0x27fc <newSort+0x318>
		else ct = arm[1];
    2708:	f0 93 8a 02 	sts	0x028A, r31
    270c:	e0 93 89 02 	sts	0x0289, r30
    2710:	75 c0       	rjmp	.+234    	; 0x27fc <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    2712:	a8 01       	movw	r20, r16
    2714:	44 0f       	add	r20, r20
    2716:	55 1f       	adc	r21, r21
    2718:	fa 01       	movw	r30, r20
    271a:	eb 57       	subi	r30, 0x7B	; 123
    271c:	fd 4f       	sbci	r31, 0xFD	; 253
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	fa 01       	movw	r30, r20
    2724:	e1 56       	subi	r30, 0x61	; 97
    2726:	fd 4f       	sbci	r31, 0xFD	; 253
    2728:	40 81       	ld	r20, Z
    272a:	51 81       	ldd	r21, Z+1	; 0x01
    272c:	24 17       	cp	r18, r20
    272e:	35 07       	cpc	r19, r21
    2730:	51 f0       	breq	.+20     	; 0x2746 <newSort+0x262>
    2732:	fc 01       	movw	r30, r24
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	e1 56       	subi	r30, 0x61	; 97
    273a:	fd 4f       	sbci	r31, 0xFD	; 253
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	26 17       	cp	r18, r22
    2742:	37 07       	cpc	r19, r23
    2744:	81 f4       	brne	.+32     	; 0x2766 <newSort+0x282>
    2746:	2f 3f       	cpi	r18, 0xFF	; 255
    2748:	af ef       	ldi	r26, 0xFF	; 255
    274a:	3a 07       	cpc	r19, r26
    274c:	31 f1       	breq	.+76     	; 0x279a <newSort+0x2b6>
			ct = indicator[sort[t1]];
    274e:	f9 01       	movw	r30, r18
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	e9 55       	subi	r30, 0x59	; 89
    2756:	fd 4f       	sbci	r31, 0xFD	; 253
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	90 93 8a 02 	sts	0x028A, r25
    2760:	80 93 89 02 	sts	0x0289, r24
    2764:	4b c0       	rjmp	.+150    	; 0x27fc <newSort+0x318>
		else if (sort[t1] != -1)
    2766:	2f 3f       	cpi	r18, 0xFF	; 255
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	b9 f0       	breq	.+46     	; 0x279a <newSort+0x2b6>
		{
			pickSort(0, t1);
    276c:	b8 01       	movw	r22, r16
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	37 de       	rcall	.-914    	; 0x23e2 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    2774:	0f 5f       	subi	r16, 0xFF	; 255
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	01 70       	andi	r16, 0x01	; 1
    277a:	10 78       	andi	r17, 0x80	; 128
    277c:	11 23       	and	r17, r17
    277e:	34 f4       	brge	.+12     	; 0x278c <newSort+0x2a8>
    2780:	01 50       	subi	r16, 0x01	; 1
    2782:	11 09       	sbc	r17, r1
    2784:	0e 6f       	ori	r16, 0xFE	; 254
    2786:	1f 6f       	ori	r17, 0xFF	; 255
    2788:	0f 5f       	subi	r16, 0xFF	; 255
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	0c 5f       	subi	r16, 0xFC	; 252
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	10 93 8a 02 	sts	0x028A, r17
    2794:	00 93 89 02 	sts	0x0289, r16
    2798:	31 c0       	rjmp	.+98     	; 0x27fc <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    279a:	f8 01       	movw	r30, r16
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	ea 59       	subi	r30, 0x9A	; 154
    27a2:	fd 4f       	sbci	r31, 0xFD	; 253
    27a4:	20 81       	ld	r18, Z
    27a6:	31 81       	ldd	r19, Z+1	; 0x01
    27a8:	21 30       	cpi	r18, 0x01	; 1
    27aa:	31 05       	cpc	r19, r1
    27ac:	19 f5       	brne	.+70     	; 0x27f4 <newSort+0x310>
    27ae:	f8 01       	movw	r30, r16
    27b0:	ee 0f       	add	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	ee 0f       	add	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	e3 57       	subi	r30, 0x73	; 115
    27ba:	fd 4f       	sbci	r31, 0xFD	; 253
    27bc:	20 81       	ld	r18, Z
    27be:	31 81       	ldd	r19, Z+1	; 0x01
    27c0:	42 17       	cp	r20, r18
    27c2:	53 07       	cpc	r21, r19
    27c4:	19 f0       	breq	.+6      	; 0x27cc <newSort+0x2e8>
    27c6:	2f 3f       	cpi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	a1 f4       	brne	.+40     	; 0x27f4 <newSort+0x310>
    27cc:	f8 01       	movw	r30, r16
    27ce:	ee 0f       	add	r30, r30
    27d0:	ff 1f       	adc	r31, r31
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	e3 57       	subi	r30, 0x73	; 115
    27d8:	fd 4f       	sbci	r31, 0xFD	; 253
    27da:	22 81       	ldd	r18, Z+2	; 0x02
    27dc:	33 81       	ldd	r19, Z+3	; 0x03
    27de:	42 17       	cp	r20, r18
    27e0:	53 07       	cpc	r21, r19
    27e2:	19 f0       	breq	.+6      	; 0x27ea <newSort+0x306>
    27e4:	2f 3f       	cpi	r18, 0xFF	; 255
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	29 f4       	brne	.+10     	; 0x27f4 <newSort+0x310>
			ct = t2;
    27ea:	90 93 8a 02 	sts	0x028A, r25
    27ee:	80 93 89 02 	sts	0x0289, r24
    27f2:	04 c0       	rjmp	.+8      	; 0x27fc <newSort+0x318>
		else ct = t1;
    27f4:	10 93 8a 02 	sts	0x028A, r17
    27f8:	00 93 89 02 	sts	0x0289, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    27fc:	80 91 89 02 	lds	r24, 0x0289
    2800:	90 91 8a 02 	lds	r25, 0x028A
    2804:	02 96       	adiw	r24, 0x02	; 2
    2806:	83 70       	andi	r24, 0x03	; 3
    2808:	90 78       	andi	r25, 0x80	; 128
    280a:	99 23       	and	r25, r25
    280c:	24 f4       	brge	.+8      	; 0x2816 <newSort+0x332>
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	8c 6f       	ori	r24, 0xFC	; 252
    2812:	9f 6f       	ori	r25, 0xFF	; 255
    2814:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    2816:	90 93 b0 02 	sts	0x02B0, r25
    281a:	80 93 af 02 	sts	0x02AF, r24
    281e:	2e c0       	rjmp	.+92     	; 0x287c <newSort+0x398>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    2820:	80 91 89 02 	lds	r24, 0x0289
    2824:	90 91 8a 02 	lds	r25, 0x028A
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	3b d4       	rcall	.+2166   	; 0x30a6 <__divmodhi4>
    2830:	8c 01       	movw	r16, r24
    2832:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    2834:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    2836:	2f 3f       	cpi	r18, 0xFF	; 255
    2838:	af ef       	ldi	r26, 0xFF	; 255
    283a:	3a 07       	cpc	r19, r26
    283c:	c1 f4       	brne	.+48     	; 0x286e <newSort+0x38a>
    283e:	69 cf       	rjmp	.-302    	; 0x2712 <newSort+0x22e>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2840:	50 93 8a 02 	sts	0x028A, r21
    2844:	40 93 89 02 	sts	0x0289, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    2848:	fa 01       	movw	r30, r20
    284a:	ee 0f       	add	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	e3 57       	subi	r30, 0x73	; 115
    2854:	fd 4f       	sbci	r31, 0xFD	; 253
    2856:	42 81       	ldd	r20, Z+2	; 0x02
    2858:	53 81       	ldd	r21, Z+3	; 0x03
    285a:	4f 3f       	cpi	r20, 0xFF	; 255
    285c:	5f 4f       	sbci	r21, 0xFF	; 255
    285e:	09 f0       	breq	.+2      	; 0x2862 <newSort+0x37e>
    2860:	29 cf       	rjmp	.-430    	; 0x26b4 <newSort+0x1d0>
    2862:	04 cf       	rjmp	.-504    	; 0x266c <newSort+0x188>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2864:	50 93 8a 02 	sts	0x028A, r21
    2868:	40 93 89 02 	sts	0x0289, r20
    286c:	ff ce       	rjmp	.-514    	; 0x266c <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    286e:	d0 93 8a 02 	sts	0x028A, r29
    2872:	c0 93 89 02 	sts	0x0289, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    2876:	4e ef       	ldi	r20, 0xFE	; 254
    2878:	5f ef       	ldi	r21, 0xFF	; 255
    287a:	9c ce       	rjmp	.-712    	; 0x25b4 <newSort+0xd0>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <sortCheck>:
void sortCheck()
{
    2886:	8f 92       	push	r8
    2888:	9f 92       	push	r9
    288a:	af 92       	push	r10
    288c:	bf 92       	push	r11
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    289e:	40 91 89 02 	lds	r20, 0x0289
    28a2:	50 91 8a 02 	lds	r21, 0x028A
    28a6:	42 30       	cpi	r20, 0x02	; 2
    28a8:	51 05       	cpc	r21, r1
    28aa:	30 f4       	brcc	.+12     	; 0x28b8 <sortCheck+0x32>
    28ac:	80 91 50 02 	lds	r24, 0x0250
    28b0:	90 91 51 02 	lds	r25, 0x0251
    28b4:	02 97       	sbiw	r24, 0x02	; 2
    28b6:	79 f0       	breq	.+30     	; 0x28d6 <sortCheck+0x50>
    28b8:	ca 01       	movw	r24, r20
    28ba:	02 97       	sbiw	r24, 0x02	; 2
    28bc:	02 97       	sbiw	r24, 0x02	; 2
    28be:	80 f4       	brcc	.+32     	; 0x28e0 <sortCheck+0x5a>
    28c0:	80 91 50 02 	lds	r24, 0x0250
    28c4:	90 91 51 02 	lds	r25, 0x0251
    28c8:	89 2b       	or	r24, r25
    28ca:	79 f0       	breq	.+30     	; 0x28ea <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    28cc:	01 e0       	ldi	r16, 0x01	; 1
    28ce:	10 e0       	ldi	r17, 0x00	; 0
    28d0:	c0 e0       	ldi	r28, 0x00	; 0
    28d2:	d0 e0       	ldi	r29, 0x00	; 0
    28d4:	0e c0       	rjmp	.+28     	; 0x28f2 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    28d6:	00 e0       	ldi	r16, 0x00	; 0
    28d8:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    28da:	c1 e0       	ldi	r28, 0x01	; 1
    28dc:	d0 e0       	ldi	r29, 0x00	; 0
    28de:	09 c0       	rjmp	.+18     	; 0x28f2 <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    28e0:	01 e0       	ldi	r16, 0x01	; 1
    28e2:	10 e0       	ldi	r17, 0x00	; 0
    28e4:	c0 e0       	ldi	r28, 0x00	; 0
    28e6:	d0 e0       	ldi	r29, 0x00	; 0
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    28ea:	00 e0       	ldi	r16, 0x00	; 0
    28ec:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    28ee:	c1 e0       	ldi	r28, 0x01	; 1
    28f0:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    28f2:	9a 01       	movw	r18, r20
    28f4:	21 70       	andi	r18, 0x01	; 1
    28f6:	30 78       	andi	r19, 0x80	; 128
    28f8:	33 23       	and	r19, r19
    28fa:	34 f4       	brge	.+12     	; 0x2908 <sortCheck+0x82>
    28fc:	21 50       	subi	r18, 0x01	; 1
    28fe:	31 09       	sbc	r19, r1
    2900:	2e 6f       	ori	r18, 0xFE	; 254
    2902:	3f 6f       	ori	r19, 0xFF	; 255
    2904:	2f 5f       	subi	r18, 0xFF	; 255
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	b2 2e       	mov	r11, r18
    290a:	a3 2e       	mov	r10, r19
    290c:	f9 01       	movw	r30, r18
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	eb 57       	subi	r30, 0x7B	; 123
    2914:	fd 4f       	sbci	r31, 0xFD	; 253
    2916:	20 81       	ld	r18, Z
    2918:	31 81       	ldd	r19, Z+1	; 0x01
    291a:	fa 01       	movw	r30, r20
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	e1 56       	subi	r30, 0x61	; 97
    2922:	fd 4f       	sbci	r31, 0xFD	; 253
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	28 17       	cp	r18, r24
    292a:	39 07       	cpc	r19, r25
    292c:	79 f0       	breq	.+30     	; 0x294c <sortCheck+0xc6>
    292e:	80 91 af 02 	lds	r24, 0x02AF
    2932:	90 91 b0 02 	lds	r25, 0x02B0
    2936:	fc 01       	movw	r30, r24
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	e1 56       	subi	r30, 0x61	; 97
    293e:	fd 4f       	sbci	r31, 0xFD	; 253
    2940:	40 81       	ld	r20, Z
    2942:	51 81       	ldd	r21, Z+1	; 0x01
    2944:	24 17       	cp	r18, r20
    2946:	35 07       	cpc	r19, r21
    2948:	09 f0       	breq	.+2      	; 0x294c <sortCheck+0xc6>
    294a:	a6 c0       	rjmp	.+332    	; 0x2a98 <sortCheck+0x212>
	{
		if (armCount>0)
    294c:	80 91 03 02 	lds	r24, 0x0203
    2950:	90 91 04 02 	lds	r25, 0x0204
    2954:	18 16       	cp	r1, r24
    2956:	19 06       	cpc	r1, r25
    2958:	0c f0       	brlt	.+2      	; 0x295c <sortCheck+0xd6>
    295a:	95 c0       	rjmp	.+298    	; 0x2a86 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    295c:	f9 01       	movw	r30, r18
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	e9 55       	subi	r30, 0x59	; 89
    2964:	fd 4f       	sbci	r31, 0xFD	; 253
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	70 93 8a 02 	sts	0x028A, r23
    296e:	60 93 89 02 	sts	0x0289, r22
			if (arm[arm0] == -1)
    2972:	fe 01       	movw	r30, r28
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	ed 54       	subi	r30, 0x4D	; 77
    297a:	fd 4f       	sbci	r31, 0xFD	; 253
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	69 f4       	brne	.+26     	; 0x299e <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    2984:	61 70       	andi	r22, 0x01	; 1
    2986:	70 78       	andi	r23, 0x80	; 128
    2988:	77 23       	and	r23, r23
    298a:	34 f4       	brge	.+12     	; 0x2998 <sortCheck+0x112>
    298c:	61 50       	subi	r22, 0x01	; 1
    298e:	71 09       	sbc	r23, r1
    2990:	6e 6f       	ori	r22, 0xFE	; 254
    2992:	7f 6f       	ori	r23, 0xFF	; 255
    2994:	6f 5f       	subi	r22, 0xFF	; 255
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	ce 01       	movw	r24, r28
    299a:	23 dd       	rcall	.-1466   	; 0x23e2 <pickSort>
    299c:	15 c0       	rjmp	.+42     	; 0x29c8 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    299e:	f8 01       	movw	r30, r16
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	ed 54       	subi	r30, 0x4D	; 77
    29a6:	fd 4f       	sbci	r31, 0xFD	; 253
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 96       	adiw	r24, 0x01	; 1
    29ae:	61 f4       	brne	.+24     	; 0x29c8 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    29b0:	61 70       	andi	r22, 0x01	; 1
    29b2:	70 78       	andi	r23, 0x80	; 128
    29b4:	77 23       	and	r23, r23
    29b6:	34 f4       	brge	.+12     	; 0x29c4 <sortCheck+0x13e>
    29b8:	61 50       	subi	r22, 0x01	; 1
    29ba:	71 09       	sbc	r23, r1
    29bc:	6e 6f       	ori	r22, 0xFE	; 254
    29be:	7f 6f       	ori	r23, 0xFF	; 255
    29c0:	6f 5f       	subi	r22, 0xFF	; 255
    29c2:	7f 4f       	sbci	r23, 0xFF	; 255
    29c4:	c8 01       	movw	r24, r16
    29c6:	0d dd       	rcall	.-1510   	; 0x23e2 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    29c8:	80 91 03 02 	lds	r24, 0x0203
    29cc:	90 91 04 02 	lds	r25, 0x0204
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <sortCheck+0x150>
    29d4:	69 c1       	rjmp	.+722    	; 0x2ca8 <sortCheck+0x422>
    29d6:	80 91 89 02 	lds	r24, 0x0289
    29da:	90 91 8a 02 	lds	r25, 0x028A
    29de:	fc 01       	movw	r30, r24
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	e3 57       	subi	r30, 0x73	; 115
    29ea:	fd 4f       	sbci	r31, 0xFD	; 253
    29ec:	20 81       	ld	r18, Z
    29ee:	31 81       	ldd	r19, Z+1	; 0x01
    29f0:	2f 3f       	cpi	r18, 0xFF	; 255
    29f2:	3f 4f       	sbci	r19, 0xFF	; 255
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <sortCheck+0x172>
    29f6:	58 c1       	rjmp	.+688    	; 0x2ca8 <sortCheck+0x422>
    29f8:	fc 01       	movw	r30, r24
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	e3 57       	subi	r30, 0x73	; 115
    2a04:	fd 4f       	sbci	r31, 0xFD	; 253
    2a06:	22 81       	ldd	r18, Z+2	; 0x02
    2a08:	33 81       	ldd	r19, Z+3	; 0x03
    2a0a:	2f 3f       	cpi	r18, 0xFF	; 255
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <sortCheck+0x18c>
    2a10:	4b c1       	rjmp	.+662    	; 0x2ca8 <sortCheck+0x422>
    2a12:	9c 01       	movw	r18, r24
    2a14:	21 70       	andi	r18, 0x01	; 1
    2a16:	30 78       	andi	r19, 0x80	; 128
    2a18:	33 23       	and	r19, r19
    2a1a:	34 f4       	brge	.+12     	; 0x2a28 <sortCheck+0x1a2>
    2a1c:	21 50       	subi	r18, 0x01	; 1
    2a1e:	31 09       	sbc	r19, r1
    2a20:	2e 6f       	ori	r18, 0xFE	; 254
    2a22:	3f 6f       	ori	r19, 0xFF	; 255
    2a24:	2f 5f       	subi	r18, 0xFF	; 255
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
    2a28:	62 2f       	mov	r22, r18
    2a2a:	73 2f       	mov	r23, r19
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	eb 57       	subi	r30, 0x7B	; 123
    2a34:	fd 4f       	sbci	r31, 0xFD	; 253
    2a36:	20 81       	ld	r18, Z
    2a38:	31 81       	ldd	r19, Z+1	; 0x01
    2a3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <sortCheck+0x1bc>
    2a40:	33 c1       	rjmp	.+614    	; 0x2ca8 <sortCheck+0x422>
			{
				if (arm[arm0] == color[ct])
    2a42:	fc 01       	movw	r30, r24
    2a44:	ee 0f       	add	r30, r30
    2a46:	ff 1f       	adc	r31, r31
    2a48:	e1 56       	subi	r30, 0x61	; 97
    2a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	fe 01       	movw	r30, r28
    2a52:	ee 0f       	add	r30, r30
    2a54:	ff 1f       	adc	r31, r31
    2a56:	ed 54       	subi	r30, 0x4D	; 77
    2a58:	fd 4f       	sbci	r31, 0xFD	; 253
    2a5a:	20 81       	ld	r18, Z
    2a5c:	31 81       	ldd	r19, Z+1	; 0x01
    2a5e:	28 17       	cp	r18, r24
    2a60:	39 07       	cpc	r19, r25
    2a62:	19 f4       	brne	.+6      	; 0x2a6a <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    2a64:	c8 01       	movw	r24, r16
    2a66:	00 dd       	rcall	.-1536   	; 0x2468 <sortDrop>
    2a68:	1f c1       	rjmp	.+574    	; 0x2ca8 <sortCheck+0x422>
				else if (arm[arm1] == color[ct])
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	ee 0f       	add	r30, r30
    2a6e:	ff 1f       	adc	r31, r31
    2a70:	ed 54       	subi	r30, 0x4D	; 77
    2a72:	fd 4f       	sbci	r31, 0xFD	; 253
    2a74:	20 81       	ld	r18, Z
    2a76:	31 81       	ldd	r19, Z+1	; 0x01
    2a78:	82 17       	cp	r24, r18
    2a7a:	93 07       	cpc	r25, r19
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <sortCheck+0x1fa>
    2a7e:	14 c1       	rjmp	.+552    	; 0x2ca8 <sortCheck+0x422>
					sortDrop(arm0, ct % 2);
    2a80:	ce 01       	movw	r24, r28
    2a82:	f2 dc       	rcall	.-1564   	; 0x2468 <sortDrop>
    2a84:	11 c1       	rjmp	.+546    	; 0x2ca8 <sortCheck+0x422>
			}
		}
		else ct = adj;
    2a86:	80 91 af 02 	lds	r24, 0x02AF
    2a8a:	90 91 b0 02 	lds	r25, 0x02B0
    2a8e:	90 93 8a 02 	sts	0x028A, r25
    2a92:	80 93 89 02 	sts	0x0289, r24
    2a96:	08 c1       	rjmp	.+528    	; 0x2ca8 <sortCheck+0x422>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ed 54       	subi	r30, 0x4D	; 77
    2aa0:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	f0 81       	ld	r31, Z
    2aa6:	e0 2d       	mov	r30, r0
    2aa8:	4e 17       	cp	r20, r30
    2aaa:	5f 07       	cpc	r21, r31
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <sortCheck+0x22a>
    2aae:	8d c0       	rjmp	.+282    	; 0x2bca <sortCheck+0x344>
    2ab0:	d8 01       	movw	r26, r16
    2ab2:	aa 0f       	add	r26, r26
    2ab4:	bb 1f       	adc	r27, r27
    2ab6:	ad 54       	subi	r26, 0x4D	; 77
    2ab8:	bd 4f       	sbci	r27, 0xFD	; 253
    2aba:	8d 90       	ld	r8, X+
    2abc:	9c 90       	ld	r9, X
    2abe:	48 15       	cp	r20, r8
    2ac0:	59 05       	cpc	r21, r9
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <sortCheck+0x240>
    2ac4:	82 c0       	rjmp	.+260    	; 0x2bca <sortCheck+0x344>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2ac6:	e0 90 03 02 	lds	r14, 0x0203
    2aca:	f0 90 04 02 	lds	r15, 0x0204
    2ace:	e1 14       	cp	r14, r1
    2ad0:	f1 04       	cpc	r15, r1
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <sortCheck+0x250>
    2ad4:	4c c0       	rjmp	.+152    	; 0x2b6e <sortCheck+0x2e8>
    2ad6:	b1 e0       	ldi	r27, 0x01	; 1
    2ad8:	eb 16       	cp	r14, r27
    2ada:	f1 04       	cpc	r15, r1
    2adc:	29 f4       	brne	.+10     	; 0x2ae8 <sortCheck+0x262>
    2ade:	2f 3f       	cpi	r18, 0xFF	; 255
    2ae0:	6f ef       	ldi	r22, 0xFF	; 255
    2ae2:	36 07       	cpc	r19, r22
    2ae4:	b1 f5       	brne	.+108    	; 0x2b52 <sortCheck+0x2cc>
    2ae6:	09 c0       	rjmp	.+18     	; 0x2afa <sortCheck+0x274>
    2ae8:	67 01       	movw	r12, r14
    2aea:	71 e0       	ldi	r23, 0x01	; 1
    2aec:	c7 1a       	sub	r12, r23
    2aee:	d1 08       	sbc	r13, r1
    2af0:	a2 e0       	ldi	r26, 0x02	; 2
    2af2:	ca 16       	cp	r12, r26
    2af4:	d1 04       	cpc	r13, r1
    2af6:	08 f0       	brcs	.+2      	; 0x2afa <sortCheck+0x274>
    2af8:	63 c0       	rjmp	.+198    	; 0x2bc0 <sortCheck+0x33a>
    2afa:	6c 01       	movw	r12, r24
    2afc:	cc 0c       	add	r12, r12
    2afe:	dd 1c       	adc	r13, r13
    2b00:	cc 0c       	add	r12, r12
    2b02:	dd 1c       	adc	r13, r13
    2b04:	b6 01       	movw	r22, r12
    2b06:	63 57       	subi	r22, 0x73	; 115
    2b08:	7d 4f       	sbci	r23, 0xFD	; 253
    2b0a:	db 01       	movw	r26, r22
    2b0c:	cd 90       	ld	r12, X+
    2b0e:	dc 90       	ld	r13, X
    2b10:	4c 15       	cp	r20, r12
    2b12:	5d 05       	cpc	r21, r13
    2b14:	21 f0       	breq	.+8      	; 0x2b1e <sortCheck+0x298>
    2b16:	cd 20       	and	r12, r13
    2b18:	c0 94       	com	r12
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <sortCheck+0x298>
    2b1c:	51 c0       	rjmp	.+162    	; 0x2bc0 <sortCheck+0x33a>
    2b1e:	6c 01       	movw	r12, r24
    2b20:	cc 0c       	add	r12, r12
    2b22:	dd 1c       	adc	r13, r13
    2b24:	cc 0c       	add	r12, r12
    2b26:	dd 1c       	adc	r13, r13
    2b28:	b6 01       	movw	r22, r12
    2b2a:	63 57       	subi	r22, 0x73	; 115
    2b2c:	7d 4f       	sbci	r23, 0xFD	; 253
    2b2e:	db 01       	movw	r26, r22
    2b30:	12 96       	adiw	r26, 0x02	; 2
    2b32:	cd 90       	ld	r12, X+
    2b34:	dc 90       	ld	r13, X
    2b36:	13 97       	sbiw	r26, 0x03	; 3
    2b38:	4c 15       	cp	r20, r12
    2b3a:	5d 05       	cpc	r21, r13
    2b3c:	21 f0       	breq	.+8      	; 0x2b46 <sortCheck+0x2c0>
    2b3e:	cd 20       	and	r12, r13
    2b40:	c0 94       	com	r12
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <sortCheck+0x2c0>
    2b44:	3d c0       	rjmp	.+122    	; 0x2bc0 <sortCheck+0x33a>
		{
			if (armCount>0)
    2b46:	1e 14       	cp	r1, r14
    2b48:	1f 04       	cpc	r1, r15
    2b4a:	8c f4       	brge	.+34     	; 0x2b6e <sortCheck+0x2e8>
			{
				if (sort[ct % 2] != -1)
    2b4c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b50:	71 f0       	breq	.+28     	; 0x2b6e <sortCheck+0x2e8>
					if (arm[arm0] == -1)
    2b52:	31 96       	adiw	r30, 0x01	; 1
    2b54:	29 f4       	brne	.+10     	; 0x2b60 <sortCheck+0x2da>
						pickSort(arm0, ct % 2);
    2b56:	6b 2d       	mov	r22, r11
    2b58:	7a 2d       	mov	r23, r10
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	42 dc       	rcall	.-1916   	; 0x23e2 <pickSort>
    2b5e:	07 c0       	rjmp	.+14     	; 0x2b6e <sortCheck+0x2e8>
					else if (arm[arm1] == -1)
    2b60:	89 20       	and	r8, r9
    2b62:	80 94       	com	r8
    2b64:	21 f4       	brne	.+8      	; 0x2b6e <sortCheck+0x2e8>
						pickSort(arm1, ct % 2);
    2b66:	6b 2d       	mov	r22, r11
    2b68:	7a 2d       	mov	r23, r10
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	3a dc       	rcall	.-1932   	; 0x23e2 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    2b6e:	80 91 89 02 	lds	r24, 0x0289
    2b72:	90 91 8a 02 	lds	r25, 0x028A
    2b76:	bc 01       	movw	r22, r24
    2b78:	6f 5f       	subi	r22, 0xFF	; 255
    2b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7c:	61 70       	andi	r22, 0x01	; 1
    2b7e:	70 78       	andi	r23, 0x80	; 128
    2b80:	77 23       	and	r23, r23
    2b82:	34 f4       	brge	.+12     	; 0x2b90 <sortCheck+0x30a>
    2b84:	61 50       	subi	r22, 0x01	; 1
    2b86:	71 09       	sbc	r23, r1
    2b88:	6e 6f       	ori	r22, 0xFE	; 254
    2b8a:	7f 6f       	ori	r23, 0xFF	; 255
    2b8c:	6f 5f       	subi	r22, 0xFF	; 255
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	6c 5f       	subi	r22, 0xFC	; 252
    2b92:	7f 4f       	sbci	r23, 0xFF	; 255
    2b94:	81 70       	andi	r24, 0x01	; 1
    2b96:	90 78       	andi	r25, 0x80	; 128
    2b98:	99 23       	and	r25, r25
    2b9a:	24 f4       	brge	.+8      	; 0x2ba4 <sortCheck+0x31e>
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	8e 6f       	ori	r24, 0xFE	; 254
    2ba0:	9f 6f       	ori	r25, 0xFF	; 255
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	04 96       	adiw	r24, 0x04	; 4
    2ba6:	0e 94 0f 0b 	call	0x161e	; 0x161e <traverseToSort>
			newSort();
    2baa:	9c dc       	rcall	.-1736   	; 0x24e4 <newSort>
			if (ct == 4 || ct == 5)
    2bac:	80 91 89 02 	lds	r24, 0x0289
    2bb0:	90 91 8a 02 	lds	r25, 0x028A
    2bb4:	04 97       	sbiw	r24, 0x04	; 4
    2bb6:	02 97       	sbiw	r24, 0x02	; 2
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <sortCheck+0x336>
    2bba:	87 c0       	rjmp	.+270    	; 0x2cca <sortCheck+0x444>
				newSort();
    2bbc:	93 dc       	rcall	.-1754   	; 0x24e4 <newSort>
    2bbe:	85 c0       	rjmp	.+266    	; 0x2cca <sortCheck+0x444>
			return;
		}
		else ct = adj;
    2bc0:	90 93 8a 02 	sts	0x028A, r25
    2bc4:	80 93 89 02 	sts	0x0289, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2bc8:	6f c0       	rjmp	.+222    	; 0x2ca8 <sortCheck+0x422>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2bca:	a0 91 03 02 	lds	r26, 0x0203
    2bce:	b0 91 04 02 	lds	r27, 0x0204
    2bd2:	10 97       	sbiw	r26, 0x00	; 0
    2bd4:	c1 f5       	brne	.+112    	; 0x2c46 <sortCheck+0x3c0>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	aa 0f       	add	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	aa 59       	subi	r26, 0x9A	; 154
    2bde:	bd 4f       	sbci	r27, 0xFD	; 253
    2be0:	0d 90       	ld	r0, X+
    2be2:	bc 91       	ld	r27, X
    2be4:	a0 2d       	mov	r26, r0
    2be6:	a1 30       	cpi	r26, 0x01	; 1
    2be8:	b1 05       	cpc	r27, r1
    2bea:	d9 f4       	brne	.+54     	; 0x2c22 <sortCheck+0x39c>
    2bec:	dc 01       	movw	r26, r24
    2bee:	aa 0f       	add	r26, r26
    2bf0:	bb 1f       	adc	r27, r27
    2bf2:	aa 0f       	add	r26, r26
    2bf4:	bb 1f       	adc	r27, r27
    2bf6:	a3 57       	subi	r26, 0x73	; 115
    2bf8:	bd 4f       	sbci	r27, 0xFD	; 253
    2bfa:	0d 90       	ld	r0, X+
    2bfc:	bc 91       	ld	r27, X
    2bfe:	a0 2d       	mov	r26, r0
    2c00:	11 96       	adiw	r26, 0x01	; 1
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <sortCheck+0x380>
    2c04:	49 c0       	rjmp	.+146    	; 0x2c98 <sortCheck+0x412>
    2c06:	dc 01       	movw	r26, r24
    2c08:	aa 0f       	add	r26, r26
    2c0a:	bb 1f       	adc	r27, r27
    2c0c:	aa 0f       	add	r26, r26
    2c0e:	bb 1f       	adc	r27, r27
    2c10:	a3 57       	subi	r26, 0x73	; 115
    2c12:	bd 4f       	sbci	r27, 0xFD	; 253
    2c14:	12 96       	adiw	r26, 0x02	; 2
    2c16:	8d 91       	ld	r24, X+
    2c18:	9c 91       	ld	r25, X
    2c1a:	13 97       	sbiw	r26, 0x03	; 3
    2c1c:	01 96       	adiw	r24, 0x01	; 1
    2c1e:	19 f4       	brne	.+6      	; 0x2c26 <sortCheck+0x3a0>
    2c20:	3b c0       	rjmp	.+118    	; 0x2c98 <sortCheck+0x412>
    2c22:	ab 2b       	or	r26, r27
    2c24:	c9 f5       	brne	.+114    	; 0x2c98 <sortCheck+0x412>
    2c26:	2f 3f       	cpi	r18, 0xFF	; 255
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	b1 f5       	brne	.+108    	; 0x2c98 <sortCheck+0x412>
			if (arm[arm0] == color[adj])
    2c2c:	4e 17       	cp	r20, r30
    2c2e:	5f 07       	cpc	r21, r31
    2c30:	29 f4       	brne	.+10     	; 0x2c3c <sortCheck+0x3b6>
				sortDrop(arm1, ct % 2);
    2c32:	6b 2d       	mov	r22, r11
    2c34:	7a 2d       	mov	r23, r10
    2c36:	c8 01       	movw	r24, r16
    2c38:	17 dc       	rcall	.-2002   	; 0x2468 <sortDrop>
    2c3a:	2e c0       	rjmp	.+92     	; 0x2c98 <sortCheck+0x412>
			else sortDrop(arm0, ct % 2);
    2c3c:	6b 2d       	mov	r22, r11
    2c3e:	7a 2d       	mov	r23, r10
    2c40:	ce 01       	movw	r24, r28
    2c42:	12 dc       	rcall	.-2012   	; 0x2468 <sortDrop>
    2c44:	29 c0       	rjmp	.+82     	; 0x2c98 <sortCheck+0x412>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2c46:	11 97       	sbiw	r26, 0x01	; 1
    2c48:	39 f5       	brne	.+78     	; 0x2c98 <sortCheck+0x412>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	aa 0f       	add	r26, r26
    2c4e:	bb 1f       	adc	r27, r27
    2c50:	aa 0f       	add	r26, r26
    2c52:	bb 1f       	adc	r27, r27
    2c54:	a3 57       	subi	r26, 0x73	; 115
    2c56:	bd 4f       	sbci	r27, 0xFD	; 253
    2c58:	4d 91       	ld	r20, X+
    2c5a:	5c 91       	ld	r21, X
    2c5c:	4f 3f       	cpi	r20, 0xFF	; 255
    2c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c60:	69 f0       	breq	.+26     	; 0x2c7c <sortCheck+0x3f6>
    2c62:	dc 01       	movw	r26, r24
    2c64:	aa 0f       	add	r26, r26
    2c66:	bb 1f       	adc	r27, r27
    2c68:	aa 0f       	add	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	a3 57       	subi	r26, 0x73	; 115
    2c6e:	bd 4f       	sbci	r27, 0xFD	; 253
    2c70:	12 96       	adiw	r26, 0x02	; 2
    2c72:	8d 91       	ld	r24, X+
    2c74:	9c 91       	ld	r25, X
    2c76:	13 97       	sbiw	r26, 0x03	; 3
    2c78:	01 96       	adiw	r24, 0x01	; 1
    2c7a:	71 f4       	brne	.+28     	; 0x2c98 <sortCheck+0x412>
    2c7c:	2f 3f       	cpi	r18, 0xFF	; 255
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c80:	59 f0       	breq	.+22     	; 0x2c98 <sortCheck+0x412>
			if (arm[arm0] == -1)
    2c82:	31 96       	adiw	r30, 0x01	; 1
    2c84:	29 f4       	brne	.+10     	; 0x2c90 <sortCheck+0x40a>
				pickSort(arm0, ct % 2);
    2c86:	6b 2d       	mov	r22, r11
    2c88:	7a 2d       	mov	r23, r10
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	aa db       	rcall	.-2220   	; 0x23e2 <pickSort>
    2c8e:	04 c0       	rjmp	.+8      	; 0x2c98 <sortCheck+0x412>
			else	pickSort(arm1, ct % 2);
    2c90:	6b 2d       	mov	r22, r11
    2c92:	7a 2d       	mov	r23, r10
    2c94:	c8 01       	movw	r24, r16
    2c96:	a5 db       	rcall	.-2230   	; 0x23e2 <pickSort>
			ct = adj;
    2c98:	80 91 af 02 	lds	r24, 0x02AF
    2c9c:	90 91 b0 02 	lds	r25, 0x02B0
    2ca0:	90 93 8a 02 	sts	0x028A, r25
    2ca4:	80 93 89 02 	sts	0x0289, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2ca8:	80 91 89 02 	lds	r24, 0x0289
    2cac:	90 91 8a 02 	lds	r25, 0x028A
    2cb0:	02 96       	adiw	r24, 0x02	; 2
    2cb2:	83 70       	andi	r24, 0x03	; 3
    2cb4:	90 78       	andi	r25, 0x80	; 128
    2cb6:	99 23       	and	r25, r25
    2cb8:	24 f4       	brge	.+8      	; 0x2cc2 <sortCheck+0x43c>
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	8c 6f       	ori	r24, 0xFC	; 252
    2cbe:	9f 6f       	ori	r25, 0xFF	; 255
    2cc0:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2cc2:	90 93 b0 02 	sts	0x02B0, r25
    2cc6:	80 93 af 02 	sts	0x02AF, r24
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	9f 90       	pop	r9
    2ce0:	8f 90       	pop	r8
    2ce2:	08 95       	ret

00002ce4 <main>:
	angle += 180;
}
int main()
{
	int i=0;
	__init__();
    2ce4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__init__>
	ct = 0; adj = 2;
    2ce8:	10 92 8a 02 	sts	0x028A, r1
    2cec:	10 92 89 02 	sts	0x0289, r1
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	90 93 b0 02 	sts	0x02B0, r25
    2cf8:	80 93 af 02 	sts	0x02AF, r24
	
	//right_degrees(45);
	//while(1);
	
	//stop();
	servo_1(0);
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	0e 94 3b 03 	call	0x676	; 0x676 <servo_1>
	servo_2(90);
    2d02:	8a e5       	ldi	r24, 0x5A	; 90
    2d04:	0e 94 54 03 	call	0x6a8	; 0x6a8 <servo_2>
	servo_3(0);
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	0e 94 6d 03 	call	0x6da	; 0x6da <servo_3>
	forwardJaa();
    2d0e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <forwardJaa>
	while (sorted<total)
    2d12:	20 91 58 02 	lds	r18, 0x0258
    2d16:	30 91 59 02 	lds	r19, 0x0259
    2d1a:	80 91 01 02 	lds	r24, 0x0201
    2d1e:	90 91 02 02 	lds	r25, 0x0202
    2d22:	28 17       	cp	r18, r24
    2d24:	39 07       	cpc	r19, r25
    2d26:	ac f5       	brge	.+106    	; 0x2d92 <main+0xae>
	{
		canDrop();
    2d28:	e5 d9       	rcall	.-3126   	; 0x20f4 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2d2a:	80 91 54 02 	lds	r24, 0x0254
    2d2e:	90 91 55 02 	lds	r25, 0x0255
    2d32:	03 97       	sbiw	r24, 0x03	; 3
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <main+0x56>
			predict();
    2d36:	0e 94 7f 08 	call	0x10fe	; 0x10fe <predict>
		if (sorted == total)
    2d3a:	20 91 58 02 	lds	r18, 0x0258
    2d3e:	30 91 59 02 	lds	r19, 0x0259
    2d42:	80 91 01 02 	lds	r24, 0x0201
    2d46:	90 91 02 02 	lds	r25, 0x0202
    2d4a:	28 17       	cp	r18, r24
    2d4c:	39 07       	cpc	r19, r25
    2d4e:	09 f1       	breq	.+66     	; 0x2d92 <main+0xae>
			break;
		pickup();
    2d50:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2d54:	80 91 89 02 	lds	r24, 0x0289
    2d58:	90 91 8a 02 	lds	r25, 0x028A
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	61 70       	andi	r22, 0x01	; 1
    2d60:	70 78       	andi	r23, 0x80	; 128
    2d62:	77 23       	and	r23, r23
    2d64:	34 f4       	brge	.+12     	; 0x2d72 <main+0x8e>
    2d66:	61 50       	subi	r22, 0x01	; 1
    2d68:	71 09       	sbc	r23, r1
    2d6a:	6e 6f       	ori	r22, 0xFE	; 254
    2d6c:	7f 6f       	ori	r23, 0xFF	; 255
    2d6e:	6f 5f       	subi	r22, 0xFF	; 255
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	6c 5f       	subi	r22, 0xFC	; 252
    2d74:	7f 4f       	sbci	r23, 0xFF	; 255
    2d76:	0e 94 0f 0b 	call	0x161e	; 0x161e <traverseToSort>
		sortCheck();
    2d7a:	85 dd       	rcall	.-1270   	; 0x2886 <sortCheck>
	//stop();
	servo_1(0);
	servo_2(90);
	servo_3(0);
	forwardJaa();
	while (sorted<total)
    2d7c:	20 91 58 02 	lds	r18, 0x0258
    2d80:	30 91 59 02 	lds	r19, 0x0259
    2d84:	80 91 01 02 	lds	r24, 0x0201
    2d88:	90 91 02 02 	lds	r25, 0x0202
    2d8c:	28 17       	cp	r18, r24
    2d8e:	39 07       	cpc	r19, r25
    2d90:	5c f2       	brlt	.-106    	; 0x2d28 <main+0x44>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
}
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	08 95       	ret

00002d98 <__subsf3>:
    2d98:	50 58       	subi	r21, 0x80	; 128

00002d9a <__addsf3>:
    2d9a:	bb 27       	eor	r27, r27
    2d9c:	aa 27       	eor	r26, r26
    2d9e:	0e d0       	rcall	.+28     	; 0x2dbc <__addsf3x>
    2da0:	48 c1       	rjmp	.+656    	; 0x3032 <__fp_round>
    2da2:	39 d1       	rcall	.+626    	; 0x3016 <__fp_pscA>
    2da4:	30 f0       	brcs	.+12     	; 0x2db2 <__addsf3+0x18>
    2da6:	3e d1       	rcall	.+636    	; 0x3024 <__fp_pscB>
    2da8:	20 f0       	brcs	.+8      	; 0x2db2 <__addsf3+0x18>
    2daa:	31 f4       	brne	.+12     	; 0x2db8 <__addsf3+0x1e>
    2dac:	9f 3f       	cpi	r25, 0xFF	; 255
    2dae:	11 f4       	brne	.+4      	; 0x2db4 <__addsf3+0x1a>
    2db0:	1e f4       	brtc	.+6      	; 0x2db8 <__addsf3+0x1e>
    2db2:	2e c1       	rjmp	.+604    	; 0x3010 <__fp_nan>
    2db4:	0e f4       	brtc	.+2      	; 0x2db8 <__addsf3+0x1e>
    2db6:	e0 95       	com	r30
    2db8:	e7 fb       	bst	r30, 7
    2dba:	24 c1       	rjmp	.+584    	; 0x3004 <__fp_inf>

00002dbc <__addsf3x>:
    2dbc:	e9 2f       	mov	r30, r25
    2dbe:	4a d1       	rcall	.+660    	; 0x3054 <__fp_split3>
    2dc0:	80 f3       	brcs	.-32     	; 0x2da2 <__addsf3+0x8>
    2dc2:	ba 17       	cp	r27, r26
    2dc4:	62 07       	cpc	r22, r18
    2dc6:	73 07       	cpc	r23, r19
    2dc8:	84 07       	cpc	r24, r20
    2dca:	95 07       	cpc	r25, r21
    2dcc:	18 f0       	brcs	.+6      	; 0x2dd4 <__addsf3x+0x18>
    2dce:	71 f4       	brne	.+28     	; 0x2dec <__addsf3x+0x30>
    2dd0:	9e f5       	brtc	.+102    	; 0x2e38 <__addsf3x+0x7c>
    2dd2:	62 c1       	rjmp	.+708    	; 0x3098 <__fp_zero>
    2dd4:	0e f4       	brtc	.+2      	; 0x2dd8 <__addsf3x+0x1c>
    2dd6:	e0 95       	com	r30
    2dd8:	0b 2e       	mov	r0, r27
    2dda:	ba 2f       	mov	r27, r26
    2ddc:	a0 2d       	mov	r26, r0
    2dde:	0b 01       	movw	r0, r22
    2de0:	b9 01       	movw	r22, r18
    2de2:	90 01       	movw	r18, r0
    2de4:	0c 01       	movw	r0, r24
    2de6:	ca 01       	movw	r24, r20
    2de8:	a0 01       	movw	r20, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	ff 27       	eor	r31, r31
    2dee:	59 1b       	sub	r21, r25
    2df0:	99 f0       	breq	.+38     	; 0x2e18 <__addsf3x+0x5c>
    2df2:	59 3f       	cpi	r21, 0xF9	; 249
    2df4:	50 f4       	brcc	.+20     	; 0x2e0a <__addsf3x+0x4e>
    2df6:	50 3e       	cpi	r21, 0xE0	; 224
    2df8:	68 f1       	brcs	.+90     	; 0x2e54 <__addsf3x+0x98>
    2dfa:	1a 16       	cp	r1, r26
    2dfc:	f0 40       	sbci	r31, 0x00	; 0
    2dfe:	a2 2f       	mov	r26, r18
    2e00:	23 2f       	mov	r18, r19
    2e02:	34 2f       	mov	r19, r20
    2e04:	44 27       	eor	r20, r20
    2e06:	58 5f       	subi	r21, 0xF8	; 248
    2e08:	f3 cf       	rjmp	.-26     	; 0x2df0 <__addsf3x+0x34>
    2e0a:	46 95       	lsr	r20
    2e0c:	37 95       	ror	r19
    2e0e:	27 95       	ror	r18
    2e10:	a7 95       	ror	r26
    2e12:	f0 40       	sbci	r31, 0x00	; 0
    2e14:	53 95       	inc	r21
    2e16:	c9 f7       	brne	.-14     	; 0x2e0a <__addsf3x+0x4e>
    2e18:	7e f4       	brtc	.+30     	; 0x2e38 <__addsf3x+0x7c>
    2e1a:	1f 16       	cp	r1, r31
    2e1c:	ba 0b       	sbc	r27, r26
    2e1e:	62 0b       	sbc	r22, r18
    2e20:	73 0b       	sbc	r23, r19
    2e22:	84 0b       	sbc	r24, r20
    2e24:	ba f0       	brmi	.+46     	; 0x2e54 <__addsf3x+0x98>
    2e26:	91 50       	subi	r25, 0x01	; 1
    2e28:	a1 f0       	breq	.+40     	; 0x2e52 <__addsf3x+0x96>
    2e2a:	ff 0f       	add	r31, r31
    2e2c:	bb 1f       	adc	r27, r27
    2e2e:	66 1f       	adc	r22, r22
    2e30:	77 1f       	adc	r23, r23
    2e32:	88 1f       	adc	r24, r24
    2e34:	c2 f7       	brpl	.-16     	; 0x2e26 <__addsf3x+0x6a>
    2e36:	0e c0       	rjmp	.+28     	; 0x2e54 <__addsf3x+0x98>
    2e38:	ba 0f       	add	r27, r26
    2e3a:	62 1f       	adc	r22, r18
    2e3c:	73 1f       	adc	r23, r19
    2e3e:	84 1f       	adc	r24, r20
    2e40:	48 f4       	brcc	.+18     	; 0x2e54 <__addsf3x+0x98>
    2e42:	87 95       	ror	r24
    2e44:	77 95       	ror	r23
    2e46:	67 95       	ror	r22
    2e48:	b7 95       	ror	r27
    2e4a:	f7 95       	ror	r31
    2e4c:	9e 3f       	cpi	r25, 0xFE	; 254
    2e4e:	08 f0       	brcs	.+2      	; 0x2e52 <__addsf3x+0x96>
    2e50:	b3 cf       	rjmp	.-154    	; 0x2db8 <__addsf3+0x1e>
    2e52:	93 95       	inc	r25
    2e54:	88 0f       	add	r24, r24
    2e56:	08 f0       	brcs	.+2      	; 0x2e5a <__addsf3x+0x9e>
    2e58:	99 27       	eor	r25, r25
    2e5a:	ee 0f       	add	r30, r30
    2e5c:	97 95       	ror	r25
    2e5e:	87 95       	ror	r24
    2e60:	08 95       	ret

00002e62 <__divsf3>:
    2e62:	0c d0       	rcall	.+24     	; 0x2e7c <__divsf3x>
    2e64:	e6 c0       	rjmp	.+460    	; 0x3032 <__fp_round>
    2e66:	de d0       	rcall	.+444    	; 0x3024 <__fp_pscB>
    2e68:	40 f0       	brcs	.+16     	; 0x2e7a <__divsf3+0x18>
    2e6a:	d5 d0       	rcall	.+426    	; 0x3016 <__fp_pscA>
    2e6c:	30 f0       	brcs	.+12     	; 0x2e7a <__divsf3+0x18>
    2e6e:	21 f4       	brne	.+8      	; 0x2e78 <__divsf3+0x16>
    2e70:	5f 3f       	cpi	r21, 0xFF	; 255
    2e72:	19 f0       	breq	.+6      	; 0x2e7a <__divsf3+0x18>
    2e74:	c7 c0       	rjmp	.+398    	; 0x3004 <__fp_inf>
    2e76:	51 11       	cpse	r21, r1
    2e78:	10 c1       	rjmp	.+544    	; 0x309a <__fp_szero>
    2e7a:	ca c0       	rjmp	.+404    	; 0x3010 <__fp_nan>

00002e7c <__divsf3x>:
    2e7c:	eb d0       	rcall	.+470    	; 0x3054 <__fp_split3>
    2e7e:	98 f3       	brcs	.-26     	; 0x2e66 <__divsf3+0x4>

00002e80 <__divsf3_pse>:
    2e80:	99 23       	and	r25, r25
    2e82:	c9 f3       	breq	.-14     	; 0x2e76 <__divsf3+0x14>
    2e84:	55 23       	and	r21, r21
    2e86:	b1 f3       	breq	.-20     	; 0x2e74 <__divsf3+0x12>
    2e88:	95 1b       	sub	r25, r21
    2e8a:	55 0b       	sbc	r21, r21
    2e8c:	bb 27       	eor	r27, r27
    2e8e:	aa 27       	eor	r26, r26
    2e90:	62 17       	cp	r22, r18
    2e92:	73 07       	cpc	r23, r19
    2e94:	84 07       	cpc	r24, r20
    2e96:	38 f0       	brcs	.+14     	; 0x2ea6 <__divsf3_pse+0x26>
    2e98:	9f 5f       	subi	r25, 0xFF	; 255
    2e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9c:	22 0f       	add	r18, r18
    2e9e:	33 1f       	adc	r19, r19
    2ea0:	44 1f       	adc	r20, r20
    2ea2:	aa 1f       	adc	r26, r26
    2ea4:	a9 f3       	breq	.-22     	; 0x2e90 <__divsf3_pse+0x10>
    2ea6:	33 d0       	rcall	.+102    	; 0x2f0e <__divsf3_pse+0x8e>
    2ea8:	0e 2e       	mov	r0, r30
    2eaa:	3a f0       	brmi	.+14     	; 0x2eba <__divsf3_pse+0x3a>
    2eac:	e0 e8       	ldi	r30, 0x80	; 128
    2eae:	30 d0       	rcall	.+96     	; 0x2f10 <__divsf3_pse+0x90>
    2eb0:	91 50       	subi	r25, 0x01	; 1
    2eb2:	50 40       	sbci	r21, 0x00	; 0
    2eb4:	e6 95       	lsr	r30
    2eb6:	00 1c       	adc	r0, r0
    2eb8:	ca f7       	brpl	.-14     	; 0x2eac <__divsf3_pse+0x2c>
    2eba:	29 d0       	rcall	.+82     	; 0x2f0e <__divsf3_pse+0x8e>
    2ebc:	fe 2f       	mov	r31, r30
    2ebe:	27 d0       	rcall	.+78     	; 0x2f0e <__divsf3_pse+0x8e>
    2ec0:	66 0f       	add	r22, r22
    2ec2:	77 1f       	adc	r23, r23
    2ec4:	88 1f       	adc	r24, r24
    2ec6:	bb 1f       	adc	r27, r27
    2ec8:	26 17       	cp	r18, r22
    2eca:	37 07       	cpc	r19, r23
    2ecc:	48 07       	cpc	r20, r24
    2ece:	ab 07       	cpc	r26, r27
    2ed0:	b0 e8       	ldi	r27, 0x80	; 128
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <__divsf3_pse+0x56>
    2ed4:	bb 0b       	sbc	r27, r27
    2ed6:	80 2d       	mov	r24, r0
    2ed8:	bf 01       	movw	r22, r30
    2eda:	ff 27       	eor	r31, r31
    2edc:	93 58       	subi	r25, 0x83	; 131
    2ede:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee0:	2a f0       	brmi	.+10     	; 0x2eec <__divsf3_pse+0x6c>
    2ee2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ee4:	51 05       	cpc	r21, r1
    2ee6:	68 f0       	brcs	.+26     	; 0x2f02 <__divsf3_pse+0x82>
    2ee8:	8d c0       	rjmp	.+282    	; 0x3004 <__fp_inf>
    2eea:	d7 c0       	rjmp	.+430    	; 0x309a <__fp_szero>
    2eec:	5f 3f       	cpi	r21, 0xFF	; 255
    2eee:	ec f3       	brlt	.-6      	; 0x2eea <__divsf3_pse+0x6a>
    2ef0:	98 3e       	cpi	r25, 0xE8	; 232
    2ef2:	dc f3       	brlt	.-10     	; 0x2eea <__divsf3_pse+0x6a>
    2ef4:	86 95       	lsr	r24
    2ef6:	77 95       	ror	r23
    2ef8:	67 95       	ror	r22
    2efa:	b7 95       	ror	r27
    2efc:	f7 95       	ror	r31
    2efe:	9f 5f       	subi	r25, 0xFF	; 255
    2f00:	c9 f7       	brne	.-14     	; 0x2ef4 <__divsf3_pse+0x74>
    2f02:	88 0f       	add	r24, r24
    2f04:	91 1d       	adc	r25, r1
    2f06:	96 95       	lsr	r25
    2f08:	87 95       	ror	r24
    2f0a:	97 f9       	bld	r25, 7
    2f0c:	08 95       	ret
    2f0e:	e1 e0       	ldi	r30, 0x01	; 1
    2f10:	66 0f       	add	r22, r22
    2f12:	77 1f       	adc	r23, r23
    2f14:	88 1f       	adc	r24, r24
    2f16:	bb 1f       	adc	r27, r27
    2f18:	62 17       	cp	r22, r18
    2f1a:	73 07       	cpc	r23, r19
    2f1c:	84 07       	cpc	r24, r20
    2f1e:	ba 07       	cpc	r27, r26
    2f20:	20 f0       	brcs	.+8      	; 0x2f2a <__divsf3_pse+0xaa>
    2f22:	62 1b       	sub	r22, r18
    2f24:	73 0b       	sbc	r23, r19
    2f26:	84 0b       	sbc	r24, r20
    2f28:	ba 0b       	sbc	r27, r26
    2f2a:	ee 1f       	adc	r30, r30
    2f2c:	88 f7       	brcc	.-30     	; 0x2f10 <__divsf3_pse+0x90>
    2f2e:	e0 95       	com	r30
    2f30:	08 95       	ret

00002f32 <__fixunssfsi>:
    2f32:	98 d0       	rcall	.+304    	; 0x3064 <__fp_splitA>
    2f34:	88 f0       	brcs	.+34     	; 0x2f58 <__fixunssfsi+0x26>
    2f36:	9f 57       	subi	r25, 0x7F	; 127
    2f38:	90 f0       	brcs	.+36     	; 0x2f5e <__fixunssfsi+0x2c>
    2f3a:	b9 2f       	mov	r27, r25
    2f3c:	99 27       	eor	r25, r25
    2f3e:	b7 51       	subi	r27, 0x17	; 23
    2f40:	a0 f0       	brcs	.+40     	; 0x2f6a <__fixunssfsi+0x38>
    2f42:	d1 f0       	breq	.+52     	; 0x2f78 <__fixunssfsi+0x46>
    2f44:	66 0f       	add	r22, r22
    2f46:	77 1f       	adc	r23, r23
    2f48:	88 1f       	adc	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	1a f0       	brmi	.+6      	; 0x2f54 <__fixunssfsi+0x22>
    2f4e:	ba 95       	dec	r27
    2f50:	c9 f7       	brne	.-14     	; 0x2f44 <__fixunssfsi+0x12>
    2f52:	12 c0       	rjmp	.+36     	; 0x2f78 <__fixunssfsi+0x46>
    2f54:	b1 30       	cpi	r27, 0x01	; 1
    2f56:	81 f0       	breq	.+32     	; 0x2f78 <__fixunssfsi+0x46>
    2f58:	9f d0       	rcall	.+318    	; 0x3098 <__fp_zero>
    2f5a:	b1 e0       	ldi	r27, 0x01	; 1
    2f5c:	08 95       	ret
    2f5e:	9c c0       	rjmp	.+312    	; 0x3098 <__fp_zero>
    2f60:	67 2f       	mov	r22, r23
    2f62:	78 2f       	mov	r23, r24
    2f64:	88 27       	eor	r24, r24
    2f66:	b8 5f       	subi	r27, 0xF8	; 248
    2f68:	39 f0       	breq	.+14     	; 0x2f78 <__fixunssfsi+0x46>
    2f6a:	b9 3f       	cpi	r27, 0xF9	; 249
    2f6c:	cc f3       	brlt	.-14     	; 0x2f60 <__fixunssfsi+0x2e>
    2f6e:	86 95       	lsr	r24
    2f70:	77 95       	ror	r23
    2f72:	67 95       	ror	r22
    2f74:	b3 95       	inc	r27
    2f76:	d9 f7       	brne	.-10     	; 0x2f6e <__fixunssfsi+0x3c>
    2f78:	3e f4       	brtc	.+14     	; 0x2f88 <__fixunssfsi+0x56>
    2f7a:	90 95       	com	r25
    2f7c:	80 95       	com	r24
    2f7e:	70 95       	com	r23
    2f80:	61 95       	neg	r22
    2f82:	7f 4f       	sbci	r23, 0xFF	; 255
    2f84:	8f 4f       	sbci	r24, 0xFF	; 255
    2f86:	9f 4f       	sbci	r25, 0xFF	; 255
    2f88:	08 95       	ret

00002f8a <__floatunsisf>:
    2f8a:	e8 94       	clt
    2f8c:	09 c0       	rjmp	.+18     	; 0x2fa0 <__floatsisf+0x12>

00002f8e <__floatsisf>:
    2f8e:	97 fb       	bst	r25, 7
    2f90:	3e f4       	brtc	.+14     	; 0x2fa0 <__floatsisf+0x12>
    2f92:	90 95       	com	r25
    2f94:	80 95       	com	r24
    2f96:	70 95       	com	r23
    2f98:	61 95       	neg	r22
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa0:	99 23       	and	r25, r25
    2fa2:	a9 f0       	breq	.+42     	; 0x2fce <__floatsisf+0x40>
    2fa4:	f9 2f       	mov	r31, r25
    2fa6:	96 e9       	ldi	r25, 0x96	; 150
    2fa8:	bb 27       	eor	r27, r27
    2faa:	93 95       	inc	r25
    2fac:	f6 95       	lsr	r31
    2fae:	87 95       	ror	r24
    2fb0:	77 95       	ror	r23
    2fb2:	67 95       	ror	r22
    2fb4:	b7 95       	ror	r27
    2fb6:	f1 11       	cpse	r31, r1
    2fb8:	f8 cf       	rjmp	.-16     	; 0x2faa <__floatsisf+0x1c>
    2fba:	fa f4       	brpl	.+62     	; 0x2ffa <__floatsisf+0x6c>
    2fbc:	bb 0f       	add	r27, r27
    2fbe:	11 f4       	brne	.+4      	; 0x2fc4 <__floatsisf+0x36>
    2fc0:	60 ff       	sbrs	r22, 0
    2fc2:	1b c0       	rjmp	.+54     	; 0x2ffa <__floatsisf+0x6c>
    2fc4:	6f 5f       	subi	r22, 0xFF	; 255
    2fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2fca:	9f 4f       	sbci	r25, 0xFF	; 255
    2fcc:	16 c0       	rjmp	.+44     	; 0x2ffa <__floatsisf+0x6c>
    2fce:	88 23       	and	r24, r24
    2fd0:	11 f0       	breq	.+4      	; 0x2fd6 <__floatsisf+0x48>
    2fd2:	96 e9       	ldi	r25, 0x96	; 150
    2fd4:	11 c0       	rjmp	.+34     	; 0x2ff8 <__floatsisf+0x6a>
    2fd6:	77 23       	and	r23, r23
    2fd8:	21 f0       	breq	.+8      	; 0x2fe2 <__floatsisf+0x54>
    2fda:	9e e8       	ldi	r25, 0x8E	; 142
    2fdc:	87 2f       	mov	r24, r23
    2fde:	76 2f       	mov	r23, r22
    2fe0:	05 c0       	rjmp	.+10     	; 0x2fec <__floatsisf+0x5e>
    2fe2:	66 23       	and	r22, r22
    2fe4:	71 f0       	breq	.+28     	; 0x3002 <__floatsisf+0x74>
    2fe6:	96 e8       	ldi	r25, 0x86	; 134
    2fe8:	86 2f       	mov	r24, r22
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	2a f0       	brmi	.+10     	; 0x2ffa <__floatsisf+0x6c>
    2ff0:	9a 95       	dec	r25
    2ff2:	66 0f       	add	r22, r22
    2ff4:	77 1f       	adc	r23, r23
    2ff6:	88 1f       	adc	r24, r24
    2ff8:	da f7       	brpl	.-10     	; 0x2ff0 <__floatsisf+0x62>
    2ffa:	88 0f       	add	r24, r24
    2ffc:	96 95       	lsr	r25
    2ffe:	87 95       	ror	r24
    3000:	97 f9       	bld	r25, 7
    3002:	08 95       	ret

00003004 <__fp_inf>:
    3004:	97 f9       	bld	r25, 7
    3006:	9f 67       	ori	r25, 0x7F	; 127
    3008:	80 e8       	ldi	r24, 0x80	; 128
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	08 95       	ret

00003010 <__fp_nan>:
    3010:	9f ef       	ldi	r25, 0xFF	; 255
    3012:	80 ec       	ldi	r24, 0xC0	; 192
    3014:	08 95       	ret

00003016 <__fp_pscA>:
    3016:	00 24       	eor	r0, r0
    3018:	0a 94       	dec	r0
    301a:	16 16       	cp	r1, r22
    301c:	17 06       	cpc	r1, r23
    301e:	18 06       	cpc	r1, r24
    3020:	09 06       	cpc	r0, r25
    3022:	08 95       	ret

00003024 <__fp_pscB>:
    3024:	00 24       	eor	r0, r0
    3026:	0a 94       	dec	r0
    3028:	12 16       	cp	r1, r18
    302a:	13 06       	cpc	r1, r19
    302c:	14 06       	cpc	r1, r20
    302e:	05 06       	cpc	r0, r21
    3030:	08 95       	ret

00003032 <__fp_round>:
    3032:	09 2e       	mov	r0, r25
    3034:	03 94       	inc	r0
    3036:	00 0c       	add	r0, r0
    3038:	11 f4       	brne	.+4      	; 0x303e <__fp_round+0xc>
    303a:	88 23       	and	r24, r24
    303c:	52 f0       	brmi	.+20     	; 0x3052 <__fp_round+0x20>
    303e:	bb 0f       	add	r27, r27
    3040:	40 f4       	brcc	.+16     	; 0x3052 <__fp_round+0x20>
    3042:	bf 2b       	or	r27, r31
    3044:	11 f4       	brne	.+4      	; 0x304a <__fp_round+0x18>
    3046:	60 ff       	sbrs	r22, 0
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <__fp_round+0x20>
    304a:	6f 5f       	subi	r22, 0xFF	; 255
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	8f 4f       	sbci	r24, 0xFF	; 255
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	08 95       	ret

00003054 <__fp_split3>:
    3054:	57 fd       	sbrc	r21, 7
    3056:	90 58       	subi	r25, 0x80	; 128
    3058:	44 0f       	add	r20, r20
    305a:	55 1f       	adc	r21, r21
    305c:	59 f0       	breq	.+22     	; 0x3074 <__fp_splitA+0x10>
    305e:	5f 3f       	cpi	r21, 0xFF	; 255
    3060:	71 f0       	breq	.+28     	; 0x307e <__fp_splitA+0x1a>
    3062:	47 95       	ror	r20

00003064 <__fp_splitA>:
    3064:	88 0f       	add	r24, r24
    3066:	97 fb       	bst	r25, 7
    3068:	99 1f       	adc	r25, r25
    306a:	61 f0       	breq	.+24     	; 0x3084 <__fp_splitA+0x20>
    306c:	9f 3f       	cpi	r25, 0xFF	; 255
    306e:	79 f0       	breq	.+30     	; 0x308e <__fp_splitA+0x2a>
    3070:	87 95       	ror	r24
    3072:	08 95       	ret
    3074:	12 16       	cp	r1, r18
    3076:	13 06       	cpc	r1, r19
    3078:	14 06       	cpc	r1, r20
    307a:	55 1f       	adc	r21, r21
    307c:	f2 cf       	rjmp	.-28     	; 0x3062 <__fp_split3+0xe>
    307e:	46 95       	lsr	r20
    3080:	f1 df       	rcall	.-30     	; 0x3064 <__fp_splitA>
    3082:	08 c0       	rjmp	.+16     	; 0x3094 <__fp_splitA+0x30>
    3084:	16 16       	cp	r1, r22
    3086:	17 06       	cpc	r1, r23
    3088:	18 06       	cpc	r1, r24
    308a:	99 1f       	adc	r25, r25
    308c:	f1 cf       	rjmp	.-30     	; 0x3070 <__fp_splitA+0xc>
    308e:	86 95       	lsr	r24
    3090:	71 05       	cpc	r23, r1
    3092:	61 05       	cpc	r22, r1
    3094:	08 94       	sec
    3096:	08 95       	ret

00003098 <__fp_zero>:
    3098:	e8 94       	clt

0000309a <__fp_szero>:
    309a:	bb 27       	eor	r27, r27
    309c:	66 27       	eor	r22, r22
    309e:	77 27       	eor	r23, r23
    30a0:	cb 01       	movw	r24, r22
    30a2:	97 f9       	bld	r25, 7
    30a4:	08 95       	ret

000030a6 <__divmodhi4>:
    30a6:	97 fb       	bst	r25, 7
    30a8:	07 2e       	mov	r0, r23
    30aa:	16 f4       	brtc	.+4      	; 0x30b0 <__divmodhi4+0xa>
    30ac:	00 94       	com	r0
    30ae:	06 d0       	rcall	.+12     	; 0x30bc <__divmodhi4_neg1>
    30b0:	77 fd       	sbrc	r23, 7
    30b2:	08 d0       	rcall	.+16     	; 0x30c4 <__divmodhi4_neg2>
    30b4:	1a d0       	rcall	.+52     	; 0x30ea <__udivmodhi4>
    30b6:	07 fc       	sbrc	r0, 7
    30b8:	05 d0       	rcall	.+10     	; 0x30c4 <__divmodhi4_neg2>
    30ba:	3e f4       	brtc	.+14     	; 0x30ca <__divmodhi4_exit>

000030bc <__divmodhi4_neg1>:
    30bc:	90 95       	com	r25
    30be:	81 95       	neg	r24
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	08 95       	ret

000030c4 <__divmodhi4_neg2>:
    30c4:	70 95       	com	r23
    30c6:	61 95       	neg	r22
    30c8:	7f 4f       	sbci	r23, 0xFF	; 255

000030ca <__divmodhi4_exit>:
    30ca:	08 95       	ret

000030cc <__umulhisi3>:
    30cc:	a2 9f       	mul	r26, r18
    30ce:	b0 01       	movw	r22, r0
    30d0:	b3 9f       	mul	r27, r19
    30d2:	c0 01       	movw	r24, r0
    30d4:	a3 9f       	mul	r26, r19
    30d6:	70 0d       	add	r23, r0
    30d8:	81 1d       	adc	r24, r1
    30da:	11 24       	eor	r1, r1
    30dc:	91 1d       	adc	r25, r1
    30de:	b2 9f       	mul	r27, r18
    30e0:	70 0d       	add	r23, r0
    30e2:	81 1d       	adc	r24, r1
    30e4:	11 24       	eor	r1, r1
    30e6:	91 1d       	adc	r25, r1
    30e8:	08 95       	ret

000030ea <__udivmodhi4>:
    30ea:	aa 1b       	sub	r26, r26
    30ec:	bb 1b       	sub	r27, r27
    30ee:	51 e1       	ldi	r21, 0x11	; 17
    30f0:	07 c0       	rjmp	.+14     	; 0x3100 <__udivmodhi4_ep>

000030f2 <__udivmodhi4_loop>:
    30f2:	aa 1f       	adc	r26, r26
    30f4:	bb 1f       	adc	r27, r27
    30f6:	a6 17       	cp	r26, r22
    30f8:	b7 07       	cpc	r27, r23
    30fa:	10 f0       	brcs	.+4      	; 0x3100 <__udivmodhi4_ep>
    30fc:	a6 1b       	sub	r26, r22
    30fe:	b7 0b       	sbc	r27, r23

00003100 <__udivmodhi4_ep>:
    3100:	88 1f       	adc	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	5a 95       	dec	r21
    3106:	a9 f7       	brne	.-22     	; 0x30f2 <__udivmodhi4_loop>
    3108:	80 95       	com	r24
    310a:	90 95       	com	r25
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	08 95       	ret

00003112 <_exit>:
    3112:	f8 94       	cli

00003114 <__stop_program>:
    3114:	ff cf       	rjmp	.-2      	; 0x3114 <__stop_program>
