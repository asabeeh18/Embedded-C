
Alignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  000031d8  0000326c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  0080024a  0080024a  000032b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  000032e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a19  00000000  00000000  0000364e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000494  00000000  00000000  00007067  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002759  00000000  00000000  000074fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000998  00000000  00000000  00009c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000841  00000000  00000000  0000a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023f3  00000000  00000000  0000ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c4       	rjmp	.+2164   	; 0x88a <__vector_5>
      16:	00 00       	nop
      18:	13 c4       	rjmp	.+2086   	; 0x840 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ed       	ldi	r30, 0xD8	; 216
      fc:	f1 e3       	ldi	r31, 0x31	; 49
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 3b       	cpi	r26, 0xBD	; 189
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <main>
     122:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 77 02 	sts	0x0277, r25
     30a:	80 93 76 02 	sts	0x0276, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 7b 02 	sts	0x027B, r21
     338:	40 93 7a 02 	sts	0x027A, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 bc 02 	sts	0x02BC, r25
     374:	80 93 bb 02 	sts	0x02BB, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 7b 02 	sts	0x027B, r21
     3a0:	40 93 7a 02 	sts	0x027A, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b2 02 	sts	0x02B2, r25
     3dc:	80 93 b1 02 	sts	0x02B1, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 7b 02 	sts	0x027B, r21
     3fe:	40 93 7a 02 	sts	0x027A, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8c 02 	sts	0x028C, r25
     436:	80 93 8b 02 	sts	0x028B, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 c7 18 	call	0x318e	; 0x318e <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 ba 02 	sts	0x02BA, r25
     47c:	80 93 b9 02 	sts	0x02B9, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <adc_pin_config>:
     542:	10 ba       	out	0x10, r1	; 16
     544:	11 ba       	out	0x11, r1	; 17
     546:	10 92 07 01 	sts	0x0107, r1
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <servo1_pin_config>:
     550:	25 9a       	sbi	0x04, 5	; 4
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	08 95       	ret

00000556 <servo2_pin_config>:
     556:	26 9a       	sbi	0x04, 6	; 4
     558:	2e 9a       	sbi	0x05, 6	; 5
     55a:	08 95       	ret

0000055c <servo3_pin_config>:
     55c:	27 9a       	sbi	0x04, 7	; 4
     55e:	2f 9a       	sbi	0x05, 7	; 5
     560:	08 95       	ret

00000562 <timer1_init>:
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
     568:	8c ef       	ldi	r24, 0xFC	; 252
     56a:	80 93 85 00 	sts	0x0085, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 84 00 	sts	0x0084, r24
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	90 93 89 00 	sts	0x0089, r25
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 88 00 	sts	0x0088, r24
     580:	90 93 8b 00 	sts	0x008B, r25
     584:	80 93 8a 00 	sts	0x008A, r24
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
     590:	90 93 87 00 	sts	0x0087, r25
     594:	80 93 86 00 	sts	0x0086, r24
     598:	8b ea       	ldi	r24, 0xAB	; 171
     59a:	80 93 80 00 	sts	0x0080, r24
     59e:	10 92 82 00 	sts	0x0082, r1
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <port_init>:
     5a8:	c0 df       	rcall	.-128    	; 0x52a <lcd_port_config>
     5aa:	cb df       	rcall	.-106    	; 0x542 <adc_pin_config>
     5ac:	3b 9a       	sbi	0x07, 3	; 7
     5ae:	43 98       	cbi	0x08, 3	; 8
     5b0:	cf df       	rcall	.-98     	; 0x550 <servo1_pin_config>
     5b2:	d1 df       	rcall	.-94     	; 0x556 <servo2_pin_config>
     5b4:	d3 df       	rcall	.-90     	; 0x55c <servo3_pin_config>
     5b6:	c0 cf       	rjmp	.-128    	; 0x538 <color_sensor_pin_config>
     5b8:	08 95       	ret

000005ba <buzzer_on>:
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	88 b9       	out	0x08, r24	; 8
     5c0:	08 95       	ret

000005c2 <buzzer_off>:
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	87 7f       	andi	r24, 0xF7	; 247
     5c6:	88 b9       	out	0x08, r24	; 8
     5c8:	08 95       	ret

000005ca <ADC_Conversion>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <ADC_Conversion+0xa>
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 7b 00 	sts	0x007B, r25
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	84 ff       	sbrs	r24, 4
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <ADC_Conversion+0x1c>
     5ec:	80 91 79 00 	lds	r24, 0x0079
     5f0:	ea e7       	ldi	r30, 0x7A	; 122
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	90 61       	ori	r25, 0x10	; 16
     5f8:	90 83       	st	Z, r25
     5fa:	10 92 7b 00 	sts	0x007B, r1
     5fe:	08 95       	ret

00000600 <color_sensor_pin_interrupt_init>:
     600:	f8 94       	cli
     602:	e9 e6       	ldi	r30, 0x69	; 105
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
     60c:	e8 9a       	sbi	0x1d, 0	; 29
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <__vector_1>:
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	80 91 5a 02 	lds	r24, 0x025A
     628:	90 91 5b 02 	lds	r25, 0x025B
     62c:	a0 91 5c 02 	lds	r26, 0x025C
     630:	b0 91 5d 02 	lds	r27, 0x025D
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	80 93 5a 02 	sts	0x025A, r24
     63e:	90 93 5b 02 	sts	0x025B, r25
     642:	a0 93 5c 02 	sts	0x025C, r26
     646:	b0 93 5d 02 	sts	0x025D, r27
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <adc_init>:
     65c:	ea e7       	ldi	r30, 0x7A	; 122
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	10 82       	st	Z, r1
     662:	10 92 7b 00 	sts	0x007B, r1
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 7c 00 	sts	0x007C, r24
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 bf       	out	0x30, r24	; 48
     670:	86 e8       	ldi	r24, 0x86	; 134
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <servo_1>:
     676:	10 92 89 00 	sts	0x0089, r1
     67a:	68 2f       	mov	r22, r24
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 26 18 	call	0x304c	; 0x304c <__floatunsisf>
     686:	2b e7       	ldi	r18, 0x7B	; 123
     688:	34 e1       	ldi	r19, 0x14	; 20
     68a:	4e ee       	ldi	r20, 0xEE	; 238
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__divsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4c e0       	ldi	r20, 0x0C	; 12
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__addsf3>
     69e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__fixunssfsi>
     6a2:	60 93 88 00 	sts	0x0088, r22
     6a6:	08 95       	ret

000006a8 <servo_2>:
     6a8:	10 92 8b 00 	sts	0x008B, r1
     6ac:	68 2f       	mov	r22, r24
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 26 18 	call	0x304c	; 0x304c <__floatunsisf>
     6b8:	2b e7       	ldi	r18, 0x7B	; 123
     6ba:	34 e1       	ldi	r19, 0x14	; 20
     6bc:	4e ee       	ldi	r20, 0xEE	; 238
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__divsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4c e0       	ldi	r20, 0x0C	; 12
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__addsf3>
     6d0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__fixunssfsi>
     6d4:	60 93 8a 00 	sts	0x008A, r22
     6d8:	08 95       	ret

000006da <servo_3>:
     6da:	10 92 8d 00 	sts	0x008D, r1
     6de:	68 2f       	mov	r22, r24
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 26 18 	call	0x304c	; 0x304c <__floatunsisf>
     6ea:	2b e7       	ldi	r18, 0x7B	; 123
     6ec:	34 e1       	ldi	r19, 0x14	; 20
     6ee:	4e ee       	ldi	r20, 0xEE	; 238
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__divsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4c e0       	ldi	r20, 0x0C	; 12
     6fc:	52 e4       	ldi	r21, 0x42	; 66
     6fe:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__addsf3>
     702:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__fixunssfsi>
     706:	60 93 8c 00 	sts	0x008C, r22
     70a:	08 95       	ret

0000070c <filter_red>:
     70c:	5e 98       	cbi	0x0b, 6	; 11
     70e:	5f 98       	cbi	0x0b, 7	; 11
     710:	08 95       	ret

00000712 <filter_green>:
     712:	5e 9a       	sbi	0x0b, 6	; 11
     714:	5f 9a       	sbi	0x0b, 7	; 11
     716:	08 95       	ret

00000718 <filter_blue>:
     718:	5e 98       	cbi	0x0b, 6	; 11
     71a:	5f 9a       	sbi	0x0b, 7	; 11
     71c:	08 95       	ret

0000071e <color_sensor_scaling>:
     71e:	5c 9a       	sbi	0x0b, 4	; 11
     720:	5d 9a       	sbi	0x0b, 5	; 11
     722:	08 95       	ret

00000724 <red_read>:
     724:	f3 df       	rcall	.-26     	; 0x70c <filter_red>
     726:	10 92 5a 02 	sts	0x025A, r1
     72a:	10 92 5b 02 	sts	0x025B, r1
     72e:	10 92 5c 02 	sts	0x025C, r1
     732:	10 92 5d 02 	sts	0x025D, r1
     736:	2f ef       	ldi	r18, 0xFF	; 255
     738:	8f e7       	ldi	r24, 0x7F	; 127
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	80 40       	sbci	r24, 0x00	; 0
     740:	90 40       	sbci	r25, 0x00	; 0
     742:	e1 f7       	brne	.-8      	; 0x73c <red_read+0x18>
     744:	00 c0       	rjmp	.+0      	; 0x746 <red_read+0x22>
     746:	00 00       	nop
     748:	80 91 5a 02 	lds	r24, 0x025A
     74c:	90 91 5b 02 	lds	r25, 0x025B
     750:	a0 91 5c 02 	lds	r26, 0x025C
     754:	b0 91 5d 02 	lds	r27, 0x025D
     758:	80 93 80 02 	sts	0x0280, r24
     75c:	90 93 81 02 	sts	0x0281, r25
     760:	a0 93 82 02 	sts	0x0282, r26
     764:	b0 93 83 02 	sts	0x0283, r27
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	9c e2       	ldi	r25, 0x2C	; 44
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <red_read+0x4a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <red_read+0x54>
     778:	00 00       	nop
     77a:	08 95       	ret

0000077c <green_read>:
     77c:	ca df       	rcall	.-108    	; 0x712 <filter_green>
     77e:	10 92 5a 02 	sts	0x025A, r1
     782:	10 92 5b 02 	sts	0x025B, r1
     786:	10 92 5c 02 	sts	0x025C, r1
     78a:	10 92 5d 02 	sts	0x025D, r1
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	8f e7       	ldi	r24, 0x7F	; 127
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	21 50       	subi	r18, 0x01	; 1
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <green_read+0x18>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <green_read+0x22>
     79e:	00 00       	nop
     7a0:	80 91 5a 02 	lds	r24, 0x025A
     7a4:	90 91 5b 02 	lds	r25, 0x025B
     7a8:	a0 91 5c 02 	lds	r26, 0x025C
     7ac:	b0 91 5d 02 	lds	r27, 0x025D
     7b0:	80 93 7c 02 	sts	0x027C, r24
     7b4:	90 93 7d 02 	sts	0x027D, r25
     7b8:	a0 93 7e 02 	sts	0x027E, r26
     7bc:	b0 93 7f 02 	sts	0x027F, r27
     7c0:	08 95       	ret

000007c2 <blue_read>:
     7c2:	aa df       	rcall	.-172    	; 0x718 <filter_blue>
     7c4:	10 92 5a 02 	sts	0x025A, r1
     7c8:	10 92 5b 02 	sts	0x025B, r1
     7cc:	10 92 5c 02 	sts	0x025C, r1
     7d0:	10 92 5d 02 	sts	0x025D, r1
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	8f e7       	ldi	r24, 0x7F	; 127
     7d8:	94 e0       	ldi	r25, 0x04	; 4
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <blue_read+0x18>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <blue_read+0x22>
     7e4:	00 00       	nop
     7e6:	80 91 5a 02 	lds	r24, 0x025A
     7ea:	90 91 5b 02 	lds	r25, 0x025B
     7ee:	a0 91 5c 02 	lds	r26, 0x025C
     7f2:	b0 91 5d 02 	lds	r27, 0x025D
     7f6:	80 93 70 02 	sts	0x0270, r24
     7fa:	90 93 71 02 	sts	0x0271, r25
     7fe:	a0 93 72 02 	sts	0x0272, r26
     802:	b0 93 73 02 	sts	0x0273, r27
     806:	08 95       	ret

00000808 <left_encoder_pin_config>:
     808:	6c 98       	cbi	0x0d, 4	; 13
     80a:	74 9a       	sbi	0x0e, 4	; 14
     80c:	08 95       	ret

0000080e <right_encoder_pin_config>:
     80e:	6d 98       	cbi	0x0d, 5	; 13
     810:	75 9a       	sbi	0x0e, 5	; 14
     812:	08 95       	ret

00000814 <port_init_poz>:
     814:	64 de       	rcall	.-824    	; 0x4de <motion_pin_config>
     816:	f8 df       	rcall	.-16     	; 0x808 <left_encoder_pin_config>
     818:	fa cf       	rjmp	.-12     	; 0x80e <right_encoder_pin_config>
     81a:	08 95       	ret

0000081c <left_position_encoder_interrupt_init>:
     81c:	f8 94       	cli
     81e:	ea e6       	ldi	r30, 0x6A	; 106
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	82 60       	ori	r24, 0x02	; 2
     826:	80 83       	st	Z, r24
     828:	ec 9a       	sbi	0x1d, 4	; 29
     82a:	78 94       	sei
     82c:	08 95       	ret

0000082e <right_position_encoder_interrupt_init>:
     82e:	f8 94       	cli
     830:	ea e6       	ldi	r30, 0x6A	; 106
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	88 60       	ori	r24, 0x08	; 8
     838:	80 83       	st	Z, r24
     83a:	ed 9a       	sbi	0x1d, 5	; 29
     83c:	78 94       	sei
     83e:	08 95       	ret

00000840 <__vector_6>:
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	80 91 5e 02 	lds	r24, 0x025E
     856:	90 91 5f 02 	lds	r25, 0x025F
     85a:	a0 91 60 02 	lds	r26, 0x0260
     85e:	b0 91 61 02 	lds	r27, 0x0261
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	a1 1d       	adc	r26, r1
     866:	b1 1d       	adc	r27, r1
     868:	80 93 5e 02 	sts	0x025E, r24
     86c:	90 93 5f 02 	sts	0x025F, r25
     870:	a0 93 60 02 	sts	0x0260, r26
     874:	b0 93 61 02 	sts	0x0261, r27
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <__vector_5>:
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	80 91 62 02 	lds	r24, 0x0262
     8a0:	90 91 63 02 	lds	r25, 0x0263
     8a4:	a0 91 64 02 	lds	r26, 0x0264
     8a8:	b0 91 65 02 	lds	r27, 0x0265
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	b1 1d       	adc	r27, r1
     8b2:	80 93 62 02 	sts	0x0262, r24
     8b6:	90 93 63 02 	sts	0x0263, r25
     8ba:	a0 93 64 02 	sts	0x0264, r26
     8be:	b0 93 65 02 	sts	0x0265, r27
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <angle_rotate>:
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	bc 01       	movw	r22, r24
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 26 18 	call	0x304c	; 0x304c <__floatunsisf>
     8ea:	28 e4       	ldi	r18, 0x48	; 72
     8ec:	31 ee       	ldi	r19, 0xE1	; 225
     8ee:	42 e8       	ldi	r20, 0x82	; 130
     8f0:	50 e4       	ldi	r21, 0x40	; 64
     8f2:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__divsf3>
     8f6:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__fixunssfsi>
     8fa:	cb 01       	movw	r24, r22
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	10 92 5e 02 	sts	0x025E, r1
     904:	10 92 5f 02 	sts	0x025F, r1
     908:	10 92 60 02 	sts	0x0260, r1
     90c:	10 92 61 02 	sts	0x0261, r1
     910:	10 92 62 02 	sts	0x0262, r1
     914:	10 92 63 02 	sts	0x0263, r1
     918:	10 92 64 02 	sts	0x0264, r1
     91c:	10 92 65 02 	sts	0x0265, r1
     920:	51 e0       	ldi	r21, 0x01	; 1
     922:	e0 e0       	ldi	r30, 0x00	; 0
     924:	c0 90 5e 02 	lds	r12, 0x025E
     928:	d0 90 5f 02 	lds	r13, 0x025F
     92c:	e0 90 60 02 	lds	r14, 0x0260
     930:	f0 90 61 02 	lds	r15, 0x0261
     934:	00 91 62 02 	lds	r16, 0x0262
     938:	10 91 63 02 	lds	r17, 0x0263
     93c:	20 91 64 02 	lds	r18, 0x0264
     940:	30 91 65 02 	lds	r19, 0x0265
     944:	45 2f       	mov	r20, r21
     946:	08 17       	cp	r16, r24
     948:	19 07       	cpc	r17, r25
     94a:	2a 07       	cpc	r18, r26
     94c:	3b 07       	cpc	r19, r27
     94e:	08 f4       	brcc	.+2      	; 0x952 <angle_rotate+0x7e>
     950:	4e 2f       	mov	r20, r30
     952:	41 11       	cpse	r20, r1
     954:	09 c0       	rjmp	.+18     	; 0x968 <angle_rotate+0x94>
     956:	25 2f       	mov	r18, r21
     958:	c8 16       	cp	r12, r24
     95a:	d9 06       	cpc	r13, r25
     95c:	ea 06       	cpc	r14, r26
     95e:	fb 06       	cpc	r15, r27
     960:	08 f4       	brcc	.+2      	; 0x964 <angle_rotate+0x90>
     962:	2e 2f       	mov	r18, r30
     964:	22 23       	and	r18, r18
     966:	f1 f2       	breq	.-68     	; 0x924 <angle_rotate+0x50>
     968:	dd dd       	rcall	.-1094   	; 0x524 <stop>
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <linear_distance_mm>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	bc 01       	movw	r22, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 26 18 	call	0x304c	; 0x304c <__floatunsisf>
     986:	25 ee       	ldi	r18, 0xE5	; 229
     988:	30 ed       	ldi	r19, 0xD0	; 208
     98a:	4a ea       	ldi	r20, 0xAA	; 170
     98c:	50 e4       	ldi	r21, 0x40	; 64
     98e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__divsf3>
     992:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__fixunssfsi>
     996:	10 92 5e 02 	sts	0x025E, r1
     99a:	10 92 5f 02 	sts	0x025F, r1
     99e:	10 92 60 02 	sts	0x0260, r1
     9a2:	10 92 61 02 	sts	0x0261, r1
     9a6:	00 91 5e 02 	lds	r16, 0x025E
     9aa:	10 91 5f 02 	lds	r17, 0x025F
     9ae:	20 91 60 02 	lds	r18, 0x0260
     9b2:	30 91 61 02 	lds	r19, 0x0261
     9b6:	60 17       	cp	r22, r16
     9b8:	71 07       	cpc	r23, r17
     9ba:	82 07       	cpc	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	98 f7       	brcc	.-26     	; 0x9a6 <linear_distance_mm+0x2e>
     9c0:	b1 dd       	rcall	.-1182   	; 0x524 <stop>
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <forward_mm>:
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
     9ce:	9e dd       	rcall	.-1220   	; 0x50c <forward>
     9d0:	ce 01       	movw	r24, r28
     9d2:	d2 df       	rcall	.-92     	; 0x978 <linear_distance_mm>
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <back_mm>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	98 dd       	rcall	.-1232   	; 0x512 <back>
     9e2:	ce 01       	movw	r24, r28
     9e4:	c9 df       	rcall	.-110    	; 0x978 <linear_distance_mm>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <left_degrees>:
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	92 dd       	rcall	.-1244   	; 0x518 <left>
     9f4:	ce 01       	movw	r24, r28
     9f6:	6e df       	rcall	.-292    	; 0x8d4 <angle_rotate>
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <right_degrees>:
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
     a04:	8c dd       	rcall	.-1256   	; 0x51e <right>
     a06:	ce 01       	movw	r24, r28
     a08:	65 df       	rcall	.-310    	; 0x8d4 <angle_rotate>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <init_devices>:
     a10:	f8 94       	cli
     a12:	00 df       	rcall	.-512    	; 0x814 <port_init_poz>
     a14:	03 df       	rcall	.-506    	; 0x81c <left_position_encoder_interrupt_init>
     a16:	0b df       	rcall	.-490    	; 0x82e <right_position_encoder_interrupt_init>
     a18:	c7 dd       	rcall	.-1138   	; 0x5a8 <port_init>
     a1a:	f2 dd       	rcall	.-1052   	; 0x600 <color_sensor_pin_interrupt_init>
     a1c:	1f de       	rcall	.-962    	; 0x65c <adc_init>
     a1e:	5f dd       	rcall	.-1346   	; 0x4de <motion_pin_config>
     a20:	43 dd       	rcall	.-1402   	; 0x4a8 <timer5_init>
     a22:	9f dd       	rcall	.-1218   	; 0x562 <timer1_init>
     a24:	78 94       	sei
     a26:	08 95       	ret

00000a28 <set_color>:
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	cf dd       	rcall	.-1122   	; 0x5ca <ADC_Conversion>
     a2c:	80 93 4d 02 	sts	0x024D, r24
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	cb dd       	rcall	.-1130   	; 0x5ca <ADC_Conversion>
     a34:	80 93 4c 02 	sts	0x024C, r24
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	c7 dd       	rcall	.-1138   	; 0x5ca <ADC_Conversion>
     a3c:	80 93 4b 02 	sts	0x024B, r24
     a40:	08 95       	ret

00000a42 <lower>:
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	e9 f4       	brne	.+58     	; 0xa80 <lower+0x3e>
     a46:	8a e5       	ldi	r24, 0x5A	; 90
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	90 93 4f 02 	sts	0x024F, r25
     a4e:	80 93 4e 02 	sts	0x024E, r24
     a52:	2a de       	rcall	.-940    	; 0x6a8 <servo_2>
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	9f e8       	ldi	r25, 0x8F	; 143
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <lower+0x16>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <lower+0x1c>
     a5e:	00 00       	nop
     a60:	80 91 4e 02 	lds	r24, 0x024E
     a64:	90 91 4f 02 	lds	r25, 0x024F
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	90 93 4f 02 	sts	0x024F, r25
     a6e:	80 93 4e 02 	sts	0x024E, r24
     a72:	8c 33       	cpi	r24, 0x3C	; 60
     a74:	91 05       	cpc	r25, r1
     a76:	6c f7       	brge	.-38     	; 0xa52 <lower+0x10>
     a78:	8c e3       	ldi	r24, 0x3C	; 60
     a7a:	80 93 00 02 	sts	0x0200, r24
     a7e:	08 95       	ret
     a80:	8a e5       	ldi	r24, 0x5A	; 90
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 4f 02 	sts	0x024F, r25
     a88:	80 93 4e 02 	sts	0x024E, r24
     a8c:	0d de       	rcall	.-998    	; 0x6a8 <servo_2>
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f e8       	ldi	r25, 0x8F	; 143
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <lower+0x50>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <lower+0x56>
     a98:	00 00       	nop
     a9a:	80 91 4e 02 	lds	r24, 0x024E
     a9e:	90 91 4f 02 	lds	r25, 0x024F
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	90 93 4f 02 	sts	0x024F, r25
     aa8:	80 93 4e 02 	sts	0x024E, r24
     aac:	89 37       	cpi	r24, 0x79	; 121
     aae:	91 05       	cpc	r25, r1
     ab0:	6c f3       	brlt	.-38     	; 0xa8c <lower+0x4a>
     ab2:	88 e7       	ldi	r24, 0x78	; 120
     ab4:	80 93 00 02 	sts	0x0200, r24
     ab8:	08 95       	ret

00000aba <elevate>:
     aba:	80 91 00 02 	lds	r24, 0x0200
     abe:	8c 33       	cpi	r24, 0x3C	; 60
     ac0:	d1 f4       	brne	.+52     	; 0xaf6 <elevate+0x3c>
     ac2:	8c e3       	ldi	r24, 0x3C	; 60
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 4f 02 	sts	0x024F, r25
     aca:	80 93 4e 02 	sts	0x024E, r24
     ace:	ec dd       	rcall	.-1064   	; 0x6a8 <servo_2>
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	9f e8       	ldi	r25, 0x8F	; 143
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <elevate+0x1a>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <elevate+0x20>
     ada:	00 00       	nop
     adc:	80 91 4e 02 	lds	r24, 0x024E
     ae0:	90 91 4f 02 	lds	r25, 0x024F
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	90 93 4f 02 	sts	0x024F, r25
     aea:	80 93 4e 02 	sts	0x024E, r24
     aee:	8b 35       	cpi	r24, 0x5B	; 91
     af0:	91 05       	cpc	r25, r1
     af2:	d4 f4       	brge	.+52     	; 0xb28 <elevate+0x6e>
     af4:	ec cf       	rjmp	.-40     	; 0xace <elevate+0x14>
     af6:	88 e7       	ldi	r24, 0x78	; 120
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 4f 02 	sts	0x024F, r25
     afe:	80 93 4e 02 	sts	0x024E, r24
     b02:	d2 dd       	rcall	.-1116   	; 0x6a8 <servo_2>
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f e8       	ldi	r25, 0x8F	; 143
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <elevate+0x4e>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <elevate+0x54>
     b0e:	00 00       	nop
     b10:	80 91 4e 02 	lds	r24, 0x024E
     b14:	90 91 4f 02 	lds	r25, 0x024F
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	90 93 4f 02 	sts	0x024F, r25
     b1e:	80 93 4e 02 	sts	0x024E, r24
     b22:	8a 35       	cpi	r24, 0x5A	; 90
     b24:	91 05       	cpc	r25, r1
     b26:	6c f7       	brge	.-38     	; 0xb02 <elevate+0x48>
     b28:	8a e5       	ldi	r24, 0x5A	; 90
     b2a:	80 93 00 02 	sts	0x0200, r24
     b2e:	08 95       	ret

00000b30 <open>:
     b30:	81 11       	cpse	r24, r1
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <open+0x38>
     b34:	87 e3       	ldi	r24, 0x37	; 55
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 4f 02 	sts	0x024F, r25
     b3c:	80 93 4e 02 	sts	0x024E, r24
     b40:	cc dd       	rcall	.-1128   	; 0x6da <servo_3>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	9f e8       	ldi	r25, 0x8F	; 143
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <open+0x16>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <open+0x1c>
     b4c:	00 00       	nop
     b4e:	80 91 4e 02 	lds	r24, 0x024E
     b52:	90 91 4f 02 	lds	r25, 0x024F
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	90 93 4f 02 	sts	0x024F, r25
     b5c:	80 93 4e 02 	sts	0x024E, r24
     b60:	18 16       	cp	r1, r24
     b62:	19 06       	cpc	r1, r25
     b64:	e4 f4       	brge	.+56     	; 0xb9e <open+0x6e>
     b66:	ec cf       	rjmp	.-40     	; 0xb40 <open+0x10>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	c9 f4       	brne	.+50     	; 0xb9e <open+0x6e>
     b6c:	87 e3       	ldi	r24, 0x37	; 55
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 4f 02 	sts	0x024F, r25
     b74:	80 93 4e 02 	sts	0x024E, r24
     b78:	7e dd       	rcall	.-1284   	; 0x676 <servo_1>
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	9f e8       	ldi	r25, 0x8F	; 143
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <open+0x4e>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <open+0x54>
     b84:	00 00       	nop
     b86:	80 91 4e 02 	lds	r24, 0x024E
     b8a:	90 91 4f 02 	lds	r25, 0x024F
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	90 93 4f 02 	sts	0x024F, r25
     b94:	80 93 4e 02 	sts	0x024E, r24
     b98:	18 16       	cp	r1, r24
     b9a:	19 06       	cpc	r1, r25
     b9c:	6c f3       	brlt	.-38     	; 0xb78 <open+0x48>
     b9e:	08 95       	ret

00000ba0 <close>:
     ba0:	81 11       	cpse	r24, r1
     ba2:	18 c0       	rjmp	.+48     	; 0xbd4 <close+0x34>
     ba4:	10 92 4f 02 	sts	0x024F, r1
     ba8:	10 92 4e 02 	sts	0x024E, r1
     bac:	96 dd       	rcall	.-1236   	; 0x6da <servo_3>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	9f e8       	ldi	r25, 0x8F	; 143
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <close+0x12>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <close+0x18>
     bb8:	00 00       	nop
     bba:	80 91 4e 02 	lds	r24, 0x024E
     bbe:	90 91 4f 02 	lds	r25, 0x024F
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	90 93 4f 02 	sts	0x024F, r25
     bc8:	80 93 4e 02 	sts	0x024E, r24
     bcc:	87 33       	cpi	r24, 0x37	; 55
     bce:	91 05       	cpc	r25, r1
     bd0:	dc f4       	brge	.+54     	; 0xc08 <close+0x68>
     bd2:	ec cf       	rjmp	.-40     	; 0xbac <close+0xc>
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	c1 f4       	brne	.+48     	; 0xc08 <close+0x68>
     bd8:	10 92 4f 02 	sts	0x024F, r1
     bdc:	10 92 4e 02 	sts	0x024E, r1
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	49 dd       	rcall	.-1390   	; 0x676 <servo_1>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9f e8       	ldi	r25, 0x8F	; 143
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <close+0x48>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <close+0x4e>
     bee:	00 00       	nop
     bf0:	80 91 4e 02 	lds	r24, 0x024E
     bf4:	90 91 4f 02 	lds	r25, 0x024F
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 4f 02 	sts	0x024F, r25
     bfe:	80 93 4e 02 	sts	0x024E, r24
     c02:	87 33       	cpi	r24, 0x37	; 55
     c04:	91 05       	cpc	r25, r1
     c06:	6c f3       	brlt	.-38     	; 0xbe2 <close+0x42>
     c08:	08 95       	ret

00000c0a <buzzer>:
     c0a:	d7 dc       	rcall	.-1618   	; 0x5ba <buzzer_on>
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	8f e7       	ldi	r24, 0x7F	; 127
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <buzzer+0x8>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <buzzer+0x12>
     c1c:	00 00       	nop
     c1e:	d1 cc       	rjmp	.-1630   	; 0x5c2 <buzzer_off>
     c20:	08 95       	ret

00000c22 <lcd>:
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	c3 da       	rcall	.-2682   	; 0x1b2 <lcd_wr_command>
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	2c db       	rcall	.-2472   	; 0x28a <lcd_cursor>
     c32:	ce 01       	movw	r24, r28
     c34:	1c db       	rcall	.-2504   	; 0x26e <lcd_string>
     c36:	2f ef       	ldi	r18, 0xFF	; 255
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	9c e2       	ldi	r25, 0x2C	; 44
     c3c:	21 50       	subi	r18, 0x01	; 1
     c3e:	80 40       	sbci	r24, 0x00	; 0
     c40:	90 40       	sbci	r25, 0x00	; 0
     c42:	e1 f7       	brne	.-8      	; 0xc3c <lcd+0x1a>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <lcd+0x24>
     c46:	00 00       	nop
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <scan>:
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	68 dd       	rcall	.-1328   	; 0x724 <red_read>
     c54:	b6 dd       	rcall	.-1172   	; 0x7c2 <blue_read>
     c56:	92 dd       	rcall	.-1244   	; 0x77c <green_read>
     c58:	2f ef       	ldi	r18, 0xFF	; 255
     c5a:	8f e7       	ldi	r24, 0x7F	; 127
     c5c:	94 e0       	ldi	r25, 0x04	; 4
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	80 40       	sbci	r24, 0x00	; 0
     c62:	90 40       	sbci	r25, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <scan+0x10>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <scan+0x1a>
     c68:	00 00       	nop
     c6a:	8b e0       	ldi	r24, 0x0B	; 11
     c6c:	ae dc       	rcall	.-1700   	; 0x5ca <ADC_Conversion>
     c6e:	88 33       	cpi	r24, 0x38	; 56
     c70:	08 f4       	brcc	.+2      	; 0xc74 <scan+0x26>
     c72:	7b c0       	rjmp	.+246    	; 0xd6a <scan+0x11c>
     c74:	8b e0       	ldi	r24, 0x0B	; 11
     c76:	a9 dc       	rcall	.-1710   	; 0x5ca <ADC_Conversion>
     c78:	84 36       	cpi	r24, 0x64	; 100
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <scan+0x30>
     c7c:	79 c0       	rjmp	.+242    	; 0xd70 <scan+0x122>
     c7e:	80 91 6e 02 	lds	r24, 0x026E
     c82:	90 91 6f 02 	lds	r25, 0x026F
     c86:	aa 27       	eor	r26, r26
     c88:	97 fd       	sbrc	r25, 7
     c8a:	a0 95       	com	r26
     c8c:	ba 2f       	mov	r27, r26
     c8e:	40 91 80 02 	lds	r20, 0x0280
     c92:	50 91 81 02 	lds	r21, 0x0281
     c96:	60 91 82 02 	lds	r22, 0x0282
     c9a:	70 91 83 02 	lds	r23, 0x0283
     c9e:	48 17       	cp	r20, r24
     ca0:	59 07       	cpc	r21, r25
     ca2:	6a 07       	cpc	r22, r26
     ca4:	7b 07       	cpc	r23, r27
     ca6:	d8 f4       	brcc	.+54     	; 0xcde <scan+0x90>
     ca8:	40 91 7c 02 	lds	r20, 0x027C
     cac:	50 91 7d 02 	lds	r21, 0x027D
     cb0:	60 91 7e 02 	lds	r22, 0x027E
     cb4:	70 91 7f 02 	lds	r23, 0x027F
     cb8:	48 17       	cp	r20, r24
     cba:	59 07       	cpc	r21, r25
     cbc:	6a 07       	cpc	r22, r26
     cbe:	7b 07       	cpc	r23, r27
     cc0:	70 f4       	brcc	.+28     	; 0xcde <scan+0x90>
     cc2:	40 91 70 02 	lds	r20, 0x0270
     cc6:	50 91 71 02 	lds	r21, 0x0271
     cca:	60 91 72 02 	lds	r22, 0x0272
     cce:	70 91 73 02 	lds	r23, 0x0273
     cd2:	48 17       	cp	r20, r24
     cd4:	59 07       	cpc	r21, r25
     cd6:	6a 07       	cpc	r22, r26
     cd8:	7b 07       	cpc	r23, r27
     cda:	08 f4       	brcc	.+2      	; 0xcde <scan+0x90>
     cdc:	4c c0       	rjmp	.+152    	; 0xd76 <scan+0x128>
     cde:	40 91 80 02 	lds	r20, 0x0280
     ce2:	50 91 81 02 	lds	r21, 0x0281
     ce6:	60 91 82 02 	lds	r22, 0x0282
     cea:	70 91 83 02 	lds	r23, 0x0283
     cee:	80 91 70 02 	lds	r24, 0x0270
     cf2:	90 91 71 02 	lds	r25, 0x0271
     cf6:	a0 91 72 02 	lds	r26, 0x0272
     cfa:	b0 91 73 02 	lds	r27, 0x0273
     cfe:	84 17       	cp	r24, r20
     d00:	95 07       	cpc	r25, r21
     d02:	a6 07       	cpc	r26, r22
     d04:	b7 07       	cpc	r27, r23
     d06:	c8 f4       	brcc	.+50     	; 0xd3a <scan+0xec>
     d08:	00 91 80 02 	lds	r16, 0x0280
     d0c:	10 91 81 02 	lds	r17, 0x0281
     d10:	20 91 82 02 	lds	r18, 0x0282
     d14:	30 91 83 02 	lds	r19, 0x0283
     d18:	40 91 7c 02 	lds	r20, 0x027C
     d1c:	50 91 7d 02 	lds	r21, 0x027D
     d20:	60 91 7e 02 	lds	r22, 0x027E
     d24:	70 91 7f 02 	lds	r23, 0x027F
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	40 17       	cp	r20, r16
     d2e:	51 07       	cpc	r21, r17
     d30:	62 07       	cpc	r22, r18
     d32:	73 07       	cpc	r23, r19
     d34:	28 f5       	brcc	.+74     	; 0xd80 <scan+0x132>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	23 c0       	rjmp	.+70     	; 0xd80 <scan+0x132>
     d3a:	40 91 70 02 	lds	r20, 0x0270
     d3e:	50 91 71 02 	lds	r21, 0x0271
     d42:	60 91 72 02 	lds	r22, 0x0272
     d46:	70 91 73 02 	lds	r23, 0x0273
     d4a:	80 91 7c 02 	lds	r24, 0x027C
     d4e:	90 91 7d 02 	lds	r25, 0x027D
     d52:	a0 91 7e 02 	lds	r26, 0x027E
     d56:	b0 91 7f 02 	lds	r27, 0x027F
     d5a:	84 17       	cp	r24, r20
     d5c:	95 07       	cpc	r25, r21
     d5e:	a6 07       	cpc	r26, r22
     d60:	b7 07       	cpc	r27, r23
     d62:	60 f4       	brcc	.+24     	; 0xd7c <scan+0x12e>
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <scan+0x132>
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <scan+0x132>
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	9f ef       	ldi	r25, 0xFF	; 255
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <scan+0x132>
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <scan+0x132>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <setIndicatorAndColor>:
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cf e9       	ldi	r28, 0x9F	; 159
     d8c:	d2 e0       	ldi	r29, 0x02	; 2
     d8e:	ed e8       	ldi	r30, 0x8D	; 141
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	a6 e6       	ldi	r26, 0x66	; 102
     d94:	b2 e0       	ldi	r27, 0x02	; 2
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	2e ef       	ldi	r18, 0xFE	; 254
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	89 93       	st	Y+, r24
     da0:	99 93       	st	Y+, r25
     da2:	33 83       	std	Z+3, r19	; 0x03
     da4:	22 83       	std	Z+2, r18	; 0x02
     da6:	31 83       	std	Z+1, r19	; 0x01
     da8:	20 83       	st	Z, r18
     daa:	1d 92       	st	X+, r1
     dac:	1d 92       	st	X+, r1
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	34 96       	adiw	r30, 0x04	; 4
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	91 05       	cpc	r25, r1
     db6:	99 f7       	brne	.-26     	; 0xd9e <setIndicatorAndColor+0x18>
     db8:	e0 91 9f 02 	lds	r30, 0x029F
     dbc:	f0 91 a0 02 	lds	r31, 0x02A0
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	e9 55       	subi	r30, 0x59	; 89
     dc6:	fd 4f       	sbci	r31, 0xFD	; 253
     dc8:	11 82       	std	Z+1, r1	; 0x01
     dca:	10 82       	st	Z, r1
     dcc:	e0 91 a1 02 	lds	r30, 0x02A1
     dd0:	f0 91 a2 02 	lds	r31, 0x02A2
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	e9 55       	subi	r30, 0x59	; 89
     dda:	fd 4f       	sbci	r31, 0xFD	; 253
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24
     de4:	e0 91 a3 02 	lds	r30, 0x02A3
     de8:	f0 91 a4 02 	lds	r31, 0x02A4
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	e9 55       	subi	r30, 0x59	; 89
     df2:	fd 4f       	sbci	r31, 0xFD	; 253
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	e0 91 a5 02 	lds	r30, 0x02A5
     e00:	f0 91 a6 02 	lds	r31, 0x02A6
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	e9 55       	subi	r30, 0x59	; 89
     e0a:	fd 4f       	sbci	r31, 0xFD	; 253
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	9f ef       	ldi	r25, 0xFF	; 255
     e18:	90 93 88 02 	sts	0x0288, r25
     e1c:	80 93 87 02 	sts	0x0287, r24
     e20:	90 93 86 02 	sts	0x0286, r25
     e24:	80 93 85 02 	sts	0x0285, r24
     e28:	90 93 b6 02 	sts	0x02B6, r25
     e2c:	80 93 b5 02 	sts	0x02B5, r24
     e30:	90 93 b4 02 	sts	0x02B4, r25
     e34:	80 93 b3 02 	sts	0x02B3, r24
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <terminalCheck2>:

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
		total--;
}
void terminalCheck2()
{
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e42:	86 e9       	ldi	r24, 0x96	; 150
     e44:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     e48:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	if (flag == 0)
     e4c:	80 91 56 02 	lds	r24, 0x0256
     e50:	90 91 57 02 	lds	r25, 0x0257
     e54:	89 2b       	or	r24, r25
     e56:	39 f5       	brne	.+78     	; 0xea6 <terminalCheck2+0x68>
	{
		if (dir == 0)
     e58:	80 91 50 02 	lds	r24, 0x0250
     e5c:	90 91 51 02 	lds	r25, 0x0251
     e60:	89 2b       	or	r24, r25
     e62:	71 f4       	brne	.+28     	; 0xe80 <terminalCheck2+0x42>
			if (ot == 0 || ot == 1)
     e64:	80 91 52 02 	lds	r24, 0x0252
     e68:	90 91 53 02 	lds	r25, 0x0253
     e6c:	02 97       	sbiw	r24, 0x02	; 2
     e6e:	20 f4       	brcc	.+8      	; 0xe78 <terminalCheck2+0x3a>
				forward_mm(30);
     e70:	8e e1       	ldi	r24, 0x1E	; 30
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a9 dd       	rcall	.-1198   	; 0x9c8 <forward_mm>
     e76:	11 c0       	rjmp	.+34     	; 0xe9a <terminalCheck2+0x5c>
			else back_mm(30);
     e78:	8e e1       	ldi	r24, 0x1E	; 30
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	ae dd       	rcall	.-1188   	; 0x9da <back_mm>
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <terminalCheck2+0x5c>
		else if (ot == 0 || ot == 1)
     e80:	80 91 52 02 	lds	r24, 0x0252
     e84:	90 91 53 02 	lds	r25, 0x0253
     e88:	02 97       	sbiw	r24, 0x02	; 2
     e8a:	20 f4       	brcc	.+8      	; 0xe94 <terminalCheck2+0x56>
			back_mm(30);
     e8c:	8e e1       	ldi	r24, 0x1E	; 30
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a4 dd       	rcall	.-1208   	; 0x9da <back_mm>
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <terminalCheck2+0x5c>
		else forward_mm(30);
     e94:	8e e1       	ldi	r24, 0x1E	; 30
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	97 dd       	rcall	.-1234   	; 0x9c8 <forward_mm>
		flag = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 57 02 	sts	0x0257, r25
     ea2:	80 93 56 02 	sts	0x0256, r24
	}

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     ea6:	80 91 89 02 	lds	r24, 0x0289
     eaa:	90 91 8a 02 	lds	r25, 0x028A
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	91 05       	cpc	r25, r1
     eb2:	30 f4       	brcc	.+12     	; 0xec0 <terminalCheck2+0x82>
     eb4:	20 91 50 02 	lds	r18, 0x0250
     eb8:	30 91 51 02 	lds	r19, 0x0251
     ebc:	23 2b       	or	r18, r19
     ebe:	69 f0       	breq	.+26     	; 0xeda <terminalCheck2+0x9c>
     ec0:	9c 01       	movw	r18, r24
     ec2:	22 50       	subi	r18, 0x02	; 2
     ec4:	31 09       	sbc	r19, r1
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	40 f5       	brcc	.+80     	; 0xf1c <terminalCheck2+0xde>
     ecc:	40 91 50 02 	lds	r20, 0x0250
     ed0:	50 91 51 02 	lds	r21, 0x0251
     ed4:	42 30       	cpi	r20, 0x02	; 2
     ed6:	51 05       	cpc	r21, r1
     ed8:	09 f5       	brne	.+66     	; 0xf1c <terminalCheck2+0xde>
	{
		left_degrees(30);
     eda:	8e e1       	ldi	r24, 0x1E	; 30
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	86 dd       	rcall	.-1268   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ee0:	86 e9       	ldi	r24, 0x96	; 150
     ee2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     ee6:	80 93 2a 01 	sts	0x012A, r24
     eea:	01 c0       	rjmp	.+2      	; 0xeee <terminalCheck2+0xb0>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
		left();
     eec:	15 db       	rcall	.-2518   	; 0x518 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	6c db       	rcall	.-2344   	; 0x5ca <ADC_Conversion>
     ef2:	82 33       	cpi	r24, 0x32	; 50
     ef4:	d8 f3       	brcs	.-10     	; 0xeec <terminalCheck2+0xae>
		left();
		//	_delay_ms(100);
		stop();
     ef6:	16 db       	rcall	.-2516   	; 0x524 <stop>
		dir=(dir+3)%4;
     ef8:	80 91 50 02 	lds	r24, 0x0250
     efc:	90 91 51 02 	lds	r25, 0x0251
     f00:	03 96       	adiw	r24, 0x03	; 3
     f02:	83 70       	andi	r24, 0x03	; 3
     f04:	90 78       	andi	r25, 0x80	; 128
     f06:	99 23       	and	r25, r25
     f08:	24 f4       	brge	.+8      	; 0xf12 <terminalCheck2+0xd4>
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	8c 6f       	ori	r24, 0xFC	; 252
     f0e:	9f 6f       	ori	r25, 0xFF	; 255
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	90 93 51 02 	sts	0x0251, r25
     f16:	80 93 50 02 	sts	0x0250, r24
     f1a:	53 c0       	rjmp	.+166    	; 0xfc2 <terminalCheck2+0x184>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     f1c:	02 97       	sbiw	r24, 0x02	; 2
     f1e:	30 f4       	brcc	.+12     	; 0xf2c <terminalCheck2+0xee>
     f20:	80 91 50 02 	lds	r24, 0x0250
     f24:	90 91 51 02 	lds	r25, 0x0251
     f28:	02 97       	sbiw	r24, 0x02	; 2
     f2a:	49 f0       	breq	.+18     	; 0xf3e <terminalCheck2+0x100>
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	38 f5       	brcc	.+78     	; 0xf80 <terminalCheck2+0x142>
     f32:	80 91 50 02 	lds	r24, 0x0250
     f36:	90 91 51 02 	lds	r25, 0x0251
     f3a:	89 2b       	or	r24, r25
     f3c:	09 f5       	brne	.+66     	; 0xf80 <terminalCheck2+0x142>
		{
			right_degrees(30);
     f3e:	8e e1       	ldi	r24, 0x1E	; 30
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	5d dd       	rcall	.-1350   	; 0x9fe <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f44:	86 e9       	ldi	r24, 0x96	; 150
     f46:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     f4a:	80 93 2a 01 	sts	0x012A, r24
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <terminalCheck2+0x114>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<50)
				right();
     f50:	e6 da       	rcall	.-2612   	; 0x51e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<50)
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	3a db       	rcall	.-2444   	; 0x5ca <ADC_Conversion>
     f56:	82 33       	cpi	r24, 0x32	; 50
     f58:	d8 f3       	brcs	.-10     	; 0xf50 <terminalCheck2+0x112>
				right();
			//	_delay_ms(100);
			stop();	
     f5a:	e4 da       	rcall	.-2616   	; 0x524 <stop>
			dir=(dir+1)%4;
     f5c:	80 91 50 02 	lds	r24, 0x0250
     f60:	90 91 51 02 	lds	r25, 0x0251
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	83 70       	andi	r24, 0x03	; 3
     f68:	90 78       	andi	r25, 0x80	; 128
     f6a:	99 23       	and	r25, r25
     f6c:	24 f4       	brge	.+8      	; 0xf76 <terminalCheck2+0x138>
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	8c 6f       	ori	r24, 0xFC	; 252
     f72:	9f 6f       	ori	r25, 0xFF	; 255
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	90 93 51 02 	sts	0x0251, r25
     f7a:	80 93 50 02 	sts	0x0250, r24
     f7e:	21 c0       	rjmp	.+66     	; 0xfc2 <terminalCheck2+0x184>
		}
	else {
		left_degrees(150);
     f80:	86 e9       	ldi	r24, 0x96	; 150
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	33 dd       	rcall	.-1434   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f86:	86 e9       	ldi	r24, 0x96	; 150
     f88:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     f8c:	80 93 2a 01 	sts	0x012A, r24
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <terminalCheck2+0x156>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<40)
		left();
     f92:	c2 da       	rcall	.-2684   	; 0x518 <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(2)<40)
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	19 db       	rcall	.-2510   	; 0x5ca <ADC_Conversion>
     f98:	88 32       	cpi	r24, 0x28	; 40
     f9a:	d8 f3       	brcs	.-10     	; 0xf92 <terminalCheck2+0x154>
		left();
	//	_delay_ms(50);
		stop();
     f9c:	c3 da       	rcall	.-2682   	; 0x524 <stop>
		dir=(dir+2)%4;
     f9e:	80 91 50 02 	lds	r24, 0x0250
     fa2:	90 91 51 02 	lds	r25, 0x0251
     fa6:	02 96       	adiw	r24, 0x02	; 2
     fa8:	83 70       	andi	r24, 0x03	; 3
     faa:	90 78       	andi	r25, 0x80	; 128
     fac:	99 23       	and	r25, r25
     fae:	24 f4       	brge	.+8      	; 0xfb8 <terminalCheck2+0x17a>
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	8c 6f       	ori	r24, 0xFC	; 252
     fb4:	9f 6f       	ori	r25, 0xFF	; 255
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	90 93 51 02 	sts	0x0251, r25
     fbc:	80 93 50 02 	sts	0x0250, r24
		lcd((char *)dir);
     fc0:	30 de       	rcall	.-928    	; 0xc22 <lcd>
		}
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
     fc2:	c0 91 89 02 	lds	r28, 0x0289
     fc6:	d0 91 8a 02 	lds	r29, 0x028A
     fca:	41 de       	rcall	.-894    	; 0xc4e <scan>
     fcc:	cc 0f       	add	r28, r28
     fce:	dd 1f       	adc	r29, r29
     fd0:	cc 0f       	add	r28, r28
     fd2:	dd 1f       	adc	r29, r29
     fd4:	c3 57       	subi	r28, 0x73	; 115
     fd6:	dd 4f       	sbci	r29, 0xFD	; 253
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==-1)
     fdc:	e0 91 89 02 	lds	r30, 0x0289
     fe0:	f0 91 8a 02 	lds	r31, 0x028A
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	e3 57       	subi	r30, 0x73	; 115
     fee:	fd 4f       	sbci	r31, 0xFD	; 253
     ff0:	42 81       	ldd	r20, Z+2	; 0x02
     ff2:	53 81       	ldd	r21, Z+3	; 0x03
     ff4:	4f 3f       	cpi	r20, 0xFF	; 255
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	52 07       	cpc	r21, r18
     ffa:	41 f4       	brne	.+16     	; 0x100c <terminalCheck2+0x1ce>
		lcd_print(2,11,9, 1);
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	49 e0       	ldi	r20, 0x09	; 9
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	6b e0       	ldi	r22, 0x0B	; 11
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	5b d9       	rcall	.-3402   	; 0x2c0 <lcd_print>
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <terminalCheck2+0x1d8>
	else
		lcd_print(2,11, term[ct][1], 1);
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	6b e0       	ldi	r22, 0x0B	; 11
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	55 d9       	rcall	.-3414   	; 0x2c0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1016:	4f ef       	ldi	r20, 0xFF	; 255
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	9c e2       	ldi	r25, 0x2C	; 44
    101c:	41 50       	subi	r20, 0x01	; 1
    101e:	80 40       	sbci	r24, 0x00	; 0
    1020:	90 40       	sbci	r25, 0x00	; 0
    1022:	e1 f7       	brne	.-8      	; 0x101c <terminalCheck2+0x1de>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <terminalCheck2+0x1e8>
    1026:	00 00       	nop
	_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
    1028:	80 91 89 02 	lds	r24, 0x0289
    102c:	90 91 8a 02 	lds	r25, 0x028A
    1030:	fc 01       	movw	r30, r24
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	e3 57       	subi	r30, 0x73	; 115
    103c:	fd 4f       	sbci	r31, 0xFD	; 253
    103e:	22 81       	ldd	r18, Z+2	; 0x02
    1040:	33 81       	ldd	r19, Z+3	; 0x03
    1042:	2f 3f       	cpi	r18, 0xFF	; 255
    1044:	4f ef       	ldi	r20, 0xFF	; 255
    1046:	34 07       	cpc	r19, r20
    1048:	51 f0       	breq	.+20     	; 0x105e <terminalCheck2+0x220>
    104a:	fc 01       	movw	r30, r24
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e1 56       	subi	r30, 0x61	; 97
    1052:	fd 4f       	sbci	r31, 0xFD	; 253
    1054:	40 81       	ld	r20, Z
    1056:	51 81       	ldd	r21, Z+1	; 0x01
    1058:	24 17       	cp	r18, r20
    105a:	35 07       	cpc	r19, r21
    105c:	51 f4       	brne	.+20     	; 0x1072 <terminalCheck2+0x234>
		total--;
    105e:	20 91 01 02 	lds	r18, 0x0201
    1062:	30 91 02 02 	lds	r19, 0x0202
    1066:	21 50       	subi	r18, 0x01	; 1
    1068:	31 09       	sbc	r19, r1
    106a:	30 93 02 02 	sts	0x0202, r19
    106e:	20 93 01 02 	sts	0x0201, r18
	visited[ct] = 1;
    1072:	fc 01       	movw	r30, r24
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ea 59       	subi	r30, 0x9A	; 154
    107a:	fd 4f       	sbci	r31, 0xFD	; 253
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	80 83       	st	Z, r24
	visitedCount++;
    1084:	80 91 54 02 	lds	r24, 0x0254
    1088:	90 91 55 02 	lds	r25, 0x0255
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	90 93 55 02 	sts	0x0255, r25
    1092:	80 93 54 02 	sts	0x0254, r24
	lcd_print(2,15,dir,1);
    1096:	40 91 50 02 	lds	r20, 0x0250
    109a:	50 91 51 02 	lds	r21, 0x0251
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	6f e0       	ldi	r22, 0x0F	; 15
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	0c d9       	rcall	.-3560   	; 0x2c0 <lcd_print>
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	2c e2       	ldi	r18, 0x2C	; 44
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	90 40       	sbci	r25, 0x00	; 0
    10b2:	20 40       	sbci	r18, 0x00	; 0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <terminalCheck2+0x270>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <terminalCheck2+0x27a>
    10b8:	00 00       	nop
	_delay_ms(1000);
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <pick>:

void pick(int side)
{	
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
	lower(side);//lower
    10c6:	bd dc       	rcall	.-1670   	; 0xa42 <lower>
	open(side);
    10c8:	8c 2f       	mov	r24, r28
    10ca:	32 dd       	rcall	.-1436   	; 0xb30 <open>
	close(side);
    10cc:	8c 2f       	mov	r24, r28
    10ce:	68 dd       	rcall	.-1328   	; 0xba0 <close>
	elevate();//mid
    10d0:	f4 dc       	rcall	.-1560   	; 0xaba <elevate>
	armCount--;
    10d2:	80 91 03 02 	lds	r24, 0x0203
    10d6:	90 91 04 02 	lds	r25, 0x0204
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	90 93 04 02 	sts	0x0204, r25
    10e0:	80 93 03 02 	sts	0x0203, r24
	if (side == 0)
    10e4:	cd 2b       	or	r28, r29
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <pick+0x30>
		lcd("pickRight");
    10e8:	8f e0       	ldi	r24, 0x0F	; 15
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	9a dd       	rcall	.-1228   	; 0xc22 <lcd>
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <pick+0x36>
	else
		lcd("pickLeft");
    10f0:	89 e1       	ldi	r24, 0x19	; 25
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	96 dd       	rcall	.-1236   	; 0xc22 <lcd>
    10f6:	2f ef       	ldi	r18, 0xFF	; 255
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9c e2       	ldi	r25, 0x2C	; 44
    10fc:	21 50       	subi	r18, 0x01	; 1
    10fe:	80 40       	sbci	r24, 0x00	; 0
    1100:	90 40       	sbci	r25, 0x00	; 0
    1102:	e1 f7       	brne	.-8      	; 0x10fc <pick+0x3c>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <pick+0x46>
    1106:	00 00       	nop
	_delay_ms(1000);
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <drop>:
			}
		}
}

void drop(int side)
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ec 01       	movw	r28, r24
	lower(side);//lower
    1114:	96 dc       	rcall	.-1748   	; 0xa42 <lower>
	open(side);
    1116:	8c 2f       	mov	r24, r28
    1118:	0b dd       	rcall	.-1514   	; 0xb30 <open>
	elevate();//mid
    111a:	cf dc       	rcall	.-1634   	; 0xaba <elevate>
	
	armCount++;
    111c:	80 91 03 02 	lds	r24, 0x0203
    1120:	90 91 04 02 	lds	r25, 0x0204
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	90 93 04 02 	sts	0x0204, r25
    112a:	80 93 03 02 	sts	0x0203, r24
	if(side==0)
    112e:	cd 2b       	or	r28, r29
    1130:	21 f4       	brne	.+8      	; 0x113a <drop+0x2c>
	lcd("dropRight");
    1132:	82 e2       	ldi	r24, 0x22	; 34
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	75 dd       	rcall	.-1302   	; 0xc22 <lcd>
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <drop+0x32>
	else
	lcd("dropLeft");
    113a:	8c e2       	ldi	r24, 0x2C	; 44
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	71 dd       	rcall	.-1310   	; 0xc22 <lcd>
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <predict>:
	adj = adjCount(ct);
}

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
    1146:	80 91 8d 02 	lds	r24, 0x028D
    114a:	90 91 8e 02 	lds	r25, 0x028E
    114e:	20 91 9f 02 	lds	r18, 0x029F
    1152:	30 91 a0 02 	lds	r19, 0x02A0
    1156:	82 17       	cp	r24, r18
    1158:	93 07       	cpc	r25, r19
    115a:	09 f0       	breq	.+2      	; 0x115e <predict+0x18>
    115c:	5f c0       	rjmp	.+190    	; 0x121c <predict+0xd6>
    115e:	20 91 8f 02 	lds	r18, 0x028F
    1162:	30 91 90 02 	lds	r19, 0x0290
    1166:	82 17       	cp	r24, r18
    1168:	93 07       	cpc	r25, r19
    116a:	09 f0       	breq	.+2      	; 0x116e <predict+0x28>
    116c:	57 c0       	rjmp	.+174    	; 0x121c <predict+0xd6>
    116e:	80 91 91 02 	lds	r24, 0x0291
    1172:	90 91 92 02 	lds	r25, 0x0292
    1176:	20 91 a1 02 	lds	r18, 0x02A1
    117a:	30 91 a2 02 	lds	r19, 0x02A2
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	09 f0       	breq	.+2      	; 0x1186 <predict+0x40>
    1184:	4b c0       	rjmp	.+150    	; 0x121c <predict+0xd6>
    1186:	20 91 93 02 	lds	r18, 0x0293
    118a:	30 91 94 02 	lds	r19, 0x0294
    118e:	82 17       	cp	r24, r18
    1190:	93 07       	cpc	r25, r19
    1192:	09 f0       	breq	.+2      	; 0x1196 <predict+0x50>
    1194:	43 c0       	rjmp	.+134    	; 0x121c <predict+0xd6>
    1196:	80 91 89 02 	lds	r24, 0x0289
    119a:	90 91 8a 02 	lds	r25, 0x028A
    119e:	fc 01       	movw	r30, r24
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	e3 57       	subi	r30, 0x73	; 115
    11aa:	fd 4f       	sbci	r31, 0xFD	; 253
    11ac:	20 81       	ld	r18, Z
    11ae:	31 81       	ldd	r19, Z+1	; 0x01
    11b0:	fc 01       	movw	r30, r24
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	e1 56       	subi	r30, 0x61	; 97
    11b8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ba:	40 81       	ld	r20, Z
    11bc:	51 81       	ldd	r21, Z+1	; 0x01
    11be:	24 17       	cp	r18, r20
    11c0:	35 07       	cpc	r19, r21
    11c2:	61 f5       	brne	.+88     	; 0x121c <predict+0xd6>
    11c4:	fc 01       	movw	r30, r24
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	e3 57       	subi	r30, 0x73	; 115
    11d0:	fd 4f       	sbci	r31, 0xFD	; 253
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	01 f5       	brne	.+64     	; 0x121c <predict+0xd6>
    11dc:	80 91 85 02 	lds	r24, 0x0285
    11e0:	90 91 86 02 	lds	r25, 0x0286
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	d1 f4       	brne	.+52     	; 0x121c <predict+0xd6>
    11e8:	80 91 87 02 	lds	r24, 0x0287
    11ec:	90 91 88 02 	lds	r25, 0x0288
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	a1 f4       	brne	.+40     	; 0x121c <predict+0xd6>
    11f4:	80 91 b3 02 	lds	r24, 0x02B3
    11f8:	90 91 b4 02 	lds	r25, 0x02B4
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	71 f4       	brne	.+28     	; 0x121c <predict+0xd6>
    1200:	80 91 b5 02 	lds	r24, 0x02B5
    1204:	90 91 b6 02 	lds	r25, 0x02B6
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	41 f4       	brne	.+16     	; 0x121c <predict+0xd6>
		sorted = total;
    120c:	80 91 01 02 	lds	r24, 0x0201
    1210:	90 91 02 02 	lds	r25, 0x0202
    1214:	90 93 59 02 	sts	0x0259, r25
    1218:	80 93 58 02 	sts	0x0258, r24
    121c:	08 95       	ret

0000121e <__init__>:
}


void __init__()
{
	init_devices();
    121e:	f8 db       	rcall	.-2064   	; 0xa10 <init_devices>
	lcd_set_4bit();
    1220:	0e 94 94 00 	call	0x128	; 0x128 <lcd_set_4bit>
	lcd_init();
    1224:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	color_sensor_scaling();
    1228:	7a da       	rcall	.-2828   	; 0x71e <color_sensor_scaling>
	setIndicatorAndColor();
    122a:	ad dd       	rcall	.-1190   	; 0xd86 <setIndicatorAndColor>
	threshold=6000;
    122c:	80 e7       	ldi	r24, 0x70	; 112
    122e:	97 e1       	ldi	r25, 0x17	; 23
    1230:	90 93 6f 02 	sts	0x026F, r25
    1234:	80 93 6e 02 	sts	0x026E, r24
	servo_2(90);
    1238:	8a e5       	ldi	r24, 0x5A	; 90
    123a:	36 ca       	rjmp	.-2964   	; 0x6a8 <servo_2>
    123c:	08 95       	ret

0000123e <node>:
*************************************************
******************BLACK*LINE***********************
**************************************************/
void node()
{
	lcd_print(1,1,1,1);
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	3a d8       	rcall	.-3980   	; 0x2c0 <lcd_print>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    124c:	86 e9       	ldi	r24, 0x96	; 150
    124e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1252:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	forward_mm(60);
    1256:	8c e3       	ldi	r24, 0x3C	; 60
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	b6 cb       	rjmp	.-2196   	; 0x9c8 <forward_mm>
    125c:	08 95       	ret

0000125e <Delay>:
}
/*************************GULLA CODE**Blackline Forward***********/

char Delay(int tim)
{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	8c 01       	movw	r16, r24
	int i;
	for(i=0;i<tim && ADC_Conversion(2)<0x28;i++)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40));i++)
    1268:	18 16       	cp	r1, r24
    126a:	19 06       	cpc	r1, r25
    126c:	8c f4       	brge	.+34     	; 0x1290 <Delay+0x32>
    126e:	c0 e0       	ldi	r28, 0x00	; 0
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <Delay+0x28>
    1274:	86 e6       	ldi	r24, 0x66	; 102
    1276:	9e e0       	ldi	r25, 0x0E	; 14
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <Delay+0x1a>
    127c:	00 00       	nop
    127e:	21 96       	adiw	r28, 0x01	; 1
    1280:	c0 17       	cp	r28, r16
    1282:	d1 07       	cpc	r29, r17
    1284:	39 f0       	breq	.+14     	; 0x1294 <Delay+0x36>
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	a0 d9       	rcall	.-3264   	; 0x5ca <ADC_Conversion>
    128a:	88 32       	cpi	r24, 0x28	; 40
    128c:	98 f3       	brcs	.-26     	; 0x1274 <Delay+0x16>
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <Delay+0x36>
    1290:	c0 e0       	ldi	r28, 0x00	; 0
    1292:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//set_color();
		_delay_ms(1);
	}
	stop();
    1294:	47 d9       	rcall	.-3442   	; 0x524 <stop>
	if(i<tim)
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	c0 17       	cp	r28, r16
    129a:	d1 07       	cpc	r29, r17
    129c:	0c f0       	brlt	.+2      	; 0x12a0 <Delay+0x42>
    129e:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else return 0;
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <semiCorrect>:

void semiCorrect()
{
	
	//lcd_print(1,2,1,1);
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
    12aa:	80 91 4c 02 	lds	r24, 0x024C
    12ae:	89 32       	cpi	r24, 0x29	; 41
    12b0:	50 f0       	brcs	.+20     	; 0x12c6 <semiCorrect+0x1c>
    12b2:	90 91 4d 02 	lds	r25, 0x024D
    12b6:	99 32       	cpi	r25, 0x29	; 41
    12b8:	20 f4       	brcc	.+8      	; 0x12c2 <semiCorrect+0x18>
    12ba:	90 91 4b 02 	lds	r25, 0x024B
    12be:	99 32       	cpi	r25, 0x29	; 41
    12c0:	10 f0       	brcs	.+4      	; 0x12c6 <semiCorrect+0x1c>
	{
		node();
    12c2:	bd cf       	rjmp	.-134    	; 0x123e <node>
		return;
    12c4:	08 95       	ret
	}
	if(Center_white_line<40)
    12c6:	88 32       	cpi	r24, 0x28	; 40
    12c8:	d8 f4       	brcc	.+54     	; 0x1300 <semiCorrect+0x56>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
    12ca:	80 91 4d 02 	lds	r24, 0x024D
    12ce:	89 32       	cpi	r24, 0x29	; 41
    12d0:	58 f0       	brcs	.+22     	; 0x12e8 <semiCorrect+0x3e>
    12d2:	90 91 4b 02 	lds	r25, 0x024B
    12d6:	98 32       	cpi	r25, 0x28	; 40
    12d8:	38 f4       	brcc	.+14     	; 0x12e8 <semiCorrect+0x3e>
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,1,1);
				left();
    12da:	1e d9       	rcall	.-3524   	; 0x518 <left>
				set_color();
    12dc:	a5 db       	rcall	.-2230   	; 0xa28 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
    12de:	80 91 4c 02 	lds	r24, 0x024C
    12e2:	88 32       	cpi	r24, 0x28	; 40
    12e4:	d0 f3       	brcs	.-12     	; 0x12da <semiCorrect+0x30>
    12e6:	08 95       	ret
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
    12e8:	90 91 4b 02 	lds	r25, 0x024B
    12ec:	99 32       	cpi	r25, 0x29	; 41
    12ee:	40 f0       	brcs	.+16     	; 0x1300 <semiCorrect+0x56>
    12f0:	88 32       	cpi	r24, 0x28	; 40
    12f2:	30 f4       	brcc	.+12     	; 0x1300 <semiCorrect+0x56>
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,2,1);
				right();
    12f4:	14 d9       	rcall	.-3544   	; 0x51e <right>
				set_color();
    12f6:	98 db       	rcall	.-2256   	; 0xa28 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
    12f8:	80 91 4c 02 	lds	r24, 0x024C
    12fc:	88 32       	cpi	r24, 0x28	; 40
    12fe:	d0 f3       	brcs	.-12     	; 0x12f4 <semiCorrect+0x4a>
    1300:	08 95       	ret

00001302 <correct>:
	}
	//lcd_print(1,2,0,1);
	
}
void correct()
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
	unsigned int d=2;
	unsigned int i=50;
	Degrees=5;
    1306:	85 e0       	ldi	r24, 0x05	; 5
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 75 02 	sts	0x0275, r25
    130e:	80 93 74 02 	sts	0x0274, r24
	stop();
    1312:	08 d9       	rcall	.-3568   	; 0x524 <stop>
			i+=50;
		}
	}*/
	//else
	
		lf=1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 93 4a 02 	sts	0x024A, r24
	
}
void correct()
{
	unsigned int d=2;
	unsigned int i=50;
    131a:	c2 e3       	ldi	r28, 0x32	; 50
    131c:	d0 e0       	ldi	r29, 0x00	; 0
	//else
	
		lf=1;
		while(1)
		{
			left();
    131e:	fc d8       	rcall	.-3592   	; 0x518 <left>
			if(Delay(i))
    1320:	ce 01       	movw	r24, r28
    1322:	9d df       	rcall	.-198    	; 0x125e <Delay>
    1324:	81 11       	cpse	r24, r1
    1326:	26 c0       	rjmp	.+76     	; 0x1374 <correct+0x72>
				return;
			stop();
    1328:	fd d8       	rcall	.-3590   	; 0x524 <stop>
			lcd_print(1,1,1,1);
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
			//set_color();
			semiCorrect();
    133a:	b7 df       	rcall	.-146    	; 0x12aa <semiCorrect>
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	45 d9       	rcall	.-3446   	; 0x5ca <ADC_Conversion>
    1340:	89 32       	cpi	r24, 0x29	; 41
    1342:	b8 f4       	brcc	.+46     	; 0x1372 <correct+0x70>
				break;
			i+=50;
			right();
    1344:	ec d8       	rcall	.-3624   	; 0x51e <right>
			if(Delay(i))
    1346:	ce 01       	movw	r24, r28
    1348:	c2 96       	adiw	r24, 0x32	; 50
    134a:	89 df       	rcall	.-238    	; 0x125e <Delay>
    134c:	81 11       	cpse	r24, r1
    134e:	12 c0       	rjmp	.+36     	; 0x1374 <correct+0x72>
				return;
			stop();
    1350:	e9 d8       	rcall	.-3630   	; 0x524 <stop>
			lcd_print(1,1,2,1);
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	42 e0       	ldi	r20, 0x02	; 2
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
			semiCorrect();
    1362:	a3 df       	rcall	.-186    	; 0x12aa <semiCorrect>
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	31 d9       	rcall	.-3486   	; 0x5ca <ADC_Conversion>
    1368:	89 32       	cpi	r24, 0x29	; 41
    136a:	18 f4       	brcc	.+6      	; 0x1372 <correct+0x70>
				break;
			//d*=2;
			//set_color();
			//i+=2;
			i+=50;
    136c:	cc 59       	subi	r28, 0x9C	; 156
    136e:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
    1370:	d6 cf       	rjmp	.-84     	; 0x131e <correct+0x1c>
	//lcd("-");
	stop();
    1372:	d8 d8       	rcall	.-3664   	; 0x524 <stop>
	return;
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <noNatak>:
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    137a:	88 ec       	ldi	r24, 0xC8	; 200
    137c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1380:	80 93 2a 01 	sts	0x012A, r24
	int flag=0;
	//buzzer_on();
	//lcd_print(2,1,7,1);
	//lcd("no");
	velocity(correct_v,correct_v);
	if(Center_white_line<40)
    1384:	80 91 4c 02 	lds	r24, 0x024C
    1388:	88 32       	cpi	r24, 0x28	; 40
    138a:	80 f5       	brcc	.+96     	; 0x13ec <noNatak+0x72>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
    138c:	80 91 4d 02 	lds	r24, 0x024D
    1390:	89 32       	cpi	r24, 0x29	; 41
    1392:	a0 f0       	brcs	.+40     	; 0x13bc <noNatak+0x42>
    1394:	90 91 4b 02 	lds	r25, 0x024B
    1398:	98 32       	cpi	r25, 0x28	; 40
    139a:	80 f4       	brcc	.+32     	; 0x13bc <noNatak+0x42>
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <noNatak+0x28>
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
    139e:	bc d8       	rcall	.-3720   	; 0x518 <left>
				set_color();
    13a0:	43 db       	rcall	.-2426   	; 0xa28 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
    13a2:	80 91 4c 02 	lds	r24, 0x024C
    13a6:	89 32       	cpi	r24, 0x29	; 41
    13a8:	d0 f3       	brcs	.-12     	; 0x139e <noNatak+0x24>
    13aa:	80 91 4d 02 	lds	r24, 0x024D
    13ae:	88 32       	cpi	r24, 0x28	; 40
    13b0:	b0 f7       	brcc	.-20     	; 0x139e <noNatak+0x24>
    13b2:	80 91 4b 02 	lds	r24, 0x024B
    13b6:	88 32       	cpi	r24, 0x28	; 40
    13b8:	90 f7       	brcc	.-28     	; 0x139e <noNatak+0x24>
    13ba:	2b c0       	rjmp	.+86     	; 0x1412 <noNatak+0x98>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
    13bc:	90 91 4b 02 	lds	r25, 0x024B
    13c0:	99 32       	cpi	r25, 0x29	; 41
    13c2:	90 f0       	brcs	.+36     	; 0x13e8 <noNatak+0x6e>
    13c4:	88 32       	cpi	r24, 0x28	; 40
    13c6:	80 f4       	brcc	.+32     	; 0x13e8 <noNatak+0x6e>
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <noNatak+0x54>
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
    13ca:	a9 d8       	rcall	.-3758   	; 0x51e <right>
				set_color();
    13cc:	2d db       	rcall	.-2470   	; 0xa28 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
    13ce:	80 91 4c 02 	lds	r24, 0x024C
    13d2:	89 32       	cpi	r24, 0x29	; 41
    13d4:	d0 f3       	brcs	.-12     	; 0x13ca <noNatak+0x50>
    13d6:	80 91 4d 02 	lds	r24, 0x024D
    13da:	88 32       	cpi	r24, 0x28	; 40
    13dc:	b0 f7       	brcc	.-20     	; 0x13ca <noNatak+0x50>
    13de:	80 91 4b 02 	lds	r24, 0x024B
    13e2:	88 32       	cpi	r24, 0x28	; 40
    13e4:	90 f7       	brcc	.-28     	; 0x13ca <noNatak+0x50>
    13e6:	15 c0       	rjmp	.+42     	; 0x1412 <noNatak+0x98>
			
		}
		else
		{
			flag=1;
			correct();
    13e8:	8c df       	rcall	.-232    	; 0x1302 <correct>
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <noNatak+0x98>
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
    13ec:	80 91 4d 02 	lds	r24, 0x024D
    13f0:	89 32       	cpi	r24, 0x29	; 41
    13f2:	30 f0       	brcs	.+12     	; 0x1400 <noNatak+0x86>
    13f4:	90 91 4b 02 	lds	r25, 0x024B
    13f8:	98 32       	cpi	r25, 0x28	; 40
    13fa:	10 f4       	brcc	.+4      	; 0x1400 <noNatak+0x86>
		{
			flag=1;
			node();
    13fc:	20 cf       	rjmp	.-448    	; 0x123e <node>
			return;
    13fe:	08 95       	ret
				soft_right_2();
				set_color();
			}
			lcd("-");*/
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
    1400:	88 32       	cpi	r24, 0x28	; 40
    1402:	30 f4       	brcc	.+12     	; 0x1410 <noNatak+0x96>
    1404:	80 91 4b 02 	lds	r24, 0x024B
    1408:	89 32       	cpi	r24, 0x29	; 41
    140a:	10 f0       	brcs	.+4      	; 0x1410 <noNatak+0x96>
		{
			flag=1;
			node();
    140c:	18 cf       	rjmp	.-464    	; 0x123e <node>
			return;
    140e:	08 95       	ret
			lcd("-");*/
		}
		else
		{
			flag=1;
			correct();
    1410:	78 df       	rcall	.-272    	; 0x1302 <correct>
		}
	}
	if(flag==0)	
		correct();
	stop();
    1412:	88 c8       	rjmp	.-3824   	; 0x524 <stop>
    1414:	08 95       	ret

00001416 <forwardJaa>:
	//lcd_print(2,1,6,1);
	//buzzer_off();
	return;
}
void forwardJaa()
{
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1420:	08 e2       	ldi	r16, 0x28	; 40
    1422:	11 e0       	ldi	r17, 0x01	; 1
    1424:	0f 2e       	mov	r0, r31
    1426:	f0 ef       	ldi	r31, 0xF0	; 240
    1428:	ff 2e       	mov	r15, r31
    142a:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    142c:	ca e2       	ldi	r28, 0x2A	; 42
    142e:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned int vi=0;
	do
	{
		forward();
    1430:	6d d8       	rcall	.-3878   	; 0x50c <forward>
		//_delay_ms(200);
		set_color();
    1432:	fa da       	rcall	.-2572   	; 0xa28 <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
    1434:	80 91 4c 02 	lds	r24, 0x024C
    1438:	89 32       	cpi	r24, 0x29	; 41
    143a:	50 f0       	brcs	.+20     	; 0x1450 <forwardJaa+0x3a>
    143c:	80 91 4d 02 	lds	r24, 0x024D
    1440:	89 32       	cpi	r24, 0x29	; 41
    1442:	20 f4       	brcc	.+8      	; 0x144c <forwardJaa+0x36>
    1444:	80 91 4b 02 	lds	r24, 0x024B
    1448:	89 32       	cpi	r24, 0x29	; 41
    144a:	10 f0       	brcs	.+4      	; 0x1450 <forwardJaa+0x3a>
		{
			node();
    144c:	f8 de       	rcall	.-528    	; 0x123e <node>
			return;
    144e:	11 c0       	rjmp	.+34     	; 0x1472 <forwardJaa+0x5c>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1450:	f8 01       	movw	r30, r16
    1452:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    1454:	f8 82       	st	Y, r15
		}
		velocity(240,240);
		//velocity(v+vi,v+vi);
		//i+=20;
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
    1456:	80 91 4c 02 	lds	r24, 0x024C
    145a:	89 32       	cpi	r24, 0x29	; 41
    145c:	40 f0       	brcs	.+16     	; 0x146e <forwardJaa+0x58>
    145e:	80 91 4d 02 	lds	r24, 0x024D
    1462:	88 32       	cpi	r24, 0x28	; 40
    1464:	20 f4       	brcc	.+8      	; 0x146e <forwardJaa+0x58>
    1466:	80 91 4b 02 	lds	r24, 0x024B
    146a:	88 32       	cpi	r24, 0x28	; 40
    146c:	08 f3       	brcs	.-62     	; 0x1430 <forwardJaa+0x1a>
	
	noNatak();
    146e:	85 df       	rcall	.-246    	; 0x137a <noNatak>
	forwardJaa();
    1470:	d2 df       	rcall	.-92     	; 0x1416 <forwardJaa>
	return;
}
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	08 95       	ret

0000147e <front>:
	//buzzer();
	_delay_ms(1000);
}
void front()
{
	forwardJaa();
    147e:	cb df       	rcall	.-106    	; 0x1416 <forwardJaa>
	cost++;
    1480:	80 91 78 02 	lds	r24, 0x0278
    1484:	90 91 79 02 	lds	r25, 0x0279
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	90 93 79 02 	sts	0x0279, r25
    148e:	80 93 78 02 	sts	0x0278, r24
    1492:	08 95       	ret

00001494 <turnRight>:
	return;
}
/*************************END GULLA CODE*************/
void turnRight()	//turns the robo right
{
	if ((dir == 3 && (ot == 0 || ot == 1)) || (dir == 1 && (ot == 2 || ot == 3)))
    1494:	80 91 50 02 	lds	r24, 0x0250
    1498:	90 91 51 02 	lds	r25, 0x0251
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <turnRight+0x1c>
    14a2:	80 91 52 02 	lds	r24, 0x0252
    14a6:	90 91 53 02 	lds	r25, 0x0253
    14aa:	02 97       	sbiw	r24, 0x02	; 2
    14ac:	98 f4       	brcc	.+38     	; 0x14d4 <turnRight+0x40>
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <turnRight+0x2e>
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	81 f4       	brne	.+32     	; 0x14d4 <turnRight+0x40>
    14b4:	80 91 52 02 	lds	r24, 0x0252
    14b8:	90 91 53 02 	lds	r25, 0x0253
    14bc:	02 97       	sbiw	r24, 0x02	; 2
    14be:	02 97       	sbiw	r24, 0x02	; 2
    14c0:	48 f4       	brcc	.+18     	; 0x14d4 <turnRight+0x40>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14c2:	86 e9       	ldi	r24, 0x96	; 150
    14c4:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14c8:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		right_degrees(90);
    14cc:	8a e5       	ldi	r24, 0x5A	; 90
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	96 da       	rcall	.-2772   	; 0x9fe <right_degrees>
    14d2:	17 c0       	rjmp	.+46     	; 0x1502 <turnRight+0x6e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14d4:	86 e9       	ldi	r24, 0x96	; 150
    14d6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14da:	80 93 2a 01 	sts	0x012A, r24
	}
	else
	{
		velocity(turn_v, turn_v);
		right_degrees(30);
    14de:	8e e1       	ldi	r24, 0x1E	; 30
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	8d da       	rcall	.-2790   	; 0x9fe <right_degrees>
		
		while (ADC_Conversion(2)<50)
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <turnRight+0x54>
			right();
    14e6:	1b d8       	rcall	.-4042   	; 0x51e <right>
	else
	{
		velocity(turn_v, turn_v);
		right_degrees(30);
		
		while (ADC_Conversion(2)<50)
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	6f d8       	rcall	.-3874   	; 0x5ca <ADC_Conversion>
    14ec:	82 33       	cpi	r24, 0x32	; 50
    14ee:	d8 f3       	brcs	.-10     	; 0x14e6 <turnRight+0x52>
    14f0:	29 e9       	ldi	r18, 0x99	; 153
    14f2:	89 e9       	ldi	r24, 0x99	; 153
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	21 50       	subi	r18, 0x01	; 1
    14f8:	80 40       	sbci	r24, 0x00	; 0
    14fa:	90 40       	sbci	r25, 0x00	; 0
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <turnRight+0x62>
    14fe:	00 00       	nop
			right();
		_delay_ms(80);
		stop();	
    1500:	11 d8       	rcall	.-4062   	; 0x524 <stop>
	}
	lcd("Right turn");
    1502:	85 e3       	ldi	r24, 0x35	; 53
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	8d db       	rcall	.-2278   	; 0xc22 <lcd>
	//_delay_ms(2000);
	dir = (dir + 1) % 4;
    1508:	80 91 50 02 	lds	r24, 0x0250
    150c:	90 91 51 02 	lds	r25, 0x0251
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	83 70       	andi	r24, 0x03	; 3
    1514:	90 78       	andi	r25, 0x80	; 128
    1516:	99 23       	and	r25, r25
    1518:	24 f4       	brge	.+8      	; 0x1522 <turnRight+0x8e>
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	8c 6f       	ori	r24, 0xFC	; 252
    151e:	9f 6f       	ori	r25, 0xFF	; 255
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	90 93 51 02 	sts	0x0251, r25
    1526:	80 93 50 02 	sts	0x0250, r24
	//printf("Turn Right \n");
	angle += 90;
    152a:	80 91 9d 02 	lds	r24, 0x029D
    152e:	90 91 9e 02 	lds	r25, 0x029E
    1532:	86 5a       	subi	r24, 0xA6	; 166
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	90 93 9e 02 	sts	0x029E, r25
    153a:	80 93 9d 02 	sts	0x029D, r24
	buzzer();
    153e:	65 cb       	rjmp	.-2358   	; 0xc0a <buzzer>
    1540:	08 95       	ret

00001542 <turnLeft>:
}
void turnLeft()	//turns the robo left
{
	
	if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 3)))
    1542:	80 91 50 02 	lds	r24, 0x0250
    1546:	90 91 51 02 	lds	r25, 0x0251
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 05       	cpc	r25, r1
    154e:	39 f4       	brne	.+14     	; 0x155e <turnLeft+0x1c>
    1550:	80 91 52 02 	lds	r24, 0x0252
    1554:	90 91 53 02 	lds	r25, 0x0253
    1558:	02 97       	sbiw	r24, 0x02	; 2
    155a:	98 f4       	brcc	.+38     	; 0x1582 <turnLeft+0x40>
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <turnLeft+0x2e>
    155e:	03 97       	sbiw	r24, 0x03	; 3
    1560:	81 f4       	brne	.+32     	; 0x1582 <turnLeft+0x40>
    1562:	80 91 52 02 	lds	r24, 0x0252
    1566:	90 91 53 02 	lds	r25, 0x0253
    156a:	02 97       	sbiw	r24, 0x02	; 2
    156c:	02 97       	sbiw	r24, 0x02	; 2
    156e:	48 f4       	brcc	.+18     	; 0x1582 <turnLeft+0x40>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1570:	86 e9       	ldi	r24, 0x96	; 150
    1572:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1576:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(90);
    157a:	8a e5       	ldi	r24, 0x5A	; 90
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	36 da       	rcall	.-2964   	; 0x9ec <left_degrees>
    1580:	1a c0       	rjmp	.+52     	; 0x15b6 <turnLeft+0x74>
	}
	else
	{
		left_degrees(30);
    1582:	8e e1       	ldi	r24, 0x1E	; 30
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	32 da       	rcall	.-2972   	; 0x9ec <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1588:	86 e9       	ldi	r24, 0x96	; 150
    158a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    158e:	80 93 2a 01 	sts	0x012A, r24
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <turnLeft+0x56>
		velocity(turn_v,turn_v);
		while (ADC_Conversion(2)<50)
			left();
    1594:	0e 94 8c 02 	call	0x518	; 0x518 <left>
	}
	else
	{
		left_degrees(30);
		velocity(turn_v,turn_v);
		while (ADC_Conversion(2)<50)
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	17 d8       	rcall	.-4050   	; 0x5ca <ADC_Conversion>
    159c:	82 33       	cpi	r24, 0x32	; 50
    159e:	d0 f3       	brcs	.-12     	; 0x1594 <turnLeft+0x52>
    15a0:	2f ef       	ldi	r18, 0xFF	; 255
    15a2:	8f e7       	ldi	r24, 0x7F	; 127
    15a4:	94 e0       	ldi	r25, 0x04	; 4
    15a6:	21 50       	subi	r18, 0x01	; 1
    15a8:	80 40       	sbci	r24, 0x00	; 0
    15aa:	90 40       	sbci	r25, 0x00	; 0
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <turnLeft+0x64>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <turnLeft+0x6e>
    15b0:	00 00       	nop
			left();
		_delay_ms(100);
		stop();
    15b2:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	}
	lcd("Left turn");
    15b6:	80 e4       	ldi	r24, 0x40	; 64
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	33 db       	rcall	.-2458   	; 0xc22 <lcd>
	//_delay_ms(2000);
	dir = (dir + 3) % 4;
    15bc:	80 91 50 02 	lds	r24, 0x0250
    15c0:	90 91 51 02 	lds	r25, 0x0251
    15c4:	03 96       	adiw	r24, 0x03	; 3
    15c6:	83 70       	andi	r24, 0x03	; 3
    15c8:	90 78       	andi	r25, 0x80	; 128
    15ca:	99 23       	and	r25, r25
    15cc:	24 f4       	brge	.+8      	; 0x15d6 <turnLeft+0x94>
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	8c 6f       	ori	r24, 0xFC	; 252
    15d2:	9f 6f       	ori	r25, 0xFF	; 255
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	90 93 51 02 	sts	0x0251, r25
    15da:	80 93 50 02 	sts	0x0250, r24
	//printf("Turn Left\n");
	angle += 90;
    15de:	80 91 9d 02 	lds	r24, 0x029D
    15e2:	90 91 9e 02 	lds	r25, 0x029E
    15e6:	86 5a       	subi	r24, 0xA6	; 166
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	90 93 9e 02 	sts	0x029E, r25
    15ee:	80 93 9d 02 	sts	0x029D, r24
	buzzer();
    15f2:	0b cb       	rjmp	.-2538   	; 0xc0a <buzzer>
    15f4:	08 95       	ret

000015f6 <turn>:
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
	}
	*/
	if (dir == 0 && (ot == 2 || ot == 3))
    15f6:	80 91 50 02 	lds	r24, 0x0250
    15fa:	90 91 51 02 	lds	r25, 0x0251
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	81 f4       	brne	.+32     	; 0x1622 <turn+0x2c>
    1602:	80 91 52 02 	lds	r24, 0x0252
    1606:	90 91 53 02 	lds	r25, 0x0253
    160a:	02 97       	sbiw	r24, 0x02	; 2
    160c:	02 97       	sbiw	r24, 0x02	; 2
    160e:	d0 f4       	brcc	.+52     	; 0x1644 <turn+0x4e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1610:	86 e9       	ldi	r24, 0x96	; 150
    1612:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1616:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
    161a:	84 eb       	ldi	r24, 0xB4	; 180
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	e6 d9       	rcall	.-3124   	; 0x9ec <left_degrees>
    1620:	23 c0       	rjmp	.+70     	; 0x1668 <turn+0x72>
	}
	else if (dir == 2 && (ot == 0 || ot == 1))
    1622:	02 97       	sbiw	r24, 0x02	; 2
    1624:	79 f4       	brne	.+30     	; 0x1644 <turn+0x4e>
    1626:	80 91 52 02 	lds	r24, 0x0252
    162a:	90 91 53 02 	lds	r25, 0x0253
    162e:	02 97       	sbiw	r24, 0x02	; 2
    1630:	48 f4       	brcc	.+18     	; 0x1644 <turn+0x4e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1632:	86 e9       	ldi	r24, 0x96	; 150
    1634:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1638:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
    163c:	84 eb       	ldi	r24, 0xB4	; 180
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	d5 d9       	rcall	.-3158   	; 0x9ec <left_degrees>
    1642:	12 c0       	rjmp	.+36     	; 0x1668 <turn+0x72>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1644:	86 e9       	ldi	r24, 0x96	; 150
    1646:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    164a:	80 93 2a 01 	sts	0x012A, r24
	}
	else
	{
		velocity(turn_v, turn_v);
		left_degrees(150);
    164e:	86 e9       	ldi	r24, 0x96	; 150
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	cc d9       	rcall	.-3176   	; 0x9ec <left_degrees>
		while (ADC_Conversion(2)<50)
    1654:	02 c0       	rjmp	.+4      	; 0x165a <turn+0x64>
			left();
    1656:	0e 94 8c 02 	call	0x518	; 0x518 <left>
	}
	else
	{
		velocity(turn_v, turn_v);
		left_degrees(150);
		while (ADC_Conversion(2)<50)
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    1660:	82 33       	cpi	r24, 0x32	; 50
    1662:	c8 f3       	brcs	.-14     	; 0x1656 <turn+0x60>
			left();
		stop();
    1664:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	}
	lcd("turn");
    1668:	85 e4       	ldi	r24, 0x45	; 69
    166a:	92 e0       	ldi	r25, 0x02	; 2
    166c:	da da       	rcall	.-2636   	; 0xc22 <lcd>
	//_delay_ms(2000);
	dir = (dir + 2) % 4;
    166e:	80 91 50 02 	lds	r24, 0x0250
    1672:	90 91 51 02 	lds	r25, 0x0251
    1676:	02 96       	adiw	r24, 0x02	; 2
    1678:	83 70       	andi	r24, 0x03	; 3
    167a:	90 78       	andi	r25, 0x80	; 128
    167c:	99 23       	and	r25, r25
    167e:	24 f4       	brge	.+8      	; 0x1688 <turn+0x92>
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	8c 6f       	ori	r24, 0xFC	; 252
    1684:	9f 6f       	ori	r25, 0xFF	; 255
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	90 93 51 02 	sts	0x0251, r25
    168c:	80 93 50 02 	sts	0x0250, r24
	//printf("Turn\n");
	angle += 180;
    1690:	80 91 9d 02 	lds	r24, 0x029D
    1694:	90 91 9e 02 	lds	r25, 0x029E
    1698:	8c 54       	subi	r24, 0x4C	; 76
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	90 93 9e 02 	sts	0x029E, r25
    16a0:	80 93 9d 02 	sts	0x029D, r24
    16a4:	08 95       	ret

000016a6 <traverseToSort>:
	cost++;
	//printf("Front\n");
}

void traverseToSort(int a, int b)
{
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24

	if (flag == 1)
    16ac:	80 91 56 02 	lds	r24, 0x0256
    16b0:	90 91 57 02 	lds	r25, 0x0257
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <traverseToSort+0x1a>
		flag = 0;
    16b8:	10 92 57 02 	sts	0x0257, r1
    16bc:	10 92 56 02 	sts	0x0256, r1
	if (a == 4 || a == 5)
    16c0:	ce 01       	movw	r24, r28
    16c2:	04 97       	sbiw	r24, 0x04	; 4
    16c4:	02 97       	sbiw	r24, 0x02	; 2
    16c6:	88 f5       	brcc	.+98     	; 0x172a <traverseToSort+0x84>
	{
		if ((a == 4 && dir == 0) || (a == 5 && dir == 2))
    16c8:	c4 30       	cpi	r28, 0x04	; 4
    16ca:	d1 05       	cpc	r29, r1
    16cc:	39 f4       	brne	.+14     	; 0x16dc <traverseToSort+0x36>
    16ce:	80 91 50 02 	lds	r24, 0x0250
    16d2:	90 91 51 02 	lds	r25, 0x0251
    16d6:	89 2b       	or	r24, r25
    16d8:	51 f0       	breq	.+20     	; 0x16ee <traverseToSort+0x48>
    16da:	0b c0       	rjmp	.+22     	; 0x16f2 <traverseToSort+0x4c>
    16dc:	c5 30       	cpi	r28, 0x05	; 5
    16de:	d1 05       	cpc	r29, r1
    16e0:	41 f4       	brne	.+16     	; 0x16f2 <traverseToSort+0x4c>
    16e2:	80 91 50 02 	lds	r24, 0x0250
    16e6:	90 91 51 02 	lds	r25, 0x0251
    16ea:	02 97       	sbiw	r24, 0x02	; 2
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <traverseToSort+0x4c>
			turnRight();
    16ee:	d2 de       	rcall	.-604    	; 0x1494 <turnRight>
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <traverseToSort+0x4e>
		else turnLeft();
    16f2:	27 df       	rcall	.-434    	; 0x1542 <turnLeft>
		front();
    16f4:	c4 de       	rcall	.-632    	; 0x147e <front>
		front();
    16f6:	c3 de       	rcall	.-634    	; 0x147e <front>
		if (a == 4)
    16f8:	24 97       	sbiw	r28, 0x04	; 4
    16fa:	39 f4       	brne	.+14     	; 0x170a <traverseToSort+0x64>
			ot = 5;
    16fc:	85 e0       	ldi	r24, 0x05	; 5
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	90 93 53 02 	sts	0x0253, r25
    1704:	80 93 52 02 	sts	0x0252, r24
    1708:	06 c0       	rjmp	.+12     	; 0x1716 <traverseToSort+0x70>
		else ot = 4;
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	90 93 53 02 	sts	0x0253, r25
    1712:	80 93 52 02 	sts	0x0252, r24
		cost = cost + 2;
    1716:	80 91 78 02 	lds	r24, 0x0278
    171a:	90 91 79 02 	lds	r25, 0x0279
    171e:	02 96       	adiw	r24, 0x02	; 2
    1720:	90 93 79 02 	sts	0x0279, r25
    1724:	80 93 78 02 	sts	0x0278, r24
    1728:	45 c0       	rjmp	.+138    	; 0x17b4 <traverseToSort+0x10e>
	}
	else{
		if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 2)))
    172a:	80 91 50 02 	lds	r24, 0x0250
    172e:	90 91 51 02 	lds	r25, 0x0251
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	39 f4       	brne	.+14     	; 0x1746 <traverseToSort+0xa0>
    1738:	80 91 52 02 	lds	r24, 0x0252
    173c:	90 91 53 02 	lds	r25, 0x0253
    1740:	02 97       	sbiw	r24, 0x02	; 2
    1742:	78 f4       	brcc	.+30     	; 0x1762 <traverseToSort+0xbc>
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <traverseToSort+0xb2>
    1746:	03 97       	sbiw	r24, 0x03	; 3
    1748:	99 f4       	brne	.+38     	; 0x1770 <traverseToSort+0xca>
    174a:	80 91 52 02 	lds	r24, 0x0252
    174e:	90 91 53 02 	lds	r25, 0x0253
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	91 05       	cpc	r25, r1
    1756:	11 f4       	brne	.+4      	; 0x175c <traverseToSort+0xb6>
		{
			turnRight();
    1758:	9d de       	rcall	.-710    	; 0x1494 <turnRight>
		else ot = 4;
		cost = cost + 2;
	}
	else{
		if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 2)))
		{
    175a:	0a c0       	rjmp	.+20     	; 0x1770 <traverseToSort+0xca>
			turnRight();
		}
		else if ((dir == 3 && (ot == 0 || ot == 1)) || (dir == 1 && (ot == 2 || ot == 2)))
    175c:	02 97       	sbiw	r24, 0x02	; 2
    175e:	40 f4       	brcc	.+16     	; 0x1770 <traverseToSort+0xca>
    1760:	06 c0       	rjmp	.+12     	; 0x176e <traverseToSort+0xc8>
    1762:	80 91 52 02 	lds	r24, 0x0252
    1766:	90 91 53 02 	lds	r25, 0x0253
    176a:	02 97       	sbiw	r24, 0x02	; 2
    176c:	09 f4       	brne	.+2      	; 0x1770 <traverseToSort+0xca>
		{
			turnLeft();
    176e:	e9 de       	rcall	.-558    	; 0x1542 <turnLeft>
		}
		if ((a <= 1 && dir == 0) || (a >= 2 && dir == 2))
    1770:	22 97       	sbiw	r28, 0x02	; 2
    1772:	3c f4       	brge	.+14     	; 0x1782 <traverseToSort+0xdc>
    1774:	80 91 50 02 	lds	r24, 0x0250
    1778:	90 91 51 02 	lds	r25, 0x0251
    177c:	89 2b       	or	r24, r25
    177e:	39 f0       	breq	.+14     	; 0x178e <traverseToSort+0xe8>
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <traverseToSort+0xea>
    1782:	80 91 50 02 	lds	r24, 0x0250
    1786:	90 91 51 02 	lds	r25, 0x0251
    178a:	02 97       	sbiw	r24, 0x02	; 2
    178c:	09 f4       	brne	.+2      	; 0x1790 <traverseToSort+0xea>
			turn();
    178e:	33 df       	rcall	.-410    	; 0x15f6 <turn>
		front();
    1790:	76 de       	rcall	.-788    	; 0x147e <front>
		ot = ct % 2 + 4;
    1792:	80 91 89 02 	lds	r24, 0x0289
    1796:	90 91 8a 02 	lds	r25, 0x028A
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	90 78       	andi	r25, 0x80	; 128
    179e:	99 23       	and	r25, r25
    17a0:	24 f4       	brge	.+8      	; 0x17aa <traverseToSort+0x104>
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	8e 6f       	ori	r24, 0xFE	; 254
    17a6:	9f 6f       	ori	r25, 0xFF	; 255
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	04 96       	adiw	r24, 0x04	; 4
    17ac:	90 93 53 02 	sts	0x0253, r25
    17b0:	80 93 52 02 	sts	0x0252, r24
	}
}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <terminalCheck1>:
int adjCount(ct)
{
	return (ct + 2) % 4;
}
void terminalCheck1()
{
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
	//????
	lcd_wr_command(0x01);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_print(1,1,888,3);
    17c4:	23 e0       	ldi	r18, 0x03	; 3
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	48 e7       	ldi	r20, 0x78	; 120
    17ca:	53 e0       	ldi	r21, 0x03	; 3
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17d4:	86 e9       	ldi	r24, 0x96	; 150
    17d6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    17da:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	//forward_mm(60);
	flag = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	90 93 57 02 	sts	0x0257, r25
    17e6:	80 93 56 02 	sts	0x0256, r24
	if (ct != ot)
    17ea:	80 91 52 02 	lds	r24, 0x0252
    17ee:	90 91 53 02 	lds	r25, 0x0253
    17f2:	20 91 89 02 	lds	r18, 0x0289
    17f6:	30 91 8a 02 	lds	r19, 0x028A
    17fa:	28 17       	cp	r18, r24
    17fc:	39 07       	cpc	r19, r25
    17fe:	89 f1       	breq	.+98     	; 0x1862 <terminalCheck1+0xa8>
	{
		if (dir == 1 || dir == 3)
    1800:	20 91 50 02 	lds	r18, 0x0250
    1804:	30 91 51 02 	lds	r19, 0x0251
    1808:	2d 7f       	andi	r18, 0xFD	; 253
    180a:	21 30       	cpi	r18, 0x01	; 1
    180c:	31 05       	cpc	r19, r1
    180e:	41 f4       	brne	.+16     	; 0x1820 <terminalCheck1+0x66>
		{
			if (ot == 3 || ot == 0)
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	11 f0       	breq	.+4      	; 0x181a <terminalCheck1+0x60>
    1816:	89 2b       	or	r24, r25
    1818:	11 f4       	brne	.+4      	; 0x181e <terminalCheck1+0x64>
				turnRight();
    181a:	3c de       	rcall	.-904    	; 0x1494 <turnRight>
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <terminalCheck1+0x66>
			else turnLeft();
    181e:	91 de       	rcall	.-734    	; 0x1542 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1820:	80 91 89 02 	lds	r24, 0x0289
    1824:	90 91 8a 02 	lds	r25, 0x028A
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	38 f4       	brcc	.+14     	; 0x183c <terminalCheck1+0x82>
    182e:	20 91 50 02 	lds	r18, 0x0250
    1832:	30 91 51 02 	lds	r19, 0x0251
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	49 f0       	breq	.+18     	; 0x184e <terminalCheck1+0x94>
    183c:	02 97       	sbiw	r24, 0x02	; 2
    183e:	02 97       	sbiw	r24, 0x02	; 2
    1840:	38 f4       	brcc	.+14     	; 0x1850 <terminalCheck1+0x96>
    1842:	80 91 50 02 	lds	r24, 0x0250
    1846:	90 91 51 02 	lds	r25, 0x0251
    184a:	89 2b       	or	r24, r25
    184c:	09 f4       	brne	.+2      	; 0x1850 <terminalCheck1+0x96>
			turn();
    184e:	d3 de       	rcall	.-602    	; 0x15f6 <turn>
		front();
    1850:	16 de       	rcall	.-980    	; 0x147e <front>
		ot = ct;
    1852:	80 91 89 02 	lds	r24, 0x0289
    1856:	90 91 8a 02 	lds	r25, 0x028A
    185a:	90 93 53 02 	sts	0x0253, r25
    185e:	80 93 52 02 	sts	0x0252, r24
	}
	//????
	right_degrees(50);
    1862:	82 e3       	ldi	r24, 0x32	; 50
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	cb d8       	rcall	.-3690   	; 0x9fe <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1868:	86 e9       	ldi	r24, 0x96	; 150
    186a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    186e:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
    1872:	80 91 50 02 	lds	r24, 0x0250
    1876:	90 91 51 02 	lds	r25, 0x0251
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	83 70       	andi	r24, 0x03	; 3
    187e:	90 78       	andi	r25, 0x80	; 128
    1880:	99 23       	and	r25, r25
    1882:	24 f4       	brge	.+8      	; 0x188c <terminalCheck1+0xd2>
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	8c 6f       	ori	r24, 0xFC	; 252
    1888:	9f 6f       	ori	r25, 0xFF	; 255
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	90 93 51 02 	sts	0x0251, r25
    1890:	80 93 50 02 	sts	0x0250, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<40)
    1894:	02 c0       	rjmp	.+4      	; 0x189a <terminalCheck1+0xe0>
		right();
    1896:	0e 94 8f 02 	call	0x51e	; 0x51e <right>
	right_degrees(50);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<40)
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_Conversion>
    18a0:	88 32       	cpi	r24, 0x28	; 40
    18a2:	c8 f3       	brcs	.-14     	; 0x1896 <terminalCheck1+0xdc>
		right();
	//_delay_ms(140);
	stop();
    18a4:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    18a8:	c0 91 89 02 	lds	r28, 0x0289
    18ac:	d0 91 8a 02 	lds	r29, 0x028A
    18b0:	ce d9       	rcall	.-3172   	; 0xc4e <scan>
    18b2:	cc 0f       	add	r28, r28
    18b4:	dd 1f       	adc	r29, r29
    18b6:	cc 0f       	add	r28, r28
    18b8:	dd 1f       	adc	r29, r29
    18ba:	c3 57       	subi	r28, 0x73	; 115
    18bc:	dd 4f       	sbci	r29, 0xFD	; 253
    18be:	99 83       	std	Y+1, r25	; 0x01
    18c0:	88 83       	st	Y, r24
	if(term[ct][0]==-1)
    18c2:	e0 91 89 02 	lds	r30, 0x0289
    18c6:	f0 91 8a 02 	lds	r31, 0x028A
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	e3 57       	subi	r30, 0x73	; 115
    18d4:	fd 4f       	sbci	r31, 0xFD	; 253
    18d6:	40 81       	ld	r20, Z
    18d8:	51 81       	ldd	r21, Z+1	; 0x01
    18da:	4f 3f       	cpi	r20, 0xFF	; 255
    18dc:	2f ef       	ldi	r18, 0xFF	; 255
    18de:	52 07       	cpc	r21, r18
    18e0:	49 f4       	brne	.+18     	; 0x18f4 <terminalCheck1+0x13a>
		lcd_print(2,11,9, 1);
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	49 e0       	ldi	r20, 0x09	; 9
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	6b e0       	ldi	r22, 0x0B	; 11
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <terminalCheck1+0x146>
	else
		lcd_print(2,11, term[ct][0], 1);
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	6b e0       	ldi	r22, 0x0B	; 11
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    1900:	4f ef       	ldi	r20, 0xFF	; 255
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9c e2       	ldi	r25, 0x2C	; 44
    1906:	41 50       	subi	r20, 0x01	; 1
    1908:	80 40       	sbci	r24, 0x00	; 0
    190a:	90 40       	sbci	r25, 0x00	; 0
    190c:	e1 f7       	brne	.-8      	; 0x1906 <terminalCheck1+0x14c>
    190e:	00 c0       	rjmp	.+0      	; 0x1910 <terminalCheck1+0x156>
    1910:	00 00       	nop
	_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    1912:	20 91 89 02 	lds	r18, 0x0289
    1916:	30 91 8a 02 	lds	r19, 0x028A
    191a:	f9 01       	movw	r30, r18
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e3 57       	subi	r30, 0x73	; 115
    1926:	fd 4f       	sbci	r31, 0xFD	; 253
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	8f 3f       	cpi	r24, 0xFF	; 255
    192e:	4f ef       	ldi	r20, 0xFF	; 255
    1930:	94 07       	cpc	r25, r20
    1932:	51 f0       	breq	.+20     	; 0x1948 <terminalCheck1+0x18e>
    1934:	f9 01       	movw	r30, r18
    1936:	ee 0f       	add	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	e1 56       	subi	r30, 0x61	; 97
    193c:	fd 4f       	sbci	r31, 0xFD	; 253
    193e:	20 81       	ld	r18, Z
    1940:	31 81       	ldd	r19, Z+1	; 0x01
    1942:	82 17       	cp	r24, r18
    1944:	93 07       	cpc	r25, r19
    1946:	49 f4       	brne	.+18     	; 0x195a <terminalCheck1+0x1a0>
		total--;
    1948:	80 91 01 02 	lds	r24, 0x0201
    194c:	90 91 02 02 	lds	r25, 0x0202
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	90 93 02 02 	sts	0x0202, r25
    1956:	80 93 01 02 	sts	0x0201, r24
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <position>:
		lcd("pickLeft");
	_delay_ms(1000);
}

void position(int armNo, int side)
{
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	8c 01       	movw	r16, r24
    196a:	eb 01       	movw	r28, r22
	if (ct == ot)
    196c:	20 91 89 02 	lds	r18, 0x0289
    1970:	30 91 8a 02 	lds	r19, 0x028A
    1974:	40 91 52 02 	lds	r20, 0x0252
    1978:	50 91 53 02 	lds	r21, 0x0253
    197c:	24 17       	cp	r18, r20
    197e:	35 07       	cpc	r19, r21
    1980:	09 f0       	breq	.+2      	; 0x1984 <position+0x24>
    1982:	7d c0       	rjmp	.+250    	; 0x1a7e <position+0x11e>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    1984:	c9 01       	movw	r24, r18
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	30 f4       	brcc	.+12     	; 0x1998 <position+0x38>
    198c:	40 91 50 02 	lds	r20, 0x0250
    1990:	50 91 51 02 	lds	r21, 0x0251
    1994:	45 2b       	or	r20, r21
    1996:	61 f0       	breq	.+24     	; 0x19b0 <position+0x50>
    1998:	22 50       	subi	r18, 0x02	; 2
    199a:	31 09       	sbc	r19, r1
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	68 f4       	brcc	.+26     	; 0x19bc <position+0x5c>
    19a2:	40 91 50 02 	lds	r20, 0x0250
    19a6:	50 91 51 02 	lds	r21, 0x0251
    19aa:	42 30       	cpi	r20, 0x02	; 2
    19ac:	51 05       	cpc	r21, r1
    19ae:	31 f4       	brne	.+12     	; 0x19bc <position+0x5c>
		{
			if (armNo != side)
    19b0:	0c 17       	cp	r16, r28
    19b2:	1d 07       	cpc	r17, r29
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <position+0x58>
    19b6:	4c c0       	rjmp	.+152    	; 0x1a50 <position+0xf0>
			turn();
    19b8:	1e de       	rcall	.-964    	; 0x15f6 <turn>
    19ba:	4a c0       	rjmp	.+148    	; 0x1a50 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    19bc:	82 30       	cpi	r24, 0x02	; 2
    19be:	91 05       	cpc	r25, r1
    19c0:	38 f4       	brcc	.+14     	; 0x19d0 <position+0x70>
    19c2:	40 91 50 02 	lds	r20, 0x0250
    19c6:	50 91 51 02 	lds	r21, 0x0251
    19ca:	42 30       	cpi	r20, 0x02	; 2
    19cc:	51 05       	cpc	r21, r1
    19ce:	49 f0       	breq	.+18     	; 0x19e2 <position+0x82>
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	58 f4       	brcc	.+22     	; 0x19ec <position+0x8c>
    19d6:	40 91 50 02 	lds	r20, 0x0250
    19da:	50 91 51 02 	lds	r21, 0x0251
    19de:	45 2b       	or	r20, r21
    19e0:	29 f4       	brne	.+10     	; 0x19ec <position+0x8c>
		{
			if (armNo == side)
    19e2:	0c 17       	cp	r16, r28
    19e4:	1d 07       	cpc	r17, r29
    19e6:	a1 f5       	brne	.+104    	; 0x1a50 <position+0xf0>
			turn();
    19e8:	06 de       	rcall	.-1012   	; 0x15f6 <turn>
    19ea:	32 c0       	rjmp	.+100    	; 0x1a50 <position+0xf0>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	91 05       	cpc	r25, r1
    19f0:	38 f4       	brcc	.+14     	; 0x1a00 <position+0xa0>
    19f2:	40 91 50 02 	lds	r20, 0x0250
    19f6:	50 91 51 02 	lds	r21, 0x0251
    19fa:	41 30       	cpi	r20, 0x01	; 1
    19fc:	51 05       	cpc	r21, r1
    19fe:	51 f0       	breq	.+20     	; 0x1a14 <position+0xb4>
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	70 f4       	brcc	.+28     	; 0x1a22 <position+0xc2>
    1a06:	40 91 50 02 	lds	r20, 0x0250
    1a0a:	50 91 51 02 	lds	r21, 0x0251
    1a0e:	43 30       	cpi	r20, 0x03	; 3
    1a10:	51 05       	cpc	r21, r1
    1a12:	39 f4       	brne	.+14     	; 0x1a22 <position+0xc2>
		{
			if (armNo != side)
    1a14:	0c 17       	cp	r16, r28
    1a16:	1d 07       	cpc	r17, r29
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <position+0xbe>
			turnRight();
    1a1a:	3c dd       	rcall	.-1416   	; 0x1494 <turnRight>
    1a1c:	19 c0       	rjmp	.+50     	; 0x1a50 <position+0xf0>
			else turnLeft();
    1a1e:	91 dd       	rcall	.-1246   	; 0x1542 <turnLeft>
    1a20:	17 c0       	rjmp	.+46     	; 0x1a50 <position+0xf0>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    1a22:	02 97       	sbiw	r24, 0x02	; 2
    1a24:	30 f4       	brcc	.+12     	; 0x1a32 <position+0xd2>
    1a26:	80 91 50 02 	lds	r24, 0x0250
    1a2a:	90 91 51 02 	lds	r25, 0x0251
    1a2e:	03 97       	sbiw	r24, 0x03	; 3
    1a30:	49 f0       	breq	.+18     	; 0x1a44 <position+0xe4>
    1a32:	22 30       	cpi	r18, 0x02	; 2
    1a34:	31 05       	cpc	r19, r1
    1a36:	60 f4       	brcc	.+24     	; 0x1a50 <position+0xf0>
    1a38:	80 91 50 02 	lds	r24, 0x0250
    1a3c:	90 91 51 02 	lds	r25, 0x0251
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	31 f4       	brne	.+12     	; 0x1a50 <position+0xf0>
					if (armNo == side)
    1a44:	0c 17       	cp	r16, r28
    1a46:	1d 07       	cpc	r17, r29
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <position+0xee>
						turnRight();
    1a4a:	24 dd       	rcall	.-1464   	; 0x1494 <turnRight>
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <position+0xf0>
					else turnLeft();
    1a4e:	79 dd       	rcall	.-1294   	; 0x1542 <turnLeft>
		if(flag==1)
    1a50:	80 91 56 02 	lds	r24, 0x0256
    1a54:	90 91 57 02 	lds	r25, 0x0257
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <position+0xfe>
    1a5c:	80 c0       	rjmp	.+256    	; 0x1b5e <position+0x1fe>
		{
			if(dir==0 || dir==1)
    1a5e:	80 91 50 02 	lds	r24, 0x0250
    1a62:	90 91 51 02 	lds	r25, 0x0251
    1a66:	02 97       	sbiw	r24, 0x02	; 2
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <position+0x10c>
    1a6a:	79 c0       	rjmp	.+242    	; 0x1b5e <position+0x1fe>
			{
				back_mm(20);
    1a6c:	84 e1       	ldi	r24, 0x14	; 20
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 ed 04 	call	0x9da	; 0x9da <back_mm>
				flag=0;
    1a74:	10 92 57 02 	sts	0x0257, r1
    1a78:	10 92 56 02 	sts	0x0256, r1
    1a7c:	70 c0       	rjmp	.+224    	; 0x1b5e <position+0x1fe>
			}
		}
	}
	else
	{
		if (dir == 1 || dir == 3)
    1a7e:	80 91 50 02 	lds	r24, 0x0250
    1a82:	90 91 51 02 	lds	r25, 0x0251
    1a86:	8d 7f       	andi	r24, 0xFD	; 253
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	49 f4       	brne	.+18     	; 0x1a9e <position+0x13e>
		if (ct == 0 || ct == 3)
    1a8c:	21 15       	cp	r18, r1
    1a8e:	31 05       	cpc	r19, r1
    1a90:	19 f0       	breq	.+6      	; 0x1a98 <position+0x138>
    1a92:	23 30       	cpi	r18, 0x03	; 3
    1a94:	31 05       	cpc	r19, r1
    1a96:	11 f4       	brne	.+4      	; 0x1a9c <position+0x13c>
		turnRight();
    1a98:	fd dc       	rcall	.-1542   	; 0x1494 <turnRight>
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <position+0x13e>
		else turnLeft();
    1a9c:	52 dd       	rcall	.-1372   	; 0x1542 <turnLeft>
		if (dir == 0 || dir == 2)
    1a9e:	80 91 50 02 	lds	r24, 0x0250
    1aa2:	90 91 51 02 	lds	r25, 0x0251
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <position+0x152>
    1aaa:	02 97       	sbiw	r24, 0x02	; 2
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <position+0x150>
    1aae:	33 c0       	rjmp	.+102    	; 0x1b16 <position+0x1b6>
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <position+0x160>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1ab2:	80 91 89 02 	lds	r24, 0x0289
    1ab6:	90 91 8a 02 	lds	r25, 0x028A
    1aba:	02 97       	sbiw	r24, 0x02	; 2
    1abc:	c8 f4       	brcc	.+50     	; 0x1af0 <position+0x190>
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <position+0x16e>
    1ac0:	80 91 89 02 	lds	r24, 0x0289
    1ac4:	90 91 8a 02 	lds	r25, 0x028A
    1ac8:	02 97       	sbiw	r24, 0x02	; 2
    1aca:	02 97       	sbiw	r24, 0x02	; 2
    1acc:	88 f4       	brcc	.+34     	; 0x1af0 <position+0x190>
			{
				if (ot != 4 && ot != 5)
    1ace:	80 91 52 02 	lds	r24, 0x0252
    1ad2:	90 91 53 02 	lds	r25, 0x0253
    1ad6:	04 97       	sbiw	r24, 0x04	; 4
    1ad8:	02 97       	sbiw	r24, 0x02	; 2
    1ada:	10 f0       	brcs	.+4      	; 0x1ae0 <position+0x180>
				{
					turnLeft();
    1adc:	32 dd       	rcall	.-1436   	; 0x1542 <turnLeft>
					front();
    1ade:	cf dc       	rcall	.-1634   	; 0x147e <front>
				}
				if (armNo == side)
    1ae0:	0c 17       	cp	r16, r28
    1ae2:	1d 07       	cpc	r17, r29
    1ae4:	11 f4       	brne	.+4      	; 0x1aea <position+0x18a>
				{
					front();
    1ae6:	cb dc       	rcall	.-1642   	; 0x147e <front>
    1ae8:	32 c0       	rjmp	.+100    	; 0x1b4e <position+0x1ee>
				}
				else
				{
					front();
    1aea:	c9 dc       	rcall	.-1646   	; 0x147e <front>
					turn();
    1aec:	84 dd       	rcall	.-1272   	; 0x15f6 <turn>
    1aee:	2f c0       	rjmp	.+94     	; 0x1b4e <position+0x1ee>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1af0:	80 91 52 02 	lds	r24, 0x0252
    1af4:	90 91 53 02 	lds	r25, 0x0253
    1af8:	04 97       	sbiw	r24, 0x04	; 4
    1afa:	02 97       	sbiw	r24, 0x02	; 2
    1afc:	10 f0       	brcs	.+4      	; 0x1b02 <position+0x1a2>
				{
					turnLeft();
    1afe:	21 dd       	rcall	.-1470   	; 0x1542 <turnLeft>
					front();
    1b00:	be dc       	rcall	.-1668   	; 0x147e <front>
				}
				if (armNo == side)
    1b02:	0c 17       	cp	r16, r28
    1b04:	1d 07       	cpc	r17, r29
    1b06:	19 f4       	brne	.+6      	; 0x1b0e <position+0x1ae>
				{
					turn();
    1b08:	76 dd       	rcall	.-1300   	; 0x15f6 <turn>
					front();
    1b0a:	b9 dc       	rcall	.-1678   	; 0x147e <front>
    1b0c:	20 c0       	rjmp	.+64     	; 0x1b4e <position+0x1ee>
				}
				else
				{
					turn();
    1b0e:	73 dd       	rcall	.-1306   	; 0x15f6 <turn>
					front();
    1b10:	b6 dc       	rcall	.-1684   	; 0x147e <front>
					turn();
    1b12:	71 dd       	rcall	.-1310   	; 0x15f6 <turn>
    1b14:	1c c0       	rjmp	.+56     	; 0x1b4e <position+0x1ee>
				}
			}
		}
		else
		{
			if (armNo == side)
    1b16:	0c 17       	cp	r16, r28
    1b18:	1d 07       	cpc	r17, r29
    1b1a:	69 f4       	brne	.+26     	; 0x1b36 <position+0x1d6>
			{
				if (ct == 0 || ct == 3)
    1b1c:	80 91 89 02 	lds	r24, 0x0289
    1b20:	90 91 8a 02 	lds	r25, 0x028A
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <position+0x1cc>
    1b28:	03 97       	sbiw	r24, 0x03	; 3
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <position+0x1d0>
				turnRight();
    1b2c:	b3 dc       	rcall	.-1690   	; 0x1494 <turnRight>
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <position+0x1d2>
				else turnLeft();
    1b30:	08 dd       	rcall	.-1520   	; 0x1542 <turnLeft>
				front();
    1b32:	a5 dc       	rcall	.-1718   	; 0x147e <front>
    1b34:	0c c0       	rjmp	.+24     	; 0x1b4e <position+0x1ee>
			}
			else
			{
				if (ct == 0 || ct == 3)
    1b36:	80 91 89 02 	lds	r24, 0x0289
    1b3a:	90 91 8a 02 	lds	r25, 0x028A
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <position+0x1e6>
    1b42:	03 97       	sbiw	r24, 0x03	; 3
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <position+0x1ea>
				turnRight();
    1b46:	a6 dc       	rcall	.-1716   	; 0x1494 <turnRight>
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <position+0x1ec>
				else turnLeft();
    1b4a:	fb dc       	rcall	.-1546   	; 0x1542 <turnLeft>
				front();
    1b4c:	98 dc       	rcall	.-1744   	; 0x147e <front>
			}
		}
		ot = ct;
    1b4e:	80 91 89 02 	lds	r24, 0x0289
    1b52:	90 91 8a 02 	lds	r25, 0x028A
    1b56:	90 93 53 02 	sts	0x0253, r25
    1b5a:	80 93 52 02 	sts	0x0252, r24
	}
}
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	08 95       	ret

00001b68 <pickNode>:
void pickNode(int armNo, int side)
{
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	8c 01       	movw	r16, r24
    1b72:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    1b74:	fc 01       	movw	r30, r24
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	ed 54       	subi	r30, 0x4D	; 77
    1b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7e:	a0 91 89 02 	lds	r26, 0x0289
    1b82:	b0 91 8a 02 	lds	r27, 0x028A
    1b86:	aa 0f       	add	r26, r26
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	a6 0f       	add	r26, r22
    1b8c:	b7 1f       	adc	r27, r23
    1b8e:	aa 0f       	add	r26, r26
    1b90:	bb 1f       	adc	r27, r27
    1b92:	a3 57       	subi	r26, 0x73	; 115
    1b94:	bd 4f       	sbci	r27, 0xFD	; 253
    1b96:	8d 91       	ld	r24, X+
    1b98:	9c 91       	ld	r25, X
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
	position(armNo, side);
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	df de       	rcall	.-578    	; 0x1960 <position>
	pick(armNo);
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	8d da       	rcall	.-2790   	; 0x10c0 <pick>
	term[ct][side] = -1;
    1ba6:	80 91 89 02 	lds	r24, 0x0289
    1baa:	90 91 8a 02 	lds	r25, 0x028A
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	c8 0f       	add	r28, r24
    1bb4:	d9 1f       	adc	r29, r25
    1bb6:	cc 0f       	add	r28, r28
    1bb8:	dd 1f       	adc	r29, r29
    1bba:	c3 57       	subi	r28, 0x73	; 115
    1bbc:	dd 4f       	sbci	r29, 0xFD	; 253
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	9f ef       	ldi	r25, 0xFF	; 255
    1bc2:	99 83       	std	Y+1, r25	; 0x01
    1bc4:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <pickup>:
	pick(armNo);
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1bdc:	20 91 89 02 	lds	r18, 0x0289
    1be0:	30 91 8a 02 	lds	r19, 0x028A
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	30 f4       	brcc	.+12     	; 0x1bf6 <pickup+0x26>
    1bea:	80 91 50 02 	lds	r24, 0x0250
    1bee:	90 91 51 02 	lds	r25, 0x0251
    1bf2:	02 97       	sbiw	r24, 0x02	; 2
    1bf4:	79 f0       	breq	.+30     	; 0x1c14 <pickup+0x44>
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	02 97       	sbiw	r24, 0x02	; 2
    1bfa:	02 97       	sbiw	r24, 0x02	; 2
    1bfc:	80 f4       	brcc	.+32     	; 0x1c1e <pickup+0x4e>
    1bfe:	80 91 50 02 	lds	r24, 0x0250
    1c02:	90 91 51 02 	lds	r25, 0x0251
    1c06:	89 2b       	or	r24, r25
    1c08:	79 f0       	breq	.+30     	; 0x1c28 <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1c0a:	c1 e0       	ldi	r28, 0x01	; 1
    1c0c:	d0 e0       	ldi	r29, 0x00	; 0
    1c0e:	00 e0       	ldi	r16, 0x00	; 0
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	0e c0       	rjmp	.+28     	; 0x1c30 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1c14:	c0 e0       	ldi	r28, 0x00	; 0
    1c16:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1c18:	01 e0       	ldi	r16, 0x01	; 1
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1c1e:	c1 e0       	ldi	r28, 0x01	; 1
    1c20:	d0 e0       	ldi	r29, 0x00	; 0
    1c22:	00 e0       	ldi	r16, 0x00	; 0
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1c28:	c0 e0       	ldi	r28, 0x00	; 0
    1c2a:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1c2c:	01 e0       	ldi	r16, 0x01	; 1
    1c2e:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1c30:	f9 01       	movw	r30, r18
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	ea 59       	subi	r30, 0x9A	; 154
    1c38:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	89 2b       	or	r24, r25
    1c40:	79 f4       	brne	.+30     	; 0x1c60 <pickup+0x90>
		if (term[ct][0] == -2)
    1c42:	f9 01       	movw	r30, r18
    1c44:	ee 0f       	add	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	ee 0f       	add	r30, r30
    1c4a:	ff 1f       	adc	r31, r31
    1c4c:	e3 57       	subi	r30, 0x73	; 115
    1c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	02 96       	adiw	r24, 0x02	; 2
    1c56:	19 f4       	brne	.+6      	; 0x1c5e <pickup+0x8e>
		{
			terminalCheck1();
    1c58:	b0 dd       	rcall	.-1184   	; 0x17ba <terminalCheck1>
			terminalCheck2();
    1c5a:	f1 d8       	rcall	.-3614   	; 0xe3e <terminalCheck2>
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <pickup+0x90>
		}
		else	terminalCheck2();
    1c5e:	ef d8       	rcall	.-3618   	; 0xe3e <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1c60:	20 91 89 02 	lds	r18, 0x0289
    1c64:	30 91 8a 02 	lds	r19, 0x028A
    1c68:	f9 01       	movw	r30, r18
    1c6a:	ee 0f       	add	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	ee 0f       	add	r30, r30
    1c70:	ff 1f       	adc	r31, r31
    1c72:	e3 57       	subi	r30, 0x73	; 115
    1c74:	fd 4f       	sbci	r31, 0xFD	; 253
    1c76:	40 81       	ld	r20, Z
    1c78:	51 81       	ldd	r21, Z+1	; 0x01
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	e1 56       	subi	r30, 0x61	; 97
    1c82:	fd 4f       	sbci	r31, 0xFD	; 253
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	48 17       	cp	r20, r24
    1c8a:	59 07       	cpc	r21, r25
    1c8c:	21 f0       	breq	.+8      	; 0x1c96 <pickup+0xc6>
    1c8e:	4f 3f       	cpi	r20, 0xFF	; 255
    1c90:	6f ef       	ldi	r22, 0xFF	; 255
    1c92:	56 07       	cpc	r21, r22
    1c94:	89 f4       	brne	.+34     	; 0x1cb8 <pickup+0xe8>
    1c96:	f9 01       	movw	r30, r18
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	e3 57       	subi	r30, 0x73	; 115
    1ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca4:	62 81       	ldd	r22, Z+2	; 0x02
    1ca6:	73 81       	ldd	r23, Z+3	; 0x03
    1ca8:	86 17       	cp	r24, r22
    1caa:	97 07       	cpc	r25, r23
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <pickup+0xe0>
    1cae:	ee c1       	rjmp	.+988    	; 0x208c <pickup+0x4bc>
    1cb0:	6f 3f       	cpi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <pickup+0xe8>
    1cb6:	ea c1       	rjmp	.+980    	; 0x208c <pickup+0x4bc>
		{
			if (armCount == 2)
    1cb8:	60 91 03 02 	lds	r22, 0x0203
    1cbc:	70 91 04 02 	lds	r23, 0x0204
    1cc0:	62 30       	cpi	r22, 0x02	; 2
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <pickup+0xf8>
    1cc6:	b0 c0       	rjmp	.+352    	; 0x1e28 <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1cc8:	e0 91 af 02 	lds	r30, 0x02AF
    1ccc:	f0 91 b0 02 	lds	r31, 0x02B0
    1cd0:	df 01       	movw	r26, r30
    1cd2:	aa 0f       	add	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	a1 56       	subi	r26, 0x61	; 97
    1cd8:	bd 4f       	sbci	r27, 0xFD	; 253
    1cda:	6d 91       	ld	r22, X+
    1cdc:	7c 91       	ld	r23, X
    1cde:	46 17       	cp	r20, r22
    1ce0:	57 07       	cpc	r21, r23
    1ce2:	79 f0       	breq	.+30     	; 0x1d02 <pickup+0x132>
    1ce4:	d9 01       	movw	r26, r18
    1ce6:	aa 0f       	add	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	aa 0f       	add	r26, r26
    1cec:	bb 1f       	adc	r27, r27
    1cee:	a3 57       	subi	r26, 0x73	; 115
    1cf0:	bd 4f       	sbci	r27, 0xFD	; 253
    1cf2:	12 96       	adiw	r26, 0x02	; 2
    1cf4:	ed 90       	ld	r14, X+
    1cf6:	fc 90       	ld	r15, X
    1cf8:	13 97       	sbiw	r26, 0x03	; 3
    1cfa:	6e 15       	cp	r22, r14
    1cfc:	7f 05       	cpc	r23, r15
    1cfe:	59 f4       	brne	.+22     	; 0x1d16 <pickup+0x146>
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 1);
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	c8 01       	movw	r24, r16
    1d08:	2f df       	rcall	.-418    	; 0x1b68 <pickNode>
    1d0a:	8e c0       	rjmp	.+284    	; 0x1e28 <pickup+0x258>
					else	pickNode(arm1, 0);
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	2a df       	rcall	.-428    	; 0x1b68 <pickNode>
    1d14:	89 c0       	rjmp	.+274    	; 0x1e28 <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1d16:	8e 15       	cp	r24, r14
    1d18:	9f 05       	cpc	r25, r15
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <pickup+0x14e>
    1d1c:	4e c0       	rjmp	.+156    	; 0x1dba <pickup+0x1ea>
    1d1e:	ef 20       	and	r14, r15
    1d20:	e0 94       	com	r14
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <pickup+0x156>
    1d24:	4a c0       	rjmp	.+148    	; 0x1dba <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1d26:	48 17       	cp	r20, r24
    1d28:	59 07       	cpc	r21, r25
    1d2a:	69 f0       	breq	.+26     	; 0x1d46 <pickup+0x176>
    1d2c:	4f 3f       	cpi	r20, 0xFF	; 255
    1d2e:	af ef       	ldi	r26, 0xFF	; 255
    1d30:	5a 07       	cpc	r21, r26
    1d32:	49 f0       	breq	.+18     	; 0x1d46 <pickup+0x176>
					{
						pickNode(arm1, 0);
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	ce 01       	movw	r24, r28
    1d3a:	16 df       	rcall	.-468    	; 0x1b68 <pickNode>
						pickNode(arm0, 1);
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	c8 01       	movw	r24, r16
    1d42:	12 df       	rcall	.-476    	; 0x1b68 <pickNode>
    1d44:	71 c0       	rjmp	.+226    	; 0x1e28 <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1d46:	21 70       	andi	r18, 0x01	; 1
    1d48:	30 78       	andi	r19, 0x80	; 128
    1d4a:	33 23       	and	r19, r19
    1d4c:	34 f4       	brge	.+12     	; 0x1d5a <pickup+0x18a>
    1d4e:	21 50       	subi	r18, 0x01	; 1
    1d50:	31 09       	sbc	r19, r1
    1d52:	2e 6f       	ori	r18, 0xFE	; 254
    1d54:	3f 6f       	ori	r19, 0xFF	; 255
    1d56:	2f 5f       	subi	r18, 0xFF	; 255
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	d9 01       	movw	r26, r18
    1d5c:	aa 0f       	add	r26, r26
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	ab 57       	subi	r26, 0x7B	; 123
    1d62:	bd 4f       	sbci	r27, 0xFD	; 253
    1d64:	2d 91       	ld	r18, X+
    1d66:	3c 91       	ld	r19, X
    1d68:	2f 3f       	cpi	r18, 0xFF	; 255
    1d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6c:	09 f1       	breq	.+66     	; 0x1db0 <pickup+0x1e0>
    1d6e:	df 01       	movw	r26, r30
    1d70:	aa 0f       	add	r26, r26
    1d72:	bb 1f       	adc	r27, r27
    1d74:	aa 0f       	add	r26, r26
    1d76:	bb 1f       	adc	r27, r27
    1d78:	a3 57       	subi	r26, 0x73	; 115
    1d7a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d7c:	2d 91       	ld	r18, X+
    1d7e:	3c 91       	ld	r19, X
    1d80:	62 17       	cp	r22, r18
    1d82:	73 07       	cpc	r23, r19
    1d84:	a9 f0       	breq	.+42     	; 0x1db0 <pickup+0x1e0>
    1d86:	2f 3f       	cpi	r18, 0xFF	; 255
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	91 f0       	breq	.+36     	; 0x1db0 <pickup+0x1e0>
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	ee 0f       	add	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	e3 57       	subi	r30, 0x73	; 115
    1d96:	fd 4f       	sbci	r31, 0xFD	; 253
    1d98:	22 81       	ldd	r18, Z+2	; 0x02
    1d9a:	33 81       	ldd	r19, Z+3	; 0x03
    1d9c:	62 17       	cp	r22, r18
    1d9e:	73 07       	cpc	r23, r19
    1da0:	39 f0       	breq	.+14     	; 0x1db0 <pickup+0x1e0>
    1da2:	2f 3f       	cpi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
    1da6:	21 f0       	breq	.+8      	; 0x1db0 <pickup+0x1e0>
    1da8:	48 17       	cp	r20, r24
    1daa:	59 07       	cpc	r21, r25
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <pickup+0x1e0>
    1dae:	6e c1       	rjmp	.+732    	; 0x208c <pickup+0x4bc>
						pickNode(arm1, 0);
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	ce 01       	movw	r24, r28
    1db6:	d8 de       	rcall	.-592    	; 0x1b68 <pickNode>
    1db8:	37 c0       	rjmp	.+110    	; 0x1e28 <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1dba:	48 17       	cp	r20, r24
    1dbc:	59 07       	cpc	r21, r25
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <pickup+0x1f2>
    1dc0:	65 c1       	rjmp	.+714    	; 0x208c <pickup+0x4bc>
    1dc2:	4f 3f       	cpi	r20, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <pickup+0x1fa>
    1dc8:	61 c1       	rjmp	.+706    	; 0x208c <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1dca:	21 70       	andi	r18, 0x01	; 1
    1dcc:	30 78       	andi	r19, 0x80	; 128
    1dce:	33 23       	and	r19, r19
    1dd0:	34 f4       	brge	.+12     	; 0x1dde <pickup+0x20e>
    1dd2:	21 50       	subi	r18, 0x01	; 1
    1dd4:	31 09       	sbc	r19, r1
    1dd6:	2e 6f       	ori	r18, 0xFE	; 254
    1dd8:	3f 6f       	ori	r19, 0xFF	; 255
    1dda:	2f 5f       	subi	r18, 0xFF	; 255
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	d9 01       	movw	r26, r18
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	ab 57       	subi	r26, 0x7B	; 123
    1de6:	bd 4f       	sbci	r27, 0xFD	; 253
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	c1 f0       	breq	.+48     	; 0x1e20 <pickup+0x250>
    1df0:	df 01       	movw	r26, r30
    1df2:	aa 0f       	add	r26, r26
    1df4:	bb 1f       	adc	r27, r27
    1df6:	aa 0f       	add	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	a3 57       	subi	r26, 0x73	; 115
    1dfc:	bd 4f       	sbci	r27, 0xFD	; 253
    1dfe:	8d 91       	ld	r24, X+
    1e00:	9c 91       	ld	r25, X
    1e02:	11 97       	sbiw	r26, 0x01	; 1
    1e04:	68 17       	cp	r22, r24
    1e06:	79 07       	cpc	r23, r25
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <pickup+0x250>
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	49 f0       	breq	.+18     	; 0x1e20 <pickup+0x250>
    1e0e:	fd 01       	movw	r30, r26
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	68 17       	cp	r22, r24
    1e16:	79 07       	cpc	r23, r25
    1e18:	19 f0       	breq	.+6      	; 0x1e20 <pickup+0x250>
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <pickup+0x250>
    1e1e:	36 c1       	rjmp	.+620    	; 0x208c <pickup+0x4bc>
						pickNode(arm0, 1);
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	c8 01       	movw	r24, r16
    1e26:	a0 de       	rcall	.-704    	; 0x1b68 <pickNode>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
					pickNode(arm0, 1);

			}
			if (armCount == 1)
    1e28:	80 91 03 02 	lds	r24, 0x0203
    1e2c:	90 91 04 02 	lds	r25, 0x0204
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <pickup+0x266>
    1e34:	2b c1       	rjmp	.+598    	; 0x208c <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1e36:	f8 01       	movw	r30, r16
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	ed 54       	subi	r30, 0x4D	; 77
    1e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <pickup+0x27a>
					a1 = arm0;
    1e48:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1e4a:	be 01       	movw	r22, r28
    1e4c:	6f 5f       	subi	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	61 70       	andi	r22, 0x01	; 1
    1e52:	70 78       	andi	r23, 0x80	; 128
    1e54:	77 23       	and	r23, r23
    1e56:	34 f4       	brge	.+12     	; 0x1e64 <pickup+0x294>
    1e58:	61 50       	subi	r22, 0x01	; 1
    1e5a:	71 09       	sbc	r23, r1
    1e5c:	6e 6f       	ori	r22, 0xFE	; 254
    1e5e:	7f 6f       	ori	r23, 0xFF	; 255
    1e60:	6f 5f       	subi	r22, 0xFF	; 255
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1e64:	80 91 89 02 	lds	r24, 0x0289
    1e68:	90 91 8a 02 	lds	r25, 0x028A
    1e6c:	9c 01       	movw	r18, r24
    1e6e:	21 70       	andi	r18, 0x01	; 1
    1e70:	30 78       	andi	r19, 0x80	; 128
    1e72:	33 23       	and	r19, r19
    1e74:	34 f4       	brge	.+12     	; 0x1e82 <pickup+0x2b2>
    1e76:	21 50       	subi	r18, 0x01	; 1
    1e78:	31 09       	sbc	r19, r1
    1e7a:	2e 6f       	ori	r18, 0xFE	; 254
    1e7c:	3f 6f       	ori	r19, 0xFF	; 255
    1e7e:	2f 5f       	subi	r18, 0xFF	; 255
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	f9 01       	movw	r30, r18
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	eb 57       	subi	r30, 0x7B	; 123
    1e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e8c:	20 81       	ld	r18, Z
    1e8e:	31 81       	ldd	r19, Z+1	; 0x01
    1e90:	2f 3f       	cpi	r18, 0xFF	; 255
    1e92:	af ef       	ldi	r26, 0xFF	; 255
    1e94:	3a 07       	cpc	r19, r26
    1e96:	d9 f5       	brne	.+118    	; 0x1f0e <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1e98:	fc 01       	movw	r30, r24
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	ec 0f       	add	r30, r28
    1ea0:	fd 1f       	adc	r31, r29
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	e3 57       	subi	r30, 0x73	; 115
    1ea8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eaa:	20 81       	ld	r18, Z
    1eac:	31 81       	ldd	r19, Z+1	; 0x01
    1eae:	2f 3f       	cpi	r18, 0xFF	; 255
    1eb0:	ef ef       	ldi	r30, 0xFF	; 255
    1eb2:	3e 07       	cpc	r19, r30
    1eb4:	71 f0       	breq	.+28     	; 0x1ed2 <pickup+0x302>
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	e1 56       	subi	r30, 0x61	; 97
    1ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec0:	40 81       	ld	r20, Z
    1ec2:	51 81       	ldd	r21, Z+1	; 0x01
    1ec4:	24 17       	cp	r18, r20
    1ec6:	35 07       	cpc	r19, r21
    1ec8:	21 f0       	breq	.+8      	; 0x1ed2 <pickup+0x302>
						pickNode(a1, a1);
    1eca:	be 01       	movw	r22, r28
    1ecc:	ce 01       	movw	r24, r28
    1ece:	4c de       	rcall	.-872    	; 0x1b68 <pickNode>
    1ed0:	dd c0       	rjmp	.+442    	; 0x208c <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e6 0f       	add	r30, r22
    1eda:	f7 1f       	adc	r31, r23
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	e3 57       	subi	r30, 0x73	; 115
    1ee2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee4:	20 81       	ld	r18, Z
    1ee6:	31 81       	ldd	r19, Z+1	; 0x01
    1ee8:	2f 3f       	cpi	r18, 0xFF	; 255
    1eea:	4f ef       	ldi	r20, 0xFF	; 255
    1eec:	34 07       	cpc	r19, r20
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <pickup+0x322>
    1ef0:	cd c0       	rjmp	.+410    	; 0x208c <pickup+0x4bc>
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	ee 0f       	add	r30, r30
    1ef6:	ff 1f       	adc	r31, r31
    1ef8:	e1 56       	subi	r30, 0x61	; 97
    1efa:	fd 4f       	sbci	r31, 0xFD	; 253
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	28 17       	cp	r18, r24
    1f02:	39 07       	cpc	r19, r25
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <pickup+0x338>
    1f06:	c2 c0       	rjmp	.+388    	; 0x208c <pickup+0x4bc>
						pickNode(a1, a2);
    1f08:	ce 01       	movw	r24, r28
    1f0a:	2e de       	rcall	.-932    	; 0x1b68 <pickNode>
    1f0c:	bf c0       	rjmp	.+382    	; 0x208c <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1f0e:	40 91 af 02 	lds	r20, 0x02AF
    1f12:	50 91 b0 02 	lds	r21, 0x02B0
    1f16:	fa 01       	movw	r30, r20
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e1 56       	subi	r30, 0x61	; 97
    1f1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f20:	01 90       	ld	r0, Z+
    1f22:	f0 81       	ld	r31, Z
    1f24:	e0 2d       	mov	r30, r0
    1f26:	dc 01       	movw	r26, r24
    1f28:	aa 0f       	add	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	aa 0f       	add	r26, r26
    1f2e:	bb 1f       	adc	r27, r27
    1f30:	a3 57       	subi	r26, 0x73	; 115
    1f32:	bd 4f       	sbci	r27, 0xFD	; 253
    1f34:	0d 90       	ld	r0, X+
    1f36:	bc 91       	ld	r27, X
    1f38:	a0 2d       	mov	r26, r0
    1f3a:	ae 17       	cp	r26, r30
    1f3c:	bf 07       	cpc	r27, r31
    1f3e:	71 f0       	breq	.+28     	; 0x1f5c <pickup+0x38c>
    1f40:	dc 01       	movw	r26, r24
    1f42:	aa 0f       	add	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	aa 0f       	add	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	a3 57       	subi	r26, 0x73	; 115
    1f4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1f4e:	12 96       	adiw	r26, 0x02	; 2
    1f50:	0d 90       	ld	r0, X+
    1f52:	bc 91       	ld	r27, X
    1f54:	a0 2d       	mov	r26, r0
    1f56:	ea 17       	cp	r30, r26
    1f58:	fb 07       	cpc	r31, r27
    1f5a:	d9 f5       	brne	.+118    	; 0x1fd2 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1f5c:	da 01       	movw	r26, r20
    1f5e:	aa 0f       	add	r26, r26
    1f60:	bb 1f       	adc	r27, r27
    1f62:	aa 59       	subi	r26, 0x9A	; 154
    1f64:	bd 4f       	sbci	r27, 0xFD	; 253
    1f66:	2d 91       	ld	r18, X+
    1f68:	3c 91       	ld	r19, X
    1f6a:	21 30       	cpi	r18, 0x01	; 1
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <pickup+0x3a2>
    1f70:	8d c0       	rjmp	.+282    	; 0x208c <pickup+0x4bc>
    1f72:	da 01       	movw	r26, r20
    1f74:	aa 0f       	add	r26, r26
    1f76:	bb 1f       	adc	r27, r27
    1f78:	aa 0f       	add	r26, r26
    1f7a:	bb 1f       	adc	r27, r27
    1f7c:	a3 57       	subi	r26, 0x73	; 115
    1f7e:	bd 4f       	sbci	r27, 0xFD	; 253
    1f80:	2d 91       	ld	r18, X+
    1f82:	3c 91       	ld	r19, X
    1f84:	2f 3f       	cpi	r18, 0xFF	; 255
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	79 f0       	breq	.+30     	; 0x1fa8 <pickup+0x3d8>
    1f8a:	da 01       	movw	r26, r20
    1f8c:	aa 0f       	add	r26, r26
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	aa 0f       	add	r26, r26
    1f92:	bb 1f       	adc	r27, r27
    1f94:	a3 57       	subi	r26, 0x73	; 115
    1f96:	bd 4f       	sbci	r27, 0xFD	; 253
    1f98:	12 96       	adiw	r26, 0x02	; 2
    1f9a:	2d 91       	ld	r18, X+
    1f9c:	3c 91       	ld	r19, X
    1f9e:	13 97       	sbiw	r26, 0x03	; 3
    1fa0:	2f 3f       	cpi	r18, 0xFF	; 255
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <pickup+0x3d8>
    1fa6:	72 c0       	rjmp	.+228    	; 0x208c <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	8c 0f       	add	r24, r28
    1fae:	9d 1f       	adc	r25, r29
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	aa 0f       	add	r26, r26
    1fb4:	bb 1f       	adc	r27, r27
    1fb6:	a3 57       	subi	r26, 0x73	; 115
    1fb8:	bd 4f       	sbci	r27, 0xFD	; 253
    1fba:	8d 91       	ld	r24, X+
    1fbc:	9c 91       	ld	r25, X
    1fbe:	e8 17       	cp	r30, r24
    1fc0:	f9 07       	cpc	r31, r25
    1fc2:	21 f4       	brne	.+8      	; 0x1fcc <pickup+0x3fc>
								pickNode(a1, a1);
    1fc4:	be 01       	movw	r22, r28
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	cf dd       	rcall	.-1122   	; 0x1b68 <pickNode>
    1fca:	60 c0       	rjmp	.+192    	; 0x208c <pickup+0x4bc>
							else pickNode(a1, a2);
    1fcc:	ce 01       	movw	r24, r28
    1fce:	cc dd       	rcall	.-1128   	; 0x1b68 <pickNode>
    1fd0:	5d c0       	rjmp	.+186    	; 0x208c <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	aa 0f       	add	r26, r26
    1fd6:	bb 1f       	adc	r27, r27
    1fd8:	a1 56       	subi	r26, 0x61	; 97
    1fda:	bd 4f       	sbci	r27, 0xFD	; 253
    1fdc:	0d 90       	ld	r0, X+
    1fde:	bc 91       	ld	r27, X
    1fe0:	a0 2d       	mov	r26, r0
    1fe2:	2a 17       	cp	r18, r26
    1fe4:	3b 07       	cpc	r19, r27
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <pickup+0x41a>
    1fe8:	51 c0       	rjmp	.+162    	; 0x208c <pickup+0x4bc>
    1fea:	2e 17       	cp	r18, r30
    1fec:	3f 07       	cpc	r19, r31
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <pickup+0x422>
    1ff0:	4d c0       	rjmp	.+154    	; 0x208c <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1ff2:	fa 01       	movw	r30, r20
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	ea 59       	subi	r30, 0x9A	; 154
    1ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    1ffc:	20 81       	ld	r18, Z
    1ffe:	31 81       	ldd	r19, Z+1	; 0x01
    2000:	21 30       	cpi	r18, 0x01	; 1
    2002:	31 05       	cpc	r19, r1
    2004:	09 f0       	breq	.+2      	; 0x2008 <pickup+0x438>
    2006:	42 c0       	rjmp	.+132    	; 0x208c <pickup+0x4bc>
    2008:	fa 01       	movw	r30, r20
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	e3 57       	subi	r30, 0x73	; 115
    2014:	fd 4f       	sbci	r31, 0xFD	; 253
    2016:	20 81       	ld	r18, Z
    2018:	31 81       	ldd	r19, Z+1	; 0x01
    201a:	a2 17       	cp	r26, r18
    201c:	b3 07       	cpc	r27, r19
    201e:	b1 f1       	breq	.+108    	; 0x208c <pickup+0x4bc>
    2020:	fa 01       	movw	r30, r20
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	e3 57       	subi	r30, 0x73	; 115
    202c:	fd 4f       	sbci	r31, 0xFD	; 253
    202e:	22 81       	ldd	r18, Z+2	; 0x02
    2030:	33 81       	ldd	r19, Z+3	; 0x03
    2032:	a2 17       	cp	r26, r18
    2034:	b3 07       	cpc	r27, r19
    2036:	51 f1       	breq	.+84     	; 0x208c <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    2038:	fc 01       	movw	r30, r24
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	ec 0f       	add	r30, r28
    2040:	fd 1f       	adc	r31, r29
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	e3 57       	subi	r30, 0x73	; 115
    2048:	fd 4f       	sbci	r31, 0xFD	; 253
    204a:	20 81       	ld	r18, Z
    204c:	31 81       	ldd	r19, Z+1	; 0x01
    204e:	2f 3f       	cpi	r18, 0xFF	; 255
    2050:	ef ef       	ldi	r30, 0xFF	; 255
    2052:	3e 07       	cpc	r19, r30
    2054:	39 f0       	breq	.+14     	; 0x2064 <pickup+0x494>
    2056:	a2 17       	cp	r26, r18
    2058:	b3 07       	cpc	r27, r19
    205a:	21 f0       	breq	.+8      	; 0x2064 <pickup+0x494>
									pickNode(a1, a1);
    205c:	be 01       	movw	r22, r28
    205e:	ce 01       	movw	r24, r28
    2060:	83 dd       	rcall	.-1274   	; 0x1b68 <pickNode>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	86 0f       	add	r24, r22
    206a:	97 1f       	adc	r25, r23
    206c:	fc 01       	movw	r30, r24
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	e3 57       	subi	r30, 0x73	; 115
    2074:	fd 4f       	sbci	r31, 0xFD	; 253
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	8f 3f       	cpi	r24, 0xFF	; 255
    207c:	2f ef       	ldi	r18, 0xFF	; 255
    207e:	92 07       	cpc	r25, r18
    2080:	29 f0       	breq	.+10     	; 0x208c <pickup+0x4bc>
    2082:	a8 17       	cp	r26, r24
    2084:	b9 07       	cpc	r27, r25
    2086:	11 f0       	breq	.+4      	; 0x208c <pickup+0x4bc>
									pickNode(a1, a2);
    2088:	ce 01       	movw	r24, r28
    208a:	6e dd       	rcall	.-1316   	; 0x1b68 <pickNode>
					}
				}
			}
		}
}
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	08 95       	ret

0000209a <dropPickup>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}

void dropPickup(int a1)
{
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    209e:	9c 01       	movw	r18, r24
    20a0:	2f 5f       	subi	r18, 0xFF	; 255
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	21 70       	andi	r18, 0x01	; 1
    20a6:	30 78       	andi	r19, 0x80	; 128
    20a8:	33 23       	and	r19, r19
    20aa:	34 f4       	brge	.+12     	; 0x20b8 <dropPickup+0x1e>
    20ac:	21 50       	subi	r18, 0x01	; 1
    20ae:	31 09       	sbc	r19, r1
    20b0:	2e 6f       	ori	r18, 0xFE	; 254
    20b2:	3f 6f       	ori	r19, 0xFF	; 255
    20b4:	2f 5f       	subi	r18, 0xFF	; 255
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	d2 2f       	mov	r29, r18
    20ba:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    20bc:	e0 91 89 02 	lds	r30, 0x0289
    20c0:	f0 91 8a 02 	lds	r31, 0x028A
    20c4:	af 01       	movw	r20, r30
    20c6:	44 0f       	add	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	24 0f       	add	r18, r20
    20cc:	35 1f       	adc	r19, r21
    20ce:	d9 01       	movw	r26, r18
    20d0:	aa 0f       	add	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	a3 57       	subi	r26, 0x73	; 115
    20d6:	bd 4f       	sbci	r27, 0xFD	; 253
    20d8:	2d 91       	ld	r18, X+
    20da:	3c 91       	ld	r19, X
    20dc:	da 01       	movw	r26, r20
    20de:	a1 56       	subi	r26, 0x61	; 97
    20e0:	bd 4f       	sbci	r27, 0xFD	; 253
    20e2:	4d 91       	ld	r20, X+
    20e4:	5c 91       	ld	r21, X
    20e6:	24 17       	cp	r18, r20
    20e8:	35 07       	cpc	r19, r21
    20ea:	69 f0       	breq	.+26     	; 0x2106 <dropPickup+0x6c>
    20ec:	a0 91 af 02 	lds	r26, 0x02AF
    20f0:	b0 91 b0 02 	lds	r27, 0x02B0
    20f4:	aa 0f       	add	r26, r26
    20f6:	bb 1f       	adc	r27, r27
    20f8:	a1 56       	subi	r26, 0x61	; 97
    20fa:	bd 4f       	sbci	r27, 0xFD	; 253
    20fc:	6d 91       	ld	r22, X+
    20fe:	7c 91       	ld	r23, X
    2100:	26 17       	cp	r18, r22
    2102:	37 07       	cpc	r19, r23
    2104:	a9 f0       	breq	.+42     	; 0x2130 <dropPickup+0x96>
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e8 0f       	add	r30, r24
    210c:	f9 1f       	adc	r31, r25
    210e:	ee 0f       	add	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	e3 57       	subi	r30, 0x73	; 115
    2114:	fd 4f       	sbci	r31, 0xFD	; 253
    2116:	01 90       	ld	r0, Z+
    2118:	f0 81       	ld	r31, Z
    211a:	e0 2d       	mov	r30, r0
    211c:	4e 17       	cp	r20, r30
    211e:	5f 07       	cpc	r21, r31
    2120:	39 f0       	breq	.+14     	; 0x2130 <dropPickup+0x96>
    2122:	31 96       	adiw	r30, 0x01	; 1
    2124:	29 f0       	breq	.+10     	; 0x2130 <dropPickup+0x96>
		pickNode(a2, a1);
    2126:	bc 01       	movw	r22, r24
    2128:	8d 2f       	mov	r24, r29
    212a:	9c 2f       	mov	r25, r28
    212c:	1d dd       	rcall	.-1478   	; 0x1b68 <pickNode>
    212e:	0b c0       	rjmp	.+22     	; 0x2146 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    2130:	24 17       	cp	r18, r20
    2132:	35 07       	cpc	r19, r21
    2134:	41 f0       	breq	.+16     	; 0x2146 <dropPickup+0xac>
    2136:	2f 3f       	cpi	r18, 0xFF	; 255
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	29 f0       	breq	.+10     	; 0x2146 <dropPickup+0xac>
		pickNode(a2, a2);
    213c:	6d 2f       	mov	r22, r29
    213e:	7c 2f       	mov	r23, r28
    2140:	8d 2f       	mov	r24, r29
    2142:	9c 2f       	mov	r25, r28
    2144:	11 dd       	rcall	.-1502   	; 0x1b68 <pickNode>
}
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	08 95       	ret

0000214c <nodeDrop>:
	lcd("dropRight");
	else
	lcd("dropLeft");
}
void nodeDrop(int armNo, int side)
{
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    2156:	e0 91 89 02 	lds	r30, 0x0289
    215a:	f0 91 8a 02 	lds	r31, 0x028A
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	e6 0f       	add	r30, r22
    2164:	f7 1f       	adc	r31, r23
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	e3 57       	subi	r30, 0x73	; 115
    216c:	fd 4f       	sbci	r31, 0xFD	; 253
    216e:	8c 01       	movw	r16, r24
    2170:	00 0f       	add	r16, r16
    2172:	11 1f       	adc	r17, r17
    2174:	0d 54       	subi	r16, 0x4D	; 77
    2176:	1d 4f       	sbci	r17, 0xFD	; 253
    2178:	d8 01       	movw	r26, r16
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
	position(armNo, side);
    2182:	ce 01       	movw	r24, r28
    2184:	ed db       	rcall	.-2086   	; 0x1960 <position>
	drop(armNo);
    2186:	ce 01       	movw	r24, r28
    2188:	0e 94 87 08 	call	0x110e	; 0x110e <drop>
	arm[armNo] = -1;
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	9f ef       	ldi	r25, 0xFF	; 255
    2190:	f8 01       	movw	r30, r16
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    2196:	80 91 58 02 	lds	r24, 0x0258
    219a:	90 91 59 02 	lds	r25, 0x0259
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	90 93 59 02 	sts	0x0259, r25
    21a4:	80 93 58 02 	sts	0x0258, r24
}
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	08 95       	ret

000021b2 <canDrop>:
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
		pickNode(a2, a2);
}

void canDrop()
{
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    21ba:	20 91 89 02 	lds	r18, 0x0289
    21be:	30 91 8a 02 	lds	r19, 0x028A
    21c2:	22 30       	cpi	r18, 0x02	; 2
    21c4:	31 05       	cpc	r19, r1
    21c6:	30 f4       	brcc	.+12     	; 0x21d4 <canDrop+0x22>
    21c8:	80 91 50 02 	lds	r24, 0x0250
    21cc:	90 91 51 02 	lds	r25, 0x0251
    21d0:	02 97       	sbiw	r24, 0x02	; 2
    21d2:	79 f0       	breq	.+30     	; 0x21f2 <canDrop+0x40>
    21d4:	c9 01       	movw	r24, r18
    21d6:	02 97       	sbiw	r24, 0x02	; 2
    21d8:	02 97       	sbiw	r24, 0x02	; 2
    21da:	80 f4       	brcc	.+32     	; 0x21fc <canDrop+0x4a>
    21dc:	80 91 50 02 	lds	r24, 0x0250
    21e0:	90 91 51 02 	lds	r25, 0x0251
    21e4:	89 2b       	or	r24, r25
    21e6:	79 f0       	breq	.+30     	; 0x2206 <__stack+0x7>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    21e8:	01 e0       	ldi	r16, 0x01	; 1
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	c0 e0       	ldi	r28, 0x00	; 0
    21ee:	d0 e0       	ldi	r29, 0x00	; 0
    21f0:	0e c0       	rjmp	.+28     	; 0x220e <__stack+0xf>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    21f2:	00 e0       	ldi	r16, 0x00	; 0
    21f4:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    21f6:	c1 e0       	ldi	r28, 0x01	; 1
    21f8:	d0 e0       	ldi	r29, 0x00	; 0
    21fa:	09 c0       	rjmp	.+18     	; 0x220e <__stack+0xf>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    21fc:	01 e0       	ldi	r16, 0x01	; 1
    21fe:	10 e0       	ldi	r17, 0x00	; 0
    2200:	c0 e0       	ldi	r28, 0x00	; 0
    2202:	d0 e0       	ldi	r29, 0x00	; 0
    2204:	04 c0       	rjmp	.+8      	; 0x220e <__stack+0xf>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    220a:	c1 e0       	ldi	r28, 0x01	; 1
    220c:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    220e:	40 91 03 02 	lds	r20, 0x0203
    2212:	50 91 04 02 	lds	r21, 0x0204
    2216:	42 30       	cpi	r20, 0x02	; 2
    2218:	51 05       	cpc	r21, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <__stack+0x1f>
    221c:	3c c1       	rjmp	.+632    	; 0x2496 <__stack+0x297>
    221e:	f9 01       	movw	r30, r18
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	e1 56       	subi	r30, 0x61	; 97
    2226:	fd 4f       	sbci	r31, 0xFD	; 253
    2228:	40 81       	ld	r20, Z
    222a:	51 81       	ldd	r21, Z+1	; 0x01
    222c:	80 91 b3 02 	lds	r24, 0x02B3
    2230:	90 91 b4 02 	lds	r25, 0x02B4
    2234:	84 17       	cp	r24, r20
    2236:	95 07       	cpc	r25, r21
    2238:	41 f0       	breq	.+16     	; 0x224a <__stack+0x4b>
    223a:	80 91 b5 02 	lds	r24, 0x02B5
    223e:	90 91 b6 02 	lds	r25, 0x02B6
    2242:	48 17       	cp	r20, r24
    2244:	59 07       	cpc	r21, r25
    2246:	09 f0       	breq	.+2      	; 0x224a <__stack+0x4b>
    2248:	26 c1       	rjmp	.+588    	; 0x2496 <__stack+0x297>
		return;
	else
	{
		if (visited[ct] == 0)
    224a:	f9 01       	movw	r30, r18
    224c:	ee 0f       	add	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	ea 59       	subi	r30, 0x9A	; 154
    2252:	fd 4f       	sbci	r31, 0xFD	; 253
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	89 2b       	or	r24, r25
    225a:	09 f4       	brne	.+2      	; 0x225e <__stack+0x5f>
			terminalCheck1();
    225c:	ae da       	rcall	.-2724   	; 0x17ba <terminalCheck1>
		if (armCount == 0)
    225e:	80 91 03 02 	lds	r24, 0x0203
    2262:	90 91 04 02 	lds	r25, 0x0204
    2266:	89 2b       	or	r24, r25
    2268:	09 f0       	breq	.+2      	; 0x226c <__stack+0x6d>
    226a:	48 c0       	rjmp	.+144    	; 0x22fc <__stack+0xfd>
		{
			if (arm[arm0] == color[ct])
    226c:	20 91 89 02 	lds	r18, 0x0289
    2270:	30 91 8a 02 	lds	r19, 0x028A
    2274:	f9 01       	movw	r30, r18
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	e1 56       	subi	r30, 0x61	; 97
    227c:	fd 4f       	sbci	r31, 0xFD	; 253
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	fe 01       	movw	r30, r28
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	ed 54       	subi	r30, 0x4D	; 77
    228a:	fd 4f       	sbci	r31, 0xFD	; 253
    228c:	40 81       	ld	r20, Z
    228e:	51 81       	ldd	r21, Z+1	; 0x01
    2290:	48 17       	cp	r20, r24
    2292:	59 07       	cpc	r21, r25
    2294:	a9 f4       	brne	.+42     	; 0x22c0 <__stack+0xc1>
				if (term[ct][0] == -1)
    2296:	f9 01       	movw	r30, r18
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	e3 57       	subi	r30, 0x73	; 115
    22a2:	fd 4f       	sbci	r31, 0xFD	; 253
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <__stack+0xb7>
					nodeDrop(arm0, 0);
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	ce 01       	movw	r24, r28
    22b2:	4c df       	rcall	.-360    	; 0x214c <nodeDrop>
    22b4:	23 c0       	rjmp	.+70     	; 0x22fc <__stack+0xfd>
				else nodeDrop(arm0, 1);
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	ce 01       	movw	r24, r28
    22bc:	47 df       	rcall	.-370    	; 0x214c <nodeDrop>
    22be:	1e c0       	rjmp	.+60     	; 0x22fc <__stack+0xfd>
			else if (arm[arm1] == color[ct])
    22c0:	f8 01       	movw	r30, r16
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	ed 54       	subi	r30, 0x4D	; 77
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	40 81       	ld	r20, Z
    22cc:	51 81       	ldd	r21, Z+1	; 0x01
    22ce:	84 17       	cp	r24, r20
    22d0:	95 07       	cpc	r25, r21
    22d2:	a1 f4       	brne	.+40     	; 0x22fc <__stack+0xfd>
				if (term[ct][0] != -1)
    22d4:	f9 01       	movw	r30, r18
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	e3 57       	subi	r30, 0x73	; 115
    22e0:	fd 4f       	sbci	r31, 0xFD	; 253
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	29 f0       	breq	.+10     	; 0x22f4 <__stack+0xf5>
					nodeDrop(arm1, 1);
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	c8 01       	movw	r24, r16
    22f0:	2d df       	rcall	.-422    	; 0x214c <nodeDrop>
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <__stack+0xfd>
				else nodeDrop(arm1, 0);
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	c8 01       	movw	r24, r16
    22fa:	28 df       	rcall	.-432    	; 0x214c <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    22fc:	20 91 89 02 	lds	r18, 0x0289
    2300:	30 91 8a 02 	lds	r19, 0x028A
    2304:	f9 01       	movw	r30, r18
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	e1 56       	subi	r30, 0x61	; 97
    230c:	fd 4f       	sbci	r31, 0xFD	; 253
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	40 91 b3 02 	lds	r20, 0x02B3
    2316:	50 91 b4 02 	lds	r21, 0x02B4
    231a:	48 17       	cp	r20, r24
    231c:	59 07       	cpc	r21, r25
    231e:	41 f0       	breq	.+16     	; 0x2330 <__stack+0x131>
    2320:	40 91 b5 02 	lds	r20, 0x02B5
    2324:	50 91 b6 02 	lds	r21, 0x02B6
    2328:	84 17       	cp	r24, r20
    232a:	95 07       	cpc	r25, r21
    232c:	09 f0       	breq	.+2      	; 0x2330 <__stack+0x131>
    232e:	b3 c0       	rjmp	.+358    	; 0x2496 <__stack+0x297>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2330:	f9 01       	movw	r30, r18
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	e3 57       	subi	r30, 0x73	; 115
    233c:	fd 4f       	sbci	r31, 0xFD	; 253
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	09 f4       	brne	.+2      	; 0x2348 <__stack+0x149>
    2346:	46 c0       	rjmp	.+140    	; 0x23d4 <__stack+0x1d5>
    2348:	f9 01       	movw	r30, r18
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e3 57       	subi	r30, 0x73	; 115
    2354:	fd 4f       	sbci	r31, 0xFD	; 253
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	01 96       	adiw	r24, 0x01	; 1
    235c:	d1 f0       	breq	.+52     	; 0x2392 <__stack+0x193>
				if (visited[ct] == 0)
    235e:	f9 01       	movw	r30, r18
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	ea 59       	subi	r30, 0x9A	; 154
    2366:	fd 4f       	sbci	r31, 0xFD	; 253
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	89 2b       	or	r24, r25
    236e:	89 f4       	brne	.+34     	; 0x2392 <__stack+0x193>
					terminalCheck2();
    2370:	0e 94 1f 07 	call	0xe3e	; 0xe3e <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    2374:	20 91 89 02 	lds	r18, 0x0289
    2378:	30 91 8a 02 	lds	r19, 0x028A
    237c:	f9 01       	movw	r30, r18
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	e3 57       	subi	r30, 0x73	; 115
    2388:	fd 4f       	sbci	r31, 0xFD	; 253
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	09 f1       	breq	.+66     	; 0x23d4 <__stack+0x1d5>
    2392:	f9 01       	movw	r30, r18
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	e3 57       	subi	r30, 0x73	; 115
    239e:	fd 4f       	sbci	r31, 0xFD	; 253
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	01 96       	adiw	r24, 0x01	; 1
    23a6:	b1 f0       	breq	.+44     	; 0x23d4 <__stack+0x1d5>
			{
				if (arm[arm0] == color[ct])
    23a8:	de 01       	movw	r26, r28
    23aa:	aa 0f       	add	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	ad 54       	subi	r26, 0x4D	; 77
    23b0:	bd 4f       	sbci	r27, 0xFD	; 253
    23b2:	f9 01       	movw	r30, r18
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	e1 56       	subi	r30, 0x61	; 97
    23ba:	fd 4f       	sbci	r31, 0xFD	; 253
    23bc:	4d 91       	ld	r20, X+
    23be:	5c 91       	ld	r21, X
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	48 17       	cp	r20, r24
    23c6:	59 07       	cpc	r21, r25
    23c8:	19 f4       	brne	.+6      	; 0x23d0 <__stack+0x1d1>
					dropPickup(arm0);
    23ca:	ce 01       	movw	r24, r28
    23cc:	66 de       	rcall	.-820    	; 0x209a <dropPickup>
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <__stack+0x1d5>
				else dropPickup(arm1);
    23d0:	c8 01       	movw	r24, r16
    23d2:	63 de       	rcall	.-826    	; 0x209a <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    23d4:	80 91 89 02 	lds	r24, 0x0289
    23d8:	90 91 8a 02 	lds	r25, 0x028A
    23dc:	fc 01       	movw	r30, r24
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e1 56       	subi	r30, 0x61	; 97
    23e4:	fd 4f       	sbci	r31, 0xFD	; 253
    23e6:	20 81       	ld	r18, Z
    23e8:	31 81       	ldd	r19, Z+1	; 0x01
    23ea:	fe 01       	movw	r30, r28
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ed 54       	subi	r30, 0x4D	; 77
    23f2:	fd 4f       	sbci	r31, 0xFD	; 253
    23f4:	40 81       	ld	r20, Z
    23f6:	51 81       	ldd	r21, Z+1	; 0x01
    23f8:	42 17       	cp	r20, r18
    23fa:	53 07       	cpc	r21, r19
    23fc:	11 f5       	brne	.+68     	; 0x2442 <__stack+0x243>
    23fe:	fc 01       	movw	r30, r24
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	e3 57       	subi	r30, 0x73	; 115
    240a:	fd 4f       	sbci	r31, 0xFD	; 253
    240c:	40 81       	ld	r20, Z
    240e:	51 81       	ldd	r21, Z+1	; 0x01
    2410:	4f 3f       	cpi	r20, 0xFF	; 255
    2412:	5f 4f       	sbci	r21, 0xFF	; 255
    2414:	29 f4       	brne	.+10     	; 0x2420 <__stack+0x221>
				nodeDrop(arm0, 0);
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	ce 01       	movw	r24, r28
    241c:	97 de       	rcall	.-722    	; 0x214c <nodeDrop>
    241e:	3b c0       	rjmp	.+118    	; 0x2496 <__stack+0x297>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    2420:	fc 01       	movw	r30, r24
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	e3 57       	subi	r30, 0x73	; 115
    242c:	fd 4f       	sbci	r31, 0xFD	; 253
    242e:	42 81       	ldd	r20, Z+2	; 0x02
    2430:	53 81       	ldd	r21, Z+3	; 0x03
    2432:	4f 3f       	cpi	r20, 0xFF	; 255
    2434:	5f 4f       	sbci	r21, 0xFF	; 255
    2436:	29 f4       	brne	.+10     	; 0x2442 <__stack+0x243>
				nodeDrop(arm0, 1);
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	70 e0       	ldi	r23, 0x00	; 0
    243c:	ce 01       	movw	r24, r28
    243e:	86 de       	rcall	.-756    	; 0x214c <nodeDrop>
    2440:	2a c0       	rjmp	.+84     	; 0x2496 <__stack+0x297>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    2442:	f8 01       	movw	r30, r16
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ed 54       	subi	r30, 0x4D	; 77
    244a:	fd 4f       	sbci	r31, 0xFD	; 253
    244c:	40 81       	ld	r20, Z
    244e:	51 81       	ldd	r21, Z+1	; 0x01
    2450:	24 17       	cp	r18, r20
    2452:	35 07       	cpc	r19, r21
    2454:	01 f5       	brne	.+64     	; 0x2496 <__stack+0x297>
    2456:	fc 01       	movw	r30, r24
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	e3 57       	subi	r30, 0x73	; 115
    2462:	fd 4f       	sbci	r31, 0xFD	; 253
    2464:	20 81       	ld	r18, Z
    2466:	31 81       	ldd	r19, Z+1	; 0x01
    2468:	2f 3f       	cpi	r18, 0xFF	; 255
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	29 f4       	brne	.+10     	; 0x2478 <__stack+0x279>
				nodeDrop(arm1, 0);
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	c8 01       	movw	r24, r16
    2474:	6b de       	rcall	.-810    	; 0x214c <nodeDrop>
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <__stack+0x297>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    2478:	fc 01       	movw	r30, r24
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	e3 57       	subi	r30, 0x73	; 115
    2484:	fd 4f       	sbci	r31, 0xFD	; 253
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	21 f4       	brne	.+8      	; 0x2496 <__stack+0x297>
				nodeDrop(arm1, 1);
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	c8 01       	movw	r24, r16
    2494:	5b de       	rcall	.-842    	; 0x214c <nodeDrop>

		}
	}
}
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <pickSort>:
	term[ct][side] = -1;
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}

void pickSort(int armNo, int sortNo)
{
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	ec 01       	movw	r28, r24
    24aa:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    24ac:	fc 01       	movw	r30, r24
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ed 54       	subi	r30, 0x4D	; 77
    24b4:	fd 4f       	sbci	r31, 0xFD	; 253
    24b6:	db 01       	movw	r26, r22
    24b8:	aa 0f       	add	r26, r26
    24ba:	bb 1f       	adc	r27, r27
    24bc:	ab 57       	subi	r26, 0x7B	; 123
    24be:	bd 4f       	sbci	r27, 0xFD	; 253
    24c0:	8d 91       	ld	r24, X+
    24c2:	9c 91       	ld	r25, X
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    24c8:	c6 17       	cp	r28, r22
    24ca:	d7 07       	cpc	r29, r23
    24cc:	39 f4       	brne	.+14     	; 0x24dc <pickSort+0x3c>
    24ce:	80 91 50 02 	lds	r24, 0x0250
    24d2:	90 91 51 02 	lds	r25, 0x0251
    24d6:	89 2b       	or	r24, r25
    24d8:	49 f4       	brne	.+18     	; 0x24ec <pickSort+0x4c>
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <pickSort+0x48>
    24dc:	80 91 50 02 	lds	r24, 0x0250
    24e0:	90 91 51 02 	lds	r25, 0x0251
    24e4:	02 97       	sbiw	r24, 0x02	; 2
    24e6:	11 f4       	brne	.+4      	; 0x24ec <pickSort+0x4c>
		turn();
    24e8:	86 d8       	rcall	.-3828   	; 0x15f6 <turn>
    24ea:	0d c0       	rjmp	.+26     	; 0x2506 <pickSort+0x66>
	else
	{
		if (dir == 1 || dir == 3)
    24ec:	80 91 50 02 	lds	r24, 0x0250
    24f0:	90 91 51 02 	lds	r25, 0x0251
    24f4:	8d 7f       	andi	r24, 0xFD	; 253
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	31 f4       	brne	.+12     	; 0x2506 <pickSort+0x66>
			if (armNo == 0)
    24fa:	20 97       	sbiw	r28, 0x00	; 0
    24fc:	11 f4       	brne	.+4      	; 0x2502 <pickSort+0x62>
				turnLeft();
    24fe:	21 d8       	rcall	.-4030   	; 0x1542 <turnLeft>
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <pickSort+0x66>
			else turnRight();
    2502:	0e 94 4a 0a 	call	0x1494	; 0x1494 <turnRight>
	}
	pick(armNo);
    2506:	ce 01       	movw	r24, r28
    2508:	0e 94 60 08 	call	0x10c0	; 0x10c0 <pick>
	sort[sortNo] = -1;
    250c:	f8 01       	movw	r30, r16
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	eb 57       	subi	r30, 0x7B	; 123
    2514:	fd 4f       	sbci	r31, 0xFD	; 253
    2516:	8f ef       	ldi	r24, 0xFF	; 255
    2518:	9f ef       	ldi	r25, 0xFF	; 255
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	08 95       	ret

00002528 <sortDrop>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
}
void sortDrop(int armNo, int sortNo)
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    252e:	fb 01       	movw	r30, r22
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	eb 57       	subi	r30, 0x7B	; 123
    2536:	fd 4f       	sbci	r31, 0xFD	; 253
    2538:	dc 01       	movw	r26, r24
    253a:	aa 0f       	add	r26, r26
    253c:	bb 1f       	adc	r27, r27
    253e:	ad 54       	subi	r26, 0x4D	; 77
    2540:	bd 4f       	sbci	r27, 0xFD	; 253
    2542:	8d 91       	ld	r24, X+
    2544:	9c 91       	ld	r25, X
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    254a:	c6 17       	cp	r28, r22
    254c:	d7 07       	cpc	r29, r23
    254e:	39 f4       	brne	.+14     	; 0x255e <sortDrop+0x36>
    2550:	80 91 50 02 	lds	r24, 0x0250
    2554:	90 91 51 02 	lds	r25, 0x0251
    2558:	89 2b       	or	r24, r25
    255a:	49 f4       	brne	.+18     	; 0x256e <sortDrop+0x46>
    255c:	06 c0       	rjmp	.+12     	; 0x256a <sortDrop+0x42>
    255e:	80 91 50 02 	lds	r24, 0x0250
    2562:	90 91 51 02 	lds	r25, 0x0251
    2566:	02 97       	sbiw	r24, 0x02	; 2
    2568:	11 f4       	brne	.+4      	; 0x256e <sortDrop+0x46>
		turn();
    256a:	45 d8       	rcall	.-3958   	; 0x15f6 <turn>
    256c:	0e c0       	rjmp	.+28     	; 0x258a <sortDrop+0x62>
	else
	{
		if (dir == 1 || dir == 3)
    256e:	80 91 50 02 	lds	r24, 0x0250
    2572:	90 91 51 02 	lds	r25, 0x0251
    2576:	8d 7f       	andi	r24, 0xFD	; 253
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	39 f4       	brne	.+14     	; 0x258a <sortDrop+0x62>
			if (armNo == 0)
    257c:	20 97       	sbiw	r28, 0x00	; 0
    257e:	19 f4       	brne	.+6      	; 0x2586 <sortDrop+0x5e>
				turnLeft();
    2580:	0e 94 a1 0a 	call	0x1542	; 0x1542 <turnLeft>
    2584:	02 c0       	rjmp	.+4      	; 0x258a <sortDrop+0x62>
			else turnRight();
    2586:	0e 94 4a 0a 	call	0x1494	; 0x1494 <turnRight>
	}
	drop(armNo);
    258a:	ce 01       	movw	r24, r28
    258c:	0e 94 87 08 	call	0x110e	; 0x110e <drop>
	arm[armNo] = -1;
    2590:	cc 0f       	add	r28, r28
    2592:	dd 1f       	adc	r29, r29
    2594:	cd 54       	subi	r28, 0x4D	; 77
    2596:	dd 4f       	sbci	r29, 0xFD	; 253
    2598:	8f ef       	ldi	r24, 0xFF	; 255
    259a:	9f ef       	ldi	r25, 0xFF	; 255
    259c:	99 83       	std	Y+1, r25	; 0x01
    259e:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	08 95       	ret

000025a6 <newSort>:
		}
	}
}

void newSort()
{
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    25ae:	20 91 b3 02 	lds	r18, 0x02B3
    25b2:	30 91 b4 02 	lds	r19, 0x02B4
    25b6:	2f 3f       	cpi	r18, 0xFF	; 255
    25b8:	1f ef       	ldi	r17, 0xFF	; 255
    25ba:	31 07       	cpc	r19, r17
    25bc:	41 f0       	breq	.+16     	; 0x25ce <newSort+0x28>
		a1 = indicator[arm[0]];
    25be:	f9 01       	movw	r30, r18
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	e9 55       	subi	r30, 0x59	; 89
    25c6:	fd 4f       	sbci	r31, 0xFD	; 253
    25c8:	c0 81       	ld	r28, Z
    25ca:	d1 81       	ldd	r29, Z+1	; 0x01
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    25ce:	ce ef       	ldi	r28, 0xFE	; 254
    25d0:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    25d2:	e0 91 b5 02 	lds	r30, 0x02B5
    25d6:	f0 91 b6 02 	lds	r31, 0x02B6
    25da:	ef 3f       	cpi	r30, 0xFF	; 255
    25dc:	4f ef       	ldi	r20, 0xFF	; 255
    25de:	f4 07       	cpc	r31, r20
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <newSort+0x3e>
    25e2:	7f c1       	rjmp	.+766    	; 0x28e2 <newSort+0x33c>
		a2 = indicator[arm[1]];
    25e4:	df 01       	movw	r26, r30
    25e6:	aa 0f       	add	r26, r26
    25e8:	bb 1f       	adc	r27, r27
    25ea:	a9 55       	subi	r26, 0x59	; 89
    25ec:	bd 4f       	sbci	r27, 0xFD	; 253
    25ee:	4d 91       	ld	r20, X+
    25f0:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    25f2:	80 91 89 02 	lds	r24, 0x0289
    25f6:	90 91 8a 02 	lds	r25, 0x028A
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	81 70       	andi	r24, 0x01	; 1
    25fe:	90 78       	andi	r25, 0x80	; 128
    2600:	99 23       	and	r25, r25
    2602:	24 f4       	brge	.+8      	; 0x260c <newSort+0x66>
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	8e 6f       	ori	r24, 0xFE	; 254
    2608:	9f 6f       	ori	r25, 0xFF	; 255
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    260e:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    2610:	d0 93 8a 02 	sts	0x028A, r29
    2614:	c0 93 89 02 	sts	0x0289, r28
		if(arm[0]==arm[1] && (visited[a1]==0 ||(term[a1][0] != -1 && term[a1][1] != -1)))
    2618:	2e 17       	cp	r18, r30
    261a:	3f 07       	cpc	r19, r31
    261c:	61 f5       	brne	.+88     	; 0x2676 <newSort+0xd0>
    261e:	de 01       	movw	r26, r28
    2620:	aa 0f       	add	r26, r26
    2622:	bb 1f       	adc	r27, r27
    2624:	aa 59       	subi	r26, 0x9A	; 154
    2626:	bd 4f       	sbci	r27, 0xFD	; 253
    2628:	0d 90       	ld	r0, X+
    262a:	bc 91       	ld	r27, X
    262c:	a0 2d       	mov	r26, r0
    262e:	ab 2b       	or	r26, r27
    2630:	c9 f0       	breq	.+50     	; 0x2664 <newSort+0xbe>
    2632:	de 01       	movw	r26, r28
    2634:	aa 0f       	add	r26, r26
    2636:	bb 1f       	adc	r27, r27
    2638:	aa 0f       	add	r26, r26
    263a:	bb 1f       	adc	r27, r27
    263c:	a3 57       	subi	r26, 0x73	; 115
    263e:	bd 4f       	sbci	r27, 0xFD	; 253
    2640:	0d 90       	ld	r0, X+
    2642:	bc 91       	ld	r27, X
    2644:	a0 2d       	mov	r26, r0
    2646:	11 96       	adiw	r26, 0x01	; 1
    2648:	b1 f0       	breq	.+44     	; 0x2676 <newSort+0xd0>
    264a:	de 01       	movw	r26, r28
    264c:	aa 0f       	add	r26, r26
    264e:	bb 1f       	adc	r27, r27
    2650:	aa 0f       	add	r26, r26
    2652:	bb 1f       	adc	r27, r27
    2654:	a3 57       	subi	r26, 0x73	; 115
    2656:	bd 4f       	sbci	r27, 0xFD	; 253
    2658:	12 96       	adiw	r26, 0x02	; 2
    265a:	0d 90       	ld	r0, X+
    265c:	bc 91       	ld	r27, X
    265e:	a0 2d       	mov	r26, r0
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	49 f0       	breq	.+18     	; 0x2676 <newSort+0xd0>
		{
			if(a1== 0 || a1==3)
    2664:	20 97       	sbiw	r28, 0x00	; 0
    2666:	19 f0       	breq	.+6      	; 0x266e <newSort+0xc8>
    2668:	23 97       	sbiw	r28, 0x03	; 3
    266a:	09 f0       	breq	.+2      	; 0x266e <newSort+0xc8>
    266c:	28 c1       	rjmp	.+592    	; 0x28be <newSort+0x318>
				sortDrop(1,t1);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	5a df       	rcall	.-332    	; 0x2528 <sortDrop>
    2674:	24 c1       	rjmp	.+584    	; 0x28be <newSort+0x318>
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    2676:	2f 3f       	cpi	r18, 0xFF	; 255
    2678:	af ef       	ldi	r26, 0xFF	; 255
    267a:	3a 07       	cpc	r19, r26
    267c:	c1 f1       	breq	.+112    	; 0x26ee <newSort+0x148>
    267e:	de 01       	movw	r26, r28
    2680:	aa 0f       	add	r26, r26
    2682:	bb 1f       	adc	r27, r27
    2684:	aa 0f       	add	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	a3 57       	subi	r26, 0x73	; 115
    268a:	bd 4f       	sbci	r27, 0xFD	; 253
    268c:	0d 90       	ld	r0, X+
    268e:	bc 91       	ld	r27, X
    2690:	a0 2d       	mov	r26, r0
    2692:	11 96       	adiw	r26, 0x01	; 1
    2694:	51 f0       	breq	.+20     	; 0x26aa <newSort+0x104>
    2696:	cc 0f       	add	r28, r28
    2698:	dd 1f       	adc	r29, r29
    269a:	cc 0f       	add	r28, r28
    269c:	dd 1f       	adc	r29, r29
    269e:	c3 57       	subi	r28, 0x73	; 115
    26a0:	dd 4f       	sbci	r29, 0xFD	; 253
    26a2:	aa 81       	ldd	r26, Y+2	; 0x02
    26a4:	bb 81       	ldd	r27, Y+3	; 0x03
    26a6:	11 96       	adiw	r26, 0x01	; 1
    26a8:	11 f5       	brne	.+68     	; 0x26ee <newSort+0x148>
		{
			if (arm[1] == -1)
    26aa:	31 96       	adiw	r30, 0x01	; 1
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <newSort+0x10a>
    26ae:	07 c1       	rjmp	.+526    	; 0x28be <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    26b0:	9b 01       	movw	r18, r22
    26b2:	22 0f       	add	r18, r18
    26b4:	33 1f       	adc	r19, r19
    26b6:	f9 01       	movw	r30, r18
    26b8:	eb 57       	subi	r30, 0x7B	; 123
    26ba:	fd 4f       	sbci	r31, 0xFD	; 253
    26bc:	40 81       	ld	r20, Z
    26be:	51 81       	ldd	r21, Z+1	; 0x01
    26c0:	f9 01       	movw	r30, r18
    26c2:	e1 56       	subi	r30, 0x61	; 97
    26c4:	fd 4f       	sbci	r31, 0xFD	; 253
    26c6:	20 81       	ld	r18, Z
    26c8:	31 81       	ldd	r19, Z+1	; 0x01
    26ca:	42 17       	cp	r20, r18
    26cc:	53 07       	cpc	r21, r19
    26ce:	59 f0       	breq	.+22     	; 0x26e6 <newSort+0x140>
    26d0:	fc 01       	movw	r30, r24
    26d2:	ee 0f       	add	r30, r30
    26d4:	ff 1f       	adc	r31, r31
    26d6:	e1 56       	subi	r30, 0x61	; 97
    26d8:	fd 4f       	sbci	r31, 0xFD	; 253
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	48 17       	cp	r20, r24
    26e0:	59 07       	cpc	r21, r25
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <newSort+0x140>
    26e4:	ec c0       	rjmp	.+472    	; 0x28be <newSort+0x318>
					pickSort(1, t1);
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	da de       	rcall	.-588    	; 0x24a0 <pickSort>
    26ec:	e8 c0       	rjmp	.+464    	; 0x28be <newSort+0x318>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    26ee:	ef 3f       	cpi	r30, 0xFF	; 255
    26f0:	af ef       	ldi	r26, 0xFF	; 255
    26f2:	fa 07       	cpc	r31, r26
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <newSort+0x152>
    26f6:	51 c0       	rjmp	.+162    	; 0x279a <newSort+0x1f4>
    26f8:	da 01       	movw	r26, r20
    26fa:	aa 0f       	add	r26, r26
    26fc:	bb 1f       	adc	r27, r27
    26fe:	aa 0f       	add	r26, r26
    2700:	bb 1f       	adc	r27, r27
    2702:	a3 57       	subi	r26, 0x73	; 115
    2704:	bd 4f       	sbci	r27, 0xFD	; 253
    2706:	0d 90       	ld	r0, X+
    2708:	bc 91       	ld	r27, X
    270a:	a0 2d       	mov	r26, r0
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	09 f4       	brne	.+2      	; 0x2712 <newSort+0x16c>
    2710:	0a c1       	rjmp	.+532    	; 0x2926 <newSort+0x380>
    2712:	da 01       	movw	r26, r20
    2714:	aa 0f       	add	r26, r26
    2716:	bb 1f       	adc	r27, r27
    2718:	aa 0f       	add	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	a3 57       	subi	r26, 0x73	; 115
    271e:	bd 4f       	sbci	r27, 0xFD	; 253
    2720:	12 96       	adiw	r26, 0x02	; 2
    2722:	0d 90       	ld	r0, X+
    2724:	bc 91       	ld	r27, X
    2726:	a0 2d       	mov	r26, r0
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	b9 f5       	brne	.+110    	; 0x279a <newSort+0x1f4>
    272c:	ea c0       	rjmp	.+468    	; 0x2902 <newSort+0x35c>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    272e:	2f 3f       	cpi	r18, 0xFF	; 255
    2730:	3f 4f       	sbci	r19, 0xFF	; 255
    2732:	09 f0       	breq	.+2      	; 0x2736 <newSort+0x190>
    2734:	c4 c0       	rjmp	.+392    	; 0x28be <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    2736:	9b 01       	movw	r18, r22
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	f9 01       	movw	r30, r18
    273e:	eb 57       	subi	r30, 0x7B	; 123
    2740:	fd 4f       	sbci	r31, 0xFD	; 253
    2742:	40 81       	ld	r20, Z
    2744:	51 81       	ldd	r21, Z+1	; 0x01
    2746:	f9 01       	movw	r30, r18
    2748:	e1 56       	subi	r30, 0x61	; 97
    274a:	fd 4f       	sbci	r31, 0xFD	; 253
    274c:	20 81       	ld	r18, Z
    274e:	31 81       	ldd	r19, Z+1	; 0x01
    2750:	42 17       	cp	r20, r18
    2752:	53 07       	cpc	r21, r19
    2754:	09 f0       	breq	.+2      	; 0x2758 <newSort+0x1b2>
    2756:	b3 c0       	rjmp	.+358    	; 0x28be <newSort+0x318>
    2758:	fc 01       	movw	r30, r24
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	e1 56       	subi	r30, 0x61	; 97
    2760:	fd 4f       	sbci	r31, 0xFD	; 253
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	48 17       	cp	r20, r24
    2768:	59 07       	cpc	r21, r25
    276a:	09 f0       	breq	.+2      	; 0x276e <newSort+0x1c8>
    276c:	a8 c0       	rjmp	.+336    	; 0x28be <newSort+0x318>
						pickSort(1, t1);
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	96 de       	rcall	.-724    	; 0x24a0 <pickSort>
    2774:	a4 c0       	rjmp	.+328    	; 0x28be <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    2776:	fb 01       	movw	r30, r22
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	eb 57       	subi	r30, 0x7B	; 123
    277e:	fd 4f       	sbci	r31, 0xFD	; 253
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	09 f0       	breq	.+2      	; 0x278a <newSort+0x1e4>
    2788:	9a c0       	rjmp	.+308    	; 0x28be <newSort+0x318>
    278a:	2f 3f       	cpi	r18, 0xFF	; 255
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	09 f4       	brne	.+2      	; 0x2792 <newSort+0x1ec>
    2790:	96 c0       	rjmp	.+300    	; 0x28be <newSort+0x318>
				sortDrop(1, t1);
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	c8 de       	rcall	.-624    	; 0x2528 <sortDrop>
    2798:	92 c0       	rjmp	.+292    	; 0x28be <newSort+0x318>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    279a:	2f 3f       	cpi	r18, 0xFF	; 255
    279c:	1f ef       	ldi	r17, 0xFF	; 255
    279e:	31 07       	cpc	r19, r17
    27a0:	a1 f0       	breq	.+40     	; 0x27ca <newSort+0x224>
    27a2:	db 01       	movw	r26, r22
    27a4:	aa 0f       	add	r26, r26
    27a6:	bb 1f       	adc	r27, r27
    27a8:	ab 57       	subi	r26, 0x7B	; 123
    27aa:	bd 4f       	sbci	r27, 0xFD	; 253
    27ac:	8d 91       	ld	r24, X+
    27ae:	9c 91       	ld	r25, X
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	31 f4       	brne	.+12     	; 0x27c0 <newSort+0x21a>
    27b4:	31 96       	adiw	r30, 0x01	; 1
    27b6:	21 f0       	breq	.+8      	; 0x27c0 <newSort+0x21a>
			sortDrop(1, t1);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	b5 de       	rcall	.-662    	; 0x2528 <sortDrop>
    27be:	7f c0       	rjmp	.+254    	; 0x28be <newSort+0x318>
		else if (arm[0] != -1)
			ct = arm[0];
    27c0:	30 93 8a 02 	sts	0x028A, r19
    27c4:	20 93 89 02 	sts	0x0289, r18
    27c8:	7a c0       	rjmp	.+244    	; 0x28be <newSort+0x318>
		else ct = arm[1];
    27ca:	f0 93 8a 02 	sts	0x028A, r31
    27ce:	e0 93 89 02 	sts	0x0289, r30
    27d2:	75 c0       	rjmp	.+234    	; 0x28be <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    27d4:	a8 01       	movw	r20, r16
    27d6:	44 0f       	add	r20, r20
    27d8:	55 1f       	adc	r21, r21
    27da:	fa 01       	movw	r30, r20
    27dc:	eb 57       	subi	r30, 0x7B	; 123
    27de:	fd 4f       	sbci	r31, 0xFD	; 253
    27e0:	20 81       	ld	r18, Z
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
    27e4:	fa 01       	movw	r30, r20
    27e6:	e1 56       	subi	r30, 0x61	; 97
    27e8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ea:	40 81       	ld	r20, Z
    27ec:	51 81       	ldd	r21, Z+1	; 0x01
    27ee:	24 17       	cp	r18, r20
    27f0:	35 07       	cpc	r19, r21
    27f2:	51 f0       	breq	.+20     	; 0x2808 <newSort+0x262>
    27f4:	fc 01       	movw	r30, r24
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	e1 56       	subi	r30, 0x61	; 97
    27fc:	fd 4f       	sbci	r31, 0xFD	; 253
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	26 17       	cp	r18, r22
    2804:	37 07       	cpc	r19, r23
    2806:	81 f4       	brne	.+32     	; 0x2828 <newSort+0x282>
    2808:	2f 3f       	cpi	r18, 0xFF	; 255
    280a:	af ef       	ldi	r26, 0xFF	; 255
    280c:	3a 07       	cpc	r19, r26
    280e:	31 f1       	breq	.+76     	; 0x285c <newSort+0x2b6>
			ct = indicator[sort[t1]];
    2810:	f9 01       	movw	r30, r18
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	e9 55       	subi	r30, 0x59	; 89
    2818:	fd 4f       	sbci	r31, 0xFD	; 253
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	90 93 8a 02 	sts	0x028A, r25
    2822:	80 93 89 02 	sts	0x0289, r24
    2826:	4b c0       	rjmp	.+150    	; 0x28be <newSort+0x318>
		else if (sort[t1] != -1)
    2828:	2f 3f       	cpi	r18, 0xFF	; 255
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	b9 f0       	breq	.+46     	; 0x285c <newSort+0x2b6>
		{
			pickSort(0, t1);
    282e:	b8 01       	movw	r22, r16
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	35 de       	rcall	.-918    	; 0x24a0 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    2836:	0f 5f       	subi	r16, 0xFF	; 255
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	01 70       	andi	r16, 0x01	; 1
    283c:	10 78       	andi	r17, 0x80	; 128
    283e:	11 23       	and	r17, r17
    2840:	34 f4       	brge	.+12     	; 0x284e <newSort+0x2a8>
    2842:	01 50       	subi	r16, 0x01	; 1
    2844:	11 09       	sbc	r17, r1
    2846:	0e 6f       	ori	r16, 0xFE	; 254
    2848:	1f 6f       	ori	r17, 0xFF	; 255
    284a:	0f 5f       	subi	r16, 0xFF	; 255
    284c:	1f 4f       	sbci	r17, 0xFF	; 255
    284e:	0c 5f       	subi	r16, 0xFC	; 252
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	10 93 8a 02 	sts	0x028A, r17
    2856:	00 93 89 02 	sts	0x0289, r16
    285a:	31 c0       	rjmp	.+98     	; 0x28be <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    285c:	f8 01       	movw	r30, r16
    285e:	ee 0f       	add	r30, r30
    2860:	ff 1f       	adc	r31, r31
    2862:	ea 59       	subi	r30, 0x9A	; 154
    2864:	fd 4f       	sbci	r31, 0xFD	; 253
    2866:	20 81       	ld	r18, Z
    2868:	31 81       	ldd	r19, Z+1	; 0x01
    286a:	21 30       	cpi	r18, 0x01	; 1
    286c:	31 05       	cpc	r19, r1
    286e:	19 f5       	brne	.+70     	; 0x28b6 <newSort+0x310>
    2870:	f8 01       	movw	r30, r16
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	e3 57       	subi	r30, 0x73	; 115
    287c:	fd 4f       	sbci	r31, 0xFD	; 253
    287e:	20 81       	ld	r18, Z
    2880:	31 81       	ldd	r19, Z+1	; 0x01
    2882:	42 17       	cp	r20, r18
    2884:	53 07       	cpc	r21, r19
    2886:	19 f0       	breq	.+6      	; 0x288e <newSort+0x2e8>
    2888:	2f 3f       	cpi	r18, 0xFF	; 255
    288a:	3f 4f       	sbci	r19, 0xFF	; 255
    288c:	a1 f4       	brne	.+40     	; 0x28b6 <newSort+0x310>
    288e:	f8 01       	movw	r30, r16
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	ee 0f       	add	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	e3 57       	subi	r30, 0x73	; 115
    289a:	fd 4f       	sbci	r31, 0xFD	; 253
    289c:	22 81       	ldd	r18, Z+2	; 0x02
    289e:	33 81       	ldd	r19, Z+3	; 0x03
    28a0:	42 17       	cp	r20, r18
    28a2:	53 07       	cpc	r21, r19
    28a4:	19 f0       	breq	.+6      	; 0x28ac <newSort+0x306>
    28a6:	2f 3f       	cpi	r18, 0xFF	; 255
    28a8:	3f 4f       	sbci	r19, 0xFF	; 255
    28aa:	29 f4       	brne	.+10     	; 0x28b6 <newSort+0x310>
			ct = t2;
    28ac:	90 93 8a 02 	sts	0x028A, r25
    28b0:	80 93 89 02 	sts	0x0289, r24
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <newSort+0x318>
		else ct = t1;
    28b6:	10 93 8a 02 	sts	0x028A, r17
    28ba:	00 93 89 02 	sts	0x0289, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    28be:	80 91 89 02 	lds	r24, 0x0289
    28c2:	90 91 8a 02 	lds	r25, 0x028A
    28c6:	02 96       	adiw	r24, 0x02	; 2
    28c8:	83 70       	andi	r24, 0x03	; 3
    28ca:	90 78       	andi	r25, 0x80	; 128
    28cc:	99 23       	and	r25, r25
    28ce:	24 f4       	brge	.+8      	; 0x28d8 <newSort+0x332>
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	8c 6f       	ori	r24, 0xFC	; 252
    28d4:	9f 6f       	ori	r25, 0xFF	; 255
    28d6:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    28d8:	90 93 b0 02 	sts	0x02B0, r25
    28dc:	80 93 af 02 	sts	0x02AF, r24
    28e0:	2e c0       	rjmp	.+92     	; 0x293e <newSort+0x398>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    28e2:	80 91 89 02 	lds	r24, 0x0289
    28e6:	90 91 8a 02 	lds	r25, 0x028A
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	62 e0       	ldi	r22, 0x02	; 2
    28ee:	70 e0       	ldi	r23, 0x00	; 0
    28f0:	3b d4       	rcall	.+2166   	; 0x3168 <__divmodhi4>
    28f2:	8c 01       	movw	r16, r24
    28f4:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    28f6:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    28f8:	2f 3f       	cpi	r18, 0xFF	; 255
    28fa:	af ef       	ldi	r26, 0xFF	; 255
    28fc:	3a 07       	cpc	r19, r26
    28fe:	c1 f4       	brne	.+48     	; 0x2930 <newSort+0x38a>
    2900:	69 cf       	rjmp	.-302    	; 0x27d4 <newSort+0x22e>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2902:	50 93 8a 02 	sts	0x028A, r21
    2906:	40 93 89 02 	sts	0x0289, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    290a:	fa 01       	movw	r30, r20
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	e3 57       	subi	r30, 0x73	; 115
    2916:	fd 4f       	sbci	r31, 0xFD	; 253
    2918:	42 81       	ldd	r20, Z+2	; 0x02
    291a:	53 81       	ldd	r21, Z+3	; 0x03
    291c:	4f 3f       	cpi	r20, 0xFF	; 255
    291e:	5f 4f       	sbci	r21, 0xFF	; 255
    2920:	09 f0       	breq	.+2      	; 0x2924 <newSort+0x37e>
    2922:	29 cf       	rjmp	.-430    	; 0x2776 <newSort+0x1d0>
    2924:	04 cf       	rjmp	.-504    	; 0x272e <newSort+0x188>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2926:	50 93 8a 02 	sts	0x028A, r21
    292a:	40 93 89 02 	sts	0x0289, r20
    292e:	ff ce       	rjmp	.-514    	; 0x272e <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    2930:	d0 93 8a 02 	sts	0x028A, r29
    2934:	c0 93 89 02 	sts	0x0289, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    2938:	4e ef       	ldi	r20, 0xFE	; 254
    293a:	5f ef       	ldi	r21, 0xFF	; 255
    293c:	9c ce       	rjmp	.-712    	; 0x2676 <newSort+0xd0>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	08 95       	ret

00002948 <sortCheck>:
void sortCheck()
{
    2948:	8f 92       	push	r8
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    2960:	40 91 89 02 	lds	r20, 0x0289
    2964:	50 91 8a 02 	lds	r21, 0x028A
    2968:	42 30       	cpi	r20, 0x02	; 2
    296a:	51 05       	cpc	r21, r1
    296c:	30 f4       	brcc	.+12     	; 0x297a <sortCheck+0x32>
    296e:	80 91 50 02 	lds	r24, 0x0250
    2972:	90 91 51 02 	lds	r25, 0x0251
    2976:	02 97       	sbiw	r24, 0x02	; 2
    2978:	79 f0       	breq	.+30     	; 0x2998 <sortCheck+0x50>
    297a:	ca 01       	movw	r24, r20
    297c:	02 97       	sbiw	r24, 0x02	; 2
    297e:	02 97       	sbiw	r24, 0x02	; 2
    2980:	80 f4       	brcc	.+32     	; 0x29a2 <sortCheck+0x5a>
    2982:	80 91 50 02 	lds	r24, 0x0250
    2986:	90 91 51 02 	lds	r25, 0x0251
    298a:	89 2b       	or	r24, r25
    298c:	79 f0       	breq	.+30     	; 0x29ac <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    298e:	01 e0       	ldi	r16, 0x01	; 1
    2990:	10 e0       	ldi	r17, 0x00	; 0
    2992:	c0 e0       	ldi	r28, 0x00	; 0
    2994:	d0 e0       	ldi	r29, 0x00	; 0
    2996:	0e c0       	rjmp	.+28     	; 0x29b4 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2998:	00 e0       	ldi	r16, 0x00	; 0
    299a:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    299c:	c1 e0       	ldi	r28, 0x01	; 1
    299e:	d0 e0       	ldi	r29, 0x00	; 0
    29a0:	09 c0       	rjmp	.+18     	; 0x29b4 <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    29a2:	01 e0       	ldi	r16, 0x01	; 1
    29a4:	10 e0       	ldi	r17, 0x00	; 0
    29a6:	c0 e0       	ldi	r28, 0x00	; 0
    29a8:	d0 e0       	ldi	r29, 0x00	; 0
    29aa:	04 c0       	rjmp	.+8      	; 0x29b4 <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    29ac:	00 e0       	ldi	r16, 0x00	; 0
    29ae:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    29b0:	c1 e0       	ldi	r28, 0x01	; 1
    29b2:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    29b4:	9a 01       	movw	r18, r20
    29b6:	21 70       	andi	r18, 0x01	; 1
    29b8:	30 78       	andi	r19, 0x80	; 128
    29ba:	33 23       	and	r19, r19
    29bc:	34 f4       	brge	.+12     	; 0x29ca <sortCheck+0x82>
    29be:	21 50       	subi	r18, 0x01	; 1
    29c0:	31 09       	sbc	r19, r1
    29c2:	2e 6f       	ori	r18, 0xFE	; 254
    29c4:	3f 6f       	ori	r19, 0xFF	; 255
    29c6:	2f 5f       	subi	r18, 0xFF	; 255
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	b2 2e       	mov	r11, r18
    29cc:	a3 2e       	mov	r10, r19
    29ce:	f9 01       	movw	r30, r18
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	eb 57       	subi	r30, 0x7B	; 123
    29d6:	fd 4f       	sbci	r31, 0xFD	; 253
    29d8:	20 81       	ld	r18, Z
    29da:	31 81       	ldd	r19, Z+1	; 0x01
    29dc:	fa 01       	movw	r30, r20
    29de:	ee 0f       	add	r30, r30
    29e0:	ff 1f       	adc	r31, r31
    29e2:	e1 56       	subi	r30, 0x61	; 97
    29e4:	fd 4f       	sbci	r31, 0xFD	; 253
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	28 17       	cp	r18, r24
    29ec:	39 07       	cpc	r19, r25
    29ee:	79 f0       	breq	.+30     	; 0x2a0e <sortCheck+0xc6>
    29f0:	80 91 af 02 	lds	r24, 0x02AF
    29f4:	90 91 b0 02 	lds	r25, 0x02B0
    29f8:	fc 01       	movw	r30, r24
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	e1 56       	subi	r30, 0x61	; 97
    2a00:	fd 4f       	sbci	r31, 0xFD	; 253
    2a02:	40 81       	ld	r20, Z
    2a04:	51 81       	ldd	r21, Z+1	; 0x01
    2a06:	24 17       	cp	r18, r20
    2a08:	35 07       	cpc	r19, r21
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <sortCheck+0xc6>
    2a0c:	a6 c0       	rjmp	.+332    	; 0x2b5a <sortCheck+0x212>
	{
		if (armCount>0)
    2a0e:	80 91 03 02 	lds	r24, 0x0203
    2a12:	90 91 04 02 	lds	r25, 0x0204
    2a16:	18 16       	cp	r1, r24
    2a18:	19 06       	cpc	r1, r25
    2a1a:	0c f0       	brlt	.+2      	; 0x2a1e <sortCheck+0xd6>
    2a1c:	95 c0       	rjmp	.+298    	; 0x2b48 <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    2a1e:	f9 01       	movw	r30, r18
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	e9 55       	subi	r30, 0x59	; 89
    2a26:	fd 4f       	sbci	r31, 0xFD	; 253
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	70 93 8a 02 	sts	0x028A, r23
    2a30:	60 93 89 02 	sts	0x0289, r22
			if (arm[arm0] == -1)
    2a34:	fe 01       	movw	r30, r28
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	ed 54       	subi	r30, 0x4D	; 77
    2a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	01 96       	adiw	r24, 0x01	; 1
    2a44:	69 f4       	brne	.+26     	; 0x2a60 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    2a46:	61 70       	andi	r22, 0x01	; 1
    2a48:	70 78       	andi	r23, 0x80	; 128
    2a4a:	77 23       	and	r23, r23
    2a4c:	34 f4       	brge	.+12     	; 0x2a5a <sortCheck+0x112>
    2a4e:	61 50       	subi	r22, 0x01	; 1
    2a50:	71 09       	sbc	r23, r1
    2a52:	6e 6f       	ori	r22, 0xFE	; 254
    2a54:	7f 6f       	ori	r23, 0xFF	; 255
    2a56:	6f 5f       	subi	r22, 0xFF	; 255
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	21 dd       	rcall	.-1470   	; 0x24a0 <pickSort>
    2a5e:	15 c0       	rjmp	.+42     	; 0x2a8a <sortCheck+0x142>
			else if (arm[arm1] == -1)
    2a60:	f8 01       	movw	r30, r16
    2a62:	ee 0f       	add	r30, r30
    2a64:	ff 1f       	adc	r31, r31
    2a66:	ed 54       	subi	r30, 0x4D	; 77
    2a68:	fd 4f       	sbci	r31, 0xFD	; 253
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	61 f4       	brne	.+24     	; 0x2a8a <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    2a72:	61 70       	andi	r22, 0x01	; 1
    2a74:	70 78       	andi	r23, 0x80	; 128
    2a76:	77 23       	and	r23, r23
    2a78:	34 f4       	brge	.+12     	; 0x2a86 <sortCheck+0x13e>
    2a7a:	61 50       	subi	r22, 0x01	; 1
    2a7c:	71 09       	sbc	r23, r1
    2a7e:	6e 6f       	ori	r22, 0xFE	; 254
    2a80:	7f 6f       	ori	r23, 0xFF	; 255
    2a82:	6f 5f       	subi	r22, 0xFF	; 255
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	c8 01       	movw	r24, r16
    2a88:	0b dd       	rcall	.-1514   	; 0x24a0 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    2a8a:	80 91 03 02 	lds	r24, 0x0203
    2a8e:	90 91 04 02 	lds	r25, 0x0204
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <sortCheck+0x150>
    2a96:	69 c1       	rjmp	.+722    	; 0x2d6a <sortCheck+0x422>
    2a98:	80 91 89 02 	lds	r24, 0x0289
    2a9c:	90 91 8a 02 	lds	r25, 0x028A
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	ee 0f       	add	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	ee 0f       	add	r30, r30
    2aa8:	ff 1f       	adc	r31, r31
    2aaa:	e3 57       	subi	r30, 0x73	; 115
    2aac:	fd 4f       	sbci	r31, 0xFD	; 253
    2aae:	20 81       	ld	r18, Z
    2ab0:	31 81       	ldd	r19, Z+1	; 0x01
    2ab2:	2f 3f       	cpi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <sortCheck+0x172>
    2ab8:	58 c1       	rjmp	.+688    	; 0x2d6a <sortCheck+0x422>
    2aba:	fc 01       	movw	r30, r24
    2abc:	ee 0f       	add	r30, r30
    2abe:	ff 1f       	adc	r31, r31
    2ac0:	ee 0f       	add	r30, r30
    2ac2:	ff 1f       	adc	r31, r31
    2ac4:	e3 57       	subi	r30, 0x73	; 115
    2ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac8:	22 81       	ldd	r18, Z+2	; 0x02
    2aca:	33 81       	ldd	r19, Z+3	; 0x03
    2acc:	2f 3f       	cpi	r18, 0xFF	; 255
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <sortCheck+0x18c>
    2ad2:	4b c1       	rjmp	.+662    	; 0x2d6a <sortCheck+0x422>
    2ad4:	9c 01       	movw	r18, r24
    2ad6:	21 70       	andi	r18, 0x01	; 1
    2ad8:	30 78       	andi	r19, 0x80	; 128
    2ada:	33 23       	and	r19, r19
    2adc:	34 f4       	brge	.+12     	; 0x2aea <sortCheck+0x1a2>
    2ade:	21 50       	subi	r18, 0x01	; 1
    2ae0:	31 09       	sbc	r19, r1
    2ae2:	2e 6f       	ori	r18, 0xFE	; 254
    2ae4:	3f 6f       	ori	r19, 0xFF	; 255
    2ae6:	2f 5f       	subi	r18, 0xFF	; 255
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	62 2f       	mov	r22, r18
    2aec:	73 2f       	mov	r23, r19
    2aee:	f9 01       	movw	r30, r18
    2af0:	ee 0f       	add	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	eb 57       	subi	r30, 0x7B	; 123
    2af6:	fd 4f       	sbci	r31, 0xFD	; 253
    2af8:	20 81       	ld	r18, Z
    2afa:	31 81       	ldd	r19, Z+1	; 0x01
    2afc:	2f 3f       	cpi	r18, 0xFF	; 255
    2afe:	3f 4f       	sbci	r19, 0xFF	; 255
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <sortCheck+0x1bc>
    2b02:	33 c1       	rjmp	.+614    	; 0x2d6a <sortCheck+0x422>
			{
				if (arm[arm0] == color[ct])
    2b04:	fc 01       	movw	r30, r24
    2b06:	ee 0f       	add	r30, r30
    2b08:	ff 1f       	adc	r31, r31
    2b0a:	e1 56       	subi	r30, 0x61	; 97
    2b0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
    2b12:	fe 01       	movw	r30, r28
    2b14:	ee 0f       	add	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	ed 54       	subi	r30, 0x4D	; 77
    2b1a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b1c:	20 81       	ld	r18, Z
    2b1e:	31 81       	ldd	r19, Z+1	; 0x01
    2b20:	28 17       	cp	r18, r24
    2b22:	39 07       	cpc	r19, r25
    2b24:	19 f4       	brne	.+6      	; 0x2b2c <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    2b26:	c8 01       	movw	r24, r16
    2b28:	ff dc       	rcall	.-1538   	; 0x2528 <sortDrop>
    2b2a:	1f c1       	rjmp	.+574    	; 0x2d6a <sortCheck+0x422>
				else if (arm[arm1] == color[ct])
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	ee 0f       	add	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	ed 54       	subi	r30, 0x4D	; 77
    2b34:	fd 4f       	sbci	r31, 0xFD	; 253
    2b36:	20 81       	ld	r18, Z
    2b38:	31 81       	ldd	r19, Z+1	; 0x01
    2b3a:	82 17       	cp	r24, r18
    2b3c:	93 07       	cpc	r25, r19
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <sortCheck+0x1fa>
    2b40:	14 c1       	rjmp	.+552    	; 0x2d6a <sortCheck+0x422>
					sortDrop(arm0, ct % 2);
    2b42:	ce 01       	movw	r24, r28
    2b44:	f1 dc       	rcall	.-1566   	; 0x2528 <sortDrop>
    2b46:	11 c1       	rjmp	.+546    	; 0x2d6a <sortCheck+0x422>
			}
		}
		else ct = adj;
    2b48:	80 91 af 02 	lds	r24, 0x02AF
    2b4c:	90 91 b0 02 	lds	r25, 0x02B0
    2b50:	90 93 8a 02 	sts	0x028A, r25
    2b54:	80 93 89 02 	sts	0x0289, r24
    2b58:	08 c1       	rjmp	.+528    	; 0x2d6a <sortCheck+0x422>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ee 0f       	add	r30, r30
    2b5e:	ff 1f       	adc	r31, r31
    2b60:	ed 54       	subi	r30, 0x4D	; 77
    2b62:	fd 4f       	sbci	r31, 0xFD	; 253
    2b64:	01 90       	ld	r0, Z+
    2b66:	f0 81       	ld	r31, Z
    2b68:	e0 2d       	mov	r30, r0
    2b6a:	4e 17       	cp	r20, r30
    2b6c:	5f 07       	cpc	r21, r31
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <sortCheck+0x22a>
    2b70:	8d c0       	rjmp	.+282    	; 0x2c8c <sortCheck+0x344>
    2b72:	d8 01       	movw	r26, r16
    2b74:	aa 0f       	add	r26, r26
    2b76:	bb 1f       	adc	r27, r27
    2b78:	ad 54       	subi	r26, 0x4D	; 77
    2b7a:	bd 4f       	sbci	r27, 0xFD	; 253
    2b7c:	8d 90       	ld	r8, X+
    2b7e:	9c 90       	ld	r9, X
    2b80:	48 15       	cp	r20, r8
    2b82:	59 05       	cpc	r21, r9
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <sortCheck+0x240>
    2b86:	82 c0       	rjmp	.+260    	; 0x2c8c <sortCheck+0x344>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2b88:	e0 90 03 02 	lds	r14, 0x0203
    2b8c:	f0 90 04 02 	lds	r15, 0x0204
    2b90:	e1 14       	cp	r14, r1
    2b92:	f1 04       	cpc	r15, r1
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <sortCheck+0x250>
    2b96:	4c c0       	rjmp	.+152    	; 0x2c30 <sortCheck+0x2e8>
    2b98:	b1 e0       	ldi	r27, 0x01	; 1
    2b9a:	eb 16       	cp	r14, r27
    2b9c:	f1 04       	cpc	r15, r1
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <sortCheck+0x262>
    2ba0:	2f 3f       	cpi	r18, 0xFF	; 255
    2ba2:	6f ef       	ldi	r22, 0xFF	; 255
    2ba4:	36 07       	cpc	r19, r22
    2ba6:	b1 f5       	brne	.+108    	; 0x2c14 <sortCheck+0x2cc>
    2ba8:	09 c0       	rjmp	.+18     	; 0x2bbc <sortCheck+0x274>
    2baa:	67 01       	movw	r12, r14
    2bac:	71 e0       	ldi	r23, 0x01	; 1
    2bae:	c7 1a       	sub	r12, r23
    2bb0:	d1 08       	sbc	r13, r1
    2bb2:	a2 e0       	ldi	r26, 0x02	; 2
    2bb4:	ca 16       	cp	r12, r26
    2bb6:	d1 04       	cpc	r13, r1
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <sortCheck+0x274>
    2bba:	63 c0       	rjmp	.+198    	; 0x2c82 <sortCheck+0x33a>
    2bbc:	6c 01       	movw	r12, r24
    2bbe:	cc 0c       	add	r12, r12
    2bc0:	dd 1c       	adc	r13, r13
    2bc2:	cc 0c       	add	r12, r12
    2bc4:	dd 1c       	adc	r13, r13
    2bc6:	b6 01       	movw	r22, r12
    2bc8:	63 57       	subi	r22, 0x73	; 115
    2bca:	7d 4f       	sbci	r23, 0xFD	; 253
    2bcc:	db 01       	movw	r26, r22
    2bce:	cd 90       	ld	r12, X+
    2bd0:	dc 90       	ld	r13, X
    2bd2:	4c 15       	cp	r20, r12
    2bd4:	5d 05       	cpc	r21, r13
    2bd6:	21 f0       	breq	.+8      	; 0x2be0 <sortCheck+0x298>
    2bd8:	cd 20       	and	r12, r13
    2bda:	c0 94       	com	r12
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <sortCheck+0x298>
    2bde:	51 c0       	rjmp	.+162    	; 0x2c82 <sortCheck+0x33a>
    2be0:	6c 01       	movw	r12, r24
    2be2:	cc 0c       	add	r12, r12
    2be4:	dd 1c       	adc	r13, r13
    2be6:	cc 0c       	add	r12, r12
    2be8:	dd 1c       	adc	r13, r13
    2bea:	b6 01       	movw	r22, r12
    2bec:	63 57       	subi	r22, 0x73	; 115
    2bee:	7d 4f       	sbci	r23, 0xFD	; 253
    2bf0:	db 01       	movw	r26, r22
    2bf2:	12 96       	adiw	r26, 0x02	; 2
    2bf4:	cd 90       	ld	r12, X+
    2bf6:	dc 90       	ld	r13, X
    2bf8:	13 97       	sbiw	r26, 0x03	; 3
    2bfa:	4c 15       	cp	r20, r12
    2bfc:	5d 05       	cpc	r21, r13
    2bfe:	21 f0       	breq	.+8      	; 0x2c08 <sortCheck+0x2c0>
    2c00:	cd 20       	and	r12, r13
    2c02:	c0 94       	com	r12
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <sortCheck+0x2c0>
    2c06:	3d c0       	rjmp	.+122    	; 0x2c82 <sortCheck+0x33a>
		{
			if (armCount>0)
    2c08:	1e 14       	cp	r1, r14
    2c0a:	1f 04       	cpc	r1, r15
    2c0c:	8c f4       	brge	.+34     	; 0x2c30 <sortCheck+0x2e8>
			{
				if (sort[ct % 2] != -1)
    2c0e:	2f 3f       	cpi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	71 f0       	breq	.+28     	; 0x2c30 <sortCheck+0x2e8>
					if (arm[arm0] == -1)
    2c14:	31 96       	adiw	r30, 0x01	; 1
    2c16:	29 f4       	brne	.+10     	; 0x2c22 <sortCheck+0x2da>
						pickSort(arm0, ct % 2);
    2c18:	6b 2d       	mov	r22, r11
    2c1a:	7a 2d       	mov	r23, r10
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	40 dc       	rcall	.-1920   	; 0x24a0 <pickSort>
    2c20:	07 c0       	rjmp	.+14     	; 0x2c30 <sortCheck+0x2e8>
					else if (arm[arm1] == -1)
    2c22:	89 20       	and	r8, r9
    2c24:	80 94       	com	r8
    2c26:	21 f4       	brne	.+8      	; 0x2c30 <sortCheck+0x2e8>
						pickSort(arm1, ct % 2);
    2c28:	6b 2d       	mov	r22, r11
    2c2a:	7a 2d       	mov	r23, r10
    2c2c:	c8 01       	movw	r24, r16
    2c2e:	38 dc       	rcall	.-1936   	; 0x24a0 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    2c30:	80 91 89 02 	lds	r24, 0x0289
    2c34:	90 91 8a 02 	lds	r25, 0x028A
    2c38:	bc 01       	movw	r22, r24
    2c3a:	6f 5f       	subi	r22, 0xFF	; 255
    2c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3e:	61 70       	andi	r22, 0x01	; 1
    2c40:	70 78       	andi	r23, 0x80	; 128
    2c42:	77 23       	and	r23, r23
    2c44:	34 f4       	brge	.+12     	; 0x2c52 <sortCheck+0x30a>
    2c46:	61 50       	subi	r22, 0x01	; 1
    2c48:	71 09       	sbc	r23, r1
    2c4a:	6e 6f       	ori	r22, 0xFE	; 254
    2c4c:	7f 6f       	ori	r23, 0xFF	; 255
    2c4e:	6f 5f       	subi	r22, 0xFF	; 255
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	6c 5f       	subi	r22, 0xFC	; 252
    2c54:	7f 4f       	sbci	r23, 0xFF	; 255
    2c56:	81 70       	andi	r24, 0x01	; 1
    2c58:	90 78       	andi	r25, 0x80	; 128
    2c5a:	99 23       	and	r25, r25
    2c5c:	24 f4       	brge	.+8      	; 0x2c66 <sortCheck+0x31e>
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	8e 6f       	ori	r24, 0xFE	; 254
    2c62:	9f 6f       	ori	r25, 0xFF	; 255
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	04 96       	adiw	r24, 0x04	; 4
    2c68:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <traverseToSort>
			newSort();
    2c6c:	9c dc       	rcall	.-1736   	; 0x25a6 <newSort>
			if (ct == 4 || ct == 5)
    2c6e:	80 91 89 02 	lds	r24, 0x0289
    2c72:	90 91 8a 02 	lds	r25, 0x028A
    2c76:	04 97       	sbiw	r24, 0x04	; 4
    2c78:	02 97       	sbiw	r24, 0x02	; 2
    2c7a:	08 f0       	brcs	.+2      	; 0x2c7e <sortCheck+0x336>
    2c7c:	87 c0       	rjmp	.+270    	; 0x2d8c <sortCheck+0x444>
				newSort();
    2c7e:	93 dc       	rcall	.-1754   	; 0x25a6 <newSort>
    2c80:	85 c0       	rjmp	.+266    	; 0x2d8c <sortCheck+0x444>
			return;
		}
		else ct = adj;
    2c82:	90 93 8a 02 	sts	0x028A, r25
    2c86:	80 93 89 02 	sts	0x0289, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2c8a:	6f c0       	rjmp	.+222    	; 0x2d6a <sortCheck+0x422>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2c8c:	a0 91 03 02 	lds	r26, 0x0203
    2c90:	b0 91 04 02 	lds	r27, 0x0204
    2c94:	10 97       	sbiw	r26, 0x00	; 0
    2c96:	c1 f5       	brne	.+112    	; 0x2d08 <sortCheck+0x3c0>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	aa 0f       	add	r26, r26
    2c9c:	bb 1f       	adc	r27, r27
    2c9e:	aa 59       	subi	r26, 0x9A	; 154
    2ca0:	bd 4f       	sbci	r27, 0xFD	; 253
    2ca2:	0d 90       	ld	r0, X+
    2ca4:	bc 91       	ld	r27, X
    2ca6:	a0 2d       	mov	r26, r0
    2ca8:	a1 30       	cpi	r26, 0x01	; 1
    2caa:	b1 05       	cpc	r27, r1
    2cac:	d9 f4       	brne	.+54     	; 0x2ce4 <sortCheck+0x39c>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	aa 0f       	add	r26, r26
    2cb2:	bb 1f       	adc	r27, r27
    2cb4:	aa 0f       	add	r26, r26
    2cb6:	bb 1f       	adc	r27, r27
    2cb8:	a3 57       	subi	r26, 0x73	; 115
    2cba:	bd 4f       	sbci	r27, 0xFD	; 253
    2cbc:	0d 90       	ld	r0, X+
    2cbe:	bc 91       	ld	r27, X
    2cc0:	a0 2d       	mov	r26, r0
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <sortCheck+0x380>
    2cc6:	49 c0       	rjmp	.+146    	; 0x2d5a <sortCheck+0x412>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	aa 0f       	add	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	aa 0f       	add	r26, r26
    2cd0:	bb 1f       	adc	r27, r27
    2cd2:	a3 57       	subi	r26, 0x73	; 115
    2cd4:	bd 4f       	sbci	r27, 0xFD	; 253
    2cd6:	12 96       	adiw	r26, 0x02	; 2
    2cd8:	8d 91       	ld	r24, X+
    2cda:	9c 91       	ld	r25, X
    2cdc:	13 97       	sbiw	r26, 0x03	; 3
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	19 f4       	brne	.+6      	; 0x2ce8 <sortCheck+0x3a0>
    2ce2:	3b c0       	rjmp	.+118    	; 0x2d5a <sortCheck+0x412>
    2ce4:	ab 2b       	or	r26, r27
    2ce6:	c9 f5       	brne	.+114    	; 0x2d5a <sortCheck+0x412>
    2ce8:	2f 3f       	cpi	r18, 0xFF	; 255
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	b1 f5       	brne	.+108    	; 0x2d5a <sortCheck+0x412>
			if (arm[arm0] == color[adj])
    2cee:	4e 17       	cp	r20, r30
    2cf0:	5f 07       	cpc	r21, r31
    2cf2:	29 f4       	brne	.+10     	; 0x2cfe <sortCheck+0x3b6>
				sortDrop(arm1, ct % 2);
    2cf4:	6b 2d       	mov	r22, r11
    2cf6:	7a 2d       	mov	r23, r10
    2cf8:	c8 01       	movw	r24, r16
    2cfa:	16 dc       	rcall	.-2004   	; 0x2528 <sortDrop>
    2cfc:	2e c0       	rjmp	.+92     	; 0x2d5a <sortCheck+0x412>
			else sortDrop(arm0, ct % 2);
    2cfe:	6b 2d       	mov	r22, r11
    2d00:	7a 2d       	mov	r23, r10
    2d02:	ce 01       	movw	r24, r28
    2d04:	11 dc       	rcall	.-2014   	; 0x2528 <sortDrop>
    2d06:	29 c0       	rjmp	.+82     	; 0x2d5a <sortCheck+0x412>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2d08:	11 97       	sbiw	r26, 0x01	; 1
    2d0a:	39 f5       	brne	.+78     	; 0x2d5a <sortCheck+0x412>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	aa 0f       	add	r26, r26
    2d10:	bb 1f       	adc	r27, r27
    2d12:	aa 0f       	add	r26, r26
    2d14:	bb 1f       	adc	r27, r27
    2d16:	a3 57       	subi	r26, 0x73	; 115
    2d18:	bd 4f       	sbci	r27, 0xFD	; 253
    2d1a:	4d 91       	ld	r20, X+
    2d1c:	5c 91       	ld	r21, X
    2d1e:	4f 3f       	cpi	r20, 0xFF	; 255
    2d20:	5f 4f       	sbci	r21, 0xFF	; 255
    2d22:	69 f0       	breq	.+26     	; 0x2d3e <sortCheck+0x3f6>
    2d24:	dc 01       	movw	r26, r24
    2d26:	aa 0f       	add	r26, r26
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	aa 0f       	add	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	a3 57       	subi	r26, 0x73	; 115
    2d30:	bd 4f       	sbci	r27, 0xFD	; 253
    2d32:	12 96       	adiw	r26, 0x02	; 2
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	13 97       	sbiw	r26, 0x03	; 3
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	71 f4       	brne	.+28     	; 0x2d5a <sortCheck+0x412>
    2d3e:	2f 3f       	cpi	r18, 0xFF	; 255
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	59 f0       	breq	.+22     	; 0x2d5a <sortCheck+0x412>
			if (arm[arm0] == -1)
    2d44:	31 96       	adiw	r30, 0x01	; 1
    2d46:	29 f4       	brne	.+10     	; 0x2d52 <sortCheck+0x40a>
				pickSort(arm0, ct % 2);
    2d48:	6b 2d       	mov	r22, r11
    2d4a:	7a 2d       	mov	r23, r10
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	a8 db       	rcall	.-2224   	; 0x24a0 <pickSort>
    2d50:	04 c0       	rjmp	.+8      	; 0x2d5a <sortCheck+0x412>
			else	pickSort(arm1, ct % 2);
    2d52:	6b 2d       	mov	r22, r11
    2d54:	7a 2d       	mov	r23, r10
    2d56:	c8 01       	movw	r24, r16
    2d58:	a3 db       	rcall	.-2234   	; 0x24a0 <pickSort>
			ct = adj;
    2d5a:	80 91 af 02 	lds	r24, 0x02AF
    2d5e:	90 91 b0 02 	lds	r25, 0x02B0
    2d62:	90 93 8a 02 	sts	0x028A, r25
    2d66:	80 93 89 02 	sts	0x0289, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2d6a:	80 91 89 02 	lds	r24, 0x0289
    2d6e:	90 91 8a 02 	lds	r25, 0x028A
    2d72:	02 96       	adiw	r24, 0x02	; 2
    2d74:	83 70       	andi	r24, 0x03	; 3
    2d76:	90 78       	andi	r25, 0x80	; 128
    2d78:	99 23       	and	r25, r25
    2d7a:	24 f4       	brge	.+8      	; 0x2d84 <sortCheck+0x43c>
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	8c 6f       	ori	r24, 0xFC	; 252
    2d80:	9f 6f       	ori	r25, 0xFF	; 255
    2d82:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2d84:	90 93 b0 02 	sts	0x02B0, r25
    2d88:	80 93 af 02 	sts	0x02AF, r24
}
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
    2da0:	9f 90       	pop	r9
    2da2:	8f 90       	pop	r8
    2da4:	08 95       	ret

00002da6 <main>:
	angle += 180;
}
int main()
{
	int i=0;
	__init__();
    2da6:	0e 94 0f 09 	call	0x121e	; 0x121e <__init__>
	ct = 0; adj = 2;
    2daa:	10 92 8a 02 	sts	0x028A, r1
    2dae:	10 92 89 02 	sts	0x0289, r1
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	90 93 b0 02 	sts	0x02B0, r25
    2dba:	80 93 af 02 	sts	0x02AF, r24
	
	//right_degrees(45);
	//while(1);
	
	//stop();
	servo_1(0);
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	0e 94 3b 03 	call	0x676	; 0x676 <servo_1>
	servo_2(90);
    2dc4:	8a e5       	ldi	r24, 0x5A	; 90
    2dc6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <servo_2>
	servo_3(0);
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	0e 94 6d 03 	call	0x6da	; 0x6da <servo_3>
	forwardJaa();
    2dd0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <forwardJaa>
	while (sorted<total)
    2dd4:	20 91 58 02 	lds	r18, 0x0258
    2dd8:	30 91 59 02 	lds	r19, 0x0259
    2ddc:	80 91 01 02 	lds	r24, 0x0201
    2de0:	90 91 02 02 	lds	r25, 0x0202
    2de4:	28 17       	cp	r18, r24
    2de6:	39 07       	cpc	r19, r25
    2de8:	ac f5       	brge	.+106    	; 0x2e54 <main+0xae>
	{
		canDrop();
    2dea:	e3 d9       	rcall	.-3130   	; 0x21b2 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2dec:	80 91 54 02 	lds	r24, 0x0254
    2df0:	90 91 55 02 	lds	r25, 0x0255
    2df4:	03 97       	sbiw	r24, 0x03	; 3
    2df6:	11 f4       	brne	.+4      	; 0x2dfc <main+0x56>
			predict();
    2df8:	0e 94 a3 08 	call	0x1146	; 0x1146 <predict>
		if (sorted == total)
    2dfc:	20 91 58 02 	lds	r18, 0x0258
    2e00:	30 91 59 02 	lds	r19, 0x0259
    2e04:	80 91 01 02 	lds	r24, 0x0201
    2e08:	90 91 02 02 	lds	r25, 0x0202
    2e0c:	28 17       	cp	r18, r24
    2e0e:	39 07       	cpc	r19, r25
    2e10:	09 f1       	breq	.+66     	; 0x2e54 <main+0xae>
			break;
		pickup();
    2e12:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2e16:	80 91 89 02 	lds	r24, 0x0289
    2e1a:	90 91 8a 02 	lds	r25, 0x028A
    2e1e:	bc 01       	movw	r22, r24
    2e20:	61 70       	andi	r22, 0x01	; 1
    2e22:	70 78       	andi	r23, 0x80	; 128
    2e24:	77 23       	and	r23, r23
    2e26:	34 f4       	brge	.+12     	; 0x2e34 <main+0x8e>
    2e28:	61 50       	subi	r22, 0x01	; 1
    2e2a:	71 09       	sbc	r23, r1
    2e2c:	6e 6f       	ori	r22, 0xFE	; 254
    2e2e:	7f 6f       	ori	r23, 0xFF	; 255
    2e30:	6f 5f       	subi	r22, 0xFF	; 255
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255
    2e34:	6c 5f       	subi	r22, 0xFC	; 252
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <traverseToSort>
		sortCheck();
    2e3c:	85 dd       	rcall	.-1270   	; 0x2948 <sortCheck>
	//stop();
	servo_1(0);
	servo_2(90);
	servo_3(0);
	forwardJaa();
	while (sorted<total)
    2e3e:	20 91 58 02 	lds	r18, 0x0258
    2e42:	30 91 59 02 	lds	r19, 0x0259
    2e46:	80 91 01 02 	lds	r24, 0x0201
    2e4a:	90 91 02 02 	lds	r25, 0x0202
    2e4e:	28 17       	cp	r18, r24
    2e50:	39 07       	cpc	r19, r25
    2e52:	5c f2       	brlt	.-106    	; 0x2dea <main+0x44>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
}
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	08 95       	ret

00002e5a <__subsf3>:
    2e5a:	50 58       	subi	r21, 0x80	; 128

00002e5c <__addsf3>:
    2e5c:	bb 27       	eor	r27, r27
    2e5e:	aa 27       	eor	r26, r26
    2e60:	0e d0       	rcall	.+28     	; 0x2e7e <__addsf3x>
    2e62:	48 c1       	rjmp	.+656    	; 0x30f4 <__fp_round>
    2e64:	39 d1       	rcall	.+626    	; 0x30d8 <__fp_pscA>
    2e66:	30 f0       	brcs	.+12     	; 0x2e74 <__addsf3+0x18>
    2e68:	3e d1       	rcall	.+636    	; 0x30e6 <__fp_pscB>
    2e6a:	20 f0       	brcs	.+8      	; 0x2e74 <__addsf3+0x18>
    2e6c:	31 f4       	brne	.+12     	; 0x2e7a <__addsf3+0x1e>
    2e6e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e70:	11 f4       	brne	.+4      	; 0x2e76 <__addsf3+0x1a>
    2e72:	1e f4       	brtc	.+6      	; 0x2e7a <__addsf3+0x1e>
    2e74:	2e c1       	rjmp	.+604    	; 0x30d2 <__fp_nan>
    2e76:	0e f4       	brtc	.+2      	; 0x2e7a <__addsf3+0x1e>
    2e78:	e0 95       	com	r30
    2e7a:	e7 fb       	bst	r30, 7
    2e7c:	24 c1       	rjmp	.+584    	; 0x30c6 <__fp_inf>

00002e7e <__addsf3x>:
    2e7e:	e9 2f       	mov	r30, r25
    2e80:	4a d1       	rcall	.+660    	; 0x3116 <__fp_split3>
    2e82:	80 f3       	brcs	.-32     	; 0x2e64 <__addsf3+0x8>
    2e84:	ba 17       	cp	r27, r26
    2e86:	62 07       	cpc	r22, r18
    2e88:	73 07       	cpc	r23, r19
    2e8a:	84 07       	cpc	r24, r20
    2e8c:	95 07       	cpc	r25, r21
    2e8e:	18 f0       	brcs	.+6      	; 0x2e96 <__addsf3x+0x18>
    2e90:	71 f4       	brne	.+28     	; 0x2eae <__addsf3x+0x30>
    2e92:	9e f5       	brtc	.+102    	; 0x2efa <__addsf3x+0x7c>
    2e94:	62 c1       	rjmp	.+708    	; 0x315a <__fp_zero>
    2e96:	0e f4       	brtc	.+2      	; 0x2e9a <__addsf3x+0x1c>
    2e98:	e0 95       	com	r30
    2e9a:	0b 2e       	mov	r0, r27
    2e9c:	ba 2f       	mov	r27, r26
    2e9e:	a0 2d       	mov	r26, r0
    2ea0:	0b 01       	movw	r0, r22
    2ea2:	b9 01       	movw	r22, r18
    2ea4:	90 01       	movw	r18, r0
    2ea6:	0c 01       	movw	r0, r24
    2ea8:	ca 01       	movw	r24, r20
    2eaa:	a0 01       	movw	r20, r0
    2eac:	11 24       	eor	r1, r1
    2eae:	ff 27       	eor	r31, r31
    2eb0:	59 1b       	sub	r21, r25
    2eb2:	99 f0       	breq	.+38     	; 0x2eda <__addsf3x+0x5c>
    2eb4:	59 3f       	cpi	r21, 0xF9	; 249
    2eb6:	50 f4       	brcc	.+20     	; 0x2ecc <__addsf3x+0x4e>
    2eb8:	50 3e       	cpi	r21, 0xE0	; 224
    2eba:	68 f1       	brcs	.+90     	; 0x2f16 <__addsf3x+0x98>
    2ebc:	1a 16       	cp	r1, r26
    2ebe:	f0 40       	sbci	r31, 0x00	; 0
    2ec0:	a2 2f       	mov	r26, r18
    2ec2:	23 2f       	mov	r18, r19
    2ec4:	34 2f       	mov	r19, r20
    2ec6:	44 27       	eor	r20, r20
    2ec8:	58 5f       	subi	r21, 0xF8	; 248
    2eca:	f3 cf       	rjmp	.-26     	; 0x2eb2 <__addsf3x+0x34>
    2ecc:	46 95       	lsr	r20
    2ece:	37 95       	ror	r19
    2ed0:	27 95       	ror	r18
    2ed2:	a7 95       	ror	r26
    2ed4:	f0 40       	sbci	r31, 0x00	; 0
    2ed6:	53 95       	inc	r21
    2ed8:	c9 f7       	brne	.-14     	; 0x2ecc <__addsf3x+0x4e>
    2eda:	7e f4       	brtc	.+30     	; 0x2efa <__addsf3x+0x7c>
    2edc:	1f 16       	cp	r1, r31
    2ede:	ba 0b       	sbc	r27, r26
    2ee0:	62 0b       	sbc	r22, r18
    2ee2:	73 0b       	sbc	r23, r19
    2ee4:	84 0b       	sbc	r24, r20
    2ee6:	ba f0       	brmi	.+46     	; 0x2f16 <__addsf3x+0x98>
    2ee8:	91 50       	subi	r25, 0x01	; 1
    2eea:	a1 f0       	breq	.+40     	; 0x2f14 <__addsf3x+0x96>
    2eec:	ff 0f       	add	r31, r31
    2eee:	bb 1f       	adc	r27, r27
    2ef0:	66 1f       	adc	r22, r22
    2ef2:	77 1f       	adc	r23, r23
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	c2 f7       	brpl	.-16     	; 0x2ee8 <__addsf3x+0x6a>
    2ef8:	0e c0       	rjmp	.+28     	; 0x2f16 <__addsf3x+0x98>
    2efa:	ba 0f       	add	r27, r26
    2efc:	62 1f       	adc	r22, r18
    2efe:	73 1f       	adc	r23, r19
    2f00:	84 1f       	adc	r24, r20
    2f02:	48 f4       	brcc	.+18     	; 0x2f16 <__addsf3x+0x98>
    2f04:	87 95       	ror	r24
    2f06:	77 95       	ror	r23
    2f08:	67 95       	ror	r22
    2f0a:	b7 95       	ror	r27
    2f0c:	f7 95       	ror	r31
    2f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    2f10:	08 f0       	brcs	.+2      	; 0x2f14 <__addsf3x+0x96>
    2f12:	b3 cf       	rjmp	.-154    	; 0x2e7a <__addsf3+0x1e>
    2f14:	93 95       	inc	r25
    2f16:	88 0f       	add	r24, r24
    2f18:	08 f0       	brcs	.+2      	; 0x2f1c <__addsf3x+0x9e>
    2f1a:	99 27       	eor	r25, r25
    2f1c:	ee 0f       	add	r30, r30
    2f1e:	97 95       	ror	r25
    2f20:	87 95       	ror	r24
    2f22:	08 95       	ret

00002f24 <__divsf3>:
    2f24:	0c d0       	rcall	.+24     	; 0x2f3e <__divsf3x>
    2f26:	e6 c0       	rjmp	.+460    	; 0x30f4 <__fp_round>
    2f28:	de d0       	rcall	.+444    	; 0x30e6 <__fp_pscB>
    2f2a:	40 f0       	brcs	.+16     	; 0x2f3c <__divsf3+0x18>
    2f2c:	d5 d0       	rcall	.+426    	; 0x30d8 <__fp_pscA>
    2f2e:	30 f0       	brcs	.+12     	; 0x2f3c <__divsf3+0x18>
    2f30:	21 f4       	brne	.+8      	; 0x2f3a <__divsf3+0x16>
    2f32:	5f 3f       	cpi	r21, 0xFF	; 255
    2f34:	19 f0       	breq	.+6      	; 0x2f3c <__divsf3+0x18>
    2f36:	c7 c0       	rjmp	.+398    	; 0x30c6 <__fp_inf>
    2f38:	51 11       	cpse	r21, r1
    2f3a:	10 c1       	rjmp	.+544    	; 0x315c <__fp_szero>
    2f3c:	ca c0       	rjmp	.+404    	; 0x30d2 <__fp_nan>

00002f3e <__divsf3x>:
    2f3e:	eb d0       	rcall	.+470    	; 0x3116 <__fp_split3>
    2f40:	98 f3       	brcs	.-26     	; 0x2f28 <__divsf3+0x4>

00002f42 <__divsf3_pse>:
    2f42:	99 23       	and	r25, r25
    2f44:	c9 f3       	breq	.-14     	; 0x2f38 <__divsf3+0x14>
    2f46:	55 23       	and	r21, r21
    2f48:	b1 f3       	breq	.-20     	; 0x2f36 <__divsf3+0x12>
    2f4a:	95 1b       	sub	r25, r21
    2f4c:	55 0b       	sbc	r21, r21
    2f4e:	bb 27       	eor	r27, r27
    2f50:	aa 27       	eor	r26, r26
    2f52:	62 17       	cp	r22, r18
    2f54:	73 07       	cpc	r23, r19
    2f56:	84 07       	cpc	r24, r20
    2f58:	38 f0       	brcs	.+14     	; 0x2f68 <__divsf3_pse+0x26>
    2f5a:	9f 5f       	subi	r25, 0xFF	; 255
    2f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5e:	22 0f       	add	r18, r18
    2f60:	33 1f       	adc	r19, r19
    2f62:	44 1f       	adc	r20, r20
    2f64:	aa 1f       	adc	r26, r26
    2f66:	a9 f3       	breq	.-22     	; 0x2f52 <__divsf3_pse+0x10>
    2f68:	33 d0       	rcall	.+102    	; 0x2fd0 <__divsf3_pse+0x8e>
    2f6a:	0e 2e       	mov	r0, r30
    2f6c:	3a f0       	brmi	.+14     	; 0x2f7c <__divsf3_pse+0x3a>
    2f6e:	e0 e8       	ldi	r30, 0x80	; 128
    2f70:	30 d0       	rcall	.+96     	; 0x2fd2 <__divsf3_pse+0x90>
    2f72:	91 50       	subi	r25, 0x01	; 1
    2f74:	50 40       	sbci	r21, 0x00	; 0
    2f76:	e6 95       	lsr	r30
    2f78:	00 1c       	adc	r0, r0
    2f7a:	ca f7       	brpl	.-14     	; 0x2f6e <__divsf3_pse+0x2c>
    2f7c:	29 d0       	rcall	.+82     	; 0x2fd0 <__divsf3_pse+0x8e>
    2f7e:	fe 2f       	mov	r31, r30
    2f80:	27 d0       	rcall	.+78     	; 0x2fd0 <__divsf3_pse+0x8e>
    2f82:	66 0f       	add	r22, r22
    2f84:	77 1f       	adc	r23, r23
    2f86:	88 1f       	adc	r24, r24
    2f88:	bb 1f       	adc	r27, r27
    2f8a:	26 17       	cp	r18, r22
    2f8c:	37 07       	cpc	r19, r23
    2f8e:	48 07       	cpc	r20, r24
    2f90:	ab 07       	cpc	r26, r27
    2f92:	b0 e8       	ldi	r27, 0x80	; 128
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <__divsf3_pse+0x56>
    2f96:	bb 0b       	sbc	r27, r27
    2f98:	80 2d       	mov	r24, r0
    2f9a:	bf 01       	movw	r22, r30
    2f9c:	ff 27       	eor	r31, r31
    2f9e:	93 58       	subi	r25, 0x83	; 131
    2fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa2:	2a f0       	brmi	.+10     	; 0x2fae <__divsf3_pse+0x6c>
    2fa4:	9e 3f       	cpi	r25, 0xFE	; 254
    2fa6:	51 05       	cpc	r21, r1
    2fa8:	68 f0       	brcs	.+26     	; 0x2fc4 <__divsf3_pse+0x82>
    2faa:	8d c0       	rjmp	.+282    	; 0x30c6 <__fp_inf>
    2fac:	d7 c0       	rjmp	.+430    	; 0x315c <__fp_szero>
    2fae:	5f 3f       	cpi	r21, 0xFF	; 255
    2fb0:	ec f3       	brlt	.-6      	; 0x2fac <__divsf3_pse+0x6a>
    2fb2:	98 3e       	cpi	r25, 0xE8	; 232
    2fb4:	dc f3       	brlt	.-10     	; 0x2fac <__divsf3_pse+0x6a>
    2fb6:	86 95       	lsr	r24
    2fb8:	77 95       	ror	r23
    2fba:	67 95       	ror	r22
    2fbc:	b7 95       	ror	r27
    2fbe:	f7 95       	ror	r31
    2fc0:	9f 5f       	subi	r25, 0xFF	; 255
    2fc2:	c9 f7       	brne	.-14     	; 0x2fb6 <__divsf3_pse+0x74>
    2fc4:	88 0f       	add	r24, r24
    2fc6:	91 1d       	adc	r25, r1
    2fc8:	96 95       	lsr	r25
    2fca:	87 95       	ror	r24
    2fcc:	97 f9       	bld	r25, 7
    2fce:	08 95       	ret
    2fd0:	e1 e0       	ldi	r30, 0x01	; 1
    2fd2:	66 0f       	add	r22, r22
    2fd4:	77 1f       	adc	r23, r23
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	62 17       	cp	r22, r18
    2fdc:	73 07       	cpc	r23, r19
    2fde:	84 07       	cpc	r24, r20
    2fe0:	ba 07       	cpc	r27, r26
    2fe2:	20 f0       	brcs	.+8      	; 0x2fec <__divsf3_pse+0xaa>
    2fe4:	62 1b       	sub	r22, r18
    2fe6:	73 0b       	sbc	r23, r19
    2fe8:	84 0b       	sbc	r24, r20
    2fea:	ba 0b       	sbc	r27, r26
    2fec:	ee 1f       	adc	r30, r30
    2fee:	88 f7       	brcc	.-30     	; 0x2fd2 <__divsf3_pse+0x90>
    2ff0:	e0 95       	com	r30
    2ff2:	08 95       	ret

00002ff4 <__fixunssfsi>:
    2ff4:	98 d0       	rcall	.+304    	; 0x3126 <__fp_splitA>
    2ff6:	88 f0       	brcs	.+34     	; 0x301a <__fixunssfsi+0x26>
    2ff8:	9f 57       	subi	r25, 0x7F	; 127
    2ffa:	90 f0       	brcs	.+36     	; 0x3020 <__fixunssfsi+0x2c>
    2ffc:	b9 2f       	mov	r27, r25
    2ffe:	99 27       	eor	r25, r25
    3000:	b7 51       	subi	r27, 0x17	; 23
    3002:	a0 f0       	brcs	.+40     	; 0x302c <__fixunssfsi+0x38>
    3004:	d1 f0       	breq	.+52     	; 0x303a <__fixunssfsi+0x46>
    3006:	66 0f       	add	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	88 1f       	adc	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	1a f0       	brmi	.+6      	; 0x3016 <__fixunssfsi+0x22>
    3010:	ba 95       	dec	r27
    3012:	c9 f7       	brne	.-14     	; 0x3006 <__fixunssfsi+0x12>
    3014:	12 c0       	rjmp	.+36     	; 0x303a <__fixunssfsi+0x46>
    3016:	b1 30       	cpi	r27, 0x01	; 1
    3018:	81 f0       	breq	.+32     	; 0x303a <__fixunssfsi+0x46>
    301a:	9f d0       	rcall	.+318    	; 0x315a <__fp_zero>
    301c:	b1 e0       	ldi	r27, 0x01	; 1
    301e:	08 95       	ret
    3020:	9c c0       	rjmp	.+312    	; 0x315a <__fp_zero>
    3022:	67 2f       	mov	r22, r23
    3024:	78 2f       	mov	r23, r24
    3026:	88 27       	eor	r24, r24
    3028:	b8 5f       	subi	r27, 0xF8	; 248
    302a:	39 f0       	breq	.+14     	; 0x303a <__fixunssfsi+0x46>
    302c:	b9 3f       	cpi	r27, 0xF9	; 249
    302e:	cc f3       	brlt	.-14     	; 0x3022 <__fixunssfsi+0x2e>
    3030:	86 95       	lsr	r24
    3032:	77 95       	ror	r23
    3034:	67 95       	ror	r22
    3036:	b3 95       	inc	r27
    3038:	d9 f7       	brne	.-10     	; 0x3030 <__fixunssfsi+0x3c>
    303a:	3e f4       	brtc	.+14     	; 0x304a <__fixunssfsi+0x56>
    303c:	90 95       	com	r25
    303e:	80 95       	com	r24
    3040:	70 95       	com	r23
    3042:	61 95       	neg	r22
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	8f 4f       	sbci	r24, 0xFF	; 255
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	08 95       	ret

0000304c <__floatunsisf>:
    304c:	e8 94       	clt
    304e:	09 c0       	rjmp	.+18     	; 0x3062 <__floatsisf+0x12>

00003050 <__floatsisf>:
    3050:	97 fb       	bst	r25, 7
    3052:	3e f4       	brtc	.+14     	; 0x3062 <__floatsisf+0x12>
    3054:	90 95       	com	r25
    3056:	80 95       	com	r24
    3058:	70 95       	com	r23
    305a:	61 95       	neg	r22
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	8f 4f       	sbci	r24, 0xFF	; 255
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	99 23       	and	r25, r25
    3064:	a9 f0       	breq	.+42     	; 0x3090 <__floatsisf+0x40>
    3066:	f9 2f       	mov	r31, r25
    3068:	96 e9       	ldi	r25, 0x96	; 150
    306a:	bb 27       	eor	r27, r27
    306c:	93 95       	inc	r25
    306e:	f6 95       	lsr	r31
    3070:	87 95       	ror	r24
    3072:	77 95       	ror	r23
    3074:	67 95       	ror	r22
    3076:	b7 95       	ror	r27
    3078:	f1 11       	cpse	r31, r1
    307a:	f8 cf       	rjmp	.-16     	; 0x306c <__floatsisf+0x1c>
    307c:	fa f4       	brpl	.+62     	; 0x30bc <__floatsisf+0x6c>
    307e:	bb 0f       	add	r27, r27
    3080:	11 f4       	brne	.+4      	; 0x3086 <__floatsisf+0x36>
    3082:	60 ff       	sbrs	r22, 0
    3084:	1b c0       	rjmp	.+54     	; 0x30bc <__floatsisf+0x6c>
    3086:	6f 5f       	subi	r22, 0xFF	; 255
    3088:	7f 4f       	sbci	r23, 0xFF	; 255
    308a:	8f 4f       	sbci	r24, 0xFF	; 255
    308c:	9f 4f       	sbci	r25, 0xFF	; 255
    308e:	16 c0       	rjmp	.+44     	; 0x30bc <__floatsisf+0x6c>
    3090:	88 23       	and	r24, r24
    3092:	11 f0       	breq	.+4      	; 0x3098 <__floatsisf+0x48>
    3094:	96 e9       	ldi	r25, 0x96	; 150
    3096:	11 c0       	rjmp	.+34     	; 0x30ba <__floatsisf+0x6a>
    3098:	77 23       	and	r23, r23
    309a:	21 f0       	breq	.+8      	; 0x30a4 <__floatsisf+0x54>
    309c:	9e e8       	ldi	r25, 0x8E	; 142
    309e:	87 2f       	mov	r24, r23
    30a0:	76 2f       	mov	r23, r22
    30a2:	05 c0       	rjmp	.+10     	; 0x30ae <__floatsisf+0x5e>
    30a4:	66 23       	and	r22, r22
    30a6:	71 f0       	breq	.+28     	; 0x30c4 <__floatsisf+0x74>
    30a8:	96 e8       	ldi	r25, 0x86	; 134
    30aa:	86 2f       	mov	r24, r22
    30ac:	70 e0       	ldi	r23, 0x00	; 0
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	2a f0       	brmi	.+10     	; 0x30bc <__floatsisf+0x6c>
    30b2:	9a 95       	dec	r25
    30b4:	66 0f       	add	r22, r22
    30b6:	77 1f       	adc	r23, r23
    30b8:	88 1f       	adc	r24, r24
    30ba:	da f7       	brpl	.-10     	; 0x30b2 <__floatsisf+0x62>
    30bc:	88 0f       	add	r24, r24
    30be:	96 95       	lsr	r25
    30c0:	87 95       	ror	r24
    30c2:	97 f9       	bld	r25, 7
    30c4:	08 95       	ret

000030c6 <__fp_inf>:
    30c6:	97 f9       	bld	r25, 7
    30c8:	9f 67       	ori	r25, 0x7F	; 127
    30ca:	80 e8       	ldi	r24, 0x80	; 128
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	08 95       	ret

000030d2 <__fp_nan>:
    30d2:	9f ef       	ldi	r25, 0xFF	; 255
    30d4:	80 ec       	ldi	r24, 0xC0	; 192
    30d6:	08 95       	ret

000030d8 <__fp_pscA>:
    30d8:	00 24       	eor	r0, r0
    30da:	0a 94       	dec	r0
    30dc:	16 16       	cp	r1, r22
    30de:	17 06       	cpc	r1, r23
    30e0:	18 06       	cpc	r1, r24
    30e2:	09 06       	cpc	r0, r25
    30e4:	08 95       	ret

000030e6 <__fp_pscB>:
    30e6:	00 24       	eor	r0, r0
    30e8:	0a 94       	dec	r0
    30ea:	12 16       	cp	r1, r18
    30ec:	13 06       	cpc	r1, r19
    30ee:	14 06       	cpc	r1, r20
    30f0:	05 06       	cpc	r0, r21
    30f2:	08 95       	ret

000030f4 <__fp_round>:
    30f4:	09 2e       	mov	r0, r25
    30f6:	03 94       	inc	r0
    30f8:	00 0c       	add	r0, r0
    30fa:	11 f4       	brne	.+4      	; 0x3100 <__fp_round+0xc>
    30fc:	88 23       	and	r24, r24
    30fe:	52 f0       	brmi	.+20     	; 0x3114 <__fp_round+0x20>
    3100:	bb 0f       	add	r27, r27
    3102:	40 f4       	brcc	.+16     	; 0x3114 <__fp_round+0x20>
    3104:	bf 2b       	or	r27, r31
    3106:	11 f4       	brne	.+4      	; 0x310c <__fp_round+0x18>
    3108:	60 ff       	sbrs	r22, 0
    310a:	04 c0       	rjmp	.+8      	; 0x3114 <__fp_round+0x20>
    310c:	6f 5f       	subi	r22, 0xFF	; 255
    310e:	7f 4f       	sbci	r23, 0xFF	; 255
    3110:	8f 4f       	sbci	r24, 0xFF	; 255
    3112:	9f 4f       	sbci	r25, 0xFF	; 255
    3114:	08 95       	ret

00003116 <__fp_split3>:
    3116:	57 fd       	sbrc	r21, 7
    3118:	90 58       	subi	r25, 0x80	; 128
    311a:	44 0f       	add	r20, r20
    311c:	55 1f       	adc	r21, r21
    311e:	59 f0       	breq	.+22     	; 0x3136 <__fp_splitA+0x10>
    3120:	5f 3f       	cpi	r21, 0xFF	; 255
    3122:	71 f0       	breq	.+28     	; 0x3140 <__fp_splitA+0x1a>
    3124:	47 95       	ror	r20

00003126 <__fp_splitA>:
    3126:	88 0f       	add	r24, r24
    3128:	97 fb       	bst	r25, 7
    312a:	99 1f       	adc	r25, r25
    312c:	61 f0       	breq	.+24     	; 0x3146 <__fp_splitA+0x20>
    312e:	9f 3f       	cpi	r25, 0xFF	; 255
    3130:	79 f0       	breq	.+30     	; 0x3150 <__fp_splitA+0x2a>
    3132:	87 95       	ror	r24
    3134:	08 95       	ret
    3136:	12 16       	cp	r1, r18
    3138:	13 06       	cpc	r1, r19
    313a:	14 06       	cpc	r1, r20
    313c:	55 1f       	adc	r21, r21
    313e:	f2 cf       	rjmp	.-28     	; 0x3124 <__fp_split3+0xe>
    3140:	46 95       	lsr	r20
    3142:	f1 df       	rcall	.-30     	; 0x3126 <__fp_splitA>
    3144:	08 c0       	rjmp	.+16     	; 0x3156 <__fp_splitA+0x30>
    3146:	16 16       	cp	r1, r22
    3148:	17 06       	cpc	r1, r23
    314a:	18 06       	cpc	r1, r24
    314c:	99 1f       	adc	r25, r25
    314e:	f1 cf       	rjmp	.-30     	; 0x3132 <__fp_splitA+0xc>
    3150:	86 95       	lsr	r24
    3152:	71 05       	cpc	r23, r1
    3154:	61 05       	cpc	r22, r1
    3156:	08 94       	sec
    3158:	08 95       	ret

0000315a <__fp_zero>:
    315a:	e8 94       	clt

0000315c <__fp_szero>:
    315c:	bb 27       	eor	r27, r27
    315e:	66 27       	eor	r22, r22
    3160:	77 27       	eor	r23, r23
    3162:	cb 01       	movw	r24, r22
    3164:	97 f9       	bld	r25, 7
    3166:	08 95       	ret

00003168 <__divmodhi4>:
    3168:	97 fb       	bst	r25, 7
    316a:	07 2e       	mov	r0, r23
    316c:	16 f4       	brtc	.+4      	; 0x3172 <__divmodhi4+0xa>
    316e:	00 94       	com	r0
    3170:	06 d0       	rcall	.+12     	; 0x317e <__divmodhi4_neg1>
    3172:	77 fd       	sbrc	r23, 7
    3174:	08 d0       	rcall	.+16     	; 0x3186 <__divmodhi4_neg2>
    3176:	1a d0       	rcall	.+52     	; 0x31ac <__udivmodhi4>
    3178:	07 fc       	sbrc	r0, 7
    317a:	05 d0       	rcall	.+10     	; 0x3186 <__divmodhi4_neg2>
    317c:	3e f4       	brtc	.+14     	; 0x318c <__divmodhi4_exit>

0000317e <__divmodhi4_neg1>:
    317e:	90 95       	com	r25
    3180:	81 95       	neg	r24
    3182:	9f 4f       	sbci	r25, 0xFF	; 255
    3184:	08 95       	ret

00003186 <__divmodhi4_neg2>:
    3186:	70 95       	com	r23
    3188:	61 95       	neg	r22
    318a:	7f 4f       	sbci	r23, 0xFF	; 255

0000318c <__divmodhi4_exit>:
    318c:	08 95       	ret

0000318e <__umulhisi3>:
    318e:	a2 9f       	mul	r26, r18
    3190:	b0 01       	movw	r22, r0
    3192:	b3 9f       	mul	r27, r19
    3194:	c0 01       	movw	r24, r0
    3196:	a3 9f       	mul	r26, r19
    3198:	70 0d       	add	r23, r0
    319a:	81 1d       	adc	r24, r1
    319c:	11 24       	eor	r1, r1
    319e:	91 1d       	adc	r25, r1
    31a0:	b2 9f       	mul	r27, r18
    31a2:	70 0d       	add	r23, r0
    31a4:	81 1d       	adc	r24, r1
    31a6:	11 24       	eor	r1, r1
    31a8:	91 1d       	adc	r25, r1
    31aa:	08 95       	ret

000031ac <__udivmodhi4>:
    31ac:	aa 1b       	sub	r26, r26
    31ae:	bb 1b       	sub	r27, r27
    31b0:	51 e1       	ldi	r21, 0x11	; 17
    31b2:	07 c0       	rjmp	.+14     	; 0x31c2 <__udivmodhi4_ep>

000031b4 <__udivmodhi4_loop>:
    31b4:	aa 1f       	adc	r26, r26
    31b6:	bb 1f       	adc	r27, r27
    31b8:	a6 17       	cp	r26, r22
    31ba:	b7 07       	cpc	r27, r23
    31bc:	10 f0       	brcs	.+4      	; 0x31c2 <__udivmodhi4_ep>
    31be:	a6 1b       	sub	r26, r22
    31c0:	b7 0b       	sbc	r27, r23

000031c2 <__udivmodhi4_ep>:
    31c2:	88 1f       	adc	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	5a 95       	dec	r21
    31c8:	a9 f7       	brne	.-22     	; 0x31b4 <__udivmodhi4_loop>
    31ca:	80 95       	com	r24
    31cc:	90 95       	com	r25
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	08 95       	ret

000031d4 <_exit>:
    31d4:	f8 94       	cli

000031d6 <__stop_program>:
    31d6:	ff cf       	rjmp	.-2      	; 0x31d6 <__stop_program>
