
Alignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  00002fb6  0000304a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  0080024e  0080024e  00003098  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c0d  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c9  00000000  00000000  00007055  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027be  00000000  00000000  0000751e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009cc  00000000  00000000  00009cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000868  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002280  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e8  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	1b c3       	rjmp	.+1590   	; 0x63c <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	04 c4       	rjmp	.+2056   	; 0x81e <__vector_5>
      16:	00 00       	nop
      18:	dd c3       	rjmp	.+1978   	; 0x7d4 <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 eb       	ldi	r30, 0xB6	; 182
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 34       	cpi	r26, 0x4E	; 78
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ae e4       	ldi	r26, 0x4E	; 78
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3b       	cpi	r26, 0xBB	; 187
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <main>
     122:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <lcd_set_4bit>:
}

int adjCount(ct)
{
	return (ct + 2) % 4;
}
     128:	86 e6       	ldi	r24, 0x66	; 102
     12a:	9e e0       	ldi	r25, 0x0E	; 14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x4>
     130:	00 00       	nop
     132:	40 98       	cbi	0x08, 0	; 8
     134:	41 98       	cbi	0x08, 1	; 8
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	88 b9       	out	0x08, r24	; 8
     13a:	42 9a       	sbi	0x08, 2	; 8
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	97 e4       	ldi	r25, 0x47	; 71
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_set_4bit+0x1e>
     146:	00 00       	nop
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x26>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	97 e4       	ldi	r25, 0x47	; 71
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x3a>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x40>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	86 e6       	ldi	r24, 0x66	; 102
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x48>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x5c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x62>
     18a:	00 00       	nop
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	86 e6       	ldi	r24, 0x66	; 102
     190:	9e e0       	ldi	r25, 0x0E	; 14
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6a>
     196:	00 00       	nop
     198:	40 98       	cbi	0x08, 0	; 8
     19a:	41 98       	cbi	0x08, 1	; 8
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x84>
     1ac:	00 00       	nop
     1ae:	42 98       	cbi	0x08, 2	; 8
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
     1c2:	40 98       	cbi	0x08, 0	; 8
     1c4:	41 98       	cbi	0x08, 1	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	40 98       	cbi	0x08, 0	; 8
     1e8:	41 98       	cbi	0x08, 1	; 8
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
     1f8:	42 98       	cbi	0x08, 2	; 8
     1fa:	08 95       	ret

000001fc <lcd_init>:
     1fc:	95 df       	rcall	.-214    	; 0x128 <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x6>
     206:	00 00       	nop
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	d3 df       	rcall	.-90     	; 0x1b2 <lcd_wr_command>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	d1 df       	rcall	.-94     	; 0x1b2 <lcd_wr_command>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	cf df       	rcall	.-98     	; 0x1b2 <lcd_wr_command>
     214:	8e e0       	ldi	r24, 0x0E	; 14
     216:	cd df       	rcall	.-102    	; 0x1b2 <lcd_wr_command>
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	cb cf       	rjmp	.-106    	; 0x1b2 <lcd_wr_command>
     21c:	08 95       	ret

0000021e <lcd_wr_char>:
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	28 2f       	mov	r18, r24
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	92 2b       	or	r25, r18
     22c:	98 b9       	out	0x08, r25	; 8
     22e:	40 9a       	sbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	ef ef       	ldi	r30, 0xFF	; 255
     236:	f7 e4       	ldi	r31, 0x47	; 71
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x1a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x20>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	82 95       	swap	r24
     24c:	80 7f       	andi	r24, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 b9       	out	0x08, r24	; 8
     252:	40 9a       	sbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x3e>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x44>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	08 95       	ret

00000268 <lcd_home>:
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	a3 cf       	rjmp	.-186    	; 0x1b2 <lcd_wr_command>
     26c:	08 95       	ret

0000026e <lcd_string>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	88 81       	ld	r24, Y
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <lcd_string+0x16>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	d0 df       	rcall	.-96     	; 0x21e <lcd_wr_char>
     27e:	89 91       	ld	r24, Y+
     280:	81 11       	cpse	r24, r1
     282:	fc cf       	rjmp	.-8      	; 0x27c <lcd_string+0xe>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lcd_cursor>:
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
     294:	08 95       	ret
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
     29e:	08 95       	ret
     2a0:	8f e7       	ldi	r24, 0x7F	; 127
     2a2:	86 0f       	add	r24, r22
     2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <lcd_wr_command>
     2a6:	08 95       	ret
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	86 0f       	add	r24, r22
     2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <lcd_wr_command>
     2ae:	08 95       	ret
     2b0:	83 e9       	ldi	r24, 0x93	; 147
     2b2:	86 0f       	add	r24, r22
     2b4:	7e cf       	rjmp	.-260    	; 0x1b2 <lcd_wr_command>
     2b6:	08 95       	ret
     2b8:	83 ed       	ldi	r24, 0xD3	; 211
     2ba:	86 0f       	add	r24, r22
     2bc:	7a cf       	rjmp	.-268    	; 0x1b2 <lcd_wr_command>
     2be:	08 95       	ret

000002c0 <lcd_print>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8a 01       	movw	r16, r20
     2ca:	e9 01       	movw	r28, r18
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
     2d0:	61 11       	cpse	r22, r1
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_print+0x18>
     2d4:	c9 df       	rcall	.-110    	; 0x268 <lcd_home>
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_print+0x1a>
     2d8:	d8 df       	rcall	.-80     	; 0x28a <lcd_cursor>
     2da:	c5 30       	cpi	r28, 0x05	; 5
     2dc:	d1 05       	cpc	r29, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <lcd_print+0x22>
     2e0:	d5 c0       	rjmp	.+426    	; 0x48c <lcd_print+0x1cc>
     2e2:	98 01       	movw	r18, r16
     2e4:	32 95       	swap	r19
     2e6:	22 95       	swap	r18
     2e8:	2f 70       	andi	r18, 0x0F	; 15
     2ea:	23 27       	eor	r18, r19
     2ec:	3f 70       	andi	r19, 0x0F	; 15
     2ee:	23 27       	eor	r18, r19
     2f0:	a7 e4       	ldi	r26, 0x47	; 71
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	c0 96       	adiw	r24, 0x30	; 48
     306:	90 93 75 02 	sts	0x0275, r25
     30a:	80 93 74 02 	sts	0x0274, r24
     30e:	87 df       	rcall	.-242    	; 0x21e <lcd_wr_char>
     310:	98 01       	movw	r18, r16
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	36 95       	lsr	r19
     31c:	27 95       	ror	r18
     31e:	a5 ec       	ldi	r26, 0xC5	; 197
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     326:	ac 01       	movw	r20, r24
     328:	52 95       	swap	r21
     32a:	42 95       	swap	r20
     32c:	4f 70       	andi	r20, 0x0F	; 15
     32e:	45 27       	eor	r20, r21
     330:	5f 70       	andi	r21, 0x0F	; 15
     332:	45 27       	eor	r20, r21
     334:	50 93 79 02 	sts	0x0279, r21
     338:	40 93 78 02 	sts	0x0278, r20
     33c:	9a 01       	movw	r18, r20
     33e:	ad ec       	ldi	r26, 0xCD	; 205
     340:	bc ec       	ldi	r27, 0xCC	; 204
     342:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	48 1b       	sub	r20, r24
     36a:	59 0b       	sbc	r21, r25
     36c:	ca 01       	movw	r24, r20
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 ba 02 	sts	0x02BA, r25
     374:	80 93 b9 02 	sts	0x02B9, r24
     378:	52 df       	rcall	.-348    	; 0x21e <lcd_wr_char>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <lcd_print+0xc4>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	09 f0       	breq	.+2      	; 0x384 <lcd_print+0xc4>
     382:	89 c0       	rjmp	.+274    	; 0x496 <lcd_print+0x1d6>
     384:	98 01       	movw	r18, r16
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	36 95       	lsr	r19
     38c:	27 95       	ror	r18
     38e:	ab e7       	ldi	r26, 0x7B	; 123
     390:	b4 e1       	ldi	r27, 0x14	; 20
     392:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     396:	ac 01       	movw	r20, r24
     398:	56 95       	lsr	r21
     39a:	47 95       	ror	r20
     39c:	50 93 79 02 	sts	0x0279, r21
     3a0:	40 93 78 02 	sts	0x0278, r20
     3a4:	9a 01       	movw	r18, r20
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	9c 01       	movw	r18, r24
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
     3d0:	48 1b       	sub	r20, r24
     3d2:	59 0b       	sbc	r21, r25
     3d4:	ca 01       	movw	r24, r20
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 b0 02 	sts	0x02B0, r25
     3dc:	80 93 af 02 	sts	0x02AF, r24
     3e0:	1e df       	rcall	.-452    	; 0x21e <lcd_wr_char>
     3e2:	98 01       	movw	r18, r16
     3e4:	ad ec       	ldi	r26, 0xCD	; 205
     3e6:	bc ec       	ldi	r27, 0xCC	; 204
     3e8:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     3ec:	ac 01       	movw	r20, r24
     3ee:	56 95       	lsr	r21
     3f0:	47 95       	ror	r20
     3f2:	56 95       	lsr	r21
     3f4:	47 95       	ror	r20
     3f6:	56 95       	lsr	r21
     3f8:	47 95       	ror	r20
     3fa:	50 93 79 02 	sts	0x0279, r21
     3fe:	40 93 78 02 	sts	0x0278, r20
     402:	9a 01       	movw	r18, r20
     404:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     408:	96 95       	lsr	r25
     40a:	87 95       	ror	r24
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	82 0f       	add	r24, r18
     428:	93 1f       	adc	r25, r19
     42a:	48 1b       	sub	r20, r24
     42c:	59 0b       	sbc	r21, r25
     42e:	ca 01       	movw	r24, r20
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 8a 02 	sts	0x028A, r25
     436:	80 93 89 02 	sts	0x0289, r24
     43a:	f1 de       	rcall	.-542    	; 0x21e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x184>
     43e:	c1 30       	cpi	r28, 0x01	; 1
     440:	d1 05       	cpc	r29, r1
     442:	f9 f4       	brne	.+62     	; 0x482 <lcd_print+0x1c2>
     444:	98 01       	movw	r18, r16
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__umulhisi3>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	08 1b       	sub	r16, r24
     472:	19 0b       	sbc	r17, r25
     474:	c8 01       	movw	r24, r16
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 b8 02 	sts	0x02B8, r25
     47c:	80 93 b7 02 	sts	0x02B7, r24
     480:	ce de       	rcall	.-612    	; 0x21e <lcd_wr_char>
     482:	26 97       	sbiw	r28, 0x06	; 6
     484:	64 f0       	brlt	.+24     	; 0x49e <lcd_print+0x1de>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	ca de       	rcall	.-620    	; 0x21e <lcd_wr_char>
     48a:	09 c0       	rjmp	.+18     	; 0x49e <lcd_print+0x1de>
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	d1 05       	cpc	r29, r1
     490:	09 f0       	breq	.+2      	; 0x494 <lcd_print+0x1d4>
     492:	74 cf       	rjmp	.-280    	; 0x37c <lcd_print+0xbc>
     494:	3d cf       	rjmp	.-390    	; 0x310 <lcd_print+0x50>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	89 f6       	brne	.-94     	; 0x43e <lcd_print+0x17e>
     49c:	a2 cf       	rjmp	.-188    	; 0x3e2 <lcd_print+0x122>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <timer5_init>:
     4a8:	e1 e2       	ldi	r30, 0x21	; 33
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 25 01 	sts	0x0125, r24
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 24 01 	sts	0x0124, r25
     4ba:	10 92 29 01 	sts	0x0129, r1
     4be:	80 93 28 01 	sts	0x0128, r24
     4c2:	10 92 2b 01 	sts	0x012B, r1
     4c6:	80 93 2a 01 	sts	0x012A, r24
     4ca:	10 92 2d 01 	sts	0x012D, r1
     4ce:	80 93 2c 01 	sts	0x012C, r24
     4d2:	89 ea       	ldi	r24, 0xA9	; 169
     4d4:	80 93 20 01 	sts	0x0120, r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <motion_pin_config>:
     4de:	81 b1       	in	r24, 0x01	; 1
     4e0:	8f 60       	ori	r24, 0x0F	; 15
     4e2:	81 b9       	out	0x01, r24	; 1
     4e4:	82 b1       	in	r24, 0x02	; 2
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 b9       	out	0x02, r24	; 2
     4ea:	ea e0       	ldi	r30, 0x0A	; 10
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 83       	st	Z, r24
     4fe:	08 95       	ret

00000500 <motion_set>:
     500:	92 b1       	in	r25, 0x02	; 2
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	98 2b       	or	r25, r24
     508:	92 b9       	out	0x02, r25	; 2
     50a:	08 95       	ret

0000050c <forward>:
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <motion_set>
     510:	08 95       	ret

00000512 <back>:
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	f5 cf       	rjmp	.-22     	; 0x500 <motion_set>
     516:	08 95       	ret

00000518 <left>:
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <motion_set>
     51c:	08 95       	ret

0000051e <right>:
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	ef cf       	rjmp	.-34     	; 0x500 <motion_set>
     522:	08 95       	ret

00000524 <stop>:
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	ec cf       	rjmp	.-40     	; 0x500 <motion_set>
     528:	08 95       	ret

0000052a <lcd_port_config>:
     52a:	87 b1       	in	r24, 0x07	; 7
     52c:	87 6f       	ori	r24, 0xF7	; 247
     52e:	87 b9       	out	0x07, r24	; 7
     530:	88 b1       	in	r24, 0x08	; 8
     532:	80 78       	andi	r24, 0x80	; 128
     534:	88 b9       	out	0x08, r24	; 8
     536:	08 95       	ret

00000538 <color_sensor_pin_config>:
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	8e 6f       	ori	r24, 0xFE	; 254
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	58 9a       	sbi	0x0b, 0	; 11
     540:	08 95       	ret

00000542 <servo_1_free>:
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	80 93 89 00 	sts	0x0089, r24
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	80 93 88 00 	sts	0x0088, r24
     54e:	08 95       	ret

00000550 <servo_2_free>:
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	80 93 8b 00 	sts	0x008B, r24
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	80 93 8a 00 	sts	0x008A, r24
     55c:	08 95       	ret

0000055e <servo_3_free>:
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	80 93 8d 00 	sts	0x008D, r24
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	80 93 8c 00 	sts	0x008C, r24
     56a:	08 95       	ret

0000056c <adc_pin_config>:
     56c:	10 ba       	out	0x10, r1	; 16
     56e:	11 ba       	out	0x11, r1	; 17
     570:	10 92 07 01 	sts	0x0107, r1
     574:	10 92 08 01 	sts	0x0108, r1
     578:	08 95       	ret

0000057a <servo1_pin_config>:
     57a:	25 9a       	sbi	0x04, 5	; 4
     57c:	2d 9a       	sbi	0x05, 5	; 5
     57e:	08 95       	ret

00000580 <servo2_pin_config>:
     580:	26 9a       	sbi	0x04, 6	; 4
     582:	2e 9a       	sbi	0x05, 6	; 5
     584:	08 95       	ret

00000586 <servo3_pin_config>:
     586:	27 9a       	sbi	0x04, 7	; 4
     588:	2f 9a       	sbi	0x05, 7	; 5
     58a:	08 95       	ret

0000058c <timer1_init>:
     58c:	e1 e8       	ldi	r30, 0x81	; 129
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	10 82       	st	Z, r1
     592:	8c ef       	ldi	r24, 0xFC	; 252
     594:	80 93 85 00 	sts	0x0085, r24
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 84 00 	sts	0x0084, r24
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	90 93 89 00 	sts	0x0089, r25
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	80 93 88 00 	sts	0x0088, r24
     5aa:	90 93 8b 00 	sts	0x008B, r25
     5ae:	80 93 8a 00 	sts	0x008A, r24
     5b2:	90 93 8d 00 	sts	0x008D, r25
     5b6:	80 93 8c 00 	sts	0x008C, r24
     5ba:	90 93 87 00 	sts	0x0087, r25
     5be:	80 93 86 00 	sts	0x0086, r24
     5c2:	8b ea       	ldi	r24, 0xAB	; 171
     5c4:	80 93 80 00 	sts	0x0080, r24
     5c8:	10 92 82 00 	sts	0x0082, r1
     5cc:	8c e0       	ldi	r24, 0x0C	; 12
     5ce:	80 83       	st	Z, r24
     5d0:	08 95       	ret

000005d2 <port_init>:
     5d2:	ab df       	rcall	.-170    	; 0x52a <lcd_port_config>
     5d4:	cb df       	rcall	.-106    	; 0x56c <adc_pin_config>
     5d6:	3b 9a       	sbi	0x07, 3	; 7
     5d8:	43 98       	cbi	0x08, 3	; 8
     5da:	cf df       	rcall	.-98     	; 0x57a <servo1_pin_config>
     5dc:	d1 df       	rcall	.-94     	; 0x580 <servo2_pin_config>
     5de:	d3 df       	rcall	.-90     	; 0x586 <servo3_pin_config>
     5e0:	ab cf       	rjmp	.-170    	; 0x538 <color_sensor_pin_config>
     5e2:	08 95       	ret

000005e4 <buzzer_on>:
     5e4:	86 b1       	in	r24, 0x06	; 6
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	88 b9       	out	0x08, r24	; 8
     5ea:	08 95       	ret

000005ec <buzzer_off>:
     5ec:	86 b1       	in	r24, 0x06	; 6
     5ee:	87 7f       	andi	r24, 0xF7	; 247
     5f0:	88 b9       	out	0x08, r24	; 8
     5f2:	08 95       	ret

000005f4 <ADC_Conversion>:
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	18 f0       	brcs	.+6      	; 0x5fe <ADC_Conversion+0xa>
     5f8:	98 e0       	ldi	r25, 0x08	; 8
     5fa:	90 93 7b 00 	sts	0x007B, r25
     5fe:	87 70       	andi	r24, 0x07	; 7
     600:	80 62       	ori	r24, 0x20	; 32
     602:	80 93 7c 00 	sts	0x007C, r24
     606:	ea e7       	ldi	r30, 0x7A	; 122
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	80 64       	ori	r24, 0x40	; 64
     60e:	80 83       	st	Z, r24
     610:	80 81       	ld	r24, Z
     612:	84 ff       	sbrs	r24, 4
     614:	fd cf       	rjmp	.-6      	; 0x610 <ADC_Conversion+0x1c>
     616:	80 91 79 00 	lds	r24, 0x0079
     61a:	ea e7       	ldi	r30, 0x7A	; 122
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	90 81       	ld	r25, Z
     620:	90 61       	ori	r25, 0x10	; 16
     622:	90 83       	st	Z, r25
     624:	10 92 7b 00 	sts	0x007B, r1
     628:	08 95       	ret

0000062a <color_sensor_pin_interrupt_init>:
     62a:	f8 94       	cli
     62c:	e9 e6       	ldi	r30, 0x69	; 105
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	82 60       	ori	r24, 0x02	; 2
     634:	80 83       	st	Z, r24
     636:	e8 9a       	sbi	0x1d, 0	; 29
     638:	78 94       	sei
     63a:	08 95       	ret

0000063c <__vector_1>:
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	8f 93       	push	r24
     648:	9f 93       	push	r25
     64a:	af 93       	push	r26
     64c:	bf 93       	push	r27
     64e:	80 91 58 02 	lds	r24, 0x0258
     652:	90 91 59 02 	lds	r25, 0x0259
     656:	a0 91 5a 02 	lds	r26, 0x025A
     65a:	b0 91 5b 02 	lds	r27, 0x025B
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	a1 1d       	adc	r26, r1
     662:	b1 1d       	adc	r27, r1
     664:	80 93 58 02 	sts	0x0258, r24
     668:	90 93 59 02 	sts	0x0259, r25
     66c:	a0 93 5a 02 	sts	0x025A, r26
     670:	b0 93 5b 02 	sts	0x025B, r27
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <adc_init>:
     686:	ea e7       	ldi	r30, 0x7A	; 122
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	10 82       	st	Z, r1
     68c:	10 92 7b 00 	sts	0x007B, r1
     690:	80 e2       	ldi	r24, 0x20	; 32
     692:	80 93 7c 00 	sts	0x007C, r24
     696:	80 e8       	ldi	r24, 0x80	; 128
     698:	80 bf       	out	0x30, r24	; 48
     69a:	86 e8       	ldi	r24, 0x86	; 134
     69c:	80 83       	st	Z, r24
     69e:	08 95       	ret

000006a0 <filter_red>:
     6a0:	5e 98       	cbi	0x0b, 6	; 11
     6a2:	5f 98       	cbi	0x0b, 7	; 11
     6a4:	08 95       	ret

000006a6 <filter_green>:
     6a6:	5e 9a       	sbi	0x0b, 6	; 11
     6a8:	5f 9a       	sbi	0x0b, 7	; 11
     6aa:	08 95       	ret

000006ac <filter_blue>:
     6ac:	5e 98       	cbi	0x0b, 6	; 11
     6ae:	5f 9a       	sbi	0x0b, 7	; 11
     6b0:	08 95       	ret

000006b2 <color_sensor_scaling>:
     6b2:	5c 9a       	sbi	0x0b, 4	; 11
     6b4:	5d 9a       	sbi	0x0b, 5	; 11
     6b6:	08 95       	ret

000006b8 <red_read>:
     6b8:	f3 df       	rcall	.-26     	; 0x6a0 <filter_red>
     6ba:	10 92 58 02 	sts	0x0258, r1
     6be:	10 92 59 02 	sts	0x0259, r1
     6c2:	10 92 5a 02 	sts	0x025A, r1
     6c6:	10 92 5b 02 	sts	0x025B, r1
     6ca:	2f ef       	ldi	r18, 0xFF	; 255
     6cc:	8f e7       	ldi	r24, 0x7F	; 127
     6ce:	94 e0       	ldi	r25, 0x04	; 4
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	80 40       	sbci	r24, 0x00	; 0
     6d4:	90 40       	sbci	r25, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <red_read+0x18>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <red_read+0x22>
     6da:	00 00       	nop
     6dc:	80 91 58 02 	lds	r24, 0x0258
     6e0:	90 91 59 02 	lds	r25, 0x0259
     6e4:	a0 91 5a 02 	lds	r26, 0x025A
     6e8:	b0 91 5b 02 	lds	r27, 0x025B
     6ec:	80 93 7e 02 	sts	0x027E, r24
     6f0:	90 93 7f 02 	sts	0x027F, r25
     6f4:	a0 93 80 02 	sts	0x0280, r26
     6f8:	b0 93 81 02 	sts	0x0281, r27
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	9c e2       	ldi	r25, 0x2C	; 44
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <red_read+0x4a>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <red_read+0x54>
     70c:	00 00       	nop
     70e:	08 95       	ret

00000710 <green_read>:
     710:	ca df       	rcall	.-108    	; 0x6a6 <filter_green>
     712:	10 92 58 02 	sts	0x0258, r1
     716:	10 92 59 02 	sts	0x0259, r1
     71a:	10 92 5a 02 	sts	0x025A, r1
     71e:	10 92 5b 02 	sts	0x025B, r1
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	8f e7       	ldi	r24, 0x7F	; 127
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	80 40       	sbci	r24, 0x00	; 0
     72c:	90 40       	sbci	r25, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <green_read+0x18>
     730:	00 c0       	rjmp	.+0      	; 0x732 <green_read+0x22>
     732:	00 00       	nop
     734:	80 91 58 02 	lds	r24, 0x0258
     738:	90 91 59 02 	lds	r25, 0x0259
     73c:	a0 91 5a 02 	lds	r26, 0x025A
     740:	b0 91 5b 02 	lds	r27, 0x025B
     744:	80 93 7a 02 	sts	0x027A, r24
     748:	90 93 7b 02 	sts	0x027B, r25
     74c:	a0 93 7c 02 	sts	0x027C, r26
     750:	b0 93 7d 02 	sts	0x027D, r27
     754:	08 95       	ret

00000756 <blue_read>:
     756:	aa df       	rcall	.-172    	; 0x6ac <filter_blue>
     758:	10 92 58 02 	sts	0x0258, r1
     75c:	10 92 59 02 	sts	0x0259, r1
     760:	10 92 5a 02 	sts	0x025A, r1
     764:	10 92 5b 02 	sts	0x025B, r1
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	8f e7       	ldi	r24, 0x7F	; 127
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <blue_read+0x18>
     776:	00 c0       	rjmp	.+0      	; 0x778 <blue_read+0x22>
     778:	00 00       	nop
     77a:	80 91 58 02 	lds	r24, 0x0258
     77e:	90 91 59 02 	lds	r25, 0x0259
     782:	a0 91 5a 02 	lds	r26, 0x025A
     786:	b0 91 5b 02 	lds	r27, 0x025B
     78a:	80 93 6e 02 	sts	0x026E, r24
     78e:	90 93 6f 02 	sts	0x026F, r25
     792:	a0 93 70 02 	sts	0x0270, r26
     796:	b0 93 71 02 	sts	0x0271, r27
     79a:	08 95       	ret

0000079c <left_encoder_pin_config>:
     79c:	6c 98       	cbi	0x0d, 4	; 13
     79e:	74 9a       	sbi	0x0e, 4	; 14
     7a0:	08 95       	ret

000007a2 <right_encoder_pin_config>:
     7a2:	6d 98       	cbi	0x0d, 5	; 13
     7a4:	75 9a       	sbi	0x0e, 5	; 14
     7a6:	08 95       	ret

000007a8 <port_init_poz>:
     7a8:	9a de       	rcall	.-716    	; 0x4de <motion_pin_config>
     7aa:	f8 df       	rcall	.-16     	; 0x79c <left_encoder_pin_config>
     7ac:	fa cf       	rjmp	.-12     	; 0x7a2 <right_encoder_pin_config>
     7ae:	08 95       	ret

000007b0 <left_position_encoder_interrupt_init>:
     7b0:	f8 94       	cli
     7b2:	ea e6       	ldi	r30, 0x6A	; 106
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	82 60       	ori	r24, 0x02	; 2
     7ba:	80 83       	st	Z, r24
     7bc:	ec 9a       	sbi	0x1d, 4	; 29
     7be:	78 94       	sei
     7c0:	08 95       	ret

000007c2 <right_position_encoder_interrupt_init>:
     7c2:	f8 94       	cli
     7c4:	ea e6       	ldi	r30, 0x6A	; 106
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	88 60       	ori	r24, 0x08	; 8
     7cc:	80 83       	st	Z, r24
     7ce:	ed 9a       	sbi	0x1d, 5	; 29
     7d0:	78 94       	sei
     7d2:	08 95       	ret

000007d4 <__vector_6>:
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	80 91 5c 02 	lds	r24, 0x025C
     7ea:	90 91 5d 02 	lds	r25, 0x025D
     7ee:	a0 91 5e 02 	lds	r26, 0x025E
     7f2:	b0 91 5f 02 	lds	r27, 0x025F
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	a1 1d       	adc	r26, r1
     7fa:	b1 1d       	adc	r27, r1
     7fc:	80 93 5c 02 	sts	0x025C, r24
     800:	90 93 5d 02 	sts	0x025D, r25
     804:	a0 93 5e 02 	sts	0x025E, r26
     808:	b0 93 5f 02 	sts	0x025F, r27
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_5>:
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	80 91 60 02 	lds	r24, 0x0260
     834:	90 91 61 02 	lds	r25, 0x0261
     838:	a0 91 62 02 	lds	r26, 0x0262
     83c:	b0 91 63 02 	lds	r27, 0x0263
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	a1 1d       	adc	r26, r1
     844:	b1 1d       	adc	r27, r1
     846:	80 93 60 02 	sts	0x0260, r24
     84a:	90 93 61 02 	sts	0x0261, r25
     84e:	a0 93 62 02 	sts	0x0262, r26
     852:	b0 93 63 02 	sts	0x0263, r27
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	1f 90       	pop	r1
     866:	18 95       	reti

00000868 <angle_rotate>:
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	bc 01       	movw	r22, r24
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__floatunsisf>
     87e:	28 e4       	ldi	r18, 0x48	; 72
     880:	31 ee       	ldi	r19, 0xE1	; 225
     882:	42 e8       	ldi	r20, 0x82	; 130
     884:	50 e4       	ldi	r21, 0x40	; 64
     886:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__divsf3>
     88a:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fixunssfsi>
     88e:	cb 01       	movw	r24, r22
     890:	a0 e0       	ldi	r26, 0x00	; 0
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	10 92 5c 02 	sts	0x025C, r1
     898:	10 92 5d 02 	sts	0x025D, r1
     89c:	10 92 5e 02 	sts	0x025E, r1
     8a0:	10 92 5f 02 	sts	0x025F, r1
     8a4:	10 92 60 02 	sts	0x0260, r1
     8a8:	10 92 61 02 	sts	0x0261, r1
     8ac:	10 92 62 02 	sts	0x0262, r1
     8b0:	10 92 63 02 	sts	0x0263, r1
     8b4:	51 e0       	ldi	r21, 0x01	; 1
     8b6:	e0 e0       	ldi	r30, 0x00	; 0
     8b8:	c0 90 5c 02 	lds	r12, 0x025C
     8bc:	d0 90 5d 02 	lds	r13, 0x025D
     8c0:	e0 90 5e 02 	lds	r14, 0x025E
     8c4:	f0 90 5f 02 	lds	r15, 0x025F
     8c8:	00 91 60 02 	lds	r16, 0x0260
     8cc:	10 91 61 02 	lds	r17, 0x0261
     8d0:	20 91 62 02 	lds	r18, 0x0262
     8d4:	30 91 63 02 	lds	r19, 0x0263
     8d8:	45 2f       	mov	r20, r21
     8da:	08 17       	cp	r16, r24
     8dc:	19 07       	cpc	r17, r25
     8de:	2a 07       	cpc	r18, r26
     8e0:	3b 07       	cpc	r19, r27
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <angle_rotate+0x7e>
     8e4:	4e 2f       	mov	r20, r30
     8e6:	41 11       	cpse	r20, r1
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <angle_rotate+0x94>
     8ea:	25 2f       	mov	r18, r21
     8ec:	c8 16       	cp	r12, r24
     8ee:	d9 06       	cpc	r13, r25
     8f0:	ea 06       	cpc	r14, r26
     8f2:	fb 06       	cpc	r15, r27
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <angle_rotate+0x90>
     8f6:	2e 2f       	mov	r18, r30
     8f8:	22 23       	and	r18, r18
     8fa:	f1 f2       	breq	.-68     	; 0x8b8 <angle_rotate+0x50>
     8fc:	13 de       	rcall	.-986    	; 0x524 <stop>
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <linear_distance_mm>:
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	bc 01       	movw	r22, r24
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__floatunsisf>
     91a:	25 ee       	ldi	r18, 0xE5	; 229
     91c:	30 ed       	ldi	r19, 0xD0	; 208
     91e:	4a ea       	ldi	r20, 0xAA	; 170
     920:	50 e4       	ldi	r21, 0x40	; 64
     922:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__divsf3>
     926:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fixunssfsi>
     92a:	10 92 5c 02 	sts	0x025C, r1
     92e:	10 92 5d 02 	sts	0x025D, r1
     932:	10 92 5e 02 	sts	0x025E, r1
     936:	10 92 5f 02 	sts	0x025F, r1
     93a:	00 91 5c 02 	lds	r16, 0x025C
     93e:	10 91 5d 02 	lds	r17, 0x025D
     942:	20 91 5e 02 	lds	r18, 0x025E
     946:	30 91 5f 02 	lds	r19, 0x025F
     94a:	60 17       	cp	r22, r16
     94c:	71 07       	cpc	r23, r17
     94e:	82 07       	cpc	r24, r18
     950:	93 07       	cpc	r25, r19
     952:	98 f7       	brcc	.-26     	; 0x93a <linear_distance_mm+0x2e>
     954:	e7 dd       	rcall	.-1074   	; 0x524 <stop>
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <forward_mm>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
     962:	d4 dd       	rcall	.-1112   	; 0x50c <forward>
     964:	ce 01       	movw	r24, r28
     966:	d2 df       	rcall	.-92     	; 0x90c <linear_distance_mm>
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <back_mm>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	ec 01       	movw	r28, r24
     974:	ce dd       	rcall	.-1124   	; 0x512 <back>
     976:	ce 01       	movw	r24, r28
     978:	c9 df       	rcall	.-110    	; 0x90c <linear_distance_mm>
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <left_degrees>:
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	c8 dd       	rcall	.-1136   	; 0x518 <left>
     988:	ce 01       	movw	r24, r28
     98a:	6e df       	rcall	.-292    	; 0x868 <angle_rotate>
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <right_degrees>:
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	ec 01       	movw	r28, r24
     998:	c2 dd       	rcall	.-1148   	; 0x51e <right>
     99a:	ce 01       	movw	r24, r28
     99c:	65 df       	rcall	.-310    	; 0x868 <angle_rotate>
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <init_devices>:
     9a4:	f8 94       	cli
     9a6:	00 df       	rcall	.-512    	; 0x7a8 <port_init_poz>
     9a8:	03 df       	rcall	.-506    	; 0x7b0 <left_position_encoder_interrupt_init>
     9aa:	0b df       	rcall	.-490    	; 0x7c2 <right_position_encoder_interrupt_init>
     9ac:	12 de       	rcall	.-988    	; 0x5d2 <port_init>
     9ae:	3d de       	rcall	.-902    	; 0x62a <color_sensor_pin_interrupt_init>
     9b0:	6a de       	rcall	.-812    	; 0x686 <adc_init>
     9b2:	95 dd       	rcall	.-1238   	; 0x4de <motion_pin_config>
     9b4:	79 dd       	rcall	.-1294   	; 0x4a8 <timer5_init>
     9b6:	ea dd       	rcall	.-1068   	; 0x58c <timer1_init>
     9b8:	78 94       	sei
     9ba:	08 95       	ret

000009bc <set_color>:
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	1a de       	rcall	.-972    	; 0x5f4 <ADC_Conversion>
     9c0:	80 93 51 02 	sts	0x0251, r24
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	16 de       	rcall	.-980    	; 0x5f4 <ADC_Conversion>
     9c8:	80 93 50 02 	sts	0x0250, r24
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	12 de       	rcall	.-988    	; 0x5f4 <ADC_Conversion>
     9d0:	80 93 4f 02 	sts	0x024F, r24
     9d4:	08 95       	ret

000009d6 <lower>:
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	31 f4       	brne	.+12     	; 0x9e6 <lower+0x10>
     9da:	10 92 8b 00 	sts	0x008B, r1
     9de:	83 e4       	ldi	r24, 0x43	; 67
     9e0:	80 93 8a 00 	sts	0x008A, r24
     9e4:	08 95       	ret
     9e6:	10 92 8b 00 	sts	0x008B, r1
     9ea:	83 e6       	ldi	r24, 0x63	; 99
     9ec:	80 93 8a 00 	sts	0x008A, r24
     9f0:	08 95       	ret

000009f2 <elevate>:
     9f2:	10 92 8b 00 	sts	0x008B, r1
     9f6:	83 e5       	ldi	r24, 0x53	; 83
     9f8:	80 93 8a 00 	sts	0x008A, r24
     9fc:	2f ef       	ldi	r18, 0xFF	; 255
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	9a e1       	ldi	r25, 0x1A	; 26
     a02:	21 50       	subi	r18, 0x01	; 1
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	90 40       	sbci	r25, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <elevate+0x10>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <elevate+0x1a>
     a0c:	00 00       	nop
     a0e:	a0 cd       	rjmp	.-1216   	; 0x550 <servo_2_free>
     a10:	08 95       	ret

00000a12 <open>:
     a12:	81 11       	cpse	r24, r1
     a14:	10 c0       	rjmp	.+32     	; 0xa36 <open+0x24>
     a16:	10 92 8d 00 	sts	0x008D, r1
     a1a:	83 e2       	ldi	r24, 0x23	; 35
     a1c:	80 93 8c 00 	sts	0x008C, r24
     a20:	2f ef       	ldi	r18, 0xFF	; 255
     a22:	8f e7       	ldi	r24, 0x7F	; 127
     a24:	96 e1       	ldi	r25, 0x16	; 22
     a26:	21 50       	subi	r18, 0x01	; 1
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	e1 f7       	brne	.-8      	; 0xa26 <open+0x14>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <open+0x1e>
     a30:	00 00       	nop
     a32:	95 cd       	rjmp	.-1238   	; 0x55e <servo_3_free>
     a34:	08 95       	ret
     a36:	10 92 89 00 	sts	0x0089, r1
     a3a:	83 e2       	ldi	r24, 0x23	; 35
     a3c:	80 93 88 00 	sts	0x0088, r24
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	8f e7       	ldi	r24, 0x7F	; 127
     a44:	96 e1       	ldi	r25, 0x16	; 22
     a46:	21 50       	subi	r18, 0x01	; 1
     a48:	80 40       	sbci	r24, 0x00	; 0
     a4a:	90 40       	sbci	r25, 0x00	; 0
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <open+0x34>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <open+0x3e>
     a50:	00 00       	nop
     a52:	77 cd       	rjmp	.-1298   	; 0x542 <servo_1_free>
     a54:	08 95       	ret

00000a56 <close>:
     a56:	81 11       	cpse	r24, r1
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <close+0x10>
     a5a:	10 92 8d 00 	sts	0x008D, r1
     a5e:	8d e3       	ldi	r24, 0x3D	; 61
     a60:	80 93 8c 00 	sts	0x008C, r24
     a64:	08 95       	ret
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	29 f4       	brne	.+10     	; 0xa74 <close+0x1e>
     a6a:	10 92 89 00 	sts	0x0089, r1
     a6e:	83 e4       	ldi	r24, 0x43	; 67
     a70:	80 93 88 00 	sts	0x0088, r24
     a74:	08 95       	ret

00000a76 <lcd>:
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	99 db       	rcall	.-2254   	; 0x1b2 <lcd_wr_command>
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	02 dc       	rcall	.-2044   	; 0x28a <lcd_cursor>
     a86:	ce 01       	movw	r24, r28
     a88:	f2 db       	rcall	.-2076   	; 0x26e <lcd_string>
     a8a:	2f ef       	ldi	r18, 0xFF	; 255
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9c e2       	ldi	r25, 0x2C	; 44
     a90:	21 50       	subi	r18, 0x01	; 1
     a92:	80 40       	sbci	r24, 0x00	; 0
     a94:	90 40       	sbci	r25, 0x00	; 0
     a96:	e1 f7       	brne	.-8      	; 0xa90 <lcd+0x1a>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <lcd+0x24>
     a9a:	00 00       	nop
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <buzzer>:
     aa2:	a0 dd       	rcall	.-1216   	; 0x5e4 <buzzer_on>
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	8f e7       	ldi	r24, 0x7F	; 127
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <buzzer+0x8>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <buzzer+0x12>
     ab4:	00 00       	nop
     ab6:	9a cd       	rjmp	.-1228   	; 0x5ec <buzzer_off>
     ab8:	08 95       	ret

00000aba <scan>:
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	fc dd       	rcall	.-1032   	; 0x6b8 <red_read>
     ac0:	4a de       	rcall	.-876    	; 0x756 <blue_read>
     ac2:	26 de       	rcall	.-948    	; 0x710 <green_read>
     ac4:	2f ef       	ldi	r18, 0xFF	; 255
     ac6:	8f e7       	ldi	r24, 0x7F	; 127
     ac8:	94 e0       	ldi	r25, 0x04	; 4
     aca:	21 50       	subi	r18, 0x01	; 1
     acc:	80 40       	sbci	r24, 0x00	; 0
     ace:	90 40       	sbci	r25, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <scan+0x10>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <scan+0x1a>
     ad4:	00 00       	nop
     ad6:	8b e0       	ldi	r24, 0x0B	; 11
     ad8:	8d dd       	rcall	.-1254   	; 0x5f4 <ADC_Conversion>
     ada:	88 33       	cpi	r24, 0x38	; 56
     adc:	20 f0       	brcs	.+8      	; 0xae6 <scan+0x2c>
     ade:	8b e0       	ldi	r24, 0x0B	; 11
     ae0:	89 dd       	rcall	.-1262   	; 0x5f4 <ADC_Conversion>
     ae2:	84 36       	cpi	r24, 0x64	; 100
     ae4:	20 f0       	brcs	.+8      	; 0xaee <scan+0x34>
     ae6:	dd df       	rcall	.-70     	; 0xaa2 <buzzer>
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	7b c0       	rjmp	.+246    	; 0xbe4 <scan+0x12a>
     aee:	80 91 6c 02 	lds	r24, 0x026C
     af2:	90 91 6d 02 	lds	r25, 0x026D
     af6:	aa 27       	eor	r26, r26
     af8:	97 fd       	sbrc	r25, 7
     afa:	a0 95       	com	r26
     afc:	ba 2f       	mov	r27, r26
     afe:	40 91 7e 02 	lds	r20, 0x027E
     b02:	50 91 7f 02 	lds	r21, 0x027F
     b06:	60 91 80 02 	lds	r22, 0x0280
     b0a:	70 91 81 02 	lds	r23, 0x0281
     b0e:	48 17       	cp	r20, r24
     b10:	59 07       	cpc	r21, r25
     b12:	6a 07       	cpc	r22, r26
     b14:	7b 07       	cpc	r23, r27
     b16:	d8 f4       	brcc	.+54     	; 0xb4e <scan+0x94>
     b18:	40 91 7a 02 	lds	r20, 0x027A
     b1c:	50 91 7b 02 	lds	r21, 0x027B
     b20:	60 91 7c 02 	lds	r22, 0x027C
     b24:	70 91 7d 02 	lds	r23, 0x027D
     b28:	48 17       	cp	r20, r24
     b2a:	59 07       	cpc	r21, r25
     b2c:	6a 07       	cpc	r22, r26
     b2e:	7b 07       	cpc	r23, r27
     b30:	70 f4       	brcc	.+28     	; 0xb4e <scan+0x94>
     b32:	40 91 6e 02 	lds	r20, 0x026E
     b36:	50 91 6f 02 	lds	r21, 0x026F
     b3a:	60 91 70 02 	lds	r22, 0x0270
     b3e:	70 91 71 02 	lds	r23, 0x0271
     b42:	48 17       	cp	r20, r24
     b44:	59 07       	cpc	r21, r25
     b46:	6a 07       	cpc	r22, r26
     b48:	7b 07       	cpc	r23, r27
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <scan+0x94>
     b4c:	46 c0       	rjmp	.+140    	; 0xbda <scan+0x120>
     b4e:	40 91 7e 02 	lds	r20, 0x027E
     b52:	50 91 7f 02 	lds	r21, 0x027F
     b56:	60 91 80 02 	lds	r22, 0x0280
     b5a:	70 91 81 02 	lds	r23, 0x0281
     b5e:	80 91 6e 02 	lds	r24, 0x026E
     b62:	90 91 6f 02 	lds	r25, 0x026F
     b66:	a0 91 70 02 	lds	r26, 0x0270
     b6a:	b0 91 71 02 	lds	r27, 0x0271
     b6e:	84 17       	cp	r24, r20
     b70:	95 07       	cpc	r25, r21
     b72:	a6 07       	cpc	r26, r22
     b74:	b7 07       	cpc	r27, r23
     b76:	c8 f4       	brcc	.+50     	; 0xbaa <scan+0xf0>
     b78:	00 91 7e 02 	lds	r16, 0x027E
     b7c:	10 91 7f 02 	lds	r17, 0x027F
     b80:	20 91 80 02 	lds	r18, 0x0280
     b84:	30 91 81 02 	lds	r19, 0x0281
     b88:	40 91 7a 02 	lds	r20, 0x027A
     b8c:	50 91 7b 02 	lds	r21, 0x027B
     b90:	60 91 7c 02 	lds	r22, 0x027C
     b94:	70 91 7d 02 	lds	r23, 0x027D
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	40 17       	cp	r20, r16
     b9e:	51 07       	cpc	r21, r17
     ba0:	62 07       	cpc	r22, r18
     ba2:	73 07       	cpc	r23, r19
     ba4:	f8 f4       	brcc	.+62     	; 0xbe4 <scan+0x12a>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	1d c0       	rjmp	.+58     	; 0xbe4 <scan+0x12a>
     baa:	40 91 6e 02 	lds	r20, 0x026E
     bae:	50 91 6f 02 	lds	r21, 0x026F
     bb2:	60 91 70 02 	lds	r22, 0x0270
     bb6:	70 91 71 02 	lds	r23, 0x0271
     bba:	80 91 7a 02 	lds	r24, 0x027A
     bbe:	90 91 7b 02 	lds	r25, 0x027B
     bc2:	a0 91 7c 02 	lds	r26, 0x027C
     bc6:	b0 91 7d 02 	lds	r27, 0x027D
     bca:	84 17       	cp	r24, r20
     bcc:	95 07       	cpc	r25, r21
     bce:	a6 07       	cpc	r26, r22
     bd0:	b7 07       	cpc	r27, r23
     bd2:	30 f4       	brcc	.+12     	; 0xbe0 <scan+0x126>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <scan+0x12a>
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <scan+0x12a>
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <setIndicatorAndColor>:
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd e9       	ldi	r28, 0x9D	; 157
     bf0:	d2 e0       	ldi	r29, 0x02	; 2
     bf2:	eb e8       	ldi	r30, 0x8B	; 139
     bf4:	f2 e0       	ldi	r31, 0x02	; 2
     bf6:	a4 e6       	ldi	r26, 0x64	; 100
     bf8:	b2 e0       	ldi	r27, 0x02	; 2
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	2e ef       	ldi	r18, 0xFE	; 254
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	89 93       	st	Y+, r24
     c04:	99 93       	st	Y+, r25
     c06:	33 83       	std	Z+3, r19	; 0x03
     c08:	22 83       	std	Z+2, r18	; 0x02
     c0a:	31 83       	std	Z+1, r19	; 0x01
     c0c:	20 83       	st	Z, r18
     c0e:	1d 92       	st	X+, r1
     c10:	1d 92       	st	X+, r1
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	34 96       	adiw	r30, 0x04	; 4
     c16:	84 30       	cpi	r24, 0x04	; 4
     c18:	91 05       	cpc	r25, r1
     c1a:	99 f7       	brne	.-26     	; 0xc02 <setIndicatorAndColor+0x18>
     c1c:	e0 91 9d 02 	lds	r30, 0x029D
     c20:	f0 91 9e 02 	lds	r31, 0x029E
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	eb 55       	subi	r30, 0x5B	; 91
     c2a:	fd 4f       	sbci	r31, 0xFD	; 253
     c2c:	11 82       	std	Z+1, r1	; 0x01
     c2e:	10 82       	st	Z, r1
     c30:	e0 91 9f 02 	lds	r30, 0x029F
     c34:	f0 91 a0 02 	lds	r31, 0x02A0
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	eb 55       	subi	r30, 0x5B	; 91
     c3e:	fd 4f       	sbci	r31, 0xFD	; 253
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24
     c48:	e0 91 a1 02 	lds	r30, 0x02A1
     c4c:	f0 91 a2 02 	lds	r31, 0x02A2
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	eb 55       	subi	r30, 0x5B	; 91
     c56:	fd 4f       	sbci	r31, 0xFD	; 253
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
     c60:	e0 91 a3 02 	lds	r30, 0x02A3
     c64:	f0 91 a4 02 	lds	r31, 0x02A4
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	eb 55       	subi	r30, 0x5B	; 91
     c6e:	fd 4f       	sbci	r31, 0xFD	; 253
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	9f ef       	ldi	r25, 0xFF	; 255
     c7c:	90 93 86 02 	sts	0x0286, r25
     c80:	80 93 85 02 	sts	0x0285, r24
     c84:	90 93 84 02 	sts	0x0284, r25
     c88:	80 93 83 02 	sts	0x0283, r24
     c8c:	90 93 b4 02 	sts	0x02B4, r25
     c90:	80 93 b3 02 	sts	0x02B3, r24
     c94:	90 93 b2 02 	sts	0x02B2, r25
     c98:	80 93 b1 02 	sts	0x02B1, r24
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <terminalCheck2>:

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
		total--;
}
void terminalCheck2()
{
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ca6:	86 e9       	ldi	r24, 0x96	; 150
     ca8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     cac:	80 93 2a 01 	sts	0x012A, r24
			back_mm(30);
		else forward_mm(30);
		flag = 1;
	}*/

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
     cb0:	80 91 87 02 	lds	r24, 0x0287
     cb4:	90 91 88 02 	lds	r25, 0x0288
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	91 05       	cpc	r25, r1
     cbc:	30 f4       	brcc	.+12     	; 0xcca <terminalCheck2+0x28>
     cbe:	20 91 00 02 	lds	r18, 0x0200
     cc2:	30 91 01 02 	lds	r19, 0x0201
     cc6:	23 2b       	or	r18, r19
     cc8:	69 f0       	breq	.+26     	; 0xce4 <terminalCheck2+0x42>
     cca:	9c 01       	movw	r18, r24
     ccc:	22 50       	subi	r18, 0x02	; 2
     cce:	31 09       	sbc	r19, r1
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	40 f5       	brcc	.+80     	; 0xd26 <terminalCheck2+0x84>
     cd6:	40 91 00 02 	lds	r20, 0x0200
     cda:	50 91 01 02 	lds	r21, 0x0201
     cde:	42 30       	cpi	r20, 0x02	; 2
     ce0:	51 05       	cpc	r21, r1
     ce2:	09 f5       	brne	.+66     	; 0xd26 <terminalCheck2+0x84>
	{
		left_degrees(30);
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	4b de       	rcall	.-874    	; 0x980 <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cea:	86 e9       	ldi	r24, 0x96	; 150
     cec:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     cf0:	80 93 2a 01 	sts	0x012A, r24
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <terminalCheck2+0x56>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
		left();
     cf6:	10 dc       	rcall	.-2016   	; 0x518 <left>

	if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
	{
		left_degrees(30);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	7c dc       	rcall	.-1800   	; 0x5f4 <ADC_Conversion>
     cfc:	82 33       	cpi	r24, 0x32	; 50
     cfe:	d8 f3       	brcs	.-10     	; 0xcf6 <terminalCheck2+0x54>
		left();
		//_delay_ms(100);
		stop();
     d00:	11 dc       	rcall	.-2014   	; 0x524 <stop>
		dir=(dir+3)%4;
     d02:	80 91 00 02 	lds	r24, 0x0200
     d06:	90 91 01 02 	lds	r25, 0x0201
     d0a:	03 96       	adiw	r24, 0x03	; 3
     d0c:	83 70       	andi	r24, 0x03	; 3
     d0e:	90 78       	andi	r25, 0x80	; 128
     d10:	99 23       	and	r25, r25
     d12:	24 f4       	brge	.+8      	; 0xd1c <terminalCheck2+0x7a>
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	8c 6f       	ori	r24, 0xFC	; 252
     d18:	9f 6f       	ori	r25, 0xFF	; 255
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	90 93 01 02 	sts	0x0201, r25
     d20:	80 93 00 02 	sts	0x0200, r24
     d24:	53 c0       	rjmp	.+166    	; 0xdcc <terminalCheck2+0x12a>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
     d26:	02 97       	sbiw	r24, 0x02	; 2
     d28:	30 f4       	brcc	.+12     	; 0xd36 <terminalCheck2+0x94>
     d2a:	80 91 00 02 	lds	r24, 0x0200
     d2e:	90 91 01 02 	lds	r25, 0x0201
     d32:	02 97       	sbiw	r24, 0x02	; 2
     d34:	49 f0       	breq	.+18     	; 0xd48 <terminalCheck2+0xa6>
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	38 f5       	brcc	.+78     	; 0xd8a <terminalCheck2+0xe8>
     d3c:	80 91 00 02 	lds	r24, 0x0200
     d40:	90 91 01 02 	lds	r25, 0x0201
     d44:	89 2b       	or	r24, r25
     d46:	09 f5       	brne	.+66     	; 0xd8a <terminalCheck2+0xe8>
		{
			right_degrees(30);
     d48:	8e e1       	ldi	r24, 0x1E	; 30
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	22 de       	rcall	.-956    	; 0x992 <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d4e:	86 e9       	ldi	r24, 0x96	; 150
     d50:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     d54:	80 93 2a 01 	sts	0x012A, r24
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <terminalCheck2+0xba>
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<50)
				right();
     d5a:	e1 db       	rcall	.-2110   	; 0x51e <right>
	}
	else if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
		{
			right_degrees(30);
			velocity(turn_v, turn_v);
			while (ADC_Conversion(1)<50)
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	4a dc       	rcall	.-1900   	; 0x5f4 <ADC_Conversion>
     d60:	82 33       	cpi	r24, 0x32	; 50
     d62:	d8 f3       	brcs	.-10     	; 0xd5a <terminalCheck2+0xb8>
				right();
			//_delay_ms(100);
			stop();	
     d64:	df db       	rcall	.-2114   	; 0x524 <stop>
			dir=(dir+1)%4;
     d66:	80 91 00 02 	lds	r24, 0x0200
     d6a:	90 91 01 02 	lds	r25, 0x0201
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	83 70       	andi	r24, 0x03	; 3
     d72:	90 78       	andi	r25, 0x80	; 128
     d74:	99 23       	and	r25, r25
     d76:	24 f4       	brge	.+8      	; 0xd80 <terminalCheck2+0xde>
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	8c 6f       	ori	r24, 0xFC	; 252
     d7c:	9f 6f       	ori	r25, 0xFF	; 255
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 01 02 	sts	0x0201, r25
     d84:	80 93 00 02 	sts	0x0200, r24
     d88:	21 c0       	rjmp	.+66     	; 0xdcc <terminalCheck2+0x12a>
		}
	else {
		left_degrees(150);
     d8a:	86 e9       	ldi	r24, 0x96	; 150
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	f8 dd       	rcall	.-1040   	; 0x980 <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d90:	86 e9       	ldi	r24, 0x96	; 150
     d92:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     d96:	80 93 2a 01 	sts	0x012A, r24
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <terminalCheck2+0xfc>
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
		left();
     d9c:	bd db       	rcall	.-2182   	; 0x518 <left>
			dir=(dir+1)%4;
		}
	else {
		left_degrees(150);
		velocity(turn_v, turn_v);
		while (ADC_Conversion(1)<50)
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	29 dc       	rcall	.-1966   	; 0x5f4 <ADC_Conversion>
     da2:	82 33       	cpi	r24, 0x32	; 50
     da4:	d8 f3       	brcs	.-10     	; 0xd9c <terminalCheck2+0xfa>
		left();
		//_delay_ms(50);
		stop();
     da6:	be db       	rcall	.-2180   	; 0x524 <stop>
		dir=(dir+2)%4;
     da8:	80 91 00 02 	lds	r24, 0x0200
     dac:	90 91 01 02 	lds	r25, 0x0201
     db0:	02 96       	adiw	r24, 0x02	; 2
     db2:	83 70       	andi	r24, 0x03	; 3
     db4:	90 78       	andi	r25, 0x80	; 128
     db6:	99 23       	and	r25, r25
     db8:	24 f4       	brge	.+8      	; 0xdc2 <terminalCheck2+0x120>
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	8c 6f       	ori	r24, 0xFC	; 252
     dbe:	9f 6f       	ori	r25, 0xFF	; 255
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	90 93 01 02 	sts	0x0201, r25
     dc6:	80 93 00 02 	sts	0x0200, r24
		lcd((char *)dir);
     dca:	55 de       	rcall	.-854    	; 0xa76 <lcd>
		}
	//printf("Enter term[%d][%d]\n", ct, 1);
	//scanf("%d", &term[ct][1]);
	term[ct][1] = scan();
     dcc:	c0 91 87 02 	lds	r28, 0x0287
     dd0:	d0 91 88 02 	lds	r29, 0x0288
     dd4:	72 de       	rcall	.-796    	; 0xaba <scan>
     dd6:	cc 0f       	add	r28, r28
     dd8:	dd 1f       	adc	r29, r29
     dda:	cc 0f       	add	r28, r28
     ddc:	dd 1f       	adc	r29, r29
     dde:	c5 57       	subi	r28, 0x75	; 117
     de0:	dd 4f       	sbci	r29, 0xFD	; 253
     de2:	9b 83       	std	Y+3, r25	; 0x03
     de4:	8a 83       	std	Y+2, r24	; 0x02
	if(term[ct][1]==-1)
     de6:	e0 91 87 02 	lds	r30, 0x0287
     dea:	f0 91 88 02 	lds	r31, 0x0288
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	e5 57       	subi	r30, 0x75	; 117
     df8:	fd 4f       	sbci	r31, 0xFD	; 253
     dfa:	42 81       	ldd	r20, Z+2	; 0x02
     dfc:	53 81       	ldd	r21, Z+3	; 0x03
     dfe:	4f 3f       	cpi	r20, 0xFF	; 255
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	52 07       	cpc	r21, r18
     e04:	41 f4       	brne	.+16     	; 0xe16 <terminalCheck2+0x174>
		lcd_print(2,11,9, 1);
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	49 e0       	ldi	r20, 0x09	; 9
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	6b e0       	ldi	r22, 0x0B	; 11
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	56 da       	rcall	.-2900   	; 0x2c0 <lcd_print>
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <terminalCheck2+0x17e>
	else
		lcd_print(2,11, term[ct][1], 1);
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	6b e0       	ldi	r22, 0x0B	; 11
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	50 da       	rcall	.-2912   	; 0x2c0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e20:	4f ef       	ldi	r20, 0xFF	; 255
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9c e2       	ldi	r25, 0x2C	; 44
     e26:	41 50       	subi	r20, 0x01	; 1
     e28:	80 40       	sbci	r24, 0x00	; 0
     e2a:	90 40       	sbci	r25, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <terminalCheck2+0x184>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <terminalCheck2+0x18e>
     e30:	00 00       	nop
	_delay_ms(1000);
	if (term[ct][1] == -1 || term[ct][1] == color[ct])
     e32:	80 91 87 02 	lds	r24, 0x0287
     e36:	90 91 88 02 	lds	r25, 0x0288
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	e5 57       	subi	r30, 0x75	; 117
     e46:	fd 4f       	sbci	r31, 0xFD	; 253
     e48:	22 81       	ldd	r18, Z+2	; 0x02
     e4a:	33 81       	ldd	r19, Z+3	; 0x03
     e4c:	2f 3f       	cpi	r18, 0xFF	; 255
     e4e:	4f ef       	ldi	r20, 0xFF	; 255
     e50:	34 07       	cpc	r19, r20
     e52:	51 f0       	breq	.+20     	; 0xe68 <terminalCheck2+0x1c6>
     e54:	fc 01       	movw	r30, r24
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e3 56       	subi	r30, 0x63	; 99
     e5c:	fd 4f       	sbci	r31, 0xFD	; 253
     e5e:	40 81       	ld	r20, Z
     e60:	51 81       	ldd	r21, Z+1	; 0x01
     e62:	24 17       	cp	r18, r20
     e64:	35 07       	cpc	r19, r21
     e66:	51 f4       	brne	.+20     	; 0xe7c <terminalCheck2+0x1da>
		total--;
     e68:	20 91 04 02 	lds	r18, 0x0204
     e6c:	30 91 05 02 	lds	r19, 0x0205
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	31 09       	sbc	r19, r1
     e74:	30 93 05 02 	sts	0x0205, r19
     e78:	20 93 04 02 	sts	0x0204, r18
	visited[ct] = 1;
     e7c:	fc 01       	movw	r30, r24
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	ec 59       	subi	r30, 0x9C	; 156
     e84:	fd 4f       	sbci	r31, 0xFD	; 253
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
	visitedCount++;
     e8e:	80 91 52 02 	lds	r24, 0x0252
     e92:	90 91 53 02 	lds	r25, 0x0253
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	90 93 53 02 	sts	0x0253, r25
     e9c:	80 93 52 02 	sts	0x0252, r24
	lcd_print(2,15,dir,1);
     ea0:	40 91 00 02 	lds	r20, 0x0200
     ea4:	50 91 01 02 	lds	r21, 0x0201
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	6f e0       	ldi	r22, 0x0F	; 15
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	07 da       	rcall	.-3058   	; 0x2c0 <lcd_print>
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	9f ef       	ldi	r25, 0xFF	; 255
     eb6:	2c e2       	ldi	r18, 0x2C	; 44
     eb8:	81 50       	subi	r24, 0x01	; 1
     eba:	90 40       	sbci	r25, 0x00	; 0
     ebc:	20 40       	sbci	r18, 0x00	; 0
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <terminalCheck2+0x216>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <terminalCheck2+0x220>
     ec2:	00 00       	nop
	_delay_ms(1000);
}
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <pick>:

void pick(int side)
{	
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
	lower(side);
     ed0:	82 dd       	rcall	.-1276   	; 0x9d6 <lower>
     ed2:	2f ef       	ldi	r18, 0xFF	; 255
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9c e2       	ldi	r25, 0x2C	; 44
     ed8:	21 50       	subi	r18, 0x01	; 1
     eda:	80 40       	sbci	r24, 0x00	; 0
     edc:	90 40       	sbci	r25, 0x00	; 0
     ede:	e1 f7       	brne	.-8      	; 0xed8 <pick+0xe>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <pick+0x18>
     ee2:	00 00       	nop
	_delay_ms(1000);
	close(side);
     ee4:	8c 2f       	mov	r24, r28
     ee6:	b7 dd       	rcall	.-1170   	; 0xa56 <close>
     ee8:	2f ef       	ldi	r18, 0xFF	; 255
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	96 e8       	ldi	r25, 0x86	; 134
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	80 40       	sbci	r24, 0x00	; 0
     ef2:	90 40       	sbci	r25, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <pick+0x24>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <pick+0x2e>
     ef8:	00 00       	nop
	_delay_ms(3000);
	elevate();//mid
     efa:	7b dd       	rcall	.-1290   	; 0x9f2 <elevate>
     efc:	2f ef       	ldi	r18, 0xFF	; 255
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9c e2       	ldi	r25, 0x2C	; 44
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	e1 f7       	brne	.-8      	; 0xf02 <pick+0x38>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <pick+0x42>
     f0c:	00 00       	nop
	_delay_ms(1000);
	armCount--;
     f0e:	80 91 06 02 	lds	r24, 0x0206
     f12:	90 91 07 02 	lds	r25, 0x0207
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	90 93 07 02 	sts	0x0207, r25
     f1c:	80 93 06 02 	sts	0x0206, r24
	if (side == 0)
     f20:	cd 2b       	or	r28, r29
     f22:	21 f4       	brne	.+8      	; 0xf2c <pick+0x62>
		lcd("pickRight");
     f24:	82 e1       	ldi	r24, 0x12	; 18
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	a6 dd       	rcall	.-1204   	; 0xa76 <lcd>
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <pick+0x68>
	else
		lcd("pickLeft");
     f2c:	8c e1       	ldi	r24, 0x1C	; 28
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	a2 dd       	rcall	.-1212   	; 0xa76 <lcd>
     f32:	2f ef       	ldi	r18, 0xFF	; 255
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9c e2       	ldi	r25, 0x2C	; 44
     f38:	21 50       	subi	r18, 0x01	; 1
     f3a:	80 40       	sbci	r24, 0x00	; 0
     f3c:	90 40       	sbci	r25, 0x00	; 0
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <pick+0x6e>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <pick+0x78>
     f42:	00 00       	nop
	_delay_ms(1000);
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <drop>:
			}
		}
}

void drop(int side)
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
	lower(side);//lower
     f50:	42 dd       	rcall	.-1404   	; 0x9d6 <lower>
     f52:	2f ef       	ldi	r18, 0xFF	; 255
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	9c e2       	ldi	r25, 0x2C	; 44
     f58:	21 50       	subi	r18, 0x01	; 1
     f5a:	80 40       	sbci	r24, 0x00	; 0
     f5c:	90 40       	sbci	r25, 0x00	; 0
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <drop+0xe>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <drop+0x18>
     f62:	00 00       	nop
	_delay_ms(1000);
	open(side);
     f64:	8c 2f       	mov	r24, r28
     f66:	55 dd       	rcall	.-1366   	; 0xa12 <open>
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	96 e8       	ldi	r25, 0x86	; 134
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	80 40       	sbci	r24, 0x00	; 0
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <drop+0x24>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <drop+0x2e>
     f78:	00 00       	nop
	_delay_ms(3000);
	elevate();//mid
     f7a:	3b dd       	rcall	.-1418   	; 0x9f2 <elevate>
     f7c:	2f ef       	ldi	r18, 0xFF	; 255
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9c e2       	ldi	r25, 0x2C	; 44
     f82:	21 50       	subi	r18, 0x01	; 1
     f84:	80 40       	sbci	r24, 0x00	; 0
     f86:	90 40       	sbci	r25, 0x00	; 0
     f88:	e1 f7       	brne	.-8      	; 0xf82 <drop+0x38>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <drop+0x42>
     f8c:	00 00       	nop
	_delay_ms(1000);
	
	armCount++;
     f8e:	80 91 06 02 	lds	r24, 0x0206
     f92:	90 91 07 02 	lds	r25, 0x0207
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	90 93 07 02 	sts	0x0207, r25
     f9c:	80 93 06 02 	sts	0x0206, r24
	if(side==0)
     fa0:	cd 2b       	or	r28, r29
     fa2:	21 f4       	brne	.+8      	; 0xfac <drop+0x62>
	lcd("dropRight");
     fa4:	85 e2       	ldi	r24, 0x25	; 37
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	66 dd       	rcall	.-1332   	; 0xa76 <lcd>
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <drop+0x68>
	else
	lcd("dropLeft");
     fac:	8f e2       	ldi	r24, 0x2F	; 47
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	62 dd       	rcall	.-1340   	; 0xa76 <lcd>
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <predict>:
	adj = adjCount(ct);
}

void predict()
{
	if (term[0][0] == color[0] && term[0][1] == color[0] && term[1][0] == color[1] && term[1][1] == color[1] && term[ct][0] == color[ct] && term[ct][1] == color[ct] && sort[0] == -1 && sort[1] == -1 && arm[0] == -1 && arm[1] == -1)
     fb8:	80 91 8b 02 	lds	r24, 0x028B
     fbc:	90 91 8c 02 	lds	r25, 0x028C
     fc0:	20 91 9d 02 	lds	r18, 0x029D
     fc4:	30 91 9e 02 	lds	r19, 0x029E
     fc8:	82 17       	cp	r24, r18
     fca:	93 07       	cpc	r25, r19
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <predict+0x18>
     fce:	5f c0       	rjmp	.+190    	; 0x108e <predict+0xd6>
     fd0:	20 91 8d 02 	lds	r18, 0x028D
     fd4:	30 91 8e 02 	lds	r19, 0x028E
     fd8:	82 17       	cp	r24, r18
     fda:	93 07       	cpc	r25, r19
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <predict+0x28>
     fde:	57 c0       	rjmp	.+174    	; 0x108e <predict+0xd6>
     fe0:	80 91 8f 02 	lds	r24, 0x028F
     fe4:	90 91 90 02 	lds	r25, 0x0290
     fe8:	20 91 9f 02 	lds	r18, 0x029F
     fec:	30 91 a0 02 	lds	r19, 0x02A0
     ff0:	82 17       	cp	r24, r18
     ff2:	93 07       	cpc	r25, r19
     ff4:	09 f0       	breq	.+2      	; 0xff8 <predict+0x40>
     ff6:	4b c0       	rjmp	.+150    	; 0x108e <predict+0xd6>
     ff8:	20 91 91 02 	lds	r18, 0x0291
     ffc:	30 91 92 02 	lds	r19, 0x0292
    1000:	82 17       	cp	r24, r18
    1002:	93 07       	cpc	r25, r19
    1004:	09 f0       	breq	.+2      	; 0x1008 <predict+0x50>
    1006:	43 c0       	rjmp	.+134    	; 0x108e <predict+0xd6>
    1008:	80 91 87 02 	lds	r24, 0x0287
    100c:	90 91 88 02 	lds	r25, 0x0288
    1010:	fc 01       	movw	r30, r24
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	e5 57       	subi	r30, 0x75	; 117
    101c:	fd 4f       	sbci	r31, 0xFD	; 253
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	fc 01       	movw	r30, r24
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	e3 56       	subi	r30, 0x63	; 99
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	40 81       	ld	r20, Z
    102e:	51 81       	ldd	r21, Z+1	; 0x01
    1030:	24 17       	cp	r18, r20
    1032:	35 07       	cpc	r19, r21
    1034:	61 f5       	brne	.+88     	; 0x108e <predict+0xd6>
    1036:	fc 01       	movw	r30, r24
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	e5 57       	subi	r30, 0x75	; 117
    1042:	fd 4f       	sbci	r31, 0xFD	; 253
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	01 f5       	brne	.+64     	; 0x108e <predict+0xd6>
    104e:	80 91 83 02 	lds	r24, 0x0283
    1052:	90 91 84 02 	lds	r25, 0x0284
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	d1 f4       	brne	.+52     	; 0x108e <predict+0xd6>
    105a:	80 91 85 02 	lds	r24, 0x0285
    105e:	90 91 86 02 	lds	r25, 0x0286
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	a1 f4       	brne	.+40     	; 0x108e <predict+0xd6>
    1066:	80 91 b1 02 	lds	r24, 0x02B1
    106a:	90 91 b2 02 	lds	r25, 0x02B2
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	71 f4       	brne	.+28     	; 0x108e <predict+0xd6>
    1072:	80 91 b3 02 	lds	r24, 0x02B3
    1076:	90 91 b4 02 	lds	r25, 0x02B4
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	41 f4       	brne	.+16     	; 0x108e <predict+0xd6>
		sorted = total;
    107e:	80 91 04 02 	lds	r24, 0x0204
    1082:	90 91 05 02 	lds	r25, 0x0205
    1086:	90 93 57 02 	sts	0x0257, r25
    108a:	80 93 56 02 	sts	0x0256, r24
    108e:	08 95       	ret

00001090 <__init__>:
}


void __init__()
{
	init_devices();
    1090:	89 dc       	rcall	.-1774   	; 0x9a4 <init_devices>
	lcd_set_4bit();
    1092:	4a d8       	rcall	.-3948   	; 0x128 <lcd_set_4bit>
	lcd_init();
    1094:	b3 d8       	rcall	.-3738   	; 0x1fc <lcd_init>
	color_sensor_scaling();
    1096:	0d db       	rcall	.-2534   	; 0x6b2 <color_sensor_scaling>
	setIndicatorAndColor();
    1098:	a8 dd       	rcall	.-1200   	; 0xbea <setIndicatorAndColor>
	threshold=6000;
    109a:	80 e7       	ldi	r24, 0x70	; 112
    109c:	97 e1       	ldi	r25, 0x17	; 23
    109e:	90 93 6d 02 	sts	0x026D, r25
    10a2:	80 93 6c 02 	sts	0x026C, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    10a6:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    10aa:	83 e5       	ldi	r24, 0x53	; 83
    10ac:	80 93 8a 00 	sts	0x008A, r24
    10b0:	08 95       	ret

000010b2 <node>:
******************BLACK*LINE***********************
**************************************************/
void node()
{
	//buzzer();
	lcd_print(1,1,1,1);
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	00 d9       	rcall	.-3584   	; 0x2c0 <lcd_print>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10c0:	86 e9       	ldi	r24, 0x96	; 150
    10c2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    10c6:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
	forward_mm(50);
    10ca:	82 e3       	ldi	r24, 0x32	; 50
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	46 dc       	rcall	.-1908   	; 0x95c <forward_mm>
	stop();
    10d0:	29 ca       	rjmp	.-2990   	; 0x524 <stop>
    10d2:	08 95       	ret

000010d4 <Delay>:
}
/*************************GULLA CODE**Blackline Forward***********/

char Delay(int tim)
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	8c 01       	movw	r16, r24
	int i;
	for(i=0;i<tim && ADC_Conversion(2)<0x28;i++)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40));i++)
    10de:	18 16       	cp	r1, r24
    10e0:	19 06       	cpc	r1, r25
    10e2:	8c f4       	brge	.+34     	; 0x1106 <Delay+0x32>
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
    10e6:	d0 e0       	ldi	r29, 0x00	; 0
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <Delay+0x28>
    10ea:	86 e6       	ldi	r24, 0x66	; 102
    10ec:	9e e0       	ldi	r25, 0x0E	; 14
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <Delay+0x1a>
    10f2:	00 00       	nop
    10f4:	21 96       	adiw	r28, 0x01	; 1
    10f6:	c0 17       	cp	r28, r16
    10f8:	d1 07       	cpc	r29, r17
    10fa:	39 f0       	breq	.+14     	; 0x110a <Delay+0x36>
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	7a da       	rcall	.-2828   	; 0x5f4 <ADC_Conversion>
    1100:	88 32       	cpi	r24, 0x28	; 40
    1102:	98 f3       	brcs	.-26     	; 0x10ea <Delay+0x16>
    1104:	02 c0       	rjmp	.+4      	; 0x110a <Delay+0x36>
    1106:	c0 e0       	ldi	r28, 0x00	; 0
    1108:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//set_color();
		_delay_ms(1);
	}
	stop();
    110a:	0c da       	rcall	.-3048   	; 0x524 <stop>
	if(i<tim)
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	c0 17       	cp	r28, r16
    1110:	d1 07       	cpc	r29, r17
    1112:	0c f0       	brlt	.+2      	; 0x1116 <Delay+0x42>
    1114:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else return 0;
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <semiCorrect>:

char semiCorrect()
{
	
	//lcd_print(1,2,1,1);
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
    1120:	80 91 50 02 	lds	r24, 0x0250
    1124:	89 32       	cpi	r24, 0x29	; 41
    1126:	58 f0       	brcs	.+22     	; 0x113e <semiCorrect+0x1e>
    1128:	90 91 51 02 	lds	r25, 0x0251
    112c:	99 32       	cpi	r25, 0x29	; 41
    112e:	20 f4       	brcc	.+8      	; 0x1138 <semiCorrect+0x18>
    1130:	90 91 4f 02 	lds	r25, 0x024F
    1134:	99 32       	cpi	r25, 0x29	; 41
    1136:	18 f0       	brcs	.+6      	; 0x113e <semiCorrect+0x1e>
	{
		node();
    1138:	bc df       	rcall	.-136    	; 0x10b2 <node>
		return 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	08 95       	ret
	}
	if(Center_white_line<40)
    113e:	88 32       	cpi	r24, 0x28	; 40
    1140:	e0 f4       	brcc	.+56     	; 0x117a <semiCorrect+0x5a>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
    1142:	80 91 51 02 	lds	r24, 0x0251
    1146:	89 32       	cpi	r24, 0x29	; 41
    1148:	58 f0       	brcs	.+22     	; 0x1160 <semiCorrect+0x40>
    114a:	90 91 4f 02 	lds	r25, 0x024F
    114e:	98 32       	cpi	r25, 0x28	; 40
    1150:	38 f4       	brcc	.+14     	; 0x1160 <semiCorrect+0x40>
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,1,1);
				left();
    1152:	e2 d9       	rcall	.-3132   	; 0x518 <left>
				set_color();
    1154:	33 dc       	rcall	.-1946   	; 0x9bc <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
    1156:	80 91 50 02 	lds	r24, 0x0250
    115a:	88 32       	cpi	r24, 0x28	; 40
    115c:	d0 f3       	brcs	.-12     	; 0x1152 <semiCorrect+0x32>
    115e:	0f c0       	rjmp	.+30     	; 0x117e <semiCorrect+0x5e>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
    1160:	90 91 4f 02 	lds	r25, 0x024F
    1164:	99 32       	cpi	r25, 0x29	; 41
    1166:	68 f0       	brcs	.+26     	; 0x1182 <semiCorrect+0x62>
    1168:	88 32       	cpi	r24, 0x28	; 40
    116a:	68 f4       	brcc	.+26     	; 0x1186 <semiCorrect+0x66>
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,2,1);
				right();
    116c:	d8 d9       	rcall	.-3152   	; 0x51e <right>
				set_color();
    116e:	26 dc       	rcall	.-1972   	; 0x9bc <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
    1170:	80 91 50 02 	lds	r24, 0x0250
    1174:	88 32       	cpi	r24, 0x28	; 40
    1176:	d0 f3       	brcs	.-12     	; 0x116c <semiCorrect+0x4c>
    1178:	08 c0       	rjmp	.+16     	; 0x118a <semiCorrect+0x6a>
			}
			//lcd("-");
			
		}
	}
	return 0;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	08 95       	ret
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 95       	ret
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	08 95       	ret
    118a:	80 e0       	ldi	r24, 0x00	; 0
	//lcd_print(1,2,0,1);
	
}
    118c:	08 95       	ret

0000118e <correct>:
char correct()
{
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
	unsigned int d=2;
	unsigned int i=50;
	Degrees=5;
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 73 02 	sts	0x0273, r25
    119c:	80 93 72 02 	sts	0x0272, r24
	stop();
    11a0:	c1 d9       	rcall	.-3198   	; 0x524 <stop>
			i+=50;
		}
	}*/
	//else
	
		lf=1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 4e 02 	sts	0x024E, r24
	
}
char correct()
{
	unsigned int d=2;
	unsigned int i=50;
    11a8:	c2 e3       	ldi	r28, 0x32	; 50
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
	//else
	
		lf=1;
		while(1)
		{
			left();
    11ac:	b5 d9       	rcall	.-3222   	; 0x518 <left>
			if(Delay(i))
    11ae:	ce 01       	movw	r24, r28
    11b0:	91 df       	rcall	.-222    	; 0x10d4 <Delay>
    11b2:	81 11       	cpse	r24, r1
    11b4:	2a c0       	rjmp	.+84     	; 0x120a <correct+0x7c>
				return 0;
			stop();
    11b6:	b6 d9       	rcall	.-3220   	; 0x524 <stop>
			lcd_print(1,1,1,1);
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	7d d8       	rcall	.-3846   	; 0x2c0 <lcd_print>
			//set_color();
			if(semiCorrect())
    11c6:	ac df       	rcall	.-168    	; 0x1120 <semiCorrect>
    11c8:	18 2f       	mov	r17, r24
    11ca:	81 11       	cpse	r24, r1
    11cc:	20 c0       	rjmp	.+64     	; 0x120e <correct+0x80>
				return 1;
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	11 da       	rcall	.-3038   	; 0x5f4 <ADC_Conversion>
    11d2:	89 32       	cpi	r24, 0x29	; 41
    11d4:	c0 f4       	brcc	.+48     	; 0x1206 <correct+0x78>
				break;
			i+=50;
			right();
    11d6:	a3 d9       	rcall	.-3258   	; 0x51e <right>
			if(Delay(i))
    11d8:	ce 01       	movw	r24, r28
    11da:	c2 96       	adiw	r24, 0x32	; 50
    11dc:	7b df       	rcall	.-266    	; 0x10d4 <Delay>
    11de:	81 11       	cpse	r24, r1
    11e0:	19 c0       	rjmp	.+50     	; 0x1214 <correct+0x86>
				return 0;
			stop();
    11e2:	a0 d9       	rcall	.-3264   	; 0x524 <stop>
			lcd_print(1,1,2,1);
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	42 e0       	ldi	r20, 0x02	; 2
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	67 d8       	rcall	.-3890   	; 0x2c0 <lcd_print>
			if(semiCorrect())
    11f2:	96 df       	rcall	.-212    	; 0x1120 <semiCorrect>
    11f4:	81 11       	cpse	r24, r1
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <correct+0x84>
				return 1;
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	fc d9       	rcall	.-3080   	; 0x5f4 <ADC_Conversion>
    11fc:	89 32       	cpi	r24, 0x29	; 41
    11fe:	18 f4       	brcc	.+6      	; 0x1206 <correct+0x78>
				break;
			//d*=2;
			//set_color();
			//i+=2;
			i+=50;
    1200:	cc 59       	subi	r28, 0x9C	; 156
    1202:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
    1204:	d3 cf       	rjmp	.-90     	; 0x11ac <correct+0x1e>
	//lcd("-");
	stop();
    1206:	8e d9       	rcall	.-3300   	; 0x524 <stop>
	return 0;
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <correct+0x86>
		lf=1;
		while(1)
		{
			left();
			if(Delay(i))
				return 0;
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <correct+0x86>
			stop();
			lcd_print(1,1,1,1);
			//set_color();
			if(semiCorrect())
				return 1;
    120e:	11 e0       	ldi	r17, 0x01	; 1
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <correct+0x86>
			if(Delay(i))
				return 0;
			stop();
			lcd_print(1,1,2,1);
			if(semiCorrect())
				return 1;
    1212:	11 e0       	ldi	r17, 0x01	; 1
		
	}
	//lcd("-");
	stop();
	return 0;
}
    1214:	81 2f       	mov	r24, r17
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	08 95       	ret

0000121e <noNatak>:
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    121e:	88 ec       	ldi	r24, 0xC8	; 200
    1220:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1224:	80 93 2a 01 	sts	0x012A, r24
	int flag=0;
	//buzzer_on();
	//lcd_print(2,1,7,1);
	//lcd("no");
	velocity(correct_v,correct_v);
	if(Center_white_line<40)
    1228:	80 91 50 02 	lds	r24, 0x0250
    122c:	88 32       	cpi	r24, 0x28	; 40
    122e:	90 f5       	brcc	.+100    	; 0x1294 <noNatak+0x76>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
    1230:	80 91 51 02 	lds	r24, 0x0251
    1234:	89 32       	cpi	r24, 0x29	; 41
    1236:	a0 f0       	brcs	.+40     	; 0x1260 <noNatak+0x42>
    1238:	90 91 4f 02 	lds	r25, 0x024F
    123c:	98 32       	cpi	r25, 0x28	; 40
    123e:	80 f4       	brcc	.+32     	; 0x1260 <noNatak+0x42>
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <noNatak+0x28>
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
    1242:	6a d9       	rcall	.-3372   	; 0x518 <left>
				set_color();
    1244:	bb db       	rcall	.-2186   	; 0x9bc <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
    1246:	80 91 50 02 	lds	r24, 0x0250
    124a:	89 32       	cpi	r24, 0x29	; 41
    124c:	d0 f3       	brcs	.-12     	; 0x1242 <noNatak+0x24>
    124e:	80 91 51 02 	lds	r24, 0x0251
    1252:	88 32       	cpi	r24, 0x28	; 40
    1254:	b0 f7       	brcc	.-20     	; 0x1242 <noNatak+0x24>
    1256:	80 91 4f 02 	lds	r24, 0x024F
    125a:	88 32       	cpi	r24, 0x28	; 40
    125c:	90 f7       	brcc	.-28     	; 0x1242 <noNatak+0x24>
    125e:	2f c0       	rjmp	.+94     	; 0x12be <noNatak+0xa0>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
    1260:	90 91 4f 02 	lds	r25, 0x024F
    1264:	99 32       	cpi	r25, 0x29	; 41
    1266:	90 f0       	brcs	.+36     	; 0x128c <noNatak+0x6e>
    1268:	88 32       	cpi	r24, 0x28	; 40
    126a:	80 f4       	brcc	.+32     	; 0x128c <noNatak+0x6e>
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <noNatak+0x54>
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
    126e:	57 d9       	rcall	.-3410   	; 0x51e <right>
				set_color();
    1270:	a5 db       	rcall	.-2230   	; 0x9bc <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
    1272:	80 91 50 02 	lds	r24, 0x0250
    1276:	89 32       	cpi	r24, 0x29	; 41
    1278:	d0 f3       	brcs	.-12     	; 0x126e <noNatak+0x50>
    127a:	80 91 51 02 	lds	r24, 0x0251
    127e:	88 32       	cpi	r24, 0x28	; 40
    1280:	b0 f7       	brcc	.-20     	; 0x126e <noNatak+0x50>
    1282:	80 91 4f 02 	lds	r24, 0x024F
    1286:	88 32       	cpi	r24, 0x28	; 40
    1288:	90 f7       	brcc	.-28     	; 0x126e <noNatak+0x50>
    128a:	19 c0       	rjmp	.+50     	; 0x12be <noNatak+0xa0>
			
		}
		else
		{
			flag=1;
			if(correct())
    128c:	80 df       	rcall	.-256    	; 0x118e <correct>
    128e:	81 11       	cpse	r24, r1
    1290:	18 c0       	rjmp	.+48     	; 0x12c2 <noNatak+0xa4>
    1292:	15 c0       	rjmp	.+42     	; 0x12be <noNatak+0xa0>
				return 1;
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
    1294:	80 91 51 02 	lds	r24, 0x0251
    1298:	89 32       	cpi	r24, 0x29	; 41
    129a:	30 f0       	brcs	.+12     	; 0x12a8 <noNatak+0x8a>
    129c:	90 91 4f 02 	lds	r25, 0x024F
    12a0:	98 32       	cpi	r25, 0x28	; 40
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <noNatak+0x8a>
		{
			flag=1;
			node();
    12a4:	06 df       	rcall	.-500    	; 0x10b2 <node>
			return 1;
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <noNatak+0xa4>
				soft_right_2();
				set_color();
			}
			lcd("-");*/
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
    12a8:	88 32       	cpi	r24, 0x28	; 40
    12aa:	30 f4       	brcc	.+12     	; 0x12b8 <noNatak+0x9a>
    12ac:	80 91 4f 02 	lds	r24, 0x024F
    12b0:	89 32       	cpi	r24, 0x29	; 41
    12b2:	10 f0       	brcs	.+4      	; 0x12b8 <noNatak+0x9a>
		{
			flag=1;
			node();
    12b4:	fe de       	rcall	.-516    	; 0x10b2 <node>
			return 1;
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <noNatak+0xa4>
			lcd("-");*/
		}
		else
		{
			flag=1;
			if(correct())
    12b8:	6a df       	rcall	.-300    	; 0x118e <correct>
    12ba:	81 11       	cpse	r24, r1
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <noNatak+0xa4>
		}
	}
	if(flag==0)	
		if(correct())
		return 1;
	stop();
    12be:	32 c9       	rjmp	.-3484   	; 0x524 <stop>
    12c0:	08 95       	ret
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
	//lcd("--");
	//lcd_print(2,1,6,1);
	//buzzer_off();
	return;
}
    12c6:	08 95       	ret

000012c8 <forwardJaa>:
void forwardJaa()
{
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12d2:	08 e2       	ldi	r16, 0x28	; 40
    12d4:	11 e0       	ldi	r17, 0x01	; 1
    12d6:	0f 2e       	mov	r0, r31
    12d8:	f0 ef       	ldi	r31, 0xF0	; 240
    12da:	ff 2e       	mov	r15, r31
    12dc:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    12de:	ca e2       	ldi	r28, 0x2A	; 42
    12e0:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned int vi=0;
	do
	{
		forward();
    12e2:	14 d9       	rcall	.-3544   	; 0x50c <forward>
		//_delay_ms(200);
		set_color();
    12e4:	6b db       	rcall	.-2346   	; 0x9bc <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
    12e6:	80 91 50 02 	lds	r24, 0x0250
    12ea:	89 32       	cpi	r24, 0x29	; 41
    12ec:	50 f0       	brcs	.+20     	; 0x1302 <forwardJaa+0x3a>
    12ee:	80 91 51 02 	lds	r24, 0x0251
    12f2:	89 32       	cpi	r24, 0x29	; 41
    12f4:	20 f4       	brcc	.+8      	; 0x12fe <forwardJaa+0x36>
    12f6:	80 91 4f 02 	lds	r24, 0x024F
    12fa:	89 32       	cpi	r24, 0x29	; 41
    12fc:	10 f0       	brcs	.+4      	; 0x1302 <forwardJaa+0x3a>
		{
			node();
    12fe:	d9 de       	rcall	.-590    	; 0x10b2 <node>
			return;
    1300:	13 c0       	rjmp	.+38     	; 0x1328 <forwardJaa+0x60>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1302:	f8 01       	movw	r30, r16
    1304:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    1306:	f8 82       	st	Y, r15
		}
		velocity(240,240);
		//velocity(v+vi,v+vi);
		//i+=20;
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
    1308:	80 91 50 02 	lds	r24, 0x0250
    130c:	89 32       	cpi	r24, 0x29	; 41
    130e:	40 f0       	brcs	.+16     	; 0x1320 <forwardJaa+0x58>
    1310:	80 91 51 02 	lds	r24, 0x0251
    1314:	88 32       	cpi	r24, 0x28	; 40
    1316:	20 f4       	brcc	.+8      	; 0x1320 <forwardJaa+0x58>
    1318:	80 91 4f 02 	lds	r24, 0x024F
    131c:	88 32       	cpi	r24, 0x28	; 40
    131e:	08 f3       	brcs	.-62     	; 0x12e2 <forwardJaa+0x1a>
	
	if(noNatak())
    1320:	7e df       	rcall	.-260    	; 0x121e <noNatak>
    1322:	89 2b       	or	r24, r25
    1324:	09 f4       	brne	.+2      	; 0x1328 <forwardJaa+0x60>
		return;
	forwardJaa();
    1326:	d0 df       	rcall	.-96     	; 0x12c8 <forwardJaa>
	return;
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	08 95       	ret

00001334 <front>:
	buzzer_off();
}

void front()
{
	forwardJaa();
    1334:	c9 df       	rcall	.-110    	; 0x12c8 <forwardJaa>
	cost++;
    1336:	80 91 76 02 	lds	r24, 0x0276
    133a:	90 91 77 02 	lds	r25, 0x0277
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	90 93 77 02 	sts	0x0277, r25
    1344:	80 93 76 02 	sts	0x0276, r24
    1348:	08 95       	ret

0000134a <turnRight>:
	return;
}
/*************************END GULLA CODE*************/
void turnRight()	//turns the robo right
{
	if ((dir == 3 && (ot == 0 || ot == 1)) || (dir == 1 && (ot == 2 || ot == 3)))
    134a:	80 91 00 02 	lds	r24, 0x0200
    134e:	90 91 01 02 	lds	r25, 0x0201
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	39 f4       	brne	.+14     	; 0x1366 <turnRight+0x1c>
    1358:	80 91 02 02 	lds	r24, 0x0202
    135c:	90 91 03 02 	lds	r25, 0x0203
    1360:	02 97       	sbiw	r24, 0x02	; 2
    1362:	98 f4       	brcc	.+38     	; 0x138a <turnRight+0x40>
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <turnRight+0x2e>
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	81 f4       	brne	.+32     	; 0x138a <turnRight+0x40>
    136a:	80 91 02 02 	lds	r24, 0x0202
    136e:	90 91 03 02 	lds	r25, 0x0203
    1372:	02 97       	sbiw	r24, 0x02	; 2
    1374:	02 97       	sbiw	r24, 0x02	; 2
    1376:	48 f4       	brcc	.+18     	; 0x138a <turnRight+0x40>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1378:	86 e9       	ldi	r24, 0x96	; 150
    137a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    137e:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		right_degrees(90);
    1382:	8a e5       	ldi	r24, 0x5A	; 90
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	05 db       	rcall	.-2550   	; 0x992 <right_degrees>
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <turnRight+0x5e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    138a:	86 e9       	ldi	r24, 0x96	; 150
    138c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1390:	80 93 2a 01 	sts	0x012A, r24
	}
	else
	{
		velocity(turn_v, turn_v);
		right_degrees(30);
    1394:	8e e1       	ldi	r24, 0x1E	; 30
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	fc da       	rcall	.-2568   	; 0x992 <right_degrees>
		
		while (ADC_Conversion(2)<50)
    139a:	01 c0       	rjmp	.+2      	; 0x139e <turnRight+0x54>
			right();
    139c:	c0 d8       	rcall	.-3712   	; 0x51e <right>
	else
	{
		velocity(turn_v, turn_v);
		right_degrees(30);
		
		while (ADC_Conversion(2)<50)
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	29 d9       	rcall	.-3502   	; 0x5f4 <ADC_Conversion>
    13a2:	82 33       	cpi	r24, 0x32	; 50
    13a4:	d8 f3       	brcs	.-10     	; 0x139c <turnRight+0x52>
			right();
		stop();	
    13a6:	be d8       	rcall	.-3716   	; 0x524 <stop>
	}
	lcd("Right turn");
    13a8:	88 e3       	ldi	r24, 0x38	; 56
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	64 db       	rcall	.-2360   	; 0xa76 <lcd>
	//_delay_ms(2000);
	dir = (dir + 1) % 4;
    13ae:	80 91 00 02 	lds	r24, 0x0200
    13b2:	90 91 01 02 	lds	r25, 0x0201
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	83 70       	andi	r24, 0x03	; 3
    13ba:	90 78       	andi	r25, 0x80	; 128
    13bc:	99 23       	and	r25, r25
    13be:	24 f4       	brge	.+8      	; 0x13c8 <turnRight+0x7e>
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	8c 6f       	ori	r24, 0xFC	; 252
    13c4:	9f 6f       	ori	r25, 0xFF	; 255
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	90 93 01 02 	sts	0x0201, r25
    13cc:	80 93 00 02 	sts	0x0200, r24
	//printf("Turn Right \n");
	angle += 90;
    13d0:	80 91 9b 02 	lds	r24, 0x029B
    13d4:	90 91 9c 02 	lds	r25, 0x029C
    13d8:	86 5a       	subi	r24, 0xA6	; 166
    13da:	9f 4f       	sbci	r25, 0xFF	; 255
    13dc:	90 93 9c 02 	sts	0x029C, r25
    13e0:	80 93 9b 02 	sts	0x029B, r24
	buzzer();
    13e4:	5e cb       	rjmp	.-2372   	; 0xaa2 <buzzer>
    13e6:	08 95       	ret

000013e8 <turnLeft>:
}
void turnLeft()	//turns the robo left
{
	
	if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 3)))
    13e8:	80 91 00 02 	lds	r24, 0x0200
    13ec:	90 91 01 02 	lds	r25, 0x0201
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	91 05       	cpc	r25, r1
    13f4:	39 f4       	brne	.+14     	; 0x1404 <turnLeft+0x1c>
    13f6:	80 91 02 02 	lds	r24, 0x0202
    13fa:	90 91 03 02 	lds	r25, 0x0203
    13fe:	02 97       	sbiw	r24, 0x02	; 2
    1400:	98 f4       	brcc	.+38     	; 0x1428 <turnLeft+0x40>
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <turnLeft+0x2e>
    1404:	03 97       	sbiw	r24, 0x03	; 3
    1406:	81 f4       	brne	.+32     	; 0x1428 <turnLeft+0x40>
    1408:	80 91 02 02 	lds	r24, 0x0202
    140c:	90 91 03 02 	lds	r25, 0x0203
    1410:	02 97       	sbiw	r24, 0x02	; 2
    1412:	02 97       	sbiw	r24, 0x02	; 2
    1414:	48 f4       	brcc	.+18     	; 0x1428 <turnLeft+0x40>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1416:	86 e9       	ldi	r24, 0x96	; 150
    1418:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    141c:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(90);
    1420:	8a e5       	ldi	r24, 0x5A	; 90
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	ad da       	rcall	.-2726   	; 0x980 <left_degrees>
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <turnLeft+0x5e>
	}
	else
	{
		left_degrees(30);
    1428:	8e e1       	ldi	r24, 0x1E	; 30
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 da       	rcall	.-2734   	; 0x980 <left_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    142e:	86 e9       	ldi	r24, 0x96	; 150
    1430:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1434:	80 93 2a 01 	sts	0x012A, r24
    1438:	01 c0       	rjmp	.+2      	; 0x143c <turnLeft+0x54>
		velocity(turn_v,turn_v);
		while (ADC_Conversion(2)<50)
			left();
    143a:	6e d8       	rcall	.-3876   	; 0x518 <left>
	}
	else
	{
		left_degrees(30);
		velocity(turn_v,turn_v);
		while (ADC_Conversion(2)<50)
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	da d8       	rcall	.-3660   	; 0x5f4 <ADC_Conversion>
    1440:	82 33       	cpi	r24, 0x32	; 50
    1442:	d8 f3       	brcs	.-10     	; 0x143a <turnLeft+0x52>
			left();
		stop();
    1444:	6f d8       	rcall	.-3874   	; 0x524 <stop>
	}
	lcd("Left turn");
    1446:	83 e4       	ldi	r24, 0x43	; 67
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	15 db       	rcall	.-2518   	; 0xa76 <lcd>
	//_delay_ms(2000);
	dir = (dir + 3) % 4;
    144c:	80 91 00 02 	lds	r24, 0x0200
    1450:	90 91 01 02 	lds	r25, 0x0201
    1454:	03 96       	adiw	r24, 0x03	; 3
    1456:	83 70       	andi	r24, 0x03	; 3
    1458:	90 78       	andi	r25, 0x80	; 128
    145a:	99 23       	and	r25, r25
    145c:	24 f4       	brge	.+8      	; 0x1466 <turnLeft+0x7e>
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	8c 6f       	ori	r24, 0xFC	; 252
    1462:	9f 6f       	ori	r25, 0xFF	; 255
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	90 93 01 02 	sts	0x0201, r25
    146a:	80 93 00 02 	sts	0x0200, r24
	//printf("Turn Left\n");
	angle += 90;
    146e:	80 91 9b 02 	lds	r24, 0x029B
    1472:	90 91 9c 02 	lds	r25, 0x029C
    1476:	86 5a       	subi	r24, 0xA6	; 166
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	90 93 9c 02 	sts	0x029C, r25
    147e:	80 93 9b 02 	sts	0x029B, r24
	buzzer();
    1482:	0f cb       	rjmp	.-2530   	; 0xaa2 <buzzer>
    1484:	08 95       	ret

00001486 <turn>:
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
	}
	*/
	if (dir == 0 && (ot == 2 || ot == 3))
    1486:	80 91 00 02 	lds	r24, 0x0200
    148a:	90 91 01 02 	lds	r25, 0x0201
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	81 f4       	brne	.+32     	; 0x14b2 <turn+0x2c>
    1492:	80 91 02 02 	lds	r24, 0x0202
    1496:	90 91 03 02 	lds	r25, 0x0203
    149a:	02 97       	sbiw	r24, 0x02	; 2
    149c:	02 97       	sbiw	r24, 0x02	; 2
    149e:	d0 f4       	brcc	.+52     	; 0x14d4 <turn+0x4e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14a0:	86 e9       	ldi	r24, 0x96	; 150
    14a2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14a6:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
    14aa:	84 eb       	ldi	r24, 0xB4	; 180
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	68 da       	rcall	.-2864   	; 0x980 <left_degrees>
    14b0:	20 c0       	rjmp	.+64     	; 0x14f2 <turn+0x6c>
	}
	else if (dir == 2 && (ot == 0 || ot == 1))
    14b2:	02 97       	sbiw	r24, 0x02	; 2
    14b4:	79 f4       	brne	.+30     	; 0x14d4 <turn+0x4e>
    14b6:	80 91 02 02 	lds	r24, 0x0202
    14ba:	90 91 03 02 	lds	r25, 0x0203
    14be:	02 97       	sbiw	r24, 0x02	; 2
    14c0:	48 f4       	brcc	.+18     	; 0x14d4 <turn+0x4e>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14c2:	86 e9       	ldi	r24, 0x96	; 150
    14c4:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14c8:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(turn_v, turn_v);
		left_degrees(180);
    14cc:	84 eb       	ldi	r24, 0xB4	; 180
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	57 da       	rcall	.-2898   	; 0x980 <left_degrees>
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <turn+0x6c>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14d4:	86 e9       	ldi	r24, 0x96	; 150
    14d6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    14da:	80 93 2a 01 	sts	0x012A, r24
	}
	else
	{
		velocity(turn_v, turn_v);
		left_degrees(150);
    14de:	86 e9       	ldi	r24, 0x96	; 150
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	4e da       	rcall	.-2916   	; 0x980 <left_degrees>
		while (ADC_Conversion(2)<60)
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <turn+0x62>
			left();
    14e6:	18 d8       	rcall	.-4048   	; 0x518 <left>
	}
	else
	{
		velocity(turn_v, turn_v);
		left_degrees(150);
		while (ADC_Conversion(2)<60)
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	84 d8       	rcall	.-3832   	; 0x5f4 <ADC_Conversion>
    14ec:	8c 33       	cpi	r24, 0x3C	; 60
    14ee:	d8 f3       	brcs	.-10     	; 0x14e6 <turn+0x60>
			left();
		stop();
    14f0:	19 d8       	rcall	.-4046   	; 0x524 <stop>
	}
	lcd("turn");
    14f2:	88 e4       	ldi	r24, 0x48	; 72
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	bf da       	rcall	.-2690   	; 0xa76 <lcd>
	//_delay_ms(2000);
	dir = (dir + 2) % 4;
    14f8:	80 91 00 02 	lds	r24, 0x0200
    14fc:	90 91 01 02 	lds	r25, 0x0201
    1500:	02 96       	adiw	r24, 0x02	; 2
    1502:	83 70       	andi	r24, 0x03	; 3
    1504:	90 78       	andi	r25, 0x80	; 128
    1506:	99 23       	and	r25, r25
    1508:	24 f4       	brge	.+8      	; 0x1512 <turn+0x8c>
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	8c 6f       	ori	r24, 0xFC	; 252
    150e:	9f 6f       	ori	r25, 0xFF	; 255
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	90 93 01 02 	sts	0x0201, r25
    1516:	80 93 00 02 	sts	0x0200, r24
	//printf("Turn\n");
	angle += 180;
    151a:	80 91 9b 02 	lds	r24, 0x029B
    151e:	90 91 9c 02 	lds	r25, 0x029C
    1522:	8c 54       	subi	r24, 0x4C	; 76
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	90 93 9c 02 	sts	0x029C, r25
    152a:	80 93 9b 02 	sts	0x029B, r24
    152e:	08 95       	ret

00001530 <traverseToSort>:
	cost++;
	//printf("Front\n");
}

void traverseToSort(int a, int b)
{
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	ec 01       	movw	r28, r24

	if (flag == 1)
    1536:	80 91 54 02 	lds	r24, 0x0254
    153a:	90 91 55 02 	lds	r25, 0x0255
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	21 f4       	brne	.+8      	; 0x154a <traverseToSort+0x1a>
		flag = 0;
    1542:	10 92 55 02 	sts	0x0255, r1
    1546:	10 92 54 02 	sts	0x0254, r1
	if (a == 4 || a == 5)
    154a:	ce 01       	movw	r24, r28
    154c:	04 97       	sbiw	r24, 0x04	; 4
    154e:	02 97       	sbiw	r24, 0x02	; 2
    1550:	88 f5       	brcc	.+98     	; 0x15b4 <traverseToSort+0x84>
	{
		if ((a == 4 && dir == 0) || (a == 5 && dir == 2))
    1552:	c4 30       	cpi	r28, 0x04	; 4
    1554:	d1 05       	cpc	r29, r1
    1556:	39 f4       	brne	.+14     	; 0x1566 <traverseToSort+0x36>
    1558:	80 91 00 02 	lds	r24, 0x0200
    155c:	90 91 01 02 	lds	r25, 0x0201
    1560:	89 2b       	or	r24, r25
    1562:	51 f0       	breq	.+20     	; 0x1578 <traverseToSort+0x48>
    1564:	0b c0       	rjmp	.+22     	; 0x157c <traverseToSort+0x4c>
    1566:	c5 30       	cpi	r28, 0x05	; 5
    1568:	d1 05       	cpc	r29, r1
    156a:	41 f4       	brne	.+16     	; 0x157c <traverseToSort+0x4c>
    156c:	80 91 00 02 	lds	r24, 0x0200
    1570:	90 91 01 02 	lds	r25, 0x0201
    1574:	02 97       	sbiw	r24, 0x02	; 2
    1576:	11 f4       	brne	.+4      	; 0x157c <traverseToSort+0x4c>
			turnRight();
    1578:	e8 de       	rcall	.-560    	; 0x134a <turnRight>
    157a:	01 c0       	rjmp	.+2      	; 0x157e <traverseToSort+0x4e>
		else turnLeft();
    157c:	35 df       	rcall	.-406    	; 0x13e8 <turnLeft>
		front();
    157e:	da de       	rcall	.-588    	; 0x1334 <front>
		front();
    1580:	d9 de       	rcall	.-590    	; 0x1334 <front>
		if (a == 4)
    1582:	24 97       	sbiw	r28, 0x04	; 4
    1584:	39 f4       	brne	.+14     	; 0x1594 <traverseToSort+0x64>
			ot = 5;
    1586:	85 e0       	ldi	r24, 0x05	; 5
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	90 93 03 02 	sts	0x0203, r25
    158e:	80 93 02 02 	sts	0x0202, r24
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <traverseToSort+0x70>
		else ot = 4;
    1594:	84 e0       	ldi	r24, 0x04	; 4
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	90 93 03 02 	sts	0x0203, r25
    159c:	80 93 02 02 	sts	0x0202, r24
		cost = cost + 2;
    15a0:	80 91 76 02 	lds	r24, 0x0276
    15a4:	90 91 77 02 	lds	r25, 0x0277
    15a8:	02 96       	adiw	r24, 0x02	; 2
    15aa:	90 93 77 02 	sts	0x0277, r25
    15ae:	80 93 76 02 	sts	0x0276, r24
    15b2:	45 c0       	rjmp	.+138    	; 0x163e <traverseToSort+0x10e>
	}
	else{
		if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 2)))
    15b4:	80 91 00 02 	lds	r24, 0x0200
    15b8:	90 91 01 02 	lds	r25, 0x0201
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	39 f4       	brne	.+14     	; 0x15d0 <traverseToSort+0xa0>
    15c2:	80 91 02 02 	lds	r24, 0x0202
    15c6:	90 91 03 02 	lds	r25, 0x0203
    15ca:	02 97       	sbiw	r24, 0x02	; 2
    15cc:	78 f4       	brcc	.+30     	; 0x15ec <traverseToSort+0xbc>
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <traverseToSort+0xb2>
    15d0:	03 97       	sbiw	r24, 0x03	; 3
    15d2:	99 f4       	brne	.+38     	; 0x15fa <traverseToSort+0xca>
    15d4:	80 91 02 02 	lds	r24, 0x0202
    15d8:	90 91 03 02 	lds	r25, 0x0203
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	91 05       	cpc	r25, r1
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <traverseToSort+0xb6>
		{
			turnRight();
    15e2:	b3 de       	rcall	.-666    	; 0x134a <turnRight>
		else ot = 4;
		cost = cost + 2;
	}
	else{
		if ((dir == 1 && (ot == 0 || ot == 1)) || (dir == 3 && (ot == 2 || ot == 2)))
		{
    15e4:	0a c0       	rjmp	.+20     	; 0x15fa <traverseToSort+0xca>
			turnRight();
		}
		else if ((dir == 3 && (ot == 0 || ot == 1)) || (dir == 1 && (ot == 2 || ot == 2)))
    15e6:	02 97       	sbiw	r24, 0x02	; 2
    15e8:	40 f4       	brcc	.+16     	; 0x15fa <traverseToSort+0xca>
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <traverseToSort+0xc8>
    15ec:	80 91 02 02 	lds	r24, 0x0202
    15f0:	90 91 03 02 	lds	r25, 0x0203
    15f4:	02 97       	sbiw	r24, 0x02	; 2
    15f6:	09 f4       	brne	.+2      	; 0x15fa <traverseToSort+0xca>
		{
			turnLeft();
    15f8:	f7 de       	rcall	.-530    	; 0x13e8 <turnLeft>
		}
		if ((a <= 1 && dir == 0) || (a >= 2 && dir == 2))
    15fa:	22 97       	sbiw	r28, 0x02	; 2
    15fc:	3c f4       	brge	.+14     	; 0x160c <traverseToSort+0xdc>
    15fe:	80 91 00 02 	lds	r24, 0x0200
    1602:	90 91 01 02 	lds	r25, 0x0201
    1606:	89 2b       	or	r24, r25
    1608:	39 f0       	breq	.+14     	; 0x1618 <traverseToSort+0xe8>
    160a:	07 c0       	rjmp	.+14     	; 0x161a <traverseToSort+0xea>
    160c:	80 91 00 02 	lds	r24, 0x0200
    1610:	90 91 01 02 	lds	r25, 0x0201
    1614:	02 97       	sbiw	r24, 0x02	; 2
    1616:	09 f4       	brne	.+2      	; 0x161a <traverseToSort+0xea>
			turn();
    1618:	36 df       	rcall	.-404    	; 0x1486 <turn>
		front();
    161a:	8c de       	rcall	.-744    	; 0x1334 <front>
		ot = ct % 2 + 4;
    161c:	80 91 87 02 	lds	r24, 0x0287
    1620:	90 91 88 02 	lds	r25, 0x0288
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	90 78       	andi	r25, 0x80	; 128
    1628:	99 23       	and	r25, r25
    162a:	24 f4       	brge	.+8      	; 0x1634 <traverseToSort+0x104>
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	8e 6f       	ori	r24, 0xFE	; 254
    1630:	9f 6f       	ori	r25, 0xFF	; 255
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	04 96       	adiw	r24, 0x04	; 4
    1636:	90 93 03 02 	sts	0x0203, r25
    163a:	80 93 02 02 	sts	0x0202, r24
	}
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <terminalCheck1>:
int adjCount(ct)
{
	return (ct + 2) % 4;
}
void terminalCheck1()
{
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
	//????
	lcd_wr_command(0x01);
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_print(1,1,888,3);
    164e:	23 e0       	ldi	r18, 0x03	; 3
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	48 e7       	ldi	r20, 0x78	; 120
    1654:	53 e0       	ldi	r21, 0x03	; 3
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    165e:	86 e9       	ldi	r24, 0x96	; 150
    1660:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1664:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v,turn_v);
//	forward_mm(20);
	flag = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	90 93 55 02 	sts	0x0255, r25
    1670:	80 93 54 02 	sts	0x0254, r24
	if (ct != ot)
    1674:	80 91 02 02 	lds	r24, 0x0202
    1678:	90 91 03 02 	lds	r25, 0x0203
    167c:	20 91 87 02 	lds	r18, 0x0287
    1680:	30 91 88 02 	lds	r19, 0x0288
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	89 f1       	breq	.+98     	; 0x16ec <terminalCheck1+0xa8>
	{
		if (dir == 1 || dir == 3)
    168a:	20 91 00 02 	lds	r18, 0x0200
    168e:	30 91 01 02 	lds	r19, 0x0201
    1692:	2d 7f       	andi	r18, 0xFD	; 253
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	31 05       	cpc	r19, r1
    1698:	41 f4       	brne	.+16     	; 0x16aa <terminalCheck1+0x66>
		{
			if (ot == 3 || ot == 0)
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	11 f0       	breq	.+4      	; 0x16a4 <terminalCheck1+0x60>
    16a0:	89 2b       	or	r24, r25
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <terminalCheck1+0x64>
				turnRight();
    16a4:	52 de       	rcall	.-860    	; 0x134a <turnRight>
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <terminalCheck1+0x66>
			else turnLeft();
    16a8:	9f de       	rcall	.-706    	; 0x13e8 <turnLeft>
		}
		if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    16aa:	80 91 87 02 	lds	r24, 0x0287
    16ae:	90 91 88 02 	lds	r25, 0x0288
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	91 05       	cpc	r25, r1
    16b6:	38 f4       	brcc	.+14     	; 0x16c6 <terminalCheck1+0x82>
    16b8:	20 91 00 02 	lds	r18, 0x0200
    16bc:	30 91 01 02 	lds	r19, 0x0201
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	49 f0       	breq	.+18     	; 0x16d8 <terminalCheck1+0x94>
    16c6:	02 97       	sbiw	r24, 0x02	; 2
    16c8:	02 97       	sbiw	r24, 0x02	; 2
    16ca:	38 f4       	brcc	.+14     	; 0x16da <terminalCheck1+0x96>
    16cc:	80 91 00 02 	lds	r24, 0x0200
    16d0:	90 91 01 02 	lds	r25, 0x0201
    16d4:	89 2b       	or	r24, r25
    16d6:	09 f4       	brne	.+2      	; 0x16da <terminalCheck1+0x96>
			turn();
    16d8:	d6 de       	rcall	.-596    	; 0x1486 <turn>
		front();
    16da:	2c de       	rcall	.-936    	; 0x1334 <front>
		ot = ct;
    16dc:	80 91 87 02 	lds	r24, 0x0287
    16e0:	90 91 88 02 	lds	r25, 0x0288
    16e4:	90 93 03 02 	sts	0x0203, r25
    16e8:	80 93 02 02 	sts	0x0202, r24
	}
	//????
	right_degrees(30);
    16ec:	8e e1       	ldi	r24, 0x1E	; 30
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	50 d9       	rcall	.-3424   	; 0x992 <right_degrees>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16f2:	86 e9       	ldi	r24, 0x96	; 150
    16f4:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    16f8:	80 93 2a 01 	sts	0x012A, r24
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
    16fc:	80 91 00 02 	lds	r24, 0x0200
    1700:	90 91 01 02 	lds	r25, 0x0201
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	83 70       	andi	r24, 0x03	; 3
    1708:	90 78       	andi	r25, 0x80	; 128
    170a:	99 23       	and	r25, r25
    170c:	24 f4       	brge	.+8      	; 0x1716 <terminalCheck1+0xd2>
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	8c 6f       	ori	r24, 0xFC	; 252
    1712:	9f 6f       	ori	r25, 0xFF	; 255
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	90 93 01 02 	sts	0x0201, r25
    171a:	80 93 00 02 	sts	0x0200, r24
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<50)	//earlier 3
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <terminalCheck1+0xe0>
		right();
    1720:	0e 94 8f 02 	call	0x51e	; 0x51e <right>
	right_degrees(30);
	velocity(turn_v, turn_v);
	
	dir=(dir+1)%4;
	//lcd_print(1,1,dir,1);
	while (ADC_Conversion(3)<50)	//earlier 3
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ADC_Conversion>
    172a:	82 33       	cpi	r24, 0x32	; 50
    172c:	c8 f3       	brcs	.-14     	; 0x1720 <terminalCheck1+0xdc>
		right();
	//_delay_ms(140);
	stop();
    172e:	0e 94 92 02 	call	0x524	; 0x524 <stop>
	//lcd_print(1,1,9,1);
	
	term[ct][0] = scan();
    1732:	c0 91 87 02 	lds	r28, 0x0287
    1736:	d0 91 88 02 	lds	r29, 0x0288
    173a:	bf d9       	rcall	.-3202   	; 0xaba <scan>
    173c:	cc 0f       	add	r28, r28
    173e:	dd 1f       	adc	r29, r29
    1740:	cc 0f       	add	r28, r28
    1742:	dd 1f       	adc	r29, r29
    1744:	c5 57       	subi	r28, 0x75	; 117
    1746:	dd 4f       	sbci	r29, 0xFD	; 253
    1748:	99 83       	std	Y+1, r25	; 0x01
    174a:	88 83       	st	Y, r24
	if(term[ct][0]==-1)
    174c:	e0 91 87 02 	lds	r30, 0x0287
    1750:	f0 91 88 02 	lds	r31, 0x0288
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	e5 57       	subi	r30, 0x75	; 117
    175e:	fd 4f       	sbci	r31, 0xFD	; 253
    1760:	40 81       	ld	r20, Z
    1762:	51 81       	ldd	r21, Z+1	; 0x01
    1764:	4f 3f       	cpi	r20, 0xFF	; 255
    1766:	2f ef       	ldi	r18, 0xFF	; 255
    1768:	52 07       	cpc	r21, r18
    176a:	49 f4       	brne	.+18     	; 0x177e <terminalCheck1+0x13a>
		lcd_print(2,11,9, 1);
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	49 e0       	ldi	r20, 0x09	; 9
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	6b e0       	ldi	r22, 0x0B	; 11
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    177c:	06 c0       	rjmp	.+12     	; 0x178a <terminalCheck1+0x146>
	else
		lcd_print(2,11, term[ct][0], 1);
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	6b e0       	ldi	r22, 0x0B	; 11
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
    178a:	4f ef       	ldi	r20, 0xFF	; 255
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	9c e2       	ldi	r25, 0x2C	; 44
    1790:	41 50       	subi	r20, 0x01	; 1
    1792:	80 40       	sbci	r24, 0x00	; 0
    1794:	90 40       	sbci	r25, 0x00	; 0
    1796:	e1 f7       	brne	.-8      	; 0x1790 <terminalCheck1+0x14c>
    1798:	00 c0       	rjmp	.+0      	; 0x179a <terminalCheck1+0x156>
    179a:	00 00       	nop
	_delay_ms(1000);
	//printf("Enter term[%d][%d]\n", ct, 0);
	//scanf("%d", &term[ct][0]);

	if (term[ct][0] == -1 || term[ct][0] == color[ct])
    179c:	20 91 87 02 	lds	r18, 0x0287
    17a0:	30 91 88 02 	lds	r19, 0x0288
    17a4:	f9 01       	movw	r30, r18
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	e5 57       	subi	r30, 0x75	; 117
    17b0:	fd 4f       	sbci	r31, 0xFD	; 253
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	8f 3f       	cpi	r24, 0xFF	; 255
    17b8:	4f ef       	ldi	r20, 0xFF	; 255
    17ba:	94 07       	cpc	r25, r20
    17bc:	51 f0       	breq	.+20     	; 0x17d2 <terminalCheck1+0x18e>
    17be:	f9 01       	movw	r30, r18
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	e3 56       	subi	r30, 0x63	; 99
    17c6:	fd 4f       	sbci	r31, 0xFD	; 253
    17c8:	20 81       	ld	r18, Z
    17ca:	31 81       	ldd	r19, Z+1	; 0x01
    17cc:	82 17       	cp	r24, r18
    17ce:	93 07       	cpc	r25, r19
    17d0:	49 f4       	brne	.+18     	; 0x17e4 <terminalCheck1+0x1a0>
		total--;
    17d2:	80 91 04 02 	lds	r24, 0x0204
    17d6:	90 91 05 02 	lds	r25, 0x0205
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	90 93 05 02 	sts	0x0205, r25
    17e0:	80 93 04 02 	sts	0x0204, r24
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <position>:
		lcd("pickLeft");
	_delay_ms(1000);
}

void position(int armNo, int side)
{
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	8c 01       	movw	r16, r24
    17f4:	eb 01       	movw	r28, r22
	int a;
	if (ct == ot)
    17f6:	20 91 87 02 	lds	r18, 0x0287
    17fa:	30 91 88 02 	lds	r19, 0x0288
    17fe:	40 91 02 02 	lds	r20, 0x0202
    1802:	50 91 03 02 	lds	r21, 0x0203
    1806:	24 17       	cp	r18, r20
    1808:	35 07       	cpc	r19, r21
    180a:	09 f0       	breq	.+2      	; 0x180e <position+0x24>
    180c:	81 c0       	rjmp	.+258    	; 0x1910 <position+0x126>
	{
		if (((ct == 0 || ct == 1) && dir == 0) || ((ct == 2 || ct == 3) && dir == 2))
    180e:	c9 01       	movw	r24, r18
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	30 f4       	brcc	.+12     	; 0x1822 <position+0x38>
    1816:	40 91 00 02 	lds	r20, 0x0200
    181a:	50 91 01 02 	lds	r21, 0x0201
    181e:	45 2b       	or	r20, r21
    1820:	61 f0       	breq	.+24     	; 0x183a <position+0x50>
    1822:	22 50       	subi	r18, 0x02	; 2
    1824:	31 09       	sbc	r19, r1
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	68 f4       	brcc	.+26     	; 0x1846 <position+0x5c>
    182c:	40 91 00 02 	lds	r20, 0x0200
    1830:	50 91 01 02 	lds	r21, 0x0201
    1834:	42 30       	cpi	r20, 0x02	; 2
    1836:	51 05       	cpc	r21, r1
    1838:	31 f4       	brne	.+12     	; 0x1846 <position+0x5c>
		{
			if (armNo != side)
    183a:	0c 17       	cp	r16, r28
    183c:	1d 07       	cpc	r17, r29
    183e:	09 f4       	brne	.+2      	; 0x1842 <position+0x58>
    1840:	4a c0       	rjmp	.+148    	; 0x18d6 <position+0xec>
			turn();
    1842:	21 de       	rcall	.-958    	; 0x1486 <turn>
    1844:	48 c0       	rjmp	.+144    	; 0x18d6 <position+0xec>
		}
		else	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	38 f4       	brcc	.+14     	; 0x185a <position+0x70>
    184c:	40 91 00 02 	lds	r20, 0x0200
    1850:	50 91 01 02 	lds	r21, 0x0201
    1854:	42 30       	cpi	r20, 0x02	; 2
    1856:	51 05       	cpc	r21, r1
    1858:	49 f0       	breq	.+18     	; 0x186c <position+0x82>
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	58 f4       	brcc	.+22     	; 0x1876 <position+0x8c>
    1860:	40 91 00 02 	lds	r20, 0x0200
    1864:	50 91 01 02 	lds	r21, 0x0201
    1868:	45 2b       	or	r20, r21
    186a:	29 f4       	brne	.+10     	; 0x1876 <position+0x8c>
		{
			if (armNo == side)
    186c:	0c 17       	cp	r16, r28
    186e:	1d 07       	cpc	r17, r29
    1870:	91 f5       	brne	.+100    	; 0x18d6 <position+0xec>
			turn();
    1872:	09 de       	rcall	.-1006   	; 0x1486 <turn>
    1874:	30 c0       	rjmp	.+96     	; 0x18d6 <position+0xec>
		}
		else if (((ct == 0 || ct == 1) && dir == 1) || ((ct == 2 || ct == 3) && dir == 3))
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	38 f4       	brcc	.+14     	; 0x188a <position+0xa0>
    187c:	40 91 00 02 	lds	r20, 0x0200
    1880:	50 91 01 02 	lds	r21, 0x0201
    1884:	41 30       	cpi	r20, 0x01	; 1
    1886:	51 05       	cpc	r21, r1
    1888:	51 f0       	breq	.+20     	; 0x189e <position+0xb4>
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	70 f4       	brcc	.+28     	; 0x18ac <position+0xc2>
    1890:	40 91 00 02 	lds	r20, 0x0200
    1894:	50 91 01 02 	lds	r21, 0x0201
    1898:	43 30       	cpi	r20, 0x03	; 3
    189a:	51 05       	cpc	r21, r1
    189c:	39 f4       	brne	.+14     	; 0x18ac <position+0xc2>
		{
			if (armNo != side)
    189e:	0c 17       	cp	r16, r28
    18a0:	1d 07       	cpc	r17, r29
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <position+0xbe>
			turnRight();
    18a4:	52 dd       	rcall	.-1372   	; 0x134a <turnRight>
    18a6:	17 c0       	rjmp	.+46     	; 0x18d6 <position+0xec>
			else turnLeft();
    18a8:	9f dd       	rcall	.-1218   	; 0x13e8 <turnLeft>
    18aa:	15 c0       	rjmp	.+42     	; 0x18d6 <position+0xec>
		}
		else	if (((ct == 0 || ct == 1) && dir == 3) || ((ct == 2 || ct == 3) && dir == 1))
    18ac:	02 97       	sbiw	r24, 0x02	; 2
    18ae:	30 f4       	brcc	.+12     	; 0x18bc <position+0xd2>
    18b0:	80 91 00 02 	lds	r24, 0x0200
    18b4:	90 91 01 02 	lds	r25, 0x0201
    18b8:	03 97       	sbiw	r24, 0x03	; 3
    18ba:	49 f0       	breq	.+18     	; 0x18ce <position+0xe4>
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	50 f4       	brcc	.+20     	; 0x18d6 <position+0xec>
    18c2:	80 91 00 02 	lds	r24, 0x0200
    18c6:	90 91 01 02 	lds	r25, 0x0201
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	21 f4       	brne	.+8      	; 0x18d6 <position+0xec>
					if (armNo == side)
    18ce:	0c 17       	cp	r16, r28
    18d0:	1d 07       	cpc	r17, r29
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <position+0xec>
						turnRight();
    18d4:	3a dd       	rcall	.-1420   	; 0x134a <turnRight>
	
		if((dir==0 && (ct==2 || ct==3)) || (dir==2 && (ct==0 || ct==1)))
    18d6:	80 91 00 02 	lds	r24, 0x0200
    18da:	90 91 01 02 	lds	r25, 0x0201
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	49 f4       	brne	.+18     	; 0x18f4 <position+0x10a>
    18e2:	80 91 87 02 	lds	r24, 0x0287
    18e6:	90 91 88 02 	lds	r25, 0x0288
    18ea:	02 97       	sbiw	r24, 0x02	; 2
    18ec:	02 97       	sbiw	r24, 0x02	; 2
    18ee:	08 f0       	brcs	.+2      	; 0x18f2 <position+0x108>
    18f0:	7f c0       	rjmp	.+254    	; 0x19f0 <position+0x206>
    18f2:	0a c0       	rjmp	.+20     	; 0x1908 <position+0x11e>
    18f4:	02 97       	sbiw	r24, 0x02	; 2
    18f6:	09 f0       	breq	.+2      	; 0x18fa <position+0x110>
    18f8:	7b c0       	rjmp	.+246    	; 0x19f0 <position+0x206>
    18fa:	80 91 87 02 	lds	r24, 0x0287
    18fe:	90 91 88 02 	lds	r25, 0x0288
    1902:	02 97       	sbiw	r24, 0x02	; 2
    1904:	08 f0       	brcs	.+2      	; 0x1908 <position+0x11e>
    1906:	74 c0       	rjmp	.+232    	; 0x19f0 <position+0x206>
		{
			back_mm(75);
    1908:	8b e4       	ldi	r24, 0x4B	; 75
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	30 d8       	rcall	.-4000   	; 0x96e <back_mm>
    190e:	70 c0       	rjmp	.+224    	; 0x19f0 <position+0x206>
		}
		
	}
	else
	{
		if (dir == 1 || dir == 3)
    1910:	80 91 00 02 	lds	r24, 0x0200
    1914:	90 91 01 02 	lds	r25, 0x0201
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	49 f4       	brne	.+18     	; 0x1930 <position+0x146>
		if (ct == 0 || ct == 3)
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	19 f0       	breq	.+6      	; 0x192a <position+0x140>
    1924:	23 30       	cpi	r18, 0x03	; 3
    1926:	31 05       	cpc	r19, r1
    1928:	11 f4       	brne	.+4      	; 0x192e <position+0x144>
		turnRight();
    192a:	0f dd       	rcall	.-1506   	; 0x134a <turnRight>
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <position+0x146>
		else turnLeft();
    192e:	5c dd       	rcall	.-1352   	; 0x13e8 <turnLeft>
		if (dir == 0 || dir == 2)
    1930:	80 91 00 02 	lds	r24, 0x0200
    1934:	90 91 01 02 	lds	r25, 0x0201
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	21 f0       	breq	.+8      	; 0x1944 <position+0x15a>
    193c:	02 97       	sbiw	r24, 0x02	; 2
    193e:	09 f0       	breq	.+2      	; 0x1942 <position+0x158>
    1940:	33 c0       	rjmp	.+102    	; 0x19a8 <position+0x1be>
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <position+0x168>
		{
			if ((dir == 0 && (ct == 0 || ct == 1)) || (dir == 2 && (ct == 2 || ct == 3)))
    1944:	80 91 87 02 	lds	r24, 0x0287
    1948:	90 91 88 02 	lds	r25, 0x0288
    194c:	02 97       	sbiw	r24, 0x02	; 2
    194e:	c8 f4       	brcc	.+50     	; 0x1982 <position+0x198>
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <position+0x176>
    1952:	80 91 87 02 	lds	r24, 0x0287
    1956:	90 91 88 02 	lds	r25, 0x0288
    195a:	02 97       	sbiw	r24, 0x02	; 2
    195c:	02 97       	sbiw	r24, 0x02	; 2
    195e:	88 f4       	brcc	.+34     	; 0x1982 <position+0x198>
			{
				if (ot != 4 && ot != 5)
    1960:	80 91 02 02 	lds	r24, 0x0202
    1964:	90 91 03 02 	lds	r25, 0x0203
    1968:	04 97       	sbiw	r24, 0x04	; 4
    196a:	02 97       	sbiw	r24, 0x02	; 2
    196c:	10 f0       	brcs	.+4      	; 0x1972 <position+0x188>
				{
					turnLeft();
    196e:	3c dd       	rcall	.-1416   	; 0x13e8 <turnLeft>
					front();
    1970:	e1 dc       	rcall	.-1598   	; 0x1334 <front>
				}
				if (armNo == side)
    1972:	0c 17       	cp	r16, r28
    1974:	1d 07       	cpc	r17, r29
    1976:	11 f4       	brne	.+4      	; 0x197c <position+0x192>
				{
					front();
    1978:	dd dc       	rcall	.-1606   	; 0x1334 <front>
    197a:	32 c0       	rjmp	.+100    	; 0x19e0 <position+0x1f6>
				}
				else
				{
					front();
    197c:	db dc       	rcall	.-1610   	; 0x1334 <front>
					turn();
    197e:	83 dd       	rcall	.-1274   	; 0x1486 <turn>
    1980:	2f c0       	rjmp	.+94     	; 0x19e0 <position+0x1f6>
				}
			}
			else
			{
				if (ot != 4 && ot != 5)
    1982:	80 91 02 02 	lds	r24, 0x0202
    1986:	90 91 03 02 	lds	r25, 0x0203
    198a:	04 97       	sbiw	r24, 0x04	; 4
    198c:	02 97       	sbiw	r24, 0x02	; 2
    198e:	10 f0       	brcs	.+4      	; 0x1994 <position+0x1aa>
				{
					turnLeft();
    1990:	2b dd       	rcall	.-1450   	; 0x13e8 <turnLeft>
					front();
    1992:	d0 dc       	rcall	.-1632   	; 0x1334 <front>
				}
				if (armNo == side)
    1994:	0c 17       	cp	r16, r28
    1996:	1d 07       	cpc	r17, r29
    1998:	19 f4       	brne	.+6      	; 0x19a0 <position+0x1b6>
				{
					turn();
    199a:	75 dd       	rcall	.-1302   	; 0x1486 <turn>
					front();
    199c:	cb dc       	rcall	.-1642   	; 0x1334 <front>
    199e:	20 c0       	rjmp	.+64     	; 0x19e0 <position+0x1f6>
				}
				else
				{
					turn();
    19a0:	72 dd       	rcall	.-1308   	; 0x1486 <turn>
					front();
    19a2:	c8 dc       	rcall	.-1648   	; 0x1334 <front>
					turn();
    19a4:	70 dd       	rcall	.-1312   	; 0x1486 <turn>
    19a6:	1c c0       	rjmp	.+56     	; 0x19e0 <position+0x1f6>
				}
			}
		}
		else
		{
			if (armNo == side)
    19a8:	0c 17       	cp	r16, r28
    19aa:	1d 07       	cpc	r17, r29
    19ac:	69 f4       	brne	.+26     	; 0x19c8 <position+0x1de>
			{
				if (ct == 0 || ct == 3)
    19ae:	80 91 87 02 	lds	r24, 0x0287
    19b2:	90 91 88 02 	lds	r25, 0x0288
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	11 f0       	breq	.+4      	; 0x19be <position+0x1d4>
    19ba:	03 97       	sbiw	r24, 0x03	; 3
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <position+0x1d8>
				turnRight();
    19be:	c5 dc       	rcall	.-1654   	; 0x134a <turnRight>
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <position+0x1da>
				else turnLeft();
    19c2:	12 dd       	rcall	.-1500   	; 0x13e8 <turnLeft>
				front();
    19c4:	b7 dc       	rcall	.-1682   	; 0x1334 <front>
    19c6:	0c c0       	rjmp	.+24     	; 0x19e0 <position+0x1f6>
			}
			else
			{
				if (ct == 0 || ct == 3)
    19c8:	80 91 87 02 	lds	r24, 0x0287
    19cc:	90 91 88 02 	lds	r25, 0x0288
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <position+0x1ee>
    19d4:	03 97       	sbiw	r24, 0x03	; 3
    19d6:	11 f4       	brne	.+4      	; 0x19dc <position+0x1f2>
				turnRight();
    19d8:	b8 dc       	rcall	.-1680   	; 0x134a <turnRight>
    19da:	01 c0       	rjmp	.+2      	; 0x19de <position+0x1f4>
				else turnLeft();
    19dc:	05 dd       	rcall	.-1526   	; 0x13e8 <turnLeft>
				front();
    19de:	aa dc       	rcall	.-1708   	; 0x1334 <front>
			}
		}
		ot = ct;
    19e0:	80 91 87 02 	lds	r24, 0x0287
    19e4:	90 91 88 02 	lds	r25, 0x0288
    19e8:	90 93 03 02 	sts	0x0203, r25
    19ec:	80 93 02 02 	sts	0x0202, r24
	}
}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	08 95       	ret

000019fa <pickNode>:
void pickNode(int armNo, int side)
{
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	8c 01       	movw	r16, r24
    1a04:	eb 01       	movw	r28, r22
	arm[armNo] = term[ct][side];
    1a06:	fc 01       	movw	r30, r24
    1a08:	ee 0f       	add	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	ef 54       	subi	r30, 0x4F	; 79
    1a0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a10:	a0 91 87 02 	lds	r26, 0x0287
    1a14:	b0 91 88 02 	lds	r27, 0x0288
    1a18:	aa 0f       	add	r26, r26
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	a6 0f       	add	r26, r22
    1a1e:	b7 1f       	adc	r27, r23
    1a20:	aa 0f       	add	r26, r26
    1a22:	bb 1f       	adc	r27, r27
    1a24:	a5 57       	subi	r26, 0x75	; 117
    1a26:	bd 4f       	sbci	r27, 0xFD	; 253
    1a28:	8d 91       	ld	r24, X+
    1a2a:	9c 91       	ld	r25, X
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
	position(armNo, side);
    1a30:	c8 01       	movw	r24, r16
    1a32:	db de       	rcall	.-586    	; 0x17ea <position>
	pick(armNo);
    1a34:	c8 01       	movw	r24, r16
    1a36:	49 da       	rcall	.-2926   	; 0xeca <pick>
	term[ct][side] = -1;
    1a38:	80 91 87 02 	lds	r24, 0x0287
    1a3c:	90 91 88 02 	lds	r25, 0x0288
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	c8 0f       	add	r28, r24
    1a46:	d9 1f       	adc	r29, r25
    1a48:	cc 0f       	add	r28, r28
    1a4a:	dd 1f       	adc	r29, r29
    1a4c:	c5 57       	subi	r28, 0x75	; 117
    1a4e:	dd 4f       	sbci	r29, 0xFD	; 253
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	9f ef       	ldi	r25, 0xFF	; 255
    1a54:	99 83       	std	Y+1, r25	; 0x01
    1a56:	88 83       	st	Y, r24
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <pickup>:
	pick(armNo);
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    1a6e:	20 91 87 02 	lds	r18, 0x0287
    1a72:	30 91 88 02 	lds	r19, 0x0288
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	30 f4       	brcc	.+12     	; 0x1a88 <pickup+0x26>
    1a7c:	80 91 00 02 	lds	r24, 0x0200
    1a80:	90 91 01 02 	lds	r25, 0x0201
    1a84:	02 97       	sbiw	r24, 0x02	; 2
    1a86:	79 f0       	breq	.+30     	; 0x1aa6 <pickup+0x44>
    1a88:	c9 01       	movw	r24, r18
    1a8a:	02 97       	sbiw	r24, 0x02	; 2
    1a8c:	02 97       	sbiw	r24, 0x02	; 2
    1a8e:	80 f4       	brcc	.+32     	; 0x1ab0 <pickup+0x4e>
    1a90:	80 91 00 02 	lds	r24, 0x0200
    1a94:	90 91 01 02 	lds	r25, 0x0201
    1a98:	89 2b       	or	r24, r25
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <pickup+0x58>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1a9c:	c1 e0       	ldi	r28, 0x01	; 1
    1a9e:	d0 e0       	ldi	r29, 0x00	; 0
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	0e c0       	rjmp	.+28     	; 0x1ac2 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1aa6:	c0 e0       	ldi	r28, 0x00	; 0
    1aa8:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1aaa:	01 e0       	ldi	r16, 0x01	; 1
    1aac:	10 e0       	ldi	r17, 0x00	; 0
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <pickup+0x60>
	sort[sortNo] = -1;
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
void pickup()
{
	int arm0 = 0, arm1 = 1;
    1ab0:	c1 e0       	ldi	r28, 0x01	; 1
    1ab2:	d0 e0       	ldi	r29, 0x00	; 0
    1ab4:	00 e0       	ldi	r16, 0x00	; 0
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <pickup+0x60>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    1aba:	c0 e0       	ldi	r28, 0x00	; 0
    1abc:	d0 e0       	ldi	r29, 0x00	; 0
void pickup()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    1abe:	01 e0       	ldi	r16, 0x01	; 1
    1ac0:	10 e0       	ldi	r17, 0x00	; 0
		arm1 = 0;
	}
	if (visited[ct] == 0)
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	ec 59       	subi	r30, 0x9C	; 156
    1aca:	fd 4f       	sbci	r31, 0xFD	; 253
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	89 2b       	or	r24, r25
    1ad2:	79 f4       	brne	.+30     	; 0x1af2 <pickup+0x90>
		if (term[ct][0] == -2)
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	e5 57       	subi	r30, 0x75	; 117
    1ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	02 96       	adiw	r24, 0x02	; 2
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <pickup+0x8e>
		{
			terminalCheck1();
    1aea:	ac dd       	rcall	.-1192   	; 0x1644 <terminalCheck1>
			terminalCheck2();
    1aec:	da d8       	rcall	.-3660   	; 0xca2 <terminalCheck2>
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <pickup+0x90>
		}
		else	terminalCheck2();
    1af0:	d8 d8       	rcall	.-3664   	; 0xca2 <terminalCheck2>
		if ((term[ct][0] != color[ct] && term[ct][0] != -1) || (term[ct][1] != color[ct] && term[ct][1] != -1))
    1af2:	20 91 87 02 	lds	r18, 0x0287
    1af6:	30 91 88 02 	lds	r19, 0x0288
    1afa:	f9 01       	movw	r30, r18
    1afc:	ee 0f       	add	r30, r30
    1afe:	ff 1f       	adc	r31, r31
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	e5 57       	subi	r30, 0x75	; 117
    1b06:	fd 4f       	sbci	r31, 0xFD	; 253
    1b08:	40 81       	ld	r20, Z
    1b0a:	51 81       	ldd	r21, Z+1	; 0x01
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	e3 56       	subi	r30, 0x63	; 99
    1b14:	fd 4f       	sbci	r31, 0xFD	; 253
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	48 17       	cp	r20, r24
    1b1c:	59 07       	cpc	r21, r25
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <pickup+0xc6>
    1b20:	4f 3f       	cpi	r20, 0xFF	; 255
    1b22:	6f ef       	ldi	r22, 0xFF	; 255
    1b24:	56 07       	cpc	r21, r22
    1b26:	89 f4       	brne	.+34     	; 0x1b4a <pickup+0xe8>
    1b28:	f9 01       	movw	r30, r18
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	e5 57       	subi	r30, 0x75	; 117
    1b34:	fd 4f       	sbci	r31, 0xFD	; 253
    1b36:	62 81       	ldd	r22, Z+2	; 0x02
    1b38:	73 81       	ldd	r23, Z+3	; 0x03
    1b3a:	86 17       	cp	r24, r22
    1b3c:	97 07       	cpc	r25, r23
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <pickup+0xe0>
    1b40:	ee c1       	rjmp	.+988    	; 0x1f1e <pickup+0x4bc>
    1b42:	6f 3f       	cpi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <pickup+0xe8>
    1b48:	ea c1       	rjmp	.+980    	; 0x1f1e <pickup+0x4bc>
		{
			if (armCount == 2)
    1b4a:	60 91 06 02 	lds	r22, 0x0206
    1b4e:	70 91 07 02 	lds	r23, 0x0207
    1b52:	62 30       	cpi	r22, 0x02	; 2
    1b54:	71 05       	cpc	r23, r1
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <pickup+0xf8>
    1b58:	b0 c0       	rjmp	.+352    	; 0x1cba <pickup+0x258>
			{
				if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1b5a:	e0 91 ad 02 	lds	r30, 0x02AD
    1b5e:	f0 91 ae 02 	lds	r31, 0x02AE
    1b62:	df 01       	movw	r26, r30
    1b64:	aa 0f       	add	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	a3 56       	subi	r26, 0x63	; 99
    1b6a:	bd 4f       	sbci	r27, 0xFD	; 253
    1b6c:	6d 91       	ld	r22, X+
    1b6e:	7c 91       	ld	r23, X
    1b70:	46 17       	cp	r20, r22
    1b72:	57 07       	cpc	r21, r23
    1b74:	79 f0       	breq	.+30     	; 0x1b94 <pickup+0x132>
    1b76:	d9 01       	movw	r26, r18
    1b78:	aa 0f       	add	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	aa 0f       	add	r26, r26
    1b7e:	bb 1f       	adc	r27, r27
    1b80:	a5 57       	subi	r26, 0x75	; 117
    1b82:	bd 4f       	sbci	r27, 0xFD	; 253
    1b84:	12 96       	adiw	r26, 0x02	; 2
    1b86:	ed 90       	ld	r14, X+
    1b88:	fc 90       	ld	r15, X
    1b8a:	13 97       	sbiw	r26, 0x03	; 3
    1b8c:	6e 15       	cp	r22, r14
    1b8e:	7f 05       	cpc	r23, r15
    1b90:	59 f4       	brne	.+22     	; 0x1ba8 <pickup+0x146>
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <pickup+0x13c>
					if (term[ct][0] == color[adj])
						pickNode(arm0, 1);
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	c8 01       	movw	r24, r16
    1b9a:	2f df       	rcall	.-418    	; 0x19fa <pickNode>
    1b9c:	8e c0       	rjmp	.+284    	; 0x1cba <pickup+0x258>
					else	pickNode(arm1, 0);
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	2a df       	rcall	.-428    	; 0x19fa <pickNode>
    1ba6:	89 c0       	rjmp	.+274    	; 0x1cba <pickup+0x258>
				else	if ((term[ct][1] != color[ct]) && term[ct][1] != -1)
    1ba8:	8e 15       	cp	r24, r14
    1baa:	9f 05       	cpc	r25, r15
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <pickup+0x14e>
    1bae:	4e c0       	rjmp	.+156    	; 0x1c4c <pickup+0x1ea>
    1bb0:	ef 20       	and	r14, r15
    1bb2:	e0 94       	com	r14
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <pickup+0x156>
    1bb6:	4a c0       	rjmp	.+148    	; 0x1c4c <pickup+0x1ea>
				{
					if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1bb8:	48 17       	cp	r20, r24
    1bba:	59 07       	cpc	r21, r25
    1bbc:	69 f0       	breq	.+26     	; 0x1bd8 <pickup+0x176>
    1bbe:	4f 3f       	cpi	r20, 0xFF	; 255
    1bc0:	af ef       	ldi	r26, 0xFF	; 255
    1bc2:	5a 07       	cpc	r21, r26
    1bc4:	49 f0       	breq	.+18     	; 0x1bd8 <pickup+0x176>
					{
						pickNode(arm1, 0);
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	ce 01       	movw	r24, r28
    1bcc:	16 df       	rcall	.-468    	; 0x19fa <pickNode>
						pickNode(arm0, 1);
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	12 df       	rcall	.-476    	; 0x19fa <pickNode>
    1bd6:	71 c0       	rjmp	.+226    	; 0x1cba <pickup+0x258>
					}
					else if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)) || (term[ct][0] == color[ct] || term[ct][1] == color[ct]))
    1bd8:	21 70       	andi	r18, 0x01	; 1
    1bda:	30 78       	andi	r19, 0x80	; 128
    1bdc:	33 23       	and	r19, r19
    1bde:	34 f4       	brge	.+12     	; 0x1bec <pickup+0x18a>
    1be0:	21 50       	subi	r18, 0x01	; 1
    1be2:	31 09       	sbc	r19, r1
    1be4:	2e 6f       	ori	r18, 0xFE	; 254
    1be6:	3f 6f       	ori	r19, 0xFF	; 255
    1be8:	2f 5f       	subi	r18, 0xFF	; 255
    1bea:	3f 4f       	sbci	r19, 0xFF	; 255
    1bec:	d9 01       	movw	r26, r18
    1bee:	aa 0f       	add	r26, r26
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	ad 57       	subi	r26, 0x7D	; 125
    1bf4:	bd 4f       	sbci	r27, 0xFD	; 253
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	2f 3f       	cpi	r18, 0xFF	; 255
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	09 f1       	breq	.+66     	; 0x1c42 <pickup+0x1e0>
    1c00:	df 01       	movw	r26, r30
    1c02:	aa 0f       	add	r26, r26
    1c04:	bb 1f       	adc	r27, r27
    1c06:	aa 0f       	add	r26, r26
    1c08:	bb 1f       	adc	r27, r27
    1c0a:	a5 57       	subi	r26, 0x75	; 117
    1c0c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c0e:	2d 91       	ld	r18, X+
    1c10:	3c 91       	ld	r19, X
    1c12:	62 17       	cp	r22, r18
    1c14:	73 07       	cpc	r23, r19
    1c16:	a9 f0       	breq	.+42     	; 0x1c42 <pickup+0x1e0>
    1c18:	2f 3f       	cpi	r18, 0xFF	; 255
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	91 f0       	breq	.+36     	; 0x1c42 <pickup+0x1e0>
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	e5 57       	subi	r30, 0x75	; 117
    1c28:	fd 4f       	sbci	r31, 0xFD	; 253
    1c2a:	22 81       	ldd	r18, Z+2	; 0x02
    1c2c:	33 81       	ldd	r19, Z+3	; 0x03
    1c2e:	62 17       	cp	r22, r18
    1c30:	73 07       	cpc	r23, r19
    1c32:	39 f0       	breq	.+14     	; 0x1c42 <pickup+0x1e0>
    1c34:	2f 3f       	cpi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	21 f0       	breq	.+8      	; 0x1c42 <pickup+0x1e0>
    1c3a:	48 17       	cp	r20, r24
    1c3c:	59 07       	cpc	r21, r25
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <pickup+0x1e0>
    1c40:	6e c1       	rjmp	.+732    	; 0x1f1e <pickup+0x4bc>
						pickNode(arm0, 1);
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	c8 01       	movw	r24, r16
    1c48:	d8 de       	rcall	.-592    	; 0x19fa <pickNode>
    1c4a:	37 c0       	rjmp	.+110    	; 0x1cba <pickup+0x258>
				}
				else	if (term[ct][0] != color[ct] && term[ct][0] != -1)
    1c4c:	48 17       	cp	r20, r24
    1c4e:	59 07       	cpc	r21, r25
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <pickup+0x1f2>
    1c52:	65 c1       	rjmp	.+714    	; 0x1f1e <pickup+0x4bc>
    1c54:	4f 3f       	cpi	r20, 0xFF	; 255
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <pickup+0x1fa>
    1c5a:	61 c1       	rjmp	.+706    	; 0x1f1e <pickup+0x4bc>
				{
					if (sort[ct % 2] == -1 || ((term[adj][0] == color[adj] || term[adj][0] == -1) || (term[adj][1] == color[adj] || term[adj][1] == -1)))
    1c5c:	21 70       	andi	r18, 0x01	; 1
    1c5e:	30 78       	andi	r19, 0x80	; 128
    1c60:	33 23       	and	r19, r19
    1c62:	34 f4       	brge	.+12     	; 0x1c70 <pickup+0x20e>
    1c64:	21 50       	subi	r18, 0x01	; 1
    1c66:	31 09       	sbc	r19, r1
    1c68:	2e 6f       	ori	r18, 0xFE	; 254
    1c6a:	3f 6f       	ori	r19, 0xFF	; 255
    1c6c:	2f 5f       	subi	r18, 0xFF	; 255
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	d9 01       	movw	r26, r18
    1c72:	aa 0f       	add	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	ad 57       	subi	r26, 0x7D	; 125
    1c78:	bd 4f       	sbci	r27, 0xFD	; 253
    1c7a:	8d 91       	ld	r24, X+
    1c7c:	9c 91       	ld	r25, X
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	c1 f0       	breq	.+48     	; 0x1cb2 <pickup+0x250>
    1c82:	df 01       	movw	r26, r30
    1c84:	aa 0f       	add	r26, r26
    1c86:	bb 1f       	adc	r27, r27
    1c88:	aa 0f       	add	r26, r26
    1c8a:	bb 1f       	adc	r27, r27
    1c8c:	a5 57       	subi	r26, 0x75	; 117
    1c8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c90:	8d 91       	ld	r24, X+
    1c92:	9c 91       	ld	r25, X
    1c94:	11 97       	sbiw	r26, 0x01	; 1
    1c96:	68 17       	cp	r22, r24
    1c98:	79 07       	cpc	r23, r25
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <pickup+0x250>
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	49 f0       	breq	.+18     	; 0x1cb2 <pickup+0x250>
    1ca0:	fd 01       	movw	r30, r26
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	68 17       	cp	r22, r24
    1ca8:	79 07       	cpc	r23, r25
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <pickup+0x250>
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <pickup+0x250>
    1cb0:	36 c1       	rjmp	.+620    	; 0x1f1e <pickup+0x4bc>
						pickNode(arm1, 0);
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	a0 de       	rcall	.-704    	; 0x19fa <pickNode>
				}

			}
			if (armCount == 1)
    1cba:	80 91 06 02 	lds	r24, 0x0206
    1cbe:	90 91 07 02 	lds	r25, 0x0207
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <pickup+0x266>
    1cc6:	2b c1       	rjmp	.+598    	; 0x1f1e <pickup+0x4bc>
			{
				int a1, a2;
				if (arm[arm0] == -1)
    1cc8:	f8 01       	movw	r30, r16
    1cca:	ee 0f       	add	r30, r30
    1ccc:	ff 1f       	adc	r31, r31
    1cce:	ef 54       	subi	r30, 0x4F	; 79
    1cd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <pickup+0x27a>
					a1 = arm0;
    1cda:	e8 01       	movw	r28, r16
				else a1 = arm1;
				a2 = (a1 + 1) % 2;
    1cdc:	be 01       	movw	r22, r28
    1cde:	6f 5f       	subi	r22, 0xFF	; 255
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	61 70       	andi	r22, 0x01	; 1
    1ce4:	70 78       	andi	r23, 0x80	; 128
    1ce6:	77 23       	and	r23, r23
    1ce8:	34 f4       	brge	.+12     	; 0x1cf6 <pickup+0x294>
    1cea:	61 50       	subi	r22, 0x01	; 1
    1cec:	71 09       	sbc	r23, r1
    1cee:	6e 6f       	ori	r22, 0xFE	; 254
    1cf0:	7f 6f       	ori	r23, 0xFF	; 255
    1cf2:	6f 5f       	subi	r22, 0xFF	; 255
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255

				if (sort[ct % 2] == -1)
    1cf6:	80 91 87 02 	lds	r24, 0x0287
    1cfa:	90 91 88 02 	lds	r25, 0x0288
    1cfe:	9c 01       	movw	r18, r24
    1d00:	21 70       	andi	r18, 0x01	; 1
    1d02:	30 78       	andi	r19, 0x80	; 128
    1d04:	33 23       	and	r19, r19
    1d06:	34 f4       	brge	.+12     	; 0x1d14 <pickup+0x2b2>
    1d08:	21 50       	subi	r18, 0x01	; 1
    1d0a:	31 09       	sbc	r19, r1
    1d0c:	2e 6f       	ori	r18, 0xFE	; 254
    1d0e:	3f 6f       	ori	r19, 0xFF	; 255
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	f9 01       	movw	r30, r18
    1d16:	ee 0f       	add	r30, r30
    1d18:	ff 1f       	adc	r31, r31
    1d1a:	ed 57       	subi	r30, 0x7D	; 125
    1d1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d1e:	20 81       	ld	r18, Z
    1d20:	31 81       	ldd	r19, Z+1	; 0x01
    1d22:	2f 3f       	cpi	r18, 0xFF	; 255
    1d24:	af ef       	ldi	r26, 0xFF	; 255
    1d26:	3a 07       	cpc	r19, r26
    1d28:	d9 f5       	brne	.+118    	; 0x1da0 <pickup+0x33e>
				{
					if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	ec 0f       	add	r30, r28
    1d32:	fd 1f       	adc	r31, r29
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	e5 57       	subi	r30, 0x75	; 117
    1d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d3c:	20 81       	ld	r18, Z
    1d3e:	31 81       	ldd	r19, Z+1	; 0x01
    1d40:	2f 3f       	cpi	r18, 0xFF	; 255
    1d42:	ef ef       	ldi	r30, 0xFF	; 255
    1d44:	3e 07       	cpc	r19, r30
    1d46:	71 f0       	breq	.+28     	; 0x1d64 <pickup+0x302>
    1d48:	fc 01       	movw	r30, r24
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e3 56       	subi	r30, 0x63	; 99
    1d50:	fd 4f       	sbci	r31, 0xFD	; 253
    1d52:	40 81       	ld	r20, Z
    1d54:	51 81       	ldd	r21, Z+1	; 0x01
    1d56:	24 17       	cp	r18, r20
    1d58:	35 07       	cpc	r19, r21
    1d5a:	21 f0       	breq	.+8      	; 0x1d64 <pickup+0x302>
						pickNode(a1, a1);
    1d5c:	be 01       	movw	r22, r28
    1d5e:	ce 01       	movw	r24, r28
    1d60:	4c de       	rcall	.-872    	; 0x19fa <pickNode>
    1d62:	dd c0       	rjmp	.+442    	; 0x1f1e <pickup+0x4bc>
					else if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1d64:	fc 01       	movw	r30, r24
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	e6 0f       	add	r30, r22
    1d6c:	f7 1f       	adc	r31, r23
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	e5 57       	subi	r30, 0x75	; 117
    1d74:	fd 4f       	sbci	r31, 0xFD	; 253
    1d76:	20 81       	ld	r18, Z
    1d78:	31 81       	ldd	r19, Z+1	; 0x01
    1d7a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d7c:	4f ef       	ldi	r20, 0xFF	; 255
    1d7e:	34 07       	cpc	r19, r20
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <pickup+0x322>
    1d82:	cd c0       	rjmp	.+410    	; 0x1f1e <pickup+0x4bc>
    1d84:	fc 01       	movw	r30, r24
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	e3 56       	subi	r30, 0x63	; 99
    1d8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	28 17       	cp	r18, r24
    1d94:	39 07       	cpc	r19, r25
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <pickup+0x338>
    1d98:	c2 c0       	rjmp	.+388    	; 0x1f1e <pickup+0x4bc>
						pickNode(a1, a2);
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	2e de       	rcall	.-932    	; 0x19fa <pickNode>
    1d9e:	bf c0       	rjmp	.+382    	; 0x1f1e <pickup+0x4bc>
				}
				else
				{
					if (term[ct][0] == color[adj] || term[ct][1] == color[adj])
    1da0:	40 91 ad 02 	lds	r20, 0x02AD
    1da4:	50 91 ae 02 	lds	r21, 0x02AE
    1da8:	fa 01       	movw	r30, r20
    1daa:	ee 0f       	add	r30, r30
    1dac:	ff 1f       	adc	r31, r31
    1dae:	e3 56       	subi	r30, 0x63	; 99
    1db0:	fd 4f       	sbci	r31, 0xFD	; 253
    1db2:	01 90       	ld	r0, Z+
    1db4:	f0 81       	ld	r31, Z
    1db6:	e0 2d       	mov	r30, r0
    1db8:	dc 01       	movw	r26, r24
    1dba:	aa 0f       	add	r26, r26
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	aa 0f       	add	r26, r26
    1dc0:	bb 1f       	adc	r27, r27
    1dc2:	a5 57       	subi	r26, 0x75	; 117
    1dc4:	bd 4f       	sbci	r27, 0xFD	; 253
    1dc6:	0d 90       	ld	r0, X+
    1dc8:	bc 91       	ld	r27, X
    1dca:	a0 2d       	mov	r26, r0
    1dcc:	ae 17       	cp	r26, r30
    1dce:	bf 07       	cpc	r27, r31
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <pickup+0x38c>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	aa 0f       	add	r26, r26
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	aa 0f       	add	r26, r26
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	a5 57       	subi	r26, 0x75	; 117
    1dde:	bd 4f       	sbci	r27, 0xFD	; 253
    1de0:	12 96       	adiw	r26, 0x02	; 2
    1de2:	0d 90       	ld	r0, X+
    1de4:	bc 91       	ld	r27, X
    1de6:	a0 2d       	mov	r26, r0
    1de8:	ea 17       	cp	r30, r26
    1dea:	fb 07       	cpc	r31, r27
    1dec:	d9 f5       	brne	.+118    	; 0x1e64 <pickup+0x402>
					{
						if ((visited[adj] == 1 && (term[adj][0] == -1 || term[adj][1] == -1)))
    1dee:	da 01       	movw	r26, r20
    1df0:	aa 0f       	add	r26, r26
    1df2:	bb 1f       	adc	r27, r27
    1df4:	ac 59       	subi	r26, 0x9C	; 156
    1df6:	bd 4f       	sbci	r27, 0xFD	; 253
    1df8:	2d 91       	ld	r18, X+
    1dfa:	3c 91       	ld	r19, X
    1dfc:	21 30       	cpi	r18, 0x01	; 1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <pickup+0x3a2>
    1e02:	8d c0       	rjmp	.+282    	; 0x1f1e <pickup+0x4bc>
    1e04:	da 01       	movw	r26, r20
    1e06:	aa 0f       	add	r26, r26
    1e08:	bb 1f       	adc	r27, r27
    1e0a:	aa 0f       	add	r26, r26
    1e0c:	bb 1f       	adc	r27, r27
    1e0e:	a5 57       	subi	r26, 0x75	; 117
    1e10:	bd 4f       	sbci	r27, 0xFD	; 253
    1e12:	2d 91       	ld	r18, X+
    1e14:	3c 91       	ld	r19, X
    1e16:	2f 3f       	cpi	r18, 0xFF	; 255
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	79 f0       	breq	.+30     	; 0x1e3a <pickup+0x3d8>
    1e1c:	da 01       	movw	r26, r20
    1e1e:	aa 0f       	add	r26, r26
    1e20:	bb 1f       	adc	r27, r27
    1e22:	aa 0f       	add	r26, r26
    1e24:	bb 1f       	adc	r27, r27
    1e26:	a5 57       	subi	r26, 0x75	; 117
    1e28:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2a:	12 96       	adiw	r26, 0x02	; 2
    1e2c:	2d 91       	ld	r18, X+
    1e2e:	3c 91       	ld	r19, X
    1e30:	13 97       	sbiw	r26, 0x03	; 3
    1e32:	2f 3f       	cpi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <pickup+0x3d8>
    1e38:	72 c0       	rjmp	.+228    	; 0x1f1e <pickup+0x4bc>
							if (term[ct][a1] == color[adj])
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	8c 0f       	add	r24, r28
    1e40:	9d 1f       	adc	r25, r29
    1e42:	dc 01       	movw	r26, r24
    1e44:	aa 0f       	add	r26, r26
    1e46:	bb 1f       	adc	r27, r27
    1e48:	a5 57       	subi	r26, 0x75	; 117
    1e4a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e4c:	8d 91       	ld	r24, X+
    1e4e:	9c 91       	ld	r25, X
    1e50:	e8 17       	cp	r30, r24
    1e52:	f9 07       	cpc	r31, r25
    1e54:	21 f4       	brne	.+8      	; 0x1e5e <pickup+0x3fc>
								pickNode(a1, a1);
    1e56:	be 01       	movw	r22, r28
    1e58:	ce 01       	movw	r24, r28
    1e5a:	cf dd       	rcall	.-1122   	; 0x19fa <pickNode>
    1e5c:	60 c0       	rjmp	.+192    	; 0x1f1e <pickup+0x4bc>
							else pickNode(a1, a2);
    1e5e:	ce 01       	movw	r24, r28
    1e60:	cc dd       	rcall	.-1128   	; 0x19fa <pickNode>
    1e62:	5d c0       	rjmp	.+186    	; 0x1f1e <pickup+0x4bc>
					}
					else {
						if (sort[ct % 2] != color[ct] && sort[ct % 2] != color[adj])
    1e64:	dc 01       	movw	r26, r24
    1e66:	aa 0f       	add	r26, r26
    1e68:	bb 1f       	adc	r27, r27
    1e6a:	a3 56       	subi	r26, 0x63	; 99
    1e6c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e6e:	0d 90       	ld	r0, X+
    1e70:	bc 91       	ld	r27, X
    1e72:	a0 2d       	mov	r26, r0
    1e74:	2a 17       	cp	r18, r26
    1e76:	3b 07       	cpc	r19, r27
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <pickup+0x41a>
    1e7a:	51 c0       	rjmp	.+162    	; 0x1f1e <pickup+0x4bc>
    1e7c:	2e 17       	cp	r18, r30
    1e7e:	3f 07       	cpc	r19, r31
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <pickup+0x422>
    1e82:	4d c0       	rjmp	.+154    	; 0x1f1e <pickup+0x4bc>
							if ((visited[adj] == 1 && ((term[adj][0] != color[ct]) && (term[adj][1] != color[ct]))))
    1e84:	fa 01       	movw	r30, r20
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	ec 59       	subi	r30, 0x9C	; 156
    1e8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e8e:	20 81       	ld	r18, Z
    1e90:	31 81       	ldd	r19, Z+1	; 0x01
    1e92:	21 30       	cpi	r18, 0x01	; 1
    1e94:	31 05       	cpc	r19, r1
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <pickup+0x438>
    1e98:	42 c0       	rjmp	.+132    	; 0x1f1e <pickup+0x4bc>
    1e9a:	fa 01       	movw	r30, r20
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	e5 57       	subi	r30, 0x75	; 117
    1ea6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea8:	20 81       	ld	r18, Z
    1eaa:	31 81       	ldd	r19, Z+1	; 0x01
    1eac:	a2 17       	cp	r26, r18
    1eae:	b3 07       	cpc	r27, r19
    1eb0:	b1 f1       	breq	.+108    	; 0x1f1e <pickup+0x4bc>
    1eb2:	fa 01       	movw	r30, r20
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	e5 57       	subi	r30, 0x75	; 117
    1ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec0:	22 81       	ldd	r18, Z+2	; 0x02
    1ec2:	33 81       	ldd	r19, Z+3	; 0x03
    1ec4:	a2 17       	cp	r26, r18
    1ec6:	b3 07       	cpc	r27, r19
    1ec8:	51 f1       	breq	.+84     	; 0x1f1e <pickup+0x4bc>
								if (term[ct][a1] != -1 && term[ct][a1] != color[ct])
    1eca:	fc 01       	movw	r30, r24
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ec 0f       	add	r30, r28
    1ed2:	fd 1f       	adc	r31, r29
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e5 57       	subi	r30, 0x75	; 117
    1eda:	fd 4f       	sbci	r31, 0xFD	; 253
    1edc:	20 81       	ld	r18, Z
    1ede:	31 81       	ldd	r19, Z+1	; 0x01
    1ee0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee2:	ef ef       	ldi	r30, 0xFF	; 255
    1ee4:	3e 07       	cpc	r19, r30
    1ee6:	39 f0       	breq	.+14     	; 0x1ef6 <pickup+0x494>
    1ee8:	a2 17       	cp	r26, r18
    1eea:	b3 07       	cpc	r27, r19
    1eec:	21 f0       	breq	.+8      	; 0x1ef6 <pickup+0x494>
									pickNode(a1, a1);
    1eee:	be 01       	movw	r22, r28
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	83 dd       	rcall	.-1274   	; 0x19fa <pickNode>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <pickup+0x4bc>
								else	if (term[ct][a2] != -1 && term[ct][a2] != color[ct])
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	86 0f       	add	r24, r22
    1efc:	97 1f       	adc	r25, r23
    1efe:	fc 01       	movw	r30, r24
    1f00:	ee 0f       	add	r30, r30
    1f02:	ff 1f       	adc	r31, r31
    1f04:	e5 57       	subi	r30, 0x75	; 117
    1f06:	fd 4f       	sbci	r31, 0xFD	; 253
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	92 07       	cpc	r25, r18
    1f12:	29 f0       	breq	.+10     	; 0x1f1e <pickup+0x4bc>
    1f14:	a8 17       	cp	r26, r24
    1f16:	b9 07       	cpc	r27, r25
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <pickup+0x4bc>
									pickNode(a1, a2);
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	6e dd       	rcall	.-1316   	; 0x19fa <pickNode>
					}
				}
			}
		}
}
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	08 95       	ret

00001f2c <dropPickup>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}

void dropPickup(int a1)
{
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
	int a2 = (a1 + 1) % 2;
    1f30:	9c 01       	movw	r18, r24
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	21 70       	andi	r18, 0x01	; 1
    1f38:	30 78       	andi	r19, 0x80	; 128
    1f3a:	33 23       	and	r19, r19
    1f3c:	34 f4       	brge	.+12     	; 0x1f4a <dropPickup+0x1e>
    1f3e:	21 50       	subi	r18, 0x01	; 1
    1f40:	31 09       	sbc	r19, r1
    1f42:	2e 6f       	ori	r18, 0xFE	; 254
    1f44:	3f 6f       	ori	r19, 0xFF	; 255
    1f46:	2f 5f       	subi	r18, 0xFF	; 255
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	d2 2f       	mov	r29, r18
    1f4c:	c3 2f       	mov	r28, r19
	if ((term[ct][a2] == color[ct] || term[ct][a2] != color[adj]) && (term[ct][a1] != color[ct] && term[ct][a1] != -1))
    1f4e:	e0 91 87 02 	lds	r30, 0x0287
    1f52:	f0 91 88 02 	lds	r31, 0x0288
    1f56:	af 01       	movw	r20, r30
    1f58:	44 0f       	add	r20, r20
    1f5a:	55 1f       	adc	r21, r21
    1f5c:	24 0f       	add	r18, r20
    1f5e:	35 1f       	adc	r19, r21
    1f60:	d9 01       	movw	r26, r18
    1f62:	aa 0f       	add	r26, r26
    1f64:	bb 1f       	adc	r27, r27
    1f66:	a5 57       	subi	r26, 0x75	; 117
    1f68:	bd 4f       	sbci	r27, 0xFD	; 253
    1f6a:	2d 91       	ld	r18, X+
    1f6c:	3c 91       	ld	r19, X
    1f6e:	da 01       	movw	r26, r20
    1f70:	a3 56       	subi	r26, 0x63	; 99
    1f72:	bd 4f       	sbci	r27, 0xFD	; 253
    1f74:	4d 91       	ld	r20, X+
    1f76:	5c 91       	ld	r21, X
    1f78:	24 17       	cp	r18, r20
    1f7a:	35 07       	cpc	r19, r21
    1f7c:	69 f0       	breq	.+26     	; 0x1f98 <dropPickup+0x6c>
    1f7e:	a0 91 ad 02 	lds	r26, 0x02AD
    1f82:	b0 91 ae 02 	lds	r27, 0x02AE
    1f86:	aa 0f       	add	r26, r26
    1f88:	bb 1f       	adc	r27, r27
    1f8a:	a3 56       	subi	r26, 0x63	; 99
    1f8c:	bd 4f       	sbci	r27, 0xFD	; 253
    1f8e:	6d 91       	ld	r22, X+
    1f90:	7c 91       	ld	r23, X
    1f92:	26 17       	cp	r18, r22
    1f94:	37 07       	cpc	r19, r23
    1f96:	a9 f0       	breq	.+42     	; 0x1fc2 <dropPickup+0x96>
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	e8 0f       	add	r30, r24
    1f9e:	f9 1f       	adc	r31, r25
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	e5 57       	subi	r30, 0x75	; 117
    1fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa8:	01 90       	ld	r0, Z+
    1faa:	f0 81       	ld	r31, Z
    1fac:	e0 2d       	mov	r30, r0
    1fae:	4e 17       	cp	r20, r30
    1fb0:	5f 07       	cpc	r21, r31
    1fb2:	39 f0       	breq	.+14     	; 0x1fc2 <dropPickup+0x96>
    1fb4:	31 96       	adiw	r30, 0x01	; 1
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <dropPickup+0x96>
		pickNode(a2, a1);
    1fb8:	bc 01       	movw	r22, r24
    1fba:	8d 2f       	mov	r24, r29
    1fbc:	9c 2f       	mov	r25, r28
    1fbe:	1d dd       	rcall	.-1478   	; 0x19fa <pickNode>
    1fc0:	0b c0       	rjmp	.+22     	; 0x1fd8 <dropPickup+0xac>
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
    1fc2:	24 17       	cp	r18, r20
    1fc4:	35 07       	cpc	r19, r21
    1fc6:	41 f0       	breq	.+16     	; 0x1fd8 <dropPickup+0xac>
    1fc8:	2f 3f       	cpi	r18, 0xFF	; 255
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	29 f0       	breq	.+10     	; 0x1fd8 <dropPickup+0xac>
		pickNode(a2, a2);
    1fce:	6d 2f       	mov	r22, r29
    1fd0:	7c 2f       	mov	r23, r28
    1fd2:	8d 2f       	mov	r24, r29
    1fd4:	9c 2f       	mov	r25, r28
    1fd6:	11 dd       	rcall	.-1502   	; 0x19fa <pickNode>
}
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <nodeDrop>:
	lcd("dropRight");
	else
	lcd("dropLeft");
}
void nodeDrop(int armNo, int side)
{
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	ec 01       	movw	r28, r24
	term[ct][side] = arm[armNo];
    1fe8:	e0 91 87 02 	lds	r30, 0x0287
    1fec:	f0 91 88 02 	lds	r31, 0x0288
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	e6 0f       	add	r30, r22
    1ff6:	f7 1f       	adc	r31, r23
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	e5 57       	subi	r30, 0x75	; 117
    1ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    2000:	8c 01       	movw	r16, r24
    2002:	00 0f       	add	r16, r16
    2004:	11 1f       	adc	r17, r17
    2006:	0f 54       	subi	r16, 0x4F	; 79
    2008:	1d 4f       	sbci	r17, 0xFD	; 253
    200a:	d8 01       	movw	r26, r16
    200c:	8d 91       	ld	r24, X+
    200e:	9c 91       	ld	r25, X
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24
	position(armNo, side);
    2014:	ce 01       	movw	r24, r28
    2016:	e9 db       	rcall	.-2094   	; 0x17ea <position>
	drop(armNo);
    2018:	ce 01       	movw	r24, r28
    201a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <drop>
	arm[armNo] = -1;
    201e:	8f ef       	ldi	r24, 0xFF	; 255
    2020:	9f ef       	ldi	r25, 0xFF	; 255
    2022:	f8 01       	movw	r30, r16
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
    2028:	80 91 56 02 	lds	r24, 0x0256
    202c:	90 91 57 02 	lds	r25, 0x0257
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	90 93 57 02 	sts	0x0257, r25
    2036:	80 93 56 02 	sts	0x0256, r24
}
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <canDrop>:
	else		if (term[ct][a2] != color[ct] && term[ct][a2] != -1)
		pickNode(a2, a2);
}

void canDrop()
{
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    204c:	20 91 87 02 	lds	r18, 0x0287
    2050:	30 91 88 02 	lds	r19, 0x0288
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	30 f4       	brcc	.+12     	; 0x2066 <canDrop+0x22>
    205a:	80 91 00 02 	lds	r24, 0x0200
    205e:	90 91 01 02 	lds	r25, 0x0201
    2062:	02 97       	sbiw	r24, 0x02	; 2
    2064:	79 f0       	breq	.+30     	; 0x2084 <canDrop+0x40>
    2066:	c9 01       	movw	r24, r18
    2068:	02 97       	sbiw	r24, 0x02	; 2
    206a:	02 97       	sbiw	r24, 0x02	; 2
    206c:	80 f4       	brcc	.+32     	; 0x208e <canDrop+0x4a>
    206e:	80 91 00 02 	lds	r24, 0x0200
    2072:	90 91 01 02 	lds	r25, 0x0201
    2076:	89 2b       	or	r24, r25
    2078:	79 f0       	breq	.+30     	; 0x2098 <canDrop+0x54>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    207a:	01 e0       	ldi	r16, 0x01	; 1
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	c0 e0       	ldi	r28, 0x00	; 0
    2080:	d0 e0       	ldi	r29, 0x00	; 0
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2084:	00 e0       	ldi	r16, 0x00	; 0
    2086:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2088:	c1 e0       	ldi	r28, 0x01	; 1
    208a:	d0 e0       	ldi	r29, 0x00	; 0
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <canDrop+0x5c>
		pickNode(a2, a2);
}

void canDrop()
{
	int arm0 = 0, arm1 = 1;
    208e:	01 e0       	ldi	r16, 0x01	; 1
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	c0 e0       	ldi	r28, 0x00	; 0
    2094:	d0 e0       	ldi	r29, 0x00	; 0
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <canDrop+0x5c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2098:	00 e0       	ldi	r16, 0x00	; 0
    209a:	10 e0       	ldi	r17, 0x00	; 0
void canDrop()
{
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    209c:	c1 e0       	ldi	r28, 0x01	; 1
    209e:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}

	if (armCount == 2 || (arm[0] != color[ct] && arm[1] != color[ct]))
    20a0:	40 91 06 02 	lds	r20, 0x0206
    20a4:	50 91 07 02 	lds	r21, 0x0207
    20a8:	42 30       	cpi	r20, 0x02	; 2
    20aa:	51 05       	cpc	r21, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <canDrop+0x6c>
    20ae:	3e c1       	rjmp	.+636    	; 0x232c <__stack+0x12d>
    20b0:	f9 01       	movw	r30, r18
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	e3 56       	subi	r30, 0x63	; 99
    20b8:	fd 4f       	sbci	r31, 0xFD	; 253
    20ba:	40 81       	ld	r20, Z
    20bc:	51 81       	ldd	r21, Z+1	; 0x01
    20be:	80 91 b1 02 	lds	r24, 0x02B1
    20c2:	90 91 b2 02 	lds	r25, 0x02B2
    20c6:	84 17       	cp	r24, r20
    20c8:	95 07       	cpc	r25, r21
    20ca:	41 f0       	breq	.+16     	; 0x20dc <canDrop+0x98>
    20cc:	80 91 b3 02 	lds	r24, 0x02B3
    20d0:	90 91 b4 02 	lds	r25, 0x02B4
    20d4:	48 17       	cp	r20, r24
    20d6:	59 07       	cpc	r21, r25
    20d8:	09 f0       	breq	.+2      	; 0x20dc <canDrop+0x98>
    20da:	28 c1       	rjmp	.+592    	; 0x232c <__stack+0x12d>
		return;
	else
	{
		if (visited[ct] == 0)
    20dc:	f9 01       	movw	r30, r18
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	ec 59       	subi	r30, 0x9C	; 156
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	89 2b       	or	r24, r25
    20ec:	19 f4       	brne	.+6      	; 0x20f4 <canDrop+0xb0>
		{
			terminalCheck1();
    20ee:	aa da       	rcall	.-2732   	; 0x1644 <terminalCheck1>
			terminalCheck2();
    20f0:	0e 94 51 06 	call	0xca2	; 0xca2 <terminalCheck2>
		}
		if (armCount == 0)
    20f4:	80 91 06 02 	lds	r24, 0x0206
    20f8:	90 91 07 02 	lds	r25, 0x0207
    20fc:	89 2b       	or	r24, r25
    20fe:	09 f0       	breq	.+2      	; 0x2102 <canDrop+0xbe>
    2100:	48 c0       	rjmp	.+144    	; 0x2192 <canDrop+0x14e>
		{
			if (arm[arm0] == color[ct])
    2102:	20 91 87 02 	lds	r18, 0x0287
    2106:	30 91 88 02 	lds	r19, 0x0288
    210a:	f9 01       	movw	r30, r18
    210c:	ee 0f       	add	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	e3 56       	subi	r30, 0x63	; 99
    2112:	fd 4f       	sbci	r31, 0xFD	; 253
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	fe 01       	movw	r30, r28
    211a:	ee 0f       	add	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	ef 54       	subi	r30, 0x4F	; 79
    2120:	fd 4f       	sbci	r31, 0xFD	; 253
    2122:	40 81       	ld	r20, Z
    2124:	51 81       	ldd	r21, Z+1	; 0x01
    2126:	48 17       	cp	r20, r24
    2128:	59 07       	cpc	r21, r25
    212a:	a9 f4       	brne	.+42     	; 0x2156 <canDrop+0x112>
				if (term[ct][0] == -1)
    212c:	f9 01       	movw	r30, r18
    212e:	ee 0f       	add	r30, r30
    2130:	ff 1f       	adc	r31, r31
    2132:	ee 0f       	add	r30, r30
    2134:	ff 1f       	adc	r31, r31
    2136:	e5 57       	subi	r30, 0x75	; 117
    2138:	fd 4f       	sbci	r31, 0xFD	; 253
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	29 f4       	brne	.+10     	; 0x214c <canDrop+0x108>
					nodeDrop(arm0, 0);
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	ce 01       	movw	r24, r28
    2148:	4a df       	rcall	.-364    	; 0x1fde <nodeDrop>
    214a:	23 c0       	rjmp	.+70     	; 0x2192 <canDrop+0x14e>
				else nodeDrop(arm0, 1);
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	ce 01       	movw	r24, r28
    2152:	45 df       	rcall	.-374    	; 0x1fde <nodeDrop>
    2154:	1e c0       	rjmp	.+60     	; 0x2192 <canDrop+0x14e>
			else if (arm[arm1] == color[ct])
    2156:	f8 01       	movw	r30, r16
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	ef 54       	subi	r30, 0x4F	; 79
    215e:	fd 4f       	sbci	r31, 0xFD	; 253
    2160:	40 81       	ld	r20, Z
    2162:	51 81       	ldd	r21, Z+1	; 0x01
    2164:	84 17       	cp	r24, r20
    2166:	95 07       	cpc	r25, r21
    2168:	a1 f4       	brne	.+40     	; 0x2192 <canDrop+0x14e>
				if (term[ct][0] != -1)
    216a:	f9 01       	movw	r30, r18
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	e5 57       	subi	r30, 0x75	; 117
    2176:	fd 4f       	sbci	r31, 0xFD	; 253
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	29 f0       	breq	.+10     	; 0x218a <canDrop+0x146>
					nodeDrop(arm1, 1);
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	c8 01       	movw	r24, r16
    2186:	2b df       	rcall	.-426    	; 0x1fde <nodeDrop>
    2188:	04 c0       	rjmp	.+8      	; 0x2192 <canDrop+0x14e>
				else nodeDrop(arm1, 0);
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	c8 01       	movw	r24, r16
    2190:	26 df       	rcall	.-436    	; 0x1fde <nodeDrop>
		}
		if (arm[0] == color[ct] || arm[1] == color[ct])
    2192:	20 91 87 02 	lds	r18, 0x0287
    2196:	30 91 88 02 	lds	r19, 0x0288
    219a:	f9 01       	movw	r30, r18
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	e3 56       	subi	r30, 0x63	; 99
    21a2:	fd 4f       	sbci	r31, 0xFD	; 253
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	40 91 b1 02 	lds	r20, 0x02B1
    21ac:	50 91 b2 02 	lds	r21, 0x02B2
    21b0:	48 17       	cp	r20, r24
    21b2:	59 07       	cpc	r21, r25
    21b4:	41 f0       	breq	.+16     	; 0x21c6 <canDrop+0x182>
    21b6:	40 91 b3 02 	lds	r20, 0x02B3
    21ba:	50 91 b4 02 	lds	r21, 0x02B4
    21be:	84 17       	cp	r24, r20
    21c0:	95 07       	cpc	r25, r21
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <canDrop+0x182>
    21c4:	b3 c0       	rjmp	.+358    	; 0x232c <__stack+0x12d>
		{
			if (term[ct][0] != -1 && term[ct][1] != -1)
    21c6:	f9 01       	movw	r30, r18
    21c8:	ee 0f       	add	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	e5 57       	subi	r30, 0x75	; 117
    21d2:	fd 4f       	sbci	r31, 0xFD	; 253
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	09 f4       	brne	.+2      	; 0x21de <canDrop+0x19a>
    21dc:	46 c0       	rjmp	.+140    	; 0x226a <__stack+0x6b>
    21de:	f9 01       	movw	r30, r18
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	e5 57       	subi	r30, 0x75	; 117
    21ea:	fd 4f       	sbci	r31, 0xFD	; 253
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	d1 f0       	breq	.+52     	; 0x2228 <__stack+0x29>
				if (visited[ct] == 0)
    21f4:	f9 01       	movw	r30, r18
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	ec 59       	subi	r30, 0x9C	; 156
    21fc:	fd 4f       	sbci	r31, 0xFD	; 253
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	89 2b       	or	r24, r25
    2204:	89 f4       	brne	.+34     	; 0x2228 <__stack+0x29>
					terminalCheck2();
    2206:	0e 94 51 06 	call	0xca2	; 0xca2 <terminalCheck2>
			if (term[ct][0] != -1 && term[ct][1] != -1)
    220a:	20 91 87 02 	lds	r18, 0x0287
    220e:	30 91 88 02 	lds	r19, 0x0288
    2212:	f9 01       	movw	r30, r18
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	e5 57       	subi	r30, 0x75	; 117
    221e:	fd 4f       	sbci	r31, 0xFD	; 253
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	09 f1       	breq	.+66     	; 0x226a <__stack+0x6b>
    2228:	f9 01       	movw	r30, r18
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	e5 57       	subi	r30, 0x75	; 117
    2234:	fd 4f       	sbci	r31, 0xFD	; 253
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	b1 f0       	breq	.+44     	; 0x226a <__stack+0x6b>
			{
				if (arm[arm0] == color[ct])
    223e:	de 01       	movw	r26, r28
    2240:	aa 0f       	add	r26, r26
    2242:	bb 1f       	adc	r27, r27
    2244:	af 54       	subi	r26, 0x4F	; 79
    2246:	bd 4f       	sbci	r27, 0xFD	; 253
    2248:	f9 01       	movw	r30, r18
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	e3 56       	subi	r30, 0x63	; 99
    2250:	fd 4f       	sbci	r31, 0xFD	; 253
    2252:	4d 91       	ld	r20, X+
    2254:	5c 91       	ld	r21, X
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	48 17       	cp	r20, r24
    225c:	59 07       	cpc	r21, r25
    225e:	19 f4       	brne	.+6      	; 0x2266 <__stack+0x67>
					dropPickup(arm0);
    2260:	ce 01       	movw	r24, r28
    2262:	64 de       	rcall	.-824    	; 0x1f2c <dropPickup>
    2264:	02 c0       	rjmp	.+4      	; 0x226a <__stack+0x6b>
				else dropPickup(arm1);
    2266:	c8 01       	movw	r24, r16
    2268:	61 de       	rcall	.-830    	; 0x1f2c <dropPickup>
			}

			if (arm[arm0] == color[ct] && term[ct][0] == -1)
    226a:	80 91 87 02 	lds	r24, 0x0287
    226e:	90 91 88 02 	lds	r25, 0x0288
    2272:	fc 01       	movw	r30, r24
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	e3 56       	subi	r30, 0x63	; 99
    227a:	fd 4f       	sbci	r31, 0xFD	; 253
    227c:	20 81       	ld	r18, Z
    227e:	31 81       	ldd	r19, Z+1	; 0x01
    2280:	fe 01       	movw	r30, r28
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	ef 54       	subi	r30, 0x4F	; 79
    2288:	fd 4f       	sbci	r31, 0xFD	; 253
    228a:	40 81       	ld	r20, Z
    228c:	51 81       	ldd	r21, Z+1	; 0x01
    228e:	42 17       	cp	r20, r18
    2290:	53 07       	cpc	r21, r19
    2292:	11 f5       	brne	.+68     	; 0x22d8 <__stack+0xd9>
    2294:	fc 01       	movw	r30, r24
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	e5 57       	subi	r30, 0x75	; 117
    22a0:	fd 4f       	sbci	r31, 0xFD	; 253
    22a2:	40 81       	ld	r20, Z
    22a4:	51 81       	ldd	r21, Z+1	; 0x01
    22a6:	4f 3f       	cpi	r20, 0xFF	; 255
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <__stack+0xb7>
				nodeDrop(arm0, 0);
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	ce 01       	movw	r24, r28
    22b2:	95 de       	rcall	.-726    	; 0x1fde <nodeDrop>
    22b4:	3b c0       	rjmp	.+118    	; 0x232c <__stack+0x12d>
			else if (arm[arm0] == color[ct] && term[ct][1] == -1)
    22b6:	fc 01       	movw	r30, r24
    22b8:	ee 0f       	add	r30, r30
    22ba:	ff 1f       	adc	r31, r31
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	e5 57       	subi	r30, 0x75	; 117
    22c2:	fd 4f       	sbci	r31, 0xFD	; 253
    22c4:	42 81       	ldd	r20, Z+2	; 0x02
    22c6:	53 81       	ldd	r21, Z+3	; 0x03
    22c8:	4f 3f       	cpi	r20, 0xFF	; 255
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	29 f4       	brne	.+10     	; 0x22d8 <__stack+0xd9>
				nodeDrop(arm0, 1);
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	ce 01       	movw	r24, r28
    22d4:	84 de       	rcall	.-760    	; 0x1fde <nodeDrop>
    22d6:	2a c0       	rjmp	.+84     	; 0x232c <__stack+0x12d>
			else if (arm[arm1] == color[ct] && term[ct][0] == -1)
    22d8:	f8 01       	movw	r30, r16
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ef 54       	subi	r30, 0x4F	; 79
    22e0:	fd 4f       	sbci	r31, 0xFD	; 253
    22e2:	40 81       	ld	r20, Z
    22e4:	51 81       	ldd	r21, Z+1	; 0x01
    22e6:	24 17       	cp	r18, r20
    22e8:	35 07       	cpc	r19, r21
    22ea:	01 f5       	brne	.+64     	; 0x232c <__stack+0x12d>
    22ec:	fc 01       	movw	r30, r24
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	e5 57       	subi	r30, 0x75	; 117
    22f8:	fd 4f       	sbci	r31, 0xFD	; 253
    22fa:	20 81       	ld	r18, Z
    22fc:	31 81       	ldd	r19, Z+1	; 0x01
    22fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	29 f4       	brne	.+10     	; 0x230e <__stack+0x10f>
				nodeDrop(arm1, 0);
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	c8 01       	movw	r24, r16
    230a:	69 de       	rcall	.-814    	; 0x1fde <nodeDrop>
    230c:	0f c0       	rjmp	.+30     	; 0x232c <__stack+0x12d>
			else if (arm[arm1] == color[ct] && term[ct][1] == -1)
    230e:	fc 01       	movw	r30, r24
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e5 57       	subi	r30, 0x75	; 117
    231a:	fd 4f       	sbci	r31, 0xFD	; 253
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	21 f4       	brne	.+8      	; 0x232c <__stack+0x12d>
				nodeDrop(arm1, 1);
    2324:	61 e0       	ldi	r22, 0x01	; 1
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	c8 01       	movw	r24, r16
    232a:	59 de       	rcall	.-846    	; 0x1fde <nodeDrop>

		}
	}
}
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	08 95       	ret

00002336 <pickSort>:
	term[ct][side] = -1;
	//printf("Arm %d picked %d from term[%d][%d]\n", armNo, arm[armNo], ct, side);
}

void pickSort(int armNo, int sortNo)
{
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	ec 01       	movw	r28, r24
    2340:	8b 01       	movw	r16, r22
	arm[armNo] = sort[sortNo];
    2342:	fc 01       	movw	r30, r24
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	ef 54       	subi	r30, 0x4F	; 79
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	db 01       	movw	r26, r22
    234e:	aa 0f       	add	r26, r26
    2350:	bb 1f       	adc	r27, r27
    2352:	ad 57       	subi	r26, 0x7D	; 125
    2354:	bd 4f       	sbci	r27, 0xFD	; 253
    2356:	8d 91       	ld	r24, X+
    2358:	9c 91       	ld	r25, X
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    235e:	c6 17       	cp	r28, r22
    2360:	d7 07       	cpc	r29, r23
    2362:	39 f4       	brne	.+14     	; 0x2372 <pickSort+0x3c>
    2364:	80 91 00 02 	lds	r24, 0x0200
    2368:	90 91 01 02 	lds	r25, 0x0201
    236c:	89 2b       	or	r24, r25
    236e:	49 f4       	brne	.+18     	; 0x2382 <pickSort+0x4c>
    2370:	06 c0       	rjmp	.+12     	; 0x237e <pickSort+0x48>
    2372:	80 91 00 02 	lds	r24, 0x0200
    2376:	90 91 01 02 	lds	r25, 0x0201
    237a:	02 97       	sbiw	r24, 0x02	; 2
    237c:	11 f4       	brne	.+4      	; 0x2382 <pickSort+0x4c>
		turn();
    237e:	83 d8       	rcall	.-3834   	; 0x1486 <turn>
    2380:	0d c0       	rjmp	.+26     	; 0x239c <pickSort+0x66>
	else
	{
		if (dir == 1 || dir == 3)
    2382:	80 91 00 02 	lds	r24, 0x0200
    2386:	90 91 01 02 	lds	r25, 0x0201
    238a:	8d 7f       	andi	r24, 0xFD	; 253
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	31 f4       	brne	.+12     	; 0x239c <pickSort+0x66>
			if (armNo == 0)
    2390:	20 97       	sbiw	r28, 0x00	; 0
    2392:	11 f4       	brne	.+4      	; 0x2398 <pickSort+0x62>
				turnLeft();
    2394:	29 d8       	rcall	.-4014   	; 0x13e8 <turnLeft>
    2396:	02 c0       	rjmp	.+4      	; 0x239c <pickSort+0x66>
			else turnRight();
    2398:	0e 94 a5 09 	call	0x134a	; 0x134a <turnRight>
	}
	pick(armNo);
    239c:	ce 01       	movw	r24, r28
    239e:	0e 94 65 07 	call	0xeca	; 0xeca <pick>
	sort[sortNo] = -1;
    23a2:	f8 01       	movw	r30, r16
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	ed 57       	subi	r30, 0x7D	; 125
    23aa:	fd 4f       	sbci	r31, 0xFD	; 253
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	9f ef       	ldi	r25, 0xFF	; 255
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
	//printf("Arm %d picked %d from sort[%d]\n", armNo, arm[armNo], sortNo);
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <sortDrop>:
	arm[armNo] = -1;
	//printf("Arm %d dropped %d on term[%d][%d]\n", armNo, term[ct][side], ct, side);
	sorted++;
}
void sortDrop(int armNo, int sortNo)
{
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	ec 01       	movw	r28, r24
	sort[sortNo] = arm[armNo];
    23c4:	fb 01       	movw	r30, r22
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	ed 57       	subi	r30, 0x7D	; 125
    23cc:	fd 4f       	sbci	r31, 0xFD	; 253
    23ce:	dc 01       	movw	r26, r24
    23d0:	aa 0f       	add	r26, r26
    23d2:	bb 1f       	adc	r27, r27
    23d4:	af 54       	subi	r26, 0x4F	; 79
    23d6:	bd 4f       	sbci	r27, 0xFD	; 253
    23d8:	8d 91       	ld	r24, X+
    23da:	9c 91       	ld	r25, X
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
	if (((armNo == sortNo) && dir == 0) || ((armNo != sortNo) && dir == 2))
    23e0:	c6 17       	cp	r28, r22
    23e2:	d7 07       	cpc	r29, r23
    23e4:	39 f4       	brne	.+14     	; 0x23f4 <sortDrop+0x36>
    23e6:	80 91 00 02 	lds	r24, 0x0200
    23ea:	90 91 01 02 	lds	r25, 0x0201
    23ee:	89 2b       	or	r24, r25
    23f0:	49 f4       	brne	.+18     	; 0x2404 <sortDrop+0x46>
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <sortDrop+0x42>
    23f4:	80 91 00 02 	lds	r24, 0x0200
    23f8:	90 91 01 02 	lds	r25, 0x0201
    23fc:	02 97       	sbiw	r24, 0x02	; 2
    23fe:	11 f4       	brne	.+4      	; 0x2404 <sortDrop+0x46>
		turn();
    2400:	42 d8       	rcall	.-3964   	; 0x1486 <turn>
    2402:	0e c0       	rjmp	.+28     	; 0x2420 <sortDrop+0x62>
	else
	{
		if (dir == 1 || dir == 3)
    2404:	80 91 00 02 	lds	r24, 0x0200
    2408:	90 91 01 02 	lds	r25, 0x0201
    240c:	8d 7f       	andi	r24, 0xFD	; 253
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	39 f4       	brne	.+14     	; 0x2420 <sortDrop+0x62>
			if (armNo == 0)
    2412:	20 97       	sbiw	r28, 0x00	; 0
    2414:	19 f4       	brne	.+6      	; 0x241c <sortDrop+0x5e>
				turnLeft();
    2416:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <turnLeft>
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <sortDrop+0x62>
			else turnRight();
    241c:	0e 94 a5 09 	call	0x134a	; 0x134a <turnRight>
	}
	drop(armNo);
    2420:	ce 01       	movw	r24, r28
    2422:	0e 94 a5 07 	call	0xf4a	; 0xf4a <drop>
	arm[armNo] = -1;
    2426:	cc 0f       	add	r28, r28
    2428:	dd 1f       	adc	r29, r29
    242a:	cf 54       	subi	r28, 0x4F	; 79
    242c:	dd 4f       	sbci	r29, 0xFD	; 253
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	9f ef       	ldi	r25, 0xFF	; 255
    2432:	99 83       	std	Y+1, r25	; 0x01
    2434:	88 83       	st	Y, r24
	//printf("Arm %d dropped %d on sort[%d]\n", armNo, sort[sortNo], sortNo);
}
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <newSort>:
		}
	}
}

void newSort()
{
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
	int t1, t2, a1=-2, a2=-2;
	if (arm[0] != -1)
    2444:	20 91 b1 02 	lds	r18, 0x02B1
    2448:	30 91 b2 02 	lds	r19, 0x02B2
    244c:	2f 3f       	cpi	r18, 0xFF	; 255
    244e:	1f ef       	ldi	r17, 0xFF	; 255
    2450:	31 07       	cpc	r19, r17
    2452:	41 f0       	breq	.+16     	; 0x2464 <newSort+0x28>
		a1 = indicator[arm[0]];
    2454:	f9 01       	movw	r30, r18
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	eb 55       	subi	r30, 0x5B	; 91
    245c:	fd 4f       	sbci	r31, 0xFD	; 253
    245e:	c0 81       	ld	r28, Z
    2460:	d1 81       	ldd	r29, Z+1	; 0x01
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <newSort+0x2c>
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    2464:	ce ef       	ldi	r28, 0xFE	; 254
    2466:	df ef       	ldi	r29, 0xFF	; 255
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
    2468:	e0 91 b3 02 	lds	r30, 0x02B3
    246c:	f0 91 b4 02 	lds	r31, 0x02B4
    2470:	ef 3f       	cpi	r30, 0xFF	; 255
    2472:	4f ef       	ldi	r20, 0xFF	; 255
    2474:	f4 07       	cpc	r31, r20
    2476:	09 f4       	brne	.+2      	; 0x247a <newSort+0x3e>
    2478:	7f c1       	rjmp	.+766    	; 0x2778 <newSort+0x33c>
		a2 = indicator[arm[1]];
    247a:	df 01       	movw	r26, r30
    247c:	aa 0f       	add	r26, r26
    247e:	bb 1f       	adc	r27, r27
    2480:	ab 55       	subi	r26, 0x5B	; 91
    2482:	bd 4f       	sbci	r27, 0xFD	; 253
    2484:	4d 91       	ld	r20, X+
    2486:	5c 91       	ld	r21, X

	t1 = (ct + 1) % 2;
    2488:	80 91 87 02 	lds	r24, 0x0287
    248c:	90 91 88 02 	lds	r25, 0x0288
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	81 70       	andi	r24, 0x01	; 1
    2494:	90 78       	andi	r25, 0x80	; 128
    2496:	99 23       	and	r25, r25
    2498:	24 f4       	brge	.+8      	; 0x24a2 <newSort+0x66>
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	8e 6f       	ori	r24, 0xFE	; 254
    249e:	9f 6f       	ori	r25, 0xFF	; 255
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    24a4:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    24a6:	d0 93 88 02 	sts	0x0288, r29
    24aa:	c0 93 87 02 	sts	0x0287, r28
		if(arm[0]==arm[1] && (visited[a1]==0 ||(term[a1][0] != -1 && term[a1][1] != -1)))
    24ae:	2e 17       	cp	r18, r30
    24b0:	3f 07       	cpc	r19, r31
    24b2:	61 f5       	brne	.+88     	; 0x250c <newSort+0xd0>
    24b4:	de 01       	movw	r26, r28
    24b6:	aa 0f       	add	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	ac 59       	subi	r26, 0x9C	; 156
    24bc:	bd 4f       	sbci	r27, 0xFD	; 253
    24be:	0d 90       	ld	r0, X+
    24c0:	bc 91       	ld	r27, X
    24c2:	a0 2d       	mov	r26, r0
    24c4:	ab 2b       	or	r26, r27
    24c6:	c9 f0       	breq	.+50     	; 0x24fa <newSort+0xbe>
    24c8:	de 01       	movw	r26, r28
    24ca:	aa 0f       	add	r26, r26
    24cc:	bb 1f       	adc	r27, r27
    24ce:	aa 0f       	add	r26, r26
    24d0:	bb 1f       	adc	r27, r27
    24d2:	a5 57       	subi	r26, 0x75	; 117
    24d4:	bd 4f       	sbci	r27, 0xFD	; 253
    24d6:	0d 90       	ld	r0, X+
    24d8:	bc 91       	ld	r27, X
    24da:	a0 2d       	mov	r26, r0
    24dc:	11 96       	adiw	r26, 0x01	; 1
    24de:	b1 f0       	breq	.+44     	; 0x250c <newSort+0xd0>
    24e0:	de 01       	movw	r26, r28
    24e2:	aa 0f       	add	r26, r26
    24e4:	bb 1f       	adc	r27, r27
    24e6:	aa 0f       	add	r26, r26
    24e8:	bb 1f       	adc	r27, r27
    24ea:	a5 57       	subi	r26, 0x75	; 117
    24ec:	bd 4f       	sbci	r27, 0xFD	; 253
    24ee:	12 96       	adiw	r26, 0x02	; 2
    24f0:	0d 90       	ld	r0, X+
    24f2:	bc 91       	ld	r27, X
    24f4:	a0 2d       	mov	r26, r0
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	49 f0       	breq	.+18     	; 0x250c <newSort+0xd0>
		{
			if(a1== 0 || a1==3)
    24fa:	20 97       	sbiw	r28, 0x00	; 0
    24fc:	19 f0       	breq	.+6      	; 0x2504 <newSort+0xc8>
    24fe:	23 97       	sbiw	r28, 0x03	; 3
    2500:	09 f0       	breq	.+2      	; 0x2504 <newSort+0xc8>
    2502:	28 c1       	rjmp	.+592    	; 0x2754 <newSort+0x318>
				sortDrop(1,t1);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	5a df       	rcall	.-332    	; 0x23be <sortDrop>
    250a:	24 c1       	rjmp	.+584    	; 0x2754 <newSort+0x318>
		}
		else if (arm[0] != -1 && (term[a1][0] == -1 || term[a1][1] == -1))
    250c:	2f 3f       	cpi	r18, 0xFF	; 255
    250e:	af ef       	ldi	r26, 0xFF	; 255
    2510:	3a 07       	cpc	r19, r26
    2512:	c1 f1       	breq	.+112    	; 0x2584 <newSort+0x148>
    2514:	de 01       	movw	r26, r28
    2516:	aa 0f       	add	r26, r26
    2518:	bb 1f       	adc	r27, r27
    251a:	aa 0f       	add	r26, r26
    251c:	bb 1f       	adc	r27, r27
    251e:	a5 57       	subi	r26, 0x75	; 117
    2520:	bd 4f       	sbci	r27, 0xFD	; 253
    2522:	0d 90       	ld	r0, X+
    2524:	bc 91       	ld	r27, X
    2526:	a0 2d       	mov	r26, r0
    2528:	11 96       	adiw	r26, 0x01	; 1
    252a:	51 f0       	breq	.+20     	; 0x2540 <newSort+0x104>
    252c:	cc 0f       	add	r28, r28
    252e:	dd 1f       	adc	r29, r29
    2530:	cc 0f       	add	r28, r28
    2532:	dd 1f       	adc	r29, r29
    2534:	c5 57       	subi	r28, 0x75	; 117
    2536:	dd 4f       	sbci	r29, 0xFD	; 253
    2538:	aa 81       	ldd	r26, Y+2	; 0x02
    253a:	bb 81       	ldd	r27, Y+3	; 0x03
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	11 f5       	brne	.+68     	; 0x2584 <newSort+0x148>
		{
			if (arm[1] == -1)
    2540:	31 96       	adiw	r30, 0x01	; 1
    2542:	09 f0       	breq	.+2      	; 0x2546 <newSort+0x10a>
    2544:	07 c1       	rjmp	.+526    	; 0x2754 <newSort+0x318>
			{
				if (sort[t1] == color[t1] || sort[t1] == color[t2])
    2546:	9b 01       	movw	r18, r22
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	f9 01       	movw	r30, r18
    254e:	ed 57       	subi	r30, 0x7D	; 125
    2550:	fd 4f       	sbci	r31, 0xFD	; 253
    2552:	40 81       	ld	r20, Z
    2554:	51 81       	ldd	r21, Z+1	; 0x01
    2556:	f9 01       	movw	r30, r18
    2558:	e3 56       	subi	r30, 0x63	; 99
    255a:	fd 4f       	sbci	r31, 0xFD	; 253
    255c:	20 81       	ld	r18, Z
    255e:	31 81       	ldd	r19, Z+1	; 0x01
    2560:	42 17       	cp	r20, r18
    2562:	53 07       	cpc	r21, r19
    2564:	59 f0       	breq	.+22     	; 0x257c <newSort+0x140>
    2566:	fc 01       	movw	r30, r24
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	e3 56       	subi	r30, 0x63	; 99
    256e:	fd 4f       	sbci	r31, 0xFD	; 253
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	48 17       	cp	r20, r24
    2576:	59 07       	cpc	r21, r25
    2578:	09 f0       	breq	.+2      	; 0x257c <newSort+0x140>
    257a:	ec c0       	rjmp	.+472    	; 0x2754 <newSort+0x318>
					pickSort(1, t1);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	da de       	rcall	.-588    	; 0x2336 <pickSort>
    2582:	e8 c0       	rjmp	.+464    	; 0x2754 <newSort+0x318>
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
    2584:	ef 3f       	cpi	r30, 0xFF	; 255
    2586:	af ef       	ldi	r26, 0xFF	; 255
    2588:	fa 07       	cpc	r31, r26
    258a:	09 f4       	brne	.+2      	; 0x258e <newSort+0x152>
    258c:	51 c0       	rjmp	.+162    	; 0x2630 <newSort+0x1f4>
    258e:	da 01       	movw	r26, r20
    2590:	aa 0f       	add	r26, r26
    2592:	bb 1f       	adc	r27, r27
    2594:	aa 0f       	add	r26, r26
    2596:	bb 1f       	adc	r27, r27
    2598:	a5 57       	subi	r26, 0x75	; 117
    259a:	bd 4f       	sbci	r27, 0xFD	; 253
    259c:	0d 90       	ld	r0, X+
    259e:	bc 91       	ld	r27, X
    25a0:	a0 2d       	mov	r26, r0
    25a2:	11 96       	adiw	r26, 0x01	; 1
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <newSort+0x16c>
    25a6:	0a c1       	rjmp	.+532    	; 0x27bc <newSort+0x380>
    25a8:	da 01       	movw	r26, r20
    25aa:	aa 0f       	add	r26, r26
    25ac:	bb 1f       	adc	r27, r27
    25ae:	aa 0f       	add	r26, r26
    25b0:	bb 1f       	adc	r27, r27
    25b2:	a5 57       	subi	r26, 0x75	; 117
    25b4:	bd 4f       	sbci	r27, 0xFD	; 253
    25b6:	12 96       	adiw	r26, 0x02	; 2
    25b8:	0d 90       	ld	r0, X+
    25ba:	bc 91       	ld	r27, X
    25bc:	a0 2d       	mov	r26, r0
    25be:	11 96       	adiw	r26, 0x01	; 1
    25c0:	b9 f5       	brne	.+110    	; 0x2630 <newSort+0x1f4>
    25c2:	ea c0       	rjmp	.+468    	; 0x2798 <newSort+0x35c>
		{
			ct = a2;
			if (term[a2][0] == -1 || term[a2][1] == -1)
			{
				if (arm[0] == -1)
    25c4:	2f 3f       	cpi	r18, 0xFF	; 255
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	09 f0       	breq	.+2      	; 0x25cc <newSort+0x190>
    25ca:	c4 c0       	rjmp	.+392    	; 0x2754 <newSort+0x318>
				{
					if (sort[t1] == color[t1] && sort[t1] == color[t2])
    25cc:	9b 01       	movw	r18, r22
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	f9 01       	movw	r30, r18
    25d4:	ed 57       	subi	r30, 0x7D	; 125
    25d6:	fd 4f       	sbci	r31, 0xFD	; 253
    25d8:	40 81       	ld	r20, Z
    25da:	51 81       	ldd	r21, Z+1	; 0x01
    25dc:	f9 01       	movw	r30, r18
    25de:	e3 56       	subi	r30, 0x63	; 99
    25e0:	fd 4f       	sbci	r31, 0xFD	; 253
    25e2:	20 81       	ld	r18, Z
    25e4:	31 81       	ldd	r19, Z+1	; 0x01
    25e6:	42 17       	cp	r20, r18
    25e8:	53 07       	cpc	r21, r19
    25ea:	09 f0       	breq	.+2      	; 0x25ee <newSort+0x1b2>
    25ec:	b3 c0       	rjmp	.+358    	; 0x2754 <newSort+0x318>
    25ee:	fc 01       	movw	r30, r24
    25f0:	ee 0f       	add	r30, r30
    25f2:	ff 1f       	adc	r31, r31
    25f4:	e3 56       	subi	r30, 0x63	; 99
    25f6:	fd 4f       	sbci	r31, 0xFD	; 253
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	48 17       	cp	r20, r24
    25fe:	59 07       	cpc	r21, r25
    2600:	09 f0       	breq	.+2      	; 0x2604 <newSort+0x1c8>
    2602:	a8 c0       	rjmp	.+336    	; 0x2754 <newSort+0x318>
						pickSort(1, t1);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	96 de       	rcall	.-724    	; 0x2336 <pickSort>
    260a:	a4 c0       	rjmp	.+328    	; 0x2754 <newSort+0x318>
				}
			}
			else	if (sort[t1] == -1 && arm[0] != -1)
    260c:	fb 01       	movw	r30, r22
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	ed 57       	subi	r30, 0x7D	; 125
    2614:	fd 4f       	sbci	r31, 0xFD	; 253
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	01 96       	adiw	r24, 0x01	; 1
    261c:	09 f0       	breq	.+2      	; 0x2620 <newSort+0x1e4>
    261e:	9a c0       	rjmp	.+308    	; 0x2754 <newSort+0x318>
    2620:	2f 3f       	cpi	r18, 0xFF	; 255
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	09 f4       	brne	.+2      	; 0x2628 <newSort+0x1ec>
    2626:	96 c0       	rjmp	.+300    	; 0x2754 <newSort+0x318>
				sortDrop(1, t1);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	c8 de       	rcall	.-624    	; 0x23be <sortDrop>
    262e:	92 c0       	rjmp	.+292    	; 0x2754 <newSort+0x318>
		}
		else	if (arm[0] != -1 && (sort[t1] == -1 && arm[1] != -1))
    2630:	2f 3f       	cpi	r18, 0xFF	; 255
    2632:	1f ef       	ldi	r17, 0xFF	; 255
    2634:	31 07       	cpc	r19, r17
    2636:	a1 f0       	breq	.+40     	; 0x2660 <newSort+0x224>
    2638:	db 01       	movw	r26, r22
    263a:	aa 0f       	add	r26, r26
    263c:	bb 1f       	adc	r27, r27
    263e:	ad 57       	subi	r26, 0x7D	; 125
    2640:	bd 4f       	sbci	r27, 0xFD	; 253
    2642:	8d 91       	ld	r24, X+
    2644:	9c 91       	ld	r25, X
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	31 f4       	brne	.+12     	; 0x2656 <newSort+0x21a>
    264a:	31 96       	adiw	r30, 0x01	; 1
    264c:	21 f0       	breq	.+8      	; 0x2656 <newSort+0x21a>
			sortDrop(1, t1);
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	b5 de       	rcall	.-662    	; 0x23be <sortDrop>
    2654:	7f c0       	rjmp	.+254    	; 0x2754 <newSort+0x318>
		else if (arm[0] != -1)
			ct = arm[0];
    2656:	30 93 88 02 	sts	0x0288, r19
    265a:	20 93 87 02 	sts	0x0287, r18
    265e:	7a c0       	rjmp	.+244    	; 0x2754 <newSort+0x318>
		else ct = arm[1];
    2660:	f0 93 88 02 	sts	0x0288, r31
    2664:	e0 93 87 02 	sts	0x0287, r30
    2668:	75 c0       	rjmp	.+234    	; 0x2754 <newSort+0x318>
	}
	else
	{
		if ((sort[t1] == color[t1] || sort[t1] == color[t2]) && sort[t1] != -1)
    266a:	a8 01       	movw	r20, r16
    266c:	44 0f       	add	r20, r20
    266e:	55 1f       	adc	r21, r21
    2670:	fa 01       	movw	r30, r20
    2672:	ed 57       	subi	r30, 0x7D	; 125
    2674:	fd 4f       	sbci	r31, 0xFD	; 253
    2676:	20 81       	ld	r18, Z
    2678:	31 81       	ldd	r19, Z+1	; 0x01
    267a:	fa 01       	movw	r30, r20
    267c:	e3 56       	subi	r30, 0x63	; 99
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	40 81       	ld	r20, Z
    2682:	51 81       	ldd	r21, Z+1	; 0x01
    2684:	24 17       	cp	r18, r20
    2686:	35 07       	cpc	r19, r21
    2688:	51 f0       	breq	.+20     	; 0x269e <newSort+0x262>
    268a:	fc 01       	movw	r30, r24
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	e3 56       	subi	r30, 0x63	; 99
    2692:	fd 4f       	sbci	r31, 0xFD	; 253
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	26 17       	cp	r18, r22
    269a:	37 07       	cpc	r19, r23
    269c:	81 f4       	brne	.+32     	; 0x26be <newSort+0x282>
    269e:	2f 3f       	cpi	r18, 0xFF	; 255
    26a0:	af ef       	ldi	r26, 0xFF	; 255
    26a2:	3a 07       	cpc	r19, r26
    26a4:	31 f1       	breq	.+76     	; 0x26f2 <newSort+0x2b6>
			ct = indicator[sort[t1]];
    26a6:	f9 01       	movw	r30, r18
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	eb 55       	subi	r30, 0x5B	; 91
    26ae:	fd 4f       	sbci	r31, 0xFD	; 253
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	90 93 88 02 	sts	0x0288, r25
    26b8:	80 93 87 02 	sts	0x0287, r24
    26bc:	4b c0       	rjmp	.+150    	; 0x2754 <newSort+0x318>
		else if (sort[t1] != -1)
    26be:	2f 3f       	cpi	r18, 0xFF	; 255
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	b9 f0       	breq	.+46     	; 0x26f2 <newSort+0x2b6>
		{
			pickSort(0, t1);
    26c4:	b8 01       	movw	r22, r16
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	35 de       	rcall	.-918    	; 0x2336 <pickSort>
			ct = (t1 + 1) % 2 + 4;
    26cc:	0f 5f       	subi	r16, 0xFF	; 255
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	01 70       	andi	r16, 0x01	; 1
    26d2:	10 78       	andi	r17, 0x80	; 128
    26d4:	11 23       	and	r17, r17
    26d6:	34 f4       	brge	.+12     	; 0x26e4 <newSort+0x2a8>
    26d8:	01 50       	subi	r16, 0x01	; 1
    26da:	11 09       	sbc	r17, r1
    26dc:	0e 6f       	ori	r16, 0xFE	; 254
    26de:	1f 6f       	ori	r17, 0xFF	; 255
    26e0:	0f 5f       	subi	r16, 0xFF	; 255
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	0c 5f       	subi	r16, 0xFC	; 252
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	10 93 88 02 	sts	0x0288, r17
    26ec:	00 93 87 02 	sts	0x0287, r16
    26f0:	31 c0       	rjmp	.+98     	; 0x2754 <newSort+0x318>
		}
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
    26f2:	f8 01       	movw	r30, r16
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	ec 59       	subi	r30, 0x9C	; 156
    26fa:	fd 4f       	sbci	r31, 0xFD	; 253
    26fc:	20 81       	ld	r18, Z
    26fe:	31 81       	ldd	r19, Z+1	; 0x01
    2700:	21 30       	cpi	r18, 0x01	; 1
    2702:	31 05       	cpc	r19, r1
    2704:	19 f5       	brne	.+70     	; 0x274c <newSort+0x310>
    2706:	f8 01       	movw	r30, r16
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	e5 57       	subi	r30, 0x75	; 117
    2712:	fd 4f       	sbci	r31, 0xFD	; 253
    2714:	20 81       	ld	r18, Z
    2716:	31 81       	ldd	r19, Z+1	; 0x01
    2718:	42 17       	cp	r20, r18
    271a:	53 07       	cpc	r21, r19
    271c:	19 f0       	breq	.+6      	; 0x2724 <newSort+0x2e8>
    271e:	2f 3f       	cpi	r18, 0xFF	; 255
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	a1 f4       	brne	.+40     	; 0x274c <newSort+0x310>
    2724:	f8 01       	movw	r30, r16
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	e5 57       	subi	r30, 0x75	; 117
    2730:	fd 4f       	sbci	r31, 0xFD	; 253
    2732:	22 81       	ldd	r18, Z+2	; 0x02
    2734:	33 81       	ldd	r19, Z+3	; 0x03
    2736:	42 17       	cp	r20, r18
    2738:	53 07       	cpc	r21, r19
    273a:	19 f0       	breq	.+6      	; 0x2742 <newSort+0x306>
    273c:	2f 3f       	cpi	r18, 0xFF	; 255
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	29 f4       	brne	.+10     	; 0x274c <newSort+0x310>
			ct = t2;
    2742:	90 93 88 02 	sts	0x0288, r25
    2746:	80 93 87 02 	sts	0x0287, r24
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <newSort+0x318>
		else ct = t1;
    274c:	10 93 88 02 	sts	0x0288, r17
    2750:	00 93 87 02 	sts	0x0287, r16
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2754:	80 91 87 02 	lds	r24, 0x0287
    2758:	90 91 88 02 	lds	r25, 0x0288
    275c:	02 96       	adiw	r24, 0x02	; 2
    275e:	83 70       	andi	r24, 0x03	; 3
    2760:	90 78       	andi	r25, 0x80	; 128
    2762:	99 23       	and	r25, r25
    2764:	24 f4       	brge	.+8      	; 0x276e <newSort+0x332>
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	8c 6f       	ori	r24, 0xFC	; 252
    276a:	9f 6f       	ori	r25, 0xFF	; 255
    276c:	01 96       	adiw	r24, 0x01	; 1
		else if (visited[t1] == 1 && (term[t1][0] == color[t1] || term[t1][0] == -1) && (term[t1][1] == color[t1] || term[t1][1] == -1))
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
    276e:	90 93 ae 02 	sts	0x02AE, r25
    2772:	80 93 ad 02 	sts	0x02AD, r24
    2776:	2e c0       	rjmp	.+92     	; 0x27d4 <newSort+0x398>
	if (arm[0] != -1)
		a1 = indicator[arm[0]];
	if (arm[1] != -1)
		a2 = indicator[arm[1]];

	t1 = (ct + 1) % 2;
    2778:	80 91 87 02 	lds	r24, 0x0287
    277c:	90 91 88 02 	lds	r25, 0x0288
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	62 e0       	ldi	r22, 0x02	; 2
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	df d3       	rcall	.+1982   	; 0x2f46 <__divmodhi4>
    2788:	8c 01       	movw	r16, r24
    278a:	bc 01       	movw	r22, r24
	t2 = t1 + 2;
    278c:	02 96       	adiw	r24, 0x02	; 2
	if (arm[0] != -1 || arm[1] != -1)
    278e:	2f 3f       	cpi	r18, 0xFF	; 255
    2790:	af ef       	ldi	r26, 0xFF	; 255
    2792:	3a 07       	cpc	r19, r26
    2794:	c1 f4       	brne	.+48     	; 0x27c6 <newSort+0x38a>
    2796:	69 cf       	rjmp	.-302    	; 0x266a <newSort+0x22e>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    2798:	50 93 88 02 	sts	0x0288, r21
    279c:	40 93 87 02 	sts	0x0287, r20
			if (term[a2][0] == -1 || term[a2][1] == -1)
    27a0:	fa 01       	movw	r30, r20
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	e5 57       	subi	r30, 0x75	; 117
    27ac:	fd 4f       	sbci	r31, 0xFD	; 253
    27ae:	42 81       	ldd	r20, Z+2	; 0x02
    27b0:	53 81       	ldd	r21, Z+3	; 0x03
    27b2:	4f 3f       	cpi	r20, 0xFF	; 255
    27b4:	5f 4f       	sbci	r21, 0xFF	; 255
    27b6:	09 f0       	breq	.+2      	; 0x27ba <newSort+0x37e>
    27b8:	29 cf       	rjmp	.-430    	; 0x260c <newSort+0x1d0>
    27ba:	04 cf       	rjmp	.-504    	; 0x25c4 <newSort+0x188>
					pickSort(1, t1);
			}
		}
		else if (arm[1] != -1 && (term[a2][0] == -1 || term[a2][1] == -1))
		{
			ct = a2;
    27bc:	50 93 88 02 	sts	0x0288, r21
    27c0:	40 93 87 02 	sts	0x0287, r20
    27c4:	ff ce       	rjmp	.-514    	; 0x25c4 <newSort+0x188>

	t1 = (ct + 1) % 2;
	t2 = t1 + 2;
	if (arm[0] != -1 || arm[1] != -1)
	{
		ct = a1;
    27c6:	d0 93 88 02 	sts	0x0288, r29
    27ca:	c0 93 87 02 	sts	0x0287, r28
	}
}

void newSort()
{
	int t1, t2, a1=-2, a2=-2;
    27ce:	4e ef       	ldi	r20, 0xFE	; 254
    27d0:	5f ef       	ldi	r21, 0xFF	; 255
    27d2:	9c ce       	rjmp	.-712    	; 0x250c <newSort+0xd0>
			ct = t2;
		else ct = t1;

	}
	adj = adjCount(ct);
}
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	08 95       	ret

000027de <sortCheck>:
void sortCheck()
{
    27de:	8f 92       	push	r8
    27e0:	9f 92       	push	r9
    27e2:	af 92       	push	r10
    27e4:	bf 92       	push	r11
    27e6:	cf 92       	push	r12
    27e8:	df 92       	push	r13
    27ea:	ef 92       	push	r14
    27ec:	ff 92       	push	r15
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
    27f6:	40 91 87 02 	lds	r20, 0x0287
    27fa:	50 91 88 02 	lds	r21, 0x0288
    27fe:	42 30       	cpi	r20, 0x02	; 2
    2800:	51 05       	cpc	r21, r1
    2802:	30 f4       	brcc	.+12     	; 0x2810 <sortCheck+0x32>
    2804:	80 91 00 02 	lds	r24, 0x0200
    2808:	90 91 01 02 	lds	r25, 0x0201
    280c:	02 97       	sbiw	r24, 0x02	; 2
    280e:	79 f0       	breq	.+30     	; 0x282e <sortCheck+0x50>
    2810:	ca 01       	movw	r24, r20
    2812:	02 97       	sbiw	r24, 0x02	; 2
    2814:	02 97       	sbiw	r24, 0x02	; 2
    2816:	80 f4       	brcc	.+32     	; 0x2838 <sortCheck+0x5a>
    2818:	80 91 00 02 	lds	r24, 0x0200
    281c:	90 91 01 02 	lds	r25, 0x0201
    2820:	89 2b       	or	r24, r25
    2822:	79 f0       	breq	.+30     	; 0x2842 <sortCheck+0x64>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2824:	01 e0       	ldi	r16, 0x01	; 1
    2826:	10 e0       	ldi	r17, 0x00	; 0
    2828:	c0 e0       	ldi	r28, 0x00	; 0
    282a:	d0 e0       	ldi	r29, 0x00	; 0
    282c:	0e c0       	rjmp	.+28     	; 0x284a <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    282e:	00 e0       	ldi	r16, 0x00	; 0
    2830:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2832:	c1 e0       	ldi	r28, 0x01	; 1
    2834:	d0 e0       	ldi	r29, 0x00	; 0
    2836:	09 c0       	rjmp	.+18     	; 0x284a <sortCheck+0x6c>
	adj = adjCount(ct);
}
void sortCheck()
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
    2838:	01 e0       	ldi	r16, 0x01	; 1
    283a:	10 e0       	ldi	r17, 0x00	; 0
    283c:	c0 e0       	ldi	r28, 0x00	; 0
    283e:	d0 e0       	ldi	r29, 0x00	; 0
    2840:	04 c0       	rjmp	.+8      	; 0x284a <sortCheck+0x6c>
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
		arm1 = 0;
    2842:	00 e0       	ldi	r16, 0x00	; 0
    2844:	10 e0       	ldi	r17, 0x00	; 0
{
	int a1, a2;
	int arm0 = 0, arm1 = 1;
	if (((ct == 0 || ct == 1) && dir == 2) || ((ct == 2 || ct == 3) && dir == 0))
	{
		arm0 = 1;
    2846:	c1 e0       	ldi	r28, 0x01	; 1
    2848:	d0 e0       	ldi	r29, 0x00	; 0
		arm1 = 0;
	}
	if ((sort[ct % 2] == color[ct] || sort[ct % 2] == color[adj]))
    284a:	9a 01       	movw	r18, r20
    284c:	21 70       	andi	r18, 0x01	; 1
    284e:	30 78       	andi	r19, 0x80	; 128
    2850:	33 23       	and	r19, r19
    2852:	34 f4       	brge	.+12     	; 0x2860 <sortCheck+0x82>
    2854:	21 50       	subi	r18, 0x01	; 1
    2856:	31 09       	sbc	r19, r1
    2858:	2e 6f       	ori	r18, 0xFE	; 254
    285a:	3f 6f       	ori	r19, 0xFF	; 255
    285c:	2f 5f       	subi	r18, 0xFF	; 255
    285e:	3f 4f       	sbci	r19, 0xFF	; 255
    2860:	b2 2e       	mov	r11, r18
    2862:	a3 2e       	mov	r10, r19
    2864:	f9 01       	movw	r30, r18
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	ed 57       	subi	r30, 0x7D	; 125
    286c:	fd 4f       	sbci	r31, 0xFD	; 253
    286e:	20 81       	ld	r18, Z
    2870:	31 81       	ldd	r19, Z+1	; 0x01
    2872:	fa 01       	movw	r30, r20
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	e3 56       	subi	r30, 0x63	; 99
    287a:	fd 4f       	sbci	r31, 0xFD	; 253
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	28 17       	cp	r18, r24
    2882:	39 07       	cpc	r19, r25
    2884:	79 f0       	breq	.+30     	; 0x28a4 <sortCheck+0xc6>
    2886:	80 91 ad 02 	lds	r24, 0x02AD
    288a:	90 91 ae 02 	lds	r25, 0x02AE
    288e:	fc 01       	movw	r30, r24
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	e3 56       	subi	r30, 0x63	; 99
    2896:	fd 4f       	sbci	r31, 0xFD	; 253
    2898:	40 81       	ld	r20, Z
    289a:	51 81       	ldd	r21, Z+1	; 0x01
    289c:	24 17       	cp	r18, r20
    289e:	35 07       	cpc	r19, r21
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <sortCheck+0xc6>
    28a2:	a6 c0       	rjmp	.+332    	; 0x29f0 <sortCheck+0x212>
	{
		if (armCount>0)
    28a4:	80 91 06 02 	lds	r24, 0x0206
    28a8:	90 91 07 02 	lds	r25, 0x0207
    28ac:	18 16       	cp	r1, r24
    28ae:	19 06       	cpc	r1, r25
    28b0:	0c f0       	brlt	.+2      	; 0x28b4 <sortCheck+0xd6>
    28b2:	95 c0       	rjmp	.+298    	; 0x29de <sortCheck+0x200>
		{
			ct = indicator[sort[ct % 2]];
    28b4:	f9 01       	movw	r30, r18
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	eb 55       	subi	r30, 0x5B	; 91
    28bc:	fd 4f       	sbci	r31, 0xFD	; 253
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	70 93 88 02 	sts	0x0288, r23
    28c6:	60 93 87 02 	sts	0x0287, r22
			if (arm[arm0] == -1)
    28ca:	fe 01       	movw	r30, r28
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	ef 54       	subi	r30, 0x4F	; 79
    28d2:	fd 4f       	sbci	r31, 0xFD	; 253
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	69 f4       	brne	.+26     	; 0x28f6 <sortCheck+0x118>
				pickSort(arm0, ct % 2);
    28dc:	61 70       	andi	r22, 0x01	; 1
    28de:	70 78       	andi	r23, 0x80	; 128
    28e0:	77 23       	and	r23, r23
    28e2:	34 f4       	brge	.+12     	; 0x28f0 <sortCheck+0x112>
    28e4:	61 50       	subi	r22, 0x01	; 1
    28e6:	71 09       	sbc	r23, r1
    28e8:	6e 6f       	ori	r22, 0xFE	; 254
    28ea:	7f 6f       	ori	r23, 0xFF	; 255
    28ec:	6f 5f       	subi	r22, 0xFF	; 255
    28ee:	7f 4f       	sbci	r23, 0xFF	; 255
    28f0:	ce 01       	movw	r24, r28
    28f2:	21 dd       	rcall	.-1470   	; 0x2336 <pickSort>
    28f4:	15 c0       	rjmp	.+42     	; 0x2920 <sortCheck+0x142>
			else if (arm[arm1] == -1)
    28f6:	f8 01       	movw	r30, r16
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	ef 54       	subi	r30, 0x4F	; 79
    28fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	61 f4       	brne	.+24     	; 0x2920 <sortCheck+0x142>
				pickSort(arm1, ct % 2);
    2908:	61 70       	andi	r22, 0x01	; 1
    290a:	70 78       	andi	r23, 0x80	; 128
    290c:	77 23       	and	r23, r23
    290e:	34 f4       	brge	.+12     	; 0x291c <sortCheck+0x13e>
    2910:	61 50       	subi	r22, 0x01	; 1
    2912:	71 09       	sbc	r23, r1
    2914:	6e 6f       	ori	r22, 0xFE	; 254
    2916:	7f 6f       	ori	r23, 0xFF	; 255
    2918:	6f 5f       	subi	r22, 0xFF	; 255
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	c8 01       	movw	r24, r16
    291e:	0b dd       	rcall	.-1514   	; 0x2336 <pickSort>
			if (armCount != 1 && term[ct][0] != -1 && term[ct][1] != -1 && sort[ct % 2] == -1)
    2920:	80 91 06 02 	lds	r24, 0x0206
    2924:	90 91 07 02 	lds	r25, 0x0207
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	09 f4       	brne	.+2      	; 0x292e <sortCheck+0x150>
    292c:	69 c1       	rjmp	.+722    	; 0x2c00 <sortCheck+0x422>
    292e:	80 91 87 02 	lds	r24, 0x0287
    2932:	90 91 88 02 	lds	r25, 0x0288
    2936:	fc 01       	movw	r30, r24
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	e5 57       	subi	r30, 0x75	; 117
    2942:	fd 4f       	sbci	r31, 0xFD	; 253
    2944:	20 81       	ld	r18, Z
    2946:	31 81       	ldd	r19, Z+1	; 0x01
    2948:	2f 3f       	cpi	r18, 0xFF	; 255
    294a:	3f 4f       	sbci	r19, 0xFF	; 255
    294c:	09 f4       	brne	.+2      	; 0x2950 <sortCheck+0x172>
    294e:	58 c1       	rjmp	.+688    	; 0x2c00 <sortCheck+0x422>
    2950:	fc 01       	movw	r30, r24
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	e5 57       	subi	r30, 0x75	; 117
    295c:	fd 4f       	sbci	r31, 0xFD	; 253
    295e:	22 81       	ldd	r18, Z+2	; 0x02
    2960:	33 81       	ldd	r19, Z+3	; 0x03
    2962:	2f 3f       	cpi	r18, 0xFF	; 255
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	09 f4       	brne	.+2      	; 0x296a <sortCheck+0x18c>
    2968:	4b c1       	rjmp	.+662    	; 0x2c00 <sortCheck+0x422>
    296a:	9c 01       	movw	r18, r24
    296c:	21 70       	andi	r18, 0x01	; 1
    296e:	30 78       	andi	r19, 0x80	; 128
    2970:	33 23       	and	r19, r19
    2972:	34 f4       	brge	.+12     	; 0x2980 <sortCheck+0x1a2>
    2974:	21 50       	subi	r18, 0x01	; 1
    2976:	31 09       	sbc	r19, r1
    2978:	2e 6f       	ori	r18, 0xFE	; 254
    297a:	3f 6f       	ori	r19, 0xFF	; 255
    297c:	2f 5f       	subi	r18, 0xFF	; 255
    297e:	3f 4f       	sbci	r19, 0xFF	; 255
    2980:	62 2f       	mov	r22, r18
    2982:	73 2f       	mov	r23, r19
    2984:	f9 01       	movw	r30, r18
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	ed 57       	subi	r30, 0x7D	; 125
    298c:	fd 4f       	sbci	r31, 0xFD	; 253
    298e:	20 81       	ld	r18, Z
    2990:	31 81       	ldd	r19, Z+1	; 0x01
    2992:	2f 3f       	cpi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	09 f0       	breq	.+2      	; 0x299a <sortCheck+0x1bc>
    2998:	33 c1       	rjmp	.+614    	; 0x2c00 <sortCheck+0x422>
			{
				if (arm[arm0] == color[ct])
    299a:	fc 01       	movw	r30, r24
    299c:	ee 0f       	add	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	e3 56       	subi	r30, 0x63	; 99
    29a2:	fd 4f       	sbci	r31, 0xFD	; 253
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	fe 01       	movw	r30, r28
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	ef 54       	subi	r30, 0x4F	; 79
    29b0:	fd 4f       	sbci	r31, 0xFD	; 253
    29b2:	20 81       	ld	r18, Z
    29b4:	31 81       	ldd	r19, Z+1	; 0x01
    29b6:	28 17       	cp	r18, r24
    29b8:	39 07       	cpc	r19, r25
    29ba:	19 f4       	brne	.+6      	; 0x29c2 <sortCheck+0x1e4>
					sortDrop(arm1, ct % 2);
    29bc:	c8 01       	movw	r24, r16
    29be:	ff dc       	rcall	.-1538   	; 0x23be <sortDrop>
    29c0:	1f c1       	rjmp	.+574    	; 0x2c00 <sortCheck+0x422>
				else if (arm[arm1] == color[ct])
    29c2:	f8 01       	movw	r30, r16
    29c4:	ee 0f       	add	r30, r30
    29c6:	ff 1f       	adc	r31, r31
    29c8:	ef 54       	subi	r30, 0x4F	; 79
    29ca:	fd 4f       	sbci	r31, 0xFD	; 253
    29cc:	20 81       	ld	r18, Z
    29ce:	31 81       	ldd	r19, Z+1	; 0x01
    29d0:	82 17       	cp	r24, r18
    29d2:	93 07       	cpc	r25, r19
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <sortCheck+0x1fa>
    29d6:	14 c1       	rjmp	.+552    	; 0x2c00 <sortCheck+0x422>
					sortDrop(arm0, ct % 2);
    29d8:	ce 01       	movw	r24, r28
    29da:	f1 dc       	rcall	.-1566   	; 0x23be <sortDrop>
    29dc:	11 c1       	rjmp	.+546    	; 0x2c00 <sortCheck+0x422>
			}
		}
		else ct = adj;
    29de:	80 91 ad 02 	lds	r24, 0x02AD
    29e2:	90 91 ae 02 	lds	r25, 0x02AE
    29e6:	90 93 88 02 	sts	0x0288, r25
    29ea:	80 93 87 02 	sts	0x0287, r24
    29ee:	08 c1       	rjmp	.+528    	; 0x2c00 <sortCheck+0x422>
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
    29f0:	fe 01       	movw	r30, r28
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	ef 54       	subi	r30, 0x4F	; 79
    29f8:	fd 4f       	sbci	r31, 0xFD	; 253
    29fa:	01 90       	ld	r0, Z+
    29fc:	f0 81       	ld	r31, Z
    29fe:	e0 2d       	mov	r30, r0
    2a00:	4e 17       	cp	r20, r30
    2a02:	5f 07       	cpc	r21, r31
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <sortCheck+0x22a>
    2a06:	8d c0       	rjmp	.+282    	; 0x2b22 <sortCheck+0x344>
    2a08:	d8 01       	movw	r26, r16
    2a0a:	aa 0f       	add	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	af 54       	subi	r26, 0x4F	; 79
    2a10:	bd 4f       	sbci	r27, 0xFD	; 253
    2a12:	8d 90       	ld	r8, X+
    2a14:	9c 90       	ld	r9, X
    2a16:	48 15       	cp	r20, r8
    2a18:	59 05       	cpc	r21, r9
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <sortCheck+0x240>
    2a1c:	82 c0       	rjmp	.+260    	; 0x2b22 <sortCheck+0x344>
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2a1e:	e0 90 06 02 	lds	r14, 0x0206
    2a22:	f0 90 07 02 	lds	r15, 0x0207
    2a26:	e1 14       	cp	r14, r1
    2a28:	f1 04       	cpc	r15, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <sortCheck+0x250>
    2a2c:	4c c0       	rjmp	.+152    	; 0x2ac6 <sortCheck+0x2e8>
    2a2e:	b1 e0       	ldi	r27, 0x01	; 1
    2a30:	eb 16       	cp	r14, r27
    2a32:	f1 04       	cpc	r15, r1
    2a34:	29 f4       	brne	.+10     	; 0x2a40 <sortCheck+0x262>
    2a36:	2f 3f       	cpi	r18, 0xFF	; 255
    2a38:	6f ef       	ldi	r22, 0xFF	; 255
    2a3a:	36 07       	cpc	r19, r22
    2a3c:	b1 f5       	brne	.+108    	; 0x2aaa <sortCheck+0x2cc>
    2a3e:	09 c0       	rjmp	.+18     	; 0x2a52 <sortCheck+0x274>
    2a40:	67 01       	movw	r12, r14
    2a42:	71 e0       	ldi	r23, 0x01	; 1
    2a44:	c7 1a       	sub	r12, r23
    2a46:	d1 08       	sbc	r13, r1
    2a48:	a2 e0       	ldi	r26, 0x02	; 2
    2a4a:	ca 16       	cp	r12, r26
    2a4c:	d1 04       	cpc	r13, r1
    2a4e:	08 f0       	brcs	.+2      	; 0x2a52 <sortCheck+0x274>
    2a50:	63 c0       	rjmp	.+198    	; 0x2b18 <sortCheck+0x33a>
    2a52:	6c 01       	movw	r12, r24
    2a54:	cc 0c       	add	r12, r12
    2a56:	dd 1c       	adc	r13, r13
    2a58:	cc 0c       	add	r12, r12
    2a5a:	dd 1c       	adc	r13, r13
    2a5c:	b6 01       	movw	r22, r12
    2a5e:	65 57       	subi	r22, 0x75	; 117
    2a60:	7d 4f       	sbci	r23, 0xFD	; 253
    2a62:	db 01       	movw	r26, r22
    2a64:	cd 90       	ld	r12, X+
    2a66:	dc 90       	ld	r13, X
    2a68:	4c 15       	cp	r20, r12
    2a6a:	5d 05       	cpc	r21, r13
    2a6c:	21 f0       	breq	.+8      	; 0x2a76 <sortCheck+0x298>
    2a6e:	cd 20       	and	r12, r13
    2a70:	c0 94       	com	r12
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <sortCheck+0x298>
    2a74:	51 c0       	rjmp	.+162    	; 0x2b18 <sortCheck+0x33a>
    2a76:	6c 01       	movw	r12, r24
    2a78:	cc 0c       	add	r12, r12
    2a7a:	dd 1c       	adc	r13, r13
    2a7c:	cc 0c       	add	r12, r12
    2a7e:	dd 1c       	adc	r13, r13
    2a80:	b6 01       	movw	r22, r12
    2a82:	65 57       	subi	r22, 0x75	; 117
    2a84:	7d 4f       	sbci	r23, 0xFD	; 253
    2a86:	db 01       	movw	r26, r22
    2a88:	12 96       	adiw	r26, 0x02	; 2
    2a8a:	cd 90       	ld	r12, X+
    2a8c:	dc 90       	ld	r13, X
    2a8e:	13 97       	sbiw	r26, 0x03	; 3
    2a90:	4c 15       	cp	r20, r12
    2a92:	5d 05       	cpc	r21, r13
    2a94:	21 f0       	breq	.+8      	; 0x2a9e <sortCheck+0x2c0>
    2a96:	cd 20       	and	r12, r13
    2a98:	c0 94       	com	r12
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <sortCheck+0x2c0>
    2a9c:	3d c0       	rjmp	.+122    	; 0x2b18 <sortCheck+0x33a>
		{
			if (armCount>0)
    2a9e:	1e 14       	cp	r1, r14
    2aa0:	1f 04       	cpc	r1, r15
    2aa2:	8c f4       	brge	.+34     	; 0x2ac6 <sortCheck+0x2e8>
			{
				if (sort[ct % 2] != -1)
    2aa4:	2f 3f       	cpi	r18, 0xFF	; 255
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	71 f0       	breq	.+28     	; 0x2ac6 <sortCheck+0x2e8>
					if (arm[arm0] == -1)
    2aaa:	31 96       	adiw	r30, 0x01	; 1
    2aac:	29 f4       	brne	.+10     	; 0x2ab8 <sortCheck+0x2da>
						pickSort(arm0, ct % 2);
    2aae:	6b 2d       	mov	r22, r11
    2ab0:	7a 2d       	mov	r23, r10
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	40 dc       	rcall	.-1920   	; 0x2336 <pickSort>
    2ab6:	07 c0       	rjmp	.+14     	; 0x2ac6 <sortCheck+0x2e8>
					else if (arm[arm1] == -1)
    2ab8:	89 20       	and	r8, r9
    2aba:	80 94       	com	r8
    2abc:	21 f4       	brne	.+8      	; 0x2ac6 <sortCheck+0x2e8>
						pickSort(arm1, ct % 2);
    2abe:	6b 2d       	mov	r22, r11
    2ac0:	7a 2d       	mov	r23, r10
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	38 dc       	rcall	.-1936   	; 0x2336 <pickSort>
			}
			traverseToSort(ct % 2 + 4, (ct + 1) % 2 + 4);
    2ac6:	80 91 87 02 	lds	r24, 0x0287
    2aca:	90 91 88 02 	lds	r25, 0x0288
    2ace:	bc 01       	movw	r22, r24
    2ad0:	6f 5f       	subi	r22, 0xFF	; 255
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	61 70       	andi	r22, 0x01	; 1
    2ad6:	70 78       	andi	r23, 0x80	; 128
    2ad8:	77 23       	and	r23, r23
    2ada:	34 f4       	brge	.+12     	; 0x2ae8 <sortCheck+0x30a>
    2adc:	61 50       	subi	r22, 0x01	; 1
    2ade:	71 09       	sbc	r23, r1
    2ae0:	6e 6f       	ori	r22, 0xFE	; 254
    2ae2:	7f 6f       	ori	r23, 0xFF	; 255
    2ae4:	6f 5f       	subi	r22, 0xFF	; 255
    2ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae8:	6c 5f       	subi	r22, 0xFC	; 252
    2aea:	7f 4f       	sbci	r23, 0xFF	; 255
    2aec:	81 70       	andi	r24, 0x01	; 1
    2aee:	90 78       	andi	r25, 0x80	; 128
    2af0:	99 23       	and	r25, r25
    2af2:	24 f4       	brge	.+8      	; 0x2afc <sortCheck+0x31e>
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	8e 6f       	ori	r24, 0xFE	; 254
    2af8:	9f 6f       	ori	r25, 0xFF	; 255
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	04 96       	adiw	r24, 0x04	; 4
    2afe:	0e 94 98 0a 	call	0x1530	; 0x1530 <traverseToSort>
			newSort();
    2b02:	9c dc       	rcall	.-1736   	; 0x243c <newSort>
			if (ct == 4 || ct == 5)
    2b04:	80 91 87 02 	lds	r24, 0x0287
    2b08:	90 91 88 02 	lds	r25, 0x0288
    2b0c:	04 97       	sbiw	r24, 0x04	; 4
    2b0e:	02 97       	sbiw	r24, 0x02	; 2
    2b10:	08 f0       	brcs	.+2      	; 0x2b14 <sortCheck+0x336>
    2b12:	87 c0       	rjmp	.+270    	; 0x2c22 <sortCheck+0x444>
				newSort();
    2b14:	93 dc       	rcall	.-1754   	; 0x243c <newSort>
    2b16:	85 c0       	rjmp	.+266    	; 0x2c22 <sortCheck+0x444>
			return;
		}
		else ct = adj;
    2b18:	90 93 88 02 	sts	0x0288, r25
    2b1c:	80 93 87 02 	sts	0x0287, r24
		}
		else ct = adj;
	}
	else if (arm[arm0] != color[adj] && arm[arm1] != color[adj])
	{
		if (armCount == 0 || (armCount == 1 && sort[ct % 2] != -1) || ((armCount == 2 || armCount == 1) && (term[adj][0] == color[adj] || term[adj][0] == -1) && (term[adj][1] == color[adj] || term[adj][1] == -1)))
    2b20:	6f c0       	rjmp	.+222    	; 0x2c00 <sortCheck+0x422>
		}
		else ct = adj;
	}
	else
	{
		if (armCount == 0 && ((visited[adj] == 1 && (term[adj][0] != -1 && term[adj][1] != -1)) || visited[adj] == 0) && sort[ct % 2] == -1)
    2b22:	a0 91 06 02 	lds	r26, 0x0206
    2b26:	b0 91 07 02 	lds	r27, 0x0207
    2b2a:	10 97       	sbiw	r26, 0x00	; 0
    2b2c:	c1 f5       	brne	.+112    	; 0x2b9e <sortCheck+0x3c0>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	aa 0f       	add	r26, r26
    2b32:	bb 1f       	adc	r27, r27
    2b34:	ac 59       	subi	r26, 0x9C	; 156
    2b36:	bd 4f       	sbci	r27, 0xFD	; 253
    2b38:	0d 90       	ld	r0, X+
    2b3a:	bc 91       	ld	r27, X
    2b3c:	a0 2d       	mov	r26, r0
    2b3e:	a1 30       	cpi	r26, 0x01	; 1
    2b40:	b1 05       	cpc	r27, r1
    2b42:	d9 f4       	brne	.+54     	; 0x2b7a <sortCheck+0x39c>
    2b44:	dc 01       	movw	r26, r24
    2b46:	aa 0f       	add	r26, r26
    2b48:	bb 1f       	adc	r27, r27
    2b4a:	aa 0f       	add	r26, r26
    2b4c:	bb 1f       	adc	r27, r27
    2b4e:	a5 57       	subi	r26, 0x75	; 117
    2b50:	bd 4f       	sbci	r27, 0xFD	; 253
    2b52:	0d 90       	ld	r0, X+
    2b54:	bc 91       	ld	r27, X
    2b56:	a0 2d       	mov	r26, r0
    2b58:	11 96       	adiw	r26, 0x01	; 1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <sortCheck+0x380>
    2b5c:	49 c0       	rjmp	.+146    	; 0x2bf0 <sortCheck+0x412>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	aa 0f       	add	r26, r26
    2b62:	bb 1f       	adc	r27, r27
    2b64:	aa 0f       	add	r26, r26
    2b66:	bb 1f       	adc	r27, r27
    2b68:	a5 57       	subi	r26, 0x75	; 117
    2b6a:	bd 4f       	sbci	r27, 0xFD	; 253
    2b6c:	12 96       	adiw	r26, 0x02	; 2
    2b6e:	8d 91       	ld	r24, X+
    2b70:	9c 91       	ld	r25, X
    2b72:	13 97       	sbiw	r26, 0x03	; 3
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	19 f4       	brne	.+6      	; 0x2b7e <sortCheck+0x3a0>
    2b78:	3b c0       	rjmp	.+118    	; 0x2bf0 <sortCheck+0x412>
    2b7a:	ab 2b       	or	r26, r27
    2b7c:	c9 f5       	brne	.+114    	; 0x2bf0 <sortCheck+0x412>
    2b7e:	2f 3f       	cpi	r18, 0xFF	; 255
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	b1 f5       	brne	.+108    	; 0x2bf0 <sortCheck+0x412>
			if (arm[arm0] == color[adj])
    2b84:	4e 17       	cp	r20, r30
    2b86:	5f 07       	cpc	r21, r31
    2b88:	29 f4       	brne	.+10     	; 0x2b94 <sortCheck+0x3b6>
				sortDrop(arm1, ct % 2);
    2b8a:	6b 2d       	mov	r22, r11
    2b8c:	7a 2d       	mov	r23, r10
    2b8e:	c8 01       	movw	r24, r16
    2b90:	16 dc       	rcall	.-2004   	; 0x23be <sortDrop>
    2b92:	2e c0       	rjmp	.+92     	; 0x2bf0 <sortCheck+0x412>
			else sortDrop(arm0, ct % 2);
    2b94:	6b 2d       	mov	r22, r11
    2b96:	7a 2d       	mov	r23, r10
    2b98:	ce 01       	movw	r24, r28
    2b9a:	11 dc       	rcall	.-2014   	; 0x23be <sortDrop>
    2b9c:	29 c0       	rjmp	.+82     	; 0x2bf0 <sortCheck+0x412>
		else if (armCount == 1 && (term[adj][0] == -1 || term[adj][1] == -1) && sort[ct % 2] != -1)
    2b9e:	11 97       	sbiw	r26, 0x01	; 1
    2ba0:	39 f5       	brne	.+78     	; 0x2bf0 <sortCheck+0x412>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	aa 0f       	add	r26, r26
    2ba6:	bb 1f       	adc	r27, r27
    2ba8:	aa 0f       	add	r26, r26
    2baa:	bb 1f       	adc	r27, r27
    2bac:	a5 57       	subi	r26, 0x75	; 117
    2bae:	bd 4f       	sbci	r27, 0xFD	; 253
    2bb0:	4d 91       	ld	r20, X+
    2bb2:	5c 91       	ld	r21, X
    2bb4:	4f 3f       	cpi	r20, 0xFF	; 255
    2bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb8:	69 f0       	breq	.+26     	; 0x2bd4 <sortCheck+0x3f6>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	aa 0f       	add	r26, r26
    2bbe:	bb 1f       	adc	r27, r27
    2bc0:	aa 0f       	add	r26, r26
    2bc2:	bb 1f       	adc	r27, r27
    2bc4:	a5 57       	subi	r26, 0x75	; 117
    2bc6:	bd 4f       	sbci	r27, 0xFD	; 253
    2bc8:	12 96       	adiw	r26, 0x02	; 2
    2bca:	8d 91       	ld	r24, X+
    2bcc:	9c 91       	ld	r25, X
    2bce:	13 97       	sbiw	r26, 0x03	; 3
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	71 f4       	brne	.+28     	; 0x2bf0 <sortCheck+0x412>
    2bd4:	2f 3f       	cpi	r18, 0xFF	; 255
    2bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd8:	59 f0       	breq	.+22     	; 0x2bf0 <sortCheck+0x412>
			if (arm[arm0] == -1)
    2bda:	31 96       	adiw	r30, 0x01	; 1
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <sortCheck+0x40a>
				pickSort(arm0, ct % 2);
    2bde:	6b 2d       	mov	r22, r11
    2be0:	7a 2d       	mov	r23, r10
    2be2:	ce 01       	movw	r24, r28
    2be4:	a8 db       	rcall	.-2224   	; 0x2336 <pickSort>
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <sortCheck+0x412>
			else	pickSort(arm1, ct % 2);
    2be8:	6b 2d       	mov	r22, r11
    2bea:	7a 2d       	mov	r23, r10
    2bec:	c8 01       	movw	r24, r16
    2bee:	a3 db       	rcall	.-2234   	; 0x2336 <pickSort>
			ct = adj;
    2bf0:	80 91 ad 02 	lds	r24, 0x02AD
    2bf4:	90 91 ae 02 	lds	r25, 0x02AE
    2bf8:	90 93 88 02 	sts	0x0288, r25
    2bfc:	80 93 87 02 	sts	0x0287, r24
	arm[0] = arm[1] = -1;
}

int adjCount(ct)
{
	return (ct + 2) % 4;
    2c00:	80 91 87 02 	lds	r24, 0x0287
    2c04:	90 91 88 02 	lds	r25, 0x0288
    2c08:	02 96       	adiw	r24, 0x02	; 2
    2c0a:	83 70       	andi	r24, 0x03	; 3
    2c0c:	90 78       	andi	r25, 0x80	; 128
    2c0e:	99 23       	and	r25, r25
    2c10:	24 f4       	brge	.+8      	; 0x2c1a <sortCheck+0x43c>
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	8c 6f       	ori	r24, 0xFC	; 252
    2c16:	9f 6f       	ori	r25, 0xFF	; 255
    2c18:	01 96       	adiw	r24, 0x01	; 1
			if (arm[arm0] == -1)
				pickSort(arm0, ct % 2);
			else	pickSort(arm1, ct % 2);
			ct = adj;
	}
	adj = adjCount(ct);
    2c1a:	90 93 ae 02 	sts	0x02AE, r25
    2c1e:	80 93 ad 02 	sts	0x02AD, r24
}
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	bf 90       	pop	r11
    2c34:	af 90       	pop	r10
    2c36:	9f 90       	pop	r9
    2c38:	8f 90       	pop	r8
    2c3a:	08 95       	ret

00002c3c <main>:
	angle += 180;
}
int main()
{
	int i=0;
	__init__();
    2c3c:	0e 94 48 08 	call	0x1090	; 0x1090 <__init__>
	ct = 2; adj = 0;
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	90 93 88 02 	sts	0x0288, r25
    2c48:	80 93 87 02 	sts	0x0287, r24
    2c4c:	10 92 ae 02 	sts	0x02AE, r1
    2c50:	10 92 ad 02 	sts	0x02AD, r1
	dir=2;
    2c54:	90 93 01 02 	sts	0x0201, r25
    2c58:	80 93 00 02 	sts	0x0200, r24
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
    2c5c:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
    2c60:	83 e2       	ldi	r24, 0x23	; 35
    2c62:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
    2c66:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    2c6a:	93 e5       	ldi	r25, 0x53	; 83
    2c6c:	90 93 8a 00 	sts	0x008A, r25
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
    2c70:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    2c74:	80 93 8c 00 	sts	0x008C, r24
	
	//stop();
	servo_1(0);
	servo_2(90);
	servo_3(0);
	forwardJaa();
    2c78:	0e 94 64 09 	call	0x12c8	; 0x12c8 <forwardJaa>
		drop(1);
		_delay_ms(1000);
		pick(0);
	}
	while(1);*/
	while (sorted<total)
    2c7c:	20 91 56 02 	lds	r18, 0x0256
    2c80:	30 91 57 02 	lds	r19, 0x0257
    2c84:	80 91 04 02 	lds	r24, 0x0204
    2c88:	90 91 05 02 	lds	r25, 0x0205
    2c8c:	28 17       	cp	r18, r24
    2c8e:	39 07       	cpc	r19, r25
    2c90:	ac f5       	brge	.+106    	; 0x2cfc <main+0xc0>
	{
		canDrop();
    2c92:	d8 d9       	rcall	.-3152   	; 0x2044 <canDrop>
		//buzzer_on();
		//_delay_ms(500);
		//buzzer_off();
		if (visitedCount == 3)
    2c94:	80 91 52 02 	lds	r24, 0x0252
    2c98:	90 91 53 02 	lds	r25, 0x0253
    2c9c:	03 97       	sbiw	r24, 0x03	; 3
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <main+0x68>
			predict();
    2ca0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <predict>
		if (sorted == total)
    2ca4:	20 91 56 02 	lds	r18, 0x0256
    2ca8:	30 91 57 02 	lds	r19, 0x0257
    2cac:	80 91 04 02 	lds	r24, 0x0204
    2cb0:	90 91 05 02 	lds	r25, 0x0205
    2cb4:	28 17       	cp	r18, r24
    2cb6:	39 07       	cpc	r19, r25
    2cb8:	09 f1       	breq	.+66     	; 0x2cfc <main+0xc0>
			break;
		pickup();
    2cba:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <pickup>
		traverseToSort(ct, ct % 2 + 4);
    2cbe:	80 91 87 02 	lds	r24, 0x0287
    2cc2:	90 91 88 02 	lds	r25, 0x0288
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	61 70       	andi	r22, 0x01	; 1
    2cca:	70 78       	andi	r23, 0x80	; 128
    2ccc:	77 23       	and	r23, r23
    2cce:	34 f4       	brge	.+12     	; 0x2cdc <main+0xa0>
    2cd0:	61 50       	subi	r22, 0x01	; 1
    2cd2:	71 09       	sbc	r23, r1
    2cd4:	6e 6f       	ori	r22, 0xFE	; 254
    2cd6:	7f 6f       	ori	r23, 0xFF	; 255
    2cd8:	6f 5f       	subi	r22, 0xFF	; 255
    2cda:	7f 4f       	sbci	r23, 0xFF	; 255
    2cdc:	6c 5f       	subi	r22, 0xFC	; 252
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	0e 94 98 0a 	call	0x1530	; 0x1530 <traverseToSort>
		sortCheck();
    2ce4:	7c dd       	rcall	.-1288   	; 0x27de <sortCheck>
		drop(1);
		_delay_ms(1000);
		pick(0);
	}
	while(1);*/
	while (sorted<total)
    2ce6:	20 91 56 02 	lds	r18, 0x0256
    2cea:	30 91 57 02 	lds	r19, 0x0257
    2cee:	80 91 04 02 	lds	r24, 0x0204
    2cf2:	90 91 05 02 	lds	r25, 0x0205
    2cf6:	28 17       	cp	r18, r24
    2cf8:	39 07       	cpc	r19, r25
    2cfa:	5c f2       	brlt	.-106    	; 0x2c92 <main+0x56>
		//..printf("%d %d\n", term[i][0], term[i][1]);
	//..printf("Sort 0=%dSort 1=%d\nArm 0=%dArm 1=%d\n", sort[0], sort[1], arm[0], arm[1]);
	//..printf("Cost=%d\nSORTED!!!!!\n", cost + 7);
	//getch();
	return 0;
}
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	08 95       	ret

00002d02 <__divsf3>:
    2d02:	0c d0       	rcall	.+24     	; 0x2d1c <__divsf3x>
    2d04:	e6 c0       	rjmp	.+460    	; 0x2ed2 <__fp_round>
    2d06:	de d0       	rcall	.+444    	; 0x2ec4 <__fp_pscB>
    2d08:	40 f0       	brcs	.+16     	; 0x2d1a <__divsf3+0x18>
    2d0a:	d5 d0       	rcall	.+426    	; 0x2eb6 <__fp_pscA>
    2d0c:	30 f0       	brcs	.+12     	; 0x2d1a <__divsf3+0x18>
    2d0e:	21 f4       	brne	.+8      	; 0x2d18 <__divsf3+0x16>
    2d10:	5f 3f       	cpi	r21, 0xFF	; 255
    2d12:	19 f0       	breq	.+6      	; 0x2d1a <__divsf3+0x18>
    2d14:	c7 c0       	rjmp	.+398    	; 0x2ea4 <__fp_inf>
    2d16:	51 11       	cpse	r21, r1
    2d18:	10 c1       	rjmp	.+544    	; 0x2f3a <__fp_szero>
    2d1a:	ca c0       	rjmp	.+404    	; 0x2eb0 <__fp_nan>

00002d1c <__divsf3x>:
    2d1c:	eb d0       	rcall	.+470    	; 0x2ef4 <__fp_split3>
    2d1e:	98 f3       	brcs	.-26     	; 0x2d06 <__divsf3+0x4>

00002d20 <__divsf3_pse>:
    2d20:	99 23       	and	r25, r25
    2d22:	c9 f3       	breq	.-14     	; 0x2d16 <__divsf3+0x14>
    2d24:	55 23       	and	r21, r21
    2d26:	b1 f3       	breq	.-20     	; 0x2d14 <__divsf3+0x12>
    2d28:	95 1b       	sub	r25, r21
    2d2a:	55 0b       	sbc	r21, r21
    2d2c:	bb 27       	eor	r27, r27
    2d2e:	aa 27       	eor	r26, r26
    2d30:	62 17       	cp	r22, r18
    2d32:	73 07       	cpc	r23, r19
    2d34:	84 07       	cpc	r24, r20
    2d36:	38 f0       	brcs	.+14     	; 0x2d46 <__divsf3_pse+0x26>
    2d38:	9f 5f       	subi	r25, 0xFF	; 255
    2d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3c:	22 0f       	add	r18, r18
    2d3e:	33 1f       	adc	r19, r19
    2d40:	44 1f       	adc	r20, r20
    2d42:	aa 1f       	adc	r26, r26
    2d44:	a9 f3       	breq	.-22     	; 0x2d30 <__divsf3_pse+0x10>
    2d46:	33 d0       	rcall	.+102    	; 0x2dae <__divsf3_pse+0x8e>
    2d48:	0e 2e       	mov	r0, r30
    2d4a:	3a f0       	brmi	.+14     	; 0x2d5a <__divsf3_pse+0x3a>
    2d4c:	e0 e8       	ldi	r30, 0x80	; 128
    2d4e:	30 d0       	rcall	.+96     	; 0x2db0 <__divsf3_pse+0x90>
    2d50:	91 50       	subi	r25, 0x01	; 1
    2d52:	50 40       	sbci	r21, 0x00	; 0
    2d54:	e6 95       	lsr	r30
    2d56:	00 1c       	adc	r0, r0
    2d58:	ca f7       	brpl	.-14     	; 0x2d4c <__divsf3_pse+0x2c>
    2d5a:	29 d0       	rcall	.+82     	; 0x2dae <__divsf3_pse+0x8e>
    2d5c:	fe 2f       	mov	r31, r30
    2d5e:	27 d0       	rcall	.+78     	; 0x2dae <__divsf3_pse+0x8e>
    2d60:	66 0f       	add	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	88 1f       	adc	r24, r24
    2d66:	bb 1f       	adc	r27, r27
    2d68:	26 17       	cp	r18, r22
    2d6a:	37 07       	cpc	r19, r23
    2d6c:	48 07       	cpc	r20, r24
    2d6e:	ab 07       	cpc	r26, r27
    2d70:	b0 e8       	ldi	r27, 0x80	; 128
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <__divsf3_pse+0x56>
    2d74:	bb 0b       	sbc	r27, r27
    2d76:	80 2d       	mov	r24, r0
    2d78:	bf 01       	movw	r22, r30
    2d7a:	ff 27       	eor	r31, r31
    2d7c:	93 58       	subi	r25, 0x83	; 131
    2d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d80:	2a f0       	brmi	.+10     	; 0x2d8c <__divsf3_pse+0x6c>
    2d82:	9e 3f       	cpi	r25, 0xFE	; 254
    2d84:	51 05       	cpc	r21, r1
    2d86:	68 f0       	brcs	.+26     	; 0x2da2 <__divsf3_pse+0x82>
    2d88:	8d c0       	rjmp	.+282    	; 0x2ea4 <__fp_inf>
    2d8a:	d7 c0       	rjmp	.+430    	; 0x2f3a <__fp_szero>
    2d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d8e:	ec f3       	brlt	.-6      	; 0x2d8a <__divsf3_pse+0x6a>
    2d90:	98 3e       	cpi	r25, 0xE8	; 232
    2d92:	dc f3       	brlt	.-10     	; 0x2d8a <__divsf3_pse+0x6a>
    2d94:	86 95       	lsr	r24
    2d96:	77 95       	ror	r23
    2d98:	67 95       	ror	r22
    2d9a:	b7 95       	ror	r27
    2d9c:	f7 95       	ror	r31
    2d9e:	9f 5f       	subi	r25, 0xFF	; 255
    2da0:	c9 f7       	brne	.-14     	; 0x2d94 <__divsf3_pse+0x74>
    2da2:	88 0f       	add	r24, r24
    2da4:	91 1d       	adc	r25, r1
    2da6:	96 95       	lsr	r25
    2da8:	87 95       	ror	r24
    2daa:	97 f9       	bld	r25, 7
    2dac:	08 95       	ret
    2dae:	e1 e0       	ldi	r30, 0x01	; 1
    2db0:	66 0f       	add	r22, r22
    2db2:	77 1f       	adc	r23, r23
    2db4:	88 1f       	adc	r24, r24
    2db6:	bb 1f       	adc	r27, r27
    2db8:	62 17       	cp	r22, r18
    2dba:	73 07       	cpc	r23, r19
    2dbc:	84 07       	cpc	r24, r20
    2dbe:	ba 07       	cpc	r27, r26
    2dc0:	20 f0       	brcs	.+8      	; 0x2dca <__divsf3_pse+0xaa>
    2dc2:	62 1b       	sub	r22, r18
    2dc4:	73 0b       	sbc	r23, r19
    2dc6:	84 0b       	sbc	r24, r20
    2dc8:	ba 0b       	sbc	r27, r26
    2dca:	ee 1f       	adc	r30, r30
    2dcc:	88 f7       	brcc	.-30     	; 0x2db0 <__divsf3_pse+0x90>
    2dce:	e0 95       	com	r30
    2dd0:	08 95       	ret

00002dd2 <__fixunssfsi>:
    2dd2:	98 d0       	rcall	.+304    	; 0x2f04 <__fp_splitA>
    2dd4:	88 f0       	brcs	.+34     	; 0x2df8 <__fixunssfsi+0x26>
    2dd6:	9f 57       	subi	r25, 0x7F	; 127
    2dd8:	90 f0       	brcs	.+36     	; 0x2dfe <__fixunssfsi+0x2c>
    2dda:	b9 2f       	mov	r27, r25
    2ddc:	99 27       	eor	r25, r25
    2dde:	b7 51       	subi	r27, 0x17	; 23
    2de0:	a0 f0       	brcs	.+40     	; 0x2e0a <__fixunssfsi+0x38>
    2de2:	d1 f0       	breq	.+52     	; 0x2e18 <__fixunssfsi+0x46>
    2de4:	66 0f       	add	r22, r22
    2de6:	77 1f       	adc	r23, r23
    2de8:	88 1f       	adc	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	1a f0       	brmi	.+6      	; 0x2df4 <__fixunssfsi+0x22>
    2dee:	ba 95       	dec	r27
    2df0:	c9 f7       	brne	.-14     	; 0x2de4 <__fixunssfsi+0x12>
    2df2:	12 c0       	rjmp	.+36     	; 0x2e18 <__fixunssfsi+0x46>
    2df4:	b1 30       	cpi	r27, 0x01	; 1
    2df6:	81 f0       	breq	.+32     	; 0x2e18 <__fixunssfsi+0x46>
    2df8:	9f d0       	rcall	.+318    	; 0x2f38 <__fp_zero>
    2dfa:	b1 e0       	ldi	r27, 0x01	; 1
    2dfc:	08 95       	ret
    2dfe:	9c c0       	rjmp	.+312    	; 0x2f38 <__fp_zero>
    2e00:	67 2f       	mov	r22, r23
    2e02:	78 2f       	mov	r23, r24
    2e04:	88 27       	eor	r24, r24
    2e06:	b8 5f       	subi	r27, 0xF8	; 248
    2e08:	39 f0       	breq	.+14     	; 0x2e18 <__fixunssfsi+0x46>
    2e0a:	b9 3f       	cpi	r27, 0xF9	; 249
    2e0c:	cc f3       	brlt	.-14     	; 0x2e00 <__fixunssfsi+0x2e>
    2e0e:	86 95       	lsr	r24
    2e10:	77 95       	ror	r23
    2e12:	67 95       	ror	r22
    2e14:	b3 95       	inc	r27
    2e16:	d9 f7       	brne	.-10     	; 0x2e0e <__fixunssfsi+0x3c>
    2e18:	3e f4       	brtc	.+14     	; 0x2e28 <__fixunssfsi+0x56>
    2e1a:	90 95       	com	r25
    2e1c:	80 95       	com	r24
    2e1e:	70 95       	com	r23
    2e20:	61 95       	neg	r22
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	8f 4f       	sbci	r24, 0xFF	; 255
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	08 95       	ret

00002e2a <__floatunsisf>:
    2e2a:	e8 94       	clt
    2e2c:	09 c0       	rjmp	.+18     	; 0x2e40 <__floatsisf+0x12>

00002e2e <__floatsisf>:
    2e2e:	97 fb       	bst	r25, 7
    2e30:	3e f4       	brtc	.+14     	; 0x2e40 <__floatsisf+0x12>
    2e32:	90 95       	com	r25
    2e34:	80 95       	com	r24
    2e36:	70 95       	com	r23
    2e38:	61 95       	neg	r22
    2e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e40:	99 23       	and	r25, r25
    2e42:	a9 f0       	breq	.+42     	; 0x2e6e <__floatsisf+0x40>
    2e44:	f9 2f       	mov	r31, r25
    2e46:	96 e9       	ldi	r25, 0x96	; 150
    2e48:	bb 27       	eor	r27, r27
    2e4a:	93 95       	inc	r25
    2e4c:	f6 95       	lsr	r31
    2e4e:	87 95       	ror	r24
    2e50:	77 95       	ror	r23
    2e52:	67 95       	ror	r22
    2e54:	b7 95       	ror	r27
    2e56:	f1 11       	cpse	r31, r1
    2e58:	f8 cf       	rjmp	.-16     	; 0x2e4a <__floatsisf+0x1c>
    2e5a:	fa f4       	brpl	.+62     	; 0x2e9a <__floatsisf+0x6c>
    2e5c:	bb 0f       	add	r27, r27
    2e5e:	11 f4       	brne	.+4      	; 0x2e64 <__floatsisf+0x36>
    2e60:	60 ff       	sbrs	r22, 0
    2e62:	1b c0       	rjmp	.+54     	; 0x2e9a <__floatsisf+0x6c>
    2e64:	6f 5f       	subi	r22, 0xFF	; 255
    2e66:	7f 4f       	sbci	r23, 0xFF	; 255
    2e68:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	16 c0       	rjmp	.+44     	; 0x2e9a <__floatsisf+0x6c>
    2e6e:	88 23       	and	r24, r24
    2e70:	11 f0       	breq	.+4      	; 0x2e76 <__floatsisf+0x48>
    2e72:	96 e9       	ldi	r25, 0x96	; 150
    2e74:	11 c0       	rjmp	.+34     	; 0x2e98 <__floatsisf+0x6a>
    2e76:	77 23       	and	r23, r23
    2e78:	21 f0       	breq	.+8      	; 0x2e82 <__floatsisf+0x54>
    2e7a:	9e e8       	ldi	r25, 0x8E	; 142
    2e7c:	87 2f       	mov	r24, r23
    2e7e:	76 2f       	mov	r23, r22
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <__floatsisf+0x5e>
    2e82:	66 23       	and	r22, r22
    2e84:	71 f0       	breq	.+28     	; 0x2ea2 <__floatsisf+0x74>
    2e86:	96 e8       	ldi	r25, 0x86	; 134
    2e88:	86 2f       	mov	r24, r22
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	2a f0       	brmi	.+10     	; 0x2e9a <__floatsisf+0x6c>
    2e90:	9a 95       	dec	r25
    2e92:	66 0f       	add	r22, r22
    2e94:	77 1f       	adc	r23, r23
    2e96:	88 1f       	adc	r24, r24
    2e98:	da f7       	brpl	.-10     	; 0x2e90 <__floatsisf+0x62>
    2e9a:	88 0f       	add	r24, r24
    2e9c:	96 95       	lsr	r25
    2e9e:	87 95       	ror	r24
    2ea0:	97 f9       	bld	r25, 7
    2ea2:	08 95       	ret

00002ea4 <__fp_inf>:
    2ea4:	97 f9       	bld	r25, 7
    2ea6:	9f 67       	ori	r25, 0x7F	; 127
    2ea8:	80 e8       	ldi	r24, 0x80	; 128
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	08 95       	ret

00002eb0 <__fp_nan>:
    2eb0:	9f ef       	ldi	r25, 0xFF	; 255
    2eb2:	80 ec       	ldi	r24, 0xC0	; 192
    2eb4:	08 95       	ret

00002eb6 <__fp_pscA>:
    2eb6:	00 24       	eor	r0, r0
    2eb8:	0a 94       	dec	r0
    2eba:	16 16       	cp	r1, r22
    2ebc:	17 06       	cpc	r1, r23
    2ebe:	18 06       	cpc	r1, r24
    2ec0:	09 06       	cpc	r0, r25
    2ec2:	08 95       	ret

00002ec4 <__fp_pscB>:
    2ec4:	00 24       	eor	r0, r0
    2ec6:	0a 94       	dec	r0
    2ec8:	12 16       	cp	r1, r18
    2eca:	13 06       	cpc	r1, r19
    2ecc:	14 06       	cpc	r1, r20
    2ece:	05 06       	cpc	r0, r21
    2ed0:	08 95       	ret

00002ed2 <__fp_round>:
    2ed2:	09 2e       	mov	r0, r25
    2ed4:	03 94       	inc	r0
    2ed6:	00 0c       	add	r0, r0
    2ed8:	11 f4       	brne	.+4      	; 0x2ede <__fp_round+0xc>
    2eda:	88 23       	and	r24, r24
    2edc:	52 f0       	brmi	.+20     	; 0x2ef2 <__fp_round+0x20>
    2ede:	bb 0f       	add	r27, r27
    2ee0:	40 f4       	brcc	.+16     	; 0x2ef2 <__fp_round+0x20>
    2ee2:	bf 2b       	or	r27, r31
    2ee4:	11 f4       	brne	.+4      	; 0x2eea <__fp_round+0x18>
    2ee6:	60 ff       	sbrs	r22, 0
    2ee8:	04 c0       	rjmp	.+8      	; 0x2ef2 <__fp_round+0x20>
    2eea:	6f 5f       	subi	r22, 0xFF	; 255
    2eec:	7f 4f       	sbci	r23, 0xFF	; 255
    2eee:	8f 4f       	sbci	r24, 0xFF	; 255
    2ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef2:	08 95       	ret

00002ef4 <__fp_split3>:
    2ef4:	57 fd       	sbrc	r21, 7
    2ef6:	90 58       	subi	r25, 0x80	; 128
    2ef8:	44 0f       	add	r20, r20
    2efa:	55 1f       	adc	r21, r21
    2efc:	59 f0       	breq	.+22     	; 0x2f14 <__fp_splitA+0x10>
    2efe:	5f 3f       	cpi	r21, 0xFF	; 255
    2f00:	71 f0       	breq	.+28     	; 0x2f1e <__fp_splitA+0x1a>
    2f02:	47 95       	ror	r20

00002f04 <__fp_splitA>:
    2f04:	88 0f       	add	r24, r24
    2f06:	97 fb       	bst	r25, 7
    2f08:	99 1f       	adc	r25, r25
    2f0a:	61 f0       	breq	.+24     	; 0x2f24 <__fp_splitA+0x20>
    2f0c:	9f 3f       	cpi	r25, 0xFF	; 255
    2f0e:	79 f0       	breq	.+30     	; 0x2f2e <__fp_splitA+0x2a>
    2f10:	87 95       	ror	r24
    2f12:	08 95       	ret
    2f14:	12 16       	cp	r1, r18
    2f16:	13 06       	cpc	r1, r19
    2f18:	14 06       	cpc	r1, r20
    2f1a:	55 1f       	adc	r21, r21
    2f1c:	f2 cf       	rjmp	.-28     	; 0x2f02 <__fp_split3+0xe>
    2f1e:	46 95       	lsr	r20
    2f20:	f1 df       	rcall	.-30     	; 0x2f04 <__fp_splitA>
    2f22:	08 c0       	rjmp	.+16     	; 0x2f34 <__fp_splitA+0x30>
    2f24:	16 16       	cp	r1, r22
    2f26:	17 06       	cpc	r1, r23
    2f28:	18 06       	cpc	r1, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	f1 cf       	rjmp	.-30     	; 0x2f10 <__fp_splitA+0xc>
    2f2e:	86 95       	lsr	r24
    2f30:	71 05       	cpc	r23, r1
    2f32:	61 05       	cpc	r22, r1
    2f34:	08 94       	sec
    2f36:	08 95       	ret

00002f38 <__fp_zero>:
    2f38:	e8 94       	clt

00002f3a <__fp_szero>:
    2f3a:	bb 27       	eor	r27, r27
    2f3c:	66 27       	eor	r22, r22
    2f3e:	77 27       	eor	r23, r23
    2f40:	cb 01       	movw	r24, r22
    2f42:	97 f9       	bld	r25, 7
    2f44:	08 95       	ret

00002f46 <__divmodhi4>:
    2f46:	97 fb       	bst	r25, 7
    2f48:	07 2e       	mov	r0, r23
    2f4a:	16 f4       	brtc	.+4      	; 0x2f50 <__divmodhi4+0xa>
    2f4c:	00 94       	com	r0
    2f4e:	06 d0       	rcall	.+12     	; 0x2f5c <__divmodhi4_neg1>
    2f50:	77 fd       	sbrc	r23, 7
    2f52:	08 d0       	rcall	.+16     	; 0x2f64 <__divmodhi4_neg2>
    2f54:	1a d0       	rcall	.+52     	; 0x2f8a <__udivmodhi4>
    2f56:	07 fc       	sbrc	r0, 7
    2f58:	05 d0       	rcall	.+10     	; 0x2f64 <__divmodhi4_neg2>
    2f5a:	3e f4       	brtc	.+14     	; 0x2f6a <__divmodhi4_exit>

00002f5c <__divmodhi4_neg1>:
    2f5c:	90 95       	com	r25
    2f5e:	81 95       	neg	r24
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	08 95       	ret

00002f64 <__divmodhi4_neg2>:
    2f64:	70 95       	com	r23
    2f66:	61 95       	neg	r22
    2f68:	7f 4f       	sbci	r23, 0xFF	; 255

00002f6a <__divmodhi4_exit>:
    2f6a:	08 95       	ret

00002f6c <__umulhisi3>:
    2f6c:	a2 9f       	mul	r26, r18
    2f6e:	b0 01       	movw	r22, r0
    2f70:	b3 9f       	mul	r27, r19
    2f72:	c0 01       	movw	r24, r0
    2f74:	a3 9f       	mul	r26, r19
    2f76:	70 0d       	add	r23, r0
    2f78:	81 1d       	adc	r24, r1
    2f7a:	11 24       	eor	r1, r1
    2f7c:	91 1d       	adc	r25, r1
    2f7e:	b2 9f       	mul	r27, r18
    2f80:	70 0d       	add	r23, r0
    2f82:	81 1d       	adc	r24, r1
    2f84:	11 24       	eor	r1, r1
    2f86:	91 1d       	adc	r25, r1
    2f88:	08 95       	ret

00002f8a <__udivmodhi4>:
    2f8a:	aa 1b       	sub	r26, r26
    2f8c:	bb 1b       	sub	r27, r27
    2f8e:	51 e1       	ldi	r21, 0x11	; 17
    2f90:	07 c0       	rjmp	.+14     	; 0x2fa0 <__udivmodhi4_ep>

00002f92 <__udivmodhi4_loop>:
    2f92:	aa 1f       	adc	r26, r26
    2f94:	bb 1f       	adc	r27, r27
    2f96:	a6 17       	cp	r26, r22
    2f98:	b7 07       	cpc	r27, r23
    2f9a:	10 f0       	brcs	.+4      	; 0x2fa0 <__udivmodhi4_ep>
    2f9c:	a6 1b       	sub	r26, r22
    2f9e:	b7 0b       	sbc	r27, r23

00002fa0 <__udivmodhi4_ep>:
    2fa0:	88 1f       	adc	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	5a 95       	dec	r21
    2fa6:	a9 f7       	brne	.-22     	; 0x2f92 <__udivmodhi4_loop>
    2fa8:	80 95       	com	r24
    2faa:	90 95       	com	r25
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	08 95       	ret

00002fb2 <_exit>:
    2fb2:	f8 94       	cli

00002fb4 <__stop_program>:
    2fb4:	ff cf       	rjmp	.-2      	; 0x2fb4 <__stop_program>
