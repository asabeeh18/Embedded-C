
DeathDoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001392  00001426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800204  00800204  0000142a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  0000145a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cf0  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045c  00000000  00000000  00004452  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b30  00000000  00000000  000048ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000784  00000000  00000000  000063e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000074e  00000000  00000000  00006b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000152c  00000000  00000000  000072b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000388  00000000  00000000  000087de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	13 c3       	rjmp	.+1574   	; 0x62c <__vector_1>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c3       	rjmp	.+1794   	; 0x718 <__vector_5>
      16:	00 00       	nop
      18:	5a c3       	rjmp	.+1716   	; 0x6ce <__vector_6>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e9       	ldi	r30, 0x92	; 146
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 30       	cpi	r26, 0x04	; 4
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e0       	ldi	r26, 0x04	; 4
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 32       	cpi	r26, 0x2F	; 47
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	9c d7       	rcall	.+3896   	; 0x1058 <main>
     120:	0c 94 c7 09 	jmp	0x138e	; 0x138e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	86 e6       	ldi	r24, 0x66	; 102
     128:	9e e0       	ldi	r25, 0x0E	; 14
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_set_4bit+0x4>
     12e:	00 00       	nop
     130:	40 98       	cbi	0x08, 0	; 8
     132:	41 98       	cbi	0x08, 1	; 8
     134:	80 e3       	ldi	r24, 0x30	; 48
     136:	88 b9       	out	0x08, r24	; 8
     138:	42 9a       	sbi	0x08, 2	; 8
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	97 e4       	ldi	r25, 0x47	; 71
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <lcd_set_4bit+0x18>
     142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_set_4bit+0x1e>
     144:	00 00       	nop
     146:	42 98       	cbi	0x08, 2	; 8
     148:	86 e6       	ldi	r24, 0x66	; 102
     14a:	9e e0       	ldi	r25, 0x0E	; 14
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x26>
     150:	00 00       	nop
     152:	40 98       	cbi	0x08, 0	; 8
     154:	41 98       	cbi	0x08, 1	; 8
     156:	80 e3       	ldi	r24, 0x30	; 48
     158:	88 b9       	out	0x08, r24	; 8
     15a:	42 9a       	sbi	0x08, 2	; 8
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	97 e4       	ldi	r25, 0x47	; 71
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <lcd_set_4bit+0x3a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_set_4bit+0x40>
     166:	00 00       	nop
     168:	42 98       	cbi	0x08, 2	; 8
     16a:	86 e6       	ldi	r24, 0x66	; 102
     16c:	9e e0       	ldi	r25, 0x0E	; 14
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcd_set_4bit+0x48>
     172:	00 00       	nop
     174:	40 98       	cbi	0x08, 0	; 8
     176:	41 98       	cbi	0x08, 1	; 8
     178:	80 e3       	ldi	r24, 0x30	; 48
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	97 e4       	ldi	r25, 0x47	; 71
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x5c>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x62>
     188:	00 00       	nop
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	86 e6       	ldi	r24, 0x66	; 102
     18e:	9e e0       	ldi	r25, 0x0E	; 14
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x6a>
     194:	00 00       	nop
     196:	40 98       	cbi	0x08, 0	; 8
     198:	41 98       	cbi	0x08, 1	; 8
     19a:	80 e2       	ldi	r24, 0x20	; 32
     19c:	88 b9       	out	0x08, r24	; 8
     19e:	42 9a       	sbi	0x08, 2	; 8
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	97 e4       	ldi	r25, 0x47	; 71
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7e>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x84>
     1aa:	00 00       	nop
     1ac:	42 98       	cbi	0x08, 2	; 8
     1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	28 2f       	mov	r18, r24
     1ba:	20 7f       	andi	r18, 0xF0	; 240
     1bc:	92 2b       	or	r25, r18
     1be:	98 b9       	out	0x08, r25	; 8
     1c0:	40 98       	cbi	0x08, 0	; 8
     1c2:	41 98       	cbi	0x08, 1	; 8
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	ef ef       	ldi	r30, 0xFF	; 255
     1c8:	f7 e4       	ldi	r31, 0x47	; 71
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
     1d0:	00 00       	nop
     1d2:	42 98       	cbi	0x08, 2	; 8
     1d4:	98 b1       	in	r25, 0x08	; 8
     1d6:	9f 70       	andi	r25, 0x0F	; 15
     1d8:	98 b9       	out	0x08, r25	; 8
     1da:	98 b1       	in	r25, 0x08	; 8
     1dc:	82 95       	swap	r24
     1de:	80 7f       	andi	r24, 0xF0	; 240
     1e0:	89 2b       	or	r24, r25
     1e2:	88 b9       	out	0x08, r24	; 8
     1e4:	40 98       	cbi	0x08, 0	; 8
     1e6:	41 98       	cbi	0x08, 1	; 8
     1e8:	42 9a       	sbi	0x08, 2	; 8
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	97 e4       	ldi	r25, 0x47	; 71
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
     1f4:	00 00       	nop
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	08 95       	ret

000001fa <lcd_init>:
     1fa:	95 df       	rcall	.-214    	; 0x126 <lcd_set_4bit>
     1fc:	86 e6       	ldi	r24, 0x66	; 102
     1fe:	9e e0       	ldi	r25, 0x0E	; 14
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x6>
     204:	00 00       	nop
     206:	88 e2       	ldi	r24, 0x28	; 40
     208:	d3 df       	rcall	.-90     	; 0x1b0 <lcd_wr_command>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	d1 df       	rcall	.-94     	; 0x1b0 <lcd_wr_command>
     20e:	86 e0       	ldi	r24, 0x06	; 6
     210:	cf df       	rcall	.-98     	; 0x1b0 <lcd_wr_command>
     212:	8e e0       	ldi	r24, 0x0E	; 14
     214:	cd df       	rcall	.-102    	; 0x1b0 <lcd_wr_command>
     216:	80 e8       	ldi	r24, 0x80	; 128
     218:	cb cf       	rjmp	.-106    	; 0x1b0 <lcd_wr_command>
     21a:	08 95       	ret

0000021c <lcd_wr_char>:
     21c:	98 b1       	in	r25, 0x08	; 8
     21e:	9f 70       	andi	r25, 0x0F	; 15
     220:	98 b9       	out	0x08, r25	; 8
     222:	98 b1       	in	r25, 0x08	; 8
     224:	28 2f       	mov	r18, r24
     226:	20 7f       	andi	r18, 0xF0	; 240
     228:	92 2b       	or	r25, r18
     22a:	98 b9       	out	0x08, r25	; 8
     22c:	40 9a       	sbi	0x08, 0	; 8
     22e:	41 98       	cbi	0x08, 1	; 8
     230:	42 9a       	sbi	0x08, 2	; 8
     232:	ef ef       	ldi	r30, 0xFF	; 255
     234:	f7 e4       	ldi	r31, 0x47	; 71
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_wr_char+0x1a>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_wr_char+0x20>
     23c:	00 00       	nop
     23e:	42 98       	cbi	0x08, 2	; 8
     240:	98 b1       	in	r25, 0x08	; 8
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	98 b9       	out	0x08, r25	; 8
     246:	98 b1       	in	r25, 0x08	; 8
     248:	82 95       	swap	r24
     24a:	80 7f       	andi	r24, 0xF0	; 240
     24c:	89 2b       	or	r24, r25
     24e:	88 b9       	out	0x08, r24	; 8
     250:	40 9a       	sbi	0x08, 0	; 8
     252:	41 98       	cbi	0x08, 1	; 8
     254:	42 9a       	sbi	0x08, 2	; 8
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	97 e4       	ldi	r25, 0x47	; 71
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_wr_char+0x3e>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_wr_char+0x44>
     260:	00 00       	nop
     262:	42 98       	cbi	0x08, 2	; 8
     264:	08 95       	ret

00000266 <lcd_home>:
     266:	80 e8       	ldi	r24, 0x80	; 128
     268:	a3 cf       	rjmp	.-186    	; 0x1b0 <lcd_wr_command>
     26a:	08 95       	ret

0000026c <lcd_cursor>:
     26c:	82 30       	cpi	r24, 0x02	; 2
     26e:	69 f0       	breq	.+26     	; 0x28a <lcd_cursor+0x1e>
     270:	18 f4       	brcc	.+6      	; 0x278 <lcd_cursor+0xc>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	31 f0       	breq	.+12     	; 0x282 <lcd_cursor+0x16>
     276:	08 95       	ret
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	59 f0       	breq	.+22     	; 0x292 <lcd_cursor+0x26>
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	69 f0       	breq	.+26     	; 0x29a <lcd_cursor+0x2e>
     280:	08 95       	ret
     282:	8f e7       	ldi	r24, 0x7F	; 127
     284:	86 0f       	add	r24, r22
     286:	94 cf       	rjmp	.-216    	; 0x1b0 <lcd_wr_command>
     288:	08 95       	ret
     28a:	8f eb       	ldi	r24, 0xBF	; 191
     28c:	86 0f       	add	r24, r22
     28e:	90 cf       	rjmp	.-224    	; 0x1b0 <lcd_wr_command>
     290:	08 95       	ret
     292:	83 e9       	ldi	r24, 0x93	; 147
     294:	86 0f       	add	r24, r22
     296:	8c cf       	rjmp	.-232    	; 0x1b0 <lcd_wr_command>
     298:	08 95       	ret
     29a:	83 ed       	ldi	r24, 0xD3	; 211
     29c:	86 0f       	add	r24, r22
     29e:	88 cf       	rjmp	.-240    	; 0x1b0 <lcd_wr_command>
     2a0:	08 95       	ret

000002a2 <lcd_print>:
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	8a 01       	movw	r16, r20
     2ac:	e9 01       	movw	r28, r18
     2ae:	88 23       	and	r24, r24
     2b0:	11 f0       	breq	.+4      	; 0x2b6 <lcd_print+0x14>
     2b2:	61 11       	cpse	r22, r1
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <lcd_print+0x18>
     2b6:	d7 df       	rcall	.-82     	; 0x266 <lcd_home>
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <lcd_print+0x1a>
     2ba:	d8 df       	rcall	.-80     	; 0x26c <lcd_cursor>
     2bc:	c5 30       	cpi	r28, 0x05	; 5
     2be:	d1 05       	cpc	r29, r1
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <lcd_print+0x22>
     2c2:	d0 c0       	rjmp	.+416    	; 0x464 <lcd_print+0x1c2>
     2c4:	98 01       	movw	r18, r16
     2c6:	32 95       	swap	r19
     2c8:	22 95       	swap	r18
     2ca:	2f 70       	andi	r18, 0x0F	; 15
     2cc:	23 27       	eor	r18, r19
     2ce:	3f 70       	andi	r19, 0x0F	; 15
     2d0:	23 27       	eor	r18, r19
     2d2:	a7 e4       	ldi	r26, 0x47	; 71
     2d4:	b3 e0       	ldi	r27, 0x03	; 3
     2d6:	0e 94 b8 09 	call	0x1370	; 0x1370 <__umulhisi3>
     2da:	96 95       	lsr	r25
     2dc:	87 95       	ror	r24
     2de:	96 95       	lsr	r25
     2e0:	87 95       	ror	r24
     2e2:	96 95       	lsr	r25
     2e4:	87 95       	ror	r24
     2e6:	c0 96       	adiw	r24, 0x30	; 48
     2e8:	90 93 1b 02 	sts	0x021B, r25
     2ec:	80 93 1a 02 	sts	0x021A, r24
     2f0:	95 df       	rcall	.-214    	; 0x21c <lcd_wr_char>
     2f2:	98 01       	movw	r18, r16
     2f4:	36 95       	lsr	r19
     2f6:	27 95       	ror	r18
     2f8:	36 95       	lsr	r19
     2fa:	27 95       	ror	r18
     2fc:	36 95       	lsr	r19
     2fe:	27 95       	ror	r18
     300:	a5 ec       	ldi	r26, 0xC5	; 197
     302:	b0 e2       	ldi	r27, 0x20	; 32
     304:	0e 94 b8 09 	call	0x1370	; 0x1370 <__umulhisi3>
     308:	ac 01       	movw	r20, r24
     30a:	52 95       	swap	r21
     30c:	42 95       	swap	r20
     30e:	4f 70       	andi	r20, 0x0F	; 15
     310:	45 27       	eor	r20, r21
     312:	5f 70       	andi	r21, 0x0F	; 15
     314:	45 27       	eor	r20, r21
     316:	50 93 1d 02 	sts	0x021D, r21
     31a:	40 93 1c 02 	sts	0x021C, r20
     31e:	9a 01       	movw	r18, r20
     320:	ad ec       	ldi	r26, 0xCD	; 205
     322:	bc ec       	ldi	r27, 0xCC	; 204
     324:	0e 94 b8 09 	call	0x1370	; 0x1370 <__umulhisi3>
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	9c 01       	movw	r18, r24
     336:	22 0f       	add	r18, r18
     338:	33 1f       	adc	r19, r19
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	82 0f       	add	r24, r18
     348:	93 1f       	adc	r25, r19
     34a:	48 1b       	sub	r20, r24
     34c:	59 0b       	sbc	r21, r25
     34e:	ca 01       	movw	r24, r20
     350:	c0 96       	adiw	r24, 0x30	; 48
     352:	90 93 2e 02 	sts	0x022E, r25
     356:	80 93 2d 02 	sts	0x022D, r24
     35a:	60 df       	rcall	.-320    	; 0x21c <lcd_wr_char>
     35c:	04 c0       	rjmp	.+8      	; 0x366 <lcd_print+0xc4>
     35e:	c3 30       	cpi	r28, 0x03	; 3
     360:	d1 05       	cpc	r29, r1
     362:	09 f0       	breq	.+2      	; 0x366 <lcd_print+0xc4>
     364:	84 c0       	rjmp	.+264    	; 0x46e <lcd_print+0x1cc>
     366:	98 01       	movw	r18, r16
     368:	36 95       	lsr	r19
     36a:	27 95       	ror	r18
     36c:	36 95       	lsr	r19
     36e:	27 95       	ror	r18
     370:	ab e7       	ldi	r26, 0x7B	; 123
     372:	b4 e1       	ldi	r27, 0x14	; 20
     374:	fd d7       	rcall	.+4090   	; 0x1370 <__umulhisi3>
     376:	ac 01       	movw	r20, r24
     378:	56 95       	lsr	r21
     37a:	47 95       	ror	r20
     37c:	50 93 1d 02 	sts	0x021D, r21
     380:	40 93 1c 02 	sts	0x021C, r20
     384:	9a 01       	movw	r18, r20
     386:	ad ec       	ldi	r26, 0xCD	; 205
     388:	bc ec       	ldi	r27, 0xCC	; 204
     38a:	f2 d7       	rcall	.+4068   	; 0x1370 <__umulhisi3>
     38c:	96 95       	lsr	r25
     38e:	87 95       	ror	r24
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	96 95       	lsr	r25
     396:	87 95       	ror	r24
     398:	9c 01       	movw	r18, r24
     39a:	22 0f       	add	r18, r18
     39c:	33 1f       	adc	r19, r19
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	48 1b       	sub	r20, r24
     3b0:	59 0b       	sbc	r21, r25
     3b2:	ca 01       	movw	r24, r20
     3b4:	c0 96       	adiw	r24, 0x30	; 48
     3b6:	90 93 2a 02 	sts	0x022A, r25
     3ba:	80 93 29 02 	sts	0x0229, r24
     3be:	2e df       	rcall	.-420    	; 0x21c <lcd_wr_char>
     3c0:	98 01       	movw	r18, r16
     3c2:	ad ec       	ldi	r26, 0xCD	; 205
     3c4:	bc ec       	ldi	r27, 0xCC	; 204
     3c6:	d4 d7       	rcall	.+4008   	; 0x1370 <__umulhisi3>
     3c8:	ac 01       	movw	r20, r24
     3ca:	56 95       	lsr	r21
     3cc:	47 95       	ror	r20
     3ce:	56 95       	lsr	r21
     3d0:	47 95       	ror	r20
     3d2:	56 95       	lsr	r21
     3d4:	47 95       	ror	r20
     3d6:	50 93 1d 02 	sts	0x021D, r21
     3da:	40 93 1c 02 	sts	0x021C, r20
     3de:	9a 01       	movw	r18, r20
     3e0:	c7 d7       	rcall	.+3982   	; 0x1370 <__umulhisi3>
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	96 95       	lsr	r25
     3e8:	87 95       	ror	r24
     3ea:	96 95       	lsr	r25
     3ec:	87 95       	ror	r24
     3ee:	9c 01       	movw	r18, r24
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	48 1b       	sub	r20, r24
     406:	59 0b       	sbc	r21, r25
     408:	ca 01       	movw	r24, r20
     40a:	c0 96       	adiw	r24, 0x30	; 48
     40c:	90 93 28 02 	sts	0x0228, r25
     410:	80 93 27 02 	sts	0x0227, r24
     414:	03 df       	rcall	.-506    	; 0x21c <lcd_wr_char>
     416:	03 c0       	rjmp	.+6      	; 0x41e <lcd_print+0x17c>
     418:	c1 30       	cpi	r28, 0x01	; 1
     41a:	d1 05       	cpc	r29, r1
     41c:	f1 f4       	brne	.+60     	; 0x45a <lcd_print+0x1b8>
     41e:	98 01       	movw	r18, r16
     420:	ad ec       	ldi	r26, 0xCD	; 205
     422:	bc ec       	ldi	r27, 0xCC	; 204
     424:	a5 d7       	rcall	.+3914   	; 0x1370 <__umulhisi3>
     426:	96 95       	lsr	r25
     428:	87 95       	ror	r24
     42a:	96 95       	lsr	r25
     42c:	87 95       	ror	r24
     42e:	96 95       	lsr	r25
     430:	87 95       	ror	r24
     432:	9c 01       	movw	r18, r24
     434:	22 0f       	add	r18, r18
     436:	33 1f       	adc	r19, r19
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	82 0f       	add	r24, r18
     446:	93 1f       	adc	r25, r19
     448:	08 1b       	sub	r16, r24
     44a:	19 0b       	sbc	r17, r25
     44c:	c8 01       	movw	r24, r16
     44e:	c0 96       	adiw	r24, 0x30	; 48
     450:	90 93 2c 02 	sts	0x022C, r25
     454:	80 93 2b 02 	sts	0x022B, r24
     458:	e1 de       	rcall	.-574    	; 0x21c <lcd_wr_char>
     45a:	26 97       	sbiw	r28, 0x06	; 6
     45c:	64 f0       	brlt	.+24     	; 0x476 <lcd_print+0x1d4>
     45e:	85 e4       	ldi	r24, 0x45	; 69
     460:	dd de       	rcall	.-582    	; 0x21c <lcd_wr_char>
     462:	09 c0       	rjmp	.+18     	; 0x476 <lcd_print+0x1d4>
     464:	c4 30       	cpi	r28, 0x04	; 4
     466:	d1 05       	cpc	r29, r1
     468:	09 f0       	breq	.+2      	; 0x46c <lcd_print+0x1ca>
     46a:	79 cf       	rjmp	.-270    	; 0x35e <lcd_print+0xbc>
     46c:	42 cf       	rjmp	.-380    	; 0x2f2 <lcd_print+0x50>
     46e:	c2 30       	cpi	r28, 0x02	; 2
     470:	d1 05       	cpc	r29, r1
     472:	91 f6       	brne	.-92     	; 0x418 <lcd_print+0x176>
     474:	a5 cf       	rjmp	.-182    	; 0x3c0 <lcd_print+0x11e>
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <timer5_init>:
     480:	e1 e2       	ldi	r30, 0x21	; 33
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	10 82       	st	Z, r1
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	80 93 25 01 	sts	0x0125, r24
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	90 93 24 01 	sts	0x0124, r25
     492:	10 92 29 01 	sts	0x0129, r1
     496:	80 93 28 01 	sts	0x0128, r24
     49a:	10 92 2b 01 	sts	0x012B, r1
     49e:	80 93 2a 01 	sts	0x012A, r24
     4a2:	10 92 2d 01 	sts	0x012D, r1
     4a6:	80 93 2c 01 	sts	0x012C, r24
     4aa:	89 ea       	ldi	r24, 0xA9	; 169
     4ac:	80 93 20 01 	sts	0x0120, r24
     4b0:	8b e0       	ldi	r24, 0x0B	; 11
     4b2:	80 83       	st	Z, r24
     4b4:	08 95       	ret

000004b6 <motion_pin_config>:
     4b6:	81 b1       	in	r24, 0x01	; 1
     4b8:	8f 60       	ori	r24, 0x0F	; 15
     4ba:	81 b9       	out	0x01, r24	; 1
     4bc:	82 b1       	in	r24, 0x02	; 2
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	82 b9       	out	0x02, r24	; 2
     4c2:	ea e0       	ldi	r30, 0x0A	; 10
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	80 81       	ld	r24, Z
     4c8:	88 61       	ori	r24, 0x18	; 24
     4ca:	80 83       	st	Z, r24
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	80 81       	ld	r24, Z
     4d2:	88 61       	ori	r24, 0x18	; 24
     4d4:	80 83       	st	Z, r24
     4d6:	08 95       	ret

000004d8 <motion_set>:
     4d8:	92 b1       	in	r25, 0x02	; 2
     4da:	90 7f       	andi	r25, 0xF0	; 240
     4dc:	8f 70       	andi	r24, 0x0F	; 15
     4de:	98 2b       	or	r25, r24
     4e0:	92 b9       	out	0x02, r25	; 2
     4e2:	08 95       	ret

000004e4 <forward>:
     4e4:	86 e0       	ldi	r24, 0x06	; 6
     4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <motion_set>
     4e8:	08 95       	ret

000004ea <back>:
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	f5 cf       	rjmp	.-22     	; 0x4d8 <motion_set>
     4ee:	08 95       	ret

000004f0 <left>:
     4f0:	85 e0       	ldi	r24, 0x05	; 5
     4f2:	f2 cf       	rjmp	.-28     	; 0x4d8 <motion_set>
     4f4:	08 95       	ret

000004f6 <right>:
     4f6:	8a e0       	ldi	r24, 0x0A	; 10
     4f8:	ef cf       	rjmp	.-34     	; 0x4d8 <motion_set>
     4fa:	08 95       	ret

000004fc <soft_left>:
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	ec cf       	rjmp	.-40     	; 0x4d8 <motion_set>
     500:	08 95       	ret

00000502 <soft_right>:
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	e9 cf       	rjmp	.-46     	; 0x4d8 <motion_set>
     506:	08 95       	ret

00000508 <soft_left_2>:
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	e6 cf       	rjmp	.-52     	; 0x4d8 <motion_set>
     50c:	08 95       	ret

0000050e <soft_right_2>:
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	e3 cf       	rjmp	.-58     	; 0x4d8 <motion_set>
     512:	08 95       	ret

00000514 <stop>:
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	e0 cf       	rjmp	.-64     	; 0x4d8 <motion_set>
     518:	08 95       	ret

0000051a <lcd_port_config>:
     51a:	87 b1       	in	r24, 0x07	; 7
     51c:	87 6f       	ori	r24, 0xF7	; 247
     51e:	87 b9       	out	0x07, r24	; 7
     520:	88 b1       	in	r24, 0x08	; 8
     522:	80 78       	andi	r24, 0x80	; 128
     524:	88 b9       	out	0x08, r24	; 8
     526:	08 95       	ret

00000528 <color_sensor_pin_config>:
     528:	8a b1       	in	r24, 0x0a	; 10
     52a:	8e 6f       	ori	r24, 0xFE	; 254
     52c:	8a b9       	out	0x0a, r24	; 10
     52e:	58 9a       	sbi	0x0b, 0	; 11
     530:	08 95       	ret

00000532 <servo_1_free>:
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	80 93 89 00 	sts	0x0089, r24
     538:	8f ef       	ldi	r24, 0xFF	; 255
     53a:	80 93 88 00 	sts	0x0088, r24
     53e:	08 95       	ret

00000540 <servo_2_free>:
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	80 93 8b 00 	sts	0x008B, r24
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	80 93 8a 00 	sts	0x008A, r24
     54c:	08 95       	ret

0000054e <servo_3_free>:
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	80 93 8d 00 	sts	0x008D, r24
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	80 93 8c 00 	sts	0x008C, r24
     55a:	08 95       	ret

0000055c <adc_pin_config>:
     55c:	10 ba       	out	0x10, r1	; 16
     55e:	11 ba       	out	0x11, r1	; 17
     560:	10 92 07 01 	sts	0x0107, r1
     564:	10 92 08 01 	sts	0x0108, r1
     568:	08 95       	ret

0000056a <servo1_pin_config>:
     56a:	25 9a       	sbi	0x04, 5	; 4
     56c:	2d 9a       	sbi	0x05, 5	; 5
     56e:	08 95       	ret

00000570 <servo2_pin_config>:
     570:	26 9a       	sbi	0x04, 6	; 4
     572:	2e 9a       	sbi	0x05, 6	; 5
     574:	08 95       	ret

00000576 <servo3_pin_config>:
     576:	27 9a       	sbi	0x04, 7	; 4
     578:	2f 9a       	sbi	0x05, 7	; 5
     57a:	08 95       	ret

0000057c <timer1_init>:
     57c:	e1 e8       	ldi	r30, 0x81	; 129
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	10 82       	st	Z, r1
     582:	8c ef       	ldi	r24, 0xFC	; 252
     584:	80 93 85 00 	sts	0x0085, r24
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 84 00 	sts	0x0084, r24
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	90 93 89 00 	sts	0x0089, r25
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	80 93 88 00 	sts	0x0088, r24
     59a:	90 93 8b 00 	sts	0x008B, r25
     59e:	80 93 8a 00 	sts	0x008A, r24
     5a2:	90 93 8d 00 	sts	0x008D, r25
     5a6:	80 93 8c 00 	sts	0x008C, r24
     5aa:	90 93 87 00 	sts	0x0087, r25
     5ae:	80 93 86 00 	sts	0x0086, r24
     5b2:	8b ea       	ldi	r24, 0xAB	; 171
     5b4:	80 93 80 00 	sts	0x0080, r24
     5b8:	10 92 82 00 	sts	0x0082, r1
     5bc:	8c e0       	ldi	r24, 0x0C	; 12
     5be:	80 83       	st	Z, r24
     5c0:	08 95       	ret

000005c2 <port_init>:
     5c2:	ab df       	rcall	.-170    	; 0x51a <lcd_port_config>
     5c4:	cb df       	rcall	.-106    	; 0x55c <adc_pin_config>
     5c6:	3b 9a       	sbi	0x07, 3	; 7
     5c8:	43 98       	cbi	0x08, 3	; 8
     5ca:	cf df       	rcall	.-98     	; 0x56a <servo1_pin_config>
     5cc:	d1 df       	rcall	.-94     	; 0x570 <servo2_pin_config>
     5ce:	d3 df       	rcall	.-90     	; 0x576 <servo3_pin_config>
     5d0:	ab cf       	rjmp	.-170    	; 0x528 <color_sensor_pin_config>
     5d2:	08 95       	ret

000005d4 <buzzer_on>:
     5d4:	86 b1       	in	r24, 0x06	; 6
     5d6:	88 60       	ori	r24, 0x08	; 8
     5d8:	88 b9       	out	0x08, r24	; 8
     5da:	08 95       	ret

000005dc <buzzer_off>:
     5dc:	86 b1       	in	r24, 0x06	; 6
     5de:	87 7f       	andi	r24, 0xF7	; 247
     5e0:	88 b9       	out	0x08, r24	; 8
     5e2:	08 95       	ret

000005e4 <ADC_Conversion>:
     5e4:	88 30       	cpi	r24, 0x08	; 8
     5e6:	18 f0       	brcs	.+6      	; 0x5ee <ADC_Conversion+0xa>
     5e8:	98 e0       	ldi	r25, 0x08	; 8
     5ea:	90 93 7b 00 	sts	0x007B, r25
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	80 62       	ori	r24, 0x20	; 32
     5f2:	80 93 7c 00 	sts	0x007C, r24
     5f6:	ea e7       	ldi	r30, 0x7A	; 122
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	80 64       	ori	r24, 0x40	; 64
     5fe:	80 83       	st	Z, r24
     600:	80 81       	ld	r24, Z
     602:	84 ff       	sbrs	r24, 4
     604:	fd cf       	rjmp	.-6      	; 0x600 <ADC_Conversion+0x1c>
     606:	80 91 79 00 	lds	r24, 0x0079
     60a:	ea e7       	ldi	r30, 0x7A	; 122
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	90 81       	ld	r25, Z
     610:	90 61       	ori	r25, 0x10	; 16
     612:	90 83       	st	Z, r25
     614:	10 92 7b 00 	sts	0x007B, r1
     618:	08 95       	ret

0000061a <color_sensor_pin_interrupt_init>:
     61a:	f8 94       	cli
     61c:	e9 e6       	ldi	r30, 0x69	; 105
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	82 60       	ori	r24, 0x02	; 2
     624:	80 83       	st	Z, r24
     626:	e8 9a       	sbi	0x1d, 0	; 29
     628:	78 94       	sei
     62a:	08 95       	ret

0000062c <__vector_1>:
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	8f 93       	push	r24
     638:	9f 93       	push	r25
     63a:	af 93       	push	r26
     63c:	bf 93       	push	r27
     63e:	80 91 08 02 	lds	r24, 0x0208
     642:	90 91 09 02 	lds	r25, 0x0209
     646:	a0 91 0a 02 	lds	r26, 0x020A
     64a:	b0 91 0b 02 	lds	r27, 0x020B
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	a1 1d       	adc	r26, r1
     652:	b1 1d       	adc	r27, r1
     654:	80 93 08 02 	sts	0x0208, r24
     658:	90 93 09 02 	sts	0x0209, r25
     65c:	a0 93 0a 02 	sts	0x020A, r26
     660:	b0 93 0b 02 	sts	0x020B, r27
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <adc_init>:
     676:	ea e7       	ldi	r30, 0x7A	; 122
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	10 82       	st	Z, r1
     67c:	10 92 7b 00 	sts	0x007B, r1
     680:	80 e2       	ldi	r24, 0x20	; 32
     682:	80 93 7c 00 	sts	0x007C, r24
     686:	80 e8       	ldi	r24, 0x80	; 128
     688:	80 bf       	out	0x30, r24	; 48
     68a:	86 e8       	ldi	r24, 0x86	; 134
     68c:	80 83       	st	Z, r24
     68e:	08 95       	ret

00000690 <color_sensor_scaling>:
     690:	5c 9a       	sbi	0x0b, 4	; 11
     692:	5d 9a       	sbi	0x0b, 5	; 11
     694:	08 95       	ret

00000696 <left_encoder_pin_config>:
     696:	6c 98       	cbi	0x0d, 4	; 13
     698:	74 9a       	sbi	0x0e, 4	; 14
     69a:	08 95       	ret

0000069c <right_encoder_pin_config>:
     69c:	6d 98       	cbi	0x0d, 5	; 13
     69e:	75 9a       	sbi	0x0e, 5	; 14
     6a0:	08 95       	ret

000006a2 <port_init_poz>:
     6a2:	09 df       	rcall	.-494    	; 0x4b6 <motion_pin_config>
     6a4:	f8 df       	rcall	.-16     	; 0x696 <left_encoder_pin_config>
     6a6:	fa cf       	rjmp	.-12     	; 0x69c <right_encoder_pin_config>
     6a8:	08 95       	ret

000006aa <left_position_encoder_interrupt_init>:
     6aa:	f8 94       	cli
     6ac:	ea e6       	ldi	r30, 0x6A	; 106
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	80 83       	st	Z, r24
     6b6:	ec 9a       	sbi	0x1d, 4	; 29
     6b8:	78 94       	sei
     6ba:	08 95       	ret

000006bc <right_position_encoder_interrupt_init>:
     6bc:	f8 94       	cli
     6be:	ea e6       	ldi	r30, 0x6A	; 106
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	88 60       	ori	r24, 0x08	; 8
     6c6:	80 83       	st	Z, r24
     6c8:	ed 9a       	sbi	0x1d, 5	; 29
     6ca:	78 94       	sei
     6cc:	08 95       	ret

000006ce <__vector_6>:
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	80 91 0c 02 	lds	r24, 0x020C
     6e4:	90 91 0d 02 	lds	r25, 0x020D
     6e8:	a0 91 0e 02 	lds	r26, 0x020E
     6ec:	b0 91 0f 02 	lds	r27, 0x020F
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	a1 1d       	adc	r26, r1
     6f4:	b1 1d       	adc	r27, r1
     6f6:	80 93 0c 02 	sts	0x020C, r24
     6fa:	90 93 0d 02 	sts	0x020D, r25
     6fe:	a0 93 0e 02 	sts	0x020E, r26
     702:	b0 93 0f 02 	sts	0x020F, r27
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <__vector_5>:
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	80 91 10 02 	lds	r24, 0x0210
     72e:	90 91 11 02 	lds	r25, 0x0211
     732:	a0 91 12 02 	lds	r26, 0x0212
     736:	b0 91 13 02 	lds	r27, 0x0213
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	a1 1d       	adc	r26, r1
     73e:	b1 1d       	adc	r27, r1
     740:	80 93 10 02 	sts	0x0210, r24
     744:	90 93 11 02 	sts	0x0211, r25
     748:	a0 93 12 02 	sts	0x0212, r26
     74c:	b0 93 13 02 	sts	0x0213, r27
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <angle_rotate>:
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	bc 01       	movw	r22, r24
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	6f d5       	rcall	.+2782   	; 0x1254 <__floatunsisf>
     776:	28 e4       	ldi	r18, 0x48	; 72
     778:	31 ee       	ldi	r19, 0xE1	; 225
     77a:	42 e8       	ldi	r20, 0x82	; 130
     77c:	50 e4       	ldi	r21, 0x40	; 64
     77e:	d6 d4       	rcall	.+2476   	; 0x112c <__divsf3>
     780:	3d d5       	rcall	.+2682   	; 0x11fc <__fixunssfsi>
     782:	cb 01       	movw	r24, r22
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	10 92 0c 02 	sts	0x020C, r1
     78c:	10 92 0d 02 	sts	0x020D, r1
     790:	10 92 0e 02 	sts	0x020E, r1
     794:	10 92 0f 02 	sts	0x020F, r1
     798:	10 92 10 02 	sts	0x0210, r1
     79c:	10 92 11 02 	sts	0x0211, r1
     7a0:	10 92 12 02 	sts	0x0212, r1
     7a4:	10 92 13 02 	sts	0x0213, r1
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	e0 e0       	ldi	r30, 0x00	; 0
     7ac:	c0 90 0c 02 	lds	r12, 0x020C
     7b0:	d0 90 0d 02 	lds	r13, 0x020D
     7b4:	e0 90 0e 02 	lds	r14, 0x020E
     7b8:	f0 90 0f 02 	lds	r15, 0x020F
     7bc:	00 91 10 02 	lds	r16, 0x0210
     7c0:	10 91 11 02 	lds	r17, 0x0211
     7c4:	20 91 12 02 	lds	r18, 0x0212
     7c8:	30 91 13 02 	lds	r19, 0x0213
     7cc:	45 2f       	mov	r20, r21
     7ce:	08 17       	cp	r16, r24
     7d0:	19 07       	cpc	r17, r25
     7d2:	2a 07       	cpc	r18, r26
     7d4:	3b 07       	cpc	r19, r27
     7d6:	08 f4       	brcc	.+2      	; 0x7da <angle_rotate+0x78>
     7d8:	4e 2f       	mov	r20, r30
     7da:	41 11       	cpse	r20, r1
     7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <angle_rotate+0x8e>
     7de:	25 2f       	mov	r18, r21
     7e0:	c8 16       	cp	r12, r24
     7e2:	d9 06       	cpc	r13, r25
     7e4:	ea 06       	cpc	r14, r26
     7e6:	fb 06       	cpc	r15, r27
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <angle_rotate+0x8a>
     7ea:	2e 2f       	mov	r18, r30
     7ec:	22 23       	and	r18, r18
     7ee:	f1 f2       	breq	.-68     	; 0x7ac <angle_rotate+0x4a>
     7f0:	91 de       	rcall	.-734    	; 0x514 <stop>
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <linear_distance_mm>:
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	bc 01       	movw	r22, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	24 d5       	rcall	.+2632   	; 0x1254 <__floatunsisf>
     80c:	25 ee       	ldi	r18, 0xE5	; 229
     80e:	30 ed       	ldi	r19, 0xD0	; 208
     810:	4a ea       	ldi	r20, 0xAA	; 170
     812:	50 e4       	ldi	r21, 0x40	; 64
     814:	8b d4       	rcall	.+2326   	; 0x112c <__divsf3>
     816:	f2 d4       	rcall	.+2532   	; 0x11fc <__fixunssfsi>
     818:	10 92 0c 02 	sts	0x020C, r1
     81c:	10 92 0d 02 	sts	0x020D, r1
     820:	10 92 0e 02 	sts	0x020E, r1
     824:	10 92 0f 02 	sts	0x020F, r1
     828:	00 91 0c 02 	lds	r16, 0x020C
     82c:	10 91 0d 02 	lds	r17, 0x020D
     830:	20 91 0e 02 	lds	r18, 0x020E
     834:	30 91 0f 02 	lds	r19, 0x020F
     838:	60 17       	cp	r22, r16
     83a:	71 07       	cpc	r23, r17
     83c:	82 07       	cpc	r24, r18
     83e:	93 07       	cpc	r25, r19
     840:	98 f7       	brcc	.-26     	; 0x828 <linear_distance_mm+0x28>
     842:	68 de       	rcall	.-816    	; 0x514 <stop>
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <forward_mm>:
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ec 01       	movw	r28, r24
     850:	49 de       	rcall	.-878    	; 0x4e4 <forward>
     852:	ce 01       	movw	r24, r28
     854:	d5 df       	rcall	.-86     	; 0x800 <linear_distance_mm>
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <back_mm>:
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	ec 01       	movw	r28, r24
     862:	43 de       	rcall	.-890    	; 0x4ea <back>
     864:	ce 01       	movw	r24, r28
     866:	cc df       	rcall	.-104    	; 0x800 <linear_distance_mm>
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <left_degrees>:
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	3d de       	rcall	.-902    	; 0x4f0 <left>
     876:	ce 01       	movw	r24, r28
     878:	74 df       	rcall	.-280    	; 0x762 <angle_rotate>
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <init_devices>:
     880:	f8 94       	cli
     882:	0f df       	rcall	.-482    	; 0x6a2 <port_init_poz>
     884:	12 df       	rcall	.-476    	; 0x6aa <left_position_encoder_interrupt_init>
     886:	1a df       	rcall	.-460    	; 0x6bc <right_position_encoder_interrupt_init>
     888:	9c de       	rcall	.-712    	; 0x5c2 <port_init>
     88a:	c7 de       	rcall	.-626    	; 0x61a <color_sensor_pin_interrupt_init>
     88c:	f4 de       	rcall	.-536    	; 0x676 <adc_init>
     88e:	13 de       	rcall	.-986    	; 0x4b6 <motion_pin_config>
     890:	f7 dd       	rcall	.-1042   	; 0x480 <timer5_init>
     892:	74 de       	rcall	.-792    	; 0x57c <timer1_init>
     894:	78 94       	sei
     896:	08 95       	ret

00000898 <Uturn>:
	while(ADC_Conversion(2)<=40);
	stop();
}
void Uturn()
{
	left();
     898:	2b de       	rcall	.-938    	; 0x4f0 <left>
	left();
     89a:	2a ce       	rjmp	.-940    	; 0x4f0 <left>
     89c:	08 95       	ret

0000089e <blankUturn>:
}
void blankUturn()
{
	left_degrees(180);
     89e:	84 eb       	ldi	r24, 0xB4	; 180
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	e5 cf       	rjmp	.-54     	; 0x86e <left_degrees>
     8a4:	08 95       	ret

000008a6 <set_color>:

//**********BlackLine Follower **************

void set_color()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	9d de       	rcall	.-710    	; 0x5e4 <ADC_Conversion>
     8aa:	80 93 07 02 	sts	0x0207, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	99 de       	rcall	.-718    	; 0x5e4 <ADC_Conversion>
     8b2:	80 93 06 02 	sts	0x0206, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	95 de       	rcall	.-726    	; 0x5e4 <ADC_Conversion>
     8ba:	80 93 05 02 	sts	0x0205, r24
     8be:	08 95       	ret

000008c0 <Delay>:
}
char Delay(int tim)
{
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	8c 01       	movw	r16, r24
	int i;
	for(i=0;i<tim && ADC_Conversion(2)<0x28;i++)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40));i++)
     8ca:	18 16       	cp	r1, r24
     8cc:	19 06       	cpc	r1, r25
     8ce:	8c f4       	brge	.+34     	; 0x8f2 <Delay+0x32>
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <Delay+0x28>
     8d6:	86 e6       	ldi	r24, 0x66	; 102
     8d8:	9e e0       	ldi	r25, 0x0E	; 14
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <Delay+0x1a>
     8de:	00 00       	nop
     8e0:	21 96       	adiw	r28, 0x01	; 1
     8e2:	c0 17       	cp	r28, r16
     8e4:	d1 07       	cpc	r29, r17
     8e6:	39 f0       	breq	.+14     	; 0x8f6 <Delay+0x36>
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	7c de       	rcall	.-776    	; 0x5e4 <ADC_Conversion>
     8ec:	88 32       	cpi	r24, 0x28	; 40
     8ee:	98 f3       	brcs	.-26     	; 0x8d6 <Delay+0x16>
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <Delay+0x36>
     8f2:	c0 e0       	ldi	r28, 0x00	; 0
     8f4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//set_color();
		_delay_ms(1);
	}
	stop();
     8f6:	0e de       	rcall	.-996    	; 0x514 <stop>
	if(i<tim)
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	c0 17       	cp	r28, r16
     8fc:	d1 07       	cpc	r29, r17
     8fe:	0c f0       	brlt	.+2      	; 0x902 <Delay+0x42>
     900:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
	else return 0;
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <semiCorrect_Indi>:
//*******************INDICATOR********************
void semiCorrect_Indi()
{
	
	//lcd_print(1,2,1,1);
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
     90c:	80 91 06 02 	lds	r24, 0x0206
     910:	89 32       	cpi	r24, 0x29	; 41
     912:	40 f0       	brcs	.+16     	; 0x924 <semiCorrect_Indi+0x18>
     914:	90 91 07 02 	lds	r25, 0x0207
     918:	99 32       	cpi	r25, 0x29	; 41
     91a:	08 f5       	brcc	.+66     	; 0x95e <semiCorrect_Indi+0x52>
     91c:	90 91 05 02 	lds	r25, 0x0205
     920:	99 32       	cpi	r25, 0x29	; 41
     922:	e8 f4       	brcc	.+58     	; 0x95e <semiCorrect_Indi+0x52>
	{
		return;
	}
	if(Center_white_line<40)
     924:	88 32       	cpi	r24, 0x28	; 40
     926:	d8 f4       	brcc	.+54     	; 0x95e <semiCorrect_Indi+0x52>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
     928:	80 91 07 02 	lds	r24, 0x0207
     92c:	89 32       	cpi	r24, 0x29	; 41
     92e:	58 f0       	brcs	.+22     	; 0x946 <semiCorrect_Indi+0x3a>
     930:	90 91 05 02 	lds	r25, 0x0205
     934:	98 32       	cpi	r25, 0x28	; 40
     936:	38 f4       	brcc	.+14     	; 0x946 <semiCorrect_Indi+0x3a>
			//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,1,1);
				left();
     938:	db dd       	rcall	.-1098   	; 0x4f0 <left>
				set_color();
     93a:	b5 df       	rcall	.-150    	; 0x8a6 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
			//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
     93c:	80 91 06 02 	lds	r24, 0x0206
     940:	88 32       	cpi	r24, 0x28	; 40
     942:	d0 f3       	brcs	.-12     	; 0x938 <semiCorrect_Indi+0x2c>
     944:	08 95       	ret
				left();
				set_color();
			}
			//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
     946:	90 91 05 02 	lds	r25, 0x0205
     94a:	99 32       	cpi	r25, 0x29	; 41
     94c:	40 f0       	brcs	.+16     	; 0x95e <semiCorrect_Indi+0x52>
     94e:	88 32       	cpi	r24, 0x28	; 40
     950:	30 f4       	brcc	.+12     	; 0x95e <semiCorrect_Indi+0x52>
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,2,1);
				right();
     952:	d1 dd       	rcall	.-1118   	; 0x4f6 <right>
				set_color();
     954:	a8 df       	rcall	.-176    	; 0x8a6 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
     956:	80 91 06 02 	lds	r24, 0x0206
     95a:	88 32       	cpi	r24, 0x28	; 40
     95c:	d0 f3       	brcs	.-12     	; 0x952 <semiCorrect_Indi+0x46>
     95e:	08 95       	ret

00000960 <correct_Indi>:
	}
	//lcd_print(1,2,0,1);
	
}
void correct_Indi()
{
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
	unsigned int i=50;
	Degrees=5;
     964:	85 e0       	ldi	r24, 0x05	; 5
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	90 93 19 02 	sts	0x0219, r25
     96c:	80 93 18 02 	sts	0x0218, r24
	stop();
     970:	d1 dd       	rcall	.-1118   	; 0x514 <stop>
	//lcd_print(1,2,0,1);
	
}
void correct_Indi()
{
	unsigned int i=50;
     972:	c2 e3       	ldi	r28, 0x32	; 50
     974:	d0 e0       	ldi	r29, 0x00	; 0
	//else
	
		
		while(1)
		{
			left();
     976:	bc dd       	rcall	.-1160   	; 0x4f0 <left>
			if(Delay(i))
     978:	ce 01       	movw	r24, r28
     97a:	a2 df       	rcall	.-188    	; 0x8c0 <Delay>
     97c:	81 11       	cpse	r24, r1
     97e:	24 c0       	rjmp	.+72     	; 0x9c8 <correct_Indi+0x68>
				return;
			stop();
     980:	c9 dd       	rcall	.-1134   	; 0x514 <stop>
			lcd_print(1,1,1,1);
     982:	21 e0       	ldi	r18, 0x01	; 1
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	41 e0       	ldi	r20, 0x01	; 1
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	89 dc       	rcall	.-1774   	; 0x2a2 <lcd_print>
			//set_color();
			semiCorrect_Indi();
     990:	bd df       	rcall	.-134    	; 0x90c <semiCorrect_Indi>
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	27 de       	rcall	.-946    	; 0x5e4 <ADC_Conversion>
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	b0 f4       	brcc	.+44     	; 0x9c6 <correct_Indi+0x66>
				break;
			i+=50;
			right();
     99a:	ad dd       	rcall	.-1190   	; 0x4f6 <right>
			if(Delay(i))
     99c:	ce 01       	movw	r24, r28
     99e:	c2 96       	adiw	r24, 0x32	; 50
     9a0:	8f df       	rcall	.-226    	; 0x8c0 <Delay>
     9a2:	81 11       	cpse	r24, r1
     9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <correct_Indi+0x68>
				return;
			stop();
     9a6:	b6 dd       	rcall	.-1172   	; 0x514 <stop>
			lcd_print(1,1,2,1);
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	42 e0       	ldi	r20, 0x02	; 2
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	76 dc       	rcall	.-1812   	; 0x2a2 <lcd_print>
			semiCorrect_Indi();
     9b6:	aa df       	rcall	.-172    	; 0x90c <semiCorrect_Indi>
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	14 de       	rcall	.-984    	; 0x5e4 <ADC_Conversion>
     9bc:	89 32       	cpi	r24, 0x29	; 41
     9be:	18 f4       	brcc	.+6      	; 0x9c6 <correct_Indi+0x66>
				break;
			//d*=2;
			//set_color();
			//i+=2;
			i+=50;
     9c0:	cc 59       	subi	r28, 0x9C	; 156
     9c2:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
     9c4:	d8 cf       	rjmp	.-80     	; 0x976 <correct_Indi+0x16>
	//lcd("-");
	stop();
     9c6:	a6 dd       	rcall	.-1204   	; 0x514 <stop>
	return;
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <noNatak_Indi>:
{
	int flag=0;
	//buzzer_on();
	//lcd_print(2,1,7,1);
	//lcd("no");
	velocity(correct_v,correct_v);
     9ce:	80 91 02 02 	lds	r24, 0x0202
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9d2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     9d6:	80 93 2a 01 	sts	0x012A, r24
	if(Center_white_line<40)
     9da:	80 91 06 02 	lds	r24, 0x0206
     9de:	88 32       	cpi	r24, 0x28	; 40
     9e0:	80 f5       	brcc	.+96     	; 0xa42 <noNatak_Indi+0x74>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
     9e2:	80 91 07 02 	lds	r24, 0x0207
     9e6:	89 32       	cpi	r24, 0x29	; 41
     9e8:	a0 f0       	brcs	.+40     	; 0xa12 <noNatak_Indi+0x44>
     9ea:	90 91 05 02 	lds	r25, 0x0205
     9ee:	98 32       	cpi	r25, 0x28	; 40
     9f0:	80 f4       	brcc	.+32     	; 0xa12 <noNatak_Indi+0x44>
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <noNatak_Indi+0x2a>
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
     9f4:	7d dd       	rcall	.-1286   	; 0x4f0 <left>
				set_color();
     9f6:	57 df       	rcall	.-338    	; 0x8a6 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
     9f8:	80 91 06 02 	lds	r24, 0x0206
     9fc:	89 32       	cpi	r24, 0x29	; 41
     9fe:	d0 f3       	brcs	.-12     	; 0x9f4 <noNatak_Indi+0x26>
     a00:	80 91 07 02 	lds	r24, 0x0207
     a04:	88 32       	cpi	r24, 0x28	; 40
     a06:	b0 f7       	brcc	.-20     	; 0x9f4 <noNatak_Indi+0x26>
     a08:	80 91 05 02 	lds	r24, 0x0205
     a0c:	88 32       	cpi	r24, 0x28	; 40
     a0e:	90 f7       	brcc	.-28     	; 0x9f4 <noNatak_Indi+0x26>
     a10:	27 c0       	rjmp	.+78     	; 0xa60 <noNatak_Indi+0x92>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
     a12:	90 91 05 02 	lds	r25, 0x0205
     a16:	99 32       	cpi	r25, 0x29	; 41
     a18:	90 f0       	brcs	.+36     	; 0xa3e <noNatak_Indi+0x70>
     a1a:	88 32       	cpi	r24, 0x28	; 40
     a1c:	80 f4       	brcc	.+32     	; 0xa3e <noNatak_Indi+0x70>
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <noNatak_Indi+0x56>
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
     a20:	6a dd       	rcall	.-1324   	; 0x4f6 <right>
				set_color();
     a22:	41 df       	rcall	.-382    	; 0x8a6 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
     a24:	80 91 06 02 	lds	r24, 0x0206
     a28:	89 32       	cpi	r24, 0x29	; 41
     a2a:	d0 f3       	brcs	.-12     	; 0xa20 <noNatak_Indi+0x52>
     a2c:	80 91 07 02 	lds	r24, 0x0207
     a30:	88 32       	cpi	r24, 0x28	; 40
     a32:	b0 f7       	brcc	.-20     	; 0xa20 <noNatak_Indi+0x52>
     a34:	80 91 05 02 	lds	r24, 0x0205
     a38:	88 32       	cpi	r24, 0x28	; 40
     a3a:	90 f7       	brcc	.-28     	; 0xa20 <noNatak_Indi+0x52>
     a3c:	11 c0       	rjmp	.+34     	; 0xa60 <noNatak_Indi+0x92>
			
		}
		else
		{
			flag=1;
			correct_Indi();
     a3e:	90 df       	rcall	.-224    	; 0x960 <correct_Indi>
     a40:	0f c0       	rjmp	.+30     	; 0xa60 <noNatak_Indi+0x92>
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
     a42:	80 91 07 02 	lds	r24, 0x0207
     a46:	89 32       	cpi	r24, 0x29	; 41
     a48:	20 f0       	brcs	.+8      	; 0xa52 <noNatak_Indi+0x84>
     a4a:	90 91 05 02 	lds	r25, 0x0205
     a4e:	98 32       	cpi	r25, 0x28	; 40
     a50:	40 f0       	brcs	.+16     	; 0xa62 <noNatak_Indi+0x94>
				soft_right_2();
				set_color();
			}
			lcd("-");*/
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
     a52:	88 32       	cpi	r24, 0x28	; 40
     a54:	20 f4       	brcc	.+8      	; 0xa5e <noNatak_Indi+0x90>
     a56:	80 91 05 02 	lds	r24, 0x0205
     a5a:	89 32       	cpi	r24, 0x29	; 41
     a5c:	10 f4       	brcc	.+4      	; 0xa62 <noNatak_Indi+0x94>
			lcd("-");*/
		}
		else
		{
			flag=1;
			correct_Indi();
     a5e:	80 df       	rcall	.-256    	; 0x960 <correct_Indi>
		}
	}
	if(flag==0)	
		correct_Indi();
	stop();
     a60:	59 cd       	rjmp	.-1358   	; 0x514 <stop>
     a62:	08 95       	ret

00000a64 <forwardJaa_Indi>:
	//buzzer_off();
	return;
}

void forwardJaa_Indi()
{
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a6e:	08 e2       	ldi	r16, 0x28	; 40
     a70:	11 e0       	ldi	r17, 0x01	; 1
     a72:	0f 2e       	mov	r0, r31
     a74:	f0 ef       	ldi	r31, 0xF0	; 240
     a76:	ff 2e       	mov	r15, r31
     a78:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     a7a:	ca e2       	ldi	r28, 0x2A	; 42
     a7c:	d1 e0       	ldi	r29, 0x01	; 1
	do
	{
		forward();
     a7e:	32 dd       	rcall	.-1436   	; 0x4e4 <forward>
		//_delay_ms(200);
		set_color();
     a80:	12 df       	rcall	.-476    	; 0x8a6 <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
     a82:	80 91 06 02 	lds	r24, 0x0206
     a86:	89 32       	cpi	r24, 0x29	; 41
     a88:	40 f0       	brcs	.+16     	; 0xa9a <forwardJaa_Indi+0x36>
     a8a:	80 91 07 02 	lds	r24, 0x0207
     a8e:	89 32       	cpi	r24, 0x29	; 41
     a90:	a8 f4       	brcc	.+42     	; 0xabc <forwardJaa_Indi+0x58>
     a92:	80 91 05 02 	lds	r24, 0x0205
     a96:	89 32       	cpi	r24, 0x29	; 41
     a98:	88 f4       	brcc	.+34     	; 0xabc <forwardJaa_Indi+0x58>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a9a:	f8 01       	movw	r30, r16
     a9c:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     a9e:	f8 82       	st	Y, r15
			return;
		}
		velocity(240,240);
		//velocity(v+vi,v+vi);
		//i+=20;
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
     aa0:	80 91 06 02 	lds	r24, 0x0206
     aa4:	89 32       	cpi	r24, 0x29	; 41
     aa6:	40 f0       	brcs	.+16     	; 0xab8 <forwardJaa_Indi+0x54>
     aa8:	80 91 07 02 	lds	r24, 0x0207
     aac:	88 32       	cpi	r24, 0x28	; 40
     aae:	20 f4       	brcc	.+8      	; 0xab8 <forwardJaa_Indi+0x54>
     ab0:	80 91 05 02 	lds	r24, 0x0205
     ab4:	88 32       	cpi	r24, 0x28	; 40
     ab6:	18 f3       	brcs	.-58     	; 0xa7e <forwardJaa_Indi+0x1a>
	
	noNatak_Indi();
     ab8:	8a df       	rcall	.-236    	; 0x9ce <noNatak_Indi>
	forwardJaa_Indi();
     aba:	d4 df       	rcall	.-88     	; 0xa64 <forwardJaa_Indi>
	return;
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	08 95       	ret

00000ac8 <node>:
//***********END INDICATOR****************
void node()
{
	//buzzer();
	//lcd_print(1,1,1,1);
	velocity(turn_v,turn_v);
     ac8:	80 91 00 02 	lds	r24, 0x0200
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     acc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     ad0:	80 93 2a 01 	sts	0x012A, r24
	forward_mm(70);
     ad4:	86 e4       	ldi	r24, 0x46	; 70
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	b8 de       	rcall	.-656    	; 0x84a <forward_mm>
	stop();
     ada:	1c cd       	rjmp	.-1480   	; 0x514 <stop>
     adc:	08 95       	ret

00000ade <turnRight>:
unsigned char Right_white_line = 0;
int correct_v=200,turn_v=150;
char f=0;
void turnRight()
{
	node();
     ade:	f4 df       	rcall	.-24     	; 0xac8 <node>
	right();
     ae0:	0a dd       	rcall	.-1516   	; 0x4f6 <right>
     ae2:	2f ef       	ldi	r18, 0xFF	; 255
     ae4:	8f e7       	ldi	r24, 0x7F	; 127
     ae6:	9f e1       	ldi	r25, 0x1F	; 31
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	80 40       	sbci	r24, 0x00	; 0
     aec:	90 40       	sbci	r25, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <turnRight+0xa>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <turnRight+0x14>
     af2:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(2)<=40);
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	76 dd       	rcall	.-1300   	; 0x5e4 <ADC_Conversion>
     af8:	89 32       	cpi	r24, 0x29	; 41
     afa:	e0 f3       	brcs	.-8      	; 0xaf4 <turnRight+0x16>
	stop();
     afc:	0b cd       	rjmp	.-1514   	; 0x514 <stop>
     afe:	08 95       	ret

00000b00 <turnLeft>:
}
void turnLeft()
{
	node();
     b00:	e3 df       	rcall	.-58     	; 0xac8 <node>
	left();
     b02:	f6 dc       	rcall	.-1556   	; 0x4f0 <left>
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	8f e7       	ldi	r24, 0x7F	; 127
     b08:	9f e1       	ldi	r25, 0x1F	; 31
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	80 40       	sbci	r24, 0x00	; 0
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <turnLeft+0xa>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <turnLeft+0x14>
     b14:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(2)<=40);
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	65 dd       	rcall	.-1334   	; 0x5e4 <ADC_Conversion>
     b1a:	89 32       	cpi	r24, 0x29	; 41
     b1c:	e0 f3       	brcs	.-8      	; 0xb16 <turnLeft+0x16>
	stop();
     b1e:	fa cc       	rjmp	.-1548   	; 0x514 <stop>
     b20:	08 95       	ret

00000b22 <semiCorrect>:

char semiCorrect()
{
	
	//lcd_print(1,2,1,1);
	if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
     b22:	80 91 06 02 	lds	r24, 0x0206
     b26:	89 32       	cpi	r24, 0x29	; 41
     b28:	58 f0       	brcs	.+22     	; 0xb40 <semiCorrect+0x1e>
     b2a:	90 91 07 02 	lds	r25, 0x0207
     b2e:	99 32       	cpi	r25, 0x29	; 41
     b30:	20 f4       	brcc	.+8      	; 0xb3a <semiCorrect+0x18>
     b32:	90 91 05 02 	lds	r25, 0x0205
     b36:	99 32       	cpi	r25, 0x29	; 41
     b38:	18 f0       	brcs	.+6      	; 0xb40 <semiCorrect+0x1e>
	{
		node();
     b3a:	c6 df       	rcall	.-116    	; 0xac8 <node>
		return 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	08 95       	ret
	}
	if(Center_white_line<40)
     b40:	88 32       	cpi	r24, 0x28	; 40
     b42:	e0 f4       	brcc	.+56     	; 0xb7c <semiCorrect+0x5a>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
     b44:	80 91 07 02 	lds	r24, 0x0207
     b48:	89 32       	cpi	r24, 0x29	; 41
     b4a:	58 f0       	brcs	.+22     	; 0xb62 <semiCorrect+0x40>
     b4c:	90 91 05 02 	lds	r25, 0x0205
     b50:	98 32       	cpi	r25, 0x28	; 40
     b52:	38 f4       	brcc	.+14     	; 0xb62 <semiCorrect+0x40>
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,1,1);
				left();
     b54:	cd dc       	rcall	.-1638   	; 0x4f0 <left>
				set_color();
     b56:	a7 de       	rcall	.-690    	; 0x8a6 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
	//		lcd("bww");
			
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
     b58:	80 91 06 02 	lds	r24, 0x0206
     b5c:	88 32       	cpi	r24, 0x28	; 40
     b5e:	d0 f3       	brcs	.-12     	; 0xb54 <semiCorrect+0x32>
     b60:	0f c0       	rjmp	.+30     	; 0xb80 <semiCorrect+0x5e>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
     b62:	90 91 05 02 	lds	r25, 0x0205
     b66:	99 32       	cpi	r25, 0x29	; 41
     b68:	68 f0       	brcs	.+26     	; 0xb84 <semiCorrect+0x62>
     b6a:	88 32       	cpi	r24, 0x28	; 40
     b6c:	68 f4       	brcc	.+26     	; 0xb88 <semiCorrect+0x66>
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
			{
				//lcd_print(1,2,2,1);
				right();
     b6e:	c3 dc       	rcall	.-1658   	; 0x4f6 <right>
				set_color();
     b70:	9a de       	rcall	.-716    	; 0x8a6 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			
			//lcd("wwb");
			while((Center_white_line<0x28))// && Left_white_line<40 && Right_white_line<40))
     b72:	80 91 06 02 	lds	r24, 0x0206
     b76:	88 32       	cpi	r24, 0x28	; 40
     b78:	d0 f3       	brcs	.-12     	; 0xb6e <semiCorrect+0x4c>
     b7a:	08 c0       	rjmp	.+16     	; 0xb8c <semiCorrect+0x6a>
			}
			//lcd("-");
			
		}
	}
	return 0;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	08 95       	ret
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 95       	ret
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	08 95       	ret
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	08 95       	ret
     b8c:	80 e0       	ldi	r24, 0x00	; 0
	//lcd_print(1,2,0,1);
	
}
     b8e:	08 95       	ret

00000b90 <correct>:
char correct()
{
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
	unsigned int d=2;
	unsigned int i=50;
	Degrees=5;
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 19 02 	sts	0x0219, r25
     b9e:	80 93 18 02 	sts	0x0218, r24
	stop();
     ba2:	b8 dc       	rcall	.-1680   	; 0x514 <stop>
	
}
char correct()
{
	unsigned int d=2;
	unsigned int i=50;
     ba4:	c2 e3       	ldi	r28, 0x32	; 50
     ba6:	d0 e0       	ldi	r29, 0x00	; 0
	//else
	
		
		while(1)
		{
			left();
     ba8:	a3 dc       	rcall	.-1722   	; 0x4f0 <left>
			if(Delay(i))
     baa:	ce 01       	movw	r24, r28
     bac:	89 de       	rcall	.-750    	; 0x8c0 <Delay>
     bae:	81 11       	cpse	r24, r1
     bb0:	1c c0       	rjmp	.+56     	; 0xbea <correct+0x5a>
				return 0;
			stop();
     bb2:	b0 dc       	rcall	.-1696   	; 0x514 <stop>
			
			//set_color();
			if(semiCorrect())
     bb4:	b6 df       	rcall	.-148    	; 0xb22 <semiCorrect>
     bb6:	18 2f       	mov	r17, r24
     bb8:	81 11       	cpse	r24, r1
     bba:	19 c0       	rjmp	.+50     	; 0xbee <correct+0x5e>
				return 1;
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	12 dd       	rcall	.-1500   	; 0x5e4 <ADC_Conversion>
     bc0:	89 32       	cpi	r24, 0x29	; 41
     bc2:	88 f4       	brcc	.+34     	; 0xbe6 <correct+0x56>
				break;
			i+=50;
			right();
     bc4:	98 dc       	rcall	.-1744   	; 0x4f6 <right>
			if(Delay(i))
     bc6:	ce 01       	movw	r24, r28
     bc8:	c2 96       	adiw	r24, 0x32	; 50
     bca:	7a de       	rcall	.-780    	; 0x8c0 <Delay>
     bcc:	81 11       	cpse	r24, r1
     bce:	12 c0       	rjmp	.+36     	; 0xbf4 <correct+0x64>
				return 0;
			stop();
     bd0:	a1 dc       	rcall	.-1726   	; 0x514 <stop>
			
			if(semiCorrect())
     bd2:	a7 df       	rcall	.-178    	; 0xb22 <semiCorrect>
     bd4:	81 11       	cpse	r24, r1
     bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <correct+0x62>
				return 1;
			if(ADC_Conversion(2)>40)// && ADC_Conversion(1)<40 && ADC_Conversion(3)<40)
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	04 dd       	rcall	.-1528   	; 0x5e4 <ADC_Conversion>
     bdc:	89 32       	cpi	r24, 0x29	; 41
     bde:	18 f4       	brcc	.+6      	; 0xbe6 <correct+0x56>
				break;
			//d*=2;
			//set_color();
			//i+=2;
			i+=50;
     be0:	cc 59       	subi	r28, 0x9C	; 156
     be2:	df 4f       	sbci	r29, 0xFF	; 255
		
	}
     be4:	e1 cf       	rjmp	.-62     	; 0xba8 <correct+0x18>
	//lcd("-");
	stop();
     be6:	96 dc       	rcall	.-1748   	; 0x514 <stop>
	return 0;
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <correct+0x64>
		
		while(1)
		{
			left();
			if(Delay(i))
				return 0;
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <correct+0x64>
			stop();
			
			//set_color();
			if(semiCorrect())
				return 1;
     bee:	11 e0       	ldi	r17, 0x01	; 1
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <correct+0x64>
			if(Delay(i))
				return 0;
			stop();
			
			if(semiCorrect())
				return 1;
     bf2:	11 e0       	ldi	r17, 0x01	; 1
		
	}
	//lcd("-");
	stop();
	return 0;
}
     bf4:	81 2f       	mov	r24, r17
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	08 95       	ret

00000bfe <noNatak>:
{
	int flag=0;
	//buzzer_on();
	//lcd_print(2,1,7,1);
	//lcd("no");
	velocity(correct_v,correct_v);
     bfe:	80 91 02 02 	lds	r24, 0x0202
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c02:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c06:	80 93 2a 01 	sts	0x012A, r24
	if(Center_white_line<40)
     c0a:	80 91 06 02 	lds	r24, 0x0206
     c0e:	88 32       	cpi	r24, 0x28	; 40
     c10:	90 f5       	brcc	.+100    	; 0xc76 <noNatak+0x78>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
     c12:	80 91 07 02 	lds	r24, 0x0207
     c16:	89 32       	cpi	r24, 0x29	; 41
     c18:	a0 f0       	brcs	.+40     	; 0xc42 <noNatak+0x44>
     c1a:	90 91 05 02 	lds	r25, 0x0205
     c1e:	98 32       	cpi	r25, 0x28	; 40
     c20:	80 f4       	brcc	.+32     	; 0xc42 <noNatak+0x44>
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <noNatak+0x2a>
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				left();
     c24:	65 dc       	rcall	.-1846   	; 0x4f0 <left>
				set_color();
     c26:	3f de       	rcall	.-898    	; 0x8a6 <set_color>
	{
		if(Left_white_line>40 && Right_white_line<40) //bww
		{
		//	lcd("bww");
			flag=1;
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
     c28:	80 91 06 02 	lds	r24, 0x0206
     c2c:	89 32       	cpi	r24, 0x29	; 41
     c2e:	d0 f3       	brcs	.-12     	; 0xc24 <noNatak+0x26>
     c30:	80 91 07 02 	lds	r24, 0x0207
     c34:	88 32       	cpi	r24, 0x28	; 40
     c36:	b0 f7       	brcc	.-20     	; 0xc24 <noNatak+0x26>
     c38:	80 91 05 02 	lds	r24, 0x0205
     c3c:	88 32       	cpi	r24, 0x28	; 40
     c3e:	90 f7       	brcc	.-28     	; 0xc24 <noNatak+0x26>
     c40:	33 c0       	rjmp	.+102    	; 0xca8 <noNatak+0xaa>
				left();
				set_color();
			}
		//	lcd("-");
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
     c42:	90 91 05 02 	lds	r25, 0x0205
     c46:	99 32       	cpi	r25, 0x29	; 41
     c48:	90 f0       	brcs	.+36     	; 0xc6e <noNatak+0x70>
     c4a:	88 32       	cpi	r24, 0x28	; 40
     c4c:	80 f4       	brcc	.+32     	; 0xc6e <noNatak+0x70>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <noNatak+0x56>
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
			{
				right();
     c50:	52 dc       	rcall	.-1884   	; 0x4f6 <right>
				set_color();
     c52:	29 de       	rcall	.-942    	; 0x8a6 <set_color>
		}
		else if(Right_white_line>40 && Left_white_line<40)	//wwb
		{
			flag=1;
			//lcd("wwb");
			while(!(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40))
     c54:	80 91 06 02 	lds	r24, 0x0206
     c58:	89 32       	cpi	r24, 0x29	; 41
     c5a:	d0 f3       	brcs	.-12     	; 0xc50 <noNatak+0x52>
     c5c:	80 91 07 02 	lds	r24, 0x0207
     c60:	88 32       	cpi	r24, 0x28	; 40
     c62:	b0 f7       	brcc	.-20     	; 0xc50 <noNatak+0x52>
     c64:	80 91 05 02 	lds	r24, 0x0205
     c68:	88 32       	cpi	r24, 0x28	; 40
     c6a:	90 f7       	brcc	.-28     	; 0xc50 <noNatak+0x52>
     c6c:	1d c0       	rjmp	.+58     	; 0xca8 <noNatak+0xaa>
			
		}
		else
		{
			flag=1;
			if(correct())
     c6e:	90 df       	rcall	.-224    	; 0xb90 <correct>
     c70:	88 23       	and	r24, r24
     c72:	d1 f0       	breq	.+52     	; 0xca8 <noNatak+0xaa>
     c74:	1d c0       	rjmp	.+58     	; 0xcb0 <noNatak+0xb2>
				return 1;
		}
	}
	else
	{
		if(Left_white_line>40 && Right_white_line<40)	//bbw
     c76:	80 91 07 02 	lds	r24, 0x0207
     c7a:	89 32       	cpi	r24, 0x29	; 41
     c7c:	40 f0       	brcs	.+16     	; 0xc8e <noNatak+0x90>
     c7e:	90 91 05 02 	lds	r25, 0x0205
     c82:	98 32       	cpi	r25, 0x28	; 40
     c84:	20 f4       	brcc	.+8      	; 0xc8e <noNatak+0x90>
		{
			flag=1;
			node();
     c86:	20 df       	rcall	.-448    	; 0xac8 <node>
			return 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	08 95       	ret
				soft_right_2();
				set_color();
			}
			lcd("-");*/
		}
		else if(Left_white_line<40 && Right_white_line>40)	//wbb
     c8e:	88 32       	cpi	r24, 0x28	; 40
     c90:	40 f4       	brcc	.+16     	; 0xca2 <noNatak+0xa4>
     c92:	80 91 05 02 	lds	r24, 0x0205
     c96:	89 32       	cpi	r24, 0x29	; 41
     c98:	20 f0       	brcs	.+8      	; 0xca2 <noNatak+0xa4>
		{
			flag=1;
			node();
     c9a:	16 df       	rcall	.-468    	; 0xac8 <node>
			return 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	08 95       	ret
			lcd("-");*/
		}
		else
		{
			flag=1;
			if(correct())
     ca2:	76 df       	rcall	.-276    	; 0xb90 <correct>
     ca4:	81 11       	cpse	r24, r1
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <noNatak+0xb8>
		}
	}
	if(flag==0)	
		if(correct())
		return 1;
	stop();
     ca8:	35 dc       	rcall	.-1942   	; 0x514 <stop>
	//lcd("--");
	//lcd_print(2,1,6,1);
	//buzzer_off();
	return 0;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	08 95       	ret
		}
		else
		{
			flag=1;
			if(correct())
				return 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	08 95       	ret
		}
		else
		{
			flag=1;
			if(correct())
			return 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
	stop();
	//lcd("--");
	//lcd_print(2,1,6,1);
	//buzzer_off();
	return 0;
}
     cba:	08 95       	ret

00000cbc <forwardJaa>:
void forwardJaa()
{
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cc6:	08 e2       	ldi	r16, 0x28	; 40
     cc8:	11 e0       	ldi	r17, 0x01	; 1
     cca:	0f 2e       	mov	r0, r31
     ccc:	f0 ef       	ldi	r31, 0xF0	; 240
     cce:	ff 2e       	mov	r15, r31
     cd0:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     cd2:	ca e2       	ldi	r28, 0x2A	; 42
     cd4:	d1 e0       	ldi	r29, 0x01	; 1
	//buzzer();
	unsigned int vi=0;
	do
	{
		forward();
     cd6:	06 dc       	rcall	.-2036   	; 0x4e4 <forward>
		//_delay_ms(200);
		set_color();
     cd8:	e6 dd       	rcall	.-1076   	; 0x8a6 <set_color>
		if(Center_white_line>40 && (Left_white_line>40 || Right_white_line>40)) //2 bbw wbb
     cda:	80 91 06 02 	lds	r24, 0x0206
     cde:	89 32       	cpi	r24, 0x29	; 41
     ce0:	50 f0       	brcs	.+20     	; 0xcf6 <forwardJaa+0x3a>
     ce2:	80 91 07 02 	lds	r24, 0x0207
     ce6:	89 32       	cpi	r24, 0x29	; 41
     ce8:	20 f4       	brcc	.+8      	; 0xcf2 <forwardJaa+0x36>
     cea:	80 91 05 02 	lds	r24, 0x0205
     cee:	89 32       	cpi	r24, 0x29	; 41
     cf0:	10 f0       	brcs	.+4      	; 0xcf6 <forwardJaa+0x3a>
		{
			node();
     cf2:	ea de       	rcall	.-556    	; 0xac8 <node>
			return;
     cf4:	13 c0       	rjmp	.+38     	; 0xd1c <forwardJaa+0x60>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cf6:	f8 01       	movw	r30, r16
     cf8:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     cfa:	f8 82       	st	Y, r15
		}
		velocity(240,240);
		//velocity(v+vi,v+vi);
		//i+=20;
	}while(Center_white_line>0x28 && Left_white_line<40 && Right_white_line<40);	//wbw
     cfc:	80 91 06 02 	lds	r24, 0x0206
     d00:	89 32       	cpi	r24, 0x29	; 41
     d02:	40 f0       	brcs	.+16     	; 0xd14 <forwardJaa+0x58>
     d04:	80 91 07 02 	lds	r24, 0x0207
     d08:	88 32       	cpi	r24, 0x28	; 40
     d0a:	20 f4       	brcc	.+8      	; 0xd14 <forwardJaa+0x58>
     d0c:	80 91 05 02 	lds	r24, 0x0205
     d10:	88 32       	cpi	r24, 0x28	; 40
     d12:	08 f3       	brcs	.-62     	; 0xcd6 <forwardJaa+0x1a>
	
	if(noNatak())
     d14:	74 df       	rcall	.-280    	; 0xbfe <noNatak>
     d16:	89 2b       	or	r24, r25
     d18:	09 f4       	brne	.+2      	; 0xd1c <forwardJaa+0x60>
		return;
	forwardJaa();
     d1a:	d0 df       	rcall	.-96     	; 0xcbc <forwardJaa>
	return;
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	08 95       	ret

00000d28 <lower>:
	// 		if(side==1)
	// 			servo_1_free();
	// 		else
	// 			servo_3_free();_delay_ms(500);
	// 	}
	if(side==1)
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	31 f4       	brne	.+12     	; 0xd38 <lower+0x10>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     d2c:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	80 93 8a 00 	sts	0x008A, r24
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <lower+0x1a>
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     d38:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     d3c:	83 e6       	ldi	r24, 0x63	; 99
     d3e:	80 93 8a 00 	sts	0x008A, r24
     d42:	2f ef       	ldi	r18, 0xFF	; 255
     d44:	8f e7       	ldi	r24, 0x7F	; 127
     d46:	96 e1       	ldi	r25, 0x16	; 22
     d48:	21 50       	subi	r18, 0x01	; 1
     d4a:	80 40       	sbci	r24, 0x00	; 0
     d4c:	90 40       	sbci	r25, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <lower+0x20>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <lower+0x2a>
     d52:	00 00       	nop
     d54:	08 95       	ret

00000d56 <elevate>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     d56:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     d5a:	83 e5       	ldi	r24, 0x53	; 83
     d5c:	80 93 8a 00 	sts	0x008A, r24
     d60:	2f ef       	ldi	r18, 0xFF	; 255
     d62:	8f e7       	ldi	r24, 0x7F	; 127
     d64:	96 e1       	ldi	r25, 0x16	; 22
     d66:	21 50       	subi	r18, 0x01	; 1
     d68:	80 40       	sbci	r24, 0x00	; 0
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <elevate+0x10>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <elevate+0x1a>
     d70:	00 00       	nop
}
void elevate()
{
	servo_2(90);
	_delay_ms(500);
	servo_2_free();_delay_ms(500);
     d72:	e6 db       	rcall	.-2100   	; 0x540 <servo_2_free>
     d74:	2f ef       	ldi	r18, 0xFF	; 255
     d76:	8f e7       	ldi	r24, 0x7F	; 127
     d78:	96 e1       	ldi	r25, 0x16	; 22
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	90 40       	sbci	r25, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <elevate+0x24>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <elevate+0x2e>
     d84:	00 00       	nop
     d86:	08 95       	ret

00000d88 <open>:
}
void open(unsigned char side)
{
	if (side == 0)
     d88:	81 11       	cpse	r24, r1
     d8a:	19 c0       	rjmp	.+50     	; 0xdbe <open+0x36>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     d8c:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     d90:	83 e5       	ldi	r24, 0x53	; 83
     d92:	80 93 8c 00 	sts	0x008C, r24
     d96:	2f ef       	ldi	r18, 0xFF	; 255
     d98:	8f e7       	ldi	r24, 0x7F	; 127
     d9a:	96 e1       	ldi	r25, 0x16	; 22
     d9c:	21 50       	subi	r18, 0x01	; 1
     d9e:	80 40       	sbci	r24, 0x00	; 0
     da0:	90 40       	sbci	r25, 0x00	; 0
     da2:	e1 f7       	brne	.-8      	; 0xd9c <open+0x14>
     da4:	00 c0       	rjmp	.+0      	; 0xda6 <open+0x1e>
     da6:	00 00       	nop
	{
		servo_3(90);
		_delay_ms(500);
		servo_3_free();_delay_ms(500);
     da8:	d2 db       	rcall	.-2140   	; 0x54e <servo_3_free>
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	8f e7       	ldi	r24, 0x7F	; 127
     dae:	96 e1       	ldi	r25, 0x16	; 22
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	80 40       	sbci	r24, 0x00	; 0
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <open+0x28>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <open+0x32>
     dba:	00 00       	nop
     dbc:	08 95       	ret
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     dbe:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
     dc2:	83 e2       	ldi	r24, 0x23	; 35
     dc4:	80 93 88 00 	sts	0x0088, r24
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
     dca:	8f e7       	ldi	r24, 0x7F	; 127
     dcc:	96 e1       	ldi	r25, 0x16	; 22
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	80 40       	sbci	r24, 0x00	; 0
     dd2:	90 40       	sbci	r25, 0x00	; 0
     dd4:	e1 f7       	brne	.-8      	; 0xdce <open+0x46>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <open+0x50>
     dd8:	00 00       	nop
	}
	else
	{
		servo_1(0);
		_delay_ms(500);
		servo_1_free();_delay_ms(500);
     dda:	ab db       	rcall	.-2218   	; 0x532 <servo_1_free>
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	8f e7       	ldi	r24, 0x7F	; 127
     de0:	96 e1       	ldi	r25, 0x16	; 22
     de2:	21 50       	subi	r18, 0x01	; 1
     de4:	80 40       	sbci	r24, 0x00	; 0
     de6:	90 40       	sbci	r25, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <open+0x5a>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <open+0x64>
     dec:	00 00       	nop
     dee:	08 95       	ret

00000df0 <close>:
	}
	//_delay_ms(500);
}
void close(unsigned char side)
{
	if (side == 0)
     df0:	81 11       	cpse	r24, r1
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <close+0x10>
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     df4:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
     df8:	83 e2       	ldi	r24, 0x23	; 35
     dfa:	80 93 8c 00 	sts	0x008C, r24
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <close+0x1e>
	servo_3(0);
	else if (side == 1)
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	29 f4       	brne	.+10     	; 0xe0e <close+0x1e>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     e04:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
     e08:	8e e4       	ldi	r24, 0x4E	; 78
     e0a:	80 93 88 00 	sts	0x0088, r24
     e0e:	2f ef       	ldi	r18, 0xFF	; 255
     e10:	8f e7       	ldi	r24, 0x7F	; 127
     e12:	96 e1       	ldi	r25, 0x16	; 22
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	90 40       	sbci	r25, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <close+0x24>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <close+0x2e>
     e1e:	00 00       	nop
     e20:	08 95       	ret

00000e22 <pick>:
	servo_1(80);
	_delay_ms(500);
}

void pick(int side)
{
     e22:	cf 93       	push	r28
     e24:	c8 2f       	mov	r28, r24
	open(side);
     e26:	b0 df       	rcall	.-160    	; 0xd88 <open>
	lower(side);
     e28:	8c 2f       	mov	r24, r28
     e2a:	7e df       	rcall	.-260    	; 0xd28 <lower>
	//_delay_ms(1000);
	close(side);
     e2c:	8c 2f       	mov	r24, r28
     e2e:	e0 df       	rcall	.-64     	; 0xdf0 <close>
	//_delay_ms(3000);
	elevate();//mid
     e30:	92 df       	rcall	.-220    	; 0xd56 <elevate>
     e32:	2f ef       	ldi	r18, 0xFF	; 255
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	9c e2       	ldi	r25, 0x2C	; 44
     e38:	21 50       	subi	r18, 0x01	; 1
     e3a:	80 40       	sbci	r24, 0x00	; 0
     e3c:	90 40       	sbci	r25, 0x00	; 0
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <pick+0x16>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <pick+0x20>
     e42:	00 00       	nop
	// 	if(armCount==0)
	// 	{
	// 		servo_1_free();
	// 		servo_3_free();
	// 	}
}
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <drop>:

void drop(int side)
{
     e48:	cf 93       	push	r28
     e4a:	c8 2f       	mov	r28, r24
	lower(side);//lower
     e4c:	6d df       	rcall	.-294    	; 0xd28 <lower>
	//_delay_ms(1000);
	open(side);
     e4e:	8c 2f       	mov	r24, r28
     e50:	9b df       	rcall	.-202    	; 0xd88 <open>
	//_delay_ms(1000);
	elevate();//mid
     e52:	81 df       	rcall	.-254    	; 0xd56 <elevate>
	// 	if(armCount==0)
	// 	servo_2_free();
	// 	open(side);
	// 	elevate();
	//armCount++;
}
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <indicator_set>:



void indicator_set()
{
	forwardJaa_Indi();
     e58:	05 de       	rcall	.-1014   	; 0xa64 <forwardJaa_Indi>
	//buzzer();
	//turn efficiency
	forward_mm(160);
     e5a:	80 ea       	ldi	r24, 0xA0	; 160
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	f5 dc       	rcall	.-1558   	; 0x84a <forward_mm>
	//buzzer();
	//scan 4
	soft_right_2();
     e60:	56 db       	rcall	.-2388   	; 0x50e <soft_right_2>
     e62:	2f ef       	ldi	r18, 0xFF	; 255
     e64:	8f e7       	ldi	r24, 0x7F	; 127
     e66:	9f e1       	ldi	r25, 0x1F	; 31
     e68:	21 50       	subi	r18, 0x01	; 1
     e6a:	80 40       	sbci	r24, 0x00	; 0
     e6c:	90 40       	sbci	r25, 0x00	; 0
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <indicator_set+0x10>
     e70:	00 c0       	rjmp	.+0      	; 0xe72 <indicator_set+0x1a>
     e72:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	b6 db       	rcall	.-2196   	; 0x5e4 <ADC_Conversion>
     e78:	88 32       	cpi	r24, 0x28	; 40
     e7a:	e0 f3       	brcs	.-8      	; 0xe74 <indicator_set+0x1c>
	stop();
     e7c:	4b db       	rcall	.-2410   	; 0x514 <stop>
	// 		buzzer_off();
	// 		_delay_ms(500);
	// 	}
	
	//back to line
	soft_left();
     e7e:	3e db       	rcall	.-2436   	; 0x4fc <soft_left>
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	9c e2       	ldi	r25, 0x2C	; 44
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <indicator_set+0x2e>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <indicator_set+0x38>
     e90:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	a7 db       	rcall	.-2226   	; 0x5e4 <ADC_Conversion>
     e96:	88 32       	cpi	r24, 0x28	; 40
     e98:	e0 f3       	brcs	.-8      	; 0xe92 <indicator_set+0x3a>
	stop();
     e9a:	3c db       	rcall	.-2440   	; 0x514 <stop>
	
	//scan 3
	soft_left_2();
     e9c:	35 db       	rcall	.-2454   	; 0x508 <soft_left_2>
     e9e:	2f ef       	ldi	r18, 0xFF	; 255
     ea0:	8f e7       	ldi	r24, 0x7F	; 127
     ea2:	96 e1       	ldi	r25, 0x16	; 22
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	80 40       	sbci	r24, 0x00	; 0
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <indicator_set+0x4c>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <indicator_set+0x56>
     eae:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	98 db       	rcall	.-2256   	; 0x5e4 <ADC_Conversion>
     eb4:	88 32       	cpi	r24, 0x28	; 40
     eb6:	e0 f3       	brcs	.-8      	; 0xeb0 <indicator_set+0x58>
	stop();
     eb8:	2d db       	rcall	.-2470   	; 0x514 <stop>
	// 		_delay_ms(100);
	// 		buzzer_off();
	// 		_delay_ms(500);
	// 	}
	//back to line
	soft_right();
     eba:	23 db       	rcall	.-2490   	; 0x502 <soft_right>
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
     ebe:	8f e7       	ldi	r24, 0x7F	; 127
     ec0:	96 e1       	ldi	r25, 0x16	; 22
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	80 40       	sbci	r24, 0x00	; 0
     ec6:	90 40       	sbci	r25, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <indicator_set+0x6a>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <indicator_set+0x74>
     ecc:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	89 db       	rcall	.-2286   	; 0x5e4 <ADC_Conversion>
     ed2:	88 32       	cpi	r24, 0x28	; 40
     ed4:	e0 f3       	brcs	.-8      	; 0xece <indicator_set+0x76>
	stop();
     ed6:	1e db       	rcall	.-2500   	; 0x514 <stop>
	
	//=====
	
	forwardJaa_Indi();
     ed8:	c5 dd       	rcall	.-1142   	; 0xa64 <forwardJaa_Indi>
	
	//turn efficiency
	forward_mm(160);
     eda:	80 ea       	ldi	r24, 0xA0	; 160
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	b5 dc       	rcall	.-1686   	; 0x84a <forward_mm>
	//scan 4
	soft_right_2();
     ee0:	16 db       	rcall	.-2516   	; 0x50e <soft_right_2>
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	8f e7       	ldi	r24, 0x7F	; 127
     ee6:	9f e1       	ldi	r25, 0x1F	; 31
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	80 40       	sbci	r24, 0x00	; 0
     eec:	90 40       	sbci	r25, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <indicator_set+0x90>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <indicator_set+0x9a>
     ef2:	00 00       	nop
	_delay_ms(700);
	while(ADC_Conversion(3)<40);
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	76 db       	rcall	.-2324   	; 0x5e4 <ADC_Conversion>
     ef8:	88 32       	cpi	r24, 0x28	; 40
     efa:	e0 f3       	brcs	.-8      	; 0xef4 <indicator_set+0x9c>
	stop();
     efc:	0b db       	rcall	.-2538   	; 0x514 <stop>
	// 		buzzer_off();
	// 		_delay_ms(500);
	// 	}
	
	//back to line
	soft_left();
     efe:	fe da       	rcall	.-2564   	; 0x4fc <soft_left>
     f00:	2f ef       	ldi	r18, 0xFF	; 255
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	9c e2       	ldi	r25, 0x2C	; 44
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	80 40       	sbci	r24, 0x00	; 0
     f0a:	90 40       	sbci	r25, 0x00	; 0
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <indicator_set+0xae>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <indicator_set+0xb8>
     f10:	00 00       	nop
	_delay_ms(1000);
	while(ADC_Conversion(2)<40);
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	67 db       	rcall	.-2354   	; 0x5e4 <ADC_Conversion>
     f16:	88 32       	cpi	r24, 0x28	; 40
     f18:	e0 f3       	brcs	.-8      	; 0xf12 <indicator_set+0xba>
	stop();
     f1a:	fc da       	rcall	.-2568   	; 0x514 <stop>
	
	//scan 3
	soft_left_2();
     f1c:	f5 da       	rcall	.-2582   	; 0x508 <soft_left_2>
     f1e:	2f ef       	ldi	r18, 0xFF	; 255
     f20:	8f e7       	ldi	r24, 0x7F	; 127
     f22:	96 e1       	ldi	r25, 0x16	; 22
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	80 40       	sbci	r24, 0x00	; 0
     f28:	90 40       	sbci	r25, 0x00	; 0
     f2a:	e1 f7       	brne	.-8      	; 0xf24 <indicator_set+0xcc>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <indicator_set+0xd6>
     f2e:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	58 db       	rcall	.-2384   	; 0x5e4 <ADC_Conversion>
     f34:	88 32       	cpi	r24, 0x28	; 40
     f36:	e0 f3       	brcs	.-8      	; 0xf30 <indicator_set+0xd8>
	stop();
     f38:	ed da       	rcall	.-2598   	; 0x514 <stop>
	// 		_delay_ms(100);
	// 		buzzer_off();
	// 		_delay_ms(500);
	// 	}
	//back to line
	soft_right();
     f3a:	e3 da       	rcall	.-2618   	; 0x502 <soft_right>
     f3c:	2f ef       	ldi	r18, 0xFF	; 255
     f3e:	8f e7       	ldi	r24, 0x7F	; 127
     f40:	96 e1       	ldi	r25, 0x16	; 22
     f42:	21 50       	subi	r18, 0x01	; 1
     f44:	80 40       	sbci	r24, 0x00	; 0
     f46:	90 40       	sbci	r25, 0x00	; 0
     f48:	e1 f7       	brne	.-8      	; 0xf42 <indicator_set+0xea>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <indicator_set+0xf4>
     f4c:	00 00       	nop
	_delay_ms(500);
	while(ADC_Conversion(2)<40);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	49 db       	rcall	.-2414   	; 0x5e4 <ADC_Conversion>
     f52:	88 32       	cpi	r24, 0x28	; 40
     f54:	e0 f3       	brcs	.-8      	; 0xf4e <indicator_set+0xf6>
	stop();
     f56:	de da       	rcall	.-2628   	; 0x514 <stop>
	//lcd_print(1,1,color[0],1);
	//lcd_print(1,3,color[1],1);
	//lcd_print(1,5,color[2],1);
	//lcd_print(1,7,color[3],1);
	
	forwardJaa();
     f58:	b1 de       	rcall	.-670    	; 0xcbc <forwardJaa>
	turnRight();
     f5a:	c1 dd       	rcall	.-1150   	; 0xade <turnRight>
	forward();
     f5c:	c3 da       	rcall	.-2682   	; 0x4e4 <forward>
     f5e:	2f ef       	ldi	r18, 0xFF	; 255
     f60:	8f e7       	ldi	r24, 0x7F	; 127
     f62:	96 e1       	ldi	r25, 0x16	; 22
     f64:	21 50       	subi	r18, 0x01	; 1
     f66:	80 40       	sbci	r24, 0x00	; 0
     f68:	90 40       	sbci	r25, 0x00	; 0
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <indicator_set+0x10c>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <indicator_set+0x116>
     f6e:	00 00       	nop
	_delay_ms(500);
	forwardJaa();
     f70:	a5 de       	rcall	.-694    	; 0xcbc <forwardJaa>
	turnRight();
     f72:	b5 dd       	rcall	.-1174   	; 0xade <turnRight>
	forwardJaa();
     f74:	a3 ce       	rjmp	.-698    	; 0xcbc <forwardJaa>
     f76:	08 95       	ret

00000f78 <newSenseSequence>:
}

void newSenseSequence()
{
	//node 1
	velocity(turn_v,turn_v);
     f78:	80 91 00 02 	lds	r24, 0x0200
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f7c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     f80:	80 93 2a 01 	sts	0x012A, r24
	forward_mm(60);
     f84:	8c e3       	ldi	r24, 0x3C	; 60
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	60 dc       	rcall	.-1856   	; 0x84a <forward_mm>
	while (ADC_Conversion(2)<50)	//earlier 3
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <newSenseSequence+0x16>
		right();
     f8c:	b4 da       	rcall	.-2712   	; 0x4f6 <right>
void newSenseSequence()
{
	//node 1
	velocity(turn_v,turn_v);
	forward_mm(60);
	while (ADC_Conversion(2)<50)	//earlier 3
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	29 db       	rcall	.-2478   	; 0x5e4 <ADC_Conversion>
     f92:	82 33       	cpi	r24, 0x32	; 50
     f94:	d8 f3       	brcs	.-10     	; 0xf8c <newSenseSequence+0x14>
		right();
	//_delay_ms(140);
	stop();
     f96:	be da       	rcall	.-2692   	; 0x514 <stop>
	
	//node 2
	left_degrees(150);
     f98:	86 e9       	ldi	r24, 0x96	; 150
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	68 dc       	rcall	.-1840   	; 0x86e <left_degrees>
	velocity(turn_v, turn_v);
     f9e:	80 91 00 02 	lds	r24, 0x0200
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     fa2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     fa6:	80 93 2a 01 	sts	0x012A, r24
     faa:	01 c0       	rjmp	.+2      	; 0xfae <newSenseSequence+0x36>
	while (ADC_Conversion(2)<50)
		left();
     fac:	a1 da       	rcall	.-2750   	; 0x4f0 <left>
	stop();
	
	//node 2
	left_degrees(150);
	velocity(turn_v, turn_v);
	while (ADC_Conversion(2)<50)
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	19 db       	rcall	.-2510   	; 0x5e4 <ADC_Conversion>
     fb2:	82 33       	cpi	r24, 0x32	; 50
     fb4:	d8 f3       	brcs	.-10     	; 0xfac <newSenseSequence+0x34>
		left();
	//_delay_ms(50);
	stop();
     fb6:	ae da       	rcall	.-2724   	; 0x514 <stop>
	if(f=1)
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 04 02 	sts	0x0204, r24
	{
		buzzer_on();
     fbe:	0a db       	rcall	.-2540   	; 0x5d4 <buzzer_on>
     fc0:	2f ef       	ldi	r18, 0xFF	; 255
     fc2:	8f e7       	ldi	r24, 0x7F	; 127
     fc4:	96 e1       	ldi	r25, 0x16	; 22
     fc6:	21 50       	subi	r18, 0x01	; 1
     fc8:	80 40       	sbci	r24, 0x00	; 0
     fca:	90 40       	sbci	r25, 0x00	; 0
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <newSenseSequence+0x4e>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <newSenseSequence+0x58>
     fd0:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
     fd2:	04 db       	rcall	.-2552   	; 0x5dc <buzzer_off>
	}
	
	//on line
	left();
     fd4:	8d da       	rcall	.-2790   	; 0x4f0 <left>
	while(ADC_Conversion(2)<=40);
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	05 db       	rcall	.-2550   	; 0x5e4 <ADC_Conversion>
     fda:	89 32       	cpi	r24, 0x29	; 41
     fdc:	e0 f3       	brcs	.-8      	; 0xfd6 <newSenseSequence+0x5e>
	stop();
     fde:	9a ca       	rjmp	.-2764   	; 0x514 <stop>
     fe0:	08 95       	ret

00000fe2 <__init__>:



void __init__()
{
	init_devices();
     fe2:	4e dc       	rcall	.-1892   	; 0x880 <init_devices>
	lcd_set_4bit();
     fe4:	a0 d8       	rcall	.-3776   	; 0x126 <lcd_set_4bit>
	lcd_init();
     fe6:	09 d9       	rcall	.-3566   	; 0x1fa <lcd_init>
	color_sensor_scaling();
     fe8:	53 db       	rcall	.-2394   	; 0x690 <color_sensor_scaling>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     fea:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = (unsigned char) PositionPanServo;
     fee:	8e e4       	ldi	r24, 0x4E	; 78
     ff0:	80 93 88 00 	sts	0x0088, r24
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     ff4:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = (unsigned char) PositionTiltServo;
     ff8:	83 e5       	ldi	r24, 0x53	; 83
     ffa:	80 93 8a 00 	sts	0x008A, r24
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     ffe:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = (unsigned char) PositionServo;
    1002:	83 e2       	ldi	r24, 0x23	; 35
    1004:	80 93 8c 00 	sts	0x008C, r24
    1008:	2f ef       	ldi	r18, 0xFF	; 255
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	98 e0       	ldi	r25, 0x08	; 8
    100e:	21 50       	subi	r18, 0x01	; 1
    1010:	80 40       	sbci	r24, 0x00	; 0
    1012:	90 40       	sbci	r25, 0x00	; 0
    1014:	e1 f7       	brne	.-8      	; 0x100e <__init__+0x2c>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <__init__+0x36>
    1018:	00 00       	nop
	servo_2(90);
	servo_3(0);
	//servo_1(0);
	//	servo_3(0);
	_delay_ms(200);
	servo_3_free();_delay_ms(500);
    101a:	99 da       	rcall	.-2766   	; 0x54e <servo_3_free>
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	8f e7       	ldi	r24, 0x7F	; 127
    1020:	96 e1       	ldi	r25, 0x16	; 22
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	80 40       	sbci	r24, 0x00	; 0
    1026:	90 40       	sbci	r25, 0x00	; 0
    1028:	e1 f7       	brne	.-8      	; 0x1022 <__init__+0x40>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <__init__+0x4a>
    102c:	00 00       	nop
	servo_2_free();_delay_ms(500);
    102e:	88 da       	rcall	.-2800   	; 0x540 <servo_2_free>
    1030:	2f ef       	ldi	r18, 0xFF	; 255
    1032:	8f e7       	ldi	r24, 0x7F	; 127
    1034:	96 e1       	ldi	r25, 0x16	; 22
    1036:	21 50       	subi	r18, 0x01	; 1
    1038:	80 40       	sbci	r24, 0x00	; 0
    103a:	90 40       	sbci	r25, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <__init__+0x54>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <__init__+0x5e>
    1040:	00 00       	nop
	servo_1_free();_delay_ms(500);
    1042:	77 da       	rcall	.-2834   	; 0x532 <servo_1_free>
    1044:	2f ef       	ldi	r18, 0xFF	; 255
    1046:	8f e7       	ldi	r24, 0x7F	; 127
    1048:	96 e1       	ldi	r25, 0x16	; 22
    104a:	21 50       	subi	r18, 0x01	; 1
    104c:	80 40       	sbci	r24, 0x00	; 0
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	e1 f7       	brne	.-8      	; 0x104a <__init__+0x68>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <__init__+0x72>
    1054:	00 00       	nop
    1056:	08 95       	ret

00001058 <main>:
	
	//buzzer();
}
int main(void)
{
    __init__();
    1058:	c4 df       	rcall	.-120    	; 0xfe2 <__init__>
	forward();
    105a:	44 da       	rcall	.-2936   	; 0x4e4 <forward>
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9c e2       	ldi	r25, 0x2C	; 44
    1062:	21 50       	subi	r18, 0x01	; 1
    1064:	80 40       	sbci	r24, 0x00	; 0
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <main+0xa>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <main+0x14>
    106c:	00 00       	nop
	_delay_ms(1000);
	indicator_set();
    106e:	f4 de       	rcall	.-536    	; 0xe58 <indicator_set>
	
	
	//reached Terminal
	
	newSenseSequence();
    1070:	83 df       	rcall	.-250    	; 0xf78 <newSenseSequence>
	
	
	
	back_mm(60);
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	f2 db       	rcall	.-2076   	; 0x85c <back_mm>
	pick(0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	d2 de       	rcall	.-604    	; 0xe22 <pick>
	pick(1);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	cf de       	rcall	.-610    	; 0xe22 <pick>
	
	forwardJaa();
    1084:	1b de       	rcall	.-970    	; 0xcbc <forwardJaa>
	turnLeft();
    1086:	3c dd       	rcall	.-1416   	; 0xb00 <turnLeft>
	forwardJaa();
    1088:	19 de       	rcall	.-974    	; 0xcbc <forwardJaa>
	
	//at sort
	turnLeft();
    108a:	3a dd       	rcall	.-1420   	; 0xb00 <turnLeft>
	back_mm(60);
    108c:	8c e3       	ldi	r24, 0x3C	; 60
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	e5 db       	rcall	.-2102   	; 0x85c <back_mm>
	drop(0);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	d8 de       	rcall	.-592    	; 0xe48 <drop>
	Uturn();
    1098:	ff db       	rcall	.-2050   	; 0x898 <Uturn>
	
	//at term 1
	f=1;
    109a:	c1 e0       	ldi	r28, 0x01	; 1
    109c:	c0 93 04 02 	sts	0x0204, r28
	forwardJaa();
    10a0:	0d de       	rcall	.-998    	; 0xcbc <forwardJaa>
	newSenseSequence();
    10a2:	6a df       	rcall	.-300    	; 0xf78 <newSenseSequence>
	f=0;
    10a4:	10 92 04 02 	sts	0x0204, r1
	drop(1);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	cd de       	rcall	.-614    	; 0xe48 <drop>
	
	forwardJaa();
    10ae:	06 de       	rcall	.-1012   	; 0xcbc <forwardJaa>
	pick(0);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b6 de       	rcall	.-660    	; 0xe22 <pick>
	
	forwardJaa();
    10b6:	02 de       	rcall	.-1020   	; 0xcbc <forwardJaa>
	
	//At Terminal 3
	newSenseSequence();
    10b8:	5f df       	rcall	.-322    	; 0xf78 <newSenseSequence>
	back_mm(60);
    10ba:	8c e3       	ldi	r24, 0x3C	; 60
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	ce db       	rcall	.-2148   	; 0x85c <back_mm>
	pick(1);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	ae de       	rcall	.-676    	; 0xe22 <pick>
	blankUturn();
    10c6:	eb db       	rcall	.-2090   	; 0x89e <blankUturn>
	//back maybe
	drop(0);
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	bd de       	rcall	.-646    	; 0xe48 <drop>
	Uturn();
    10ce:	e4 db       	rcall	.-2104   	; 0x898 <Uturn>
	//may be back_mm()
	pick(0);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a6 de       	rcall	.-692    	; 0xe22 <pick>
	
	forwardJaa();
    10d6:	f2 dd       	rcall	.-1052   	; 0xcbc <forwardJaa>
	turnRight();
    10d8:	02 dd       	rcall	.-1532   	; 0xade <turnRight>
	forwardJaa();
    10da:	f0 dd       	rcall	.-1056   	; 0xcbc <forwardJaa>
	forwardJaa();
    10dc:	ef dd       	rcall	.-1058   	; 0xcbc <forwardJaa>
	
	//at Sort
	turnRight();
    10de:	ff dc       	rcall	.-1538   	; 0xade <turnRight>
	forwardJaa();
    10e0:	ed dd       	rcall	.-1062   	; 0xcbc <forwardJaa>
	
	//At term 4
	
	forward_mm(60);
    10e2:	8c e3       	ldi	r24, 0x3C	; 60
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	b1 db       	rcall	.-2206   	; 0x84a <forward_mm>
	drop(0);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	ad de       	rcall	.-678    	; 0xe48 <drop>
	drop(1);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	aa de       	rcall	.-684    	; 0xe48 <drop>
	Uturn();
    10f4:	d1 db       	rcall	.-2142   	; 0x898 <Uturn>
	forwardJaa();
    10f6:	e2 dd       	rcall	.-1084   	; 0xcbc <forwardJaa>
	forwardJaa();
    10f8:	e1 dd       	rcall	.-1086   	; 0xcbc <forwardJaa>
	
	//at term 2
	f=1;
    10fa:	c0 93 04 02 	sts	0x0204, r28
	newSenseSequence();
    10fe:	3c df       	rcall	.-392    	; 0xf78 <newSenseSequence>
	f=1;
    1100:	c0 93 04 02 	sts	0x0204, r28
	back_mm(60);
    1104:	8c e3       	ldi	r24, 0x3C	; 60
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 db       	rcall	.-2222   	; 0x85c <back_mm>
	pick(1);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	89 de       	rcall	.-750    	; 0xe22 <pick>
	
	forwardJaa();
    1110:	d5 dd       	rcall	.-1110   	; 0xcbc <forwardJaa>
	turnRight();
    1112:	e5 dc       	rcall	.-1590   	; 0xade <turnRight>
	forwardJaa();
    1114:	d3 dd       	rcall	.-1114   	; 0xcbc <forwardJaa>
	forwardJaa();
    1116:	d2 dd       	rcall	.-1116   	; 0xcbc <forwardJaa>
	turnLeft();
    1118:	f3 dc       	rcall	.-1562   	; 0xb00 <turnLeft>
	
	forwardJaa();
    111a:	d0 dd       	rcall	.-1120   	; 0xcbc <forwardJaa>
	forward_mm(60);
    111c:	8c e3       	ldi	r24, 0x3C	; 60
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	94 db       	rcall	.-2264   	; 0x84a <forward_mm>
	drop(1);
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	90 de       	rcall	.-736    	; 0xe48 <drop>
	buzzer_on();
    1128:	55 da       	rcall	.-2902   	; 0x5d4 <buzzer_on>
    112a:	ff cf       	rjmp	.-2      	; 0x112a <main+0xd2>

0000112c <__divsf3>:
    112c:	0c d0       	rcall	.+24     	; 0x1146 <__divsf3x>
    112e:	e6 c0       	rjmp	.+460    	; 0x12fc <__fp_round>
    1130:	de d0       	rcall	.+444    	; 0x12ee <__fp_pscB>
    1132:	40 f0       	brcs	.+16     	; 0x1144 <__divsf3+0x18>
    1134:	d5 d0       	rcall	.+426    	; 0x12e0 <__fp_pscA>
    1136:	30 f0       	brcs	.+12     	; 0x1144 <__divsf3+0x18>
    1138:	21 f4       	brne	.+8      	; 0x1142 <__divsf3+0x16>
    113a:	5f 3f       	cpi	r21, 0xFF	; 255
    113c:	19 f0       	breq	.+6      	; 0x1144 <__divsf3+0x18>
    113e:	c7 c0       	rjmp	.+398    	; 0x12ce <__fp_inf>
    1140:	51 11       	cpse	r21, r1
    1142:	10 c1       	rjmp	.+544    	; 0x1364 <__fp_szero>
    1144:	ca c0       	rjmp	.+404    	; 0x12da <__fp_nan>

00001146 <__divsf3x>:
    1146:	eb d0       	rcall	.+470    	; 0x131e <__fp_split3>
    1148:	98 f3       	brcs	.-26     	; 0x1130 <__divsf3+0x4>

0000114a <__divsf3_pse>:
    114a:	99 23       	and	r25, r25
    114c:	c9 f3       	breq	.-14     	; 0x1140 <__divsf3+0x14>
    114e:	55 23       	and	r21, r21
    1150:	b1 f3       	breq	.-20     	; 0x113e <__divsf3+0x12>
    1152:	95 1b       	sub	r25, r21
    1154:	55 0b       	sbc	r21, r21
    1156:	bb 27       	eor	r27, r27
    1158:	aa 27       	eor	r26, r26
    115a:	62 17       	cp	r22, r18
    115c:	73 07       	cpc	r23, r19
    115e:	84 07       	cpc	r24, r20
    1160:	38 f0       	brcs	.+14     	; 0x1170 <__divsf3_pse+0x26>
    1162:	9f 5f       	subi	r25, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	44 1f       	adc	r20, r20
    116c:	aa 1f       	adc	r26, r26
    116e:	a9 f3       	breq	.-22     	; 0x115a <__divsf3_pse+0x10>
    1170:	33 d0       	rcall	.+102    	; 0x11d8 <__divsf3_pse+0x8e>
    1172:	0e 2e       	mov	r0, r30
    1174:	3a f0       	brmi	.+14     	; 0x1184 <__divsf3_pse+0x3a>
    1176:	e0 e8       	ldi	r30, 0x80	; 128
    1178:	30 d0       	rcall	.+96     	; 0x11da <__divsf3_pse+0x90>
    117a:	91 50       	subi	r25, 0x01	; 1
    117c:	50 40       	sbci	r21, 0x00	; 0
    117e:	e6 95       	lsr	r30
    1180:	00 1c       	adc	r0, r0
    1182:	ca f7       	brpl	.-14     	; 0x1176 <__divsf3_pse+0x2c>
    1184:	29 d0       	rcall	.+82     	; 0x11d8 <__divsf3_pse+0x8e>
    1186:	fe 2f       	mov	r31, r30
    1188:	27 d0       	rcall	.+78     	; 0x11d8 <__divsf3_pse+0x8e>
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	bb 1f       	adc	r27, r27
    1192:	26 17       	cp	r18, r22
    1194:	37 07       	cpc	r19, r23
    1196:	48 07       	cpc	r20, r24
    1198:	ab 07       	cpc	r26, r27
    119a:	b0 e8       	ldi	r27, 0x80	; 128
    119c:	09 f0       	breq	.+2      	; 0x11a0 <__divsf3_pse+0x56>
    119e:	bb 0b       	sbc	r27, r27
    11a0:	80 2d       	mov	r24, r0
    11a2:	bf 01       	movw	r22, r30
    11a4:	ff 27       	eor	r31, r31
    11a6:	93 58       	subi	r25, 0x83	; 131
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	2a f0       	brmi	.+10     	; 0x11b6 <__divsf3_pse+0x6c>
    11ac:	9e 3f       	cpi	r25, 0xFE	; 254
    11ae:	51 05       	cpc	r21, r1
    11b0:	68 f0       	brcs	.+26     	; 0x11cc <__divsf3_pse+0x82>
    11b2:	8d c0       	rjmp	.+282    	; 0x12ce <__fp_inf>
    11b4:	d7 c0       	rjmp	.+430    	; 0x1364 <__fp_szero>
    11b6:	5f 3f       	cpi	r21, 0xFF	; 255
    11b8:	ec f3       	brlt	.-6      	; 0x11b4 <__divsf3_pse+0x6a>
    11ba:	98 3e       	cpi	r25, 0xE8	; 232
    11bc:	dc f3       	brlt	.-10     	; 0x11b4 <__divsf3_pse+0x6a>
    11be:	86 95       	lsr	r24
    11c0:	77 95       	ror	r23
    11c2:	67 95       	ror	r22
    11c4:	b7 95       	ror	r27
    11c6:	f7 95       	ror	r31
    11c8:	9f 5f       	subi	r25, 0xFF	; 255
    11ca:	c9 f7       	brne	.-14     	; 0x11be <__divsf3_pse+0x74>
    11cc:	88 0f       	add	r24, r24
    11ce:	91 1d       	adc	r25, r1
    11d0:	96 95       	lsr	r25
    11d2:	87 95       	ror	r24
    11d4:	97 f9       	bld	r25, 7
    11d6:	08 95       	ret
    11d8:	e1 e0       	ldi	r30, 0x01	; 1
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	bb 1f       	adc	r27, r27
    11e2:	62 17       	cp	r22, r18
    11e4:	73 07       	cpc	r23, r19
    11e6:	84 07       	cpc	r24, r20
    11e8:	ba 07       	cpc	r27, r26
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <__divsf3_pse+0xaa>
    11ec:	62 1b       	sub	r22, r18
    11ee:	73 0b       	sbc	r23, r19
    11f0:	84 0b       	sbc	r24, r20
    11f2:	ba 0b       	sbc	r27, r26
    11f4:	ee 1f       	adc	r30, r30
    11f6:	88 f7       	brcc	.-30     	; 0x11da <__divsf3_pse+0x90>
    11f8:	e0 95       	com	r30
    11fa:	08 95       	ret

000011fc <__fixunssfsi>:
    11fc:	98 d0       	rcall	.+304    	; 0x132e <__fp_splitA>
    11fe:	88 f0       	brcs	.+34     	; 0x1222 <__fixunssfsi+0x26>
    1200:	9f 57       	subi	r25, 0x7F	; 127
    1202:	90 f0       	brcs	.+36     	; 0x1228 <__fixunssfsi+0x2c>
    1204:	b9 2f       	mov	r27, r25
    1206:	99 27       	eor	r25, r25
    1208:	b7 51       	subi	r27, 0x17	; 23
    120a:	a0 f0       	brcs	.+40     	; 0x1234 <__fixunssfsi+0x38>
    120c:	d1 f0       	breq	.+52     	; 0x1242 <__fixunssfsi+0x46>
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	88 1f       	adc	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	1a f0       	brmi	.+6      	; 0x121e <__fixunssfsi+0x22>
    1218:	ba 95       	dec	r27
    121a:	c9 f7       	brne	.-14     	; 0x120e <__fixunssfsi+0x12>
    121c:	12 c0       	rjmp	.+36     	; 0x1242 <__fixunssfsi+0x46>
    121e:	b1 30       	cpi	r27, 0x01	; 1
    1220:	81 f0       	breq	.+32     	; 0x1242 <__fixunssfsi+0x46>
    1222:	9f d0       	rcall	.+318    	; 0x1362 <__fp_zero>
    1224:	b1 e0       	ldi	r27, 0x01	; 1
    1226:	08 95       	ret
    1228:	9c c0       	rjmp	.+312    	; 0x1362 <__fp_zero>
    122a:	67 2f       	mov	r22, r23
    122c:	78 2f       	mov	r23, r24
    122e:	88 27       	eor	r24, r24
    1230:	b8 5f       	subi	r27, 0xF8	; 248
    1232:	39 f0       	breq	.+14     	; 0x1242 <__fixunssfsi+0x46>
    1234:	b9 3f       	cpi	r27, 0xF9	; 249
    1236:	cc f3       	brlt	.-14     	; 0x122a <__fixunssfsi+0x2e>
    1238:	86 95       	lsr	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	b3 95       	inc	r27
    1240:	d9 f7       	brne	.-10     	; 0x1238 <__fixunssfsi+0x3c>
    1242:	3e f4       	brtc	.+14     	; 0x1252 <__fixunssfsi+0x56>
    1244:	90 95       	com	r25
    1246:	80 95       	com	r24
    1248:	70 95       	com	r23
    124a:	61 95       	neg	r22
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	8f 4f       	sbci	r24, 0xFF	; 255
    1250:	9f 4f       	sbci	r25, 0xFF	; 255
    1252:	08 95       	ret

00001254 <__floatunsisf>:
    1254:	e8 94       	clt
    1256:	09 c0       	rjmp	.+18     	; 0x126a <__floatsisf+0x12>

00001258 <__floatsisf>:
    1258:	97 fb       	bst	r25, 7
    125a:	3e f4       	brtc	.+14     	; 0x126a <__floatsisf+0x12>
    125c:	90 95       	com	r25
    125e:	80 95       	com	r24
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	99 23       	and	r25, r25
    126c:	a9 f0       	breq	.+42     	; 0x1298 <__floatsisf+0x40>
    126e:	f9 2f       	mov	r31, r25
    1270:	96 e9       	ldi	r25, 0x96	; 150
    1272:	bb 27       	eor	r27, r27
    1274:	93 95       	inc	r25
    1276:	f6 95       	lsr	r31
    1278:	87 95       	ror	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b7 95       	ror	r27
    1280:	f1 11       	cpse	r31, r1
    1282:	f8 cf       	rjmp	.-16     	; 0x1274 <__floatsisf+0x1c>
    1284:	fa f4       	brpl	.+62     	; 0x12c4 <__floatsisf+0x6c>
    1286:	bb 0f       	add	r27, r27
    1288:	11 f4       	brne	.+4      	; 0x128e <__floatsisf+0x36>
    128a:	60 ff       	sbrs	r22, 0
    128c:	1b c0       	rjmp	.+54     	; 0x12c4 <__floatsisf+0x6c>
    128e:	6f 5f       	subi	r22, 0xFF	; 255
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	8f 4f       	sbci	r24, 0xFF	; 255
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	16 c0       	rjmp	.+44     	; 0x12c4 <__floatsisf+0x6c>
    1298:	88 23       	and	r24, r24
    129a:	11 f0       	breq	.+4      	; 0x12a0 <__floatsisf+0x48>
    129c:	96 e9       	ldi	r25, 0x96	; 150
    129e:	11 c0       	rjmp	.+34     	; 0x12c2 <__floatsisf+0x6a>
    12a0:	77 23       	and	r23, r23
    12a2:	21 f0       	breq	.+8      	; 0x12ac <__floatsisf+0x54>
    12a4:	9e e8       	ldi	r25, 0x8E	; 142
    12a6:	87 2f       	mov	r24, r23
    12a8:	76 2f       	mov	r23, r22
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <__floatsisf+0x5e>
    12ac:	66 23       	and	r22, r22
    12ae:	71 f0       	breq	.+28     	; 0x12cc <__floatsisf+0x74>
    12b0:	96 e8       	ldi	r25, 0x86	; 134
    12b2:	86 2f       	mov	r24, r22
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	2a f0       	brmi	.+10     	; 0x12c4 <__floatsisf+0x6c>
    12ba:	9a 95       	dec	r25
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	da f7       	brpl	.-10     	; 0x12ba <__floatsisf+0x62>
    12c4:	88 0f       	add	r24, r24
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	97 f9       	bld	r25, 7
    12cc:	08 95       	ret

000012ce <__fp_inf>:
    12ce:	97 f9       	bld	r25, 7
    12d0:	9f 67       	ori	r25, 0x7F	; 127
    12d2:	80 e8       	ldi	r24, 0x80	; 128
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	08 95       	ret

000012da <__fp_nan>:
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	80 ec       	ldi	r24, 0xC0	; 192
    12de:	08 95       	ret

000012e0 <__fp_pscA>:
    12e0:	00 24       	eor	r0, r0
    12e2:	0a 94       	dec	r0
    12e4:	16 16       	cp	r1, r22
    12e6:	17 06       	cpc	r1, r23
    12e8:	18 06       	cpc	r1, r24
    12ea:	09 06       	cpc	r0, r25
    12ec:	08 95       	ret

000012ee <__fp_pscB>:
    12ee:	00 24       	eor	r0, r0
    12f0:	0a 94       	dec	r0
    12f2:	12 16       	cp	r1, r18
    12f4:	13 06       	cpc	r1, r19
    12f6:	14 06       	cpc	r1, r20
    12f8:	05 06       	cpc	r0, r21
    12fa:	08 95       	ret

000012fc <__fp_round>:
    12fc:	09 2e       	mov	r0, r25
    12fe:	03 94       	inc	r0
    1300:	00 0c       	add	r0, r0
    1302:	11 f4       	brne	.+4      	; 0x1308 <__fp_round+0xc>
    1304:	88 23       	and	r24, r24
    1306:	52 f0       	brmi	.+20     	; 0x131c <__fp_round+0x20>
    1308:	bb 0f       	add	r27, r27
    130a:	40 f4       	brcc	.+16     	; 0x131c <__fp_round+0x20>
    130c:	bf 2b       	or	r27, r31
    130e:	11 f4       	brne	.+4      	; 0x1314 <__fp_round+0x18>
    1310:	60 ff       	sbrs	r22, 0
    1312:	04 c0       	rjmp	.+8      	; 0x131c <__fp_round+0x20>
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	8f 4f       	sbci	r24, 0xFF	; 255
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	08 95       	ret

0000131e <__fp_split3>:
    131e:	57 fd       	sbrc	r21, 7
    1320:	90 58       	subi	r25, 0x80	; 128
    1322:	44 0f       	add	r20, r20
    1324:	55 1f       	adc	r21, r21
    1326:	59 f0       	breq	.+22     	; 0x133e <__fp_splitA+0x10>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	71 f0       	breq	.+28     	; 0x1348 <__fp_splitA+0x1a>
    132c:	47 95       	ror	r20

0000132e <__fp_splitA>:
    132e:	88 0f       	add	r24, r24
    1330:	97 fb       	bst	r25, 7
    1332:	99 1f       	adc	r25, r25
    1334:	61 f0       	breq	.+24     	; 0x134e <__fp_splitA+0x20>
    1336:	9f 3f       	cpi	r25, 0xFF	; 255
    1338:	79 f0       	breq	.+30     	; 0x1358 <__fp_splitA+0x2a>
    133a:	87 95       	ror	r24
    133c:	08 95       	ret
    133e:	12 16       	cp	r1, r18
    1340:	13 06       	cpc	r1, r19
    1342:	14 06       	cpc	r1, r20
    1344:	55 1f       	adc	r21, r21
    1346:	f2 cf       	rjmp	.-28     	; 0x132c <__fp_split3+0xe>
    1348:	46 95       	lsr	r20
    134a:	f1 df       	rcall	.-30     	; 0x132e <__fp_splitA>
    134c:	08 c0       	rjmp	.+16     	; 0x135e <__fp_splitA+0x30>
    134e:	16 16       	cp	r1, r22
    1350:	17 06       	cpc	r1, r23
    1352:	18 06       	cpc	r1, r24
    1354:	99 1f       	adc	r25, r25
    1356:	f1 cf       	rjmp	.-30     	; 0x133a <__fp_splitA+0xc>
    1358:	86 95       	lsr	r24
    135a:	71 05       	cpc	r23, r1
    135c:	61 05       	cpc	r22, r1
    135e:	08 94       	sec
    1360:	08 95       	ret

00001362 <__fp_zero>:
    1362:	e8 94       	clt

00001364 <__fp_szero>:
    1364:	bb 27       	eor	r27, r27
    1366:	66 27       	eor	r22, r22
    1368:	77 27       	eor	r23, r23
    136a:	cb 01       	movw	r24, r22
    136c:	97 f9       	bld	r25, 7
    136e:	08 95       	ret

00001370 <__umulhisi3>:
    1370:	a2 9f       	mul	r26, r18
    1372:	b0 01       	movw	r22, r0
    1374:	b3 9f       	mul	r27, r19
    1376:	c0 01       	movw	r24, r0
    1378:	a3 9f       	mul	r26, r19
    137a:	70 0d       	add	r23, r0
    137c:	81 1d       	adc	r24, r1
    137e:	11 24       	eor	r1, r1
    1380:	91 1d       	adc	r25, r1
    1382:	b2 9f       	mul	r27, r18
    1384:	70 0d       	add	r23, r0
    1386:	81 1d       	adc	r24, r1
    1388:	11 24       	eor	r1, r1
    138a:	91 1d       	adc	r25, r1
    138c:	08 95       	ret

0000138e <_exit>:
    138e:	f8 94       	cli

00001390 <__stop_program>:
    1390:	ff cf       	rjmp	.-2      	; 0x1390 <__stop_program>
