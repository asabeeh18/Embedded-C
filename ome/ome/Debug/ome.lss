
ome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800200  00800200  00000726  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c7f  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ec  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000077f  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a0  00000000  00000000  00001e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000311  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000051e  00000000  00000000  000022b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 31       	cpi	r26, 0x10	; 16
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	2b d2       	rcall	.+1110   	; 0x55c <main>
 106:	d3 c2       	rjmp	.+1446   	; 0x6ae <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <lcd_set_4bit>:
  motion_set(0x06);
}

void stop (void) //hard stop
{
  motion_set(0x00);
 10a:	86 e6       	ldi	r24, 0x66	; 102
 10c:	9e e0       	ldi	r25, 0x0E	; 14
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_set_4bit+0x4>
 112:	00 00       	nop
 114:	40 98       	cbi	0x08, 0	; 8
 116:	41 98       	cbi	0x08, 1	; 8
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	42 9a       	sbi	0x08, 2	; 8
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	97 e4       	ldi	r25, 0x47	; 71
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_set_4bit+0x18>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_set_4bit+0x1e>
 128:	00 00       	nop
 12a:	42 98       	cbi	0x08, 2	; 8
 12c:	86 e6       	ldi	r24, 0x66	; 102
 12e:	9e e0       	ldi	r25, 0x0E	; 14
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x26>
 134:	00 00       	nop
 136:	40 98       	cbi	0x08, 0	; 8
 138:	41 98       	cbi	0x08, 1	; 8
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	42 9a       	sbi	0x08, 2	; 8
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	97 e4       	ldi	r25, 0x47	; 71
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x3a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_set_4bit+0x40>
 14a:	00 00       	nop
 14c:	42 98       	cbi	0x08, 2	; 8
 14e:	86 e6       	ldi	r24, 0x66	; 102
 150:	9e e0       	ldi	r25, 0x0E	; 14
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x48>
 156:	00 00       	nop
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	41 98       	cbi	0x08, 1	; 8
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	88 b9       	out	0x08, r24	; 8
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	97 e4       	ldi	r25, 0x47	; 71
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_set_4bit+0x5c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_set_4bit+0x62>
 16c:	00 00       	nop
 16e:	42 98       	cbi	0x08, 2	; 8
 170:	86 e6       	ldi	r24, 0x66	; 102
 172:	9e e0       	ldi	r25, 0x0E	; 14
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x6a>
 178:	00 00       	nop
 17a:	40 98       	cbi	0x08, 0	; 8
 17c:	41 98       	cbi	0x08, 1	; 8
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	88 b9       	out	0x08, r24	; 8
 182:	42 9a       	sbi	0x08, 2	; 8
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	97 e4       	ldi	r25, 0x47	; 71
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_set_4bit+0x7e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_set_4bit+0x84>
 18e:	00 00       	nop
 190:	42 98       	cbi	0x08, 2	; 8
 192:	08 95       	ret

00000194 <lcd_wr_command>:
 194:	98 b1       	in	r25, 0x08	; 8
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	98 b9       	out	0x08, r25	; 8
 19a:	98 b1       	in	r25, 0x08	; 8
 19c:	28 2f       	mov	r18, r24
 19e:	20 7f       	andi	r18, 0xF0	; 240
 1a0:	92 2b       	or	r25, r18
 1a2:	98 b9       	out	0x08, r25	; 8
 1a4:	40 98       	cbi	0x08, 0	; 8
 1a6:	41 98       	cbi	0x08, 1	; 8
 1a8:	42 9a       	sbi	0x08, 2	; 8
 1aa:	ef ef       	ldi	r30, 0xFF	; 255
 1ac:	f7 e4       	ldi	r31, 0x47	; 71
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_wr_command+0x1a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_wr_command+0x20>
 1b4:	00 00       	nop
 1b6:	42 98       	cbi	0x08, 2	; 8
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	98 b1       	in	r25, 0x08	; 8
 1c0:	82 95       	swap	r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	89 2b       	or	r24, r25
 1c6:	88 b9       	out	0x08, r24	; 8
 1c8:	40 98       	cbi	0x08, 0	; 8
 1ca:	41 98       	cbi	0x08, 1	; 8
 1cc:	42 9a       	sbi	0x08, 2	; 8
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	97 e4       	ldi	r25, 0x47	; 71
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_wr_command+0x3e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_wr_command+0x44>
 1d8:	00 00       	nop
 1da:	42 98       	cbi	0x08, 2	; 8
 1dc:	08 95       	ret

000001de <lcd_init>:
 1de:	95 df       	rcall	.-214    	; 0x10a <lcd_set_4bit>
 1e0:	86 e6       	ldi	r24, 0x66	; 102
 1e2:	9e e0       	ldi	r25, 0x0E	; 14
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x6>
 1e8:	00 00       	nop
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	d3 df       	rcall	.-90     	; 0x194 <lcd_wr_command>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	d1 df       	rcall	.-94     	; 0x194 <lcd_wr_command>
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	cf df       	rcall	.-98     	; 0x194 <lcd_wr_command>
 1f6:	8e e0       	ldi	r24, 0x0E	; 14
 1f8:	cd df       	rcall	.-102    	; 0x194 <lcd_wr_command>
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	cb cf       	rjmp	.-106    	; 0x194 <lcd_wr_command>
 1fe:	08 95       	ret

00000200 <lcd_wr_char>:
 200:	98 b1       	in	r25, 0x08	; 8
 202:	9f 70       	andi	r25, 0x0F	; 15
 204:	98 b9       	out	0x08, r25	; 8
 206:	98 b1       	in	r25, 0x08	; 8
 208:	28 2f       	mov	r18, r24
 20a:	20 7f       	andi	r18, 0xF0	; 240
 20c:	92 2b       	or	r25, r18
 20e:	98 b9       	out	0x08, r25	; 8
 210:	40 9a       	sbi	0x08, 0	; 8
 212:	41 98       	cbi	0x08, 1	; 8
 214:	42 9a       	sbi	0x08, 2	; 8
 216:	ef ef       	ldi	r30, 0xFF	; 255
 218:	f7 e4       	ldi	r31, 0x47	; 71
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_wr_char+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_wr_char+0x20>
 220:	00 00       	nop
 222:	42 98       	cbi	0x08, 2	; 8
 224:	98 b1       	in	r25, 0x08	; 8
 226:	9f 70       	andi	r25, 0x0F	; 15
 228:	98 b9       	out	0x08, r25	; 8
 22a:	98 b1       	in	r25, 0x08	; 8
 22c:	82 95       	swap	r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	89 2b       	or	r24, r25
 232:	88 b9       	out	0x08, r24	; 8
 234:	40 9a       	sbi	0x08, 0	; 8
 236:	41 98       	cbi	0x08, 1	; 8
 238:	42 9a       	sbi	0x08, 2	; 8
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	97 e4       	ldi	r25, 0x47	; 71
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_wr_char+0x3e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_wr_char+0x44>
 244:	00 00       	nop
 246:	42 98       	cbi	0x08, 2	; 8
 248:	08 95       	ret

0000024a <lcd_home>:
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	a3 cf       	rjmp	.-186    	; 0x194 <lcd_wr_command>
 24e:	08 95       	ret

00000250 <lcd_cursor>:
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	69 f0       	breq	.+26     	; 0x26e <lcd_cursor+0x1e>
 254:	18 f4       	brcc	.+6      	; 0x25c <lcd_cursor+0xc>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	31 f0       	breq	.+12     	; 0x266 <lcd_cursor+0x16>
 25a:	08 95       	ret
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	59 f0       	breq	.+22     	; 0x276 <lcd_cursor+0x26>
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	69 f0       	breq	.+26     	; 0x27e <lcd_cursor+0x2e>
 264:	08 95       	ret
 266:	8f e7       	ldi	r24, 0x7F	; 127
 268:	86 0f       	add	r24, r22
 26a:	94 cf       	rjmp	.-216    	; 0x194 <lcd_wr_command>
 26c:	08 95       	ret
 26e:	8f eb       	ldi	r24, 0xBF	; 191
 270:	86 0f       	add	r24, r22
 272:	90 cf       	rjmp	.-224    	; 0x194 <lcd_wr_command>
 274:	08 95       	ret
 276:	83 e9       	ldi	r24, 0x93	; 147
 278:	86 0f       	add	r24, r22
 27a:	8c cf       	rjmp	.-232    	; 0x194 <lcd_wr_command>
 27c:	08 95       	ret
 27e:	83 ed       	ldi	r24, 0xD3	; 211
 280:	86 0f       	add	r24, r22
 282:	88 cf       	rjmp	.-240    	; 0x194 <lcd_wr_command>
 284:	08 95       	ret

00000286 <lcd_print>:
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	8a 01       	movw	r16, r20
 290:	e9 01       	movw	r28, r18
 292:	88 23       	and	r24, r24
 294:	11 f0       	breq	.+4      	; 0x29a <lcd_print+0x14>
 296:	61 11       	cpse	r22, r1
 298:	02 c0       	rjmp	.+4      	; 0x29e <lcd_print+0x18>
 29a:	d7 df       	rcall	.-82     	; 0x24a <lcd_home>
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <lcd_print+0x1a>
 29e:	d8 df       	rcall	.-80     	; 0x250 <lcd_cursor>
 2a0:	c5 30       	cpi	r28, 0x05	; 5
 2a2:	d1 05       	cpc	r29, r1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <lcd_print+0x22>
 2a6:	cd c0       	rjmp	.+410    	; 0x442 <lcd_print+0x1bc>
 2a8:	98 01       	movw	r18, r16
 2aa:	32 95       	swap	r19
 2ac:	22 95       	swap	r18
 2ae:	2f 70       	andi	r18, 0x0F	; 15
 2b0:	23 27       	eor	r18, r19
 2b2:	3f 70       	andi	r19, 0x0F	; 15
 2b4:	23 27       	eor	r18, r19
 2b6:	a7 e4       	ldi	r26, 0x47	; 71
 2b8:	b3 e0       	ldi	r27, 0x03	; 3
 2ba:	ea d1       	rcall	.+980    	; 0x690 <__umulhisi3>
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	c0 96       	adiw	r24, 0x30	; 48
 2ca:	90 93 04 02 	sts	0x0204, r25
 2ce:	80 93 03 02 	sts	0x0203, r24
 2d2:	96 df       	rcall	.-212    	; 0x200 <lcd_wr_char>
 2d4:	98 01       	movw	r18, r16
 2d6:	36 95       	lsr	r19
 2d8:	27 95       	ror	r18
 2da:	36 95       	lsr	r19
 2dc:	27 95       	ror	r18
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	a5 ec       	ldi	r26, 0xC5	; 197
 2e4:	b0 e2       	ldi	r27, 0x20	; 32
 2e6:	d4 d1       	rcall	.+936    	; 0x690 <__umulhisi3>
 2e8:	ac 01       	movw	r20, r24
 2ea:	52 95       	swap	r21
 2ec:	42 95       	swap	r20
 2ee:	4f 70       	andi	r20, 0x0F	; 15
 2f0:	45 27       	eor	r20, r21
 2f2:	5f 70       	andi	r21, 0x0F	; 15
 2f4:	45 27       	eor	r20, r21
 2f6:	50 93 06 02 	sts	0x0206, r21
 2fa:	40 93 05 02 	sts	0x0205, r20
 2fe:	9a 01       	movw	r18, r20
 300:	ad ec       	ldi	r26, 0xCD	; 205
 302:	bc ec       	ldi	r27, 0xCC	; 204
 304:	c5 d1       	rcall	.+906    	; 0x690 <__umulhisi3>
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	9c 01       	movw	r18, r24
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	48 1b       	sub	r20, r24
 32a:	59 0b       	sbc	r21, r25
 32c:	ca 01       	movw	r24, r20
 32e:	c0 96       	adiw	r24, 0x30	; 48
 330:	90 93 0f 02 	sts	0x020F, r25
 334:	80 93 0e 02 	sts	0x020E, r24
 338:	63 df       	rcall	.-314    	; 0x200 <lcd_wr_char>
 33a:	04 c0       	rjmp	.+8      	; 0x344 <lcd_print+0xbe>
 33c:	c3 30       	cpi	r28, 0x03	; 3
 33e:	d1 05       	cpc	r29, r1
 340:	09 f0       	breq	.+2      	; 0x344 <lcd_print+0xbe>
 342:	84 c0       	rjmp	.+264    	; 0x44c <lcd_print+0x1c6>
 344:	98 01       	movw	r18, r16
 346:	36 95       	lsr	r19
 348:	27 95       	ror	r18
 34a:	36 95       	lsr	r19
 34c:	27 95       	ror	r18
 34e:	ab e7       	ldi	r26, 0x7B	; 123
 350:	b4 e1       	ldi	r27, 0x14	; 20
 352:	9e d1       	rcall	.+828    	; 0x690 <__umulhisi3>
 354:	ac 01       	movw	r20, r24
 356:	56 95       	lsr	r21
 358:	47 95       	ror	r20
 35a:	50 93 06 02 	sts	0x0206, r21
 35e:	40 93 05 02 	sts	0x0205, r20
 362:	9a 01       	movw	r18, r20
 364:	ad ec       	ldi	r26, 0xCD	; 205
 366:	bc ec       	ldi	r27, 0xCC	; 204
 368:	93 d1       	rcall	.+806    	; 0x690 <__umulhisi3>
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	9c 01       	movw	r18, r24
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	82 0f       	add	r24, r18
 38a:	93 1f       	adc	r25, r19
 38c:	48 1b       	sub	r20, r24
 38e:	59 0b       	sbc	r21, r25
 390:	ca 01       	movw	r24, r20
 392:	c0 96       	adiw	r24, 0x30	; 48
 394:	90 93 0b 02 	sts	0x020B, r25
 398:	80 93 0a 02 	sts	0x020A, r24
 39c:	31 df       	rcall	.-414    	; 0x200 <lcd_wr_char>
 39e:	98 01       	movw	r18, r16
 3a0:	ad ec       	ldi	r26, 0xCD	; 205
 3a2:	bc ec       	ldi	r27, 0xCC	; 204
 3a4:	75 d1       	rcall	.+746    	; 0x690 <__umulhisi3>
 3a6:	ac 01       	movw	r20, r24
 3a8:	56 95       	lsr	r21
 3aa:	47 95       	ror	r20
 3ac:	56 95       	lsr	r21
 3ae:	47 95       	ror	r20
 3b0:	56 95       	lsr	r21
 3b2:	47 95       	ror	r20
 3b4:	50 93 06 02 	sts	0x0206, r21
 3b8:	40 93 05 02 	sts	0x0205, r20
 3bc:	9a 01       	movw	r18, r20
 3be:	68 d1       	rcall	.+720    	; 0x690 <__umulhisi3>
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	96 95       	lsr	r25
 3c6:	87 95       	ror	r24
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	9c 01       	movw	r18, r24
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	82 0f       	add	r24, r18
 3e0:	93 1f       	adc	r25, r19
 3e2:	48 1b       	sub	r20, r24
 3e4:	59 0b       	sbc	r21, r25
 3e6:	ca 01       	movw	r24, r20
 3e8:	c0 96       	adiw	r24, 0x30	; 48
 3ea:	90 93 09 02 	sts	0x0209, r25
 3ee:	80 93 08 02 	sts	0x0208, r24
 3f2:	06 df       	rcall	.-500    	; 0x200 <lcd_wr_char>
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <lcd_print+0x176>
 3f6:	c1 30       	cpi	r28, 0x01	; 1
 3f8:	d1 05       	cpc	r29, r1
 3fa:	f1 f4       	brne	.+60     	; 0x438 <lcd_print+0x1b2>
 3fc:	98 01       	movw	r18, r16
 3fe:	ad ec       	ldi	r26, 0xCD	; 205
 400:	bc ec       	ldi	r27, 0xCC	; 204
 402:	46 d1       	rcall	.+652    	; 0x690 <__umulhisi3>
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	9c 01       	movw	r18, r24
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	82 0f       	add	r24, r18
 424:	93 1f       	adc	r25, r19
 426:	08 1b       	sub	r16, r24
 428:	19 0b       	sbc	r17, r25
 42a:	c8 01       	movw	r24, r16
 42c:	c0 96       	adiw	r24, 0x30	; 48
 42e:	90 93 0d 02 	sts	0x020D, r25
 432:	80 93 0c 02 	sts	0x020C, r24
 436:	e4 de       	rcall	.-568    	; 0x200 <lcd_wr_char>
 438:	26 97       	sbiw	r28, 0x06	; 6
 43a:	64 f0       	brlt	.+24     	; 0x454 <lcd_print+0x1ce>
 43c:	85 e4       	ldi	r24, 0x45	; 69
 43e:	e0 de       	rcall	.-576    	; 0x200 <lcd_wr_char>
 440:	09 c0       	rjmp	.+18     	; 0x454 <lcd_print+0x1ce>
 442:	c4 30       	cpi	r28, 0x04	; 4
 444:	d1 05       	cpc	r29, r1
 446:	09 f0       	breq	.+2      	; 0x44a <lcd_print+0x1c4>
 448:	79 cf       	rjmp	.-270    	; 0x33c <lcd_print+0xb6>
 44a:	44 cf       	rjmp	.-376    	; 0x2d4 <lcd_print+0x4e>
 44c:	c2 30       	cpi	r28, 0x02	; 2
 44e:	d1 05       	cpc	r29, r1
 450:	91 f6       	brne	.-92     	; 0x3f6 <lcd_print+0x170>
 452:	a5 cf       	rjmp	.-182    	; 0x39e <lcd_print+0x118>
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <lcd_port_config>:
 45e:	87 b1       	in	r24, 0x07	; 7
 460:	87 6f       	ori	r24, 0xF7	; 247
 462:	87 b9       	out	0x07, r24	; 7
 464:	88 b1       	in	r24, 0x08	; 8
 466:	80 78       	andi	r24, 0x80	; 128
 468:	88 b9       	out	0x08, r24	; 8
 46a:	08 95       	ret

0000046c <adc_pin_config>:
 46c:	11 b8       	out	0x01, r1	; 1
 46e:	12 b8       	out	0x02, r1	; 2
 470:	08 95       	ret

00000472 <motion_pin_config>:
 472:	84 b1       	in	r24, 0x04	; 4
 474:	8f 60       	ori	r24, 0x0F	; 15
 476:	84 b9       	out	0x04, r24	; 4
 478:	85 b1       	in	r24, 0x05	; 5
 47a:	80 7f       	andi	r24, 0xF0	; 240
 47c:	85 b9       	out	0x05, r24	; 5
 47e:	8a b1       	in	r24, 0x0a	; 10
 480:	80 63       	ori	r24, 0x30	; 48
 482:	8a b9       	out	0x0a, r24	; 10
 484:	8b b1       	in	r24, 0x0b	; 11
 486:	80 63       	ori	r24, 0x30	; 48
 488:	8b b9       	out	0x0b, r24	; 11
 48a:	08 95       	ret

0000048c <port_init>:
 48c:	e8 df       	rcall	.-48     	; 0x45e <lcd_port_config>
 48e:	ee df       	rcall	.-36     	; 0x46c <adc_pin_config>
 490:	f0 cf       	rjmp	.-32     	; 0x472 <motion_pin_config>
 492:	08 95       	ret

00000494 <timer1_init>:
 494:	e1 e8       	ldi	r30, 0x81	; 129
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	10 82       	st	Z, r1
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	80 93 85 00 	sts	0x0085, r24
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	90 93 84 00 	sts	0x0084, r25
 4a6:	10 92 89 00 	sts	0x0089, r1
 4aa:	80 93 88 00 	sts	0x0088, r24
 4ae:	10 92 8b 00 	sts	0x008B, r1
 4b2:	80 93 8a 00 	sts	0x008A, r24
 4b6:	10 92 87 00 	sts	0x0087, r1
 4ba:	80 93 86 00 	sts	0x0086, r24
 4be:	81 ea       	ldi	r24, 0xA1	; 161
 4c0:	80 93 80 00 	sts	0x0080, r24
 4c4:	8d e0       	ldi	r24, 0x0D	; 13
 4c6:	80 83       	st	Z, r24
 4c8:	08 95       	ret

000004ca <adc_init>:
 4ca:	ea e7       	ldi	r30, 0x7A	; 122
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	10 82       	st	Z, r1
 4d0:	80 e2       	ldi	r24, 0x20	; 32
 4d2:	80 93 7c 00 	sts	0x007C, r24
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	80 bf       	out	0x30, r24	; 48
 4da:	86 e8       	ldi	r24, 0x86	; 134
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <ADC_Conversion>:
 4e0:	87 70       	andi	r24, 0x07	; 7
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	80 93 7c 00 	sts	0x007C, r24
 4e8:	ea e7       	ldi	r30, 0x7A	; 122
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	80 64       	ori	r24, 0x40	; 64
 4f0:	80 83       	st	Z, r24
 4f2:	80 81       	ld	r24, Z
 4f4:	84 ff       	sbrs	r24, 4
 4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <ADC_Conversion+0x12>
 4f8:	80 91 79 00 	lds	r24, 0x0079
 4fc:	ea e7       	ldi	r30, 0x7A	; 122
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	90 81       	ld	r25, Z
 502:	90 61       	ori	r25, 0x10	; 16
 504:	90 83       	st	Z, r25
 506:	08 95       	ret

00000508 <print_sensor>:
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	c8 2f       	mov	r28, r24
 50e:	d6 2f       	mov	r29, r22
 510:	84 2f       	mov	r24, r20
 512:	e6 df       	rcall	.-52     	; 0x4e0 <ADC_Conversion>
 514:	80 93 07 02 	sts	0x0207, r24
 518:	48 2f       	mov	r20, r24
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	23 e0       	ldi	r18, 0x03	; 3
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	6d 2f       	mov	r22, r29
 522:	8c 2f       	mov	r24, r28
 524:	b0 de       	rcall	.-672    	; 0x286 <lcd_print>
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <motion_set>:
 52c:	95 b1       	in	r25, 0x05	; 5
 52e:	90 7f       	andi	r25, 0xF0	; 240
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	98 2b       	or	r25, r24
 534:	95 b9       	out	0x05, r25	; 5
 536:	08 95       	ret

00000538 <forward>:
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	f8 cf       	rjmp	.-16     	; 0x52c <motion_set>
 53c:	08 95       	ret

0000053e <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 53e:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = left_motor; 
 542:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x00;
 546:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = right_motor;
 54a:	60 93 8a 00 	sts	0x008A, r22
 54e:	08 95       	ret

00000550 <init_devices>:
}

void init_devices (void)
{
 cli();          //Clears the global interrupts
 550:	f8 94       	cli
 port_init();
 552:	9c df       	rcall	.-200    	; 0x48c <port_init>
 timer1_init();
 554:	9f df       	rcall	.-194    	; 0x494 <timer1_init>
 adc_init();
 556:	b9 df       	rcall	.-142    	; 0x4ca <adc_init>
 sei();          //Enables the global interrupts
 558:	78 94       	sei
 55a:	08 95       	ret

0000055c <main>:
//Main Function
int main(void)
{
 unsigned char flag ;

 init_devices();
 55c:	f9 df       	rcall	.-14     	; 0x550 <init_devices>

 lcd_set_4bit();
 55e:	d5 dd       	rcall	.-1110   	; 0x10a <lcd_set_4bit>
 lcd_init();
 560:	3e de       	rcall	.-900    	; 0x1de <lcd_init>

 velocity(VELOCITY_MAX,VELOCITY_MAX);    // Set the speed to max velocity
 562:	62 e3       	ldi	r22, 0x32	; 50
 564:	82 e3       	ldi	r24, 0x32	; 50
 566:	eb df       	rcall	.-42     	; 0x53e <velocity>
 lcd_print (2,1,VELOCITY_MAX,3);
 568:	23 e0       	ldi	r18, 0x03	; 3
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	42 e3       	ldi	r20, 0x32	; 50
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	88 de       	rcall	.-752    	; 0x286 <lcd_print>
 lcd_print (2,5,VELOCITY_MAX,3);
 576:	23 e0       	ldi	r18, 0x03	; 3
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	42 e3       	ldi	r20, 0x32	; 50
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	65 e0       	ldi	r22, 0x05	; 5
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	81 de       	rcall	.-766    	; 0x286 <lcd_print>
 forward();                              // start to move froward
 584:	d9 df       	rcall	.-78     	; 0x538 <forward>
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right

	flag=0;
 586:	c0 e0       	ldi	r28, 0x00	; 0
 lcd_print (2,5,VELOCITY_MAX,3);
 forward();                              // start to move froward

 while(1)
 {
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	aa df       	rcall	.-172    	; 0x4e0 <ADC_Conversion>
 58c:	80 93 02 02 	sts	0x0202, r24
	Center_white_line = ADC_Conversion(4);	//Getting data of Center WL Sensor
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	a6 df       	rcall	.-180    	; 0x4e0 <ADC_Conversion>
 594:	80 93 01 02 	sts	0x0201, r24
	Right_white_line = ADC_Conversion(5);	//Getting data of Right WL Sensor
 598:	85 e0       	ldi	r24, 0x05	; 5
 59a:	a2 df       	rcall	.-188    	; 0x4e0 <ADC_Conversion>
 59c:	80 93 00 02 	sts	0x0200, r24
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
 5a0:	43 e0       	ldi	r20, 0x03	; 3
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	b0 df       	rcall	.-160    	; 0x508 <print_sensor>
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
 5a8:	44 e0       	ldi	r20, 0x04	; 4
 5aa:	65 e0       	ldi	r22, 0x05	; 5
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	ac df       	rcall	.-168    	; 0x508 <print_sensor>
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right
 5b0:	45 e0       	ldi	r20, 0x05	; 5
 5b2:	69 e0       	ldi	r22, 0x09	; 9
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	a8 df       	rcall	.-176    	; 0x508 <print_sensor>

	flag=0;

	if(Center_white_line>THRESHOLD)               // Is middle Whiteline is within threshold limit
 5b8:	90 91 01 02 	lds	r25, 0x0201
 5bc:	91 35       	cpi	r25, 0x51	; 81
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <main+0x66>
 5c0:	5b c0       	rjmp	.+182    	; 0x678 <main+0x11c>
	{                                             
		flag=1;
		velocity(VELOCITY_MAX,VELOCITY_MAX);      // Run robot at max velocity 
 5c2:	62 e3       	ldi	r22, 0x32	; 50
 5c4:	82 e3       	ldi	r24, 0x32	; 50
 5c6:	bb df       	rcall	.-138    	; 0x53e <velocity>
		lcd_print (2,1,VELOCITY_MAX,3);
 5c8:	23 e0       	ldi	r18, 0x03	; 3
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	42 e3       	ldi	r20, 0x32	; 50
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	58 de       	rcall	.-848    	; 0x286 <lcd_print>
		lcd_print (2,5,VELOCITY_MAX,3);
 5d6:	23 e0       	ldi	r18, 0x03	; 3
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	42 e3       	ldi	r20, 0x32	; 50
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	65 e0       	ldi	r22, 0x05	; 5
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	51 de       	rcall	.-862    	; 0x286 <lcd_print>

	flag=0;

	if(Center_white_line>THRESHOLD)               // Is middle Whiteline is within threshold limit
	{                                             
		flag=1;
 5e4:	21 e0       	ldi	r18, 0x01	; 1
 5e6:	25 c0       	rjmp	.+74     	; 0x632 <main+0xd6>

	if((Left_white_line<THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	{                                             
		flag=1;                       
		velocity(VELOCITY_MAX,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel 
 5e8:	6e e1       	ldi	r22, 0x1E	; 30
 5ea:	82 e3       	ldi	r24, 0x32	; 50
 5ec:	a8 df       	rcall	.-176    	; 0x53e <velocity>
		lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
 5ee:	23 e0       	ldi	r18, 0x03	; 3
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	42 e3       	ldi	r20, 0x32	; 50
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	45 de       	rcall	.-886    	; 0x286 <lcd_print>
		lcd_print (2,5,VELOCITY_MIN,3);         
 5fc:	23 e0       	ldi	r18, 0x03	; 3
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	4e e1       	ldi	r20, 0x1E	; 30
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	3e de       	rcall	.-900    	; 0x286 <lcd_print>
	}

	if((Left_white_line<THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	{                                             
		flag=1;                       
 60a:	21 e0       	ldi	r18, 0x01	; 1
 60c:	12 c0       	rjmp	.+36     	; 0x632 <main+0xd6>

	if((Right_white_line<THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	//if((Right_white_line>THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	{
		flag=1;    
		velocity(VELOCITY_MIN,VELOCITY_MAX);      // Run robot right wheel at max velocity and left wheel 
 60e:	62 e3       	ldi	r22, 0x32	; 50
 610:	8e e1       	ldi	r24, 0x1E	; 30
 612:	95 df       	rcall	.-214    	; 0x53e <velocity>
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
 614:	23 e0       	ldi	r18, 0x03	; 3
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	4e e1       	ldi	r20, 0x1E	; 30
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	32 de       	rcall	.-924    	; 0x286 <lcd_print>
		lcd_print (2,5,VELOCITY_MAX,3);
 622:	23 e0       	ldi	r18, 0x03	; 3
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	42 e3       	ldi	r20, 0x32	; 50
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	65 e0       	ldi	r22, 0x05	; 5
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	2b de       	rcall	.-938    	; 0x286 <lcd_print>
	}

	if((Right_white_line<THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	//if((Right_white_line>THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	{
		flag=1;    
 630:	21 e0       	ldi	r18, 0x01	; 1
	/*	velocity(60,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel 
		lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
		lcd_print (2,5,VELOCITY_MIN,3);*/
	}

	if(Center_white_line<THRESHOLD && Left_white_line<THRESHOLD && Right_white_line<THRESHOLD && (flag == 0))
 632:	90 91 01 02 	lds	r25, 0x0201
 636:	90 35       	cpi	r25, 0x50	; 80
 638:	08 f0       	brcs	.+2      	; 0x63c <main+0xe0>
 63a:	a6 cf       	rjmp	.-180    	; 0x588 <main+0x2c>
 63c:	90 91 02 02 	lds	r25, 0x0202
 640:	90 35       	cpi	r25, 0x50	; 80
 642:	08 f0       	brcs	.+2      	; 0x646 <main+0xea>
 644:	a1 cf       	rjmp	.-190    	; 0x588 <main+0x2c>
 646:	90 91 00 02 	lds	r25, 0x0200
 64a:	90 35       	cpi	r25, 0x50	; 80
 64c:	08 f0       	brcs	.+2      	; 0x650 <main+0xf4>
 64e:	9c cf       	rjmp	.-200    	; 0x588 <main+0x2c>
 650:	21 11       	cpse	r18, r1
 652:	9a cf       	rjmp	.-204    	; 0x588 <main+0x2c>
	                                // if all Whiteline sensor are not within threshold limit    
	{
		flag=1;
		velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
 654:	6c 2f       	mov	r22, r28
 656:	8c 2f       	mov	r24, r28
 658:	72 df       	rcall	.-284    	; 0x53e <velocity>
		lcd_print (2,1,VELOCITY_LOW,3);
 65a:	23 e0       	ldi	r18, 0x03	; 3
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	0f de       	rcall	.-994    	; 0x286 <lcd_print>
		lcd_print (2,5,VELOCITY_LOW,3);
 668:	23 e0       	ldi	r18, 0x03	; 3
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	40 e0       	ldi	r20, 0x00	; 0
 66e:	50 e0       	ldi	r21, 0x00	; 0
 670:	65 e0       	ldi	r22, 0x05	; 5
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	08 de       	rcall	.-1008   	; 0x286 <lcd_print>
 676:	88 cf       	rjmp	.-240    	; 0x588 <main+0x2c>
		velocity(VELOCITY_MAX,VELOCITY_MAX);      // Run robot at max velocity 
		lcd_print (2,1,VELOCITY_MAX,3);
		lcd_print (2,5,VELOCITY_MAX,3);
	}

	if((Left_white_line<THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
 678:	80 91 02 02 	lds	r24, 0x0202
 67c:	80 35       	cpi	r24, 0x50	; 80
 67e:	08 f4       	brcc	.+2      	; 0x682 <main+0x126>
 680:	b3 cf       	rjmp	.-154    	; 0x5e8 <main+0x8c>
	/*	velocity(VELOCITY_MIN,60);      // Run robot right wheel at max velocity and left wheel 
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
		lcd_print (2,5,VELOCITY_MAX,3);*/
	}

	if((Right_white_line<THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
 682:	80 91 00 02 	lds	r24, 0x0200
 686:	80 35       	cpi	r24, 0x50	; 80
 688:	08 f4       	brcc	.+2      	; 0x68c <main+0x130>
 68a:	c1 cf       	rjmp	.-126    	; 0x60e <main+0xb2>
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right

	flag=0;
 68c:	2c 2f       	mov	r18, r28
 68e:	d1 cf       	rjmp	.-94     	; 0x632 <main+0xd6>

00000690 <__umulhisi3>:
 690:	a2 9f       	mul	r26, r18
 692:	b0 01       	movw	r22, r0
 694:	b3 9f       	mul	r27, r19
 696:	c0 01       	movw	r24, r0
 698:	a3 9f       	mul	r26, r19
 69a:	70 0d       	add	r23, r0
 69c:	81 1d       	adc	r24, r1
 69e:	11 24       	eor	r1, r1
 6a0:	91 1d       	adc	r25, r1
 6a2:	b2 9f       	mul	r27, r18
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	08 95       	ret

000006ae <_exit>:
 6ae:	f8 94       	cli

000006b0 <__stop_program>:
 6b0:	ff cf       	rjmp	.-2      	; 0x6b0 <__stop_program>
