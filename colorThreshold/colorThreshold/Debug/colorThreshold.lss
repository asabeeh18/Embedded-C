
colorThreshold.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800200  00000bc6  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080025c  0080025c  00000cb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b9  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025c  00000000  00000000  00001f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009bd  00000000  00000000  000021eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006db  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000037ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	5f c2       	rjmp	.+1214   	; 0x4c4 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ec       	ldi	r30, 0xC6	; 198
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 35       	cpi	r26, 0x5C	; 92
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e5       	ldi	r26, 0x5C	; 92
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 37       	cpi	r26, 0x78	; 120
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	01 d3       	rcall	.+1538   	; 0x722 <main>
 120:	50 c5       	rjmp	.+2720   	; 0xbc2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_set_4bit>:

void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
	PORTD = PORTD & 0x7F; //set S3 Low
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_set_4bit+0x4>
 12c:	00 00       	nop
 12e:	40 98       	cbi	0x08, 0	; 8
 130:	41 98       	cbi	0x08, 1	; 8
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	88 b9       	out	0x08, r24	; 8
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	97 e4       	ldi	r25, 0x47	; 71
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_set_4bit+0x1e>
 142:	00 00       	nop
 144:	42 98       	cbi	0x08, 2	; 8
 146:	86 e6       	ldi	r24, 0x66	; 102
 148:	9e e0       	ldi	r25, 0x0E	; 14
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_set_4bit+0x26>
 14e:	00 00       	nop
 150:	40 98       	cbi	0x08, 0	; 8
 152:	41 98       	cbi	0x08, 1	; 8
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	88 b9       	out	0x08, r24	; 8
 158:	42 9a       	sbi	0x08, 2	; 8
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	97 e4       	ldi	r25, 0x47	; 71
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_set_4bit+0x40>
 164:	00 00       	nop
 166:	42 98       	cbi	0x08, 2	; 8
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	9e e0       	ldi	r25, 0x0E	; 14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x48>
 170:	00 00       	nop
 172:	40 98       	cbi	0x08, 0	; 8
 174:	41 98       	cbi	0x08, 1	; 8
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	88 b9       	out	0x08, r24	; 8
 17a:	42 9a       	sbi	0x08, 2	; 8
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	97 e4       	ldi	r25, 0x47	; 71
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x5c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_set_4bit+0x62>
 186:	00 00       	nop
 188:	42 98       	cbi	0x08, 2	; 8
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x6a>
 192:	00 00       	nop
 194:	40 98       	cbi	0x08, 0	; 8
 196:	41 98       	cbi	0x08, 1	; 8
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	42 9a       	sbi	0x08, 2	; 8
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	97 e4       	ldi	r25, 0x47	; 71
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x7e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x84>
 1a8:	00 00       	nop
 1aa:	42 98       	cbi	0x08, 2	; 8
 1ac:	08 95       	ret

000001ae <lcd_wr_command>:
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	28 2f       	mov	r18, r24
 1b8:	20 7f       	andi	r18, 0xF0	; 240
 1ba:	92 2b       	or	r25, r18
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	41 98       	cbi	0x08, 1	; 8
 1c2:	42 9a       	sbi	0x08, 2	; 8
 1c4:	ef ef       	ldi	r30, 0xFF	; 255
 1c6:	f7 e4       	ldi	r31, 0x47	; 71
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x1a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_wr_command+0x20>
 1ce:	00 00       	nop
 1d0:	42 98       	cbi	0x08, 2	; 8
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	9f 70       	andi	r25, 0x0F	; 15
 1d6:	98 b9       	out	0x08, r25	; 8
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	40 98       	cbi	0x08, 0	; 8
 1e4:	41 98       	cbi	0x08, 1	; 8
 1e6:	42 9a       	sbi	0x08, 2	; 8
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	97 e4       	ldi	r25, 0x47	; 71
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_wr_command+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_wr_command+0x44>
 1f2:	00 00       	nop
 1f4:	42 98       	cbi	0x08, 2	; 8
 1f6:	08 95       	ret

000001f8 <lcd_init>:
 1f8:	95 df       	rcall	.-214    	; 0x124 <lcd_set_4bit>
 1fa:	86 e6       	ldi	r24, 0x66	; 102
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x6>
 202:	00 00       	nop
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	d3 df       	rcall	.-90     	; 0x1ae <lcd_wr_command>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	d1 df       	rcall	.-94     	; 0x1ae <lcd_wr_command>
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	cf df       	rcall	.-98     	; 0x1ae <lcd_wr_command>
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	cd df       	rcall	.-102    	; 0x1ae <lcd_wr_command>
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	cb cf       	rjmp	.-106    	; 0x1ae <lcd_wr_command>
 218:	08 95       	ret

0000021a <lcd_wr_char>:
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	98 b9       	out	0x08, r25	; 8
 220:	98 b1       	in	r25, 0x08	; 8
 222:	28 2f       	mov	r18, r24
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	92 2b       	or	r25, r18
 228:	98 b9       	out	0x08, r25	; 8
 22a:	40 9a       	sbi	0x08, 0	; 8
 22c:	41 98       	cbi	0x08, 1	; 8
 22e:	42 9a       	sbi	0x08, 2	; 8
 230:	ef ef       	ldi	r30, 0xFF	; 255
 232:	f7 e4       	ldi	r31, 0x47	; 71
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
 23a:	00 00       	nop
 23c:	42 98       	cbi	0x08, 2	; 8
 23e:	98 b1       	in	r25, 0x08	; 8
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	98 b9       	out	0x08, r25	; 8
 244:	98 b1       	in	r25, 0x08	; 8
 246:	82 95       	swap	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	89 2b       	or	r24, r25
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	40 9a       	sbi	0x08, 0	; 8
 250:	41 98       	cbi	0x08, 1	; 8
 252:	42 9a       	sbi	0x08, 2	; 8
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	97 e4       	ldi	r25, 0x47	; 71
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
 25e:	00 00       	nop
 260:	42 98       	cbi	0x08, 2	; 8
 262:	08 95       	ret

00000264 <lcd_home>:
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	a3 cf       	rjmp	.-186    	; 0x1ae <lcd_wr_command>
 268:	08 95       	ret

0000026a <lcd_string>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	88 81       	ld	r24, Y
 272:	88 23       	and	r24, r24
 274:	29 f0       	breq	.+10     	; 0x280 <lcd_string+0x16>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	d0 df       	rcall	.-96     	; 0x21a <lcd_wr_char>
 27a:	89 91       	ld	r24, Y+
 27c:	81 11       	cpse	r24, r1
 27e:	fc cf       	rjmp	.-8      	; 0x278 <lcd_string+0xe>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <lcd_cursor>:
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	69 f0       	breq	.+26     	; 0x2a4 <lcd_cursor+0x1e>
 28a:	18 f4       	brcc	.+6      	; 0x292 <lcd_cursor+0xc>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	31 f0       	breq	.+12     	; 0x29c <lcd_cursor+0x16>
 290:	08 95       	ret
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	59 f0       	breq	.+22     	; 0x2ac <lcd_cursor+0x26>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	69 f0       	breq	.+26     	; 0x2b4 <lcd_cursor+0x2e>
 29a:	08 95       	ret
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	86 0f       	add	r24, r22
 2a0:	86 cf       	rjmp	.-244    	; 0x1ae <lcd_wr_command>
 2a2:	08 95       	ret
 2a4:	8f eb       	ldi	r24, 0xBF	; 191
 2a6:	86 0f       	add	r24, r22
 2a8:	82 cf       	rjmp	.-252    	; 0x1ae <lcd_wr_command>
 2aa:	08 95       	ret
 2ac:	83 e9       	ldi	r24, 0x93	; 147
 2ae:	86 0f       	add	r24, r22
 2b0:	7e cf       	rjmp	.-260    	; 0x1ae <lcd_wr_command>
 2b2:	08 95       	ret
 2b4:	83 ed       	ldi	r24, 0xD3	; 211
 2b6:	86 0f       	add	r24, r22
 2b8:	7a cf       	rjmp	.-268    	; 0x1ae <lcd_wr_command>
 2ba:	08 95       	ret

000002bc <lcd_print>:
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	8a 01       	movw	r16, r20
 2c6:	e9 01       	movw	r28, r18
 2c8:	88 23       	and	r24, r24
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <lcd_print+0x14>
 2cc:	61 11       	cpse	r22, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <lcd_print+0x18>
 2d0:	c9 df       	rcall	.-110    	; 0x264 <lcd_home>
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <lcd_print+0x1a>
 2d4:	d8 df       	rcall	.-80     	; 0x286 <lcd_cursor>
 2d6:	c5 30       	cpi	r28, 0x05	; 5
 2d8:	d1 05       	cpc	r29, r1
 2da:	09 f0       	breq	.+2      	; 0x2de <lcd_print+0x22>
 2dc:	cd c0       	rjmp	.+410    	; 0x478 <lcd_print+0x1bc>
 2de:	98 01       	movw	r18, r16
 2e0:	32 95       	swap	r19
 2e2:	22 95       	swap	r18
 2e4:	2f 70       	andi	r18, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	3f 70       	andi	r19, 0x0F	; 15
 2ea:	23 27       	eor	r18, r19
 2ec:	a7 e4       	ldi	r26, 0x47	; 71
 2ee:	b3 e0       	ldi	r27, 0x03	; 3
 2f0:	45 d4       	rcall	.+2186   	; 0xb7c <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	c0 96       	adiw	r24, 0x30	; 48
 300:	90 93 65 02 	sts	0x0265, r25
 304:	80 93 64 02 	sts	0x0264, r24
 308:	88 df       	rcall	.-240    	; 0x21a <lcd_wr_char>
 30a:	98 01       	movw	r18, r16
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	a5 ec       	ldi	r26, 0xC5	; 197
 31a:	b0 e2       	ldi	r27, 0x20	; 32
 31c:	2f d4       	rcall	.+2142   	; 0xb7c <__umulhisi3>
 31e:	ac 01       	movw	r20, r24
 320:	52 95       	swap	r21
 322:	42 95       	swap	r20
 324:	4f 70       	andi	r20, 0x0F	; 15
 326:	45 27       	eor	r20, r21
 328:	5f 70       	andi	r21, 0x0F	; 15
 32a:	45 27       	eor	r20, r21
 32c:	50 93 67 02 	sts	0x0267, r21
 330:	40 93 66 02 	sts	0x0266, r20
 334:	9a 01       	movw	r18, r20
 336:	ad ec       	ldi	r26, 0xCD	; 205
 338:	bc ec       	ldi	r27, 0xCC	; 204
 33a:	20 d4       	rcall	.+2112   	; 0xb7c <__umulhisi3>
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	9c 01       	movw	r18, r24
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	82 0f       	add	r24, r18
 35c:	93 1f       	adc	r25, r19
 35e:	48 1b       	sub	r20, r24
 360:	59 0b       	sbc	r21, r25
 362:	ca 01       	movw	r24, r20
 364:	c0 96       	adiw	r24, 0x30	; 48
 366:	90 93 77 02 	sts	0x0277, r25
 36a:	80 93 76 02 	sts	0x0276, r24
 36e:	55 df       	rcall	.-342    	; 0x21a <lcd_wr_char>
 370:	04 c0       	rjmp	.+8      	; 0x37a <lcd_print+0xbe>
 372:	c3 30       	cpi	r28, 0x03	; 3
 374:	d1 05       	cpc	r29, r1
 376:	09 f0       	breq	.+2      	; 0x37a <lcd_print+0xbe>
 378:	84 c0       	rjmp	.+264    	; 0x482 <lcd_print+0x1c6>
 37a:	98 01       	movw	r18, r16
 37c:	36 95       	lsr	r19
 37e:	27 95       	ror	r18
 380:	36 95       	lsr	r19
 382:	27 95       	ror	r18
 384:	ab e7       	ldi	r26, 0x7B	; 123
 386:	b4 e1       	ldi	r27, 0x14	; 20
 388:	f9 d3       	rcall	.+2034   	; 0xb7c <__umulhisi3>
 38a:	ac 01       	movw	r20, r24
 38c:	56 95       	lsr	r21
 38e:	47 95       	ror	r20
 390:	50 93 67 02 	sts	0x0267, r21
 394:	40 93 66 02 	sts	0x0266, r20
 398:	9a 01       	movw	r18, r20
 39a:	ad ec       	ldi	r26, 0xCD	; 205
 39c:	bc ec       	ldi	r27, 0xCC	; 204
 39e:	ee d3       	rcall	.+2012   	; 0xb7c <__umulhisi3>
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	9c 01       	movw	r18, r24
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
 3c2:	48 1b       	sub	r20, r24
 3c4:	59 0b       	sbc	r21, r25
 3c6:	ca 01       	movw	r24, r20
 3c8:	c0 96       	adiw	r24, 0x30	; 48
 3ca:	90 93 73 02 	sts	0x0273, r25
 3ce:	80 93 72 02 	sts	0x0272, r24
 3d2:	23 df       	rcall	.-442    	; 0x21a <lcd_wr_char>
 3d4:	98 01       	movw	r18, r16
 3d6:	ad ec       	ldi	r26, 0xCD	; 205
 3d8:	bc ec       	ldi	r27, 0xCC	; 204
 3da:	d0 d3       	rcall	.+1952   	; 0xb7c <__umulhisi3>
 3dc:	ac 01       	movw	r20, r24
 3de:	56 95       	lsr	r21
 3e0:	47 95       	ror	r20
 3e2:	56 95       	lsr	r21
 3e4:	47 95       	ror	r20
 3e6:	56 95       	lsr	r21
 3e8:	47 95       	ror	r20
 3ea:	50 93 67 02 	sts	0x0267, r21
 3ee:	40 93 66 02 	sts	0x0266, r20
 3f2:	9a 01       	movw	r18, r20
 3f4:	c3 d3       	rcall	.+1926   	; 0xb7c <__umulhisi3>
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	9c 01       	movw	r18, r24
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	48 1b       	sub	r20, r24
 41a:	59 0b       	sbc	r21, r25
 41c:	ca 01       	movw	r24, r20
 41e:	c0 96       	adiw	r24, 0x30	; 48
 420:	90 93 71 02 	sts	0x0271, r25
 424:	80 93 70 02 	sts	0x0270, r24
 428:	f8 de       	rcall	.-528    	; 0x21a <lcd_wr_char>
 42a:	03 c0       	rjmp	.+6      	; 0x432 <lcd_print+0x176>
 42c:	c1 30       	cpi	r28, 0x01	; 1
 42e:	d1 05       	cpc	r29, r1
 430:	f1 f4       	brne	.+60     	; 0x46e <lcd_print+0x1b2>
 432:	98 01       	movw	r18, r16
 434:	ad ec       	ldi	r26, 0xCD	; 205
 436:	bc ec       	ldi	r27, 0xCC	; 204
 438:	a1 d3       	rcall	.+1858   	; 0xb7c <__umulhisi3>
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	9c 01       	movw	r18, r24
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	08 1b       	sub	r16, r24
 45e:	19 0b       	sbc	r17, r25
 460:	c8 01       	movw	r24, r16
 462:	c0 96       	adiw	r24, 0x30	; 48
 464:	90 93 75 02 	sts	0x0275, r25
 468:	80 93 74 02 	sts	0x0274, r24
 46c:	d6 de       	rcall	.-596    	; 0x21a <lcd_wr_char>
 46e:	26 97       	sbiw	r28, 0x06	; 6
 470:	64 f0       	brlt	.+24     	; 0x48a <lcd_print+0x1ce>
 472:	85 e4       	ldi	r24, 0x45	; 69
 474:	d2 de       	rcall	.-604    	; 0x21a <lcd_wr_char>
 476:	09 c0       	rjmp	.+18     	; 0x48a <lcd_print+0x1ce>
 478:	c4 30       	cpi	r28, 0x04	; 4
 47a:	d1 05       	cpc	r29, r1
 47c:	09 f0       	breq	.+2      	; 0x480 <lcd_print+0x1c4>
 47e:	79 cf       	rjmp	.-270    	; 0x372 <lcd_print+0xb6>
 480:	44 cf       	rjmp	.-376    	; 0x30a <lcd_print+0x4e>
 482:	c2 30       	cpi	r28, 0x02	; 2
 484:	d1 05       	cpc	r29, r1
 486:	91 f6       	brne	.-92     	; 0x42c <lcd_print+0x170>
 488:	a5 cf       	rjmp	.-182    	; 0x3d4 <lcd_print+0x118>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <lcd_port_config>:
 494:	87 b1       	in	r24, 0x07	; 7
 496:	87 6f       	ori	r24, 0xF7	; 247
 498:	87 b9       	out	0x07, r24	; 7
 49a:	88 b1       	in	r24, 0x08	; 8
 49c:	80 78       	andi	r24, 0x80	; 128
 49e:	88 b9       	out	0x08, r24	; 8
 4a0:	08 95       	ret

000004a2 <color_sensor_pin_config>:
 4a2:	8a b1       	in	r24, 0x0a	; 10
 4a4:	8e 6f       	ori	r24, 0xFE	; 254
 4a6:	8a b9       	out	0x0a, r24	; 10
 4a8:	58 9a       	sbi	0x0b, 0	; 11
 4aa:	08 95       	ret

000004ac <port_init>:
 4ac:	f3 df       	rcall	.-26     	; 0x494 <lcd_port_config>
 4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <color_sensor_pin_config>
 4b0:	08 95       	ret

000004b2 <color_sensor_pin_interrupt_init>:
 4b2:	f8 94       	cli
 4b4:	e9 e6       	ldi	r30, 0x69	; 105
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	80 83       	st	Z, r24
 4be:	e8 9a       	sbi	0x1d, 0	; 29
 4c0:	78 94       	sei
 4c2:	08 95       	ret

000004c4 <__vector_1>:
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	80 91 5c 02 	lds	r24, 0x025C
 4da:	90 91 5d 02 	lds	r25, 0x025D
 4de:	a0 91 5e 02 	lds	r26, 0x025E
 4e2:	b0 91 5f 02 	lds	r27, 0x025F
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	a1 1d       	adc	r26, r1
 4ea:	b1 1d       	adc	r27, r1
 4ec:	80 93 5c 02 	sts	0x025C, r24
 4f0:	90 93 5d 02 	sts	0x025D, r25
 4f4:	a0 93 5e 02 	sts	0x025E, r26
 4f8:	b0 93 5f 02 	sts	0x025F, r27
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <init_devices>:
 50e:	f8 94       	cli
 510:	3b 9a       	sbi	0x07, 3	; 7
 512:	43 98       	cbi	0x08, 3	; 8
 514:	cb df       	rcall	.-106    	; 0x4ac <port_init>
 516:	cd df       	rcall	.-102    	; 0x4b2 <color_sensor_pin_interrupt_init>
 518:	78 94       	sei
 51a:	08 95       	ret

0000051c <filter_red>:
 51c:	5e 98       	cbi	0x0b, 6	; 11
 51e:	5f 98       	cbi	0x0b, 7	; 11
 520:	08 95       	ret

00000522 <filter_green>:
 522:	5e 9a       	sbi	0x0b, 6	; 11
 524:	5f 9a       	sbi	0x0b, 7	; 11
 526:	08 95       	ret

00000528 <filter_blue>:
 528:	5e 98       	cbi	0x0b, 6	; 11
 52a:	5f 9a       	sbi	0x0b, 7	; 11
 52c:	08 95       	ret

0000052e <color_sensor_scaling>:
//Color Sensing Scaling
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
 52e:	5c 9a       	sbi	0x0b, 4	; 11
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
 530:	5d 9a       	sbi	0x0b, 5	; 11
 532:	08 95       	ret

00000534 <red_read>:
}

void red_read(void) // function to select red filter and display the count generated by the sensor on LCD. The count will be more if the color is red. The count will be very less if its blue or green.
{
	//Red
	filter_red(); //select red filter
 534:	f3 df       	rcall	.-26     	; 0x51c <filter_red>
	pulse=0; //reset the count to 0
 536:	10 92 5c 02 	sts	0x025C, r1
 53a:	10 92 5d 02 	sts	0x025D, r1
 53e:	10 92 5e 02 	sts	0x025E, r1
 542:	10 92 5f 02 	sts	0x025F, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	8f e7       	ldi	r24, 0x7F	; 127
 54a:	94 e0       	ldi	r25, 0x04	; 4
 54c:	21 50       	subi	r18, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <red_read+0x18>
 554:	00 c0       	rjmp	.+0      	; 0x556 <red_read+0x22>
 556:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  //store the count in variable called red
 558:	80 91 5c 02 	lds	r24, 0x025C
 55c:	90 91 5d 02 	lds	r25, 0x025D
 560:	a0 91 5e 02 	lds	r26, 0x025E
 564:	b0 91 5f 02 	lds	r27, 0x025F
 568:	80 93 6c 02 	sts	0x026C, r24
 56c:	90 93 6d 02 	sts	0x026D, r25
 570:	a0 93 6e 02 	sts	0x026E, r26
 574:	b0 93 6f 02 	sts	0x026F, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	84 de       	rcall	.-760    	; 0x286 <lcd_cursor>
	lcd_string("Red Pulses"); // Display "Red Pulses" on LCD
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	73 de       	rcall	.-794    	; 0x26a <lcd_string>
	lcd_print(2,1,red,5);  //Print the count on second row
 584:	40 91 6c 02 	lds	r20, 0x026C
 588:	50 91 6d 02 	lds	r21, 0x026D
 58c:	60 91 6e 02 	lds	r22, 0x026E
 590:	70 91 6f 02 	lds	r23, 0x026F
 594:	25 e0       	ldi	r18, 0x05	; 5
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	8f de       	rcall	.-738    	; 0x2bc <lcd_print>
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	9c e2       	ldi	r25, 0x2C	; 44
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <red_read+0x70>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <red_read+0x7a>
 5ae:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	fd cd       	rjmp	.-1030   	; 0x1ae <lcd_wr_command>
 5b4:	08 95       	ret

000005b6 <green_read>:
}

void green_read(void) // function to select green filter and display the count generated by the sensor on LCD. The count will be more if the color is green. The count will be very less if its blue or red.
{
	//Green
	filter_green(); //select green filter
 5b6:	b5 df       	rcall	.-150    	; 0x522 <filter_green>
	pulse=0; //reset the count to 0
 5b8:	10 92 5c 02 	sts	0x025C, r1
 5bc:	10 92 5d 02 	sts	0x025D, r1
 5c0:	10 92 5e 02 	sts	0x025E, r1
 5c4:	10 92 5f 02 	sts	0x025F, r1
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	8f e7       	ldi	r24, 0x7F	; 127
 5cc:	94 e0       	ldi	r25, 0x04	; 4
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <green_read+0x18>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <green_read+0x22>
 5d8:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse;  //store the count in variable called green
 5da:	80 91 5c 02 	lds	r24, 0x025C
 5de:	90 91 5d 02 	lds	r25, 0x025D
 5e2:	a0 91 5e 02 	lds	r26, 0x025E
 5e6:	b0 91 5f 02 	lds	r27, 0x025F
 5ea:	80 93 68 02 	sts	0x0268, r24
 5ee:	90 93 69 02 	sts	0x0269, r25
 5f2:	a0 93 6a 02 	sts	0x026A, r26
 5f6:	b0 93 6b 02 	sts	0x026B, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	43 de       	rcall	.-890    	; 0x286 <lcd_cursor>
	lcd_string("Green Pulses"); // Display "Green Pulses" on LCD
 600:	8b e0       	ldi	r24, 0x0B	; 11
 602:	92 e0       	ldi	r25, 0x02	; 2
 604:	32 de       	rcall	.-924    	; 0x26a <lcd_string>
	lcd_print(2,1,green,5);  //Print the count on second row
 606:	40 91 68 02 	lds	r20, 0x0268
 60a:	50 91 69 02 	lds	r21, 0x0269
 60e:	60 91 6a 02 	lds	r22, 0x026A
 612:	70 91 6b 02 	lds	r23, 0x026B
 616:	25 e0       	ldi	r18, 0x05	; 5
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	4e de       	rcall	.-868    	; 0x2bc <lcd_print>
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	9c e2       	ldi	r25, 0x2C	; 44
 626:	21 50       	subi	r18, 0x01	; 1
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <green_read+0x70>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <green_read+0x7a>
 630:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	bc cd       	rjmp	.-1160   	; 0x1ae <lcd_wr_command>
 636:	08 95       	ret

00000638 <blue_read>:
}

void blue_read(void) // function to select blue filter and display the count generated by the sensor on LCD. The count will be more if the color is blue. The count will be very less if its red or green.
{
	//Blue
	filter_blue(); //select blue filter
 638:	77 df       	rcall	.-274    	; 0x528 <filter_blue>
	pulse=0; //reset the count to 0
 63a:	10 92 5c 02 	sts	0x025C, r1
 63e:	10 92 5d 02 	sts	0x025D, r1
 642:	10 92 5e 02 	sts	0x025E, r1
 646:	10 92 5f 02 	sts	0x025F, r1
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	8f e7       	ldi	r24, 0x7F	; 127
 64e:	94 e0       	ldi	r25, 0x04	; 4
 650:	21 50       	subi	r18, 0x01	; 1
 652:	80 40       	sbci	r24, 0x00	; 0
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <blue_read+0x18>
 658:	00 c0       	rjmp	.+0      	; 0x65a <blue_read+0x22>
 65a:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
 65c:	80 91 5c 02 	lds	r24, 0x025C
 660:	90 91 5d 02 	lds	r25, 0x025D
 664:	a0 91 5e 02 	lds	r26, 0x025E
 668:	b0 91 5f 02 	lds	r27, 0x025F
 66c:	80 93 60 02 	sts	0x0260, r24
 670:	90 93 61 02 	sts	0x0261, r25
 674:	a0 93 62 02 	sts	0x0262, r26
 678:	b0 93 63 02 	sts	0x0263, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	02 de       	rcall	.-1020   	; 0x286 <lcd_cursor>
	lcd_string("Blue Pulses"); // Display "Blue Pulses" on LCD
 682:	88 e1       	ldi	r24, 0x18	; 24
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	f1 dd       	rcall	.-1054   	; 0x26a <lcd_string>
	lcd_print(2,1,blue,5);  //Print the count on second row
 688:	40 91 60 02 	lds	r20, 0x0260
 68c:	50 91 61 02 	lds	r21, 0x0261
 690:	60 91 62 02 	lds	r22, 0x0262
 694:	70 91 63 02 	lds	r23, 0x0263
 698:	25 e0       	ldi	r18, 0x05	; 5
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	61 e0       	ldi	r22, 0x01	; 1
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	0d de       	rcall	.-998    	; 0x2bc <lcd_print>
 6a2:	2f ef       	ldi	r18, 0xFF	; 255
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	9c e2       	ldi	r25, 0x2C	; 44
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	80 40       	sbci	r24, 0x00	; 0
 6ac:	90 40       	sbci	r25, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <blue_read+0x70>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <blue_read+0x7a>
 6b2:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	7b cd       	rjmp	.-1290   	; 0x1ae <lcd_wr_command>
 6b8:	08 95       	ret

000006ba <read>:
}
void read()
{
	   red_read(); //display the pulse count when red filter is selected
 6ba:	3c df       	rcall	.-392    	; 0x534 <red_read>
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	8f e7       	ldi	r24, 0x7F	; 127
 6c0:	96 e1       	ldi	r25, 0x16	; 22
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <read+0x8>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <read+0x12>
 6cc:	00 00       	nop
	   _delay_ms(500);
	   green_read(); //display the pulse count when green filter is selected
 6ce:	73 df       	rcall	.-282    	; 0x5b6 <green_read>
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	8f e7       	ldi	r24, 0x7F	; 127
 6d4:	96 e1       	ldi	r25, 0x16	; 22
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	80 40       	sbci	r24, 0x00	; 0
 6da:	90 40       	sbci	r25, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <read+0x1c>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <read+0x26>
 6e0:	00 00       	nop
	   _delay_ms(500);
	   blue_read(); //display the pulse count when blue filter is selected
 6e2:	aa df       	rcall	.-172    	; 0x638 <blue_read>
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	8f e7       	ldi	r24, 0x7F	; 127
 6e8:	96 e1       	ldi	r25, 0x16	; 22
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <read+0x30>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <read+0x3a>
 6f4:	00 00       	nop
	   _delay_ms(500);
	   lcd_cursor(1,1);  //set the cursor on row 1, column 1
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	c5 dd       	rcall	.-1142   	; 0x286 <lcd_cursor>
	lcd_string("Next"); // Display "Blue Pulses" on LCD
 6fc:	84 e2       	ldi	r24, 0x24	; 36
 6fe:	92 e0       	ldi	r25, 0x02	; 2
 700:	b4 dd       	rcall	.-1176   	; 0x26a <lcd_string>
	lcd_wr_command(0x01); //Clear the LCD
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	54 cd       	rjmp	.-1368   	; 0x1ae <lcd_wr_command>
 706:	08 95       	ret

00000708 <init>:
}

void init(void)
{
    init_devices();
 708:	02 df       	rcall	.-508    	; 0x50e <init_devices>
    lcd_set_4bit();
 70a:	0c dd       	rcall	.-1512   	; 0x124 <lcd_set_4bit>
    lcd_init();
 70c:	75 dd       	rcall	.-1302   	; 0x1f8 <lcd_init>
	color_sensor_scaling();
 70e:	0f cf       	rjmp	.-482    	; 0x52e <color_sensor_scaling>
 710:	08 95       	ret

00000712 <buzzer_on>:
#include "Color_Sensor.c"

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 712:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 714:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 716:	88 b9       	out	0x08, r24	; 8
 718:	08 95       	ret

0000071a <buzzer_off>:
}

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 71a:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 71c:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 71e:	88 b9       	out	0x08, r24	; 8
 720:	08 95       	ret

00000722 <main>:
}
int main(void)
{
 722:	8f 92       	push	r8
 724:	9f 92       	push	r9
 726:	af 92       	push	r10
 728:	bf 92       	push	r11
 72a:	cf 92       	push	r12
 72c:	df 92       	push	r13
 72e:	ef 92       	push	r14
 730:	ff 92       	push	r15
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	68 97       	sbiw	r28, 0x18	; 24
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	f8 94       	cli
 744:	de bf       	out	0x3e, r29	; 62
 746:	0f be       	out	0x3f, r0	; 63
 748:	cd bf       	out	0x3d, r28	; 61
    int c[4],indicator[4],color[4],i,min,j,u;
	init();
 74a:	de df       	rcall	.-68     	; 0x708 <init>
	for(i=0;i<4;i++)
		c[i]=0;
 74c:	1a 82       	std	Y+2, r1	; 0x02
 74e:	19 82       	std	Y+1, r1	; 0x01
 750:	1c 82       	std	Y+4, r1	; 0x04
 752:	1b 82       	std	Y+3, r1	; 0x03
 754:	1e 82       	std	Y+6, r1	; 0x06
 756:	1d 82       	std	Y+5, r1	; 0x05
 758:	18 86       	std	Y+8, r1	; 0x08
 75a:	1f 82       	std	Y+7, r1	; 0x07
 75c:	03 e0       	ldi	r16, 0x03	; 3
 75e:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0;i<4;i++)
	{
		read();
 760:	ac df       	rcall	.-168    	; 0x6ba <read>
		buzzer_on();
 762:	d7 df       	rcall	.-82     	; 0x712 <buzzer_on>
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	9c e2       	ldi	r25, 0x2C	; 44
 76a:	21 50       	subi	r18, 0x01	; 1
 76c:	80 40       	sbci	r24, 0x00	; 0
 76e:	90 40       	sbci	r25, 0x00	; 0
 770:	e1 f7       	brne	.-8      	; 0x76a <main+0x48>
 772:	00 c0       	rjmp	.+0      	; 0x774 <main+0x52>
 774:	00 00       	nop
		_delay_ms(1000);
		buzzer_off();
 776:	d1 df       	rcall	.-94     	; 0x71a <buzzer_off>
		if(red>green && red>blue)
 778:	40 91 6c 02 	lds	r20, 0x026C
 77c:	50 91 6d 02 	lds	r21, 0x026D
 780:	60 91 6e 02 	lds	r22, 0x026E
 784:	70 91 6f 02 	lds	r23, 0x026F
 788:	80 91 68 02 	lds	r24, 0x0268
 78c:	90 91 69 02 	lds	r25, 0x0269
 790:	a0 91 6a 02 	lds	r26, 0x026A
 794:	b0 91 6b 02 	lds	r27, 0x026B
 798:	84 17       	cp	r24, r20
 79a:	95 07       	cpc	r25, r21
 79c:	a6 07       	cpc	r26, r22
 79e:	b7 07       	cpc	r27, r23
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <main+0x82>
 7a2:	4c c0       	rjmp	.+152    	; 0x83c <main+0x11a>
 7a4:	40 91 6c 02 	lds	r20, 0x026C
 7a8:	50 91 6d 02 	lds	r21, 0x026D
 7ac:	60 91 6e 02 	lds	r22, 0x026E
 7b0:	70 91 6f 02 	lds	r23, 0x026F
 7b4:	80 91 60 02 	lds	r24, 0x0260
 7b8:	90 91 61 02 	lds	r25, 0x0261
 7bc:	a0 91 62 02 	lds	r26, 0x0262
 7c0:	b0 91 63 02 	lds	r27, 0x0263
 7c4:	84 17       	cp	r24, r20
 7c6:	95 07       	cpc	r25, r21
 7c8:	a6 07       	cpc	r26, r22
 7ca:	b7 07       	cpc	r27, r23
 7cc:	b8 f5       	brcc	.+110    	; 0x83c <main+0x11a>
			if(c[0]>red)
 7ce:	29 81       	ldd	r18, Y+1	; 0x01
 7d0:	3a 81       	ldd	r19, Y+2	; 0x02
 7d2:	80 91 6c 02 	lds	r24, 0x026C
 7d6:	90 91 6d 02 	lds	r25, 0x026D
 7da:	a0 91 6e 02 	lds	r26, 0x026E
 7de:	b0 91 6f 02 	lds	r27, 0x026F
 7e2:	a9 01       	movw	r20, r18
 7e4:	66 27       	eor	r22, r22
 7e6:	57 fd       	sbrc	r21, 7
 7e8:	60 95       	com	r22
 7ea:	76 2f       	mov	r23, r22
 7ec:	84 17       	cp	r24, r20
 7ee:	95 07       	cpc	r25, r21
 7f0:	a6 07       	cpc	r26, r22
 7f2:	b7 07       	cpc	r27, r23
 7f4:	68 f4       	brcc	.+26     	; 0x810 <main+0xee>
			{
				c[3]=red;
 7f6:	80 91 6c 02 	lds	r24, 0x026C
 7fa:	90 91 6d 02 	lds	r25, 0x026D
 7fe:	a0 91 6e 02 	lds	r26, 0x026E
 802:	b0 91 6f 02 	lds	r27, 0x026F
 806:	98 87       	std	Y+8, r25	; 0x08
 808:	8f 83       	std	Y+7, r24	; 0x07
				indicator[3]=3-i;
 80a:	18 8b       	std	Y+16, r17	; 0x10
 80c:	0f 87       	std	Y+15, r16	; 0x0f
 80e:	ae c0       	rjmp	.+348    	; 0x96c <main+0x24a>
			}
			else
			{
				if(c[0]!=0)
 810:	21 15       	cp	r18, r1
 812:	31 05       	cpc	r19, r1
 814:	31 f0       	breq	.+12     	; 0x822 <main+0x100>
				{
					c[3]=c[0];
 816:	38 87       	std	Y+8, r19	; 0x08
 818:	2f 83       	std	Y+7, r18	; 0x07
					indicator[3]=indicator[0];
 81a:	89 85       	ldd	r24, Y+9	; 0x09
 81c:	9a 85       	ldd	r25, Y+10	; 0x0a
 81e:	98 8b       	std	Y+16, r25	; 0x10
 820:	8f 87       	std	Y+15, r24	; 0x0f
				}
				c[0]=red;
 822:	80 91 6c 02 	lds	r24, 0x026C
 826:	90 91 6d 02 	lds	r25, 0x026D
 82a:	a0 91 6e 02 	lds	r26, 0x026E
 82e:	b0 91 6f 02 	lds	r27, 0x026F
 832:	9a 83       	std	Y+2, r25	; 0x02
 834:	89 83       	std	Y+1, r24	; 0x01
				indicator[0]=3-i;
 836:	1a 87       	std	Y+10, r17	; 0x0a
 838:	09 87       	std	Y+9, r16	; 0x09
 83a:	98 c0       	rjmp	.+304    	; 0x96c <main+0x24a>
				
			}
		else if(blue>green && red<blue)
 83c:	40 91 60 02 	lds	r20, 0x0260
 840:	50 91 61 02 	lds	r21, 0x0261
 844:	60 91 62 02 	lds	r22, 0x0262
 848:	70 91 63 02 	lds	r23, 0x0263
 84c:	80 91 68 02 	lds	r24, 0x0268
 850:	90 91 69 02 	lds	r25, 0x0269
 854:	a0 91 6a 02 	lds	r26, 0x026A
 858:	b0 91 6b 02 	lds	r27, 0x026B
 85c:	84 17       	cp	r24, r20
 85e:	95 07       	cpc	r25, r21
 860:	a6 07       	cpc	r26, r22
 862:	b7 07       	cpc	r27, r23
 864:	08 f0       	brcs	.+2      	; 0x868 <main+0x146>
 866:	4c c0       	rjmp	.+152    	; 0x900 <main+0x1de>
 868:	40 91 6c 02 	lds	r20, 0x026C
 86c:	50 91 6d 02 	lds	r21, 0x026D
 870:	60 91 6e 02 	lds	r22, 0x026E
 874:	70 91 6f 02 	lds	r23, 0x026F
 878:	80 91 60 02 	lds	r24, 0x0260
 87c:	90 91 61 02 	lds	r25, 0x0261
 880:	a0 91 62 02 	lds	r26, 0x0262
 884:	b0 91 63 02 	lds	r27, 0x0263
 888:	48 17       	cp	r20, r24
 88a:	59 07       	cpc	r21, r25
 88c:	6a 07       	cpc	r22, r26
 88e:	7b 07       	cpc	r23, r27
 890:	b8 f5       	brcc	.+110    	; 0x900 <main+0x1de>
			if(c[2]>blue)
 892:	2d 81       	ldd	r18, Y+5	; 0x05
 894:	3e 81       	ldd	r19, Y+6	; 0x06
 896:	80 91 60 02 	lds	r24, 0x0260
 89a:	90 91 61 02 	lds	r25, 0x0261
 89e:	a0 91 62 02 	lds	r26, 0x0262
 8a2:	b0 91 63 02 	lds	r27, 0x0263
 8a6:	a9 01       	movw	r20, r18
 8a8:	66 27       	eor	r22, r22
 8aa:	57 fd       	sbrc	r21, 7
 8ac:	60 95       	com	r22
 8ae:	76 2f       	mov	r23, r22
 8b0:	84 17       	cp	r24, r20
 8b2:	95 07       	cpc	r25, r21
 8b4:	a6 07       	cpc	r26, r22
 8b6:	b7 07       	cpc	r27, r23
 8b8:	68 f4       	brcc	.+26     	; 0x8d4 <main+0x1b2>
			{
				c[3]=blue;
 8ba:	80 91 60 02 	lds	r24, 0x0260
 8be:	90 91 61 02 	lds	r25, 0x0261
 8c2:	a0 91 62 02 	lds	r26, 0x0262
 8c6:	b0 91 63 02 	lds	r27, 0x0263
 8ca:	98 87       	std	Y+8, r25	; 0x08
 8cc:	8f 83       	std	Y+7, r24	; 0x07
				indicator[3]=3-i;
 8ce:	18 8b       	std	Y+16, r17	; 0x10
 8d0:	0f 87       	std	Y+15, r16	; 0x0f
 8d2:	4c c0       	rjmp	.+152    	; 0x96c <main+0x24a>
			}
			else
			{
				if(c[2]!=0)
 8d4:	21 15       	cp	r18, r1
 8d6:	31 05       	cpc	r19, r1
 8d8:	31 f0       	breq	.+12     	; 0x8e6 <main+0x1c4>
				{
					c[3]=c[2];
 8da:	38 87       	std	Y+8, r19	; 0x08
 8dc:	2f 83       	std	Y+7, r18	; 0x07
					indicator[3]=indicator[2];
 8de:	8d 85       	ldd	r24, Y+13	; 0x0d
 8e0:	9e 85       	ldd	r25, Y+14	; 0x0e
 8e2:	98 8b       	std	Y+16, r25	; 0x10
 8e4:	8f 87       	std	Y+15, r24	; 0x0f
				}
				c[2]=blue;
 8e6:	80 91 60 02 	lds	r24, 0x0260
 8ea:	90 91 61 02 	lds	r25, 0x0261
 8ee:	a0 91 62 02 	lds	r26, 0x0262
 8f2:	b0 91 63 02 	lds	r27, 0x0263
 8f6:	9e 83       	std	Y+6, r25	; 0x06
 8f8:	8d 83       	std	Y+5, r24	; 0x05
				indicator[2]=3-i;
 8fa:	1e 87       	std	Y+14, r17	; 0x0e
 8fc:	0d 87       	std	Y+13, r16	; 0x0d
 8fe:	36 c0       	rjmp	.+108    	; 0x96c <main+0x24a>
			}
		else if(c[1]>green)
 900:	2b 81       	ldd	r18, Y+3	; 0x03
 902:	3c 81       	ldd	r19, Y+4	; 0x04
 904:	80 91 68 02 	lds	r24, 0x0268
 908:	90 91 69 02 	lds	r25, 0x0269
 90c:	a0 91 6a 02 	lds	r26, 0x026A
 910:	b0 91 6b 02 	lds	r27, 0x026B
 914:	a9 01       	movw	r20, r18
 916:	66 27       	eor	r22, r22
 918:	57 fd       	sbrc	r21, 7
 91a:	60 95       	com	r22
 91c:	76 2f       	mov	r23, r22
 91e:	84 17       	cp	r24, r20
 920:	95 07       	cpc	r25, r21
 922:	a6 07       	cpc	r26, r22
 924:	b7 07       	cpc	r27, r23
 926:	68 f4       	brcc	.+26     	; 0x942 <main+0x220>
			{
				c[3]=green;
 928:	80 91 68 02 	lds	r24, 0x0268
 92c:	90 91 69 02 	lds	r25, 0x0269
 930:	a0 91 6a 02 	lds	r26, 0x026A
 934:	b0 91 6b 02 	lds	r27, 0x026B
 938:	98 87       	std	Y+8, r25	; 0x08
 93a:	8f 83       	std	Y+7, r24	; 0x07
				indicator[3]=3-i;
 93c:	18 8b       	std	Y+16, r17	; 0x10
 93e:	0f 87       	std	Y+15, r16	; 0x0f
 940:	15 c0       	rjmp	.+42     	; 0x96c <main+0x24a>
			}

			else
			{
				if(c[1]!=0)
 942:	21 15       	cp	r18, r1
 944:	31 05       	cpc	r19, r1
 946:	31 f0       	breq	.+12     	; 0x954 <main+0x232>
				{
					c[3]=c[1];
 948:	38 87       	std	Y+8, r19	; 0x08
 94a:	2f 83       	std	Y+7, r18	; 0x07
					indicator[3]=indicator[1];
 94c:	8b 85       	ldd	r24, Y+11	; 0x0b
 94e:	9c 85       	ldd	r25, Y+12	; 0x0c
 950:	98 8b       	std	Y+16, r25	; 0x10
 952:	8f 87       	std	Y+15, r24	; 0x0f
				}
				c[1]=green;
 954:	80 91 68 02 	lds	r24, 0x0268
 958:	90 91 69 02 	lds	r25, 0x0269
 95c:	a0 91 6a 02 	lds	r26, 0x026A
 960:	b0 91 6b 02 	lds	r27, 0x026B
 964:	9c 83       	std	Y+4, r25	; 0x04
 966:	8b 83       	std	Y+3, r24	; 0x03
				indicator[1]=3-i;
 968:	1c 87       	std	Y+12, r17	; 0x0c
 96a:	0b 87       	std	Y+11, r16	; 0x0b
 96c:	01 50       	subi	r16, 0x01	; 1
 96e:	11 09       	sbc	r17, r1
 970:	08 f0       	brcs	.+2      	; 0x974 <main+0x252>
 972:	f6 ce       	rjmp	.-532    	; 0x760 <main+0x3e>
		else min=c[2];
	else if(c[1]<c[2])
			min=c[1];
		else min=c[2];
	for(i=0;i<4;i++)
		color[indicator[i]]=i;
 974:	e9 85       	ldd	r30, Y+9	; 0x09
 976:	fa 85       	ldd	r31, Y+10	; 0x0a
 978:	ee 0f       	add	r30, r30
 97a:	ff 1f       	adc	r31, r31
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	8c 0f       	add	r24, r28
 982:	9d 1f       	adc	r25, r29
 984:	e8 0f       	add	r30, r24
 986:	f9 1f       	adc	r31, r25
 988:	11 8a       	std	Z+17, r1	; 0x11
 98a:	10 8a       	std	Z+16, r1	; 0x10
 98c:	eb 85       	ldd	r30, Y+11	; 0x0b
 98e:	fc 85       	ldd	r31, Y+12	; 0x0c
 990:	ee 0f       	add	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	e8 0f       	add	r30, r24
 996:	f9 1f       	adc	r31, r25
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	91 8b       	std	Z+17, r25	; 0x11
 99e:	80 8b       	std	Z+16, r24	; 0x10
 9a0:	ed 85       	ldd	r30, Y+13	; 0x0d
 9a2:	fe 85       	ldd	r31, Y+14	; 0x0e
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	8c 0f       	add	r24, r28
 9aa:	9d 1f       	adc	r25, r29
 9ac:	e8 0f       	add	r30, r24
 9ae:	f9 1f       	adc	r31, r25
 9b0:	82 e0       	ldi	r24, 0x02	; 2
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	91 8b       	std	Z+17, r25	; 0x11
 9b6:	80 8b       	std	Z+16, r24	; 0x10
 9b8:	ef 85       	ldd	r30, Y+15	; 0x0f
 9ba:	f8 89       	ldd	r31, Y+16	; 0x10
 9bc:	ee 0f       	add	r30, r30
 9be:	ff 1f       	adc	r31, r31
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	8c 0f       	add	r24, r28
 9c6:	9d 1f       	adc	r25, r29
 9c8:	e8 0f       	add	r30, r24
 9ca:	f9 1f       	adc	r31, r25
 9cc:	83 e0       	ldi	r24, 0x03	; 3
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	91 8b       	std	Z+17, r25	; 0x11
 9d2:	80 8b       	std	Z+16, r24	; 0x10
	int t=c[3];
 9d4:	cf 80       	ldd	r12, Y+7	; 0x07
 9d6:	d8 84       	ldd	r13, Y+8	; 0x08
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 9d8:	61 e0       	ldi	r22, 0x01	; 1
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	54 dc       	rcall	.-1880   	; 0x286 <lcd_cursor>
	
	lcd_string("Threshold"); // Display "Blue Pulses" on LCD
 9de:	89 e2       	ldi	r24, 0x29	; 41
 9e0:	92 e0       	ldi	r25, 0x02	; 2
 9e2:	43 dc       	rcall	.-1914   	; 0x26a <lcd_string>
	t+=200;
 9e4:	98 ec       	ldi	r25, 0xC8	; 200
 9e6:	c9 0e       	add	r12, r25
 9e8:	d1 1c       	adc	r13, r1
	while(t>0)
 9ea:	1c 14       	cp	r1, r12
 9ec:	1d 04       	cpc	r1, r13
 9ee:	cc f5       	brge	.+114    	; 0xa62 <main+0x340>
	{
		u=t%10;
 9f0:	0f 2e       	mov	r0, r31
 9f2:	fa e0       	ldi	r31, 0x0A	; 10
 9f4:	af 2e       	mov	r10, r31
 9f6:	b1 2c       	mov	r11, r1
 9f8:	f0 2d       	mov	r31, r0
		for(j=0;j<u;j++)
 9fa:	81 2c       	mov	r8, r1
 9fc:	91 2c       	mov	r9, r1
	
	lcd_string("Threshold"); // Display "Blue Pulses" on LCD
	t+=200;
	while(t>0)
	{
		u=t%10;
 9fe:	c6 01       	movw	r24, r12
 a00:	b5 01       	movw	r22, r10
 a02:	a9 d0       	rcall	.+338    	; 0xb56 <__divmodhi4>
 a04:	7c 01       	movw	r14, r24
		for(j=0;j<u;j++)
 a06:	18 16       	cp	r1, r24
 a08:	19 06       	cpc	r1, r25
 a0a:	dc f4       	brge	.+54     	; 0xa42 <main+0x320>
 a0c:	08 2d       	mov	r16, r8
 a0e:	19 2d       	mov	r17, r9
		{
			buzzer_on();
 a10:	80 de       	rcall	.-768    	; 0x712 <buzzer_on>
 a12:	2f ef       	ldi	r18, 0xFF	; 255
 a14:	8f e7       	ldi	r24, 0x7F	; 127
 a16:	94 e0       	ldi	r25, 0x04	; 4
 a18:	21 50       	subi	r18, 0x01	; 1
 a1a:	80 40       	sbci	r24, 0x00	; 0
 a1c:	90 40       	sbci	r25, 0x00	; 0
 a1e:	e1 f7       	brne	.-8      	; 0xa18 <main+0x2f6>
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <main+0x300>
 a22:	00 00       	nop
			_delay_ms(100);
			buzzer_off();
 a24:	7a de       	rcall	.-780    	; 0x71a <buzzer_off>
 a26:	2f ef       	ldi	r18, 0xFF	; 255
 a28:	8f e7       	ldi	r24, 0x7F	; 127
 a2a:	96 e1       	ldi	r25, 0x16	; 22
 a2c:	21 50       	subi	r18, 0x01	; 1
 a2e:	80 40       	sbci	r24, 0x00	; 0
 a30:	90 40       	sbci	r25, 0x00	; 0
 a32:	e1 f7       	brne	.-8      	; 0xa2c <main+0x30a>
 a34:	00 c0       	rjmp	.+0      	; 0xa36 <main+0x314>
 a36:	00 00       	nop
	lcd_string("Threshold"); // Display "Blue Pulses" on LCD
	t+=200;
	while(t>0)
	{
		u=t%10;
		for(j=0;j<u;j++)
 a38:	0f 5f       	subi	r16, 0xFF	; 255
 a3a:	1f 4f       	sbci	r17, 0xFF	; 255
 a3c:	0e 15       	cp	r16, r14
 a3e:	1f 05       	cpc	r17, r15
 a40:	39 f7       	brne	.-50     	; 0xa10 <main+0x2ee>
 a42:	2f ef       	ldi	r18, 0xFF	; 255
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	99 e5       	ldi	r25, 0x59	; 89
 a48:	21 50       	subi	r18, 0x01	; 1
 a4a:	80 40       	sbci	r24, 0x00	; 0
 a4c:	90 40       	sbci	r25, 0x00	; 0
 a4e:	e1 f7       	brne	.-8      	; 0xa48 <main+0x326>
 a50:	00 c0       	rjmp	.+0      	; 0xa52 <main+0x330>
 a52:	00 00       	nop
			_delay_ms(100);
			buzzer_off();
			_delay_ms(500);
		}
		_delay_ms(2000);
		t=t/10;
 a54:	c6 01       	movw	r24, r12
 a56:	b5 01       	movw	r22, r10
 a58:	7e d0       	rcall	.+252    	; 0xb56 <__divmodhi4>
 a5a:	6b 01       	movw	r12, r22
	int t=c[3];
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
	
	lcd_string("Threshold"); // Display "Blue Pulses" on LCD
	t+=200;
	while(t>0)
 a5c:	16 16       	cp	r1, r22
 a5e:	17 06       	cpc	r1, r23
 a60:	74 f2       	brlt	.-100    	; 0x9fe <main+0x2dc>
			_delay_ms(500);
		}
		_delay_ms(2000);
		t=t/10;
	}
	lcd_print(2,1,t,5);
 a62:	25 e0       	ldi	r18, 0x05	; 5
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	a6 01       	movw	r20, r12
 a68:	61 e0       	ldi	r22, 0x01	; 1
 a6a:	82 e0       	ldi	r24, 0x02	; 2
 a6c:	27 dc       	rcall	.-1970   	; 0x2bc <lcd_print>
 a6e:	2f ef       	ldi	r18, 0xFF	; 255
 a70:	8f ef       	ldi	r24, 0xFF	; 255
 a72:	99 e5       	ldi	r25, 0x59	; 89
 a74:	21 50       	subi	r18, 0x01	; 1
 a76:	80 40       	sbci	r24, 0x00	; 0
 a78:	90 40       	sbci	r25, 0x00	; 0
 a7a:	e1 f7       	brne	.-8      	; 0xa74 <main+0x352>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0x35c>
 a7e:	00 00       	nop
	_delay_ms(2000);
	lcd_wr_command(0x01); //Clear the LCD
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	95 db       	rcall	.-2262   	; 0x1ae <lcd_wr_command>
	
	lcd_string("At Node 1"); // Display "Blue Pulses" on LCD
 a84:	83 e3       	ldi	r24, 0x33	; 51
 a86:	92 e0       	ldi	r25, 0x02	; 2
 a88:	f0 db       	rcall	.-2080   	; 0x26a <lcd_string>
	lcd_print(2,1,color[0],5);
 a8a:	49 89       	ldd	r20, Y+17	; 0x11
 a8c:	5a 89       	ldd	r21, Y+18	; 0x12
 a8e:	25 e0       	ldi	r18, 0x05	; 5
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	61 e0       	ldi	r22, 0x01	; 1
 a94:	82 e0       	ldi	r24, 0x02	; 2
 a96:	12 dc       	rcall	.-2012   	; 0x2bc <lcd_print>
 a98:	2f ef       	ldi	r18, 0xFF	; 255
 a9a:	8f ef       	ldi	r24, 0xFF	; 255
 a9c:	99 e5       	ldi	r25, 0x59	; 89
 a9e:	21 50       	subi	r18, 0x01	; 1
 aa0:	80 40       	sbci	r24, 0x00	; 0
 aa2:	90 40       	sbci	r25, 0x00	; 0
 aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0x37c>
 aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <main+0x386>
 aa8:	00 00       	nop
	_delay_ms(2000);
	lcd_wr_command(0x01);
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	80 db       	rcall	.-2304   	; 0x1ae <lcd_wr_command>
	
	lcd_string("At Node 2"); // Display "Blue Pulses" on LCD
 aae:	8d e3       	ldi	r24, 0x3D	; 61
 ab0:	92 e0       	ldi	r25, 0x02	; 2
 ab2:	db db       	rcall	.-2122   	; 0x26a <lcd_string>
	lcd_print(2,1,color[1],5);
 ab4:	4b 89       	ldd	r20, Y+19	; 0x13
 ab6:	5c 89       	ldd	r21, Y+20	; 0x14
 ab8:	25 e0       	ldi	r18, 0x05	; 5
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	61 e0       	ldi	r22, 0x01	; 1
 abe:	82 e0       	ldi	r24, 0x02	; 2
 ac0:	fd db       	rcall	.-2054   	; 0x2bc <lcd_print>
 ac2:	2f ef       	ldi	r18, 0xFF	; 255
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	99 e5       	ldi	r25, 0x59	; 89
 ac8:	21 50       	subi	r18, 0x01	; 1
 aca:	80 40       	sbci	r24, 0x00	; 0
 acc:	90 40       	sbci	r25, 0x00	; 0
 ace:	e1 f7       	brne	.-8      	; 0xac8 <main+0x3a6>
 ad0:	00 c0       	rjmp	.+0      	; 0xad2 <main+0x3b0>
 ad2:	00 00       	nop
	_delay_ms(2000);
	lcd_wr_command(0x01);
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	6b db       	rcall	.-2346   	; 0x1ae <lcd_wr_command>
	
	lcd_string("At Node 3"); // Display "Blue Pulses" on LCD
 ad8:	87 e4       	ldi	r24, 0x47	; 71
 ada:	92 e0       	ldi	r25, 0x02	; 2
 adc:	c6 db       	rcall	.-2164   	; 0x26a <lcd_string>
	lcd_print(2,1,color[2],5);
 ade:	4d 89       	ldd	r20, Y+21	; 0x15
 ae0:	5e 89       	ldd	r21, Y+22	; 0x16
 ae2:	25 e0       	ldi	r18, 0x05	; 5
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	61 e0       	ldi	r22, 0x01	; 1
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	e8 db       	rcall	.-2096   	; 0x2bc <lcd_print>
 aec:	2f ef       	ldi	r18, 0xFF	; 255
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	99 e5       	ldi	r25, 0x59	; 89
 af2:	21 50       	subi	r18, 0x01	; 1
 af4:	80 40       	sbci	r24, 0x00	; 0
 af6:	90 40       	sbci	r25, 0x00	; 0
 af8:	e1 f7       	brne	.-8      	; 0xaf2 <main+0x3d0>
 afa:	00 c0       	rjmp	.+0      	; 0xafc <main+0x3da>
 afc:	00 00       	nop
	_delay_ms(2000);
	lcd_wr_command(0x01);
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	56 db       	rcall	.-2388   	; 0x1ae <lcd_wr_command>
	
	lcd_string("At Node 4"); // Display "Blue Pulses" on LCD
 b02:	81 e5       	ldi	r24, 0x51	; 81
 b04:	92 e0       	ldi	r25, 0x02	; 2
 b06:	b1 db       	rcall	.-2206   	; 0x26a <lcd_string>
	lcd_print(2,1,color[3],5);
 b08:	4f 89       	ldd	r20, Y+23	; 0x17
 b0a:	58 8d       	ldd	r21, Y+24	; 0x18
 b0c:	25 e0       	ldi	r18, 0x05	; 5
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	61 e0       	ldi	r22, 0x01	; 1
 b12:	82 e0       	ldi	r24, 0x02	; 2
 b14:	d3 db       	rcall	.-2138   	; 0x2bc <lcd_print>
 b16:	2f ef       	ldi	r18, 0xFF	; 255
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	99 e5       	ldi	r25, 0x59	; 89
 b1c:	21 50       	subi	r18, 0x01	; 1
 b1e:	80 40       	sbci	r24, 0x00	; 0
 b20:	90 40       	sbci	r25, 0x00	; 0
 b22:	e1 f7       	brne	.-8      	; 0xb1c <main+0x3fa>
 b24:	00 c0       	rjmp	.+0      	; 0xb26 <main+0x404>
 b26:	00 00       	nop
	_delay_ms(2000);
	lcd_wr_command(0x01);
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	41 db       	rcall	.-2430   	; 0x1ae <lcd_wr_command>
	return 0;
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	68 96       	adiw	r28, 0x18	; 24
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	f8 94       	cli
 b36:	de bf       	out	0x3e, r29	; 62
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	cd bf       	out	0x3d, r28	; 61
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	1f 91       	pop	r17
 b42:	0f 91       	pop	r16
 b44:	ff 90       	pop	r15
 b46:	ef 90       	pop	r14
 b48:	df 90       	pop	r13
 b4a:	cf 90       	pop	r12
 b4c:	bf 90       	pop	r11
 b4e:	af 90       	pop	r10
 b50:	9f 90       	pop	r9
 b52:	8f 90       	pop	r8
 b54:	08 95       	ret

00000b56 <__divmodhi4>:
 b56:	97 fb       	bst	r25, 7
 b58:	07 2e       	mov	r0, r23
 b5a:	16 f4       	brtc	.+4      	; 0xb60 <__divmodhi4+0xa>
 b5c:	00 94       	com	r0
 b5e:	06 d0       	rcall	.+12     	; 0xb6c <__divmodhi4_neg1>
 b60:	77 fd       	sbrc	r23, 7
 b62:	08 d0       	rcall	.+16     	; 0xb74 <__divmodhi4_neg2>
 b64:	1a d0       	rcall	.+52     	; 0xb9a <__udivmodhi4>
 b66:	07 fc       	sbrc	r0, 7
 b68:	05 d0       	rcall	.+10     	; 0xb74 <__divmodhi4_neg2>
 b6a:	3e f4       	brtc	.+14     	; 0xb7a <__divmodhi4_exit>

00000b6c <__divmodhi4_neg1>:
 b6c:	90 95       	com	r25
 b6e:	81 95       	neg	r24
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	08 95       	ret

00000b74 <__divmodhi4_neg2>:
 b74:	70 95       	com	r23
 b76:	61 95       	neg	r22
 b78:	7f 4f       	sbci	r23, 0xFF	; 255

00000b7a <__divmodhi4_exit>:
 b7a:	08 95       	ret

00000b7c <__umulhisi3>:
 b7c:	a2 9f       	mul	r26, r18
 b7e:	b0 01       	movw	r22, r0
 b80:	b3 9f       	mul	r27, r19
 b82:	c0 01       	movw	r24, r0
 b84:	a3 9f       	mul	r26, r19
 b86:	70 0d       	add	r23, r0
 b88:	81 1d       	adc	r24, r1
 b8a:	11 24       	eor	r1, r1
 b8c:	91 1d       	adc	r25, r1
 b8e:	b2 9f       	mul	r27, r18
 b90:	70 0d       	add	r23, r0
 b92:	81 1d       	adc	r24, r1
 b94:	11 24       	eor	r1, r1
 b96:	91 1d       	adc	r25, r1
 b98:	08 95       	ret

00000b9a <__udivmodhi4>:
 b9a:	aa 1b       	sub	r26, r26
 b9c:	bb 1b       	sub	r27, r27
 b9e:	51 e1       	ldi	r21, 0x11	; 17
 ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <__udivmodhi4_ep>

00000ba2 <__udivmodhi4_loop>:
 ba2:	aa 1f       	adc	r26, r26
 ba4:	bb 1f       	adc	r27, r27
 ba6:	a6 17       	cp	r26, r22
 ba8:	b7 07       	cpc	r27, r23
 baa:	10 f0       	brcs	.+4      	; 0xbb0 <__udivmodhi4_ep>
 bac:	a6 1b       	sub	r26, r22
 bae:	b7 0b       	sbc	r27, r23

00000bb0 <__udivmodhi4_ep>:
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	5a 95       	dec	r21
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__udivmodhi4_loop>
 bb8:	80 95       	com	r24
 bba:	90 95       	com	r25
 bbc:	bc 01       	movw	r22, r24
 bbe:	cd 01       	movw	r24, r26
 bc0:	08 95       	ret

00000bc2 <_exit>:
 bc2:	f8 94       	cli

00000bc4 <__stop_program>:
 bc4:	ff cf       	rjmp	.-2      	; 0xbc4 <__stop_program>
