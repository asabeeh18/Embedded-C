
colorThreshold.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000a0a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800234  00800234  00000ad2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db7  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022e  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000851  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000302  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000535  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002e4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	5f c2       	rjmp	.+1214   	; 0x4c4 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e0       	ldi	r30, 0x0A	; 10
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e3       	ldi	r26, 0x34	; 52
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 35       	cpi	r26, 0x50	; 80
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f7 d2       	rcall	.+1518   	; 0x70e <main>
 120:	72 c4       	rjmp	.+2276   	; 0xa06 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_set_4bit>:

void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
	PORTD = PORTD & 0x7F; //set S3 Low
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_set_4bit+0x4>
 12c:	00 00       	nop
 12e:	40 98       	cbi	0x08, 0	; 8
 130:	41 98       	cbi	0x08, 1	; 8
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	88 b9       	out	0x08, r24	; 8
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	97 e4       	ldi	r25, 0x47	; 71
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_set_4bit+0x1e>
 142:	00 00       	nop
 144:	42 98       	cbi	0x08, 2	; 8
 146:	86 e6       	ldi	r24, 0x66	; 102
 148:	9e e0       	ldi	r25, 0x0E	; 14
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_set_4bit+0x26>
 14e:	00 00       	nop
 150:	40 98       	cbi	0x08, 0	; 8
 152:	41 98       	cbi	0x08, 1	; 8
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	88 b9       	out	0x08, r24	; 8
 158:	42 9a       	sbi	0x08, 2	; 8
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	97 e4       	ldi	r25, 0x47	; 71
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_set_4bit+0x40>
 164:	00 00       	nop
 166:	42 98       	cbi	0x08, 2	; 8
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	9e e0       	ldi	r25, 0x0E	; 14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x48>
 170:	00 00       	nop
 172:	40 98       	cbi	0x08, 0	; 8
 174:	41 98       	cbi	0x08, 1	; 8
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	88 b9       	out	0x08, r24	; 8
 17a:	42 9a       	sbi	0x08, 2	; 8
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	97 e4       	ldi	r25, 0x47	; 71
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x5c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_set_4bit+0x62>
 186:	00 00       	nop
 188:	42 98       	cbi	0x08, 2	; 8
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x6a>
 192:	00 00       	nop
 194:	40 98       	cbi	0x08, 0	; 8
 196:	41 98       	cbi	0x08, 1	; 8
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	42 9a       	sbi	0x08, 2	; 8
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	97 e4       	ldi	r25, 0x47	; 71
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x7e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x84>
 1a8:	00 00       	nop
 1aa:	42 98       	cbi	0x08, 2	; 8
 1ac:	08 95       	ret

000001ae <lcd_wr_command>:
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	28 2f       	mov	r18, r24
 1b8:	20 7f       	andi	r18, 0xF0	; 240
 1ba:	92 2b       	or	r25, r18
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	41 98       	cbi	0x08, 1	; 8
 1c2:	42 9a       	sbi	0x08, 2	; 8
 1c4:	ef ef       	ldi	r30, 0xFF	; 255
 1c6:	f7 e4       	ldi	r31, 0x47	; 71
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x1a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_wr_command+0x20>
 1ce:	00 00       	nop
 1d0:	42 98       	cbi	0x08, 2	; 8
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	9f 70       	andi	r25, 0x0F	; 15
 1d6:	98 b9       	out	0x08, r25	; 8
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	40 98       	cbi	0x08, 0	; 8
 1e4:	41 98       	cbi	0x08, 1	; 8
 1e6:	42 9a       	sbi	0x08, 2	; 8
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	97 e4       	ldi	r25, 0x47	; 71
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_wr_command+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_wr_command+0x44>
 1f2:	00 00       	nop
 1f4:	42 98       	cbi	0x08, 2	; 8
 1f6:	08 95       	ret

000001f8 <lcd_init>:
 1f8:	95 df       	rcall	.-214    	; 0x124 <lcd_set_4bit>
 1fa:	86 e6       	ldi	r24, 0x66	; 102
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x6>
 202:	00 00       	nop
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	d3 df       	rcall	.-90     	; 0x1ae <lcd_wr_command>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	d1 df       	rcall	.-94     	; 0x1ae <lcd_wr_command>
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	cf df       	rcall	.-98     	; 0x1ae <lcd_wr_command>
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	cd df       	rcall	.-102    	; 0x1ae <lcd_wr_command>
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	cb cf       	rjmp	.-106    	; 0x1ae <lcd_wr_command>
 218:	08 95       	ret

0000021a <lcd_wr_char>:
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	98 b9       	out	0x08, r25	; 8
 220:	98 b1       	in	r25, 0x08	; 8
 222:	28 2f       	mov	r18, r24
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	92 2b       	or	r25, r18
 228:	98 b9       	out	0x08, r25	; 8
 22a:	40 9a       	sbi	0x08, 0	; 8
 22c:	41 98       	cbi	0x08, 1	; 8
 22e:	42 9a       	sbi	0x08, 2	; 8
 230:	ef ef       	ldi	r30, 0xFF	; 255
 232:	f7 e4       	ldi	r31, 0x47	; 71
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
 23a:	00 00       	nop
 23c:	42 98       	cbi	0x08, 2	; 8
 23e:	98 b1       	in	r25, 0x08	; 8
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	98 b9       	out	0x08, r25	; 8
 244:	98 b1       	in	r25, 0x08	; 8
 246:	82 95       	swap	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	89 2b       	or	r24, r25
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	40 9a       	sbi	0x08, 0	; 8
 250:	41 98       	cbi	0x08, 1	; 8
 252:	42 9a       	sbi	0x08, 2	; 8
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	97 e4       	ldi	r25, 0x47	; 71
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
 25e:	00 00       	nop
 260:	42 98       	cbi	0x08, 2	; 8
 262:	08 95       	ret

00000264 <lcd_home>:
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	a3 cf       	rjmp	.-186    	; 0x1ae <lcd_wr_command>
 268:	08 95       	ret

0000026a <lcd_string>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	88 81       	ld	r24, Y
 272:	88 23       	and	r24, r24
 274:	29 f0       	breq	.+10     	; 0x280 <lcd_string+0x16>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	d0 df       	rcall	.-96     	; 0x21a <lcd_wr_char>
 27a:	89 91       	ld	r24, Y+
 27c:	81 11       	cpse	r24, r1
 27e:	fc cf       	rjmp	.-8      	; 0x278 <lcd_string+0xe>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <lcd_cursor>:
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	69 f0       	breq	.+26     	; 0x2a4 <lcd_cursor+0x1e>
 28a:	18 f4       	brcc	.+6      	; 0x292 <lcd_cursor+0xc>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	31 f0       	breq	.+12     	; 0x29c <lcd_cursor+0x16>
 290:	08 95       	ret
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	59 f0       	breq	.+22     	; 0x2ac <lcd_cursor+0x26>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	69 f0       	breq	.+26     	; 0x2b4 <lcd_cursor+0x2e>
 29a:	08 95       	ret
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	86 0f       	add	r24, r22
 2a0:	86 cf       	rjmp	.-244    	; 0x1ae <lcd_wr_command>
 2a2:	08 95       	ret
 2a4:	8f eb       	ldi	r24, 0xBF	; 191
 2a6:	86 0f       	add	r24, r22
 2a8:	82 cf       	rjmp	.-252    	; 0x1ae <lcd_wr_command>
 2aa:	08 95       	ret
 2ac:	83 e9       	ldi	r24, 0x93	; 147
 2ae:	86 0f       	add	r24, r22
 2b0:	7e cf       	rjmp	.-260    	; 0x1ae <lcd_wr_command>
 2b2:	08 95       	ret
 2b4:	83 ed       	ldi	r24, 0xD3	; 211
 2b6:	86 0f       	add	r24, r22
 2b8:	7a cf       	rjmp	.-268    	; 0x1ae <lcd_wr_command>
 2ba:	08 95       	ret

000002bc <lcd_print>:
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	8a 01       	movw	r16, r20
 2c6:	e9 01       	movw	r28, r18
 2c8:	88 23       	and	r24, r24
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <lcd_print+0x14>
 2cc:	61 11       	cpse	r22, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <lcd_print+0x18>
 2d0:	c9 df       	rcall	.-110    	; 0x264 <lcd_home>
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <lcd_print+0x1a>
 2d4:	d8 df       	rcall	.-80     	; 0x286 <lcd_cursor>
 2d6:	c5 30       	cpi	r28, 0x05	; 5
 2d8:	d1 05       	cpc	r29, r1
 2da:	09 f0       	breq	.+2      	; 0x2de <lcd_print+0x22>
 2dc:	cd c0       	rjmp	.+410    	; 0x478 <lcd_print+0x1bc>
 2de:	98 01       	movw	r18, r16
 2e0:	32 95       	swap	r19
 2e2:	22 95       	swap	r18
 2e4:	2f 70       	andi	r18, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	3f 70       	andi	r19, 0x0F	; 15
 2ea:	23 27       	eor	r18, r19
 2ec:	a7 e4       	ldi	r26, 0x47	; 71
 2ee:	b3 e0       	ldi	r27, 0x03	; 3
 2f0:	7b d3       	rcall	.+1782   	; 0x9e8 <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	c0 96       	adiw	r24, 0x30	; 48
 300:	90 93 3d 02 	sts	0x023D, r25
 304:	80 93 3c 02 	sts	0x023C, r24
 308:	88 df       	rcall	.-240    	; 0x21a <lcd_wr_char>
 30a:	98 01       	movw	r18, r16
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	a5 ec       	ldi	r26, 0xC5	; 197
 31a:	b0 e2       	ldi	r27, 0x20	; 32
 31c:	65 d3       	rcall	.+1738   	; 0x9e8 <__umulhisi3>
 31e:	ac 01       	movw	r20, r24
 320:	52 95       	swap	r21
 322:	42 95       	swap	r20
 324:	4f 70       	andi	r20, 0x0F	; 15
 326:	45 27       	eor	r20, r21
 328:	5f 70       	andi	r21, 0x0F	; 15
 32a:	45 27       	eor	r20, r21
 32c:	50 93 3f 02 	sts	0x023F, r21
 330:	40 93 3e 02 	sts	0x023E, r20
 334:	9a 01       	movw	r18, r20
 336:	ad ec       	ldi	r26, 0xCD	; 205
 338:	bc ec       	ldi	r27, 0xCC	; 204
 33a:	56 d3       	rcall	.+1708   	; 0x9e8 <__umulhisi3>
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	9c 01       	movw	r18, r24
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	82 0f       	add	r24, r18
 35c:	93 1f       	adc	r25, r19
 35e:	48 1b       	sub	r20, r24
 360:	59 0b       	sbc	r21, r25
 362:	ca 01       	movw	r24, r20
 364:	c0 96       	adiw	r24, 0x30	; 48
 366:	90 93 4f 02 	sts	0x024F, r25
 36a:	80 93 4e 02 	sts	0x024E, r24
 36e:	55 df       	rcall	.-342    	; 0x21a <lcd_wr_char>
 370:	04 c0       	rjmp	.+8      	; 0x37a <lcd_print+0xbe>
 372:	c3 30       	cpi	r28, 0x03	; 3
 374:	d1 05       	cpc	r29, r1
 376:	09 f0       	breq	.+2      	; 0x37a <lcd_print+0xbe>
 378:	84 c0       	rjmp	.+264    	; 0x482 <lcd_print+0x1c6>
 37a:	98 01       	movw	r18, r16
 37c:	36 95       	lsr	r19
 37e:	27 95       	ror	r18
 380:	36 95       	lsr	r19
 382:	27 95       	ror	r18
 384:	ab e7       	ldi	r26, 0x7B	; 123
 386:	b4 e1       	ldi	r27, 0x14	; 20
 388:	2f d3       	rcall	.+1630   	; 0x9e8 <__umulhisi3>
 38a:	ac 01       	movw	r20, r24
 38c:	56 95       	lsr	r21
 38e:	47 95       	ror	r20
 390:	50 93 3f 02 	sts	0x023F, r21
 394:	40 93 3e 02 	sts	0x023E, r20
 398:	9a 01       	movw	r18, r20
 39a:	ad ec       	ldi	r26, 0xCD	; 205
 39c:	bc ec       	ldi	r27, 0xCC	; 204
 39e:	24 d3       	rcall	.+1608   	; 0x9e8 <__umulhisi3>
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	9c 01       	movw	r18, r24
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
 3c2:	48 1b       	sub	r20, r24
 3c4:	59 0b       	sbc	r21, r25
 3c6:	ca 01       	movw	r24, r20
 3c8:	c0 96       	adiw	r24, 0x30	; 48
 3ca:	90 93 4b 02 	sts	0x024B, r25
 3ce:	80 93 4a 02 	sts	0x024A, r24
 3d2:	23 df       	rcall	.-442    	; 0x21a <lcd_wr_char>
 3d4:	98 01       	movw	r18, r16
 3d6:	ad ec       	ldi	r26, 0xCD	; 205
 3d8:	bc ec       	ldi	r27, 0xCC	; 204
 3da:	06 d3       	rcall	.+1548   	; 0x9e8 <__umulhisi3>
 3dc:	ac 01       	movw	r20, r24
 3de:	56 95       	lsr	r21
 3e0:	47 95       	ror	r20
 3e2:	56 95       	lsr	r21
 3e4:	47 95       	ror	r20
 3e6:	56 95       	lsr	r21
 3e8:	47 95       	ror	r20
 3ea:	50 93 3f 02 	sts	0x023F, r21
 3ee:	40 93 3e 02 	sts	0x023E, r20
 3f2:	9a 01       	movw	r18, r20
 3f4:	f9 d2       	rcall	.+1522   	; 0x9e8 <__umulhisi3>
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	9c 01       	movw	r18, r24
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	48 1b       	sub	r20, r24
 41a:	59 0b       	sbc	r21, r25
 41c:	ca 01       	movw	r24, r20
 41e:	c0 96       	adiw	r24, 0x30	; 48
 420:	90 93 49 02 	sts	0x0249, r25
 424:	80 93 48 02 	sts	0x0248, r24
 428:	f8 de       	rcall	.-528    	; 0x21a <lcd_wr_char>
 42a:	03 c0       	rjmp	.+6      	; 0x432 <lcd_print+0x176>
 42c:	c1 30       	cpi	r28, 0x01	; 1
 42e:	d1 05       	cpc	r29, r1
 430:	f1 f4       	brne	.+60     	; 0x46e <lcd_print+0x1b2>
 432:	98 01       	movw	r18, r16
 434:	ad ec       	ldi	r26, 0xCD	; 205
 436:	bc ec       	ldi	r27, 0xCC	; 204
 438:	d7 d2       	rcall	.+1454   	; 0x9e8 <__umulhisi3>
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	9c 01       	movw	r18, r24
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	08 1b       	sub	r16, r24
 45e:	19 0b       	sbc	r17, r25
 460:	c8 01       	movw	r24, r16
 462:	c0 96       	adiw	r24, 0x30	; 48
 464:	90 93 4d 02 	sts	0x024D, r25
 468:	80 93 4c 02 	sts	0x024C, r24
 46c:	d6 de       	rcall	.-596    	; 0x21a <lcd_wr_char>
 46e:	26 97       	sbiw	r28, 0x06	; 6
 470:	64 f0       	brlt	.+24     	; 0x48a <lcd_print+0x1ce>
 472:	85 e4       	ldi	r24, 0x45	; 69
 474:	d2 de       	rcall	.-604    	; 0x21a <lcd_wr_char>
 476:	09 c0       	rjmp	.+18     	; 0x48a <lcd_print+0x1ce>
 478:	c4 30       	cpi	r28, 0x04	; 4
 47a:	d1 05       	cpc	r29, r1
 47c:	09 f0       	breq	.+2      	; 0x480 <lcd_print+0x1c4>
 47e:	79 cf       	rjmp	.-270    	; 0x372 <lcd_print+0xb6>
 480:	44 cf       	rjmp	.-376    	; 0x30a <lcd_print+0x4e>
 482:	c2 30       	cpi	r28, 0x02	; 2
 484:	d1 05       	cpc	r29, r1
 486:	91 f6       	brne	.-92     	; 0x42c <lcd_print+0x170>
 488:	a5 cf       	rjmp	.-182    	; 0x3d4 <lcd_print+0x118>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <lcd_port_config>:
 494:	87 b1       	in	r24, 0x07	; 7
 496:	87 6f       	ori	r24, 0xF7	; 247
 498:	87 b9       	out	0x07, r24	; 7
 49a:	88 b1       	in	r24, 0x08	; 8
 49c:	80 78       	andi	r24, 0x80	; 128
 49e:	88 b9       	out	0x08, r24	; 8
 4a0:	08 95       	ret

000004a2 <color_sensor_pin_config>:
 4a2:	8a b1       	in	r24, 0x0a	; 10
 4a4:	8e 6f       	ori	r24, 0xFE	; 254
 4a6:	8a b9       	out	0x0a, r24	; 10
 4a8:	58 9a       	sbi	0x0b, 0	; 11
 4aa:	08 95       	ret

000004ac <port_init>:
 4ac:	f3 df       	rcall	.-26     	; 0x494 <lcd_port_config>
 4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <color_sensor_pin_config>
 4b0:	08 95       	ret

000004b2 <color_sensor_pin_interrupt_init>:
 4b2:	f8 94       	cli
 4b4:	e9 e6       	ldi	r30, 0x69	; 105
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	80 83       	st	Z, r24
 4be:	e8 9a       	sbi	0x1d, 0	; 29
 4c0:	78 94       	sei
 4c2:	08 95       	ret

000004c4 <__vector_1>:
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	80 91 34 02 	lds	r24, 0x0234
 4da:	90 91 35 02 	lds	r25, 0x0235
 4de:	a0 91 36 02 	lds	r26, 0x0236
 4e2:	b0 91 37 02 	lds	r27, 0x0237
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	a1 1d       	adc	r26, r1
 4ea:	b1 1d       	adc	r27, r1
 4ec:	80 93 34 02 	sts	0x0234, r24
 4f0:	90 93 35 02 	sts	0x0235, r25
 4f4:	a0 93 36 02 	sts	0x0236, r26
 4f8:	b0 93 37 02 	sts	0x0237, r27
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <init_devices>:
 50e:	f8 94       	cli
 510:	cd df       	rcall	.-102    	; 0x4ac <port_init>
 512:	cf df       	rcall	.-98     	; 0x4b2 <color_sensor_pin_interrupt_init>
 514:	78 94       	sei
 516:	08 95       	ret

00000518 <filter_red>:
 518:	5e 98       	cbi	0x0b, 6	; 11
 51a:	5f 98       	cbi	0x0b, 7	; 11
 51c:	08 95       	ret

0000051e <filter_green>:
 51e:	5e 9a       	sbi	0x0b, 6	; 11
 520:	5f 9a       	sbi	0x0b, 7	; 11
 522:	08 95       	ret

00000524 <filter_blue>:
 524:	5e 98       	cbi	0x0b, 6	; 11
 526:	5f 9a       	sbi	0x0b, 7	; 11
 528:	08 95       	ret

0000052a <color_sensor_scaling>:
//Color Sensing Scaling
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
 52a:	5c 9a       	sbi	0x0b, 4	; 11
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
 52c:	5d 9a       	sbi	0x0b, 5	; 11
 52e:	08 95       	ret

00000530 <red_read>:
}

void red_read(void) // function to select red filter and display the count generated by the sensor on LCD. The count will be more if the color is red. The count will be very less if its blue or green.
{
	//Red
	filter_red(); //select red filter
 530:	f3 df       	rcall	.-26     	; 0x518 <filter_red>
	pulse=0; //reset the count to 0
 532:	10 92 34 02 	sts	0x0234, r1
 536:	10 92 35 02 	sts	0x0235, r1
 53a:	10 92 36 02 	sts	0x0236, r1
 53e:	10 92 37 02 	sts	0x0237, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 542:	2f ef       	ldi	r18, 0xFF	; 255
 544:	8f e7       	ldi	r24, 0x7F	; 127
 546:	94 e0       	ldi	r25, 0x04	; 4
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	80 40       	sbci	r24, 0x00	; 0
 54c:	90 40       	sbci	r25, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <red_read+0x18>
 550:	00 c0       	rjmp	.+0      	; 0x552 <red_read+0x22>
 552:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  //store the count in variable called red
 554:	80 91 34 02 	lds	r24, 0x0234
 558:	90 91 35 02 	lds	r25, 0x0235
 55c:	a0 91 36 02 	lds	r26, 0x0236
 560:	b0 91 37 02 	lds	r27, 0x0237
 564:	80 93 44 02 	sts	0x0244, r24
 568:	90 93 45 02 	sts	0x0245, r25
 56c:	a0 93 46 02 	sts	0x0246, r26
 570:	b0 93 47 02 	sts	0x0247, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	86 de       	rcall	.-756    	; 0x286 <lcd_cursor>
	lcd_string("Red Pulses"); // Display "Red Pulses" on LCD
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	92 e0       	ldi	r25, 0x02	; 2
 57e:	75 de       	rcall	.-790    	; 0x26a <lcd_string>
	lcd_print(2,1,red,5);  //Print the count on second row
 580:	40 91 44 02 	lds	r20, 0x0244
 584:	50 91 45 02 	lds	r21, 0x0245
 588:	60 91 46 02 	lds	r22, 0x0246
 58c:	70 91 47 02 	lds	r23, 0x0247
 590:	25 e0       	ldi	r18, 0x05	; 5
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	91 de       	rcall	.-734    	; 0x2bc <lcd_print>
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9c e2       	ldi	r25, 0x2C	; 44
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <red_read+0x70>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <red_read+0x7a>
 5aa:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	ff cd       	rjmp	.-1026   	; 0x1ae <lcd_wr_command>
 5b0:	08 95       	ret

000005b2 <green_read>:
}

void green_read(void) // function to select green filter and display the count generated by the sensor on LCD. The count will be more if the color is green. The count will be very less if its blue or red.
{
	//Green
	filter_green(); //select green filter
 5b2:	b5 df       	rcall	.-150    	; 0x51e <filter_green>
	pulse=0; //reset the count to 0
 5b4:	10 92 34 02 	sts	0x0234, r1
 5b8:	10 92 35 02 	sts	0x0235, r1
 5bc:	10 92 36 02 	sts	0x0236, r1
 5c0:	10 92 37 02 	sts	0x0237, r1
 5c4:	2f ef       	ldi	r18, 0xFF	; 255
 5c6:	8f e7       	ldi	r24, 0x7F	; 127
 5c8:	94 e0       	ldi	r25, 0x04	; 4
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	90 40       	sbci	r25, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <green_read+0x18>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <green_read+0x22>
 5d4:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse;  //store the count in variable called green
 5d6:	80 91 34 02 	lds	r24, 0x0234
 5da:	90 91 35 02 	lds	r25, 0x0235
 5de:	a0 91 36 02 	lds	r26, 0x0236
 5e2:	b0 91 37 02 	lds	r27, 0x0237
 5e6:	80 93 40 02 	sts	0x0240, r24
 5ea:	90 93 41 02 	sts	0x0241, r25
 5ee:	a0 93 42 02 	sts	0x0242, r26
 5f2:	b0 93 43 02 	sts	0x0243, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	45 de       	rcall	.-886    	; 0x286 <lcd_cursor>
	lcd_string("Green Pulses"); // Display "Green Pulses" on LCD
 5fc:	8b e0       	ldi	r24, 0x0B	; 11
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	34 de       	rcall	.-920    	; 0x26a <lcd_string>
	lcd_print(2,1,green,5);  //Print the count on second row
 602:	40 91 40 02 	lds	r20, 0x0240
 606:	50 91 41 02 	lds	r21, 0x0241
 60a:	60 91 42 02 	lds	r22, 0x0242
 60e:	70 91 43 02 	lds	r23, 0x0243
 612:	25 e0       	ldi	r18, 0x05	; 5
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	50 de       	rcall	.-864    	; 0x2bc <lcd_print>
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	9c e2       	ldi	r25, 0x2C	; 44
 622:	21 50       	subi	r18, 0x01	; 1
 624:	80 40       	sbci	r24, 0x00	; 0
 626:	90 40       	sbci	r25, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <green_read+0x70>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <green_read+0x7a>
 62c:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	be cd       	rjmp	.-1156   	; 0x1ae <lcd_wr_command>
 632:	08 95       	ret

00000634 <blue_read>:
}

void blue_read(void) // function to select blue filter and display the count generated by the sensor on LCD. The count will be more if the color is blue. The count will be very less if its red or green.
{
	//Blue
	filter_blue(); //select blue filter
 634:	77 df       	rcall	.-274    	; 0x524 <filter_blue>
	pulse=0; //reset the count to 0
 636:	10 92 34 02 	sts	0x0234, r1
 63a:	10 92 35 02 	sts	0x0235, r1
 63e:	10 92 36 02 	sts	0x0236, r1
 642:	10 92 37 02 	sts	0x0237, r1
 646:	2f ef       	ldi	r18, 0xFF	; 255
 648:	8f e7       	ldi	r24, 0x7F	; 127
 64a:	94 e0       	ldi	r25, 0x04	; 4
 64c:	21 50       	subi	r18, 0x01	; 1
 64e:	80 40       	sbci	r24, 0x00	; 0
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <blue_read+0x18>
 654:	00 c0       	rjmp	.+0      	; 0x656 <blue_read+0x22>
 656:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
 658:	80 91 34 02 	lds	r24, 0x0234
 65c:	90 91 35 02 	lds	r25, 0x0235
 660:	a0 91 36 02 	lds	r26, 0x0236
 664:	b0 91 37 02 	lds	r27, 0x0237
 668:	80 93 38 02 	sts	0x0238, r24
 66c:	90 93 39 02 	sts	0x0239, r25
 670:	a0 93 3a 02 	sts	0x023A, r26
 674:	b0 93 3b 02 	sts	0x023B, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	04 de       	rcall	.-1016   	; 0x286 <lcd_cursor>
	lcd_string("Blue Pulses"); // Display "Blue Pulses" on LCD
 67e:	88 e1       	ldi	r24, 0x18	; 24
 680:	92 e0       	ldi	r25, 0x02	; 2
 682:	f3 dd       	rcall	.-1050   	; 0x26a <lcd_string>
	lcd_print(2,1,blue,5);  //Print the count on second row
 684:	40 91 38 02 	lds	r20, 0x0238
 688:	50 91 39 02 	lds	r21, 0x0239
 68c:	60 91 3a 02 	lds	r22, 0x023A
 690:	70 91 3b 02 	lds	r23, 0x023B
 694:	25 e0       	ldi	r18, 0x05	; 5
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	0f de       	rcall	.-994    	; 0x2bc <lcd_print>
 69e:	2f ef       	ldi	r18, 0xFF	; 255
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	9c e2       	ldi	r25, 0x2C	; 44
 6a4:	21 50       	subi	r18, 0x01	; 1
 6a6:	80 40       	sbci	r24, 0x00	; 0
 6a8:	90 40       	sbci	r25, 0x00	; 0
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <blue_read+0x70>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <blue_read+0x7a>
 6ae:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	7d cd       	rjmp	.-1286   	; 0x1ae <lcd_wr_command>
 6b4:	08 95       	ret

000006b6 <read>:
}
void read()
{
	   red_read(); //display the pulse count when red filter is selected
 6b6:	3c df       	rcall	.-392    	; 0x530 <red_read>
 6b8:	2f ef       	ldi	r18, 0xFF	; 255
 6ba:	8f e7       	ldi	r24, 0x7F	; 127
 6bc:	96 e1       	ldi	r25, 0x16	; 22
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <read+0x8>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <read+0x12>
 6c8:	00 00       	nop
	   _delay_ms(500);
	   green_read(); //display the pulse count when green filter is selected
 6ca:	73 df       	rcall	.-282    	; 0x5b2 <green_read>
 6cc:	2f ef       	ldi	r18, 0xFF	; 255
 6ce:	8f e7       	ldi	r24, 0x7F	; 127
 6d0:	96 e1       	ldi	r25, 0x16	; 22
 6d2:	21 50       	subi	r18, 0x01	; 1
 6d4:	80 40       	sbci	r24, 0x00	; 0
 6d6:	90 40       	sbci	r25, 0x00	; 0
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <read+0x1c>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <read+0x26>
 6dc:	00 00       	nop
	   _delay_ms(500);
	   blue_read(); //display the pulse count when blue filter is selected
 6de:	aa df       	rcall	.-172    	; 0x634 <blue_read>
 6e0:	2f ef       	ldi	r18, 0xFF	; 255
 6e2:	8f e7       	ldi	r24, 0x7F	; 127
 6e4:	96 e1       	ldi	r25, 0x16	; 22
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <read+0x30>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <read+0x3a>
 6f0:	00 00       	nop
	   _delay_ms(500);
	   lcd_cursor(1,1);  //set the cursor on row 1, column 1
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	c7 dd       	rcall	.-1138   	; 0x286 <lcd_cursor>
	lcd_string("Next"); // Display "Blue Pulses" on LCD
 6f8:	84 e2       	ldi	r24, 0x24	; 36
 6fa:	92 e0       	ldi	r25, 0x02	; 2
 6fc:	b6 dd       	rcall	.-1172   	; 0x26a <lcd_string>
	lcd_wr_command(0x01); //Clear the LCD
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	56 cd       	rjmp	.-1364   	; 0x1ae <lcd_wr_command>
 702:	08 95       	ret

00000704 <init>:
}

void init(void)
{
    init_devices();
 704:	04 df       	rcall	.-504    	; 0x50e <init_devices>
    lcd_set_4bit();
 706:	0e dd       	rcall	.-1508   	; 0x124 <lcd_set_4bit>
    lcd_init();
 708:	77 dd       	rcall	.-1298   	; 0x1f8 <lcd_init>
	color_sensor_scaling();
 70a:	0f cf       	rjmp	.-482    	; 0x52a <color_sensor_scaling>
 70c:	08 95       	ret

0000070e <main>:

#include <avr/io.h>
#include "Color_Sensor.c"

int main(void)
{
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	28 97       	sbiw	r28, 0x08	; 8
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
    int c[4],i;
	init();
 726:	ee df       	rcall	.-36     	; 0x704 <init>
	for(i=0;i<4;i++)
		c[i]=0;
 728:	1a 82       	std	Y+2, r1	; 0x02
 72a:	19 82       	std	Y+1, r1	; 0x01
 72c:	1c 82       	std	Y+4, r1	; 0x04
 72e:	1b 82       	std	Y+3, r1	; 0x03
 730:	1e 82       	std	Y+6, r1	; 0x06
 732:	1d 82       	std	Y+5, r1	; 0x05
 734:	18 86       	std	Y+8, r1	; 0x08
 736:	1f 82       	std	Y+7, r1	; 0x07
 738:	04 e0       	ldi	r16, 0x04	; 4
 73a:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0;i<4;i++)
	{
		read();
 73c:	bc df       	rcall	.-136    	; 0x6b6 <read>
		if(red>green && red>blue)
 73e:	40 91 44 02 	lds	r20, 0x0244
 742:	50 91 45 02 	lds	r21, 0x0245
 746:	60 91 46 02 	lds	r22, 0x0246
 74a:	70 91 47 02 	lds	r23, 0x0247
 74e:	80 91 40 02 	lds	r24, 0x0240
 752:	90 91 41 02 	lds	r25, 0x0241
 756:	a0 91 42 02 	lds	r26, 0x0242
 75a:	b0 91 43 02 	lds	r27, 0x0243
 75e:	84 17       	cp	r24, r20
 760:	95 07       	cpc	r25, r21
 762:	a6 07       	cpc	r26, r22
 764:	b7 07       	cpc	r27, r23
 766:	08 f0       	brcs	.+2      	; 0x76a <main+0x5c>
 768:	5b c0       	rjmp	.+182    	; 0x820 <main+0x112>
 76a:	40 91 44 02 	lds	r20, 0x0244
 76e:	50 91 45 02 	lds	r21, 0x0245
 772:	60 91 46 02 	lds	r22, 0x0246
 776:	70 91 47 02 	lds	r23, 0x0247
 77a:	80 91 38 02 	lds	r24, 0x0238
 77e:	90 91 39 02 	lds	r25, 0x0239
 782:	a0 91 3a 02 	lds	r26, 0x023A
 786:	b0 91 3b 02 	lds	r27, 0x023B
 78a:	84 17       	cp	r24, r20
 78c:	95 07       	cpc	r25, r21
 78e:	a6 07       	cpc	r26, r22
 790:	b7 07       	cpc	r27, r23
 792:	08 f0       	brcs	.+2      	; 0x796 <main+0x88>
 794:	45 c0       	rjmp	.+138    	; 0x820 <main+0x112>
			if(c[0]>red)
 796:	29 81       	ldd	r18, Y+1	; 0x01
 798:	3a 81       	ldd	r19, Y+2	; 0x02
 79a:	80 91 44 02 	lds	r24, 0x0244
 79e:	90 91 45 02 	lds	r25, 0x0245
 7a2:	a0 91 46 02 	lds	r26, 0x0246
 7a6:	b0 91 47 02 	lds	r27, 0x0247
 7aa:	a9 01       	movw	r20, r18
 7ac:	66 27       	eor	r22, r22
 7ae:	57 fd       	sbrc	r21, 7
 7b0:	60 95       	com	r22
 7b2:	76 2f       	mov	r23, r22
 7b4:	84 17       	cp	r24, r20
 7b6:	95 07       	cpc	r25, r21
 7b8:	a6 07       	cpc	r26, r22
 7ba:	b7 07       	cpc	r27, r23
 7bc:	f8 f4       	brcc	.+62     	; 0x7fc <main+0xee>
			{
				if(c[3]<red)
 7be:	80 91 44 02 	lds	r24, 0x0244
 7c2:	90 91 45 02 	lds	r25, 0x0245
 7c6:	a0 91 46 02 	lds	r26, 0x0246
 7ca:	b0 91 47 02 	lds	r27, 0x0247
 7ce:	4f 81       	ldd	r20, Y+7	; 0x07
 7d0:	58 85       	ldd	r21, Y+8	; 0x08
 7d2:	66 27       	eor	r22, r22
 7d4:	57 fd       	sbrc	r21, 7
 7d6:	60 95       	com	r22
 7d8:	76 2f       	mov	r23, r22
 7da:	48 17       	cp	r20, r24
 7dc:	59 07       	cpc	r21, r25
 7de:	6a 07       	cpc	r22, r26
 7e0:	7b 07       	cpc	r23, r27
 7e2:	08 f0       	brcs	.+2      	; 0x7e6 <main+0xd8>
 7e4:	d1 c0       	rjmp	.+418    	; 0x988 <main+0x27a>
					c[3]=red;
 7e6:	80 91 44 02 	lds	r24, 0x0244
 7ea:	90 91 45 02 	lds	r25, 0x0245
 7ee:	a0 91 46 02 	lds	r26, 0x0246
 7f2:	b0 91 47 02 	lds	r27, 0x0247
 7f6:	98 87       	std	Y+8, r25	; 0x08
 7f8:	8f 83       	std	Y+7, r24	; 0x07
 7fa:	c6 c0       	rjmp	.+396    	; 0x988 <main+0x27a>
			}
			else
			{
				if(c[3]<c[0])
 7fc:	8f 81       	ldd	r24, Y+7	; 0x07
 7fe:	98 85       	ldd	r25, Y+8	; 0x08
 800:	82 17       	cp	r24, r18
 802:	93 07       	cpc	r25, r19
 804:	14 f4       	brge	.+4      	; 0x80a <main+0xfc>
				c[3]=c[0];
 806:	38 87       	std	Y+8, r19	; 0x08
 808:	2f 83       	std	Y+7, r18	; 0x07
				c[0]=red;
 80a:	80 91 44 02 	lds	r24, 0x0244
 80e:	90 91 45 02 	lds	r25, 0x0245
 812:	a0 91 46 02 	lds	r26, 0x0246
 816:	b0 91 47 02 	lds	r27, 0x0247
 81a:	9a 83       	std	Y+2, r25	; 0x02
 81c:	89 83       	std	Y+1, r24	; 0x01
 81e:	b4 c0       	rjmp	.+360    	; 0x988 <main+0x27a>
			}
		else if(blue>green && red<blue)
 820:	40 91 38 02 	lds	r20, 0x0238
 824:	50 91 39 02 	lds	r21, 0x0239
 828:	60 91 3a 02 	lds	r22, 0x023A
 82c:	70 91 3b 02 	lds	r23, 0x023B
 830:	80 91 40 02 	lds	r24, 0x0240
 834:	90 91 41 02 	lds	r25, 0x0241
 838:	a0 91 42 02 	lds	r26, 0x0242
 83c:	b0 91 43 02 	lds	r27, 0x0243
 840:	84 17       	cp	r24, r20
 842:	95 07       	cpc	r25, r21
 844:	a6 07       	cpc	r26, r22
 846:	b7 07       	cpc	r27, r23
 848:	08 f0       	brcs	.+2      	; 0x84c <main+0x13e>
 84a:	5b c0       	rjmp	.+182    	; 0x902 <main+0x1f4>
 84c:	40 91 44 02 	lds	r20, 0x0244
 850:	50 91 45 02 	lds	r21, 0x0245
 854:	60 91 46 02 	lds	r22, 0x0246
 858:	70 91 47 02 	lds	r23, 0x0247
 85c:	80 91 38 02 	lds	r24, 0x0238
 860:	90 91 39 02 	lds	r25, 0x0239
 864:	a0 91 3a 02 	lds	r26, 0x023A
 868:	b0 91 3b 02 	lds	r27, 0x023B
 86c:	48 17       	cp	r20, r24
 86e:	59 07       	cpc	r21, r25
 870:	6a 07       	cpc	r22, r26
 872:	7b 07       	cpc	r23, r27
 874:	08 f0       	brcs	.+2      	; 0x878 <main+0x16a>
 876:	45 c0       	rjmp	.+138    	; 0x902 <main+0x1f4>
		if(c[1]>blue)
 878:	2b 81       	ldd	r18, Y+3	; 0x03
 87a:	3c 81       	ldd	r19, Y+4	; 0x04
 87c:	80 91 38 02 	lds	r24, 0x0238
 880:	90 91 39 02 	lds	r25, 0x0239
 884:	a0 91 3a 02 	lds	r26, 0x023A
 888:	b0 91 3b 02 	lds	r27, 0x023B
 88c:	a9 01       	movw	r20, r18
 88e:	66 27       	eor	r22, r22
 890:	57 fd       	sbrc	r21, 7
 892:	60 95       	com	r22
 894:	76 2f       	mov	r23, r22
 896:	84 17       	cp	r24, r20
 898:	95 07       	cpc	r25, r21
 89a:	a6 07       	cpc	r26, r22
 89c:	b7 07       	cpc	r27, r23
 89e:	f8 f4       	brcc	.+62     	; 0x8de <main+0x1d0>
		{
			if(c[3]<blue)
 8a0:	80 91 38 02 	lds	r24, 0x0238
 8a4:	90 91 39 02 	lds	r25, 0x0239
 8a8:	a0 91 3a 02 	lds	r26, 0x023A
 8ac:	b0 91 3b 02 	lds	r27, 0x023B
 8b0:	4f 81       	ldd	r20, Y+7	; 0x07
 8b2:	58 85       	ldd	r21, Y+8	; 0x08
 8b4:	66 27       	eor	r22, r22
 8b6:	57 fd       	sbrc	r21, 7
 8b8:	60 95       	com	r22
 8ba:	76 2f       	mov	r23, r22
 8bc:	48 17       	cp	r20, r24
 8be:	59 07       	cpc	r21, r25
 8c0:	6a 07       	cpc	r22, r26
 8c2:	7b 07       	cpc	r23, r27
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <main+0x1ba>
 8c6:	60 c0       	rjmp	.+192    	; 0x988 <main+0x27a>
				c[3]=blue;
 8c8:	80 91 38 02 	lds	r24, 0x0238
 8cc:	90 91 39 02 	lds	r25, 0x0239
 8d0:	a0 91 3a 02 	lds	r26, 0x023A
 8d4:	b0 91 3b 02 	lds	r27, 0x023B
 8d8:	98 87       	std	Y+8, r25	; 0x08
 8da:	8f 83       	std	Y+7, r24	; 0x07
 8dc:	55 c0       	rjmp	.+170    	; 0x988 <main+0x27a>
		}
		else
		{
			if(c[3]<c[1])
 8de:	8f 81       	ldd	r24, Y+7	; 0x07
 8e0:	98 85       	ldd	r25, Y+8	; 0x08
 8e2:	82 17       	cp	r24, r18
 8e4:	93 07       	cpc	r25, r19
 8e6:	14 f4       	brge	.+4      	; 0x8ec <main+0x1de>
			c[3]=c[1];
 8e8:	38 87       	std	Y+8, r19	; 0x08
 8ea:	2f 83       	std	Y+7, r18	; 0x07
			c[1]=blue;
 8ec:	80 91 38 02 	lds	r24, 0x0238
 8f0:	90 91 39 02 	lds	r25, 0x0239
 8f4:	a0 91 3a 02 	lds	r26, 0x023A
 8f8:	b0 91 3b 02 	lds	r27, 0x023B
 8fc:	9c 83       	std	Y+4, r25	; 0x04
 8fe:	8b 83       	std	Y+3, r24	; 0x03
 900:	43 c0       	rjmp	.+134    	; 0x988 <main+0x27a>
		}
		else 
		if(c[2]>green)
 902:	2d 81       	ldd	r18, Y+5	; 0x05
 904:	3e 81       	ldd	r19, Y+6	; 0x06
 906:	80 91 40 02 	lds	r24, 0x0240
 90a:	90 91 41 02 	lds	r25, 0x0241
 90e:	a0 91 42 02 	lds	r26, 0x0242
 912:	b0 91 43 02 	lds	r27, 0x0243
 916:	a9 01       	movw	r20, r18
 918:	66 27       	eor	r22, r22
 91a:	57 fd       	sbrc	r21, 7
 91c:	60 95       	com	r22
 91e:	76 2f       	mov	r23, r22
 920:	84 17       	cp	r24, r20
 922:	95 07       	cpc	r25, r21
 924:	a6 07       	cpc	r26, r22
 926:	b7 07       	cpc	r27, r23
 928:	f0 f4       	brcc	.+60     	; 0x966 <main+0x258>
		{
			if(c[3]<green)
 92a:	80 91 40 02 	lds	r24, 0x0240
 92e:	90 91 41 02 	lds	r25, 0x0241
 932:	a0 91 42 02 	lds	r26, 0x0242
 936:	b0 91 43 02 	lds	r27, 0x0243
 93a:	4f 81       	ldd	r20, Y+7	; 0x07
 93c:	58 85       	ldd	r21, Y+8	; 0x08
 93e:	66 27       	eor	r22, r22
 940:	57 fd       	sbrc	r21, 7
 942:	60 95       	com	r22
 944:	76 2f       	mov	r23, r22
 946:	48 17       	cp	r20, r24
 948:	59 07       	cpc	r21, r25
 94a:	6a 07       	cpc	r22, r26
 94c:	7b 07       	cpc	r23, r27
 94e:	e0 f4       	brcc	.+56     	; 0x988 <main+0x27a>
				c[3]=green;
 950:	80 91 40 02 	lds	r24, 0x0240
 954:	90 91 41 02 	lds	r25, 0x0241
 958:	a0 91 42 02 	lds	r26, 0x0242
 95c:	b0 91 43 02 	lds	r27, 0x0243
 960:	98 87       	std	Y+8, r25	; 0x08
 962:	8f 83       	std	Y+7, r24	; 0x07
 964:	11 c0       	rjmp	.+34     	; 0x988 <main+0x27a>
		}
		else
		{
			if(c[3]<c[2])
 966:	8f 81       	ldd	r24, Y+7	; 0x07
 968:	98 85       	ldd	r25, Y+8	; 0x08
 96a:	82 17       	cp	r24, r18
 96c:	93 07       	cpc	r25, r19
 96e:	14 f4       	brge	.+4      	; 0x974 <main+0x266>
			c[3]=c[2];
 970:	38 87       	std	Y+8, r19	; 0x08
 972:	2f 83       	std	Y+7, r18	; 0x07
			c[2]=green;
 974:	80 91 40 02 	lds	r24, 0x0240
 978:	90 91 41 02 	lds	r25, 0x0241
 97c:	a0 91 42 02 	lds	r26, 0x0242
 980:	b0 91 43 02 	lds	r27, 0x0243
 984:	9e 83       	std	Y+6, r25	; 0x06
 986:	8d 83       	std	Y+5, r24	; 0x05
 988:	01 50       	subi	r16, 0x01	; 1
 98a:	11 09       	sbc	r17, r1
{
    int c[4],i;
	init();
	for(i=0;i<4;i++)
		c[i]=0;
	for(i=0;i<4;i++)
 98c:	01 15       	cp	r16, r1
 98e:	11 05       	cpc	r17, r1
 990:	09 f0       	breq	.+2      	; 0x994 <main+0x286>
 992:	d4 ce       	rjmp	.-600    	; 0x73c <main+0x2e>
			c[3]=c[2];
			c[2]=green;
		}
		
	}
	int t=c[3];
 994:	0f 81       	ldd	r16, Y+7	; 0x07
 996:	18 85       	ldd	r17, Y+8	; 0x08
	
	
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 998:	61 e0       	ldi	r22, 0x01	; 1
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	74 dc       	rcall	.-1816   	; 0x286 <lcd_cursor>
	lcd_string("Threshold"); // Display "Blue Pulses" on LCD
 99e:	89 e2       	ldi	r24, 0x29	; 41
 9a0:	92 e0       	ldi	r25, 0x02	; 2
 9a2:	63 dc       	rcall	.-1850   	; 0x26a <lcd_string>
	t+=200;
 9a4:	a8 01       	movw	r20, r16
 9a6:	48 53       	subi	r20, 0x38	; 56
 9a8:	5f 4f       	sbci	r21, 0xFF	; 255
	lcd_print(2,1,t,5);
 9aa:	25 e0       	ldi	r18, 0x05	; 5
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	61 e0       	ldi	r22, 0x01	; 1
 9b0:	82 e0       	ldi	r24, 0x02	; 2
 9b2:	84 dc       	rcall	.-1784   	; 0x2bc <lcd_print>
 9b4:	2f ef       	ldi	r18, 0xFF	; 255
 9b6:	3f ef       	ldi	r19, 0xFF	; 255
 9b8:	86 e7       	ldi	r24, 0x76	; 118
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	21 50       	subi	r18, 0x01	; 1
 9be:	30 40       	sbci	r19, 0x00	; 0
 9c0:	80 40       	sbci	r24, 0x00	; 0
 9c2:	90 40       	sbci	r25, 0x00	; 0
 9c4:	d9 f7       	brne	.-10     	; 0x9bc <main+0x2ae>
 9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <main+0x2ba>
 9c8:	00 00       	nop
	_delay_ms(10000);
	lcd_wr_command(0x01); //Clear the LCD
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	f0 db       	rcall	.-2080   	; 0x1ae <lcd_wr_command>
	return 0;
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	28 96       	adiw	r28, 0x08	; 8
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <__umulhisi3>:
 9e8:	a2 9f       	mul	r26, r18
 9ea:	b0 01       	movw	r22, r0
 9ec:	b3 9f       	mul	r27, r19
 9ee:	c0 01       	movw	r24, r0
 9f0:	a3 9f       	mul	r26, r19
 9f2:	70 0d       	add	r23, r0
 9f4:	81 1d       	adc	r24, r1
 9f6:	11 24       	eor	r1, r1
 9f8:	91 1d       	adc	r25, r1
 9fa:	b2 9f       	mul	r27, r18
 9fc:	70 0d       	add	r23, r0
 9fe:	81 1d       	adc	r24, r1
 a00:	11 24       	eor	r1, r1
 a02:	91 1d       	adc	r25, r1
 a04:	08 95       	ret

00000a06 <_exit>:
 a06:	f8 94       	cli

00000a08 <__stop_program>:
 a08:	ff cf       	rjmp	.-2      	; 0xa08 <__stop_program>
