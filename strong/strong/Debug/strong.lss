
strong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00000926  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800224  00800224  000009de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001671  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000371  00000000  00000000  0000226f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd6  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  000033b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  000037f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3c  00000000  00000000  00003d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  000047b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	f8 c2       	rjmp	.+1520   	; 0x5f6 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 32       	cpi	r26, 0x24	; 36
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e2       	ldi	r26, 0x24	; 36
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 34       	cpi	r26, 0x43	; 67
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	75 d3       	rcall	.+1770   	; 0x80a <main>
 120:	00 c4       	rjmp	.+2048   	; 0x922 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_set_4bit>:

void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
	PORTD = PORTD & 0x7F; //set S3 Low
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_set_4bit+0x4>
 12c:	00 00       	nop
 12e:	40 98       	cbi	0x08, 0	; 8
 130:	41 98       	cbi	0x08, 1	; 8
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	88 b9       	out	0x08, r24	; 8
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	97 e4       	ldi	r25, 0x47	; 71
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_set_4bit+0x1e>
 142:	00 00       	nop
 144:	42 98       	cbi	0x08, 2	; 8
 146:	86 e6       	ldi	r24, 0x66	; 102
 148:	9e e0       	ldi	r25, 0x0E	; 14
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_set_4bit+0x26>
 14e:	00 00       	nop
 150:	40 98       	cbi	0x08, 0	; 8
 152:	41 98       	cbi	0x08, 1	; 8
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	88 b9       	out	0x08, r24	; 8
 158:	42 9a       	sbi	0x08, 2	; 8
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	97 e4       	ldi	r25, 0x47	; 71
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_set_4bit+0x40>
 164:	00 00       	nop
 166:	42 98       	cbi	0x08, 2	; 8
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	9e e0       	ldi	r25, 0x0E	; 14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x48>
 170:	00 00       	nop
 172:	40 98       	cbi	0x08, 0	; 8
 174:	41 98       	cbi	0x08, 1	; 8
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	88 b9       	out	0x08, r24	; 8
 17a:	42 9a       	sbi	0x08, 2	; 8
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	97 e4       	ldi	r25, 0x47	; 71
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x5c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_set_4bit+0x62>
 186:	00 00       	nop
 188:	42 98       	cbi	0x08, 2	; 8
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x6a>
 192:	00 00       	nop
 194:	40 98       	cbi	0x08, 0	; 8
 196:	41 98       	cbi	0x08, 1	; 8
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	42 9a       	sbi	0x08, 2	; 8
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	97 e4       	ldi	r25, 0x47	; 71
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x7e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x84>
 1a8:	00 00       	nop
 1aa:	42 98       	cbi	0x08, 2	; 8
 1ac:	08 95       	ret

000001ae <lcd_wr_command>:
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	28 2f       	mov	r18, r24
 1b8:	20 7f       	andi	r18, 0xF0	; 240
 1ba:	92 2b       	or	r25, r18
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	41 98       	cbi	0x08, 1	; 8
 1c2:	42 9a       	sbi	0x08, 2	; 8
 1c4:	ef ef       	ldi	r30, 0xFF	; 255
 1c6:	f7 e4       	ldi	r31, 0x47	; 71
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x1a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_wr_command+0x20>
 1ce:	00 00       	nop
 1d0:	42 98       	cbi	0x08, 2	; 8
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	9f 70       	andi	r25, 0x0F	; 15
 1d6:	98 b9       	out	0x08, r25	; 8
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	40 98       	cbi	0x08, 0	; 8
 1e4:	41 98       	cbi	0x08, 1	; 8
 1e6:	42 9a       	sbi	0x08, 2	; 8
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	97 e4       	ldi	r25, 0x47	; 71
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_wr_command+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_wr_command+0x44>
 1f2:	00 00       	nop
 1f4:	42 98       	cbi	0x08, 2	; 8
 1f6:	08 95       	ret

000001f8 <lcd_init>:
 1f8:	95 df       	rcall	.-214    	; 0x124 <lcd_set_4bit>
 1fa:	86 e6       	ldi	r24, 0x66	; 102
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x6>
 202:	00 00       	nop
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	d3 df       	rcall	.-90     	; 0x1ae <lcd_wr_command>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	d1 df       	rcall	.-94     	; 0x1ae <lcd_wr_command>
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	cf df       	rcall	.-98     	; 0x1ae <lcd_wr_command>
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	cd df       	rcall	.-102    	; 0x1ae <lcd_wr_command>
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	cb cf       	rjmp	.-106    	; 0x1ae <lcd_wr_command>
 218:	08 95       	ret

0000021a <lcd_wr_char>:
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	98 b9       	out	0x08, r25	; 8
 220:	98 b1       	in	r25, 0x08	; 8
 222:	28 2f       	mov	r18, r24
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	92 2b       	or	r25, r18
 228:	98 b9       	out	0x08, r25	; 8
 22a:	40 9a       	sbi	0x08, 0	; 8
 22c:	41 98       	cbi	0x08, 1	; 8
 22e:	42 9a       	sbi	0x08, 2	; 8
 230:	ef ef       	ldi	r30, 0xFF	; 255
 232:	f7 e4       	ldi	r31, 0x47	; 71
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
 23a:	00 00       	nop
 23c:	42 98       	cbi	0x08, 2	; 8
 23e:	98 b1       	in	r25, 0x08	; 8
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	98 b9       	out	0x08, r25	; 8
 244:	98 b1       	in	r25, 0x08	; 8
 246:	82 95       	swap	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	89 2b       	or	r24, r25
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	40 9a       	sbi	0x08, 0	; 8
 250:	41 98       	cbi	0x08, 1	; 8
 252:	42 9a       	sbi	0x08, 2	; 8
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	97 e4       	ldi	r25, 0x47	; 71
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
 25e:	00 00       	nop
 260:	42 98       	cbi	0x08, 2	; 8
 262:	08 95       	ret

00000264 <lcd_home>:
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	a3 cf       	rjmp	.-186    	; 0x1ae <lcd_wr_command>
 268:	08 95       	ret

0000026a <lcd_string>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	88 81       	ld	r24, Y
 272:	88 23       	and	r24, r24
 274:	29 f0       	breq	.+10     	; 0x280 <lcd_string+0x16>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	d0 df       	rcall	.-96     	; 0x21a <lcd_wr_char>
 27a:	89 91       	ld	r24, Y+
 27c:	81 11       	cpse	r24, r1
 27e:	fc cf       	rjmp	.-8      	; 0x278 <lcd_string+0xe>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <lcd_cursor>:
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	69 f0       	breq	.+26     	; 0x2a4 <lcd_cursor+0x1e>
 28a:	18 f4       	brcc	.+6      	; 0x292 <lcd_cursor+0xc>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	31 f0       	breq	.+12     	; 0x29c <lcd_cursor+0x16>
 290:	08 95       	ret
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	59 f0       	breq	.+22     	; 0x2ac <lcd_cursor+0x26>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	69 f0       	breq	.+26     	; 0x2b4 <lcd_cursor+0x2e>
 29a:	08 95       	ret
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	86 0f       	add	r24, r22
 2a0:	86 cf       	rjmp	.-244    	; 0x1ae <lcd_wr_command>
 2a2:	08 95       	ret
 2a4:	8f eb       	ldi	r24, 0xBF	; 191
 2a6:	86 0f       	add	r24, r22
 2a8:	82 cf       	rjmp	.-252    	; 0x1ae <lcd_wr_command>
 2aa:	08 95       	ret
 2ac:	83 e9       	ldi	r24, 0x93	; 147
 2ae:	86 0f       	add	r24, r22
 2b0:	7e cf       	rjmp	.-260    	; 0x1ae <lcd_wr_command>
 2b2:	08 95       	ret
 2b4:	83 ed       	ldi	r24, 0xD3	; 211
 2b6:	86 0f       	add	r24, r22
 2b8:	7a cf       	rjmp	.-268    	; 0x1ae <lcd_wr_command>
 2ba:	08 95       	ret

000002bc <lcd_print>:
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	8a 01       	movw	r16, r20
 2c6:	e9 01       	movw	r28, r18
 2c8:	88 23       	and	r24, r24
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <lcd_print+0x14>
 2cc:	61 11       	cpse	r22, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <lcd_print+0x18>
 2d0:	c9 df       	rcall	.-110    	; 0x264 <lcd_home>
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <lcd_print+0x1a>
 2d4:	d8 df       	rcall	.-80     	; 0x286 <lcd_cursor>
 2d6:	c5 30       	cpi	r28, 0x05	; 5
 2d8:	d1 05       	cpc	r29, r1
 2da:	09 f0       	breq	.+2      	; 0x2de <lcd_print+0x22>
 2dc:	cd c0       	rjmp	.+410    	; 0x478 <lcd_print+0x1bc>
 2de:	98 01       	movw	r18, r16
 2e0:	32 95       	swap	r19
 2e2:	22 95       	swap	r18
 2e4:	2f 70       	andi	r18, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	3f 70       	andi	r19, 0x0F	; 15
 2ea:	23 27       	eor	r18, r19
 2ec:	a7 e4       	ldi	r26, 0x47	; 71
 2ee:	b3 e0       	ldi	r27, 0x03	; 3
 2f0:	09 d3       	rcall	.+1554   	; 0x904 <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	c0 96       	adiw	r24, 0x30	; 48
 300:	90 93 2f 02 	sts	0x022F, r25
 304:	80 93 2e 02 	sts	0x022E, r24
 308:	88 df       	rcall	.-240    	; 0x21a <lcd_wr_char>
 30a:	98 01       	movw	r18, r16
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	a5 ec       	ldi	r26, 0xC5	; 197
 31a:	b0 e2       	ldi	r27, 0x20	; 32
 31c:	f3 d2       	rcall	.+1510   	; 0x904 <__umulhisi3>
 31e:	ac 01       	movw	r20, r24
 320:	52 95       	swap	r21
 322:	42 95       	swap	r20
 324:	4f 70       	andi	r20, 0x0F	; 15
 326:	45 27       	eor	r20, r21
 328:	5f 70       	andi	r21, 0x0F	; 15
 32a:	45 27       	eor	r20, r21
 32c:	50 93 31 02 	sts	0x0231, r21
 330:	40 93 30 02 	sts	0x0230, r20
 334:	9a 01       	movw	r18, r20
 336:	ad ec       	ldi	r26, 0xCD	; 205
 338:	bc ec       	ldi	r27, 0xCC	; 204
 33a:	e4 d2       	rcall	.+1480   	; 0x904 <__umulhisi3>
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	9c 01       	movw	r18, r24
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	82 0f       	add	r24, r18
 35c:	93 1f       	adc	r25, r19
 35e:	48 1b       	sub	r20, r24
 360:	59 0b       	sbc	r21, r25
 362:	ca 01       	movw	r24, r20
 364:	c0 96       	adiw	r24, 0x30	; 48
 366:	90 93 42 02 	sts	0x0242, r25
 36a:	80 93 41 02 	sts	0x0241, r24
 36e:	55 df       	rcall	.-342    	; 0x21a <lcd_wr_char>
 370:	04 c0       	rjmp	.+8      	; 0x37a <lcd_print+0xbe>
 372:	c3 30       	cpi	r28, 0x03	; 3
 374:	d1 05       	cpc	r29, r1
 376:	09 f0       	breq	.+2      	; 0x37a <lcd_print+0xbe>
 378:	84 c0       	rjmp	.+264    	; 0x482 <lcd_print+0x1c6>
 37a:	98 01       	movw	r18, r16
 37c:	36 95       	lsr	r19
 37e:	27 95       	ror	r18
 380:	36 95       	lsr	r19
 382:	27 95       	ror	r18
 384:	ab e7       	ldi	r26, 0x7B	; 123
 386:	b4 e1       	ldi	r27, 0x14	; 20
 388:	bd d2       	rcall	.+1402   	; 0x904 <__umulhisi3>
 38a:	ac 01       	movw	r20, r24
 38c:	56 95       	lsr	r21
 38e:	47 95       	ror	r20
 390:	50 93 31 02 	sts	0x0231, r21
 394:	40 93 30 02 	sts	0x0230, r20
 398:	9a 01       	movw	r18, r20
 39a:	ad ec       	ldi	r26, 0xCD	; 205
 39c:	bc ec       	ldi	r27, 0xCC	; 204
 39e:	b2 d2       	rcall	.+1380   	; 0x904 <__umulhisi3>
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	9c 01       	movw	r18, r24
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
 3c2:	48 1b       	sub	r20, r24
 3c4:	59 0b       	sbc	r21, r25
 3c6:	ca 01       	movw	r24, r20
 3c8:	c0 96       	adiw	r24, 0x30	; 48
 3ca:	90 93 3e 02 	sts	0x023E, r25
 3ce:	80 93 3d 02 	sts	0x023D, r24
 3d2:	23 df       	rcall	.-442    	; 0x21a <lcd_wr_char>
 3d4:	98 01       	movw	r18, r16
 3d6:	ad ec       	ldi	r26, 0xCD	; 205
 3d8:	bc ec       	ldi	r27, 0xCC	; 204
 3da:	94 d2       	rcall	.+1320   	; 0x904 <__umulhisi3>
 3dc:	ac 01       	movw	r20, r24
 3de:	56 95       	lsr	r21
 3e0:	47 95       	ror	r20
 3e2:	56 95       	lsr	r21
 3e4:	47 95       	ror	r20
 3e6:	56 95       	lsr	r21
 3e8:	47 95       	ror	r20
 3ea:	50 93 31 02 	sts	0x0231, r21
 3ee:	40 93 30 02 	sts	0x0230, r20
 3f2:	9a 01       	movw	r18, r20
 3f4:	87 d2       	rcall	.+1294   	; 0x904 <__umulhisi3>
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	9c 01       	movw	r18, r24
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	48 1b       	sub	r20, r24
 41a:	59 0b       	sbc	r21, r25
 41c:	ca 01       	movw	r24, r20
 41e:	c0 96       	adiw	r24, 0x30	; 48
 420:	90 93 3c 02 	sts	0x023C, r25
 424:	80 93 3b 02 	sts	0x023B, r24
 428:	f8 de       	rcall	.-528    	; 0x21a <lcd_wr_char>
 42a:	03 c0       	rjmp	.+6      	; 0x432 <lcd_print+0x176>
 42c:	c1 30       	cpi	r28, 0x01	; 1
 42e:	d1 05       	cpc	r29, r1
 430:	f1 f4       	brne	.+60     	; 0x46e <lcd_print+0x1b2>
 432:	98 01       	movw	r18, r16
 434:	ad ec       	ldi	r26, 0xCD	; 205
 436:	bc ec       	ldi	r27, 0xCC	; 204
 438:	65 d2       	rcall	.+1226   	; 0x904 <__umulhisi3>
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	9c 01       	movw	r18, r24
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	08 1b       	sub	r16, r24
 45e:	19 0b       	sbc	r17, r25
 460:	c8 01       	movw	r24, r16
 462:	c0 96       	adiw	r24, 0x30	; 48
 464:	90 93 40 02 	sts	0x0240, r25
 468:	80 93 3f 02 	sts	0x023F, r24
 46c:	d6 de       	rcall	.-596    	; 0x21a <lcd_wr_char>
 46e:	26 97       	sbiw	r28, 0x06	; 6
 470:	64 f0       	brlt	.+24     	; 0x48a <lcd_print+0x1ce>
 472:	85 e4       	ldi	r24, 0x45	; 69
 474:	d2 de       	rcall	.-604    	; 0x21a <lcd_wr_char>
 476:	09 c0       	rjmp	.+18     	; 0x48a <lcd_print+0x1ce>
 478:	c4 30       	cpi	r28, 0x04	; 4
 47a:	d1 05       	cpc	r29, r1
 47c:	09 f0       	breq	.+2      	; 0x480 <lcd_print+0x1c4>
 47e:	79 cf       	rjmp	.-270    	; 0x372 <lcd_print+0xb6>
 480:	44 cf       	rjmp	.-376    	; 0x30a <lcd_print+0x4e>
 482:	c2 30       	cpi	r28, 0x02	; 2
 484:	d1 05       	cpc	r29, r1
 486:	91 f6       	brne	.-92     	; 0x42c <lcd_print+0x170>
 488:	a5 cf       	rjmp	.-182    	; 0x3d4 <lcd_print+0x118>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <timer5_init>:
 494:	e1 e2       	ldi	r30, 0x21	; 33
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	10 82       	st	Z, r1
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	80 93 25 01 	sts	0x0125, r24
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	90 93 24 01 	sts	0x0124, r25
 4a6:	10 92 29 01 	sts	0x0129, r1
 4aa:	80 93 28 01 	sts	0x0128, r24
 4ae:	10 92 2b 01 	sts	0x012B, r1
 4b2:	80 93 2a 01 	sts	0x012A, r24
 4b6:	10 92 2d 01 	sts	0x012D, r1
 4ba:	80 93 2c 01 	sts	0x012C, r24
 4be:	89 ea       	ldi	r24, 0xA9	; 169
 4c0:	80 93 20 01 	sts	0x0120, r24
 4c4:	8b e0       	ldi	r24, 0x0B	; 11
 4c6:	80 83       	st	Z, r24
 4c8:	08 95       	ret

000004ca <motion_pin_config>:
 4ca:	81 b1       	in	r24, 0x01	; 1
 4cc:	8f 60       	ori	r24, 0x0F	; 15
 4ce:	81 b9       	out	0x01, r24	; 1
 4d0:	82 b1       	in	r24, 0x02	; 2
 4d2:	80 7f       	andi	r24, 0xF0	; 240
 4d4:	82 b9       	out	0x02, r24	; 2
 4d6:	ea e0       	ldi	r30, 0x0A	; 10
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	80 81       	ld	r24, Z
 4dc:	88 61       	ori	r24, 0x18	; 24
 4de:	80 83       	st	Z, r24
 4e0:	eb e0       	ldi	r30, 0x0B	; 11
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	80 81       	ld	r24, Z
 4e6:	88 61       	ori	r24, 0x18	; 24
 4e8:	80 83       	st	Z, r24
 4ea:	08 95       	ret

000004ec <motion_set>:
 4ec:	92 b1       	in	r25, 0x02	; 2
 4ee:	90 7f       	andi	r25, 0xF0	; 240
 4f0:	8f 70       	andi	r24, 0x0F	; 15
 4f2:	98 2b       	or	r25, r24
 4f4:	92 b9       	out	0x02, r25	; 2
 4f6:	08 95       	ret

000004f8 <forward>:
 4f8:	86 e0       	ldi	r24, 0x06	; 6
 4fa:	f8 cf       	rjmp	.-16     	; 0x4ec <motion_set>
 4fc:	08 95       	ret

000004fe <lcd_port_config>:
 4fe:	87 b1       	in	r24, 0x07	; 7
 500:	87 6f       	ori	r24, 0xF7	; 247
 502:	87 b9       	out	0x07, r24	; 7
 504:	88 b1       	in	r24, 0x08	; 8
 506:	80 78       	andi	r24, 0x80	; 128
 508:	88 b9       	out	0x08, r24	; 8
 50a:	08 95       	ret

0000050c <color_sensor_pin_config>:
 50c:	8a b1       	in	r24, 0x0a	; 10
 50e:	8e 6f       	ori	r24, 0xFE	; 254
 510:	8a b9       	out	0x0a, r24	; 10
 512:	58 9a       	sbi	0x0b, 0	; 11
 514:	08 95       	ret

00000516 <adc_pin_config>:
 516:	10 ba       	out	0x10, r1	; 16
 518:	11 ba       	out	0x11, r1	; 17
 51a:	10 92 07 01 	sts	0x0107, r1
 51e:	10 92 08 01 	sts	0x0108, r1
 522:	08 95       	ret

00000524 <servo1_pin_config>:
 524:	25 9a       	sbi	0x04, 5	; 4
 526:	2d 9a       	sbi	0x05, 5	; 5
 528:	08 95       	ret

0000052a <servo2_pin_config>:
 52a:	26 9a       	sbi	0x04, 6	; 4
 52c:	2e 9a       	sbi	0x05, 6	; 5
 52e:	08 95       	ret

00000530 <servo3_pin_config>:
 530:	27 9a       	sbi	0x04, 7	; 4
 532:	2f 9a       	sbi	0x05, 7	; 5
 534:	08 95       	ret

00000536 <timer1_init>:
 536:	e1 e8       	ldi	r30, 0x81	; 129
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	10 82       	st	Z, r1
 53c:	8c ef       	ldi	r24, 0xFC	; 252
 53e:	80 93 85 00 	sts	0x0085, r24
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	80 93 84 00 	sts	0x0084, r24
 548:	93 e0       	ldi	r25, 0x03	; 3
 54a:	90 93 89 00 	sts	0x0089, r25
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	80 93 88 00 	sts	0x0088, r24
 554:	90 93 8b 00 	sts	0x008B, r25
 558:	80 93 8a 00 	sts	0x008A, r24
 55c:	90 93 8d 00 	sts	0x008D, r25
 560:	80 93 8c 00 	sts	0x008C, r24
 564:	90 93 87 00 	sts	0x0087, r25
 568:	80 93 86 00 	sts	0x0086, r24
 56c:	8b ea       	ldi	r24, 0xAB	; 171
 56e:	80 93 80 00 	sts	0x0080, r24
 572:	10 92 82 00 	sts	0x0082, r1
 576:	8c e0       	ldi	r24, 0x0C	; 12
 578:	80 83       	st	Z, r24
 57a:	08 95       	ret

0000057c <port_init>:
 57c:	c0 df       	rcall	.-128    	; 0x4fe <lcd_port_config>
 57e:	cb df       	rcall	.-106    	; 0x516 <adc_pin_config>
 580:	3b 9a       	sbi	0x07, 3	; 7
 582:	43 98       	cbi	0x08, 3	; 8
 584:	cf df       	rcall	.-98     	; 0x524 <servo1_pin_config>
 586:	d1 df       	rcall	.-94     	; 0x52a <servo2_pin_config>
 588:	d3 df       	rcall	.-90     	; 0x530 <servo3_pin_config>
 58a:	c0 cf       	rjmp	.-128    	; 0x50c <color_sensor_pin_config>
 58c:	08 95       	ret

0000058e <ADC_Conversion>:
 58e:	88 30       	cpi	r24, 0x08	; 8
 590:	18 f0       	brcs	.+6      	; 0x598 <ADC_Conversion+0xa>
 592:	98 e0       	ldi	r25, 0x08	; 8
 594:	90 93 7b 00 	sts	0x007B, r25
 598:	87 70       	andi	r24, 0x07	; 7
 59a:	80 62       	ori	r24, 0x20	; 32
 59c:	80 93 7c 00 	sts	0x007C, r24
 5a0:	ea e7       	ldi	r30, 0x7A	; 122
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	80 64       	ori	r24, 0x40	; 64
 5a8:	80 83       	st	Z, r24
 5aa:	80 81       	ld	r24, Z
 5ac:	84 ff       	sbrs	r24, 4
 5ae:	fd cf       	rjmp	.-6      	; 0x5aa <ADC_Conversion+0x1c>
 5b0:	80 91 79 00 	lds	r24, 0x0079
 5b4:	ea e7       	ldi	r30, 0x7A	; 122
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	90 81       	ld	r25, Z
 5ba:	90 61       	ori	r25, 0x10	; 16
 5bc:	90 83       	st	Z, r25
 5be:	10 92 7b 00 	sts	0x007B, r1
 5c2:	08 95       	ret

000005c4 <print_sensor>:
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	c8 2f       	mov	r28, r24
 5ca:	d6 2f       	mov	r29, r22
 5cc:	84 2f       	mov	r24, r20
 5ce:	df df       	rcall	.-66     	; 0x58e <ADC_Conversion>
 5d0:	80 93 3a 02 	sts	0x023A, r24
 5d4:	48 2f       	mov	r20, r24
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	23 e0       	ldi	r18, 0x03	; 3
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	6d 2f       	mov	r22, r29
 5de:	8c 2f       	mov	r24, r28
 5e0:	6d de       	rcall	.-806    	; 0x2bc <lcd_print>
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <color_sensor_pin_interrupt_init>:
 5e8:	e9 e6       	ldi	r30, 0x69	; 105
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	80 83       	st	Z, r24
 5f2:	e8 9a       	sbi	0x1d, 0	; 29
 5f4:	08 95       	ret

000005f6 <__vector_1>:
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	80 91 24 02 	lds	r24, 0x0224
 60c:	90 91 25 02 	lds	r25, 0x0225
 610:	a0 91 26 02 	lds	r26, 0x0226
 614:	b0 91 27 02 	lds	r27, 0x0227
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	a1 1d       	adc	r26, r1
 61c:	b1 1d       	adc	r27, r1
 61e:	80 93 24 02 	sts	0x0224, r24
 622:	90 93 25 02 	sts	0x0225, r25
 626:	a0 93 26 02 	sts	0x0226, r26
 62a:	b0 93 27 02 	sts	0x0227, r27
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <adc_init>:
 640:	ea e7       	ldi	r30, 0x7A	; 122
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	10 82       	st	Z, r1
 646:	10 92 7b 00 	sts	0x007B, r1
 64a:	80 e2       	ldi	r24, 0x20	; 32
 64c:	80 93 7c 00 	sts	0x007C, r24
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	80 bf       	out	0x30, r24	; 48
 654:	86 e8       	ldi	r24, 0x86	; 134
 656:	80 83       	st	Z, r24
 658:	08 95       	ret

0000065a <init_devices>:
 65a:	f8 94       	cli
 65c:	8f df       	rcall	.-226    	; 0x57c <port_init>
 65e:	c4 df       	rcall	.-120    	; 0x5e8 <color_sensor_pin_interrupt_init>
 660:	ef df       	rcall	.-34     	; 0x640 <adc_init>
 662:	33 df       	rcall	.-410    	; 0x4ca <motion_pin_config>
 664:	17 df       	rcall	.-466    	; 0x494 <timer5_init>
 666:	67 df       	rcall	.-306    	; 0x536 <timer1_init>
 668:	78 94       	sei
 66a:	08 95       	ret

0000066c <filter_red>:
 66c:	5e 98       	cbi	0x0b, 6	; 11
 66e:	5f 98       	cbi	0x0b, 7	; 11
 670:	08 95       	ret

00000672 <filter_green>:
 672:	5e 9a       	sbi	0x0b, 6	; 11
 674:	5f 9a       	sbi	0x0b, 7	; 11
 676:	08 95       	ret

00000678 <filter_blue>:
 678:	5e 98       	cbi	0x0b, 6	; 11
 67a:	5f 9a       	sbi	0x0b, 7	; 11
 67c:	08 95       	ret

0000067e <color_sensor_scaling>:
//Color Sensing Scaling
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
 67e:	5c 9a       	sbi	0x0b, 4	; 11
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
 680:	5d 9a       	sbi	0x0b, 5	; 11
 682:	08 95       	ret

00000684 <red_read>:
}

void red_read(void) // function to select red filter and display the count generated by the sensor on LCD. The count will be more if the color is red. The count will be very less if its blue or green.
{
	//Red
	filter_red(); //select red filter
 684:	f3 df       	rcall	.-26     	; 0x66c <filter_red>
	pulse=0; //reset the count to 0
 686:	10 92 24 02 	sts	0x0224, r1
 68a:	10 92 25 02 	sts	0x0225, r1
 68e:	10 92 26 02 	sts	0x0226, r1
 692:	10 92 27 02 	sts	0x0227, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 696:	2f ef       	ldi	r18, 0xFF	; 255
 698:	8f e7       	ldi	r24, 0x7F	; 127
 69a:	94 e0       	ldi	r25, 0x04	; 4
 69c:	21 50       	subi	r18, 0x01	; 1
 69e:	80 40       	sbci	r24, 0x00	; 0
 6a0:	90 40       	sbci	r25, 0x00	; 0
 6a2:	e1 f7       	brne	.-8      	; 0x69c <red_read+0x18>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <red_read+0x22>
 6a6:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  //store the count in variable called red
 6a8:	80 91 24 02 	lds	r24, 0x0224
 6ac:	90 91 25 02 	lds	r25, 0x0225
 6b0:	a0 91 26 02 	lds	r26, 0x0226
 6b4:	b0 91 27 02 	lds	r27, 0x0227
 6b8:	80 93 36 02 	sts	0x0236, r24
 6bc:	90 93 37 02 	sts	0x0237, r25
 6c0:	a0 93 38 02 	sts	0x0238, r26
 6c4:	b0 93 39 02 	sts	0x0239, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 6c8:	61 e0       	ldi	r22, 0x01	; 1
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	dc dd       	rcall	.-1096   	; 0x286 <lcd_cursor>
	lcd_string("Red Pulses"); // Display "Red Pulses" on LCD
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	92 e0       	ldi	r25, 0x02	; 2
 6d2:	cb dd       	rcall	.-1130   	; 0x26a <lcd_string>
	lcd_print(2,1,red,5);  //Print the count on second row
 6d4:	40 91 36 02 	lds	r20, 0x0236
 6d8:	50 91 37 02 	lds	r21, 0x0237
 6dc:	60 91 38 02 	lds	r22, 0x0238
 6e0:	70 91 39 02 	lds	r23, 0x0239
 6e4:	25 e0       	ldi	r18, 0x05	; 5
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	e7 dd       	rcall	.-1074   	; 0x2bc <lcd_print>
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	9c e2       	ldi	r25, 0x2C	; 44
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <red_read+0x70>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <red_read+0x7a>
 6fe:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	55 cd       	rjmp	.-1366   	; 0x1ae <lcd_wr_command>
 704:	08 95       	ret

00000706 <green_read>:
}

void green_read(void) // function to select green filter and display the count generated by the sensor on LCD. The count will be more if the color is green. The count will be very less if its blue or red.
{
	//Green
	filter_green(); //select green filter
 706:	b5 df       	rcall	.-150    	; 0x672 <filter_green>
	pulse=0; //reset the count to 0
 708:	10 92 24 02 	sts	0x0224, r1
 70c:	10 92 25 02 	sts	0x0225, r1
 710:	10 92 26 02 	sts	0x0226, r1
 714:	10 92 27 02 	sts	0x0227, r1
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	8f e7       	ldi	r24, 0x7F	; 127
 71c:	94 e0       	ldi	r25, 0x04	; 4
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <green_read+0x18>
 726:	00 c0       	rjmp	.+0      	; 0x728 <green_read+0x22>
 728:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse;  //store the count in variable called green
 72a:	80 91 24 02 	lds	r24, 0x0224
 72e:	90 91 25 02 	lds	r25, 0x0225
 732:	a0 91 26 02 	lds	r26, 0x0226
 736:	b0 91 27 02 	lds	r27, 0x0227
 73a:	80 93 32 02 	sts	0x0232, r24
 73e:	90 93 33 02 	sts	0x0233, r25
 742:	a0 93 34 02 	sts	0x0234, r26
 746:	b0 93 35 02 	sts	0x0235, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	9b dd       	rcall	.-1226   	; 0x286 <lcd_cursor>
	lcd_string("Green Pulses"); // Display "Green Pulses" on LCD
 750:	8b e0       	ldi	r24, 0x0B	; 11
 752:	92 e0       	ldi	r25, 0x02	; 2
 754:	8a dd       	rcall	.-1260   	; 0x26a <lcd_string>
	lcd_print(2,1,green,5);  //Print the count on second row
 756:	40 91 32 02 	lds	r20, 0x0232
 75a:	50 91 33 02 	lds	r21, 0x0233
 75e:	60 91 34 02 	lds	r22, 0x0234
 762:	70 91 35 02 	lds	r23, 0x0235
 766:	25 e0       	ldi	r18, 0x05	; 5
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	a6 dd       	rcall	.-1204   	; 0x2bc <lcd_print>
 770:	2f ef       	ldi	r18, 0xFF	; 255
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	9c e2       	ldi	r25, 0x2C	; 44
 776:	21 50       	subi	r18, 0x01	; 1
 778:	80 40       	sbci	r24, 0x00	; 0
 77a:	90 40       	sbci	r25, 0x00	; 0
 77c:	e1 f7       	brne	.-8      	; 0x776 <green_read+0x70>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <green_read+0x7a>
 780:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	14 cd       	rjmp	.-1496   	; 0x1ae <lcd_wr_command>
 786:	08 95       	ret

00000788 <blue_read>:
}

void blue_read(void) // function to select blue filter and display the count generated by the sensor on LCD. The count will be more if the color is blue. The count will be very less if its red or green.
{
	//Blue
	filter_blue(); //select blue filter
 788:	77 df       	rcall	.-274    	; 0x678 <filter_blue>
	pulse=0; //reset the count to 0
 78a:	10 92 24 02 	sts	0x0224, r1
 78e:	10 92 25 02 	sts	0x0225, r1
 792:	10 92 26 02 	sts	0x0226, r1
 796:	10 92 27 02 	sts	0x0227, r1
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	8f e7       	ldi	r24, 0x7F	; 127
 79e:	94 e0       	ldi	r25, 0x04	; 4
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	80 40       	sbci	r24, 0x00	; 0
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <blue_read+0x18>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <blue_read+0x22>
 7aa:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
 7ac:	80 91 24 02 	lds	r24, 0x0224
 7b0:	90 91 25 02 	lds	r25, 0x0225
 7b4:	a0 91 26 02 	lds	r26, 0x0226
 7b8:	b0 91 27 02 	lds	r27, 0x0227
 7bc:	80 93 28 02 	sts	0x0228, r24
 7c0:	90 93 29 02 	sts	0x0229, r25
 7c4:	a0 93 2a 02 	sts	0x022A, r26
 7c8:	b0 93 2b 02 	sts	0x022B, r27
	
	lcd_cursor(1,1);  //set the cursor on row 1, column 1
 7cc:	61 e0       	ldi	r22, 0x01	; 1
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	5a dd       	rcall	.-1356   	; 0x286 <lcd_cursor>
	lcd_string("Blue Pulses"); // Display "Blue Pulses" on LCD
 7d2:	88 e1       	ldi	r24, 0x18	; 24
 7d4:	92 e0       	ldi	r25, 0x02	; 2
 7d6:	49 dd       	rcall	.-1390   	; 0x26a <lcd_string>
	lcd_print(2,1,blue,5);  //Print the count on second row
 7d8:	40 91 28 02 	lds	r20, 0x0228
 7dc:	50 91 29 02 	lds	r21, 0x0229
 7e0:	60 91 2a 02 	lds	r22, 0x022A
 7e4:	70 91 2b 02 	lds	r23, 0x022B
 7e8:	25 e0       	ldi	r18, 0x05	; 5
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	65 dd       	rcall	.-1334   	; 0x2bc <lcd_print>
 7f2:	2f ef       	ldi	r18, 0xFF	; 255
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	9c e2       	ldi	r25, 0x2C	; 44
 7f8:	21 50       	subi	r18, 0x01	; 1
 7fa:	80 40       	sbci	r24, 0x00	; 0
 7fc:	90 40       	sbci	r25, 0x00	; 0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <blue_read+0x70>
 800:	00 c0       	rjmp	.+0      	; 0x802 <blue_read+0x7a>
 802:	00 00       	nop
	_delay_ms(1000);	// Display for 1000ms or 1 second
	lcd_wr_command(0x01); //Clear the LCD
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	d3 cc       	rjmp	.-1626   	; 0x1ae <lcd_wr_command>
 808:	08 95       	ret

0000080a <main>:
}

int main(void)
{
    init_devices();
 80a:	27 df       	rcall	.-434    	; 0x65a <init_devices>
    lcd_set_4bit();
 80c:	8b dc       	rcall	.-1770   	; 0x124 <lcd_set_4bit>
    lcd_init();
 80e:	f4 dc       	rcall	.-1560   	; 0x1f8 <lcd_init>
	color_sensor_scaling();
 810:	36 df       	rcall	.-404    	; 0x67e <color_sensor_scaling>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 812:	88 ec       	ldi	r24, 0xC8	; 200
 814:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 818:	80 93 2a 01 	sts	0x012A, r24
    init_devices();
    lcd_set_4bit();
    lcd_init();
	color_sensor_scaling();
	velocity(200,200);
	forward();
 81c:	6d de       	rcall	.-806    	; 0x4f8 <forward>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
 81e:	0f 2e       	mov	r0, r31
 820:	f9 e8       	ldi	r31, 0x89	; 137
 822:	af 2e       	mov	r10, r31
 824:	b1 2c       	mov	r11, r1
 826:	f0 2d       	mov	r31, r0
	OCR1AL = (unsigned char) PositionPanServo;
 828:	0f 2e       	mov	r0, r31
 82a:	f8 e8       	ldi	r31, 0x88	; 136
 82c:	cf 2e       	mov	r12, r31
 82e:	d1 2c       	mov	r13, r1
 830:	f0 2d       	mov	r31, r0
 832:	0f 2e       	mov	r0, r31
 834:	f3 e2       	ldi	r31, 0x23	; 35
 836:	6f 2e       	mov	r6, r31
 838:	f0 2d       	mov	r31, r0
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
 83a:	0f 2e       	mov	r0, r31
 83c:	fb e8       	ldi	r31, 0x8B	; 139
 83e:	ef 2e       	mov	r14, r31
 840:	f1 2c       	mov	r15, r1
 842:	f0 2d       	mov	r31, r0
	OCR1BL = (unsigned char) PositionTiltServo;
 844:	0a e8       	ldi	r16, 0x8A	; 138
 846:	10 e0       	ldi	r17, 0x00	; 0
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
 848:	cd e8       	ldi	r28, 0x8D	; 141
 84a:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1CL = (unsigned char) PositionServo;
 84c:	0f 2e       	mov	r0, r31
 84e:	fc e8       	ldi	r31, 0x8C	; 140
 850:	8f 2e       	mov	r8, r31
 852:	91 2c       	mov	r9, r1
 854:	f0 2d       	mov	r31, r0
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
 856:	0f 2e       	mov	r0, r31
 858:	f8 e5       	ldi	r31, 0x58	; 88
 85a:	7f 2e       	mov	r7, r31
 85c:	f0 2d       	mov	r31, r0
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
 85e:	f5 01       	movw	r30, r10
 860:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
 862:	f6 01       	movw	r30, r12
 864:	60 82       	st	Z, r6
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
 866:	f7 01       	movw	r30, r14
 868:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
 86a:	f8 01       	movw	r30, r16
 86c:	60 82       	st	Z, r6
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
 86e:	18 82       	st	Y, r1
	OCR1CL = (unsigned char) PositionServo;
 870:	f4 01       	movw	r30, r8
 872:	60 82       	st	Z, r6
	while(1)
    {
		servo_1(0);
		servo_2(0);
		servo_3(0);
		forward();
 874:	41 de       	rcall	.-894    	; 0x4f8 <forward>
       red_read(); //display the pulse count when red filter is selected
 876:	06 df       	rcall	.-500    	; 0x684 <red_read>
 878:	ff ef       	ldi	r31, 0xFF	; 255
 87a:	2f e7       	ldi	r18, 0x7F	; 127
 87c:	36 e1       	ldi	r19, 0x16	; 22
 87e:	f1 50       	subi	r31, 0x01	; 1
 880:	20 40       	sbci	r18, 0x00	; 0
 882:	30 40       	sbci	r19, 0x00	; 0
 884:	e1 f7       	brne	.-8      	; 0x87e <main+0x74>
 886:	00 c0       	rjmp	.+0      	; 0x888 <main+0x7e>
 888:	00 00       	nop
	   _delay_ms(500);
	   green_read(); //display the pulse count when green filter is selected
 88a:	3d df       	rcall	.-390    	; 0x706 <green_read>
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	9f e7       	ldi	r25, 0x7F	; 127
 890:	e6 e1       	ldi	r30, 0x16	; 22
 892:	81 50       	subi	r24, 0x01	; 1
 894:	90 40       	sbci	r25, 0x00	; 0
 896:	e0 40       	sbci	r30, 0x00	; 0
 898:	e1 f7       	brne	.-8      	; 0x892 <main+0x88>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <main+0x92>
 89c:	00 00       	nop
	   _delay_ms(500);
	   blue_read(); //display the pulse count when blue filter is selected
 89e:	74 df       	rcall	.-280    	; 0x788 <blue_read>
 8a0:	ff ef       	ldi	r31, 0xFF	; 255
 8a2:	2f e7       	ldi	r18, 0x7F	; 127
 8a4:	36 e1       	ldi	r19, 0x16	; 22
 8a6:	f1 50       	subi	r31, 0x01	; 1
 8a8:	20 40       	sbci	r18, 0x00	; 0
 8aa:	30 40       	sbci	r19, 0x00	; 0
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <main+0x9c>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <main+0xa6>
 8b0:	00 00       	nop
	   _delay_ms(500); 
	   lcd_wr_command(0x01);
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	7c dc       	rcall	.-1800   	; 0x1ae <lcd_wr_command>
	   print_sensor(1,1,3);	//Prints value of White Line Sensor1
 8b6:	43 e0       	ldi	r20, 0x03	; 3
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	83 de       	rcall	.-762    	; 0x5c4 <print_sensor>
	   print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 8be:	42 e0       	ldi	r20, 0x02	; 2
 8c0:	65 e0       	ldi	r22, 0x05	; 5
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	7f de       	rcall	.-770    	; 0x5c4 <print_sensor>
	   print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 8c6:	41 e0       	ldi	r20, 0x01	; 1
 8c8:	69 e0       	ldi	r22, 0x09	; 9
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	7b de       	rcall	.-778    	; 0x5c4 <print_sensor>
	   print_sensor(2,1,11);
 8ce:	4b e0       	ldi	r20, 0x0B	; 11
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	82 e0       	ldi	r24, 0x02	; 2
 8d4:	77 de       	rcall	.-786    	; 0x5c4 <print_sensor>
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
 8d6:	f5 01       	movw	r30, r10
 8d8:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
 8da:	f6 01       	movw	r30, r12
 8dc:	70 82       	st	Z, r7
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
 8de:	f7 01       	movw	r30, r14
 8e0:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
 8e2:	f8 01       	movw	r30, r16
 8e4:	70 82       	st	Z, r7
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
 8e6:	18 82       	st	Y, r1
	OCR1CL = (unsigned char) PositionServo;
 8e8:	f4 01       	movw	r30, r8
 8ea:	70 82       	st	Z, r7
 8ec:	ff ef       	ldi	r31, 0xFF	; 255
 8ee:	2f e7       	ldi	r18, 0x7F	; 127
 8f0:	36 e0       	ldi	r19, 0x06	; 6
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	f1 50       	subi	r31, 0x01	; 1
 8f6:	20 40       	sbci	r18, 0x00	; 0
 8f8:	30 40       	sbci	r19, 0x00	; 0
 8fa:	80 40       	sbci	r24, 0x00	; 0
 8fc:	d9 f7       	brne	.-10     	; 0x8f4 <main+0xea>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <main+0xf6>
 900:	00 00       	nop
 902:	ad cf       	rjmp	.-166    	; 0x85e <main+0x54>

00000904 <__umulhisi3>:
 904:	a2 9f       	mul	r26, r18
 906:	b0 01       	movw	r22, r0
 908:	b3 9f       	mul	r27, r19
 90a:	c0 01       	movw	r24, r0
 90c:	a3 9f       	mul	r26, r19
 90e:	70 0d       	add	r23, r0
 910:	81 1d       	adc	r24, r1
 912:	11 24       	eor	r1, r1
 914:	91 1d       	adc	r25, r1
 916:	b2 9f       	mul	r27, r18
 918:	70 0d       	add	r23, r0
 91a:	81 1d       	adc	r24, r1
 91c:	11 24       	eor	r1, r1
 91e:	91 1d       	adc	r25, r1
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
