
SharpSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800200  00800200  00000746  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c50  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002a2  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000087a  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000038c  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000582  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  00002aa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 31       	cpi	r26, 0x16	; 22
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	3d d2       	rcall	.+1146   	; 0x580 <main>
 106:	e3 c2       	rjmp	.+1478   	; 0x6ce <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <lcd_set_4bit>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
 10a:	86 e6       	ldi	r24, 0x66	; 102
 10c:	9e e0       	ldi	r25, 0x0E	; 14
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_set_4bit+0x4>
 112:	00 00       	nop
 114:	40 98       	cbi	0x08, 0	; 8
 116:	41 98       	cbi	0x08, 1	; 8
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	42 9a       	sbi	0x08, 2	; 8
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	97 e4       	ldi	r25, 0x47	; 71
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_set_4bit+0x18>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_set_4bit+0x1e>
 128:	00 00       	nop
 12a:	42 98       	cbi	0x08, 2	; 8
 12c:	86 e6       	ldi	r24, 0x66	; 102
 12e:	9e e0       	ldi	r25, 0x0E	; 14
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x26>
 134:	00 00       	nop
 136:	40 98       	cbi	0x08, 0	; 8
 138:	41 98       	cbi	0x08, 1	; 8
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	42 9a       	sbi	0x08, 2	; 8
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	97 e4       	ldi	r25, 0x47	; 71
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x3a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_set_4bit+0x40>
 14a:	00 00       	nop
 14c:	42 98       	cbi	0x08, 2	; 8
 14e:	86 e6       	ldi	r24, 0x66	; 102
 150:	9e e0       	ldi	r25, 0x0E	; 14
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x48>
 156:	00 00       	nop
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	41 98       	cbi	0x08, 1	; 8
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	88 b9       	out	0x08, r24	; 8
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	97 e4       	ldi	r25, 0x47	; 71
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_set_4bit+0x5c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_set_4bit+0x62>
 16c:	00 00       	nop
 16e:	42 98       	cbi	0x08, 2	; 8
 170:	86 e6       	ldi	r24, 0x66	; 102
 172:	9e e0       	ldi	r25, 0x0E	; 14
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x6a>
 178:	00 00       	nop
 17a:	40 98       	cbi	0x08, 0	; 8
 17c:	41 98       	cbi	0x08, 1	; 8
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	88 b9       	out	0x08, r24	; 8
 182:	42 9a       	sbi	0x08, 2	; 8
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	97 e4       	ldi	r25, 0x47	; 71
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_set_4bit+0x7e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_set_4bit+0x84>
 18e:	00 00       	nop
 190:	42 98       	cbi	0x08, 2	; 8
 192:	08 95       	ret

00000194 <lcd_wr_command>:
 194:	98 b1       	in	r25, 0x08	; 8
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	98 b9       	out	0x08, r25	; 8
 19a:	98 b1       	in	r25, 0x08	; 8
 19c:	28 2f       	mov	r18, r24
 19e:	20 7f       	andi	r18, 0xF0	; 240
 1a0:	92 2b       	or	r25, r18
 1a2:	98 b9       	out	0x08, r25	; 8
 1a4:	40 98       	cbi	0x08, 0	; 8
 1a6:	41 98       	cbi	0x08, 1	; 8
 1a8:	42 9a       	sbi	0x08, 2	; 8
 1aa:	ef ef       	ldi	r30, 0xFF	; 255
 1ac:	f7 e4       	ldi	r31, 0x47	; 71
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_wr_command+0x1a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_wr_command+0x20>
 1b4:	00 00       	nop
 1b6:	42 98       	cbi	0x08, 2	; 8
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	98 b1       	in	r25, 0x08	; 8
 1c0:	82 95       	swap	r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	89 2b       	or	r24, r25
 1c6:	88 b9       	out	0x08, r24	; 8
 1c8:	40 98       	cbi	0x08, 0	; 8
 1ca:	41 98       	cbi	0x08, 1	; 8
 1cc:	42 9a       	sbi	0x08, 2	; 8
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	97 e4       	ldi	r25, 0x47	; 71
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_wr_command+0x3e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_wr_command+0x44>
 1d8:	00 00       	nop
 1da:	42 98       	cbi	0x08, 2	; 8
 1dc:	08 95       	ret

000001de <lcd_init>:
 1de:	86 e6       	ldi	r24, 0x66	; 102
 1e0:	9e e0       	ldi	r25, 0x0E	; 14
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x4>
 1e6:	00 00       	nop
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	d4 df       	rcall	.-88     	; 0x194 <lcd_wr_command>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	d2 df       	rcall	.-92     	; 0x194 <lcd_wr_command>
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	d0 df       	rcall	.-96     	; 0x194 <lcd_wr_command>
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	ce df       	rcall	.-100    	; 0x194 <lcd_wr_command>
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	cc cf       	rjmp	.-104    	; 0x194 <lcd_wr_command>
 1fc:	08 95       	ret

000001fe <lcd_wr_char>:
 1fe:	98 b1       	in	r25, 0x08	; 8
 200:	9f 70       	andi	r25, 0x0F	; 15
 202:	98 b9       	out	0x08, r25	; 8
 204:	98 b1       	in	r25, 0x08	; 8
 206:	28 2f       	mov	r18, r24
 208:	20 7f       	andi	r18, 0xF0	; 240
 20a:	92 2b       	or	r25, r18
 20c:	98 b9       	out	0x08, r25	; 8
 20e:	40 9a       	sbi	0x08, 0	; 8
 210:	41 98       	cbi	0x08, 1	; 8
 212:	42 9a       	sbi	0x08, 2	; 8
 214:	ef ef       	ldi	r30, 0xFF	; 255
 216:	f7 e4       	ldi	r31, 0x47	; 71
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_wr_char+0x1a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_wr_char+0x20>
 21e:	00 00       	nop
 220:	42 98       	cbi	0x08, 2	; 8
 222:	98 b1       	in	r25, 0x08	; 8
 224:	9f 70       	andi	r25, 0x0F	; 15
 226:	98 b9       	out	0x08, r25	; 8
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	82 95       	swap	r24
 22c:	80 7f       	andi	r24, 0xF0	; 240
 22e:	89 2b       	or	r24, r25
 230:	88 b9       	out	0x08, r24	; 8
 232:	40 9a       	sbi	0x08, 0	; 8
 234:	41 98       	cbi	0x08, 1	; 8
 236:	42 9a       	sbi	0x08, 2	; 8
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	97 e4       	ldi	r25, 0x47	; 71
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_wr_char+0x3e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_wr_char+0x44>
 242:	00 00       	nop
 244:	42 98       	cbi	0x08, 2	; 8
 246:	08 95       	ret

00000248 <lcd_home>:
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	a4 cf       	rjmp	.-184    	; 0x194 <lcd_wr_command>
 24c:	08 95       	ret

0000024e <lcd_cursor>:
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	69 f0       	breq	.+26     	; 0x26c <lcd_cursor+0x1e>
 252:	18 f4       	brcc	.+6      	; 0x25a <lcd_cursor+0xc>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	31 f0       	breq	.+12     	; 0x264 <lcd_cursor+0x16>
 258:	08 95       	ret
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	59 f0       	breq	.+22     	; 0x274 <lcd_cursor+0x26>
 25e:	84 30       	cpi	r24, 0x04	; 4
 260:	69 f0       	breq	.+26     	; 0x27c <lcd_cursor+0x2e>
 262:	08 95       	ret
 264:	8f e7       	ldi	r24, 0x7F	; 127
 266:	86 0f       	add	r24, r22
 268:	95 cf       	rjmp	.-214    	; 0x194 <lcd_wr_command>
 26a:	08 95       	ret
 26c:	8f eb       	ldi	r24, 0xBF	; 191
 26e:	86 0f       	add	r24, r22
 270:	91 cf       	rjmp	.-222    	; 0x194 <lcd_wr_command>
 272:	08 95       	ret
 274:	83 e9       	ldi	r24, 0x93	; 147
 276:	86 0f       	add	r24, r22
 278:	8d cf       	rjmp	.-230    	; 0x194 <lcd_wr_command>
 27a:	08 95       	ret
 27c:	83 ed       	ldi	r24, 0xD3	; 211
 27e:	86 0f       	add	r24, r22
 280:	89 cf       	rjmp	.-238    	; 0x194 <lcd_wr_command>
 282:	08 95       	ret

00000284 <lcd_print>:
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	8a 01       	movw	r16, r20
 28e:	e9 01       	movw	r28, r18
 290:	88 23       	and	r24, r24
 292:	11 f0       	breq	.+4      	; 0x298 <lcd_print+0x14>
 294:	61 11       	cpse	r22, r1
 296:	02 c0       	rjmp	.+4      	; 0x29c <lcd_print+0x18>
 298:	d7 df       	rcall	.-82     	; 0x248 <lcd_home>
 29a:	01 c0       	rjmp	.+2      	; 0x29e <lcd_print+0x1a>
 29c:	d8 df       	rcall	.-80     	; 0x24e <lcd_cursor>
 29e:	c5 30       	cpi	r28, 0x05	; 5
 2a0:	d1 05       	cpc	r29, r1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <lcd_print+0x22>
 2a4:	cd c0       	rjmp	.+410    	; 0x440 <lcd_print+0x1bc>
 2a6:	98 01       	movw	r18, r16
 2a8:	32 95       	swap	r19
 2aa:	22 95       	swap	r18
 2ac:	2f 70       	andi	r18, 0x0F	; 15
 2ae:	23 27       	eor	r18, r19
 2b0:	3f 70       	andi	r19, 0x0F	; 15
 2b2:	23 27       	eor	r18, r19
 2b4:	a7 e4       	ldi	r26, 0x47	; 71
 2b6:	b3 e0       	ldi	r27, 0x03	; 3
 2b8:	fb d1       	rcall	.+1014   	; 0x6b0 <__umulhisi3>
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	c0 96       	adiw	r24, 0x30	; 48
 2c8:	90 93 08 02 	sts	0x0208, r25
 2cc:	80 93 07 02 	sts	0x0207, r24
 2d0:	96 df       	rcall	.-212    	; 0x1fe <lcd_wr_char>
 2d2:	98 01       	movw	r18, r16
 2d4:	36 95       	lsr	r19
 2d6:	27 95       	ror	r18
 2d8:	36 95       	lsr	r19
 2da:	27 95       	ror	r18
 2dc:	36 95       	lsr	r19
 2de:	27 95       	ror	r18
 2e0:	a5 ec       	ldi	r26, 0xC5	; 197
 2e2:	b0 e2       	ldi	r27, 0x20	; 32
 2e4:	e5 d1       	rcall	.+970    	; 0x6b0 <__umulhisi3>
 2e6:	ac 01       	movw	r20, r24
 2e8:	52 95       	swap	r21
 2ea:	42 95       	swap	r20
 2ec:	4f 70       	andi	r20, 0x0F	; 15
 2ee:	45 27       	eor	r20, r21
 2f0:	5f 70       	andi	r21, 0x0F	; 15
 2f2:	45 27       	eor	r20, r21
 2f4:	50 93 0a 02 	sts	0x020A, r21
 2f8:	40 93 09 02 	sts	0x0209, r20
 2fc:	9a 01       	movw	r18, r20
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	d6 d1       	rcall	.+940    	; 0x6b0 <__umulhisi3>
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	9c 01       	movw	r18, r24
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
 326:	48 1b       	sub	r20, r24
 328:	59 0b       	sbc	r21, r25
 32a:	ca 01       	movw	r24, r20
 32c:	c0 96       	adiw	r24, 0x30	; 48
 32e:	90 93 15 02 	sts	0x0215, r25
 332:	80 93 14 02 	sts	0x0214, r24
 336:	63 df       	rcall	.-314    	; 0x1fe <lcd_wr_char>
 338:	04 c0       	rjmp	.+8      	; 0x342 <lcd_print+0xbe>
 33a:	c3 30       	cpi	r28, 0x03	; 3
 33c:	d1 05       	cpc	r29, r1
 33e:	09 f0       	breq	.+2      	; 0x342 <lcd_print+0xbe>
 340:	84 c0       	rjmp	.+264    	; 0x44a <lcd_print+0x1c6>
 342:	98 01       	movw	r18, r16
 344:	36 95       	lsr	r19
 346:	27 95       	ror	r18
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	ab e7       	ldi	r26, 0x7B	; 123
 34e:	b4 e1       	ldi	r27, 0x14	; 20
 350:	af d1       	rcall	.+862    	; 0x6b0 <__umulhisi3>
 352:	ac 01       	movw	r20, r24
 354:	56 95       	lsr	r21
 356:	47 95       	ror	r20
 358:	50 93 0a 02 	sts	0x020A, r21
 35c:	40 93 09 02 	sts	0x0209, r20
 360:	9a 01       	movw	r18, r20
 362:	ad ec       	ldi	r26, 0xCD	; 205
 364:	bc ec       	ldi	r27, 0xCC	; 204
 366:	a4 d1       	rcall	.+840    	; 0x6b0 <__umulhisi3>
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	9c 01       	movw	r18, r24
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	48 1b       	sub	r20, r24
 38c:	59 0b       	sbc	r21, r25
 38e:	ca 01       	movw	r24, r20
 390:	c0 96       	adiw	r24, 0x30	; 48
 392:	90 93 11 02 	sts	0x0211, r25
 396:	80 93 10 02 	sts	0x0210, r24
 39a:	31 df       	rcall	.-414    	; 0x1fe <lcd_wr_char>
 39c:	98 01       	movw	r18, r16
 39e:	ad ec       	ldi	r26, 0xCD	; 205
 3a0:	bc ec       	ldi	r27, 0xCC	; 204
 3a2:	86 d1       	rcall	.+780    	; 0x6b0 <__umulhisi3>
 3a4:	ac 01       	movw	r20, r24
 3a6:	56 95       	lsr	r21
 3a8:	47 95       	ror	r20
 3aa:	56 95       	lsr	r21
 3ac:	47 95       	ror	r20
 3ae:	56 95       	lsr	r21
 3b0:	47 95       	ror	r20
 3b2:	50 93 0a 02 	sts	0x020A, r21
 3b6:	40 93 09 02 	sts	0x0209, r20
 3ba:	9a 01       	movw	r18, r20
 3bc:	79 d1       	rcall	.+754    	; 0x6b0 <__umulhisi3>
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	9c 01       	movw	r18, r24
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	48 1b       	sub	r20, r24
 3e2:	59 0b       	sbc	r21, r25
 3e4:	ca 01       	movw	r24, r20
 3e6:	c0 96       	adiw	r24, 0x30	; 48
 3e8:	90 93 0f 02 	sts	0x020F, r25
 3ec:	80 93 0e 02 	sts	0x020E, r24
 3f0:	06 df       	rcall	.-500    	; 0x1fe <lcd_wr_char>
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <lcd_print+0x176>
 3f4:	c1 30       	cpi	r28, 0x01	; 1
 3f6:	d1 05       	cpc	r29, r1
 3f8:	f1 f4       	brne	.+60     	; 0x436 <lcd_print+0x1b2>
 3fa:	98 01       	movw	r18, r16
 3fc:	ad ec       	ldi	r26, 0xCD	; 205
 3fe:	bc ec       	ldi	r27, 0xCC	; 204
 400:	57 d1       	rcall	.+686    	; 0x6b0 <__umulhisi3>
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	9c 01       	movw	r18, r24
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	82 0f       	add	r24, r18
 422:	93 1f       	adc	r25, r19
 424:	08 1b       	sub	r16, r24
 426:	19 0b       	sbc	r17, r25
 428:	c8 01       	movw	r24, r16
 42a:	c0 96       	adiw	r24, 0x30	; 48
 42c:	90 93 13 02 	sts	0x0213, r25
 430:	80 93 12 02 	sts	0x0212, r24
 434:	e4 de       	rcall	.-568    	; 0x1fe <lcd_wr_char>
 436:	26 97       	sbiw	r28, 0x06	; 6
 438:	64 f0       	brlt	.+24     	; 0x452 <lcd_print+0x1ce>
 43a:	85 e4       	ldi	r24, 0x45	; 69
 43c:	e0 de       	rcall	.-576    	; 0x1fe <lcd_wr_char>
 43e:	09 c0       	rjmp	.+18     	; 0x452 <lcd_print+0x1ce>
 440:	c4 30       	cpi	r28, 0x04	; 4
 442:	d1 05       	cpc	r29, r1
 444:	09 f0       	breq	.+2      	; 0x448 <lcd_print+0x1c4>
 446:	79 cf       	rjmp	.-270    	; 0x33a <lcd_print+0xb6>
 448:	44 cf       	rjmp	.-376    	; 0x2d2 <lcd_print+0x4e>
 44a:	c2 30       	cpi	r28, 0x02	; 2
 44c:	d1 05       	cpc	r29, r1
 44e:	91 f6       	brne	.-92     	; 0x3f4 <lcd_print+0x170>
 450:	a5 cf       	rjmp	.-182    	; 0x39c <lcd_print+0x118>
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <lcd_port_config>:
 45c:	87 b1       	in	r24, 0x07	; 7
 45e:	87 6f       	ori	r24, 0xF7	; 247
 460:	87 b9       	out	0x07, r24	; 7
 462:	88 b1       	in	r24, 0x08	; 8
 464:	80 78       	andi	r24, 0x80	; 128
 466:	88 b9       	out	0x08, r24	; 8
 468:	08 95       	ret

0000046a <adc_pin_config>:
 46a:	10 ba       	out	0x10, r1	; 16
 46c:	11 ba       	out	0x11, r1	; 17
 46e:	10 92 07 01 	sts	0x0107, r1
 472:	10 92 08 01 	sts	0x0108, r1
 476:	08 95       	ret

00000478 <motion_pin_config>:
 478:	81 b1       	in	r24, 0x01	; 1
 47a:	8f 60       	ori	r24, 0x0F	; 15
 47c:	81 b9       	out	0x01, r24	; 1
 47e:	82 b1       	in	r24, 0x02	; 2
 480:	80 7f       	andi	r24, 0xF0	; 240
 482:	82 b9       	out	0x02, r24	; 2
 484:	ea e0       	ldi	r30, 0x0A	; 10
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	80 81       	ld	r24, Z
 48a:	88 61       	ori	r24, 0x18	; 24
 48c:	80 83       	st	Z, r24
 48e:	eb e0       	ldi	r30, 0x0B	; 11
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	80 81       	ld	r24, Z
 494:	88 61       	ori	r24, 0x18	; 24
 496:	80 83       	st	Z, r24
 498:	08 95       	ret

0000049a <buzzer_pin_config>:
 49a:	3b 9a       	sbi	0x07, 3	; 7
 49c:	43 98       	cbi	0x08, 3	; 8
 49e:	08 95       	ret

000004a0 <port_init>:
 4a0:	dd df       	rcall	.-70     	; 0x45c <lcd_port_config>
 4a2:	e3 df       	rcall	.-58     	; 0x46a <adc_pin_config>
 4a4:	e9 df       	rcall	.-46     	; 0x478 <motion_pin_config>
 4a6:	f9 cf       	rjmp	.-14     	; 0x49a <buzzer_pin_config>
 4a8:	08 95       	ret

000004aa <timer5_init>:
 4aa:	e1 e2       	ldi	r30, 0x21	; 33
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	10 82       	st	Z, r1
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	80 93 25 01 	sts	0x0125, r24
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	90 93 24 01 	sts	0x0124, r25
 4bc:	10 92 29 01 	sts	0x0129, r1
 4c0:	80 93 28 01 	sts	0x0128, r24
 4c4:	10 92 2b 01 	sts	0x012B, r1
 4c8:	80 93 2a 01 	sts	0x012A, r24
 4cc:	10 92 2d 01 	sts	0x012D, r1
 4d0:	80 93 2c 01 	sts	0x012C, r24
 4d4:	89 ea       	ldi	r24, 0xA9	; 169
 4d6:	80 93 20 01 	sts	0x0120, r24
 4da:	8b e0       	ldi	r24, 0x0B	; 11
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <buzzer_off>:
 4e0:	86 b1       	in	r24, 0x06	; 6
 4e2:	87 7f       	andi	r24, 0xF7	; 247
 4e4:	88 b9       	out	0x08, r24	; 8
 4e6:	08 95       	ret

000004e8 <adc_init>:
 4e8:	ea e7       	ldi	r30, 0x7A	; 122
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	10 82       	st	Z, r1
 4ee:	10 92 7b 00 	sts	0x007B, r1
 4f2:	80 e2       	ldi	r24, 0x20	; 32
 4f4:	80 93 7c 00 	sts	0x007C, r24
 4f8:	80 e8       	ldi	r24, 0x80	; 128
 4fa:	80 bf       	out	0x30, r24	; 48
 4fc:	86 e8       	ldi	r24, 0x86	; 134
 4fe:	80 83       	st	Z, r24
 500:	08 95       	ret

00000502 <ADC_Conversion>:
 502:	88 30       	cpi	r24, 0x08	; 8
 504:	18 f0       	brcs	.+6      	; 0x50c <ADC_Conversion+0xa>
 506:	98 e0       	ldi	r25, 0x08	; 8
 508:	90 93 7b 00 	sts	0x007B, r25
 50c:	87 70       	andi	r24, 0x07	; 7
 50e:	80 62       	ori	r24, 0x20	; 32
 510:	80 93 7c 00 	sts	0x007C, r24
 514:	ea e7       	ldi	r30, 0x7A	; 122
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	80 83       	st	Z, r24
 51e:	80 81       	ld	r24, Z
 520:	84 ff       	sbrs	r24, 4
 522:	fd cf       	rjmp	.-6      	; 0x51e <ADC_Conversion+0x1c>
 524:	80 91 79 00 	lds	r24, 0x0079
 528:	ea e7       	ldi	r30, 0x7A	; 122
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	90 81       	ld	r25, Z
 52e:	90 61       	ori	r25, 0x10	; 16
 530:	90 83       	st	Z, r25
 532:	10 92 7b 00 	sts	0x007B, r1
 536:	08 95       	ret

00000538 <print_sensor>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	c8 2f       	mov	r28, r24
 53e:	d6 2f       	mov	r29, r22
 540:	84 2f       	mov	r24, r20
 542:	df df       	rcall	.-66     	; 0x502 <ADC_Conversion>
 544:	80 93 0b 02 	sts	0x020B, r24
 548:	48 2f       	mov	r20, r24
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	23 e0       	ldi	r18, 0x03	; 3
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	6d 2f       	mov	r22, r29
 552:	8c 2f       	mov	r24, r28
 554:	97 de       	rcall	.-722    	; 0x284 <lcd_print>
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
 55c:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 55e:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 560:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 562:	98 2b       	or	r25, r24
 PORTA = PortARestore; 		// executing the command
 564:	92 b9       	out	0x02, r25	; 2
 566:	08 95       	ret

00000568 <forward>:
}

void forward (void) 
{
  motion_set (0x06);
 568:	86 e0       	ldi	r24, 0x06	; 6
 56a:	f8 cf       	rjmp	.-16     	; 0x55c <motion_set>
 56c:	08 95       	ret

0000056e <stop>:
}

void stop (void)
{
  motion_set (0x00);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	f5 cf       	rjmp	.-22     	; 0x55c <motion_set>
 572:	08 95       	ret

00000574 <init_devices>:
}

void init_devices (void)
{
 	cli(); //Clears the global interrupts
 574:	f8 94       	cli
	port_init();
 576:	94 df       	rcall	.-216    	; 0x4a0 <port_init>
	adc_init();
 578:	b7 df       	rcall	.-146    	; 0x4e8 <adc_init>
	timer5_init();
 57a:	97 df       	rcall	.-210    	; 0x4aa <timer5_init>
	sei();   //Enables the global interrupts
 57c:	78 94       	sei
 57e:	08 95       	ret

00000580 <main>:
}

//Main Function
int main()
{
	init_devices();
 580:	f9 df       	rcall	.-14     	; 0x574 <init_devices>
	lcd_set_4bit();
 582:	c3 dd       	rcall	.-1146   	; 0x10a <lcd_set_4bit>
	lcd_init();
 584:	2c de       	rcall	.-936    	; 0x1de <lcd_init>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 586:	08 e2       	ldi	r16, 0x28	; 40
 588:	11 e0       	ldi	r17, 0x01	; 1
 58a:	0f 2e       	mov	r0, r31
 58c:	f6 e9       	ldi	r31, 0x96	; 150
 58e:	ff 2e       	mov	r15, r31
 590:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
 592:	ca e2       	ldi	r28, 0x2A	; 42
 594:	d1 e0       	ldi	r29, 0x01	; 1
 596:	0f 2e       	mov	r0, r31
 598:	f2 e3       	ldi	r31, 0x32	; 50
 59a:	ef 2e       	mov	r14, r31
 59c:	f0 2d       	mov	r31, r0
	lcd_init();
	
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	b0 df       	rcall	.-160    	; 0x502 <ADC_Conversion>
 5a2:	80 93 04 02 	sts	0x0204, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	ac df       	rcall	.-168    	; 0x502 <ADC_Conversion>
 5aa:	80 93 03 02 	sts	0x0203, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	a8 df       	rcall	.-176    	; 0x502 <ADC_Conversion>
 5b2:	80 93 02 02 	sts	0x0202, r24
		Front_Sharp_Sensor = ADC_Conversion(11);
 5b6:	8b e0       	ldi	r24, 0x0B	; 11
 5b8:	a4 df       	rcall	.-184    	; 0x502 <ADC_Conversion>
 5ba:	80 93 01 02 	sts	0x0201, r24
		Front_IR_Sensor = ADC_Conversion(6);
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	a0 df       	rcall	.-192    	; 0x502 <ADC_Conversion>
 5c2:	80 93 00 02 	sts	0x0200, r24

		flag1=0;
 5c6:	10 92 06 02 	sts	0x0206, r1
		flag2=0;
 5ca:	10 92 05 02 	sts	0x0205, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 5ce:	43 e0       	ldi	r20, 0x03	; 3
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	b1 df       	rcall	.-158    	; 0x538 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 5d6:	42 e0       	ldi	r20, 0x02	; 2
 5d8:	65 e0       	ldi	r22, 0x05	; 5
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	ad df       	rcall	.-166    	; 0x538 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	69 e0       	ldi	r22, 0x09	; 9
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	a9 df       	rcall	.-174    	; 0x538 <print_sensor>
		print_sensor(2,4,11);	//Prints Value of Front Sharp Sensor
 5e6:	4b e0       	ldi	r20, 0x0B	; 11
 5e8:	64 e0       	ldi	r22, 0x04	; 4
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	a5 df       	rcall	.-182    	; 0x538 <print_sensor>
		print_sensor(2,8,6);	//Prints Value of Front IR Sensor
 5ee:	46 e0       	ldi	r20, 0x06	; 6
 5f0:	68 e0       	ldi	r22, 0x08	; 8
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	a1 df       	rcall	.-190    	; 0x538 <print_sensor>
				

		if(Front_Sharp_Sensor>0x82 || Front_IR_Sensor<0xF0)
 5f6:	80 91 01 02 	lds	r24, 0x0201
 5fa:	83 38       	cpi	r24, 0x83	; 131
 5fc:	20 f4       	brcc	.+8      	; 0x606 <main+0x86>
 5fe:	80 91 00 02 	lds	r24, 0x0200
 602:	80 3f       	cpi	r24, 0xF0	; 240
 604:	20 f4       	brcc	.+8      	; 0x60e <main+0x8e>
		{
			flag2=1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 05 02 	sts	0x0205, r24
			stop();
 60c:	b0 df       	rcall	.-160    	; 0x56e <stop>
		//	buzzer_on();
			
		}

		if((Center_white_line<0x28) && (flag2==0))
 60e:	80 91 03 02 	lds	r24, 0x0203
 612:	88 32       	cpi	r24, 0x28	; 40
 614:	60 f4       	brcc	.+24     	; 0x62e <main+0xae>
 616:	80 91 05 02 	lds	r24, 0x0205
 61a:	81 11       	cpse	r24, r1
 61c:	08 c0       	rjmp	.+16     	; 0x62e <main+0xae>
		{
			flag1=1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 06 02 	sts	0x0206, r24
			buzzer_off();
 624:	5d df       	rcall	.-326    	; 0x4e0 <buzzer_off>
			forward();
 626:	a0 df       	rcall	.-192    	; 0x568 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 628:	f8 01       	movw	r30, r16
 62a:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 62c:	f8 82       	st	Y, r15
			buzzer_off();
			forward();
			velocity(150,150);
		}

		if((Left_white_line>0x28) && (flag1==0) && (flag2==0))
 62e:	80 91 04 02 	lds	r24, 0x0204
 632:	89 32       	cpi	r24, 0x29	; 41
 634:	80 f0       	brcs	.+32     	; 0x656 <main+0xd6>
 636:	80 91 06 02 	lds	r24, 0x0206
 63a:	81 11       	cpse	r24, r1
 63c:	0c c0       	rjmp	.+24     	; 0x656 <main+0xd6>
 63e:	80 91 05 02 	lds	r24, 0x0205
 642:	81 11       	cpse	r24, r1
 644:	08 c0       	rjmp	.+16     	; 0x656 <main+0xd6>
		{
			flag1=1;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 06 02 	sts	0x0206, r24
			buzzer_off();
 64c:	49 df       	rcall	.-366    	; 0x4e0 <buzzer_off>
			forward();
 64e:	8c df       	rcall	.-232    	; 0x568 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 650:	f8 01       	movw	r30, r16
 652:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 654:	e8 82       	st	Y, r14
			buzzer_off();
			forward();
			velocity(150,50);
		}

		if((Right_white_line>0x28) && (flag1==0) && (flag2==0))
 656:	80 91 02 02 	lds	r24, 0x0202
 65a:	89 32       	cpi	r24, 0x29	; 41
 65c:	80 f0       	brcs	.+32     	; 0x67e <main+0xfe>
 65e:	80 91 06 02 	lds	r24, 0x0206
 662:	81 11       	cpse	r24, r1
 664:	0c c0       	rjmp	.+24     	; 0x67e <main+0xfe>
 666:	80 91 05 02 	lds	r24, 0x0205
 66a:	81 11       	cpse	r24, r1
 66c:	08 c0       	rjmp	.+16     	; 0x67e <main+0xfe>
		{
			flag1=1;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	80 93 06 02 	sts	0x0206, r24
			buzzer_off();
 674:	35 df       	rcall	.-406    	; 0x4e0 <buzzer_off>
			forward();
 676:	78 df       	rcall	.-272    	; 0x568 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 678:	f8 01       	movw	r30, r16
 67a:	e0 82       	st	Z, r14
	OCR5BL = (unsigned char)right_motor;
 67c:	f8 82       	st	Y, r15
			buzzer_off();
			forward();
			velocity(50,150);
		}

		if((Center_white_line>0x28) && (Left_white_line>0x28) && (Right_white_line>0x28) && (flag2==0)) 
 67e:	80 91 03 02 	lds	r24, 0x0203
 682:	89 32       	cpi	r24, 0x29	; 41
 684:	08 f4       	brcc	.+2      	; 0x688 <main+0x108>
 686:	8b cf       	rjmp	.-234    	; 0x59e <main+0x1e>
 688:	80 91 04 02 	lds	r24, 0x0204
 68c:	89 32       	cpi	r24, 0x29	; 41
 68e:	08 f4       	brcc	.+2      	; 0x692 <main+0x112>
 690:	86 cf       	rjmp	.-244    	; 0x59e <main+0x1e>
 692:	80 91 02 02 	lds	r24, 0x0202
 696:	89 32       	cpi	r24, 0x29	; 41
 698:	08 f4       	brcc	.+2      	; 0x69c <main+0x11c>
 69a:	81 cf       	rjmp	.-254    	; 0x59e <main+0x1e>
 69c:	80 91 05 02 	lds	r24, 0x0205
 6a0:	81 11       	cpse	r24, r1
 6a2:	7d cf       	rjmp	.-262    	; 0x59e <main+0x1e>
		{
			buzzer_off();
 6a4:	1d df       	rcall	.-454    	; 0x4e0 <buzzer_off>
			forward();
 6a6:	60 df       	rcall	.-320    	; 0x568 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 6a8:	f8 01       	movw	r30, r16
 6aa:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 6ac:	18 82       	st	Y, r1
 6ae:	77 cf       	rjmp	.-274    	; 0x59e <main+0x1e>

000006b0 <__umulhisi3>:
 6b0:	a2 9f       	mul	r26, r18
 6b2:	b0 01       	movw	r22, r0
 6b4:	b3 9f       	mul	r27, r19
 6b6:	c0 01       	movw	r24, r0
 6b8:	a3 9f       	mul	r26, r19
 6ba:	70 0d       	add	r23, r0
 6bc:	81 1d       	adc	r24, r1
 6be:	11 24       	eor	r1, r1
 6c0:	91 1d       	adc	r25, r1
 6c2:	b2 9f       	mul	r27, r18
 6c4:	70 0d       	add	r23, r0
 6c6:	81 1d       	adc	r24, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	91 1d       	adc	r25, r1
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
